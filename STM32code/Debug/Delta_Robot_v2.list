
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f620  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800f878  0800f878  00010878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010288  08010288  00012200  2**0
                  CONTENTS
  4 .ARM          00000008  08010288  08010288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010290  08010290  00012200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010290  08010290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010294  08010294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08010298  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  20000200  08010498  00012200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b3c4  08010498  000123c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209a1  00000000  00000000  00012236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de8  00000000  00000000  00032bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001579  00000000  00000000  00038558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000597a  00000000  00000000  00039ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ea1  00000000  00000000  0003f44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127007  00000000  00000000  000632ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a2f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cb0  00000000  00000000  0018a338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00192fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000200 	.word	0x20000200
 8000274:	00000000 	.word	0x00000000
 8000278:	0800f860 	.word	0x0800f860

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000204 	.word	0x20000204
 8000294:	0800f860 	.word	0x0800f860

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <Relay_0_Set+0x14>)
 800103e:	f002 fdc3 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	42020800 	.word	0x42020800

0800104c <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2110      	movs	r1, #16
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <Relay_0_Reset+0x14>)
 8001056:	f002 fdb7 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	42020800 	.word	0x42020800

08001064 <Relay_0_Read>:

uint8_t Relay_0_Read(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RELAY0_PORT, RELAY0_PIN);
 8001068:	2110      	movs	r1, #16
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <Relay_0_Read+0x14>)
 800106c:	f002 fd94 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	42020800 	.word	0x42020800

0800107c <Relay_1_Set>:

void Relay_1_Set(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <Relay_1_Set+0x14>)
 8001088:	f002 fd9e 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	42020400 	.word	0x42020400

08001094 <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109e:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <Relay_1_Reset+0x14>)
 80010a0:	f002 fd92 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	42020400 	.word	0x42020400

080010ac <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0f0      	sub	sp, #448	@ 0x1c0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80010ba:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 80010bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80010c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <Menu_UART_Start+0x84>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	4611      	mov	r1, r2
 80010ca:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f00a ffd5 	bl	800c07e <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80010da:	e013      	b.n	8001104 <Menu_UART_Start+0x58>
 80010dc:	f107 020c 	add.w	r2, r7, #12
 80010e0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80010e4:	18d1      	adds	r1, r2, r3
 80010e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010ea:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	2201      	movs	r2, #1
 80010f4:	6800      	ldr	r0, [r0, #0]
 80010f6:	f009 f877 	bl	800a1e8 <HAL_UART_Transmit>
 80010fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001104:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001108:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 800110c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e1      	bne.n	80010dc <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 8001118:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800111c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	f000 f807 	bl	8001134 <Menu_UART_Update>
}
 8001126:	bf00      	nop
 8001128:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	0800f878 	.word	0x0800f878

08001134 <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <Menu_UART_Update+0x18>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	4798      	blx	r3
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000

08001150 <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b09c      	sub	sp, #112	@ 0x70
 8001154:	af06      	add	r7, sp, #24
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8001158:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2224      	movs	r2, #36	@ 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00a fefb 	bl	800bf62 <memset>
	uint32_t poz0;
	uint32_t poz1;
	uint32_t poz2;

	uint8_t *Menu_Main[] = {
 800116c:	4b75      	ldr	r3, [pc, #468]	@ (8001344 <Menu_UART_Main+0x1f4>)
 800116e:	f107 040c 	add.w	r4, r7, #12
 8001172:	461d      	mov	r5, r3
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117c:	e884 0003 	stmia.w	r4, {r0, r1}
			"Set a",
			"Move to motor poz",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2206      	movs	r2, #6
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb55 	bl	8001838 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 800118e:	2300      	movs	r3, #0
 8001190:	813b      	strh	r3, [r7, #8]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001192:	f107 0108 	add.w	r1, r7, #8
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	2201      	movs	r2, #1
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f009 f8c1 	bl	800a324 <HAL_UART_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 81d3 	bne.w	8001550 <Menu_UART_Main+0x400>
		{
			switch (rx_buff[0])
 80011aa:	7a3b      	ldrb	r3, [r7, #8]
 80011ac:	3b30      	subs	r3, #48	@ 0x30
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	f200 81d0 	bhi.w	8001554 <Menu_UART_Main+0x404>
 80011b4:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <Menu_UART_Main+0x6c>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	0800124f 	.word	0x0800124f
 80011c4:	080012c9 	.word	0x080012c9
 80011c8:	0800136d 	.word	0x0800136d
 80011cc:	0800153f 	.word	0x0800153f
 80011d0:	08001547 	.word	0x08001547
			{
				case '0':
					sprintf(tx_buff, "\r\nf MAX was: %d\r\n",Get_f_MAX());
 80011d4:	f000 fe72 	bl	8001ebc <Get_f_MAX>
 80011d8:	4602      	mov	r2, r0
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	495a      	ldr	r1, [pc, #360]	@ (8001348 <Menu_UART_Main+0x1f8>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00a fe5b 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fb6d 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input f MAX\r\n");
 80011f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f6:	4a55      	ldr	r2, [pc, #340]	@ (800134c <Menu_UART_Main+0x1fc>)
 80011f8:	461c      	mov	r4, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	c407      	stmia	r4!, {r0, r1, r2}
 8001200:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fb5f 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	2214      	movs	r2, #20
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fb77 	bl	800190a <UART_In>
					Set_f_MAX(atoi(tx_buff));
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	4618      	mov	r0, r3
 8001222:	f009 fe82 	bl	800af2a <atoi>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fe17 	bl	8001e5c <Set_f_MAX>
					sprintf(tx_buff, "New f MAX is: %d\r\n",Get_f_MAX());
 800122e:	f000 fe45 	bl	8001ebc <Get_f_MAX>
 8001232:	4602      	mov	r2, r0
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	4945      	ldr	r1, [pc, #276]	@ (8001350 <Menu_UART_Main+0x200>)
 800123a:	4618      	mov	r0, r3
 800123c:	f00a fe2e 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fb40 	bl	80018cc <UART_Out>
					break;
 800124c:	e17f      	b.n	800154e <Menu_UART_Main+0x3fe>
				case '1':
					sprintf(tx_buff, "\r\nf MIN was: %d\r\n",Get_f_MIN());
 800124e:	f000 fe41 	bl	8001ed4 <Get_f_MIN>
 8001252:	4602      	mov	r2, r0
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	493e      	ldr	r1, [pc, #248]	@ (8001354 <Menu_UART_Main+0x204>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00a fe1e 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fb30 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input f MIN\r\n");
 800126c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001270:	4a39      	ldr	r2, [pc, #228]	@ (8001358 <Menu_UART_Main+0x208>)
 8001272:	461c      	mov	r4, r3
 8001274:	4613      	mov	r3, r2
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	c407      	stmia	r4!, {r0, r1, r2}
 800127a:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fb22 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 8001288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128c:	2214      	movs	r2, #20
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fb3a 	bl	800190a <UART_In>
					Set_f_MIN(atoi(tx_buff));
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4618      	mov	r0, r3
 800129c:	f009 fe45 	bl	800af2a <atoi>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fdea 	bl	8001e7c <Set_f_MIN>
					sprintf(tx_buff, "New f MIN is: %d\r\n",Get_f_MIN());
 80012a8:	f000 fe14 	bl	8001ed4 <Get_f_MIN>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	492a      	ldr	r1, [pc, #168]	@ (800135c <Menu_UART_Main+0x20c>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00a fdf1 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80012ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fb03 	bl	80018cc <UART_Out>
					break;
 80012c6:	e142      	b.n	800154e <Menu_UART_Main+0x3fe>
				case '2':
					sprintf(tx_buff, "\r\na MAX was: %d\r\n",Get_a_MAX());
 80012c8:	f000 fe10 	bl	8001eec <Get_a_MAX>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d2:	4923      	ldr	r1, [pc, #140]	@ (8001360 <Menu_UART_Main+0x210>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00a fde1 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 faf3 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input a MAX\r\n");
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <Menu_UART_Main+0x214>)
 80012ec:	461c      	mov	r4, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f2:	c407      	stmia	r4!, {r0, r1, r2}
 80012f4:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80012f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fae5 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2214      	movs	r2, #20
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fafd 	bl	800190a <UART_In>
					Set_a_MAX(atoi(tx_buff));
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4618      	mov	r0, r3
 8001316:	f009 fe08 	bl	800af2a <atoi>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fdbd 	bl	8001e9c <Set_a_MAX>
					sprintf(tx_buff, "New a MAX is: %d\r\n",Get_a_MAX());
 8001322:	f000 fde3 	bl	8001eec <Get_a_MAX>
 8001326:	4602      	mov	r2, r0
 8001328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132c:	490e      	ldr	r1, [pc, #56]	@ (8001368 <Menu_UART_Main+0x218>)
 800132e:	4618      	mov	r0, r3
 8001330:	f00a fdb4 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fac6 	bl	80018cc <UART_Out>
					break;
 8001340:	e105      	b.n	800154e <Menu_UART_Main+0x3fe>
 8001342:	bf00      	nop
 8001344:	0800fc50 	.word	0x0800fc50
 8001348:	0800fa28 	.word	0x0800fa28
 800134c:	0800fa3c 	.word	0x0800fa3c
 8001350:	0800fa4c 	.word	0x0800fa4c
 8001354:	0800fa60 	.word	0x0800fa60
 8001358:	0800fa74 	.word	0x0800fa74
 800135c:	0800fa84 	.word	0x0800fa84
 8001360:	0800fa98 	.word	0x0800fa98
 8001364:	0800faac 	.word	0x0800faac
 8001368:	0800fabc 	.word	0x0800fabc
				case '3':
					sprintf(tx_buff, "\r\nMotor 0 poz was: %d\r\n",M_Poz_0());
 800136c:	f000 fdca 	bl	8001f04 <M_Poz_0>
 8001370:	4602      	mov	r2, r0
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	497a      	ldr	r1, [pc, #488]	@ (8001560 <Menu_UART_Main+0x410>)
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fd8f 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 faa1 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input motor 0 poz\r\n");
 800138a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138e:	4a75      	ldr	r2, [pc, #468]	@ (8001564 <Menu_UART_Main+0x414>)
 8001390:	461c      	mov	r4, r3
 8001392:	4615      	mov	r5, r2
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fa92 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 80013a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ac:	2214      	movs	r2, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 faaa 	bl	800190a <UART_In>
					poz0 = atoi(tx_buff);
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f009 fdb5 	bl	800af2a <atoi>
 80013c0:	4603      	mov	r3, r0
 80013c2:	657b      	str	r3, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New motor 0 poz will be: %d\r\n",poz0);
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013ca:	4967      	ldr	r1, [pc, #412]	@ (8001568 <Menu_UART_Main+0x418>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00a fd65 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa77 	bl	80018cc <UART_Out>

					sprintf(tx_buff, "\r\nMotor 1 poz was: %d\r\n",M_Poz_1());
 80013de:	f000 fd9d 	bl	8001f1c <M_Poz_1>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4960      	ldr	r1, [pc, #384]	@ (800156c <Menu_UART_Main+0x41c>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fd56 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fa68 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input motor 1 poz\r\n");
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	4a5b      	ldr	r2, [pc, #364]	@ (8001570 <Menu_UART_Main+0x420>)
 8001402:	461c      	mov	r4, r3
 8001404:	4615      	mov	r5, r2
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fa59 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 800141a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141e:	2214      	movs	r2, #20
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fa71 	bl	800190a <UART_In>
					poz1 = atoi(tx_buff);
 8001428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142c:	4618      	mov	r0, r3
 800142e:	f009 fd7c 	bl	800af2a <atoi>
 8001432:	4603      	mov	r3, r0
 8001434:	653b      	str	r3, [r7, #80]	@ 0x50
					sprintf(tx_buff, "New motor 1 poz will be: %d\r\n",poz1);
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800143c:	494d      	ldr	r1, [pc, #308]	@ (8001574 <Menu_UART_Main+0x424>)
 800143e:	4618      	mov	r0, r3
 8001440:	f00a fd2c 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa3e 	bl	80018cc <UART_Out>

					sprintf(tx_buff, "\r\nMotor 2 poz was: %d\r\n",M_Poz_2());
 8001450:	f000 fd70 	bl	8001f34 <M_Poz_2>
 8001454:	4602      	mov	r2, r0
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	4947      	ldr	r1, [pc, #284]	@ (8001578 <Menu_UART_Main+0x428>)
 800145c:	4618      	mov	r0, r3
 800145e:	f00a fd1d 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa2f 	bl	80018cc <UART_Out>
					strcpy(tx_buff, "Input motor 2 poz\r\n");
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4a42      	ldr	r2, [pc, #264]	@ (800157c <Menu_UART_Main+0x42c>)
 8001474:	461c      	mov	r4, r3
 8001476:	4615      	mov	r5, r2
 8001478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8001480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa20 	bl	80018cc <UART_Out>
					UART_In(huart, tx_buff, 20);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	2214      	movs	r2, #20
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fa38 	bl	800190a <UART_In>
					poz2 = atoi(tx_buff);
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4618      	mov	r0, r3
 80014a0:	f009 fd43 	bl	800af2a <atoi>
 80014a4:	4603      	mov	r3, r0
 80014a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
					sprintf(tx_buff, "New motor 2 poz will be: %d\r\n",poz2);
 80014a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014ae:	4934      	ldr	r1, [pc, #208]	@ (8001580 <Menu_UART_Main+0x430>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00a fcf3 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa05 	bl	80018cc <UART_Out>

					move(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 80014c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80014c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80014c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014c8:	230c      	movs	r3, #12
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <Menu_UART_Main+0x434>)
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	2304      	movs	r3, #4
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <Menu_UART_Main+0x438>)
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <Menu_UART_Main+0x43c>)
 80014de:	f000 fbc3 	bl	8001c68 <move>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 80014e2:	f000 fd0f 	bl	8001f04 <M_Poz_0>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	4928      	ldr	r1, [pc, #160]	@ (8001590 <Menu_UART_Main+0x440>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00a fcd4 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f9e6 	bl	80018cc <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 8001500:	f000 fd0c 	bl	8001f1c <M_Poz_1>
 8001504:	4602      	mov	r2, r0
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4922      	ldr	r1, [pc, #136]	@ (8001594 <Menu_UART_Main+0x444>)
 800150c:	4618      	mov	r0, r3
 800150e:	f00a fcc5 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f9d7 	bl	80018cc <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 800151e:	f000 fd09 	bl	8001f34 <M_Poz_2>
 8001522:	4602      	mov	r2, r0
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	491b      	ldr	r1, [pc, #108]	@ (8001598 <Menu_UART_Main+0x448>)
 800152a:	4618      	mov	r0, r3
 800152c:	f00a fcb6 	bl	800be9c <siprintf>
					UART_Out(huart, tx_buff);
 8001530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f9c8 	bl	80018cc <UART_Out>
					break;
 800153c:	e007      	b.n	800154e <Menu_UART_Main+0x3fe>
				case '4':
					Menu_State = Menu_UART_Relay;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <Menu_UART_Main+0x44c>)
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <Menu_UART_Main+0x450>)
 8001542:	601a      	str	r2, [r3, #0]
					break;
 8001544:	e003      	b.n	800154e <Menu_UART_Main+0x3fe>
				case '5':
					Menu_State = Menu_UART_Sensors;
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <Menu_UART_Main+0x44c>)
 8001548:	4a16      	ldr	r2, [pc, #88]	@ (80015a4 <Menu_UART_Main+0x454>)
 800154a:	601a      	str	r2, [r3, #0]
					break;
 800154c:	bf00      	nop
			}
			break;
 800154e:	e001      	b.n	8001554 <Menu_UART_Main+0x404>
		} else {
			__NOP();
 8001550:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001552:	e61e      	b.n	8001192 <Menu_UART_Main+0x42>
			break;
 8001554:	bf00      	nop
		}
	}
}
 8001556:	bf00      	nop
 8001558:	3758      	adds	r7, #88	@ 0x58
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	0800fad0 	.word	0x0800fad0
 8001564:	0800fae8 	.word	0x0800fae8
 8001568:	0800fafc 	.word	0x0800fafc
 800156c:	0800fb1c 	.word	0x0800fb1c
 8001570:	0800fb34 	.word	0x0800fb34
 8001574:	0800fb48 	.word	0x0800fb48
 8001578:	0800fb68 	.word	0x0800fb68
 800157c:	0800fb80 	.word	0x0800fb80
 8001580:	0800fb94 	.word	0x0800fb94
 8001584:	2003acf0 	.word	0x2003acf0
 8001588:	2003aca4 	.word	0x2003aca4
 800158c:	2003ad3c 	.word	0x2003ad3c
 8001590:	0800fbb4 	.word	0x0800fbb4
 8001594:	0800fbcc 	.word	0x0800fbcc
 8001598:	0800fbe4 	.word	0x0800fbe4
 800159c:	20000000 	.word	0x20000000
 80015a0:	08001655 	.word	0x08001655
 80015a4:	080015a9 	.word	0x080015a9

080015a8 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b094      	sub	sp, #80	@ 0x50
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80015b0:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ba:	2224      	movs	r2, #36	@ 0x24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f00a fccf 	bl	800bf62 <memset>

	uint8_t *Menu_Sensor[] = {
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <Menu_UART_Sensors+0xa0>)
 80015c6:	f107 040c 	add.w	r4, r7, #12
 80015ca:	461d      	mov	r5, r3
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2207      	movs	r2, #7
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f929 	bl	8001838 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 80015e6:	2300      	movs	r3, #0
 80015e8:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80015ea:	f107 0108 	add.w	r1, r7, #8
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	2201      	movs	r2, #1
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f008 fe95 	bl	800a324 <HAL_UART_Receive>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11b      	bne.n	8001638 <Menu_UART_Sensors+0x90>
			{
				switch (rx_buff[0])
 8001600:	7a3b      	ldrb	r3, [r7, #8]
 8001602:	3b30      	subs	r3, #48	@ 0x30
 8001604:	2b06      	cmp	r3, #6
 8001606:	d819      	bhi.n	800163c <Menu_UART_Sensors+0x94>
 8001608:	a201      	add	r2, pc, #4	@ (adr r2, 8001610 <Menu_UART_Sensors+0x68>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001635 	.word	0x08001635
 8001614:	08001635 	.word	0x08001635
 8001618:	08001635 	.word	0x08001635
 800161c:	08001635 	.word	0x08001635
 8001620:	08001635 	.word	0x08001635
 8001624:	08001635 	.word	0x08001635
 8001628:	0800162d 	.word	0x0800162d
					case '4':
						break;
					case '5':
						break;
					case '6':
						Menu_State = Menu_UART_Main;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <Menu_UART_Sensors+0xa4>)
 800162e:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <Menu_UART_Sensors+0xa8>)
 8001630:	601a      	str	r2, [r3, #0]
						break;
 8001632:	e000      	b.n	8001636 <Menu_UART_Sensors+0x8e>
						break;
 8001634:	bf00      	nop
				}
				break;
 8001636:	e001      	b.n	800163c <Menu_UART_Sensors+0x94>
			} else {
				__NOP();
 8001638:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800163a:	e7d6      	b.n	80015ea <Menu_UART_Sensors+0x42>
				break;
 800163c:	bf00      	nop
			}
		}
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	@ 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
 8001646:	bf00      	nop
 8001648:	0800fcc8 	.word	0x0800fcc8
 800164c:	20000000 	.word	0x20000000
 8001650:	08001151 	.word	0x08001151

08001654 <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b092      	sub	sp, #72	@ 0x48
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 800165c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00a fc79 	bl	800bf62 <memset>

	uint8_t *Menu_Relay[] = {
 8001670:	4b66      	ldr	r3, [pc, #408]	@ (800180c <Menu_UART_Relay+0x1b8>)
 8001672:	f107 040c 	add.w	r4, r7, #12
 8001676:	461d      	mov	r5, r3
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2205      	movs	r2, #5
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8d5 	bl	8001838 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 800168e:	2300      	movs	r3, #0
 8001690:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001692:	f107 0108 	add.w	r1, r7, #8
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	2201      	movs	r2, #1
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f008 fe41 	bl	800a324 <HAL_UART_Receive>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 80aa 	bne.w	80017fe <Menu_UART_Relay+0x1aa>
			{
				switch (rx_buff[0])
 80016aa:	7a3b      	ldrb	r3, [r7, #8]
 80016ac:	3b30      	subs	r3, #48	@ 0x30
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	f200 80a7 	bhi.w	8001802 <Menu_UART_Relay+0x1ae>
 80016b4:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <Menu_UART_Relay+0x68>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016d1 	.word	0x080016d1
 80016c0:	08001717 	.word	0x08001717
 80016c4:	08001763 	.word	0x08001763
 80016c8:	080017a9 	.word	0x080017a9
 80016cc:	080017f5 	.word	0x080017f5
				{
					case '0':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was set\r\n");
 80016d0:	f7ff fcc8 	bl	8001064 <Relay_0_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <Menu_UART_Relay+0x9a>
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4a4c      	ldr	r2, [pc, #304]	@ (8001810 <Menu_UART_Relay+0x1bc>)
 80016e0:	461c      	mov	r4, r3
 80016e2:	4615      	mov	r5, r2
 80016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	6023      	str	r3, [r4, #0]
 80016ec:	e00a      	b.n	8001704 <Menu_UART_Relay+0xb0>
						else strcpy(tx_buff, "\r\nRelay 0 was already set\r\n");
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4a48      	ldr	r2, [pc, #288]	@ (8001814 <Menu_UART_Relay+0x1c0>)
 80016f4:	461c      	mov	r4, r3
 80016f6:	4615      	mov	r5, r2
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8de 	bl	80018cc <UART_Out>
						Relay_0_Set();
 8001710:	f7ff fc90 	bl	8001034 <Relay_0_Set>
						break;
 8001714:	e072      	b.n	80017fc <Menu_UART_Relay+0x1a8>
					case '1':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was already reset\r\n");
 8001716:	f7ff fca5 	bl	8001064 <Relay_0_Read>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10b      	bne.n	8001738 <Menu_UART_Relay+0xe4>
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	4a3c      	ldr	r2, [pc, #240]	@ (8001818 <Menu_UART_Relay+0x1c4>)
 8001726:	461c      	mov	r4, r3
 8001728:	4615      	mov	r5, r2
 800172a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001732:	c407      	stmia	r4!, {r0, r1, r2}
 8001734:	8023      	strh	r3, [r4, #0]
 8001736:	e00b      	b.n	8001750 <Menu_UART_Relay+0xfc>
						else strcpy(tx_buff, "\r\nRelay 0 was reset\r\n");
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4a37      	ldr	r2, [pc, #220]	@ (800181c <Menu_UART_Relay+0x1c8>)
 800173e:	461c      	mov	r4, r3
 8001740:	4615      	mov	r5, r2
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 0003 	ldmia.w	r5, {r0, r1}
 800174a:	6020      	str	r0, [r4, #0]
 800174c:	3404      	adds	r4, #4
 800174e:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8b8 	bl	80018cc <UART_Out>
						Relay_0_Reset();
 800175c:	f7ff fc76 	bl	800104c <Relay_0_Reset>
						break;
 8001760:	e04c      	b.n	80017fc <Menu_UART_Relay+0x1a8>
					case '2':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was set\r\n");
 8001762:	f7ff fc7f 	bl	8001064 <Relay_0_Read>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <Menu_UART_Relay+0x12c>
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4a2b      	ldr	r2, [pc, #172]	@ (8001820 <Menu_UART_Relay+0x1cc>)
 8001772:	461c      	mov	r4, r3
 8001774:	4615      	mov	r5, r2
 8001776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	e00a      	b.n	8001796 <Menu_UART_Relay+0x142>
						else strcpy(tx_buff, "\r\nRelay 1 was already set\r\n");
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4a27      	ldr	r2, [pc, #156]	@ (8001824 <Menu_UART_Relay+0x1d0>)
 8001786:	461c      	mov	r4, r3
 8001788:	4615      	mov	r5, r2
 800178a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f895 	bl	80018cc <UART_Out>
						Relay_1_Set();
 80017a2:	f7ff fc6b 	bl	800107c <Relay_1_Set>
						break;
 80017a6:	e029      	b.n	80017fc <Menu_UART_Relay+0x1a8>
					case '3':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was already reset\r\n");
 80017a8:	f7ff fc5c 	bl	8001064 <Relay_0_Read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10b      	bne.n	80017ca <Menu_UART_Relay+0x176>
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <Menu_UART_Relay+0x1d4>)
 80017b8:	461c      	mov	r4, r3
 80017ba:	4615      	mov	r5, r2
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017c4:	c407      	stmia	r4!, {r0, r1, r2}
 80017c6:	8023      	strh	r3, [r4, #0]
 80017c8:	e00b      	b.n	80017e2 <Menu_UART_Relay+0x18e>
						else strcpy(tx_buff, "\r\nRelay 1 was reset\r\n");
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	4a17      	ldr	r2, [pc, #92]	@ (800182c <Menu_UART_Relay+0x1d8>)
 80017d0:	461c      	mov	r4, r3
 80017d2:	4615      	mov	r5, r2
 80017d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017dc:	6020      	str	r0, [r4, #0]
 80017de:	3404      	adds	r4, #4
 80017e0:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f86f 	bl	80018cc <UART_Out>
						Relay_1_Reset();
 80017ee:	f7ff fc51 	bl	8001094 <Relay_1_Reset>
						break;
 80017f2:	e003      	b.n	80017fc <Menu_UART_Relay+0x1a8>
					case '4':
						Menu_State = Menu_UART_Main;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <Menu_UART_Relay+0x1dc>)
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <Menu_UART_Relay+0x1e0>)
 80017f8:	601a      	str	r2, [r3, #0]
						break;
 80017fa:	bf00      	nop
				}
				break;
 80017fc:	e001      	b.n	8001802 <Menu_UART_Relay+0x1ae>
			} else {
				__NOP();
 80017fe:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001800:	e747      	b.n	8001692 <Menu_UART_Relay+0x3e>
				break;
 8001802:	bf00      	nop
			}
		}
}
 8001804:	bf00      	nop
 8001806:	3748      	adds	r7, #72	@ 0x48
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	0800fdec 	.word	0x0800fdec
 8001810:	0800fce4 	.word	0x0800fce4
 8001814:	0800fcf8 	.word	0x0800fcf8
 8001818:	0800fd14 	.word	0x0800fd14
 800181c:	0800fd34 	.word	0x0800fd34
 8001820:	0800fd4c 	.word	0x0800fd4c
 8001824:	0800fd60 	.word	0x0800fd60
 8001828:	0800fd7c 	.word	0x0800fd7c
 800182c:	0800fd9c 	.word	0x0800fd9c
 8001830:	20000000 	.word	0x20000000
 8001834:	08001151 	.word	0x08001151

08001838 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	@ 0x40
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8001844:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2224      	movs	r2, #36	@ 0x24
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f00a fb85 	bl	800bf62 <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001858:	f107 0114 	add.w	r1, r7, #20
 800185c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001860:	2204      	movs	r2, #4
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f008 fcc0 	bl	800a1e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001868:	f107 0114 	add.w	r1, r7, #20
 800186c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001870:	2204      	movs	r2, #4
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f008 fcb8 	bl	800a1e8 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 8001878:	2300      	movs	r3, #0
 800187a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800187e:	e018      	b.n	80018b2 <Menu_UART_Out+0x7a>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 8001880:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8001884:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f107 0014 	add.w	r0, r7, #20
 8001894:	460a      	mov	r2, r1
 8001896:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <Menu_UART_Out+0x90>)
 8001898:	f00a fb00 	bl	800be9c <siprintf>
		UART_Out(huart, tx_buff);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f812 	bl	80018cc <UART_Out>
	for(uint8_t i=0;i<size;i++)
 80018a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018ac:	3301      	adds	r3, #1
 80018ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80018b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8e1      	bhi.n	8001880 <Menu_UART_Out+0x48>
	}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3740      	adds	r7, #64	@ 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	0800fe00 	.word	0x0800fe00

080018cc <UART_Out>:

void UART_Out(UART_HandleTypeDef *huart, uint8_t* p)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	for(uint8_t j=0;p[j];j++) HAL_UART_Transmit(huart, (p+j), 1, 1000);
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e00b      	b.n	80018f4 <UART_Out+0x28>
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	18d1      	adds	r1, r2, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	2201      	movs	r2, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f008 fc7d 	bl	800a1e8 <HAL_UART_Transmit>
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ed      	bne.n	80018dc <UART_Out+0x10>
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <UART_In>:

void UART_In(UART_HandleTypeDef *huart, uint8_t* p, uint8_t len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b088      	sub	sp, #32
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	4613      	mov	r3, r2
 8001916:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff =0;
 8001918:	2300      	movs	r3, #0
 800191a:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buff[10]={"\r\n"};
 800191c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	809a      	strh	r2, [r3, #4]
	uint8_t i=0;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8001930:	e020      	b.n	8001974 <UART_In+0x6a>
	{
		while(1)
		{
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001932:	f107 011e 	add.w	r1, r7, #30
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	2201      	movs	r2, #1
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f008 fcf1 	bl	800a324 <HAL_UART_Receive>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <UART_In+0x42>
			{
				break;
			} else {
				__NOP();
 8001948:	bf00      	nop
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800194a:	e7f2      	b.n	8001932 <UART_In+0x28>
				break;
 800194c:	bf00      	nop
			}
		}
		if(rx_buff=='\r') break;
 800194e:	7fbb      	ldrb	r3, [r7, #30]
 8001950:	2b0d      	cmp	r3, #13
 8001952:	d014      	beq.n	800197e <UART_In+0x74>
		*(p+i) = rx_buff;
 8001954:	7ffb      	ldrb	r3, [r7, #31]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4413      	add	r3, r2
 800195a:	7fba      	ldrb	r2, [r7, #30]
 800195c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, &rx_buff, 1, 1000);
 800195e:	f107 011e 	add.w	r1, r7, #30
 8001962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001966:	2201      	movs	r2, #1
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f008 fc3d 	bl	800a1e8 <HAL_UART_Transmit>
		i++;
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3301      	adds	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8001974:	7ffa      	ldrb	r2, [r7, #31]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3da      	bcc.n	8001932 <UART_In+0x28>
 800197c:	e000      	b.n	8001980 <UART_In+0x76>
		if(rx_buff=='\r') break;
 800197e:	bf00      	nop
	}
	*(p+i) = 0;
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 800198a:	f107 0114 	add.w	r1, r7, #20
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	2204      	movs	r2, #4
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f008 fc27 	bl	800a1e8 <HAL_UART_Transmit>
}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <Frequency_To_Period+0x28>)
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	3b01      	subs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	07735940 	.word	0x07735940

080019d0 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f006 ff96 	bl	800890c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f006 fede 	bl	80087b0 <HAL_TIM_Base_Start_IT>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 8001a04:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <Mototr_Poz_Inc+0x48>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <Mototr_Poz_Inc+0x4c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	490b      	ldr	r1, [pc, #44]	@ (8001a48 <Mototr_Poz_Inc+0x4c>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 8001a22:	e008      	b.n	8001a36 <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 8001a24:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <Mototr_Poz_Inc+0x4c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	4906      	ldr	r1, [pc, #24]	@ (8001a48 <Mototr_Poz_Inc+0x4c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000010 	.word	0x20000010
 8001a48:	2000021c 	.word	0x2000021c

08001a4c <Ramp>:

void Ramp(uint32_t M)
{
 8001a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	e0b1      	b.n	8001bc0 <Ramp+0x174>
	{
		if(i<M_move_l[M]/2)
 8001a5c:	4a60      	ldr	r2, [pc, #384]	@ (8001be0 <Ramp+0x194>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	0fda      	lsrs	r2, r3, #31
 8001a66:	4413      	add	r3, r2
 8001a68:	105b      	asrs	r3, r3, #1
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d246      	bcs.n	8001b00 <Ramp+0xb4>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 8001a72:	4b5c      	ldr	r3, [pc, #368]	@ (8001be4 <Ramp+0x198>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd58 	bl	800052c <__aeabi_ui2d>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	4b59      	ldr	r3, [pc, #356]	@ (8001be8 <Ramp+0x19c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd51 	bl	800052c <__aeabi_ui2d>
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	4689      	mov	r9, r1
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd4a 	bl	800052c <__aeabi_ui2d>
 8001a98:	4682      	mov	sl, r0
 8001a9a:	468b      	mov	fp, r1
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <Ramp+0x19c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd43 	bl	800052c <__aeabi_ui2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4650      	mov	r0, sl
 8001aac:	4659      	mov	r1, fp
 8001aae:	f7fe fee1 	bl	8000874 <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	ec43 2b17 	vmov	d7, r2, r3
 8001aba:	eeb0 0a47 	vmov.f32	s0, s14
 8001abe:	eef0 0a67 	vmov.f32	s1, s15
 8001ac2:	f00d fdc3 	bl	800f64c <sqrt>
 8001ac6:	ec53 2b10 	vmov	r2, r3, d0
 8001aca:	4640      	mov	r0, r8
 8001acc:	4649      	mov	r1, r9
 8001ace:	f7fe fda7 	bl	8000620 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbeb 	bl	80002b4 <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f873 	bl	8000bd0 <__aeabi_d2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8001aee:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <Ramp+0x1a0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d950      	bls.n	8001b9a <Ramp+0x14e>
				tmp = f_MAX;
 8001af8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bec <Ramp+0x1a0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e04c      	b.n	8001b9a <Ramp+0x14e>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-1-i))/a_MAX);
 8001b00:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <Ramp+0x198>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd11 	bl	800052c <__aeabi_ui2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <Ramp+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd0a 	bl	800052c <__aeabi_ui2d>
 8001b18:	4680      	mov	r8, r0
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	4a30      	ldr	r2, [pc, #192]	@ (8001be0 <Ramp+0x194>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fcfc 	bl	800052c <__aeabi_ui2d>
 8001b34:	4682      	mov	sl, r0
 8001b36:	468b      	mov	fp, r1
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <Ramp+0x19c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fcf5 	bl	800052c <__aeabi_ui2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4650      	mov	r0, sl
 8001b48:	4659      	mov	r1, fp
 8001b4a:	f7fe fe93 	bl	8000874 <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ec43 2b17 	vmov	d7, r2, r3
 8001b56:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5a:	eef0 0a67 	vmov.f32	s1, s15
 8001b5e:	f00d fd75 	bl	800f64c <sqrt>
 8001b62:	ec53 2b10 	vmov	r2, r3, d0
 8001b66:	4640      	mov	r0, r8
 8001b68:	4649      	mov	r1, r9
 8001b6a:	f7fe fd59 	bl	8000620 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fb9d 	bl	80002b4 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff f825 	bl	8000bd0 <__aeabi_d2uiz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <Ramp+0x1a0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d902      	bls.n	8001b9a <Ramp+0x14e>
				tmp = f_MAX;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <Ramp+0x1a0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff ff02 	bl	80019a4 <Frequency_To_Period>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b298      	uxth	r0, r3
 8001ba4:	4912      	ldr	r1, [pc, #72]	@ (8001bf0 <Ramp+0x1a4>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001bac:	fb03 f202 	mul.w	r2, r3, r2
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <Ramp+0x194>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	f4ff af45 	bcc.w	8001a5c <Ramp+0x10>
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bde:	bf00      	nop
 8001be0:	2003aba8 	.word	0x2003aba8
 8001be4:	20000008 	.word	0x20000008
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000228 	.word	0x20000228

08001bf4 <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <Ramp_Out+0x68>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	4915      	ldr	r1, [pc, #84]	@ (8001c60 <Ramp_Out+0x6c>)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d304      	bcc.n	8001c1e <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f007 f89a 	bl	8008d50 <HAL_TIM_OC_Stop_IT>
	else
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
		M_move_poz[M]++;
	}
}
 8001c1c:	e019      	b.n	8001c52 <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <Ramp_Out+0x68>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	490f      	ldr	r1, [pc, #60]	@ (8001c64 <Ramp_Out+0x70>)
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8001c2e:	fb00 f202 	mul.w	r2, r0, r2
 8001c32:	4413      	add	r3, r2
 8001c34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fec8 	bl	80019d0 <Period_Out>
		M_move_poz[M]++;
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <Ramp_Out+0x68>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	4904      	ldr	r1, [pc, #16]	@ (8001c5c <Ramp_Out+0x68>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2003abb4 	.word	0x2003abb4
 8001c60:	2003aba8 	.word	0x2003aba8
 8001c64:	20000228 	.word	0x20000228

08001c68 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 8001c76:	4b72      	ldr	r3, [pc, #456]	@ (8001e40 <move+0x1d8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	4a71      	ldr	r2, [pc, #452]	@ (8001e44 <move+0x1dc>)
 8001c80:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 8001c82:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <move+0x1d8>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <move+0x1dc>)
 8001c8c:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <move+0x1d8>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4a6b      	ldr	r2, [pc, #428]	@ (8001e44 <move+0x1dc>)
 8001c98:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <move+0x1dc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da0d      	bge.n	8001cbe <move+0x56>
	{
		M_move_l[0] = M_move_l[0]*(-1);
 8001ca2:	4b68      	ldr	r3, [pc, #416]	@ (8001e44 <move+0x1dc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	4a66      	ldr	r2, [pc, #408]	@ (8001e44 <move+0x1dc>)
 8001caa:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 8001cac:	4b66      	ldr	r3, [pc, #408]	@ (8001e48 <move+0x1e0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4865      	ldr	r0, [pc, #404]	@ (8001e4c <move+0x1e4>)
 8001cb8:	f001 ff86 	bl	8003bc8 <HAL_GPIO_WritePin>
 8001cbc:	e007      	b.n	8001cce <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 8001cbe:	4b62      	ldr	r3, [pc, #392]	@ (8001e48 <move+0x1e0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4860      	ldr	r0, [pc, #384]	@ (8001e4c <move+0x1e4>)
 8001cca:	f001 ff7d 	bl	8003bc8 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <move+0x1dc>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da0d      	bge.n	8001cf2 <move+0x8a>
	{
		M_move_l[1] = M_move_l[1]*(-1);
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <move+0x1dc>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	4a59      	ldr	r2, [pc, #356]	@ (8001e44 <move+0x1dc>)
 8001cde:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 8001ce0:	4b59      	ldr	r3, [pc, #356]	@ (8001e48 <move+0x1e0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4859      	ldr	r0, [pc, #356]	@ (8001e50 <move+0x1e8>)
 8001cec:	f001 ff6c 	bl	8003bc8 <HAL_GPIO_WritePin>
 8001cf0:	e007      	b.n	8001d02 <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 8001cf2:	4b55      	ldr	r3, [pc, #340]	@ (8001e48 <move+0x1e0>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4854      	ldr	r0, [pc, #336]	@ (8001e50 <move+0x1e8>)
 8001cfe:	f001 ff63 	bl	8003bc8 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 8001d02:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <move+0x1dc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da0d      	bge.n	8001d26 <move+0xbe>
	{
		M_move_l[2] = M_move_l[2]*(-1);
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e44 <move+0x1dc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	425b      	negs	r3, r3
 8001d10:	4a4c      	ldr	r2, [pc, #304]	@ (8001e44 <move+0x1dc>)
 8001d12:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 8001d14:	4b4c      	ldr	r3, [pc, #304]	@ (8001e48 <move+0x1e0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	484c      	ldr	r0, [pc, #304]	@ (8001e50 <move+0x1e8>)
 8001d20:	f001 ff52 	bl	8003bc8 <HAL_GPIO_WritePin>
 8001d24:	e007      	b.n	8001d36 <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 8001d26:	4b48      	ldr	r3, [pc, #288]	@ (8001e48 <move+0x1e0>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4847      	ldr	r0, [pc, #284]	@ (8001e50 <move+0x1e8>)
 8001d32:	f001 ff49 	bl	8003bc8 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fe88 	bl	8001a4c <Ramp>
	Ramp(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff fe85 	bl	8001a4c <Ramp>
	Ramp(2);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7ff fe82 	bl	8001a4c <Ramp>

	M_move_poz[0] =0;
 8001d48:	4b42      	ldr	r3, [pc, #264]	@ (8001e54 <move+0x1ec>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8001d4e:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <move+0x1ec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 8001d54:	4b3f      	ldr	r3, [pc, #252]	@ (8001e54 <move+0x1ec>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

	Period_Out(tim1,Period_ramp[0][M_move_poz[0]]);
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <move+0x1ec>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a38      	ldr	r2, [pc, #224]	@ (8001e58 <move+0x1f0>)
 8001d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f7ff fe26 	bl	80019d0 <Period_Out>
	Period_Out(tim2,Period_ramp[1][M_move_poz[1]]);
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <move+0x1ec>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a33      	ldr	r2, [pc, #204]	@ (8001e58 <move+0x1f0>)
 8001d8a:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8001d8e:	3340      	adds	r3, #64	@ 0x40
 8001d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d94:	4619      	mov	r1, r3
 8001d96:	69f8      	ldr	r0, [r7, #28]
 8001d98:	f7ff fe1a 	bl	80019d0 <Period_Out>
	Period_Out(tim3,Period_ramp[2][M_move_poz[2]]);
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <move+0x1ec>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e58 <move+0x1f0>)
 8001da2:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8001da6:	3380      	adds	r3, #128	@ 0x80
 8001da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dac:	4619      	mov	r1, r3
 8001dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db0:	f7ff fe0e 	bl	80019d0 <Period_Out>

	if(M_move_l[0] >  M_move_poz[0])
 8001db4:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <move+0x1dc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <move+0x1ec>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d903      	bls.n	8001dca <move+0x162>
	HAL_TIM_OC_Start_IT(tim1,Channel1);
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	6838      	ldr	r0, [r7, #0]
 8001dc6:	f006 fe31 	bl	8008a2c <HAL_TIM_OC_Start_IT>
	if(M_move_l[1] >  M_move_poz[1])
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <move+0x1dc>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <move+0x1ec>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d903      	bls.n	8001de0 <move+0x178>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 8001dd8:	6a39      	ldr	r1, [r7, #32]
 8001dda:	69f8      	ldr	r0, [r7, #28]
 8001ddc:	f006 fe26 	bl	8008a2c <HAL_TIM_OC_Start_IT>
	if(M_move_l[2] >  M_move_poz[2])
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <move+0x1dc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <move+0x1ec>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d903      	bls.n	8001df6 <move+0x18e>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 8001dee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001df0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001df2:	f006 fe1b 	bl	8008a2c <HAL_TIM_OC_Start_IT>

	M_move_poz[0]++;
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <move+0x1ec>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <move+0x1ec>)
 8001dfe:	6013      	str	r3, [r2, #0]
	M_move_poz[1]++;
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <move+0x1ec>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <move+0x1ec>)
 8001e08:	6053      	str	r3, [r2, #4]
	M_move_poz[2]++;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <move+0x1ec>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <move+0x1ec>)
 8001e12:	6093      	str	r3, [r2, #8]

	while(!(theta0_target ==  M_poz[0]) || !(theta1_target ==  M_poz[1]) || !(theta2_target ==  M_poz[2]))
 8001e14:	bf00      	nop
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <move+0x1d8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1fa      	bne.n	8001e16 <move+0x1ae>
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <move+0x1d8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d1f5      	bne.n	8001e16 <move+0x1ae>
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <move+0x1d8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1f0      	bne.n	8001e16 <move+0x1ae>
	{
	}
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000021c 	.word	0x2000021c
 8001e44:	2003aba8 	.word	0x2003aba8
 8001e48:	20000010 	.word	0x20000010
 8001e4c:	42020400 	.word	0x42020400
 8001e50:	42020800 	.word	0x42020800
 8001e54:	2003abb4 	.word	0x2003abb4
 8001e58:	20000228 	.word	0x20000228

08001e5c <Set_f_MAX>:

void Set_f_MAX(uint32_t tmp)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	f_MAX = tmp;
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <Set_f_MAX+0x1c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000004 	.word	0x20000004

08001e7c <Set_f_MIN>:

void Set_f_MIN(uint32_t tmp)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	f_MIN = tmp;
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <Set_f_MIN+0x1c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008

08001e9c <Set_a_MAX>:

void Set_a_MAX(uint32_t tmp)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	a_MAX = tmp;
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <Set_a_MAX+0x1c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <Get_f_MAX>:

uint32_t Get_f_MAX(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	return f_MAX;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <Get_f_MAX+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <Get_f_MIN>:

uint32_t Get_f_MIN(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return f_MIN;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <Get_f_MIN+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008

08001eec <Get_a_MAX>:

uint32_t Get_a_MAX(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return a_MAX;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <Get_a_MAX+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <M_Poz_0>:

uint32_t M_Poz_0(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return M_poz[0];
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <M_Poz_0+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000021c 	.word	0x2000021c

08001f1c <M_Poz_1>:

uint32_t M_Poz_1(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	return M_poz[1];
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <M_Poz_1+0x14>)
 8001f22:	685b      	ldr	r3, [r3, #4]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000021c 	.word	0x2000021c

08001f34 <M_Poz_2>:

uint32_t M_Poz_2(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return M_poz[2];
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <M_Poz_2+0x14>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000021c 	.word	0x2000021c

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b090      	sub	sp, #64	@ 0x40
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f001 fa5d 	bl	8003410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f845 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5a:	f000 fc23 	bl	80027a4 <MX_GPIO_Init>
  MX_UART5_Init();
 8001f5e:	f000 fb09 	bl	8002574 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001f62:	f000 fb55 	bl	8002610 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001f66:	f000 fbeb 	bl	8002740 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8001f6a:	f000 f8af 	bl	80020cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f6e:	f000 f8f9 	bl	8002164 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001f72:	f000 fb99 	bl	80026a8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001f76:	f000 f94b 	bl	8002210 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f7a:	f000 f9bf 	bl	80022fc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001f7e:	f000 fa33 	bl	80023e8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001f82:	f000 faa7 	bl	80024d4 <MX_TIM15_Init>
  MX_ICACHE_Init();
 8001f86:	f000 f8e1 	bl	800214c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 8001f8a:	4a13      	ldr	r2, [pc, #76]	@ (8001fd8 <main+0x8c>)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	6810      	ldr	r0, [r2, #0]
 8001f90:	6851      	ldr	r1, [r2, #4]
 8001f92:	c303      	stmia	r3!, {r0, r1}
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2234      	movs	r2, #52	@ 0x34
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 ffe0 	bl	800bf62 <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 8001fa2:	f7ff f847 	bl	8001034 <Relay_0_Set>
  HAL_Delay(200);
 8001fa6:	20c8      	movs	r0, #200	@ 0xc8
 8001fa8:	f001 faf0 	bl	800358c <HAL_Delay>
  Relay_1_Set();
 8001fac:	f7ff f866 	bl	800107c <Relay_1_Set>
  HAL_Delay(200);
 8001fb0:	20c8      	movs	r0, #200	@ 0xc8
 8001fb2:	f001 faeb 	bl	800358c <HAL_Delay>
  Relay_0_Reset();
 8001fb6:	f7ff f849 	bl	800104c <Relay_0_Reset>
  HAL_Delay(200);
 8001fba:	20c8      	movs	r0, #200	@ 0xc8
 8001fbc:	f001 fae6 	bl	800358c <HAL_Delay>
  Relay_1_Reset();
 8001fc0:	f7ff f868 	bl	8001094 <Relay_1_Reset>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8001fc4:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <main+0x90>)
 8001fc6:	f006 fbf3 	bl	80087b0 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <main+0x94>)
 8001fcc:	f7ff f86e 	bl	80010ac <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <main+0x94>)
 8001fd2:	f7ff f8af 	bl	8001134 <Menu_UART_Update>
 8001fd6:	e7fb      	b.n	8001fd0 <main+0x84>
 8001fd8:	0800fe10 	.word	0x0800fe10
 8001fdc:	2003ad88 	.word	0x2003ad88
 8001fe0:	2003ae68 	.word	0x2003ae68

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09c      	sub	sp, #112	@ 0x70
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	2250      	movs	r2, #80	@ 0x50
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f009 ffb5 	bl	800bf62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <SystemClock_Config+0xe0>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	4a2d      	ldr	r2, [pc, #180]	@ (80020c4 <SystemClock_Config+0xe0>)
 8002010:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002014:	6113      	str	r3, [r2, #16]
 8002016:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <SystemClock_Config+0xe0>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002022:	bf00      	nop
 8002024:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <SystemClock_Config+0xe0>)
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b08      	cmp	r3, #8
 800202e:	d1f9      	bne.n	8002024 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002030:	2321      	movs	r3, #33	@ 0x21
 8002032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002034:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800203a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002040:	2302      	movs	r3, #2
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002044:	2303      	movs	r3, #3
 8002046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002048:	2306      	movs	r3, #6
 800204a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800204c:	237d      	movs	r3, #125	@ 0x7d
 800204e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002050:	2302      	movs	r3, #2
 8002052:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002054:	2308      	movs	r3, #8
 8002056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800205c:	2308      	movs	r3, #8
 800205e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002060:	2300      	movs	r3, #0
 8002062:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	4618      	mov	r0, r3
 800206e:	f002 f809 	bl	8004084 <HAL_RCC_OscConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002078:	f000 fc4c 	bl	8002914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207c:	231f      	movs	r3, #31
 800207e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002080:	2303      	movs	r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002088:	2350      	movs	r3, #80	@ 0x50
 800208a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800208c:	2350      	movs	r3, #80	@ 0x50
 800208e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 8002090:	2350      	movs	r3, #80	@ 0x50
 8002092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	2105      	movs	r1, #5
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fc2a 	bl	80048f4 <HAL_RCC_ClockConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020a6:	f000 fc35 	bl	8002914 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <SystemClock_Config+0xe4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemClock_Config+0xe4>)
 80020b4:	f043 0320 	orr.w	r3, r3, #32
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	3770      	adds	r7, #112	@ 0x70
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	44020800 	.word	0x44020800
 80020c8:	40022000 	.word	0x40022000

080020cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <MX_I2C1_Init+0x78>)
 80020d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <MX_I2C1_Init+0x7c>)
 80020da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_I2C1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002100:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002106:	480e      	ldr	r0, [pc, #56]	@ (8002140 <MX_I2C1_Init+0x74>)
 8002108:	f001 fd76 	bl	8003bf8 <HAL_I2C_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002112:	f000 fbff 	bl	8002914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4809      	ldr	r0, [pc, #36]	@ (8002140 <MX_I2C1_Init+0x74>)
 800211a:	f001 fe08 	bl	8003d2e <HAL_I2CEx_ConfigAnalogFilter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 fbf6 	bl	8002914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <MX_I2C1_Init+0x74>)
 800212c:	f001 fe4a 	bl	8003dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 fbed 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2003abc0 	.word	0x2003abc0
 8002144:	40005400 	.word	0x40005400
 8002148:	2050517a 	.word	0x2050517a

0800214c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002150:	f001 fe84 	bl	8003e5c <HAL_ICACHE_Enable>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800215a:	f000 fbdb 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002168:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <MX_SPI1_Init+0xa4>)
 800216a:	4a28      	ldr	r2, [pc, #160]	@ (800220c <MX_SPI1_Init+0xa8>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <MX_SPI1_Init+0xa4>)
 8002170:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002174:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <MX_SPI1_Init+0xa4>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800217c:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <MX_SPI1_Init+0xa4>)
 800217e:	220f      	movs	r2, #15
 8002180:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002182:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <MX_SPI1_Init+0xa4>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <MX_SPI1_Init+0xa4>)
 800218a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800218e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <MX_SPI1_Init+0xa4>)
 8002192:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002196:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <MX_SPI1_Init+0xa4>)
 800219a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800219e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ac:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021c4:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	@ (8002208 <MX_SPI1_Init+0xa4>)
 80021f6:	f006 f93d 	bl	8008474 <HAL_SPI_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002200:	f000 fb88 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2003ac14 	.word	0x2003ac14
 800220c:	40013000 	.word	0x40013000

08002210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	@ 0x38
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	615a      	str	r2, [r3, #20]
 8002240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002242:	4b2d      	ldr	r3, [pc, #180]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 800224c:	22f9      	movs	r2, #249	@ 0xf9
 800224e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002258:	2201      	movs	r2, #1
 800225a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002268:	4823      	ldr	r0, [pc, #140]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 800226a:	f006 fa4a 	bl	8008702 <HAL_TIM_Base_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002274:	f000 fb4e 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800227e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002282:	4619      	mov	r1, r3
 8002284:	481c      	ldr	r0, [pc, #112]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002286:	f007 f817 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002290:	f000 fb40 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002294:	4818      	ldr	r0, [pc, #96]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 8002296:	f006 fb68 	bl	800896a <HAL_TIM_OC_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80022a0:	f000 fb38 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4811      	ldr	r0, [pc, #68]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 80022b4:	f007 fe32 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80022be:	f000 fb29 	bl	8002914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80022c2:	2330      	movs	r3, #48	@ 0x30
 80022c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d2:	463b      	mov	r3, r7
 80022d4:	2204      	movs	r2, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 80022da:	f006 ff73 	bl	80091c4 <HAL_TIM_OC_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80022e4:	f000 fb16 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022e8:	4803      	ldr	r0, [pc, #12]	@ (80022f8 <MX_TIM2_Init+0xe8>)
 80022ea:	f000 fc8b 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 80022ee:	bf00      	nop
 80022f0:	3738      	adds	r7, #56	@ 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2003aca4 	.word	0x2003aca4

080022fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002330:	4a2c      	ldr	r2, [pc, #176]	@ (80023e4 <MX_TIM3_Init+0xe8>)
 8002332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 8002334:	4b2a      	ldr	r3, [pc, #168]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002336:	22f9      	movs	r2, #249	@ 0xf9
 8002338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002340:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002342:	2201      	movs	r2, #1
 8002344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002352:	4823      	ldr	r0, [pc, #140]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002354:	f006 f9d5 	bl	8008702 <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800235e:	f000 fad9 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002368:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800236c:	4619      	mov	r1, r3
 800236e:	481c      	ldr	r0, [pc, #112]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002370:	f006 ffa2 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800237a:	f000 facb 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800237e:	4818      	ldr	r0, [pc, #96]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 8002380:	f006 faf3 	bl	800896a <HAL_TIM_OC_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800238a:	f000 fac3 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4810      	ldr	r0, [pc, #64]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 800239e:	f007 fdbd 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80023a8:	f000 fab4 	bl	8002914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	220c      	movs	r2, #12
 80023c0:	4619      	mov	r1, r3
 80023c2:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 80023c4:	f006 fefe 	bl	80091c4 <HAL_TIM_OC_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80023ce:	f000 faa1 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023d2:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <MX_TIM3_Init+0xe4>)
 80023d4:	f000 fc16 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 80023d8:	bf00      	nop
 80023da:	3738      	adds	r7, #56	@ 0x38
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2003acf0 	.word	0x2003acf0
 80023e4:	40000400 	.word	0x40000400

080023e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	@ 0x38
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800241c:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <MX_TIM5_Init+0xe8>)
 800241e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <MX_TIM5_Init+0xe4>)
 8002422:	22f9      	movs	r2, #249	@ 0xf9
 8002424:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <MX_TIM5_Init+0xe4>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800242e:	2201      	movs	r2, #1
 8002430:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <MX_TIM5_Init+0xe4>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800243e:	4823      	ldr	r0, [pc, #140]	@ (80024cc <MX_TIM5_Init+0xe4>)
 8002440:	f006 f95f 	bl	8008702 <HAL_TIM_Base_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800244a:	f000 fa63 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002454:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002458:	4619      	mov	r1, r3
 800245a:	481c      	ldr	r0, [pc, #112]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800245c:	f006 ff2c 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002466:	f000 fa55 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800246a:	4818      	ldr	r0, [pc, #96]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800246c:	f006 fa7d 	bl	800896a <HAL_TIM_OC_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002476:	f000 fa4d 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4810      	ldr	r0, [pc, #64]	@ (80024cc <MX_TIM5_Init+0xe4>)
 800248a:	f007 fd47 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002494:	f000 fa3e 	bl	8002914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002498:	2330      	movs	r3, #48	@ 0x30
 800249a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	4619      	mov	r1, r3
 80024ae:	4807      	ldr	r0, [pc, #28]	@ (80024cc <MX_TIM5_Init+0xe4>)
 80024b0:	f006 fe88 	bl	80091c4 <HAL_TIM_OC_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80024ba:	f000 fa2b 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024be:	4803      	ldr	r0, [pc, #12]	@ (80024cc <MX_TIM5_Init+0xe4>)
 80024c0:	f000 fba0 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 80024c4:	bf00      	nop
 80024c6:	3738      	adds	r7, #56	@ 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2003ad3c 	.word	0x2003ad3c
 80024d0:	40000c00 	.word	0x40000c00

080024d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <MX_TIM15_Init+0x98>)
 80024f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002570 <MX_TIM15_Init+0x9c>)
 80024f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80024f8:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <MX_TIM15_Init+0x98>)
 80024fa:	220a      	movs	r2, #10
 80024fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <MX_TIM15_Init+0x98>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <MX_TIM15_Init+0x98>)
 8002506:	227c      	movs	r2, #124	@ 0x7c
 8002508:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250a:	4b18      	ldr	r3, [pc, #96]	@ (800256c <MX_TIM15_Init+0x98>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <MX_TIM15_Init+0x98>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <MX_TIM15_Init+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800251c:	4813      	ldr	r0, [pc, #76]	@ (800256c <MX_TIM15_Init+0x98>)
 800251e:	f006 f8f0 	bl	8008702 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002528:	f000 f9f4 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4619      	mov	r1, r3
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <MX_TIM15_Init+0x98>)
 800253a:	f006 febd 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002544:	f000 f9e6 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	@ (800256c <MX_TIM15_Init+0x98>)
 8002556:	f007 fce1 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002560:	f000 f9d8 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2003ad88 	.word	0x2003ad88
 8002570:	40014000 	.word	0x40014000

08002574 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <MX_UART5_Init+0x94>)
 800257a:	4a24      	ldr	r2, [pc, #144]	@ (800260c <MX_UART5_Init+0x98>)
 800257c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <MX_UART5_Init+0x94>)
 8002580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002584:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <MX_UART5_Init+0x94>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <MX_UART5_Init+0x94>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002592:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <MX_UART5_Init+0x94>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <MX_UART5_Init+0x94>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800259e:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <MX_UART5_Init+0x94>)
 80025a0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80025a4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a6:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <MX_UART5_Init+0x94>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_UART5_Init+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <MX_UART5_Init+0x94>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <MX_UART5_Init+0x94>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80025be:	4812      	ldr	r0, [pc, #72]	@ (8002608 <MX_UART5_Init+0x94>)
 80025c0:	f007 fdc2 	bl	800a148 <HAL_UART_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80025ca:	f000 f9a3 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ce:	2100      	movs	r1, #0
 80025d0:	480d      	ldr	r0, [pc, #52]	@ (8002608 <MX_UART5_Init+0x94>)
 80025d2:	f008 fb85 	bl	800ace0 <HAL_UARTEx_SetTxFifoThreshold>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80025dc:	f000 f99a 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e0:	2100      	movs	r1, #0
 80025e2:	4809      	ldr	r0, [pc, #36]	@ (8002608 <MX_UART5_Init+0x94>)
 80025e4:	f008 fbba 	bl	800ad5c <HAL_UARTEx_SetRxFifoThreshold>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80025ee:	f000 f991 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <MX_UART5_Init+0x94>)
 80025f4:	f008 fb3b 	bl	800ac6e <HAL_UARTEx_DisableFifoMode>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80025fe:	f000 f989 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2003add4 	.word	0x2003add4
 800260c:	40005000 	.word	0x40005000

08002610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <MX_USART1_UART_Init+0x94>)
 8002618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002652:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002658:	4811      	ldr	r0, [pc, #68]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800265a:	f007 fd75 	bl	800a148 <HAL_UART_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002664:	f000 f956 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002668:	2100      	movs	r1, #0
 800266a:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800266c:	f008 fb38 	bl	800ace0 <HAL_UARTEx_SetTxFifoThreshold>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002676:	f000 f94d 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800267a:	2100      	movs	r1, #0
 800267c:	4808      	ldr	r0, [pc, #32]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800267e:	f008 fb6d 	bl	800ad5c <HAL_UARTEx_SetRxFifoThreshold>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002688:	f000 f944 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <MX_USART1_UART_Init+0x90>)
 800268e:	f008 faee 	bl	800ac6e <HAL_UARTEx_DisableFifoMode>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002698:	f000 f93c 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2003ae68 	.word	0x2003ae68
 80026a4:	40013800 	.word	0x40013800

080026a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026ac:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <MX_USART6_UART_Init+0x94>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026b2:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026f0:	4811      	ldr	r0, [pc, #68]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 80026f2:	f007 fd29 	bl	800a148 <HAL_UART_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80026fc:	f000 f90a 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002700:	2100      	movs	r1, #0
 8002702:	480d      	ldr	r0, [pc, #52]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 8002704:	f008 faec 	bl	800ace0 <HAL_UARTEx_SetTxFifoThreshold>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800270e:	f000 f901 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002712:	2100      	movs	r1, #0
 8002714:	4808      	ldr	r0, [pc, #32]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 8002716:	f008 fb21 	bl	800ad5c <HAL_UARTEx_SetRxFifoThreshold>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002720:	f000 f8f8 	bl	8002914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002724:	4804      	ldr	r0, [pc, #16]	@ (8002738 <MX_USART6_UART_Init+0x90>)
 8002726:	f008 faa2 	bl	800ac6e <HAL_UARTEx_DisableFifoMode>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002730:	f000 f8f0 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2003aefc 	.word	0x2003aefc
 800273c:	40006400 	.word	0x40006400

08002740 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002746:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <MX_USB_PCD_Init+0x60>)
 8002748:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 800274c:	2208      	movs	r2, #8
 800274e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002752:	2202      	movs	r2, #2
 8002754:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002758:	2202      	movs	r2, #2
 800275a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 800275e:	2200      	movs	r2, #0
 8002760:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002764:	2200      	movs	r2, #0
 8002766:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 800276a:	2200      	movs	r2, #0
 800276c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002770:	2200      	movs	r2, #0
 8002772:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002776:	2200      	movs	r2, #0
 8002778:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800277a:	4b08      	ldr	r3, [pc, #32]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 800277c:	2200      	movs	r2, #0
 800277e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002782:	2200      	movs	r2, #0
 8002784:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	@ (800279c <MX_USB_PCD_Init+0x5c>)
 8002788:	f001 fb78 	bl	8003e7c <HAL_PCD_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8002792:	f000 f8bf 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2003af90 	.word	0x2003af90
 80027a0:	40016000 	.word	0x40016000

080027a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4b51      	ldr	r3, [pc, #324]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027d8:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027de:	4a48      	ldr	r2, [pc, #288]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027e8:	4b45      	ldr	r3, [pc, #276]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027fc:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <MX_GPIO_Init+0x15c>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002806:	4b3e      	ldr	r3, [pc, #248]	@ (8002900 <MX_GPIO_Init+0x15c>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <MX_GPIO_Init+0x15c>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281a:	4a39      	ldr	r2, [pc, #228]	@ (8002900 <MX_GPIO_Init+0x15c>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002824:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <MX_GPIO_Init+0x15c>)
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002832:	2200      	movs	r2, #0
 8002834:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8002838:	4832      	ldr	r0, [pc, #200]	@ (8002904 <MX_GPIO_Init+0x160>)
 800283a:	f001 f9c5 	bl	8003bc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	f240 1101 	movw	r1, #257	@ 0x101
 8002844:	4830      	ldr	r0, [pc, #192]	@ (8002908 <MX_GPIO_Init+0x164>)
 8002846:	f001 f9bf 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002850:	482d      	ldr	r0, [pc, #180]	@ (8002908 <MX_GPIO_Init+0x164>)
 8002852:	f001 f9b9 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800285c:	482b      	ldr	r0, [pc, #172]	@ (800290c <MX_GPIO_Init+0x168>)
 800285e:	f001 f9b3 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002862:	f24a 0313 	movw	r3, #40979	@ 0xa013
 8002866:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4822      	ldr	r0, [pc, #136]	@ (8002904 <MX_GPIO_Init+0x160>)
 800287c:	f001 f83a 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002880:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002886:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <MX_GPIO_Init+0x16c>)
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	481b      	ldr	r0, [pc, #108]	@ (8002904 <MX_GPIO_Init+0x160>)
 8002896:	f001 f82d 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800289a:	2304      	movs	r3, #4
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028aa:	2302      	movs	r3, #2
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4813      	ldr	r0, [pc, #76]	@ (8002904 <MX_GPIO_Init+0x160>)
 80028b6:	f001 f81d 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 80028ba:	f240 5321 	movw	r3, #1313	@ 0x521
 80028be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	@ (8002908 <MX_GPIO_Init+0x164>)
 80028d4:	f001 f80e 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4806      	ldr	r0, [pc, #24]	@ (800290c <MX_GPIO_Init+0x168>)
 80028f2:	f000 ffff 	bl	80038f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	@ 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	44020c00 	.word	0x44020c00
 8002904:	42020800 	.word	0x42020800
 8002908:	42020400 	.word	0x42020400
 800290c:	42020000 	.word	0x42020000
 8002910:	10110000 	.word	0x10110000

08002914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <Error_Handler+0x8>

08002920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0be      	sub	sp, #248	@ 0xf8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	22d0      	movs	r2, #208	@ 0xd0
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f009 fb06 	bl	800bf62 <memset>
  if(hi2c->Instance==I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a26      	ldr	r2, [pc, #152]	@ (80029f4 <HAL_I2C_MspInit+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d145      	bne.n	80029ec <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002960:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fafe 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002982:	f7ff ffc7 	bl	8002914 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b1c      	ldr	r3, [pc, #112]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298c:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002996:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029a4:	23c0      	movs	r3, #192	@ 0xc0
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029aa:	2312      	movs	r3, #18
 80029ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029bc:	2304      	movs	r3, #4
 80029be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80029c6:	4619      	mov	r1, r3
 80029c8:	480c      	ldr	r0, [pc, #48]	@ (80029fc <HAL_I2C_MspInit+0xcc>)
 80029ca:	f000 ff93 	bl	80038f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 80029d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029d4:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 80029d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_I2C_MspInit+0xc8>)
 80029e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029ec:	bf00      	nop
 80029ee:	37f8      	adds	r7, #248	@ 0xf8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40005400 	.word	0x40005400
 80029f8:	44020c00 	.word	0x44020c00
 80029fc:	42020400 	.word	0x42020400

08002a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0be      	sub	sp, #248	@ 0xf8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	22d0      	movs	r2, #208	@ 0xd0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f009 fa9e 	bl	800bf62 <memset>
  if(hspi->Instance==SPI1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a31      	ldr	r2, [pc, #196]	@ (8002af0 <HAL_SPI_MspInit+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d15a      	bne.n	8002ae6 <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002a30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fa96 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff ff5f 	bl	8002914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a56:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a5c:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a62:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_SPI_MspInit+0xf4>)
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a92:	23a0      	movs	r3, #160	@ 0xa0
 8002a94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aaa:	2305      	movs	r3, #5
 8002aac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4810      	ldr	r0, [pc, #64]	@ (8002af8 <HAL_SPI_MspInit+0xf8>)
 8002ab8:	f000 ff1c 	bl	80038f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002abc:	2340      	movs	r3, #64	@ 0x40
 8002abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ad4:	2305      	movs	r3, #5
 8002ad6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <HAL_SPI_MspInit+0xf8>)
 8002ae2:	f000 ff07 	bl	80038f4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ae6:	bf00      	nop
 8002ae8:	37f8      	adds	r7, #248	@ 0xf8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40013000 	.word	0x40013000
 8002af4:	44020c00 	.word	0x44020c00
 8002af8:	42020000 	.word	0x42020000

08002afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0c:	d117      	bne.n	8002b3e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b14:	4a37      	ldr	r2, [pc, #220]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b1e:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	202d      	movs	r0, #45	@ 0x2d
 8002b32:	f000 fe07 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b36:	202d      	movs	r0, #45	@ 0x2d
 8002b38:	f000 fe1e 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b3c:	e055      	b.n	8002bea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xfc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d117      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b4e:	4a29      	ldr	r2, [pc, #164]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	202e      	movs	r0, #46	@ 0x2e
 8002b6c:	f000 fdea 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b70:	202e      	movs	r0, #46	@ 0x2e
 8002b72:	f000 fe01 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002b76:	e038      	b.n	8002bea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <HAL_TIM_Base_MspInit+0x100>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d117      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b88:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2030      	movs	r0, #48	@ 0x30
 8002ba6:	f000 fdcd 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002baa:	2030      	movs	r0, #48	@ 0x30
 8002bac:	f000 fde4 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002bb0:	e01b      	b.n	8002bea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_TIM_Base_MspInit+0x104>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d116      	bne.n	8002bea <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2047      	movs	r0, #71	@ 0x47
 8002be0:	f000 fdb0 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002be4:	2047      	movs	r0, #71	@ 0x47
 8002be6:	f000 fdc7 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	44020c00 	.word	0x44020c00
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000

08002c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	@ 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c24:	d11f      	bne.n	8002c66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2c:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c36:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c44:	2302      	movs	r3, #2
 8002c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2300      	movs	r3, #0
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c54:	2301      	movs	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4829      	ldr	r0, [pc, #164]	@ (8002d04 <HAL_TIM_MspPostInit+0x100>)
 8002c60:	f000 fe48 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002c64:	e048      	b.n	8002cf8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_TIM_MspPostInit+0x104>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d11f      	bne.n	8002cb0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c76:	4a22      	ldr	r2, [pc, #136]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c80:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4818      	ldr	r0, [pc, #96]	@ (8002d0c <HAL_TIM_MspPostInit+0x108>)
 8002caa:	f000 fe23 	bl	80038f4 <HAL_GPIO_Init>
}
 8002cae:	e023      	b.n	8002cf8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_TIM_MspPostInit+0x10c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d11e      	bne.n	8002cf8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_TIM_MspPostInit+0xfc>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4804      	ldr	r0, [pc, #16]	@ (8002d04 <HAL_TIM_MspPostInit+0x100>)
 8002cf4:	f000 fdfe 	bl	80038f4 <HAL_GPIO_Init>
}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	@ 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	44020c00 	.word	0x44020c00
 8002d04:	42020000 	.word	0x42020000
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	42020400 	.word	0x42020400
 8002d10:	40000c00 	.word	0x40000c00

08002d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0c4      	sub	sp, #272	@ 0x110
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d38:	22d0      	movs	r2, #208	@ 0xd0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f009 f910 	bl	800bf62 <memset>
  if(huart->Instance==UART5)
 8002d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a92      	ldr	r2, [pc, #584]	@ (8002f98 <HAL_UART_MspInit+0x284>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d16c      	bne.n	8002e2e <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002d54:	f04f 0210 	mov.w	r2, #16
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 f904 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002d76:	f7ff fdcd 	bl	8002914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d7a:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d80:	4a86      	ldr	r2, [pc, #536]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d8a:	4b84      	ldr	r3, [pc, #528]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d98:	4b80      	ldr	r3, [pc, #512]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d9e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002da8:	4b7c      	ldr	r3, [pc, #496]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db6:	4b79      	ldr	r3, [pc, #484]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dbc:	4a77      	ldr	r2, [pc, #476]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dc6:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002dd4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002dee:	230e      	movs	r3, #14
 8002df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4869      	ldr	r0, [pc, #420]	@ (8002fa0 <HAL_UART_MspInit+0x28c>)
 8002dfc:	f000 fd7a 	bl	80038f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002e24:	4619      	mov	r1, r3
 8002e26:	485f      	ldr	r0, [pc, #380]	@ (8002fa4 <HAL_UART_MspInit+0x290>)
 8002e28:	f000 fd64 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e2c:	e0af      	b.n	8002f8e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8002e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fa8 <HAL_UART_MspInit+0x294>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d147      	bne.n	8002ed0 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e40:	f04f 0201 	mov.w	r2, #1
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 f88e 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002e62:	f7ff fd57 	bl	8002914 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e66:	4b4d      	ldr	r3, [pc, #308]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e72:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e76:	4b49      	ldr	r3, [pc, #292]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e8a:	4a44      	ldr	r2, [pc, #272]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e94:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ea2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4835      	ldr	r0, [pc, #212]	@ (8002fa0 <HAL_UART_MspInit+0x28c>)
 8002eca:	f000 fd13 	bl	80038f4 <HAL_GPIO_Init>
}
 8002ece:	e05e      	b.n	8002f8e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8002ed0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ed4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a33      	ldr	r2, [pc, #204]	@ (8002fac <HAL_UART_MspInit+0x298>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d155      	bne.n	8002f8e <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ee2:	f04f 0220 	mov.w	r2, #32
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 f83d 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8002f04:	f7ff fd06 	bl	8002914 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f08:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f18:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f1e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f26:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f34:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3c:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_UART_MspInit+0x288>)
 8002f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f4c:	f003 0204 	and.w	r2, r3, #4
 8002f50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f62:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f64:	23c0      	movs	r3, #192	@ 0xc0
 8002f66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f82:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002f86:	4619      	mov	r1, r3
 8002f88:	4806      	ldr	r0, [pc, #24]	@ (8002fa4 <HAL_UART_MspInit+0x290>)
 8002f8a:	f000 fcb3 	bl	80038f4 <HAL_GPIO_Init>
}
 8002f8e:	bf00      	nop
 8002f90:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40005000 	.word	0x40005000
 8002f9c:	44020c00 	.word	0x44020c00
 8002fa0:	42020400 	.word	0x42020400
 8002fa4:	42020800 	.word	0x42020800
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40006400 	.word	0x40006400

08002fb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0b8      	sub	sp, #224	@ 0xe0
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	22d0      	movs	r2, #208	@ 0xd0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f008 ffce 	bl	800bf62 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a15      	ldr	r2, [pc, #84]	@ (8003020 <HAL_PCD_MspInit+0x70>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d123      	bne.n	8003018 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0310 	mov.w	r3, #16
 8002fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002fdc:	2330      	movs	r3, #48	@ 0x30
 8002fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 ffc6 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8002ff2:	f7ff fc8f 	bl	8002914 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 8002ff6:	f001 f835 	bl	8004064 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_PCD_MspInit+0x74>)
 8002ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003000:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <HAL_PCD_MspInit+0x74>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003006:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_PCD_MspInit+0x74>)
 800300c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8003018:	bf00      	nop
 800301a:	37e0      	adds	r7, #224	@ 0xe0
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40016000 	.word	0x40016000
 8003024:	44020c00 	.word	0x44020c00

08003028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <NMI_Handler+0x4>

08003030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <HardFault_Handler+0x4>

08003038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <MemManage_Handler+0x4>

08003040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <BusFault_Handler+0x4>

08003048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <UsageFault_Handler+0x4>

08003050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307e:	f000 fa65 	bl	800354c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 800308c:	2102      	movs	r1, #2
 800308e:	4809      	ldr	r0, [pc, #36]	@ (80030b4 <TIM2_IRQHandler+0x2c>)
 8003090:	f000 fd82 	bl	8003b98 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 800309a:	2201      	movs	r2, #1
 800309c:	2104      	movs	r1, #4
 800309e:	4806      	ldr	r0, [pc, #24]	@ (80030b8 <TIM2_IRQHandler+0x30>)
 80030a0:	f7fe fda8 	bl	8001bf4 <Ramp_Out>
		Mototr_Poz_Inc(1);
 80030a4:	2001      	movs	r0, #1
 80030a6:	f7fe fca9 	bl	80019fc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030aa:	4803      	ldr	r0, [pc, #12]	@ (80030b8 <TIM2_IRQHandler+0x30>)
 80030ac:	f005 ff3a 	bl	8008f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	42020000 	.word	0x42020000
 80030b8:	2003aca4 	.word	0x2003aca4

080030bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 80030c0:	2102      	movs	r1, #2
 80030c2:	4809      	ldr	r0, [pc, #36]	@ (80030e8 <TIM3_IRQHandler+0x2c>)
 80030c4:	f000 fd68 	bl	8003b98 <HAL_GPIO_ReadPin>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 80030ce:	2202      	movs	r2, #2
 80030d0:	210c      	movs	r1, #12
 80030d2:	4806      	ldr	r0, [pc, #24]	@ (80030ec <TIM3_IRQHandler+0x30>)
 80030d4:	f7fe fd8e 	bl	8001bf4 <Ramp_Out>
		Mototr_Poz_Inc(2);
 80030d8:	2002      	movs	r0, #2
 80030da:	f7fe fc8f 	bl	80019fc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030de:	4803      	ldr	r0, [pc, #12]	@ (80030ec <TIM3_IRQHandler+0x30>)
 80030e0:	f005 ff20 	bl	8008f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	42020400 	.word	0x42020400
 80030ec:	2003acf0 	.word	0x2003acf0

080030f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 80030f4:	2101      	movs	r1, #1
 80030f6:	4809      	ldr	r0, [pc, #36]	@ (800311c <TIM5_IRQHandler+0x2c>)
 80030f8:	f000 fd4e 	bl	8003b98 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	4806      	ldr	r0, [pc, #24]	@ (8003120 <TIM5_IRQHandler+0x30>)
 8003108:	f7fe fd74 	bl	8001bf4 <Ramp_Out>
		  Mototr_Poz_Inc(0);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe fc75 	bl	80019fc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003112:	4803      	ldr	r0, [pc, #12]	@ (8003120 <TIM5_IRQHandler+0x30>)
 8003114:	f005 ff06 	bl	8008f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	42020000 	.word	0x42020000
 8003120:	2003ad3c 	.word	0x2003ad3c

08003124 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <TIM15_IRQHandler+0x10>)
 800312a:	f005 fefb 	bl	8008f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2003ad88 	.word	0x2003ad88

08003138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_kill>:

int _kill(int pid, int sig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003152:	f008 ff59 	bl	800c008 <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2216      	movs	r2, #22
 800315a:	601a      	str	r2, [r3, #0]
  return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_exit>:

void _exit (int status)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffe7 	bl	8003148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800317a:	bf00      	nop
 800317c:	e7fd      	b.n	800317a <_exit+0x12>

0800317e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e00a      	b.n	80031a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003190:	f3af 8000 	nop.w
 8003194:	4601      	mov	r1, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	60ba      	str	r2, [r7, #8]
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dbf0      	blt.n	8003190 <_read+0x12>
  }

  return len;
 80031ae:	687b      	ldr	r3, [r7, #4]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e009      	b.n	80031de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	60ba      	str	r2, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3301      	adds	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dbf1      	blt.n	80031ca <_write+0x12>
  }
  return len;
 80031e6:	687b      	ldr	r3, [r7, #4]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_close>:

int _close(int file)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003218:	605a      	str	r2, [r3, #4]
  return 0;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_isatty>:

int _isatty(int file)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003230:	2301      	movs	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003260:	4a14      	ldr	r2, [pc, #80]	@ (80032b4 <_sbrk+0x5c>)
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <_sbrk+0x60>)
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800326c:	4b13      	ldr	r3, [pc, #76]	@ (80032bc <_sbrk+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <_sbrk+0x64>)
 8003276:	4a12      	ldr	r2, [pc, #72]	@ (80032c0 <_sbrk+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800327a:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	429a      	cmp	r2, r3
 8003286:	d207      	bcs.n	8003298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003288:	f008 febe 	bl	800c008 <__errno>
 800328c:	4603      	mov	r3, r0
 800328e:	220c      	movs	r2, #12
 8003290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e009      	b.n	80032ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329e:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <_sbrk+0x64>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <_sbrk+0x64>)
 80032a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20044000 	.word	0x20044000
 80032b8:	00000400 	.word	0x00000400
 80032bc:	2003b270 	.word	0x2003b270
 80032c0:	2003b3c8 	.word	0x2003b3c8

080032c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032ca:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <SystemInit+0xdc>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	4a33      	ldr	r2, [pc, #204]	@ (80033a0 <SystemInit+0xdc>)
 80032d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80032da:	4b32      	ldr	r3, [pc, #200]	@ (80033a4 <SystemInit+0xe0>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80032e0:	4b30      	ldr	r3, [pc, #192]	@ (80033a4 <SystemInit+0xe0>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80032e6:	4b2f      	ldr	r3, [pc, #188]	@ (80033a4 <SystemInit+0xe0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <SystemInit+0xe0>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	492c      	ldr	r1, [pc, #176]	@ (80033a4 <SystemInit+0xe0>)
 80032f2:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <SystemInit+0xe4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80032f8:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <SystemInit+0xe0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80032fe:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <SystemInit+0xe0>)
 8003300:	2200      	movs	r2, #0
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8003304:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <SystemInit+0xe0>)
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <SystemInit+0xe0>)
 800330c:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <SystemInit+0xe8>)
 800330e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003310:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <SystemInit+0xe0>)
 8003312:	2200      	movs	r2, #0
 8003314:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003316:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <SystemInit+0xe0>)
 8003318:	4a24      	ldr	r2, [pc, #144]	@ (80033ac <SystemInit+0xe8>)
 800331a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800331c:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <SystemInit+0xe0>)
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <SystemInit+0xe0>)
 8003324:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <SystemInit+0xe8>)
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <SystemInit+0xe0>)
 800332a:	2200      	movs	r2, #0
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800332e:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <SystemInit+0xe0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <SystemInit+0xe0>)
 8003334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003338:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800333a:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <SystemInit+0xe0>)
 800333c:	2200      	movs	r2, #0
 800333e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003340:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <SystemInit+0xdc>)
 8003342:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003346:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <SystemInit+0xec>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003350:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003358:	d003      	beq.n	8003362 <SystemInit+0x9e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003360:	d117      	bne.n	8003392 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <SystemInit+0xec>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800336e:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <SystemInit+0xec>)
 8003370:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <SystemInit+0xf0>)
 8003372:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <SystemInit+0xec>)
 8003376:	4a10      	ldr	r2, [pc, #64]	@ (80033b8 <SystemInit+0xf4>)
 8003378:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <SystemInit+0xec>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <SystemInit+0xec>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <SystemInit+0xec>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <SystemInit+0xec>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	61d3      	str	r3, [r2, #28]
  }
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00
 80033a4:	44020c00 	.word	0x44020c00
 80033a8:	eae2eae3 	.word	0xeae2eae3
 80033ac:	01010280 	.word	0x01010280
 80033b0:	40022000 	.word	0x40022000
 80033b4:	08192a3b 	.word	0x08192a3b
 80033b8:	4c5d6e7f 	.word	0x4c5d6e7f

080033bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033bc:	480d      	ldr	r0, [pc, #52]	@ (80033f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c0:	f7ff ff80 	bl	80032c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c4:	480c      	ldr	r0, [pc, #48]	@ (80033f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80033c6:	490d      	ldr	r1, [pc, #52]	@ (80033fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80033c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <LoopForever+0xe>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003408 <LoopForever+0x16>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033ea:	f008 fe13 	bl	800c014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ee:	f7fe fdad 	bl	8001f4c <main>

080033f2 <LoopForever>:

LoopForever:
    b LoopForever
 80033f2:	e7fe      	b.n	80033f2 <LoopForever>
  ldr   r0, =_estack
 80033f4:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003400:	08010298 	.word	0x08010298
  ldr r2, =_sbss
 8003404:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003408:	2003b3c4 	.word	0x2003b3c4

0800340c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC1_IRQHandler>
	...

08003410 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003414:	2003      	movs	r0, #3
 8003416:	f000 f98a 	bl	800372e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800341a:	f001 fc23 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <HAL_Init+0x44>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	490b      	ldr	r1, [pc, #44]	@ (8003458 <HAL_Init+0x48>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	4a0a      	ldr	r2, [pc, #40]	@ (800345c <HAL_Init+0x4c>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003434:	2004      	movs	r0, #4
 8003436:	f000 f9cf 	bl	80037d8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800343a:	200f      	movs	r0, #15
 800343c:	f000 f810 	bl	8003460 <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e002      	b.n	8003450 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800344a:	f7ff fa69 	bl	8002920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	44020c00 	.word	0x44020c00
 8003458:	0800fe18 	.word	0x0800fe18
 800345c:	2000001c 	.word	0x2000001c

08003460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <HAL_InitTick+0xdc>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e05c      	b.n	8003532 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <HAL_InitTick+0xe0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d10c      	bne.n	800349e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003484:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <HAL_InitTick+0xe4>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <HAL_InitTick+0xdc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003492:	fbb3 f3f1 	udiv	r3, r3, r1
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e037      	b.n	800350e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800349e:	f000 f9f3 	bl	8003888 <HAL_SYSTICK_GetCLKSourceConfig>
 80034a2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d023      	beq.n	80034f2 <HAL_InitTick+0x92>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d82d      	bhi.n	800350c <HAL_InitTick+0xac>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_InitTick+0x5e>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d00d      	beq.n	80034d8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80034bc:	e026      	b.n	800350c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80034be:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <HAL_InitTick+0xe4>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_InitTick+0xdc>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80034cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	60fb      	str	r3, [r7, #12]
        break;
 80034d6:	e01a      	b.n	800350e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034d8:	4b18      	ldr	r3, [pc, #96]	@ (800353c <HAL_InitTick+0xdc>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	60fb      	str	r3, [r7, #12]
        break;
 80034f0:	e00d      	b.n	800350e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_InitTick+0xdc>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003500:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	60fb      	str	r3, [r7, #12]
        break;
 800350a:	e000      	b.n	800350e <HAL_InitTick+0xae>
        break;
 800350c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f940 	bl	8003794 <HAL_SYSTICK_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e009      	b.n	8003532 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800351e:	2200      	movs	r2, #0
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	f000 f90d 	bl	8003744 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800352a:	4a07      	ldr	r2, [pc, #28]	@ (8003548 <HAL_InitTick+0xe8>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000024 	.word	0x20000024
 8003540:	e000e010 	.word	0xe000e010
 8003544:	2000001c 	.word	0x2000001c
 8003548:	20000020 	.word	0x20000020

0800354c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	@ (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000024 	.word	0x20000024
 8003570:	2003b274 	.word	0x2003b274

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2003b274 	.word	0x2003b274

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff ffee 	bl	8003574 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d005      	beq.n	80035b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_Delay+0x44>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b2:	bf00      	nop
 80035b4:	f7ff ffde 	bl	8003574 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d8f7      	bhi.n	80035b4 <HAL_Delay+0x28>
  {
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000024 	.word	0x20000024

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4907      	ldr	r1, [pc, #28]	@ (8003670 <__NVIC_EnableIRQ+0x38>)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	@ (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	@ (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	@ 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ff4c 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003752:	f7ff ff63 	bl	800361c <__NVIC_GetPriorityGrouping>
 8003756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f7ff ffb3 	bl	80036c8 <NVIC_EncodePriority>
 8003762:	4602      	mov	r2, r0
 8003764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ff82 	bl	8003674 <__NVIC_SetPriority>
}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff56 	bl	8003638 <__NVIC_EnableIRQ>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a4:	d301      	bcc.n	80037aa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00d      	b.n	80037c6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <HAL_SYSTICK_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_SYSTICK_Config+0x40>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_SYSTICK_Config+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_SYSTICK_Config+0x40>)
 80037be:	f043 0303 	orr.w	r3, r3, #3
 80037c2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d844      	bhi.n	8003870 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80037e6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	0800380f 	.word	0x0800380f
 80037f0:	0800382d 	.word	0x0800382d
 80037f4:	0800384f 	.word	0x0800384f
 80037f8:	08003871 	.word	0x08003871
 80037fc:	08003801 	.word	0x08003801
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003800:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1e      	ldr	r2, [pc, #120]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6013      	str	r3, [r2, #0]
      break;
 800380c:	e031      	b.n	8003872 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800380e:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800381a:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800381c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003820:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003822:	f023 030c 	bic.w	r3, r3, #12
 8003826:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800382a:	e022      	b.n	8003872 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003832:	f023 0304 	bic.w	r3, r3, #4
 8003836:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800383a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800383e:	f023 030c 	bic.w	r3, r3, #12
 8003842:	4a10      	ldr	r2, [pc, #64]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800384c:	e011      	b.n	8003872 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800384e:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800385c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003860:	f023 030c 	bic.w	r3, r3, #12
 8003864:	4a07      	ldr	r2, [pc, #28]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003866:	f043 0308 	orr.w	r3, r3, #8
 800386a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800386e:	e000      	b.n	8003872 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003870:	bf00      	nop
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e010 	.word	0xe000e010
 8003884:	44020c00 	.word	0x44020c00

08003888 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800388e:	4b17      	ldr	r3, [pc, #92]	@ (80038ec <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800389a:	2304      	movs	r3, #4
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e01e      	b.n	80038de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80038a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d00f      	beq.n	80038d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d80f      	bhi.n	80038d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d003      	beq.n	80038cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80038c4:	e008      	b.n	80038d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
        break;
 80038ca:	e008      	b.n	80038de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80038cc:	2301      	movs	r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
        break;
 80038d0:	e005      	b.n	80038de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80038d2:	2302      	movs	r3, #2
 80038d4:	607b      	str	r3, [r7, #4]
        break;
 80038d6:	e002      	b.n	80038de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
        break;
 80038dc:	bf00      	nop
    }
  }
  return systick_source;
 80038de:	687b      	ldr	r3, [r7, #4]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e010 	.word	0xe000e010
 80038f0:	44020c00 	.word	0x44020c00

080038f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003902:	e136      	b.n	8003b72 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8128 	beq.w	8003b6c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x38>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b12      	cmp	r3, #18
 800392a:	d125      	bne.n	8003978 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4013      	ands	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00b      	beq.n	80039cc <HAL_GPIO_Init+0xd8>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d007      	beq.n	80039cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c0:	2b11      	cmp	r3, #17
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b12      	cmp	r3, #18
 80039ca:	d130      	bne.n	8003a2e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4013      	ands	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a02:	2201      	movs	r2, #1
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0201 	and.w	r2, r3, #1
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d017      	beq.n	8003a66 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d07c      	beq.n	8003b6c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003a72:	4a47      	ldr	r2, [pc, #284]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	3318      	adds	r3, #24
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4013      	ands	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0a9a      	lsrs	r2, r3, #10
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <HAL_GPIO_Init+0x2a0>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	f002 0203 	and.w	r2, r2, #3
 8003aa4:	00d2      	lsls	r2, r2, #3
 8003aa6:	4093      	lsls	r3, r2
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003aae:	4938      	ldr	r1, [pc, #224]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003abc:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4013      	ands	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b0a:	4a21      	ldr	r2, [pc, #132]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b44:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003b64:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <HAL_GPIO_Init+0x29c>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f47f aec1 	bne.w	8003904 <HAL_GPIO_Init+0x10>
  }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	44022000 	.word	0x44022000
 8003b94:	002f7f7f 	.word	0x002f7f7f

08003b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e08d      	b.n	8003d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fe86 	bl	8002930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	@ 0x24
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e006      	b.n	8003c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d108      	bne.n	8003c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e007      	b.n	8003caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d138      	bne.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e032      	b.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2224      	movs	r2, #36	@ 0x24
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d139      	bne.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e033      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	@ 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_ICACHE_Enable+0x1c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <HAL_ICACHE_Enable+0x1c>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40030400 	.word	0x40030400

08003e7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0c3      	b.n	8004016 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff f884 	bl	8002fb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f006 ffdd 	bl	800ae74 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e03f      	b.n	8003f40 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3315      	adds	r3, #21
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3317      	adds	r3, #23
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	3324      	adds	r3, #36	@ 0x24
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3328      	adds	r3, #40	@ 0x28
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	3304      	adds	r3, #4
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3ba      	bcc.n	8003ec0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e044      	b.n	8003fda <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	791b      	ldrb	r3, [r3, #4]
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3b5      	bcc.n	8003f50 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7c1a      	ldrb	r2, [r3, #16]
 8003fec:	f88d 2000 	strb.w	r2, [sp]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff4:	f006 ff76 	bl	800aee4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7b1b      	ldrb	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f805 	bl	800401e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_PWREx_EnableVddUSB+0x1c>)
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <HAL_PWREx_EnableVddUSB+0x1c>)
 800406e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004072:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	44020800 	.word	0x44020800

08004084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f000 bc28 	b.w	80048e8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004098:	4b94      	ldr	r3, [pc, #592]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f003 0318 	and.w	r3, r3, #24
 80040a0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80040a2:	4b92      	ldr	r3, [pc, #584]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x46>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b18      	cmp	r3, #24
 80040c2:	d114      	bne.n	80040ee <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d111      	bne.n	80040ee <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f000 bc08 	b.w	80048e8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80040d8:	4b84      	ldr	r3, [pc, #528]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	4981      	ldr	r1, [pc, #516]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80040ec:	e040      	b.n	8004170 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d023      	beq.n	800413e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040f6:	4b7d      	ldr	r3, [pc, #500]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7c      	ldr	r2, [pc, #496]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7ff fa37 	bl	8003574 <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800410a:	f7ff fa33 	bl	8003574 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e3e5      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800411c:	4b73      	ldr	r3, [pc, #460]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004128:	4b70      	ldr	r3, [pc, #448]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	496d      	ldr	r1, [pc, #436]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004138:	4313      	orrs	r3, r2
 800413a:	618b      	str	r3, [r1, #24]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800413e:	4b6b      	ldr	r3, [pc, #428]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6a      	ldr	r2, [pc, #424]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7ff fa13 	bl	8003574 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004152:	f7ff fa0f 	bl	8003574 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e3c1      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a0 	beq.w	80042be <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x10c>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b18      	cmp	r3, #24
 8004188:	d109      	bne.n	800419e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f040 8092 	bne.w	80042be <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e3a4      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x132>
 80041a8:	4b50      	ldr	r3, [pc, #320]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a4f      	ldr	r2, [pc, #316]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e058      	b.n	8004268 <HAL_RCC_OscConfig+0x1e4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x160>
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a47      	ldr	r2, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b45      	ldr	r3, [pc, #276]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a44      	ldr	r2, [pc, #272]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e041      	b.n	8004268 <HAL_RCC_OscConfig+0x1e4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041ec:	d112      	bne.n	8004214 <HAL_RCC_OscConfig+0x190>
 80041ee:	4b3f      	ldr	r3, [pc, #252]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3e      	ldr	r2, [pc, #248]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3b      	ldr	r2, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004200:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a38      	ldr	r2, [pc, #224]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e029      	b.n	8004268 <HAL_RCC_OscConfig+0x1e4>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800421c:	d112      	bne.n	8004244 <HAL_RCC_OscConfig+0x1c0>
 800421e:	4b33      	ldr	r3, [pc, #204]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a32      	ldr	r2, [pc, #200]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2c      	ldr	r2, [pc, #176]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e011      	b.n	8004268 <HAL_RCC_OscConfig+0x1e4>
 8004244:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b26      	ldr	r3, [pc, #152]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a22      	ldr	r2, [pc, #136]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 8004262:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7ff f980 	bl	8003574 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004278:	f7ff f97c 	bl	8003574 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	@ 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e32e      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x1f4>
 8004296:	e012      	b.n	80042be <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7ff f96c 	bl	8003574 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80042a0:	f7ff f968 	bl	8003574 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e31a      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <HAL_RCC_OscConfig+0x268>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 809a 	beq.w	8004400 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x25a>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b18      	cmp	r3, #24
 80042d6:	d149      	bne.n	800436c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d146      	bne.n	800436c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e2fe      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
 80042ea:	bf00      	nop
 80042ec:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11c      	bne.n	8004330 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80042f6:	4b9a      	ldr	r3, [pc, #616]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0218 	and.w	r2, r3, #24
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d014      	beq.n	8004330 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004306:	4b96      	ldr	r3, [pc, #600]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0218 	bic.w	r2, r3, #24
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	4993      	ldr	r1, [pc, #588]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004318:	f000 fdd0 	bl	8004ebc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800431c:	4b91      	ldr	r3, [pc, #580]	@ (8004564 <HAL_RCC_OscConfig+0x4e0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f89d 	bl	8003460 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e2db      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7ff f920 	bl	8003574 <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004338:	f7ff f91c 	bl	8003574 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e2ce      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434a:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004356:	4b82      	ldr	r3, [pc, #520]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	497e      	ldr	r1, [pc, #504]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800436a:	e049      	b.n	8004400 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02c      	beq.n	80043ce <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004374:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 0218 	bic.w	r2, r3, #24
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4977      	ldr	r1, [pc, #476]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7ff f8ef 	bl	8003574 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800439a:	f7ff f8eb 	bl	8003574 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e29d      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80043b8:	4b69      	ldr	r3, [pc, #420]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	4966      	ldr	r1, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
 80043cc:	e018      	b.n	8004400 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b64      	ldr	r3, [pc, #400]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a63      	ldr	r2, [pc, #396]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7ff f8cb 	bl	8003574 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80043e2:	f7ff f8c7 	bl	8003574 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e279      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d03c      	beq.n	8004486 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01c      	beq.n	800444e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004414:	4b52      	ldr	r3, [pc, #328]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441a:	4a51      	ldr	r2, [pc, #324]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800441c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004420:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7ff f8a6 	bl	8003574 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800442c:	f7ff f8a2 	bl	8003574 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e254      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800443e:	4b48      	ldr	r3, [pc, #288]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <HAL_RCC_OscConfig+0x3a8>
 800444c:	e01b      	b.n	8004486 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444e:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004454:	4a42      	ldr	r2, [pc, #264]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800445a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7ff f889 	bl	8003574 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004466:	f7ff f885 	bl	8003574 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e237      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004478:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800447a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800447e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1ef      	bne.n	8004466 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80d2 	beq.w	8004638 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004494:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0x4e4>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d118      	bne.n	80044d2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80044a0:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <HAL_RCC_OscConfig+0x4e4>)
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	4a30      	ldr	r2, [pc, #192]	@ (8004568 <HAL_RCC_OscConfig+0x4e4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ac:	f7ff f862 	bl	8003574 <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7ff f85e 	bl	8003574 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e210      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044c6:	4b28      	ldr	r3, [pc, #160]	@ (8004568 <HAL_RCC_OscConfig+0x4e4>)
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0x468>
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80044dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044ea:	e074      	b.n	80045d6 <HAL_RCC_OscConfig+0x552>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d118      	bne.n	8004526 <HAL_RCC_OscConfig+0x4a2>
 80044f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80044f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004504:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800450c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004510:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004524:	e057      	b.n	80045d6 <HAL_RCC_OscConfig+0x552>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d11e      	bne.n	800456c <HAL_RCC_OscConfig+0x4e8>
 800452e:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004536:	f043 0304 	orr.w	r3, r3, #4
 800453a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004544:	4a06      	ldr	r2, [pc, #24]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800454e:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004554:	4a02      	ldr	r2, [pc, #8]	@ (8004560 <HAL_RCC_OscConfig+0x4dc>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800455e:	e03a      	b.n	80045d6 <HAL_RCC_OscConfig+0x552>
 8004560:	44020c00 	.word	0x44020c00
 8004564:	20000020 	.word	0x20000020
 8004568:	44020800 	.word	0x44020800
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b85      	cmp	r3, #133	@ 0x85
 8004572:	d118      	bne.n	80045a6 <HAL_RCC_OscConfig+0x522>
 8004574:	4ba2      	ldr	r3, [pc, #648]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800457a:	4aa1      	ldr	r2, [pc, #644]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004584:	4b9e      	ldr	r3, [pc, #632]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458a:	4a9d      	ldr	r2, [pc, #628]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800458c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004590:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004594:	4b9a      	ldr	r3, [pc, #616]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459a:	4a99      	ldr	r2, [pc, #612]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045a4:	e017      	b.n	80045d6 <HAL_RCC_OscConfig+0x552>
 80045a6:	4b96      	ldr	r3, [pc, #600]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ac:	4a94      	ldr	r2, [pc, #592]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045b6:	4b92      	ldr	r3, [pc, #584]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045bc:	4a90      	ldr	r2, [pc, #576]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045cc:	4a8c      	ldr	r2, [pc, #560]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fe ffc9 	bl	8003574 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe ffc5 	bl	8003574 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e175      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fc:	4b80      	ldr	r3, [pc, #512]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80045fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ed      	beq.n	80045e6 <HAL_RCC_OscConfig+0x562>
 800460a:	e015      	b.n	8004638 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fe ffb2 	bl	8003574 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe ffae 	bl	8003574 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e15e      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462a:	4b75      	ldr	r3, [pc, #468]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800462c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ed      	bne.n	8004614 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d036      	beq.n	80046b2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d019      	beq.n	8004680 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800464c:	4b6c      	ldr	r3, [pc, #432]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6b      	ldr	r2, [pc, #428]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004652:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fe ff8c 	bl	8003574 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004660:	f7fe ff88 	bl	8003574 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e13a      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004672:	4b63      	ldr	r3, [pc, #396]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x5dc>
 800467e:	e018      	b.n	80046b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004680:	4b5f      	ldr	r3, [pc, #380]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800468a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fe ff72 	bl	8003574 <HAL_GetTick>
 8004690:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004694:	f7fe ff6e 	bl	8003574 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e120      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046a6:	4b56      	ldr	r3, [pc, #344]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8115 	beq.w	80048e6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b18      	cmp	r3, #24
 80046c0:	f000 80af 	beq.w	8004822 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f040 8086 	bne.w	80047da <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80046ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80046d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fe ff4b 	bl	8003574 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80046e2:	f7fe ff47 	bl	8003574 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0f9      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80046f4:	4b42      	ldr	r3, [pc, #264]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004700:	4b3f      	ldr	r3, [pc, #252]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004708:	f023 0303 	bic.w	r3, r3, #3
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004714:	0212      	lsls	r2, r2, #8
 8004716:	430a      	orrs	r2, r1
 8004718:	4939      	ldr	r1, [pc, #228]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	628b      	str	r3, [r1, #40]	@ 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004722:	3b01      	subs	r3, #1
 8004724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	3b01      	subs	r3, #1
 800472e:	025b      	lsls	r3, r3, #9
 8004730:	b29b      	uxth	r3, r3
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	3b01      	subs	r3, #1
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800474e:	492c      	ldr	r1, [pc, #176]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004754:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800475a:	f023 0310 	bic.w	r3, r3, #16
 800475e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800476a:	4b25      	ldr	r3, [pc, #148]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	4a24      	ldr	r2, [pc, #144]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004770:	f043 0310 	orr.w	r3, r3, #16
 8004774:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004776:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	f023 020c 	bic.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	491f      	ldr	r1, [pc, #124]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	f023 0220 	bic.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004794:	491a      	ldr	r1, [pc, #104]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800479a:	4b19      	ldr	r3, [pc, #100]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80047a6:	4b16      	ldr	r3, [pc, #88]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fe fedf 	bl	8003574 <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047ba:	f7fe fedb 	bl	8003574 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e08d      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x736>
 80047d8:	e085      	b.n	80048e6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x77c>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe fec5 	bl	8003574 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047ee:	f7fe fec1 	bl	8003574 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d903      	bls.n	8004804 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e073      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
 8004800:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004804:	4b3a      	ldr	r3, [pc, #232]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ee      	bne.n	80047ee <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004810:	4b37      	ldr	r3, [pc, #220]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	4a36      	ldr	r2, [pc, #216]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 8004816:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	6293      	str	r3, [r2, #40]	@ 0x28
 8004820:	e061      	b.n	80048e6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004822:	4b33      	ldr	r3, [pc, #204]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004828:	4b31      	ldr	r3, [pc, #196]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	2b01      	cmp	r3, #1
 8004834:	d031      	beq.n	800489a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d12a      	bne.n	800489a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d122      	bne.n	800489a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d11a      	bne.n	800489a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	0a5b      	lsrs	r3, r3, #9
 8004868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d111      	bne.n	800489a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d108      	bne.n	800489a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0e1b      	lsrs	r3, r3, #24
 800488c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e024      	b.n	80048e8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800489e:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d01a      	beq.n	80048e6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80048b0:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048b6:	f023 0310 	bic.w	r3, r3, #16
 80048ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fe5a 	bl	8003574 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80048c2:	bf00      	nop
 80048c4:	f7fe fe56 	bl	8003574 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d0f9      	beq.n	80048c4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d4:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80048da:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	4a04      	ldr	r2, [pc, #16]	@ (80048f0 <HAL_RCC_OscConfig+0x86c>)
 80048e0:	f043 0310 	orr.w	r3, r3, #16
 80048e4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	44020c00 	.word	0x44020c00

080048f4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e19e      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b83      	ldr	r3, [pc, #524]	@ (8004b18 <HAL_RCC_ClockConfig+0x224>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d910      	bls.n	8004938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b80      	ldr	r3, [pc, #512]	@ (8004b18 <HAL_RCC_ClockConfig+0x224>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 020f 	bic.w	r2, r3, #15
 800491e:	497e      	ldr	r1, [pc, #504]	@ (8004b18 <HAL_RCC_ClockConfig+0x224>)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b7c      	ldr	r3, [pc, #496]	@ (8004b18 <HAL_RCC_ClockConfig+0x224>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e186      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	4b74      	ldr	r3, [pc, #464]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004952:	429a      	cmp	r2, r3
 8004954:	d909      	bls.n	800496a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004956:	4b71      	ldr	r3, [pc, #452]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	496d      	ldr	r1, [pc, #436]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004966:	4313      	orrs	r3, r2
 8004968:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	4b68      	ldr	r3, [pc, #416]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004984:	429a      	cmp	r2, r3
 8004986:	d909      	bls.n	800499c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004988:	4b64      	ldr	r3, [pc, #400]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	4961      	ldr	r1, [pc, #388]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004998:	4313      	orrs	r3, r2
 800499a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d010      	beq.n	80049ca <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	4b5b      	ldr	r3, [pc, #364]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d908      	bls.n	80049ca <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80049b8:	4b58      	ldr	r3, [pc, #352]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4955      	ldr	r1, [pc, #340]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d010      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	4b50      	ldr	r3, [pc, #320]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d908      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80049e6:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 020f 	bic.w	r2, r3, #15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	494a      	ldr	r1, [pc, #296]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8093 	beq.w	8004b2c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a0e:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d121      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e113      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	4b3d      	ldr	r3, [pc, #244]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d115      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e107      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a3e:	4b37      	ldr	r3, [pc, #220]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0fb      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4e:	4b33      	ldr	r3, [pc, #204]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0f3      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	492c      	ldr	r1, [pc, #176]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fe fd80 	bl	8003574 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fe fd78 	bl	8003574 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0d7      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a96:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0318 	and.w	r3, r3, #24
 8004a9e:	2b18      	cmp	r3, #24
 8004aa0:	d1ee      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x18c>
 8004aa2:	e043      	b.n	8004b2c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d112      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004aae:	f7fe fd61 	bl	8003574 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0c0      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 0318 	and.w	r3, r3, #24
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d1ee      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ba>
 8004ad0:	e02c      	b.n	8004b2c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d122      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fe fd4a 	bl	8003574 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0a9      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004af2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <HAL_RCC_ClockConfig+0x228>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0318 	and.w	r3, r3, #24
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d1ee      	bne.n	8004adc <HAL_RCC_ClockConfig+0x1e8>
 8004afe:	e015      	b.n	8004b2c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fe fd38 	bl	8003574 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d906      	bls.n	8004b20 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e097      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
 8004b16:	bf00      	nop
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b20:	4b4b      	ldr	r3, [pc, #300]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f003 0318 	and.w	r3, r3, #24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e9      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	4b44      	ldr	r3, [pc, #272]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d208      	bcs.n	8004b5a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004b48:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 020f 	bic.w	r2, r3, #15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	493e      	ldr	r1, [pc, #248]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <HAL_RCC_ClockConfig+0x360>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d210      	bcs.n	8004b8a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HAL_RCC_ClockConfig+0x360>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 020f 	bic.w	r2, r3, #15
 8004b70:	4938      	ldr	r1, [pc, #224]	@ (8004c54 <HAL_RCC_ClockConfig+0x360>)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b78:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <HAL_RCC_ClockConfig+0x360>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e05d      	b.n	8004c46 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d208      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4927      	ldr	r1, [pc, #156]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d209      	bcs.n	8004bea <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	491a      	ldr	r1, [pc, #104]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d209      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004c08:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	490e      	ldr	r1, [pc, #56]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c1c:	f000 f822 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_ClockConfig+0x35c>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490b      	ldr	r1, [pc, #44]	@ (8004c58 <HAL_RCC_ClockConfig+0x364>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_RCC_ClockConfig+0x368>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x36c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fc10 	bl	8003460 <HAL_InitTick>
 8004c40:	4603      	mov	r3, r0
 8004c42:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004c44:	7afb      	ldrb	r3, [r7, #11]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	44020c00 	.word	0x44020c00
 8004c54:	40022000 	.word	0x40022000
 8004c58:	0800fe18 	.word	0x0800fe18
 8004c5c:	2000001c 	.word	0x2000001c
 8004c60:	20000020 	.word	0x20000020

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	@ 0x24
 8004c68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004c6a:	4b8c      	ldr	r3, [pc, #560]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0318 	and.w	r3, r3, #24
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d102      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c76:	4b8a      	ldr	r3, [pc, #552]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e107      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7c:	4b87      	ldr	r3, [pc, #540]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0318 	and.w	r3, r3, #24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d112      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004c88:	4b84      	ldr	r3, [pc, #528]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c94:	4b81      	ldr	r3, [pc, #516]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	4a81      	ldr	r2, [pc, #516]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e0f1      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e0ee      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cae:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0318 	and.w	r3, r3, #24
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x244>)
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e0e5      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc0:	4b76      	ldr	r3, [pc, #472]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 0318 	and.w	r3, r3, #24
 8004cc8:	2b18      	cmp	r3, #24
 8004cca:	f040 80dd 	bne.w	8004e88 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004cce:	4b73      	ldr	r3, [pc, #460]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004cd8:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d08:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80b7 	beq.w	8004e82 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0xbe>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d056      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x16a>
 8004d20:	e077      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d22:	4b5e      	ldr	r3, [pc, #376]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02d      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d58:	4b50      	ldr	r3, [pc, #320]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d6c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004eac <HAL_RCC_GetSysClockFreq+0x248>
 8004d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d84:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004d88:	e065      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004eb0 <HAL_RCC_GetSysClockFreq+0x24c>
 8004d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004db0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004eac <HAL_RCC_GetSysClockFreq+0x248>
 8004db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004dcc:	e043      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004eb4 <HAL_RCC_GetSysClockFreq+0x250>
 8004ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004df0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004df4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004eac <HAL_RCC_GetSysClockFreq+0x248>
 8004df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004e10:	e021      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004eb8 <HAL_RCC_GetSysClockFreq+0x254>
 8004e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e38:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004eac <HAL_RCC_GetSysClockFreq+0x248>
 8004e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e50:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004e54:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004e56:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	0a5b      	lsrs	r3, r3, #9
 8004e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e60:	3301      	adds	r3, #1
 8004e62:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	ee17 3a90 	vmov	r3, s15
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e004      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e001      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e8a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	@ 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	44020c00 	.word	0x44020c00
 8004ea0:	003d0900 	.word	0x003d0900
 8004ea4:	03d09000 	.word	0x03d09000
 8004ea8:	016e3600 	.word	0x016e3600
 8004eac:	46000000 	.word	0x46000000
 8004eb0:	4c742400 	.word	0x4c742400
 8004eb4:	4bb71b00 	.word	0x4bb71b00
 8004eb8:	4a742400 	.word	0x4a742400

08004ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ec0:	f7ff fed0 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004eca:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ece:	4907      	ldr	r1, [pc, #28]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x30>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004ed2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004edc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004ede:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	44020c00 	.word	0x44020c00
 8004eec:	0800fe18 	.word	0x0800fe18
 8004ef0:	2000001c 	.word	0x2000001c

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ef8:	f7ff ffe0 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4904      	ldr	r1, [pc, #16]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	44020c00 	.word	0x44020c00
 8004f1c:	0800fe28 	.word	0x0800fe28

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004f24:	f7ff ffca 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4904      	ldr	r1, [pc, #16]	@ (8004f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	44020c00 	.word	0x44020c00
 8004f48:	0800fe28 	.word	0x0800fe28

08004f4c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004f50:	f7ff ffb4 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	0b1b      	lsrs	r3, r3, #12
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	44020c00 	.word	0x44020c00
 8004f74:	0800fe28 	.word	0x0800fe28

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b0ba      	sub	sp, #232	@ 0xe8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	ea54 0305 	orrs.w	r3, r4, r5
 8004fa2:	d00b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004fa4:	4bcd      	ldr	r3, [pc, #820]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004faa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb4:	4ac9      	ldr	r2, [pc, #804]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f002 0801 	and.w	r8, r2, #1
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	ea58 0309 	orrs.w	r3, r8, r9
 8004fd0:	d042      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d823      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	08004ffd 	.word	0x08004ffd
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800502d 	.word	0x0800502d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005000:	3308      	adds	r3, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f003 f906 	bl	8008214 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800500e:	e00e      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005014:	3330      	adds	r3, #48	@ 0x30
 8005016:	4618      	mov	r0, r3
 8005018:	f003 f994 	bl	8008344 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005036:	4ba9      	ldr	r3, [pc, #676]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800503c:	f023 0107 	bic.w	r1, r3, #7
 8005040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	4aa5      	ldr	r2, [pc, #660]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005048:	430b      	orrs	r3, r1
 800504a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800504e:	e003      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005054:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f002 0a02 	and.w	sl, r2, #2
 8005064:	f04f 0b00 	mov.w	fp, #0
 8005068:	ea5a 030b 	orrs.w	r3, sl, fp
 800506c:	f000 8088 	beq.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	2b28      	cmp	r3, #40	@ 0x28
 8005078:	d868      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800507a:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005155 	.word	0x08005155
 8005084:	0800514d 	.word	0x0800514d
 8005088:	0800514d 	.word	0x0800514d
 800508c:	0800514d 	.word	0x0800514d
 8005090:	0800514d 	.word	0x0800514d
 8005094:	0800514d 	.word	0x0800514d
 8005098:	0800514d 	.word	0x0800514d
 800509c:	0800514d 	.word	0x0800514d
 80050a0:	08005125 	.word	0x08005125
 80050a4:	0800514d 	.word	0x0800514d
 80050a8:	0800514d 	.word	0x0800514d
 80050ac:	0800514d 	.word	0x0800514d
 80050b0:	0800514d 	.word	0x0800514d
 80050b4:	0800514d 	.word	0x0800514d
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800514d 	.word	0x0800514d
 80050c0:	08005139 	.word	0x08005139
 80050c4:	0800514d 	.word	0x0800514d
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	0800514d 	.word	0x0800514d
 80050d0:	0800514d 	.word	0x0800514d
 80050d4:	0800514d 	.word	0x0800514d
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	08005155 	.word	0x08005155
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	0800514d 	.word	0x0800514d
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	0800514d 	.word	0x0800514d
 8005100:	08005155 	.word	0x08005155
 8005104:	0800514d 	.word	0x0800514d
 8005108:	0800514d 	.word	0x0800514d
 800510c:	0800514d 	.word	0x0800514d
 8005110:	0800514d 	.word	0x0800514d
 8005114:	0800514d 	.word	0x0800514d
 8005118:	0800514d 	.word	0x0800514d
 800511c:	0800514d 	.word	0x0800514d
 8005120:	08005155 	.word	0x08005155
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005128:	3308      	adds	r3, #8
 800512a:	4618      	mov	r0, r3
 800512c:	f003 f872 	bl	8008214 <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005136:	e00e      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800513c:	3330      	adds	r3, #48	@ 0x30
 800513e:	4618      	mov	r0, r3
 8005140:	f003 f900 	bl	8008344 <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800514a:	e004      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005156:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800515e:	4b5f      	ldr	r3, [pc, #380]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005164:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	4a5b      	ldr	r2, [pc, #364]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005170:	430b      	orrs	r3, r1
 8005172:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005176:	e003      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800517c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0304 	and.w	r3, r2, #4
 800518c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d04e      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051aa:	d02c      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80051ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051b0:	d825      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	d028      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051bc:	d81f      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051be:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c0:	d025      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80051c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c4:	d81b      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d00f      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80051ca:	2b80      	cmp	r3, #128	@ 0x80
 80051cc:	d817      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01f      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80051d2:	2b40      	cmp	r3, #64	@ 0x40
 80051d4:	d113      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051da:	3308      	adds	r3, #8
 80051dc:	4618      	mov	r0, r3
 80051de:	f003 f819 	bl	8008214 <RCCEx_PLL2_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80051e8:	e014      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ee:	3330      	adds	r3, #48	@ 0x30
 80051f0:	4618      	mov	r0, r3
 80051f2:	f003 f8a7 	bl	8008344 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80051fc:	e00a      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005206:	bf00      	nop
 8005208:	e004      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005214:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10c      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800521c:	4b2f      	ldr	r3, [pc, #188]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800521e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005222:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800522a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522c:	4a2b      	ldr	r2, [pc, #172]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800522e:	430b      	orrs	r3, r1
 8005230:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005234:	e003      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005236:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800523a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800523e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f002 0308 	and.w	r3, r2, #8
 800524a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005258:	460b      	mov	r3, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	d056      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800525e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005264:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005268:	d031      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 800526a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800526e:	d82a      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005274:	d02d      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527a:	d824      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800527c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005280:	d029      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005282:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005286:	d81e      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528c:	d011      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d818      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d023      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800529c:	d113      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800529e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052a2:	3308      	adds	r3, #8
 80052a4:	4618      	mov	r0, r3
 80052a6:	f002 ffb5 	bl	8008214 <RCCEx_PLL2_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80052b0:	e017      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b6:	3330      	adds	r3, #48	@ 0x30
 80052b8:	4618      	mov	r0, r3
 80052ba:	f003 f843 	bl	8008344 <RCCEx_PLL3_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80052c4:	e00d      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052cc:	e009      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052ce:	bf00      	nop
 80052d0:	e007      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052d2:	bf00      	nop
 80052d4:	e005      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052d6:	bf00      	nop
 80052d8:	e003      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80052da:	bf00      	nop
 80052dc:	44020c00 	.word	0x44020c00
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80052ea:	4bb9      	ldr	r3, [pc, #740]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052f0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80052f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fa:	4ab5      	ldr	r2, [pc, #724]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005308:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800530c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f002 0310 	and.w	r3, r2, #16
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005322:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005326:	460b      	mov	r3, r1
 8005328:	4313      	orrs	r3, r2
 800532a:	d053      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800532c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005332:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005336:	d031      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005338:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800533c:	d82a      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800533e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005342:	d02d      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005348:	d824      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800534a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800534e:	d029      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005350:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005354:	d81e      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535a:	d011      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005360:	d818      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536a:	d113      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800536c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005370:	3308      	adds	r3, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f002 ff4e 	bl	8008214 <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800537e:	e014      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005384:	3330      	adds	r3, #48	@ 0x30
 8005386:	4618      	mov	r0, r3
 8005388:	f002 ffdc 	bl	8008344 <RCCEx_PLL3_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005392:	e00a      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800539a:	e006      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800539c:	bf00      	nop
 800539e:	e004      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053a0:	bf00      	nop
 80053a2:	e002      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80053b2:	4b87      	ldr	r3, [pc, #540]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80053bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053c2:	4a83      	ldr	r2, [pc, #524]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 0320 	and.w	r3, r2, #32
 80053e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d053      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80053f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80053fe:	d031      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005400:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005404:	d82a      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800540a:	d02d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005410:	d824      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005412:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005416:	d029      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005418:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800541c:	d81e      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005422:	d011      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d818      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005432:	d113      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005438:	3308      	adds	r3, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f002 feea 	bl	8008214 <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005446:	e014      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544c:	3330      	adds	r3, #48	@ 0x30
 800544e:	4618      	mov	r0, r3
 8005450:	f002 ff78 	bl	8008344 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800545a:	e00a      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005462:	e006      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005464:	bf00      	nop
 8005466:	e004      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005468:	bf00      	nop
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005472:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10c      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800547a:	4b55      	ldr	r3, [pc, #340]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800547c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005480:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	4a51      	ldr	r2, [pc, #324]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800548c:	430b      	orrs	r3, r1
 800548e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005492:	e003      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005498:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800549c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054b6:	460b      	mov	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d053      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80054bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054c6:	d031      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80054c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054cc:	d82a      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d2:	d02d      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80054d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d8:	d824      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054de:	d029      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80054e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054e4:	d81e      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ea:	d011      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80054ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f0:	d818      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80054f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054fa:	d113      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005500:	3308      	adds	r3, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fe86 	bl	8008214 <RCCEx_PLL2_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800550e:	e014      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005514:	3330      	adds	r3, #48	@ 0x30
 8005516:	4618      	mov	r0, r3
 8005518:	f002 ff14 	bl	8008344 <RCCEx_PLL3_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005522:	e00a      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800552a:	e006      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800552c:	bf00      	nop
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10c      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005548:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800554c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005552:	4a1f      	ldr	r2, [pc, #124]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005554:	430b      	orrs	r3, r1
 8005556:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800555a:	e003      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005560:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005570:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800557a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	d03d      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800558a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800558e:	d01b      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005590:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005594:	d814      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800559a:	d017      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x654>
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a0:	d80e      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055aa:	d109      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b0:	3330      	adds	r3, #48	@ 0x30
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fec6 	bl	8008344 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80055be:	e00a      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055c6:	e006      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80055c8:	bf00      	nop
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80055d0:	44020c00 	.word	0x44020c00
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80055de:	4b99      	ldr	r3, [pc, #612]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ee:	4a95      	ldr	r2, [pc, #596]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055f6:	e003      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005616:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800561a:	460b      	mov	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	d03b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005626:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800562a:	d01b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800562c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005630:	d814      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005632:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005636:	d017      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005638:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800563c:	d80e      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d014      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8005642:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005646:	d109      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564c:	3330      	adds	r3, #48	@ 0x30
 800564e:	4618      	mov	r0, r3
 8005650:	f002 fe78 	bl	8008344 <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800565a:	e008      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10c      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005676:	4b73      	ldr	r3, [pc, #460]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005678:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800567c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005686:	4a6f      	ldr	r2, [pc, #444]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005688:	430b      	orrs	r3, r1
 800568a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800568e:	e003      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005694:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d03d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80056b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056c4:	d01b      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x786>
 80056c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056ca:	d814      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80056cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d0:	d017      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d6:	d80e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80056dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e0:	d109      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e6:	3330      	adds	r3, #48	@ 0x30
 80056e8:	4618      	mov	r0, r3
 80056ea:	f002 fe2b 	bl	8008344 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80056f4:	e008      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005710:	4b4c      	ldr	r3, [pc, #304]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005716:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800571a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005722:	4a48      	ldr	r2, [pc, #288]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005724:	430b      	orrs	r3, r1
 8005726:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800572a:	e003      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005730:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800574a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d035      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005760:	d015      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005766:	d80e      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800576c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005770:	d109      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005776:	3330      	adds	r3, #48	@ 0x30
 8005778:	4618      	mov	r0, r3
 800577a:	f002 fde3 	bl	8008344 <RCCEx_PLL3_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005784:	e006      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800578c:	e002      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005794:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800579c:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800579e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80057a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ae:	4a25      	ldr	r2, [pc, #148]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80057c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	2100      	movs	r1, #0
 80057ca:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80057ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057da:	460b      	mov	r3, r1
 80057dc:	4313      	orrs	r3, r2
 80057de:	d037      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80057e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ec:	d015      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f2:	d80e      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80057f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057fc:	d109      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005802:	3330      	adds	r3, #48	@ 0x30
 8005804:	4618      	mov	r0, r3
 8005806:	f002 fd9d 	bl	8008344 <RCCEx_PLL3_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800581e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005820:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005828:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800582a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800582e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583a:	4a02      	ldr	r2, [pc, #8]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800583c:	430b      	orrs	r3, r1
 800583e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005842:	e005      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005844:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800584c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	2100      	movs	r1, #0
 800585a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800585c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005860:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005862:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800586c:	4bb8      	ldr	r3, [pc, #736]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4ab7      	ldr	r2, [pc, #732]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005872:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005876:	61d3      	str	r3, [r2, #28]
 8005878:	4bb5      	ldr	r3, [pc, #724]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005880:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005884:	4ab2      	ldr	r2, [pc, #712]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005886:	430b      	orrs	r3, r1
 8005888:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800588a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005896:	673b      	str	r3, [r7, #112]	@ 0x70
 8005898:	2300      	movs	r3, #0
 800589a:	677b      	str	r3, [r7, #116]	@ 0x74
 800589c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d055      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80058a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058b2:	d031      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80058b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058b8:	d82a      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d02d      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c4:	d824      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80058c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ca:	d029      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80058cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d0:	d81e      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80058d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d6:	d011      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058dc:	d818      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e6:	d113      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ec:	3308      	adds	r3, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f002 fc90 	bl	8008214 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80058fa:	e014      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005900:	3330      	adds	r3, #48	@ 0x30
 8005902:	4618      	mov	r0, r3
 8005904:	f002 fd1e 	bl	8008344 <RCCEx_PLL3_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800590e:	e00a      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005916:	e006      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005918:	bf00      	nop
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800591c:	bf00      	nop
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10d      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800592e:	4b88      	ldr	r3, [pc, #544]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005930:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005934:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005940:	4a83      	ldr	r2, [pc, #524]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005942:	430b      	orrs	r3, r1
 8005944:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005948:	e003      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800594e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800595e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005960:	2300      	movs	r3, #0
 8005962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005964:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d055      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800597a:	d031      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 800597c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005980:	d82a      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005986:	d02d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800598c:	d824      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800598e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005992:	d029      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005998:	d81e      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599e:	d011      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a4:	d818      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ae:	d113      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059b4:	3308      	adds	r3, #8
 80059b6:	4618      	mov	r0, r3
 80059b8:	f002 fc2c 	bl	8008214 <RCCEx_PLL2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80059c2:	e014      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c8:	3330      	adds	r3, #48	@ 0x30
 80059ca:	4618      	mov	r0, r3
 80059cc:	f002 fcba 	bl	8008344 <RCCEx_PLL3_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80059d6:	e00a      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059de:	e006      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80059e0:	bf00      	nop
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80059f6:	4b56      	ldr	r3, [pc, #344]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80059f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	4a51      	ldr	r2, [pc, #324]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a28:	2300      	movs	r3, #0
 8005a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d032      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d80f      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d211      	bcs.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d911      	bls.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d109      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a52:	3308      	adds	r3, #8
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 fbdd 	bl	8008214 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a60:	e006      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005a78:	4b35      	ldr	r3, [pc, #212]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a7e:	f023 0107 	bic.w	r1, r3, #7
 8005a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a8a:	4a31      	ldr	r2, [pc, #196]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d024      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ace:	e002      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005ade:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ae4:	f023 0108 	bic.w	r1, r3, #8
 8005ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005af2:	430b      	orrs	r3, r1
 8005af4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005afe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b10:	2300      	movs	r3, #0
 8005b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b14:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f000 80b9 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005b20:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	4a0b      	ldr	r2, [pc, #44]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b2c:	f7fd fd22 	bl	8003574 <HAL_GetTick>
 8005b30:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005b34:	e010      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fd fd1d 	bl	8003574 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d908      	bls.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b4c:	e00a      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8005b4e:	bf00      	nop
 8005b50:	44020c00 	.word	0x44020c00
 8005b54:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005b58:	4bba      	ldr	r3, [pc, #744]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0e8      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005b64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 808e 	bne.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b6e:	4bb6      	ldr	r3, [pc, #728]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d023      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b88:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d01b      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b94:	4bac      	ldr	r3, [pc, #688]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba2:	4ba9      	ldr	r3, [pc, #676]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ba8:	4aa7      	ldr	r2, [pc, #668]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb2:	4ba5      	ldr	r3, [pc, #660]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bb8:	4aa3      	ldr	r2, [pc, #652]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bc2:	4aa1      	ldr	r2, [pc, #644]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d019      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fd fccc 	bl	8003574 <HAL_GetTick>
 8005bdc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be0:	e00d      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be2:	f7fd fcc7 	bl	8003574 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bec:	1ad2      	subs	r2, r2, r3
 8005bee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d903      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005bfc:	e006      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfe:	4b92      	ldr	r3, [pc, #584]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ea      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005c0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d135      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c24:	d110      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005c26:	4b88      	ldr	r3, [pc, #544]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c3c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005c40:	4a81      	ldr	r2, [pc, #516]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	61d3      	str	r3, [r2, #28]
 8005c46:	e005      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005c48:	4b7f      	ldr	r3, [pc, #508]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4a7e      	ldr	r2, [pc, #504]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c52:	61d3      	str	r3, [r2, #28]
 8005c54:	4b7c      	ldr	r3, [pc, #496]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005c64:	4b78      	ldr	r3, [pc, #480]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c66:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c76:	4a74      	ldr	r2, [pc, #464]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005c7e:	e008      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c8e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d035      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb6:	2b30      	cmp	r3, #48	@ 0x30
 8005cb8:	d014      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d80e      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d012      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d80a      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d106      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cce:	4b5e      	ldr	r3, [pc, #376]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cda:	e008      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005cf6:	4b54      	ldr	r3, [pc, #336]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d08:	4a4f      	ldr	r2, [pc, #316]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d10:	e003      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d28:	2300      	movs	r3, #0
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d033      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d007      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d46:	e010      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4b3f      	ldr	r3, [pc, #252]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005d54:	e00d      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f002 fa59 	bl	8008214 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005d7a:	4b33      	ldr	r3, [pc, #204]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d80:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d9a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005daa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005db4:	460b      	mov	r3, r1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	d04c      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d827      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005de1 	.word	0x08005de1
 8005dd0:	08005def 	.word	0x08005def
 8005dd4:	08005e03 	.word	0x08005e03
 8005dd8:	08005e1f 	.word	0x08005e1f
 8005ddc:	08005e1f 	.word	0x08005e1f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de0:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005dec:	e018      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df2:	3308      	adds	r3, #8
 8005df4:	4618      	mov	r0, r3
 8005df6:	f002 fa0d 	bl	8008214 <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005e00:	e00e      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e06:	3330      	adds	r3, #48	@ 0x30
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f002 fa9b 	bl	8008344 <RCCEx_PLL3_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d111      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005e28:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e2e:	f023 0107 	bic.w	r1, r3, #7
 8005e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e3a:	4a03      	ldr	r2, [pc, #12]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e42:	e007      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005e44:	44020800 	.word	0x44020800
 8005e48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f000 8081 	beq.w	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d85f      	bhi.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005f09 	.word	0x08005f09
 8005e88:	08005f3f 	.word	0x08005f3f
 8005e8c:	08005f3f 	.word	0x08005f3f
 8005e90:	08005f3f 	.word	0x08005f3f
 8005e94:	08005f3f 	.word	0x08005f3f
 8005e98:	08005f3f 	.word	0x08005f3f
 8005e9c:	08005f3f 	.word	0x08005f3f
 8005ea0:	08005f3f 	.word	0x08005f3f
 8005ea4:	08005f17 	.word	0x08005f17
 8005ea8:	08005f3f 	.word	0x08005f3f
 8005eac:	08005f3f 	.word	0x08005f3f
 8005eb0:	08005f3f 	.word	0x08005f3f
 8005eb4:	08005f3f 	.word	0x08005f3f
 8005eb8:	08005f3f 	.word	0x08005f3f
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005f3f 	.word	0x08005f3f
 8005ec4:	08005f2b 	.word	0x08005f2b
 8005ec8:	08005f3f 	.word	0x08005f3f
 8005ecc:	08005f3f 	.word	0x08005f3f
 8005ed0:	08005f3f 	.word	0x08005f3f
 8005ed4:	08005f3f 	.word	0x08005f3f
 8005ed8:	08005f3f 	.word	0x08005f3f
 8005edc:	08005f3f 	.word	0x08005f3f
 8005ee0:	08005f3f 	.word	0x08005f3f
 8005ee4:	08005f47 	.word	0x08005f47
 8005ee8:	08005f3f 	.word	0x08005f3f
 8005eec:	08005f3f 	.word	0x08005f3f
 8005ef0:	08005f3f 	.word	0x08005f3f
 8005ef4:	08005f3f 	.word	0x08005f3f
 8005ef8:	08005f3f 	.word	0x08005f3f
 8005efc:	08005f3f 	.word	0x08005f3f
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f47 	.word	0x08005f47
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4bb9      	ldr	r3, [pc, #740]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	4ab8      	ldr	r2, [pc, #736]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005f14:	e018      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f002 f979 	bl	8008214 <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005f28:	e00e      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f2e:	3330      	adds	r3, #48	@ 0x30
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 fa07 	bl	8008344 <RCCEx_PLL3_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10d      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005f50:	4ba7      	ldr	r3, [pc, #668]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f62:	4aa3      	ldr	r2, [pc, #652]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f6a:	e003      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f82:	2300      	movs	r3, #0
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d04e      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9c:	d02e      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa2:	d827      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005fa4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fa6:	d02b      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005fa8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005faa:	d823      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005fac:	2b80      	cmp	r3, #128	@ 0x80
 8005fae:	d017      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005fb0:	2b80      	cmp	r3, #128	@ 0x80
 8005fb2:	d81f      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005fb8:	2b40      	cmp	r3, #64	@ 0x40
 8005fba:	d007      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005fbc:	e01a      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fbe:	4b8c      	ldr	r3, [pc, #560]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	4a8b      	ldr	r2, [pc, #556]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005fca:	e01a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 f91e 	bl	8008214 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005fde:	e010      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe4:	3330      	adds	r3, #48	@ 0x30
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f9ac 	bl	8008344 <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e006      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800600a:	4b79      	ldr	r3, [pc, #484]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800600c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006010:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8006014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800601c:	4974      	ldr	r1, [pc, #464]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800602a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800602e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	2300      	movs	r3, #0
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006044:	460b      	mov	r3, r1
 8006046:	4313      	orrs	r3, r2
 8006048:	d055      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800604e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006052:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006056:	d031      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8006058:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800605c:	d82a      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800605e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006062:	d02d      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006068:	d824      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800606a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800606e:	d029      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8006070:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006074:	d81e      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607a:	d011      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006080:	d818      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d020      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8006086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800608a:	d113      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800608c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006090:	3308      	adds	r3, #8
 8006092:	4618      	mov	r0, r3
 8006094:	f002 f8be 	bl	8008214 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800609e:	e014      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a4:	3330      	adds	r3, #48	@ 0x30
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 f94c 	bl	8008344 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80060b2:	e00a      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060ba:	e006      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80060bc:	bf00      	nop
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80060d2:	4b47      	ldr	r3, [pc, #284]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80060d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060d8:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80060dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060e4:	4942      	ldr	r1, [pc, #264]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	2100      	movs	r1, #0
 8006100:	61b9      	str	r1, [r7, #24]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800610c:	460b      	mov	r3, r1
 800610e:	4313      	orrs	r3, r2
 8006110:	d03c      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800611a:	2b03      	cmp	r3, #3
 800611c:	d81b      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800611e:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	0800615f 	.word	0x0800615f
 8006128:	08006135 	.word	0x08006135
 800612c:	08006143 	.word	0x08006143
 8006130:	0800615f 	.word	0x0800615f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006134:	4b2e      	ldr	r3, [pc, #184]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	4a2d      	ldr	r2, [pc, #180]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800613a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006140:	e00e      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006146:	3308      	adds	r3, #8
 8006148:	4618      	mov	r0, r3
 800614a:	f002 f863 	bl	8008214 <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006154:	e004      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10d      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006168:	4b21      	ldr	r3, [pc, #132]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800616a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800616e:	f023 0203 	bic.w	r2, r3, #3
 8006172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800617a:	491d      	ldr	r1, [pc, #116]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006188:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800618c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	2100      	movs	r1, #0
 8006196:	6139      	str	r1, [r7, #16]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061a2:	460b      	mov	r3, r1
 80061a4:	4313      	orrs	r3, r2
 80061a6:	d03c      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80061a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b4:	d00e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80061b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ba:	d815      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80061c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c4:	d110      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c6:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	4a09      	ldr	r2, [pc, #36]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80061d2:	e010      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061d8:	3308      	adds	r3, #8
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 f81a 	bl	8008214 <RCCEx_PLL2_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80061e6:	e006      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80061ee:	e002      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80061f0:	44020c00 	.word	0x44020c00
        break;
 80061f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80061fe:	4b3d      	ldr	r3, [pc, #244]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800620c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006210:	4938      	ldr	r1, [pc, #224]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800621e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	2100      	movs	r1, #0
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d038      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800623e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006242:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006246:	2b30      	cmp	r3, #48	@ 0x30
 8006248:	d01b      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800624a:	2b30      	cmp	r3, #48	@ 0x30
 800624c:	d815      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800624e:	2b10      	cmp	r3, #16
 8006250:	d002      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8006252:	2b20      	cmp	r3, #32
 8006254:	d007      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8006256:	e010      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4b26      	ldr	r3, [pc, #152]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	4a25      	ldr	r2, [pc, #148]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006262:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006264:	e00e      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800626a:	3330      	adds	r3, #48	@ 0x30
 800626c:	4618      	mov	r0, r3
 800626e:	f002 f869 	bl	8008344 <RCCEx_PLL3_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006278:	e004      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006280:	e000      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8006282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006284:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10d      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800628c:	4b19      	ldr	r3, [pc, #100]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800628e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006292:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800629a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800629e:	4915      	ldr	r1, [pc, #84]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80062ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	2100      	movs	r1, #0
 80062ba:	6039      	str	r1, [r7, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d00c      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80062cc:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80062ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062de:	4905      	ldr	r1, [pc, #20]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80062e6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	37e8      	adds	r7, #232	@ 0xe8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f4:	44020c00 	.word	0x44020c00

080062f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b08b      	sub	sp, #44	@ 0x2c
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006300:	4bad      	ldr	r3, [pc, #692]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006308:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800630a:	4bab      	ldr	r3, [pc, #684]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006314:	4ba8      	ldr	r3, [pc, #672]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800631e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006320:	4ba5      	ldr	r3, [pc, #660]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800632a:	4ba3      	ldr	r3, [pc, #652]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8126 	beq.w	800659a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b03      	cmp	r3, #3
 8006352:	d053      	beq.n	80063fc <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d86f      	bhi.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d003      	beq.n	8006368 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d02b      	beq.n	80063be <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006366:	e068      	b.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006368:	4b93      	ldr	r3, [pc, #588]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	4a92      	ldr	r2, [pc, #584]	@ (80065bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639c:	ed97 6a04 	vldr	s12, [r7, #16]
 80063a0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80065c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80063a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80063bc:	e068      	b.n	8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80063cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063da:	ed97 6a04 	vldr	s12, [r7, #16]
 80063de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80063fa:	e049      	b.n	8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006418:	ed97 6a04 	vldr	s12, [r7, #16]
 800641c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80065c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006434:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006438:	e02a      	b.n	8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800643a:	4b5f      	ldr	r3, [pc, #380]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	4a5d      	ldr	r2, [pc, #372]	@ (80065bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006446:	fa22 f303 	lsr.w	r3, r2, r3
 800644a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006472:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80065c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800648e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006490:	4b49      	ldr	r3, [pc, #292]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800649c:	d121      	bne.n	80064e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800649e:	4b46      	ldr	r3, [pc, #280]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064aa:	4b43      	ldr	r3, [pc, #268]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ae:	0a5b      	lsrs	r3, r3, #9
 80064b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80064bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80064c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80064c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064e8:	4b33      	ldr	r3, [pc, #204]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f4:	d121      	bne.n	800653a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80064f6:	4b30      	ldr	r3, [pc, #192]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d017      	beq.n	8006532 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006502:	4b2d      	ldr	r3, [pc, #180]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006518:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800651c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006528:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	e006      	b.n	8006540 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006540:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800654c:	d121      	bne.n	8006592 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800654e:	4b1a      	ldr	r3, [pc, #104]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d017      	beq.n	800658a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800655a:	4b17      	ldr	r3, [pc, #92]	@ (80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800655c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655e:	0e1b      	lsrs	r3, r3, #24
 8006560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800656c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006570:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006574:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006580:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006588:	e010      	b.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	e00c      	b.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	e008      	b.n	80065ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	372c      	adds	r7, #44	@ 0x2c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	44020c00 	.word	0x44020c00
 80065bc:	03d09000 	.word	0x03d09000
 80065c0:	46000000 	.word	0x46000000
 80065c4:	4a742400 	.word	0x4a742400
 80065c8:	4bb71b00 	.word	0x4bb71b00

080065cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b08b      	sub	sp, #44	@ 0x2c
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80065d4:	4bad      	ldr	r3, [pc, #692]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80065d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065dc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80065de:	4bab      	ldr	r3, [pc, #684]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80065e8:	4ba8      	ldr	r3, [pc, #672]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80065f4:	4ba5      	ldr	r3, [pc, #660]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80065fe:	4ba3      	ldr	r3, [pc, #652]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8126 	beq.w	800686e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d053      	beq.n	80066d0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d86f      	bhi.n	800670e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d003      	beq.n	800663c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d02b      	beq.n	8006692 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800663a:	e068      	b.n	800670e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800663c:	4b93      	ldr	r3, [pc, #588]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	08db      	lsrs	r3, r3, #3
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	4a92      	ldr	r2, [pc, #584]	@ (8006890 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	ee07 3a90 	vmov	s15, r3
 800666c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006670:	ed97 6a04 	vldr	s12, [r7, #16]
 8006674:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006690:	e068      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006898 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80066a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80066b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80066b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80066ce:	e049      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066da:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800689c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80066f0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80066f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006708:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800670c:	e02a      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800670e:	4b5f      	ldr	r3, [pc, #380]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a5d      	ldr	r2, [pc, #372]	@ (8006890 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a04 	vldr	s12, [r7, #16]
 8006746:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006762:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006764:	4b49      	ldr	r3, [pc, #292]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800676c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006770:	d121      	bne.n	80067b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006772:	4b46      	ldr	r3, [pc, #280]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d017      	beq.n	80067ae <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800677e:	4b43      	ldr	r3, [pc, #268]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	0a5b      	lsrs	r3, r3, #9
 8006784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006794:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006798:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800679c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	e006      	b.n	80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e002      	b.n	80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067bc:	4b33      	ldr	r3, [pc, #204]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c8:	d121      	bne.n	800680e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80067ca:	4b30      	ldr	r3, [pc, #192]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d017      	beq.n	8006806 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80067d6:	4b2d      	ldr	r3, [pc, #180]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80067e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80067f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006814:	4b1d      	ldr	r3, [pc, #116]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800681c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006820:	d121      	bne.n	8006866 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006822:	4b1a      	ldr	r3, [pc, #104]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d017      	beq.n	800685e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800682e:	4b17      	ldr	r3, [pc, #92]	@ (800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006832:	0e1b      	lsrs	r3, r3, #24
 8006834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006844:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006848:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800684c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006854:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800685c:	e010      	b.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	e00c      	b.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	e008      	b.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	372c      	adds	r7, #44	@ 0x2c
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	44020c00 	.word	0x44020c00
 8006890:	03d09000 	.word	0x03d09000
 8006894:	46000000 	.word	0x46000000
 8006898:	4a742400 	.word	0x4a742400
 800689c:	4bb71b00 	.word	0x4bb71b00

080068a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08b      	sub	sp, #44	@ 0x2c
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80068a8:	4bad      	ldr	r3, [pc, #692]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80068b2:	4bab      	ldr	r3, [pc, #684]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80068bc:	4ba8      	ldr	r3, [pc, #672]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80068c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80068d2:	4ba3      	ldr	r3, [pc, #652]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8126 	beq.w	8006b42 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d053      	beq.n	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d86f      	bhi.n	80069e2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d003      	beq.n	8006910 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d02b      	beq.n	8006966 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800690e:	e068      	b.n	80069e2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006910:	4b93      	ldr	r3, [pc, #588]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a92      	ldr	r2, [pc, #584]	@ (8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006944:	ed97 6a04 	vldr	s12, [r7, #16]
 8006948:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800694c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006960:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006964:	e068      	b.n	8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006970:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006982:	ed97 6a04 	vldr	s12, [r7, #16]
 8006986:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800698a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80069a2:	e049      	b.n	8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80069c4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80069c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80069e0:	e02a      	b.n	8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	08db      	lsrs	r3, r3, #3
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069ee:	fa22 f303 	lsr.w	r3, r2, r3
 80069f2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a1a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006a36:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a38:	4b49      	ldr	r3, [pc, #292]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a44:	d121      	bne.n	8006a8a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006a46:	4b46      	ldr	r3, [pc, #280]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a52:	4b43      	ldr	r3, [pc, #268]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	0a5b      	lsrs	r3, r3, #9
 8006a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006a6c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a78:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e006      	b.n	8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a90:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9c:	d121      	bne.n	8006ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006a9e:	4b30      	ldr	r3, [pc, #192]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006ac4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	e002      	b.n	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af4:	d121      	bne.n	8006b3a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006af6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d017      	beq.n	8006b32 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b02:	4b17      	ldr	r3, [pc, #92]	@ (8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b06:	0e1b      	lsrs	r3, r3, #24
 8006b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b0c:	ee07 3a90 	vmov	s15, r3
 8006b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006b1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b28:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006b30:	e010      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	e00c      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	372c      	adds	r7, #44	@ 0x2c
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	44020c00 	.word	0x44020c00
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	4a742400 	.word	0x4a742400
 8006b70:	4bb71b00 	.word	0x4bb71b00

08006b74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b08f      	sub	sp, #60	@ 0x3c
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b82:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006b86:	4321      	orrs	r1, r4
 8006b88:	d150      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006b8a:	4b26      	ldr	r3, [pc, #152]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b94:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006b96:	4b23      	ldr	r3, [pc, #140]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d108      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006baa:	d104      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb2:	f001 bb20 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bc4:	d108      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bcc:	d104      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006bce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd4:	f001 bb0f 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006bd8:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006be4:	d119      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bec:	d115      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfa:	d30a      	bcc.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006bfc:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c06:	4a08      	ldr	r2, [pc, #32]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006c0e:	f001 baf2 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006c16:	f001 baee 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1e:	f001 baea 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c22:	bf00      	nop
 8006c24:	44020c00 	.word	0x44020c00
 8006c28:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c30:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006c34:	ea50 0104 	orrs.w	r1, r0, r4
 8006c38:	f000 8615 	beq.w	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c40:	2801      	cmp	r0, #1
 8006c42:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8006c46:	f081 82d3 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006c52:	ea50 0104 	orrs.w	r1, r0, r4
 8006c56:	f000 84d8 	beq.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5e:	2801      	cmp	r0, #1
 8006c60:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006c64:	f081 82c4 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6c:	f1a1 0410 	sub.w	r4, r1, #16
 8006c70:	ea50 0104 	orrs.w	r1, r0, r4
 8006c74:	f001 8288 	beq.w	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7c:	2801      	cmp	r0, #1
 8006c7e:	f171 0110 	sbcs.w	r1, r1, #16
 8006c82:	f081 82b5 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c8a:	f1a1 0408 	sub.w	r4, r1, #8
 8006c8e:	ea50 0104 	orrs.w	r1, r0, r4
 8006c92:	f001 81fe 	beq.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8006c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9a:	2801      	cmp	r0, #1
 8006c9c:	f171 0108 	sbcs.w	r1, r1, #8
 8006ca0:	f081 82a6 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ca8:	1f0c      	subs	r4, r1, #4
 8006caa:	ea50 0104 	orrs.w	r1, r0, r4
 8006cae:	f000 8753 	beq.w	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb6:	2801      	cmp	r0, #1
 8006cb8:	f171 0104 	sbcs.w	r1, r1, #4
 8006cbc:	f081 8298 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc4:	1e8c      	subs	r4, r1, #2
 8006cc6:	ea50 0104 	orrs.w	r1, r0, r4
 8006cca:	f001 8173 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8006cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd2:	2801      	cmp	r0, #1
 8006cd4:	f171 0102 	sbcs.w	r1, r1, #2
 8006cd8:	f081 828a 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce0:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006ce4:	4321      	orrs	r1, r4
 8006ce6:	f001 80fe 	beq.w	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cee:	4ccb      	ldr	r4, [pc, #812]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	f171 0100 	sbcs.w	r1, r1, #0
 8006cf6:	f081 827b 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfe:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006d02:	4321      	orrs	r1, r4
 8006d04:	f001 8076 	beq.w	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d0c:	4cc4      	ldr	r4, [pc, #784]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8006d0e:	42a0      	cmp	r0, r4
 8006d10:	f171 0100 	sbcs.w	r1, r1, #0
 8006d14:	f081 826c 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d1c:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006d20:	4321      	orrs	r1, r4
 8006d22:	f000 87b5 	beq.w	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8006d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2a:	4cbe      	ldr	r4, [pc, #760]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	f171 0100 	sbcs.w	r1, r1, #0
 8006d32:	f081 825d 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d3a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006d3e:	4321      	orrs	r1, r4
 8006d40:	f000 8738 	beq.w	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d48:	4cb7      	ldr	r4, [pc, #732]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8006d4a:	42a0      	cmp	r0, r4
 8006d4c:	f171 0100 	sbcs.w	r1, r1, #0
 8006d50:	f081 824e 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d58:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006d5c:	4321      	orrs	r1, r4
 8006d5e:	f001 81cd 	beq.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d66:	4cb1      	ldr	r4, [pc, #708]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	f171 0100 	sbcs.w	r1, r1, #0
 8006d6e:	f081 823f 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d76:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8006d7a:	4321      	orrs	r1, r4
 8006d7c:	f000 80d9 	beq.w	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d84:	4caa      	ldr	r4, [pc, #680]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8006d86:	42a0      	cmp	r0, r4
 8006d88:	f171 0100 	sbcs.w	r1, r1, #0
 8006d8c:	f081 8230 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d94:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006d98:	4321      	orrs	r1, r4
 8006d9a:	f000 83da 	beq.w	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da2:	4ca4      	ldr	r4, [pc, #656]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	f171 0100 	sbcs.w	r1, r1, #0
 8006daa:	f081 8221 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006db6:	4321      	orrs	r1, r4
 8006db8:	f000 8627 	beq.w	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc0:	4c9d      	ldr	r4, [pc, #628]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006dc2:	42a0      	cmp	r0, r4
 8006dc4:	f171 0100 	sbcs.w	r1, r1, #0
 8006dc8:	f081 8212 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dd0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006dd4:	4321      	orrs	r1, r4
 8006dd6:	f000 857a 	beq.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dde:	4c97      	ldr	r4, [pc, #604]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8006de0:	42a0      	cmp	r0, r4
 8006de2:	f171 0100 	sbcs.w	r1, r1, #0
 8006de6:	f081 8203 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dee:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006df2:	4321      	orrs	r1, r4
 8006df4:	f000 84fb 	beq.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006e00:	f171 0100 	sbcs.w	r1, r1, #0
 8006e04:	f081 81f4 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006e10:	4321      	orrs	r1, r4
 8006e12:	f000 84a9 	beq.w	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e1a:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006e1e:	42a0      	cmp	r0, r4
 8006e20:	f171 0100 	sbcs.w	r1, r1, #0
 8006e24:	f081 81e4 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e2c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006e30:	4321      	orrs	r1, r4
 8006e32:	f000 8456 	beq.w	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e3a:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006e3e:	42a0      	cmp	r0, r4
 8006e40:	f171 0100 	sbcs.w	r1, r1, #0
 8006e44:	f081 81d4 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e4c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006e50:	4321      	orrs	r1, r4
 8006e52:	f000 8403 	beq.w	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e5a:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006e5e:	42a0      	cmp	r0, r4
 8006e60:	f171 0100 	sbcs.w	r1, r1, #0
 8006e64:	f081 81c4 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e6c:	2821      	cmp	r0, #33	@ 0x21
 8006e6e:	f171 0100 	sbcs.w	r1, r1, #0
 8006e72:	d255      	bcs.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e78:	4301      	orrs	r1, r0
 8006e7a:	f001 81b9 	beq.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e82:	1e42      	subs	r2, r0, #1
 8006e84:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006e88:	2a20      	cmp	r2, #32
 8006e8a:	f173 0100 	sbcs.w	r1, r3, #0
 8006e8e:	f081 81af 	bcs.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e92:	2a1f      	cmp	r2, #31
 8006e94:	f201 81ac 	bhi.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006e98:	a101      	add	r1, pc, #4	@ (adr r1, 8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006e9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006f77 	.word	0x08006f77
 8006ea4:	08007075 	.word	0x08007075
 8006ea8:	080081f1 	.word	0x080081f1
 8006eac:	08007135 	.word	0x08007135
 8006eb0:	080081f1 	.word	0x080081f1
 8006eb4:	080081f1 	.word	0x080081f1
 8006eb8:	080081f1 	.word	0x080081f1
 8006ebc:	08007205 	.word	0x08007205
 8006ec0:	080081f1 	.word	0x080081f1
 8006ec4:	080081f1 	.word	0x080081f1
 8006ec8:	080081f1 	.word	0x080081f1
 8006ecc:	080081f1 	.word	0x080081f1
 8006ed0:	080081f1 	.word	0x080081f1
 8006ed4:	080081f1 	.word	0x080081f1
 8006ed8:	080081f1 	.word	0x080081f1
 8006edc:	080072e9 	.word	0x080072e9
 8006ee0:	080081f1 	.word	0x080081f1
 8006ee4:	080081f1 	.word	0x080081f1
 8006ee8:	080081f1 	.word	0x080081f1
 8006eec:	080081f1 	.word	0x080081f1
 8006ef0:	080081f1 	.word	0x080081f1
 8006ef4:	080081f1 	.word	0x080081f1
 8006ef8:	080081f1 	.word	0x080081f1
 8006efc:	080081f1 	.word	0x080081f1
 8006f00:	080081f1 	.word	0x080081f1
 8006f04:	080081f1 	.word	0x080081f1
 8006f08:	080081f1 	.word	0x080081f1
 8006f0c:	080081f1 	.word	0x080081f1
 8006f10:	080081f1 	.word	0x080081f1
 8006f14:	080081f1 	.word	0x080081f1
 8006f18:	080081f1 	.word	0x080081f1
 8006f1c:	080073bf 	.word	0x080073bf
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	f000 82b3 	beq.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006f2e:	f001 b95f 	b.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006f32:	4b43      	ldr	r3, [pc, #268]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f44:	f107 0320 	add.w	r3, r7, #32
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff f9d5 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f52:	f001 b950 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	2b40      	cmp	r3, #64	@ 0x40
 8006f5a:	d108      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fb33 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f6a:	f001 b944 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f72:	f001 b940 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006f76:	4b32      	ldr	r3, [pc, #200]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f88:	f7fd ffca 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8006f8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f8e:	f001 b932 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006f92:	4b2b      	ldr	r3, [pc, #172]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f9e:	d10a      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff fb0e 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb4:	e05c      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006fb6:	4b22      	ldr	r3, [pc, #136]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc2:	d10a      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d107      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fc66 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd8:	e04a      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006fda:	4b19      	ldr	r3, [pc, #100]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d109      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fec:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a13      	ldr	r2, [pc, #76]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffe:	e037      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007000:	4b0f      	ldr	r3, [pc, #60]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800700c:	d11e      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b04      	cmp	r3, #4
 8007012:	d11b      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8007014:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
 8007018:	e02a      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800701a:	bf00      	nop
 800701c:	40000001 	.word	0x40000001
 8007020:	20000001 	.word	0x20000001
 8007024:	10000001 	.word	0x10000001
 8007028:	08000001 	.word	0x08000001
 800702c:	04000001 	.word	0x04000001
 8007030:	00400001 	.word	0x00400001
 8007034:	00200001 	.word	0x00200001
 8007038:	00040001 	.word	0x00040001
 800703c:	00020001 	.word	0x00020001
 8007040:	44020c00 	.word	0x44020c00
 8007044:	03d09000 	.word	0x03d09000
 8007048:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800704c:	4ba3      	ldr	r3, [pc, #652]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800704e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b02      	cmp	r3, #2
 8007058:	d106      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2b05      	cmp	r3, #5
 800705e:	d103      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8007060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007064:	637b      	str	r3, [r7, #52]	@ 0x34
 8007066:	e003      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706c:	f001 b8c3 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007070:	f001 b8c1 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007074:	4b99      	ldr	r3, [pc, #612]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800707a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007086:	f7fd ff35 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 800708a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800708c:	f001 b8b3 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007090:	4b92      	ldr	r3, [pc, #584]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800709c:	d10a      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d107      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fa8f 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b2:	e03d      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d108      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fbee 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c8:	f001 b895 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80070cc:	4b83      	ldr	r3, [pc, #524]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d10c      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	2b18      	cmp	r3, #24
 80070dc:	d109      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070de:	4b7f      	ldr	r3, [pc, #508]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	4a7d      	ldr	r2, [pc, #500]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f0:	e01e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80070f2:	4b7a      	ldr	r3, [pc, #488]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070fe:	d105      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	2b20      	cmp	r3, #32
 8007104:	d102      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8007106:	4b77      	ldr	r3, [pc, #476]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
 800710a:	e011      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800710c:	4b73      	ldr	r3, [pc, #460]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800710e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b02      	cmp	r3, #2
 8007118:	d106      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	2b28      	cmp	r3, #40	@ 0x28
 800711e:	d103      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8007120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800712c:	f001 b863 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007130:	f001 b861 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007134:	4b69      	ldr	r3, [pc, #420]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007136:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800713a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800713e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007146:	f7fd fed5 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 800714a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800714c:	f001 b853 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007150:	4b62      	ldr	r3, [pc, #392]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800715c:	d10a      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	2b40      	cmp	r3, #64	@ 0x40
 8007162:	d107      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fa2f 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
 8007172:	e045      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007174:	4b59      	ldr	r3, [pc, #356]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800717c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007180:	d10a      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	2b80      	cmp	r3, #128	@ 0x80
 8007186:	d107      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007188:	f107 0308 	add.w	r3, r7, #8
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fb87 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	e033      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007198:	4b50      	ldr	r3, [pc, #320]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d10c      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071a8:	d109      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071aa:	4b4c      	ldr	r3, [pc, #304]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	4a4a      	ldr	r2, [pc, #296]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80071bc:	e020      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80071be:	4b47      	ldr	r3, [pc, #284]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80071d4:	4b43      	ldr	r3, [pc, #268]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d8:	e012      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80071da:	4b40      	ldr	r3, [pc, #256]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d107      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80071ee:	d103      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80071f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f6:	e003      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071fc:	f000 bffb 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007200:	f000 bff9 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007204:	4b35      	ldr	r3, [pc, #212]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800720a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800720e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007216:	f7fd fe6d 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 800721a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800721c:	f000 bfeb 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007220:	4b2e      	ldr	r3, [pc, #184]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800722c:	d10b      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007234:	d107      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff f9c6 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
 8007244:	e047      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007246:	4b25      	ldr	r3, [pc, #148]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800724e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007252:	d10b      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725a:	d107      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800725c:	f107 0308 	add.w	r3, r7, #8
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fb1d 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
 800726a:	e034      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800726c:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b02      	cmp	r3, #2
 8007276:	d10d      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800727e:	d109      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007280:	4b16      	ldr	r3, [pc, #88]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	08db      	lsrs	r3, r3, #3
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	4a15      	ldr	r2, [pc, #84]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
 8007292:	e020      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007294:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800729c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	e012      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80072b0:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80072b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d107      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072c4:	d103      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	e003      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072d2:	f000 bf90 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072d6:	f000 bf8e 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072da:	bf00      	nop
 80072dc:	44020c00 	.word	0x44020c00
 80072e0:	03d09000 	.word	0x03d09000
 80072e4:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80072e8:	4ba5      	ldr	r3, [pc, #660]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80072ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072ee:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072fa:	f7fd fdfb 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 80072fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007300:	f000 bf79 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007304:	4b9e      	ldr	r3, [pc, #632]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800730c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007310:	d10b      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731a:	f107 0314 	add.w	r3, r7, #20
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff f954 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
 8007328:	e047      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800732a:	4b95      	ldr	r3, [pc, #596]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007336:	d10b      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733e:	d107      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007340:	f107 0308 	add.w	r3, r7, #8
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff faab 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
 800734e:	e034      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007350:	4b8b      	ldr	r3, [pc, #556]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d10d      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007362:	d109      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007364:	4b86      	ldr	r3, [pc, #536]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	08db      	lsrs	r3, r3, #3
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	4a85      	ldr	r2, [pc, #532]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
 8007374:	637b      	str	r3, [r7, #52]	@ 0x34
 8007376:	e020      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007378:	4b81      	ldr	r3, [pc, #516]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 800738e:	4b7e      	ldr	r3, [pc, #504]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
 8007392:	e012      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007394:	4b7a      	ldr	r3, [pc, #488]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d107      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80073a8:	d103      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80073aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b0:	e003      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b6:	f000 bf1e 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80073ba:	f000 bf1c 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80073be:	4b70      	ldr	r3, [pc, #448]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80073c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80073c4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80073c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fd fd90 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 80073d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80073d6:	f000 bf0e 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80073da:	4b69      	ldr	r3, [pc, #420]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e6:	d10b      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ee:	d107      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f0:	f107 0314 	add.w	r3, r7, #20
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff f8e9 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fe:	e047      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007400:	4b5f      	ldr	r3, [pc, #380]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740c:	d10b      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007414:	d107      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fa40 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e034      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007426:	4b56      	ldr	r3, [pc, #344]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b02      	cmp	r3, #2
 8007430:	d10d      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007438:	d109      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800743a:	4b51      	ldr	r3, [pc, #324]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	4a4f      	ldr	r2, [pc, #316]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	e020      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800744e:	4b4c      	ldr	r3, [pc, #304]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745a:	d106      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8007464:	4b48      	ldr	r3, [pc, #288]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
 8007468:	e012      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800746a:	4b45      	ldr	r3, [pc, #276]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800746c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b02      	cmp	r3, #2
 8007476:	d107      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800747e:	d103      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007484:	637b      	str	r3, [r7, #52]	@ 0x34
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800748c:	f000 beb3 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007490:	f000 beb1 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007494:	4b3a      	ldr	r3, [pc, #232]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800749a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800749e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80074a6:	f7fd fd51 	bl	8004f4c <HAL_RCC_GetPCLK3Freq>
 80074aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80074ac:	f000 bea3 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b6:	d108      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b8:	f107 0314 	add.w	r3, r7, #20
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f885 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c6:	f000 be96 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074d0:	d108      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff f9e2 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e0:	f000 be89 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80074e4:	4b26      	ldr	r3, [pc, #152]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d10d      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f8:	4b21      	ldr	r3, [pc, #132]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	4a20      	ldr	r2, [pc, #128]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
 800750a:	e020      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800750c:	4b1c      	ldr	r3, [pc, #112]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007518:	d106      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007520:	d102      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8007522:	4b19      	ldr	r3, [pc, #100]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
 8007526:	e012      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007528:	4b15      	ldr	r3, [pc, #84]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800752a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b02      	cmp	r3, #2
 8007534:	d107      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800753c:	d103      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
 8007544:	e003      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800754a:	f000 be54 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800754e:	f000 be52 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007552:	4b0b      	ldr	r3, [pc, #44]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007564:	f7fd fcaa 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8007568:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800756a:	f000 be44 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10b      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8007574:	f7fd fb76 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8007578:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800757a:	f000 be3c 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800757e:	bf00      	nop
 8007580:	44020c00 	.word	0x44020c00
 8007584:	03d09000 	.word	0x03d09000
 8007588:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2b02      	cmp	r3, #2
 8007590:	d108      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff f818 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a0:	f000 be29 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80075a4:	4b9f      	ldr	r3, [pc, #636]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b0:	d105      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d102      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80075b8:	4b9b      	ldr	r3, [pc, #620]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80075bc:	e023      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80075be:	4b99      	ldr	r3, [pc, #612]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075d0:	4b94      	ldr	r3, [pc, #592]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a94      	ldr	r2, [pc, #592]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e2:	e010      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80075e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f0:	d105      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80075f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fc:	e003      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007602:	f000 bdf8 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007606:	f000 bdf6 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800760a:	4b86      	ldr	r3, [pc, #536]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800760c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007616:	4b83      	ldr	r3, [pc, #524]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b02      	cmp	r3, #2
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800762a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	e012      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007632:	4b7c      	ldr	r3, [pc, #496]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800763c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007640:	d106      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	2b08      	cmp	r3, #8
 8007646:	d103      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8007648:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
 800764e:	e003      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007654:	f000 bdcf 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007658:	f000 bdcd 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800765c:	4b71      	ldr	r3, [pc, #452]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800765e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007666:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800766e:	f7fd fc41 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8007672:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007674:	f000 bdbf 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800767e:	d108      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff f90b 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800768e:	f000 bdb2 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007692:	4b64      	ldr	r3, [pc, #400]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d10d      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076a4:	d109      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076a6:	4b5f      	ldr	r3, [pc, #380]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	08db      	lsrs	r3, r3, #3
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	4a5e      	ldr	r2, [pc, #376]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80076b2:	fa22 f303 	lsr.w	r3, r2, r3
 80076b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b8:	e011      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80076ba:	4b5a      	ldr	r3, [pc, #360]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c6:	d106      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076ce:	d102      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80076d0:	4b57      	ldr	r3, [pc, #348]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80076d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d4:	e003      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076da:	f000 bd8c 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80076de:	f000 bd8a 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80076e2:	4b50      	ldr	r3, [pc, #320]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076e8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80076ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fd fbfe 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 80076f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80076fa:	f000 bd7c 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007704:	d108      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff f8c8 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007714:	f000 bd6f 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007718:	4b42      	ldr	r3, [pc, #264]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b02      	cmp	r3, #2
 8007722:	d10d      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800772a:	d109      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800772c:	4b3d      	ldr	r3, [pc, #244]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	08db      	lsrs	r3, r3, #3
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	4a3d      	ldr	r2, [pc, #244]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
 800773e:	e011      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007740:	4b38      	ldr	r3, [pc, #224]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800774c:	d106      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007754:	d102      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8007756:	4b36      	ldr	r3, [pc, #216]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
 800775a:	e003      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007760:	f000 bd49 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007764:	f000 bd47 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007768:	4b2e      	ldr	r3, [pc, #184]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800776a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800776e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800777a:	f7fd fbe7 	bl	8004f4c <HAL_RCC_GetPCLK3Freq>
 800777e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007780:	f000 bd39 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800778a:	d108      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778c:	f107 0308 	add.w	r3, r7, #8
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff f885 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800779a:	f000 bd2c 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800779e:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d10d      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077b0:	d109      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	e011      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d2:	d106      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80077dc:	4b14      	ldr	r3, [pc, #80]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e0:	e003      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077e6:	f000 bd06 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80077ea:	f000 bd04 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80077f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077f4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007800:	f7fd fb78 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8007804:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007806:	f000 bcf6 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007810:	d110      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f842 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007820:	f000 bce9 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007824:	44020c00 	.word	0x44020c00
 8007828:	016e3600 	.word	0x016e3600
 800782c:	03d09000 	.word	0x03d09000
 8007830:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007834:	4ba4      	ldr	r3, [pc, #656]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d10e      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007846:	d10a      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007848:	4b9f      	ldr	r3, [pc, #636]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	08db      	lsrs	r3, r3, #3
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	4a9e      	ldr	r2, [pc, #632]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800785a:	f000 bccc 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007862:	f000 bcc8 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007866:	4b98      	ldr	r3, [pc, #608]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800786c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007878:	f7fd fb68 	bl	8004f4c <HAL_RCC_GetPCLK3Freq>
 800787c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	f000 bcba 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007888:	d108      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff f806 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007898:	f000 bcad 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 800789c:	4b8a      	ldr	r3, [pc, #552]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d10e      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ae:	d10a      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078b0:	4b85      	ldr	r3, [pc, #532]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	08db      	lsrs	r3, r3, #3
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	4a84      	ldr	r2, [pc, #528]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078c2:	f000 bc98 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078ca:	f000 bc94 	b.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80078ce:	4b7e      	ldr	r3, [pc, #504]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80078d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80078e0:	d056      	beq.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80078e8:	f200 808b 	bhi.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078f2:	d03e      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fa:	f200 8082 	bhi.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007904:	d027      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800790c:	d879      	bhi.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007914:	d017      	beq.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791c:	d871      	bhi.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800792a:	d004      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 800792c:	e069      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800792e:	f7fd fb0d 	bl	8004f4c <HAL_RCC_GetPCLK3Freq>
 8007932:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007934:	e068      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007936:	f107 0314 	add.w	r3, r7, #20
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fe46 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007944:	e060      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007946:	f107 0308 	add.w	r3, r7, #8
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe ffa8 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007954:	e058      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007956:	4b5c      	ldr	r3, [pc, #368]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b02      	cmp	r3, #2
 8007962:	d103      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8007964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007968:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800796a:	e04d      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007970:	e04a      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007972:	4b55      	ldr	r3, [pc, #340]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007980:	d103      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8007982:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007988:	e03e      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800798e:	e03b      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007990:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007996:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800799c:	4b4a      	ldr	r3, [pc, #296]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d10c      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ae:	4b46      	ldr	r3, [pc, #280]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	08db      	lsrs	r3, r3, #3
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	4a44      	ldr	r2, [pc, #272]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80079ba:	fa22 f303 	lsr.w	r3, r2, r3
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c0:	e01e      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079c2:	4b41      	ldr	r3, [pc, #260]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ce:	d106      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80079d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	d102      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079d8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	e010      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079de:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ea:	d106      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f2:	d102      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079f4:	4b37      	ldr	r3, [pc, #220]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a06:	bf00      	nop
          }
        }
        break;
 8007a08:	e3f5      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007a0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a1c:	d05f      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a24:	f200 8094 	bhi.w	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2e:	d03f      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a36:	f200 808b 	bhi.w	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a40:	d028      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a48:	f200 8082 	bhi.w	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a52:	d017      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5a:	d879      	bhi.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a68:	d004      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8007a6a:	e071      	b.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fd fa42 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8007a70:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007a72:	e070      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fda7 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a82:	e068      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a84:	f107 0308 	add.w	r3, r7, #8
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe ff09 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a92:	e060      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d103      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aa6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007aa8:	e055      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aae:	e052      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007ab0:	4b05      	ldr	r3, [pc, #20]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ab6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007abe:	d10b      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007ac0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ac4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ac6:	e046      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007ac8:	44020c00 	.word	0x44020c00
 8007acc:	03d09000 	.word	0x03d09000
 8007ad0:	003d0900 	.word	0x003d0900
 8007ad4:	016e3600 	.word	0x016e3600
              frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007adc:	e03b      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ade:	4bae      	ldr	r3, [pc, #696]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ae4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aea:	4bab      	ldr	r3, [pc, #684]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d109      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007afc:	4ba6      	ldr	r3, [pc, #664]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	08db      	lsrs	r3, r3, #3
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	4aa5      	ldr	r2, [pc, #660]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	e01e      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b10:	4ba1      	ldr	r3, [pc, #644]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b1c:	d106      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b24:	d102      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b26:	4b9e      	ldr	r3, [pc, #632]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b2a:	e010      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b38:	d106      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b40:	d102      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b42:	4b98      	ldr	r3, [pc, #608]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b46:	e002      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007b4e:	e002      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b54:	bf00      	nop
          }
        }
        break;
 8007b56:	e34e      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007b58:	4b8f      	ldr	r3, [pc, #572]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007b64:	4b8c      	ldr	r3, [pc, #560]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b70:	d105      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007b78:	4b8a      	ldr	r3, [pc, #552]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007b7c:	e33b      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b84:	d107      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b86:	f107 0320 	add.w	r3, r7, #32
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fbb4 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b94:	e32f      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b9c:	d107      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b9e:	f107 0314 	add.w	r3, r7, #20
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fd12 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bac:	e323      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb2:	e320      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007bb4:	4b78      	ldr	r3, [pc, #480]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d860      	bhi.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8007bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be1 	.word	0x08007be1
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	08007c11 	.word	0x08007c11
 8007bdc:	08007c17 	.word	0x08007c17
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007be0:	f107 0320 	add.w	r3, r7, #32
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fb87 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bee:	e04e      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fce9 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bfe:	e046      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fe4b 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c0e:	e03e      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007c10:	4b65      	ldr	r3, [pc, #404]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c14:	e03b      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c16:	4b60      	ldr	r3, [pc, #384]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c22:	4b5d      	ldr	r3, [pc, #372]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c34:	4b58      	ldr	r3, [pc, #352]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	4a57      	ldr	r2, [pc, #348]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c46:	e01e      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c48:	4b53      	ldr	r3, [pc, #332]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c54:	d106      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5c:	d102      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c5e:	4b50      	ldr	r3, [pc, #320]	@ (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c62:	e010      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c64:	4b4c      	ldr	r3, [pc, #304]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c70:	d106      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c78:	d102      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	e002      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c84:	e003      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007c86:	e002      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c8c:	bf00      	nop
          }
        }
        break;
 8007c8e:	e2b2      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007c90:	4b41      	ldr	r3, [pc, #260]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	f200 80a4 	bhi.w	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007d31 	.word	0x08007d31
 8007cb0:	08007ded 	.word	0x08007ded
 8007cb4:	08007ded 	.word	0x08007ded
 8007cb8:	08007ded 	.word	0x08007ded
 8007cbc:	08007ded 	.word	0x08007ded
 8007cc0:	08007ded 	.word	0x08007ded
 8007cc4:	08007ded 	.word	0x08007ded
 8007cc8:	08007ded 	.word	0x08007ded
 8007ccc:	08007d41 	.word	0x08007d41
 8007cd0:	08007ded 	.word	0x08007ded
 8007cd4:	08007ded 	.word	0x08007ded
 8007cd8:	08007ded 	.word	0x08007ded
 8007cdc:	08007ded 	.word	0x08007ded
 8007ce0:	08007ded 	.word	0x08007ded
 8007ce4:	08007ded 	.word	0x08007ded
 8007ce8:	08007ded 	.word	0x08007ded
 8007cec:	08007d51 	.word	0x08007d51
 8007cf0:	08007ded 	.word	0x08007ded
 8007cf4:	08007ded 	.word	0x08007ded
 8007cf8:	08007ded 	.word	0x08007ded
 8007cfc:	08007ded 	.word	0x08007ded
 8007d00:	08007ded 	.word	0x08007ded
 8007d04:	08007ded 	.word	0x08007ded
 8007d08:	08007ded 	.word	0x08007ded
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007ded 	.word	0x08007ded
 8007d14:	08007ded 	.word	0x08007ded
 8007d18:	08007ded 	.word	0x08007ded
 8007d1c:	08007ded 	.word	0x08007ded
 8007d20:	08007ded 	.word	0x08007ded
 8007d24:	08007ded 	.word	0x08007ded
 8007d28:	08007ded 	.word	0x08007ded
 8007d2c:	08007d67 	.word	0x08007d67
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d30:	f107 0320 	add.w	r3, r7, #32
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fadf 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d3e:	e058      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d40:	f107 0314 	add.w	r3, r7, #20
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fc41 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d4e:	e050      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe fda3 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d5e:	e048      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007d60:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d64:	e045      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d66:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d72:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d116      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d113      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d84:	4b04      	ldr	r3, [pc, #16]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	08db      	lsrs	r3, r3, #3
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	4a03      	ldr	r2, [pc, #12]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d96:	e028      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007d98:	44020c00 	.word	0x44020c00
 8007d9c:	03d09000 	.word	0x03d09000
 8007da0:	003d0900 	.word	0x003d0900
 8007da4:	016e3600 	.word	0x016e3600
 8007da8:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dac:	4b95      	ldr	r3, [pc, #596]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db8:	d106      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8007dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc0:	d102      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007dc2:	4b91      	ldr	r3, [pc, #580]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc6:	e010      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ddc:	d102      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007dde:	4b8b      	ldr	r3, [pc, #556]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de2:	e002      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007dea:	e002      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007df0:	bf00      	nop
          }
        }
        break;
 8007df2:	e200      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007df4:	4b83      	ldr	r3, [pc, #524]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dfa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e06:	d031      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0e:	d866      	bhi.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e14:	d027      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e1a:	d860      	bhi.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	2b80      	cmp	r3, #128	@ 0x80
 8007e20:	d019      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	2b80      	cmp	r3, #128	@ 0x80
 8007e26:	d85a      	bhi.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	2b40      	cmp	r3, #64	@ 0x40
 8007e32:	d008      	beq.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007e34:	e053      	b.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e36:	f107 0320 	add.w	r3, r7, #32
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fa5c 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e44:	e04e      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e46:	f107 0314 	add.w	r3, r7, #20
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fbbe 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e54:	e046      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e56:	f107 0308 	add.w	r3, r7, #8
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fd20 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e64:	e03e      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007e66:	4b6a      	ldr	r3, [pc, #424]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007e68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e6a:	e03b      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e6c:	4b65      	ldr	r3, [pc, #404]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e76:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e78:	4b62      	ldr	r3, [pc, #392]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d10c      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	08db      	lsrs	r3, r3, #3
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	4a5f      	ldr	r2, [pc, #380]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e9c:	e01e      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e9e:	4b59      	ldr	r3, [pc, #356]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eaa:	d106      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	d102      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007eb4:	4b54      	ldr	r3, [pc, #336]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb8:	e010      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eba:	4b52      	ldr	r3, [pc, #328]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec6:	d106      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ece:	d102      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007eda:	e003      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ee2:	bf00      	nop
          }
        }
        break;
 8007ee4:	e187      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007ee6:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eec:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007ef8:	f7fd f812 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8007efc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007efe:	e17a      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007f00:	4b40      	ldr	r3, [pc, #256]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f0c:	d10b      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f14:	d107      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fb56 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f24:	e045      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007f26:	4b37      	ldr	r3, [pc, #220]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f32:	d10b      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe fcad 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	e032      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d10d      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f5e:	d109      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f60:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	08db      	lsrs	r3, r3, #3
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f72:	e01e      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007f74:	4b23      	ldr	r3, [pc, #140]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f80:	d106      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f88:	d102      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8007f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8e:	e010      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007f90:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f9c:	d106      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007fa4:	d102      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8007fa6:	4b19      	ldr	r3, [pc, #100]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007faa:	e002      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fb0:	e121      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007fb2:	e120      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007fb4:	4b13      	ldr	r3, [pc, #76]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d861      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08007fe5 	.word	0x08007fe5
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08008019 	.word	0x08008019

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007fdc:	f7fc ff6e 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8007fe0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007fe2:	e055      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe4:	f107 0320 	add.w	r3, r7, #32
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe f985 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ff2:	e04d      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff4:	f107 0314 	add.w	r3, r7, #20
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fae7 	bl	80065cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008002:	e045      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008004:	44020c00 	.word	0x44020c00
 8008008:	003d0900 	.word	0x003d0900
 800800c:	016e3600 	.word	0x016e3600
 8008010:	00bb8000 	.word	0x00bb8000
 8008014:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008018:	4b79      	ldr	r3, [pc, #484]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800801a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800801e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008022:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008024:	4b76      	ldr	r3, [pc, #472]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b02      	cmp	r3, #2
 800802e:	d10c      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008036:	4b72      	ldr	r3, [pc, #456]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	08db      	lsrs	r3, r3, #3
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	4a70      	ldr	r2, [pc, #448]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8008042:	fa22 f303 	lsr.w	r3, r2, r3
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
 8008048:	e01e      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800804a:	4b6d      	ldr	r3, [pc, #436]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008056:	d106      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008060:	4b69      	ldr	r3, [pc, #420]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
 8008064:	e010      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008066:	4b66      	ldr	r3, [pc, #408]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800806e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8008074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800807c:	4b63      	ldr	r3, [pc, #396]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	e002      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008086:	e003      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800808e:	bf00      	nop
          }
        }
        break;
 8008090:	e0b1      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008092:	4b5b      	ldr	r3, [pc, #364]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008098:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800809e:	4b58      	ldr	r3, [pc, #352]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d103      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80080b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b8:	e01f      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80080ba:	4b51      	ldr	r3, [pc, #324]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c8:	d106      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2b40      	cmp	r3, #64	@ 0x40
 80080ce:	d103      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80080d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d6:	e010      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80080d8:	4b49      	ldr	r3, [pc, #292]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e4:	d106      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	2b80      	cmp	r3, #128	@ 0x80
 80080ea:	d103      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80080ec:	f248 0312 	movw	r3, #32786	@ 0x8012
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f2:	e002      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80080f8:	e07d      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80080fa:	e07c      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80080fc:	4b40      	ldr	r3, [pc, #256]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008102:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008106:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008108:	4b3d      	ldr	r3, [pc, #244]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008114:	d105      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 800811c:	4b3c      	ldr	r3, [pc, #240]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008120:	e031      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008122:	4b37      	ldr	r3, [pc, #220]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800812e:	d10a      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	2b10      	cmp	r3, #16
 8008134:	d107      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008136:	f107 0320 	add.w	r3, r7, #32
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe f8dc 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	637b      	str	r3, [r7, #52]	@ 0x34
 8008144:	e01f      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008146:	4b2e      	ldr	r3, [pc, #184]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b02      	cmp	r3, #2
 8008152:	d106      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	2b20      	cmp	r3, #32
 8008158:	d103      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800815a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800815e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008160:	e011      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008162:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800816c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008170:	d106      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2b30      	cmp	r3, #48	@ 0x30
 8008176:	d103      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8008178:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800817c:	637b      	str	r3, [r7, #52]	@ 0x34
 800817e:	e002      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008184:	e037      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008186:	e036      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008188:	4b1d      	ldr	r3, [pc, #116]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800818a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800818e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008192:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008196:	2b10      	cmp	r3, #16
 8008198:	d107      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800819a:	f107 0320 	add.w	r3, r7, #32
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe f8aa 	bl	80062f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80081a8:	e025      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80081aa:	4b15      	ldr	r3, [pc, #84]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081b6:	d10a      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d107      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fb6c 	bl	80068a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80081cc:	e00f      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081da:	d105      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	2b30      	cmp	r3, #48	@ 0x30
 80081e0:	d102      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e6:	e002      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80081ec:	e003      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80081ee:	e002      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081f4:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80081f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	373c      	adds	r7, #60	@ 0x3c
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}
 8008200:	44020c00 	.word	0x44020c00
 8008204:	03d09000 	.word	0x03d09000
 8008208:	003d0900 	.word	0x003d0900
 800820c:	016e3600 	.word	0x016e3600
 8008210:	02dc6c00 	.word	0x02dc6c00

08008214 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800821c:	4b48      	ldr	r3, [pc, #288]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a47      	ldr	r2, [pc, #284]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 8008222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008226:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008228:	f7fb f9a4 	bl	8003574 <HAL_GetTick>
 800822c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800822e:	e008      	b.n	8008242 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008230:	f7fb f9a0 	bl	8003574 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e07a      	b.n	8008338 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008242:	4b3f      	ldr	r3, [pc, #252]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f0      	bne.n	8008230 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800824e:	4b3c      	ldr	r3, [pc, #240]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 8008250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008252:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6811      	ldr	r1, [r2, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6852      	ldr	r2, [r2, #4]
 8008262:	0212      	lsls	r2, r2, #8
 8008264:	430a      	orrs	r2, r1
 8008266:	4936      	ldr	r1, [pc, #216]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 8008268:	4313      	orrs	r3, r2
 800826a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	3b01      	subs	r3, #1
 800827c:	025b      	lsls	r3, r3, #9
 800827e:	b29b      	uxth	r3, r3
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	3b01      	subs	r3, #1
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	3b01      	subs	r3, #1
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800829c:	4928      	ldr	r1, [pc, #160]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80082a2:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	f023 020c 	bic.w	r2, r3, #12
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	4924      	ldr	r1, [pc, #144]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80082b4:	4b22      	ldr	r3, [pc, #136]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	f023 0220 	bic.w	r2, r3, #32
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	491f      	ldr	r1, [pc, #124]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80082c6:	4b1e      	ldr	r3, [pc, #120]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	491c      	ldr	r1, [pc, #112]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80082d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	4a19      	ldr	r2, [pc, #100]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082da:	f023 0310 	bic.w	r3, r3, #16
 80082de:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80082e0:	4b17      	ldr	r3, [pc, #92]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6a12      	ldr	r2, [r2, #32]
 80082f0:	00d2      	lsls	r2, r2, #3
 80082f2:	4913      	ldr	r1, [pc, #76]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80082f8:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fc:	4a10      	ldr	r2, [pc, #64]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 80082fe:	f043 0310 	orr.w	r3, r3, #16
 8008302:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008304:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a0d      	ldr	r2, [pc, #52]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 800830a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800830e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008310:	f7fb f930 	bl	8003574 <HAL_GetTick>
 8008314:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008316:	e008      	b.n	800832a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008318:	f7fb f92c 	bl	8003574 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e006      	b.n	8008338 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800832a:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <RCCEx_PLL2_Config+0x12c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0

}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	44020c00 	.word	0x44020c00

08008344 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800834c:	4b48      	ldr	r3, [pc, #288]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a47      	ldr	r2, [pc, #284]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008356:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008358:	f7fb f90c 	bl	8003574 <HAL_GetTick>
 800835c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800835e:	e008      	b.n	8008372 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008360:	f7fb f908 	bl	8003574 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e07a      	b.n	8008468 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008372:	4b3f      	ldr	r3, [pc, #252]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f0      	bne.n	8008360 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800837e:	4b3c      	ldr	r3, [pc, #240]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6811      	ldr	r1, [r2, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6852      	ldr	r2, [r2, #4]
 8008392:	0212      	lsls	r2, r2, #8
 8008394:	430a      	orrs	r2, r1
 8008396:	4936      	ldr	r1, [pc, #216]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008398:	4313      	orrs	r3, r2
 800839a:	630b      	str	r3, [r1, #48]	@ 0x30
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	025b      	lsls	r3, r3, #9
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083cc:	4928      	ldr	r1, [pc, #160]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083d2:	4b27      	ldr	r3, [pc, #156]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d6:	f023 020c 	bic.w	r2, r3, #12
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	4924      	ldr	r1, [pc, #144]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80083e4:	4b22      	ldr	r3, [pc, #136]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e8:	f023 0220 	bic.w	r2, r3, #32
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	491f      	ldr	r1, [pc, #124]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80083f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 80083f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	491c      	ldr	r1, [pc, #112]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008400:	4313      	orrs	r3, r2
 8008402:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008404:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	4a19      	ldr	r2, [pc, #100]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800840a:	f023 0310 	bic.w	r3, r3, #16
 800840e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008410:	4b17      	ldr	r3, [pc, #92]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008414:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008418:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6a12      	ldr	r2, [r2, #32]
 8008420:	00d2      	lsls	r2, r2, #3
 8008422:	4913      	ldr	r1, [pc, #76]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008424:	4313      	orrs	r3, r2
 8008426:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008428:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842c:	4a10      	ldr	r2, [pc, #64]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800842e:	f043 0310 	orr.w	r3, r3, #16
 8008432:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008434:	4b0e      	ldr	r3, [pc, #56]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a0d      	ldr	r2, [pc, #52]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800843a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800843e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008440:	f7fb f898 	bl	8003574 <HAL_GetTick>
 8008444:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008446:	e008      	b.n	800845a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008448:	f7fb f894 	bl	8003574 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e006      	b.n	8008468 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800845a:	4b05      	ldr	r3, [pc, #20]	@ (8008470 <RCCEx_PLL3_Config+0x12c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f0      	beq.n	8008448 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	44020c00 	.word	0x44020c00

08008474 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e10d      	b.n	80086a2 <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a88      	ldr	r2, [pc, #544]	@ (80086ac <HAL_SPI_Init+0x238>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <HAL_SPI_Init+0x26>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a86      	ldr	r2, [pc, #536]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	e000      	b.n	800849c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800849a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a81      	ldr	r2, [pc, #516]	@ (80086ac <HAL_SPI_Init+0x238>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d004      	beq.n	80084b6 <HAL_SPI_Init+0x42>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a7f      	ldr	r2, [pc, #508]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d105      	bne.n	80084c2 <HAL_SPI_Init+0x4e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b0f      	cmp	r3, #15
 80084bc:	d901      	bls.n	80084c2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e0ef      	b.n	80086a2 <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f902 	bl	80086cc <SPI_GetPacketSize>
 80084c8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a77      	ldr	r2, [pc, #476]	@ (80086ac <HAL_SPI_Init+0x238>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d004      	beq.n	80084de <HAL_SPI_Init+0x6a>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a75      	ldr	r2, [pc, #468]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d102      	bne.n	80084e4 <HAL_SPI_Init+0x70>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d820      	bhi.n	8008526 <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084e8:	4a72      	ldr	r2, [pc, #456]	@ (80086b4 <HAL_SPI_Init+0x240>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d018      	beq.n	8008520 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a71      	ldr	r2, [pc, #452]	@ (80086b8 <HAL_SPI_Init+0x244>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <HAL_SPI_Init+0xac>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a6f      	ldr	r2, [pc, #444]	@ (80086bc <HAL_SPI_Init+0x248>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00e      	beq.n	8008520 <HAL_SPI_Init+0xac>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a6e      	ldr	r2, [pc, #440]	@ (80086c0 <HAL_SPI_Init+0x24c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d009      	beq.n	8008520 <HAL_SPI_Init+0xac>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a6c      	ldr	r2, [pc, #432]	@ (80086c4 <HAL_SPI_Init+0x250>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <HAL_SPI_Init+0xac>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a6b      	ldr	r2, [pc, #428]	@ (80086c8 <HAL_SPI_Init+0x254>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d104      	bne.n	800852a <HAL_SPI_Init+0xb6>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b10      	cmp	r3, #16
 8008524:	d901      	bls.n	800852a <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e0bb      	b.n	80086a2 <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fa fa5e 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0201 	bic.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008566:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008570:	d119      	bne.n	80085a6 <HAL_SPI_Init+0x132>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800857a:	d103      	bne.n	8008584 <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008580:	2b00      	cmp	r3, #0
 8008582:	d008      	beq.n	8008596 <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10c      	bne.n	80085a6 <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008594:	d107      	bne.n	80085a6 <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00f      	beq.n	80085d2 <HAL_SPI_Init+0x15e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d90b      	bls.n	80085d2 <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e007      	b.n	80085e2 <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	431a      	orrs	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f4:	ea42 0103 	orr.w	r1, r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800864e:	ea42 0103 	orr.w	r1, r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40014c00 	.word	0x40014c00
 80086b0:	50014c00 	.word	0x50014c00
 80086b4:	40013000 	.word	0x40013000
 80086b8:	50013000 	.word	0x50013000
 80086bc:	40003800 	.word	0x40003800
 80086c0:	50003800 	.word	0x50003800
 80086c4:	40003c00 	.word	0x40003c00
 80086c8:	50003c00 	.word	0x50003c00

080086cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	3301      	adds	r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3307      	adds	r3, #7
 80086ea:	08db      	lsrs	r3, r3, #3
 80086ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e049      	b.n	80087a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7fa f9e7 	bl	8002afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3304      	adds	r3, #4
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f000 ff09 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d001      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e07c      	b.n	80088c2 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a3a      	ldr	r2, [pc, #232]	@ (80088d0 <HAL_TIM_Base_Start_IT+0x120>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d04a      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a39      	ldr	r2, [pc, #228]	@ (80088d4 <HAL_TIM_Base_Start_IT+0x124>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d045      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fc:	d040      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008806:	d03b      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a32      	ldr	r2, [pc, #200]	@ (80088d8 <HAL_TIM_Base_Start_IT+0x128>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d036      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a31      	ldr	r2, [pc, #196]	@ (80088dc <HAL_TIM_Base_Start_IT+0x12c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d031      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a2f      	ldr	r2, [pc, #188]	@ (80088e0 <HAL_TIM_Base_Start_IT+0x130>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d02c      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2e      	ldr	r2, [pc, #184]	@ (80088e4 <HAL_TIM_Base_Start_IT+0x134>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d027      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a2c      	ldr	r2, [pc, #176]	@ (80088e8 <HAL_TIM_Base_Start_IT+0x138>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d022      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a2b      	ldr	r2, [pc, #172]	@ (80088ec <HAL_TIM_Base_Start_IT+0x13c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d01d      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a29      	ldr	r2, [pc, #164]	@ (80088f0 <HAL_TIM_Base_Start_IT+0x140>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d018      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a28      	ldr	r2, [pc, #160]	@ (80088f4 <HAL_TIM_Base_Start_IT+0x144>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d013      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a26      	ldr	r2, [pc, #152]	@ (80088f8 <HAL_TIM_Base_Start_IT+0x148>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00e      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a25      	ldr	r2, [pc, #148]	@ (80088fc <HAL_TIM_Base_Start_IT+0x14c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d009      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a23      	ldr	r2, [pc, #140]	@ (8008900 <HAL_TIM_Base_Start_IT+0x150>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d004      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xd0>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a22      	ldr	r2, [pc, #136]	@ (8008904 <HAL_TIM_Base_Start_IT+0x154>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d115      	bne.n	80088ac <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	4b20      	ldr	r3, [pc, #128]	@ (8008908 <HAL_TIM_Base_Start_IT+0x158>)
 8008888:	4013      	ands	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b06      	cmp	r3, #6
 8008890:	d015      	beq.n	80088be <HAL_TIM_Base_Start_IT+0x10e>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008898:	d011      	beq.n	80088be <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0201 	orr.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088aa:	e008      	b.n	80088be <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e000      	b.n	80088c0 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	50012c00 	.word	0x50012c00
 80088d8:	40000400 	.word	0x40000400
 80088dc:	50000400 	.word	0x50000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	50000800 	.word	0x50000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	50000c00 	.word	0x50000c00
 80088f0:	40013400 	.word	0x40013400
 80088f4:	50013400 	.word	0x50013400
 80088f8:	40001800 	.word	0x40001800
 80088fc:	50001800 	.word	0x50001800
 8008900:	40014000 	.word	0x40014000
 8008904:	50014000 	.word	0x50014000
 8008908:	00010007 	.word	0x00010007

0800890c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800892e:	4013      	ands	r3, r2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10f      	bne.n	8008954 <HAL_TIM_Base_Stop_IT+0x48>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6a1a      	ldr	r2, [r3, #32]
 800893a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d107      	bne.n	8008954 <HAL_TIM_Base_Stop_IT+0x48>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e049      	b.n	8008a10 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d106      	bne.n	8008996 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f841 	bl	8008a18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3304      	adds	r3, #4
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f000 fdd5 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <HAL_TIM_OC_Start_IT+0x28>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	e03c      	b.n	8008ace <HAL_TIM_OC_Start_IT+0xa2>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	d109      	bne.n	8008a6e <HAL_TIM_OC_Start_IT+0x42>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	bf14      	ite	ne
 8008a66:	2301      	movne	r3, #1
 8008a68:	2300      	moveq	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	e02f      	b.n	8008ace <HAL_TIM_OC_Start_IT+0xa2>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d109      	bne.n	8008a88 <HAL_TIM_OC_Start_IT+0x5c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	e022      	b.n	8008ace <HAL_TIM_OC_Start_IT+0xa2>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b0c      	cmp	r3, #12
 8008a8c:	d109      	bne.n	8008aa2 <HAL_TIM_OC_Start_IT+0x76>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	bf14      	ite	ne
 8008a9a:	2301      	movne	r3, #1
 8008a9c:	2300      	moveq	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	e015      	b.n	8008ace <HAL_TIM_OC_Start_IT+0xa2>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	d109      	bne.n	8008abc <HAL_TIM_OC_Start_IT+0x90>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	e008      	b.n	8008ace <HAL_TIM_OC_Start_IT+0xa2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e11a      	b.n	8008d0c <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_OC_Start_IT+0xba>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ae4:	e023      	b.n	8008b2e <HAL_TIM_OC_Start_IT+0x102>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d104      	bne.n	8008af6 <HAL_TIM_OC_Start_IT+0xca>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008af4:	e01b      	b.n	8008b2e <HAL_TIM_OC_Start_IT+0x102>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d104      	bne.n	8008b06 <HAL_TIM_OC_Start_IT+0xda>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b04:	e013      	b.n	8008b2e <HAL_TIM_OC_Start_IT+0x102>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	d104      	bne.n	8008b16 <HAL_TIM_OC_Start_IT+0xea>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b14:	e00b      	b.n	8008b2e <HAL_TIM_OC_Start_IT+0x102>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d104      	bne.n	8008b26 <HAL_TIM_OC_Start_IT+0xfa>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b24:	e003      	b.n	8008b2e <HAL_TIM_OC_Start_IT+0x102>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b0c      	cmp	r3, #12
 8008b32:	d841      	bhi.n	8008bb8 <HAL_TIM_OC_Start_IT+0x18c>
 8008b34:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <HAL_TIM_OC_Start_IT+0x110>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b71 	.word	0x08008b71
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008bb9 	.word	0x08008bb9
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008b83 	.word	0x08008b83
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008b95 	.word	0x08008b95
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008ba7 	.word	0x08008ba7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0202 	orr.w	r2, r2, #2
 8008b7e:	60da      	str	r2, [r3, #12]
      break;
 8008b80:	e01d      	b.n	8008bbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0204 	orr.w	r2, r2, #4
 8008b90:	60da      	str	r2, [r3, #12]
      break;
 8008b92:	e014      	b.n	8008bbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0208 	orr.w	r2, r2, #8
 8008ba2:	60da      	str	r2, [r3, #12]
      break;
 8008ba4:	e00b      	b.n	8008bbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0210 	orr.w	r2, r2, #16
 8008bb4:	60da      	str	r2, [r3, #12]
      break;
 8008bb6:	e002      	b.n	8008bbe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f040 80a2 	bne.w	8008d0a <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 f97e 	bl	8009ed0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8008d14 <HAL_TIM_OC_Start_IT+0x2e8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d018      	beq.n	8008c10 <HAL_TIM_OC_Start_IT+0x1e4>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a4d      	ldr	r2, [pc, #308]	@ (8008d18 <HAL_TIM_OC_Start_IT+0x2ec>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <HAL_TIM_OC_Start_IT+0x1e4>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a4b      	ldr	r2, [pc, #300]	@ (8008d1c <HAL_TIM_OC_Start_IT+0x2f0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00e      	beq.n	8008c10 <HAL_TIM_OC_Start_IT+0x1e4>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8008d20 <HAL_TIM_OC_Start_IT+0x2f4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d009      	beq.n	8008c10 <HAL_TIM_OC_Start_IT+0x1e4>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a48      	ldr	r2, [pc, #288]	@ (8008d24 <HAL_TIM_OC_Start_IT+0x2f8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <HAL_TIM_OC_Start_IT+0x1e4>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a47      	ldr	r2, [pc, #284]	@ (8008d28 <HAL_TIM_OC_Start_IT+0x2fc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIM_OC_Start_IT+0x1e8>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <HAL_TIM_OC_Start_IT+0x1ea>
 8008c14:	2300      	movs	r3, #0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a39      	ldr	r2, [pc, #228]	@ (8008d14 <HAL_TIM_OC_Start_IT+0x2e8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d04a      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a37      	ldr	r2, [pc, #220]	@ (8008d18 <HAL_TIM_OC_Start_IT+0x2ec>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d045      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c46:	d040      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c50:	d03b      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a35      	ldr	r2, [pc, #212]	@ (8008d2c <HAL_TIM_OC_Start_IT+0x300>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d036      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a33      	ldr	r2, [pc, #204]	@ (8008d30 <HAL_TIM_OC_Start_IT+0x304>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d031      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a32      	ldr	r2, [pc, #200]	@ (8008d34 <HAL_TIM_OC_Start_IT+0x308>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d02c      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <HAL_TIM_OC_Start_IT+0x30c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d027      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d3c <HAL_TIM_OC_Start_IT+0x310>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d022      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	@ (8008d40 <HAL_TIM_OC_Start_IT+0x314>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d01d      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <HAL_TIM_OC_Start_IT+0x2f0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d018      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a20      	ldr	r2, [pc, #128]	@ (8008d20 <HAL_TIM_OC_Start_IT+0x2f4>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d013      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a27      	ldr	r2, [pc, #156]	@ (8008d44 <HAL_TIM_OC_Start_IT+0x318>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00e      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a25      	ldr	r2, [pc, #148]	@ (8008d48 <HAL_TIM_OC_Start_IT+0x31c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d009      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1a      	ldr	r2, [pc, #104]	@ (8008d24 <HAL_TIM_OC_Start_IT+0x2f8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d004      	beq.n	8008cca <HAL_TIM_OC_Start_IT+0x29e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a18      	ldr	r2, [pc, #96]	@ (8008d28 <HAL_TIM_OC_Start_IT+0x2fc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d115      	bne.n	8008cf6 <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8008d4c <HAL_TIM_OC_Start_IT+0x320>)
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d015      	beq.n	8008d08 <HAL_TIM_OC_Start_IT+0x2dc>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce2:	d011      	beq.n	8008d08 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf4:	e008      	b.n	8008d08 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0201 	orr.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e000      	b.n	8008d0a <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	50012c00 	.word	0x50012c00
 8008d1c:	40013400 	.word	0x40013400
 8008d20:	50013400 	.word	0x50013400
 8008d24:	40014000 	.word	0x40014000
 8008d28:	50014000 	.word	0x50014000
 8008d2c:	40000400 	.word	0x40000400
 8008d30:	50000400 	.word	0x50000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	50000800 	.word	0x50000800
 8008d3c:	40000c00 	.word	0x40000c00
 8008d40:	50000c00 	.word	0x50000c00
 8008d44:	40001800 	.word	0x40001800
 8008d48:	50001800 	.word	0x50001800
 8008d4c:	00010007 	.word	0x00010007

08008d50 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b0c      	cmp	r3, #12
 8008d62:	d841      	bhi.n	8008de8 <HAL_TIM_OC_Stop_IT+0x98>
 8008d64:	a201      	add	r2, pc, #4	@ (adr r2, 8008d6c <HAL_TIM_OC_Stop_IT+0x1c>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008da1 	.word	0x08008da1
 8008d70:	08008de9 	.word	0x08008de9
 8008d74:	08008de9 	.word	0x08008de9
 8008d78:	08008de9 	.word	0x08008de9
 8008d7c:	08008db3 	.word	0x08008db3
 8008d80:	08008de9 	.word	0x08008de9
 8008d84:	08008de9 	.word	0x08008de9
 8008d88:	08008de9 	.word	0x08008de9
 8008d8c:	08008dc5 	.word	0x08008dc5
 8008d90:	08008de9 	.word	0x08008de9
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008de9 	.word	0x08008de9
 8008d9c:	08008dd7 	.word	0x08008dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0202 	bic.w	r2, r2, #2
 8008dae:	60da      	str	r2, [r3, #12]
      break;
 8008db0:	e01d      	b.n	8008dee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0204 	bic.w	r2, r2, #4
 8008dc0:	60da      	str	r2, [r3, #12]
      break;
 8008dc2:	e014      	b.n	8008dee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0208 	bic.w	r2, r2, #8
 8008dd2:	60da      	str	r2, [r3, #12]
      break;
 8008dd4:	e00b      	b.n	8008dee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0210 	bic.w	r2, r2, #16
 8008de4:	60da      	str	r2, [r3, #12]
      break;
 8008de6:	e002      	b.n	8008dee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 8086 	bne.w	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 f866 	bl	8009ed0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a40      	ldr	r2, [pc, #256]	@ (8008f0c <HAL_TIM_OC_Stop_IT+0x1bc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d018      	beq.n	8008e40 <HAL_TIM_OC_Stop_IT+0xf0>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a3f      	ldr	r2, [pc, #252]	@ (8008f10 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d013      	beq.n	8008e40 <HAL_TIM_OC_Stop_IT+0xf0>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8008f14 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00e      	beq.n	8008e40 <HAL_TIM_OC_Stop_IT+0xf0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a3c      	ldr	r2, [pc, #240]	@ (8008f18 <HAL_TIM_OC_Stop_IT+0x1c8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_TIM_OC_Stop_IT+0xf0>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a3a      	ldr	r2, [pc, #232]	@ (8008f1c <HAL_TIM_OC_Stop_IT+0x1cc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIM_OC_Stop_IT+0xf0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a39      	ldr	r2, [pc, #228]	@ (8008f20 <HAL_TIM_OC_Stop_IT+0x1d0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d101      	bne.n	8008e44 <HAL_TIM_OC_Stop_IT+0xf4>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <HAL_TIM_OC_Stop_IT+0xf6>
 8008e44:	2300      	movs	r3, #0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d017      	beq.n	8008e7a <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6a1a      	ldr	r2, [r3, #32]
 8008e50:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10f      	bne.n	8008e7a <HAL_TIM_OC_Stop_IT+0x12a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a1a      	ldr	r2, [r3, #32]
 8008e60:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <HAL_TIM_OC_Stop_IT+0x12a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10f      	bne.n	8008eaa <HAL_TIM_OC_Stop_IT+0x15a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008e94:	4013      	ands	r3, r2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <HAL_TIM_OC_Stop_IT+0x15a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <HAL_TIM_OC_Stop_IT+0x16a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eb8:	e023      	b.n	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d104      	bne.n	8008eca <HAL_TIM_OC_Stop_IT+0x17a>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ec8:	e01b      	b.n	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_OC_Stop_IT+0x18a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ed8:	e013      	b.n	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b0c      	cmp	r3, #12
 8008ede:	d104      	bne.n	8008eea <HAL_TIM_OC_Stop_IT+0x19a>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ee8:	e00b      	b.n	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d104      	bne.n	8008efa <HAL_TIM_OC_Stop_IT+0x1aa>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef8:	e003      	b.n	8008f02 <HAL_TIM_OC_Stop_IT+0x1b2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40012c00 	.word	0x40012c00
 8008f10:	50012c00 	.word	0x50012c00
 8008f14:	40013400 	.word	0x40013400
 8008f18:	50013400 	.word	0x50013400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	50014000 	.word	0x50014000

08008f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d020      	beq.n	8008f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01b      	beq.n	8008f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0202 	mvn.w	r2, #2
 8008f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fad4 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 8008f74:	e005      	b.n	8008f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fac6 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fad7 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d020      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01b      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f06f 0204 	mvn.w	r2, #4
 8008fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 faae 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 8008fc0:	e005      	b.n	8008fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 faa0 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fab1 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d020      	beq.n	8009020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01b      	beq.n	8009020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0208 	mvn.w	r2, #8
 8008ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa88 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa7a 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa8b 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	2b00      	cmp	r3, #0
 8009028:	d020      	beq.n	800906c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01b      	beq.n	800906c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0210 	mvn.w	r2, #16
 800903c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2208      	movs	r2, #8
 8009042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa62 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa54 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fa65 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00c      	beq.n	8009090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f06f 0201 	mvn.w	r2, #1
 8009088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa32 	bl	80094f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00c      	beq.n	80090be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f809 	bl	800a0d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 f801 	bl	800a0e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00c      	beq.n	8009106 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d007      	beq.n	8009106 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fa1f 	bl	8009544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00c      	beq.n	800912a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f06f 0220 	mvn.w	r2, #32
 8009122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 ffc9 	bl	800a0bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00c      	beq.n	800914e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 ffd5 	bl	800a0f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00c      	beq.n	8009172 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800916a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 ffcd 	bl	800a10c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800918e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 ffc5 	bl	800a120 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00c      	beq.n	80091ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80091b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 ffbd 	bl	800a134 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80091de:	2302      	movs	r3, #2
 80091e0:	e066      	b.n	80092b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b14      	cmp	r3, #20
 80091ee:	d857      	bhi.n	80092a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80091f0:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	0800924d 	.word	0x0800924d
 80091fc:	080092a1 	.word	0x080092a1
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092a1 	.word	0x080092a1
 8009208:	0800925b 	.word	0x0800925b
 800920c:	080092a1 	.word	0x080092a1
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092a1 	.word	0x080092a1
 8009218:	08009269 	.word	0x08009269
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080092a1 	.word	0x080092a1
 8009224:	080092a1 	.word	0x080092a1
 8009228:	08009277 	.word	0x08009277
 800922c:	080092a1 	.word	0x080092a1
 8009230:	080092a1 	.word	0x080092a1
 8009234:	080092a1 	.word	0x080092a1
 8009238:	08009285 	.word	0x08009285
 800923c:	080092a1 	.word	0x080092a1
 8009240:	080092a1 	.word	0x080092a1
 8009244:	080092a1 	.word	0x080092a1
 8009248:	08009293 	.word	0x08009293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fa6a 	bl	800972c <TIM_OC1_SetConfig>
      break;
 8009258:	e025      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fafd 	bl	8009860 <TIM_OC2_SetConfig>
      break;
 8009266:	e01e      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fb8e 	bl	8009990 <TIM_OC3_SetConfig>
      break;
 8009274:	e017      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	4618      	mov	r0, r3
 800927e:	f000 fc1d 	bl	8009abc <TIM_OC4_SetConfig>
      break;
 8009282:	e010      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fcae 	bl	8009bec <TIM_OC5_SetConfig>
      break;
 8009290:	e009      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fd11 	bl	8009cc0 <TIM_OC6_SetConfig>
      break;
 800929e:	e002      	b.n	80092a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	75fb      	strb	r3, [r7, #23]
      break;
 80092a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_TIM_ConfigClockSource+0x1c>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e0fe      	b.n	80094d2 <HAL_TIM_ConfigClockSource+0x21a>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80092f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009310:	f000 80c9 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009314:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009318:	f200 80ce 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800931c:	4a6f      	ldr	r2, [pc, #444]	@ (80094dc <HAL_TIM_ConfigClockSource+0x224>)
 800931e:	4293      	cmp	r3, r2
 8009320:	f000 80c1 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009324:	4a6d      	ldr	r2, [pc, #436]	@ (80094dc <HAL_TIM_ConfigClockSource+0x224>)
 8009326:	4293      	cmp	r3, r2
 8009328:	f200 80c6 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800932c:	4a6c      	ldr	r2, [pc, #432]	@ (80094e0 <HAL_TIM_ConfigClockSource+0x228>)
 800932e:	4293      	cmp	r3, r2
 8009330:	f000 80b9 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009334:	4a6a      	ldr	r2, [pc, #424]	@ (80094e0 <HAL_TIM_ConfigClockSource+0x228>)
 8009336:	4293      	cmp	r3, r2
 8009338:	f200 80be 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800933c:	4a69      	ldr	r2, [pc, #420]	@ (80094e4 <HAL_TIM_ConfigClockSource+0x22c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	f000 80b1 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009344:	4a67      	ldr	r2, [pc, #412]	@ (80094e4 <HAL_TIM_ConfigClockSource+0x22c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	f200 80b6 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800934c:	4a66      	ldr	r2, [pc, #408]	@ (80094e8 <HAL_TIM_ConfigClockSource+0x230>)
 800934e:	4293      	cmp	r3, r2
 8009350:	f000 80a9 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009354:	4a64      	ldr	r2, [pc, #400]	@ (80094e8 <HAL_TIM_ConfigClockSource+0x230>)
 8009356:	4293      	cmp	r3, r2
 8009358:	f200 80ae 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800935c:	4a63      	ldr	r2, [pc, #396]	@ (80094ec <HAL_TIM_ConfigClockSource+0x234>)
 800935e:	4293      	cmp	r3, r2
 8009360:	f000 80a1 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009364:	4a61      	ldr	r2, [pc, #388]	@ (80094ec <HAL_TIM_ConfigClockSource+0x234>)
 8009366:	4293      	cmp	r3, r2
 8009368:	f200 80a6 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800936c:	4a60      	ldr	r2, [pc, #384]	@ (80094f0 <HAL_TIM_ConfigClockSource+0x238>)
 800936e:	4293      	cmp	r3, r2
 8009370:	f000 8099 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009374:	4a5e      	ldr	r2, [pc, #376]	@ (80094f0 <HAL_TIM_ConfigClockSource+0x238>)
 8009376:	4293      	cmp	r3, r2
 8009378:	f200 809e 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800937c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009380:	f000 8091 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009384:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009388:	f200 8096 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800938c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009390:	f000 8089 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 8009394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009398:	f200 808e 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 800939c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093a0:	d03e      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x168>
 80093a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093a6:	f200 8087 	bhi.w	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ae:	f000 8086 	beq.w	80094be <HAL_TIM_ConfigClockSource+0x206>
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b6:	d87f      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093b8:	2b70      	cmp	r3, #112	@ 0x70
 80093ba:	d01a      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x13a>
 80093bc:	2b70      	cmp	r3, #112	@ 0x70
 80093be:	d87b      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093c0:	2b60      	cmp	r3, #96	@ 0x60
 80093c2:	d050      	beq.n	8009466 <HAL_TIM_ConfigClockSource+0x1ae>
 80093c4:	2b60      	cmp	r3, #96	@ 0x60
 80093c6:	d877      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093c8:	2b50      	cmp	r3, #80	@ 0x50
 80093ca:	d03c      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0x18e>
 80093cc:	2b50      	cmp	r3, #80	@ 0x50
 80093ce:	d873      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	d058      	beq.n	8009486 <HAL_TIM_ConfigClockSource+0x1ce>
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	d86f      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093d8:	2b30      	cmp	r3, #48	@ 0x30
 80093da:	d064      	beq.n	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 80093dc:	2b30      	cmp	r3, #48	@ 0x30
 80093de:	d86b      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d060      	beq.n	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d867      	bhi.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d05c      	beq.n	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	d05a      	beq.n	80094a6 <HAL_TIM_ConfigClockSource+0x1ee>
 80093f0:	e062      	b.n	80094b8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009402:	f000 fd45 	bl	8009e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	609a      	str	r2, [r3, #8]
      break;
 800941e:	e04f      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009430:	f000 fd2e 	bl	8009e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009442:	609a      	str	r2, [r3, #8]
      break;
 8009444:	e03c      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009452:	461a      	mov	r2, r3
 8009454:	f000 fca0 	bl	8009d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2150      	movs	r1, #80	@ 0x50
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fcf9 	bl	8009e56 <TIM_ITRx_SetConfig>
      break;
 8009464:	e02c      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009472:	461a      	mov	r2, r3
 8009474:	f000 fcbf 	bl	8009df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2160      	movs	r1, #96	@ 0x60
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fce9 	bl	8009e56 <TIM_ITRx_SetConfig>
      break;
 8009484:	e01c      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009492:	461a      	mov	r2, r3
 8009494:	f000 fc80 	bl	8009d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2140      	movs	r1, #64	@ 0x40
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fcd9 	bl	8009e56 <TIM_ITRx_SetConfig>
      break;
 80094a4:	e00c      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f000 fcd0 	bl	8009e56 <TIM_ITRx_SetConfig>
      break;
 80094b6:	e003      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73fb      	strb	r3, [r7, #15]
      break;
 80094bc:	e000      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80094be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	00100070 	.word	0x00100070
 80094e0:	00100060 	.word	0x00100060
 80094e4:	00100050 	.word	0x00100050
 80094e8:	00100040 	.word	0x00100040
 80094ec:	00100030 	.word	0x00100030
 80094f0:	00100020 	.word	0x00100020

080094f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a62      	ldr	r2, [pc, #392]	@ (80096f4 <TIM_Base_SetConfig+0x19c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d02b      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a61      	ldr	r2, [pc, #388]	@ (80096f8 <TIM_Base_SetConfig+0x1a0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d027      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800957e:	d023      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009586:	d01f      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a5c      	ldr	r2, [pc, #368]	@ (80096fc <TIM_Base_SetConfig+0x1a4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d01b      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a5b      	ldr	r2, [pc, #364]	@ (8009700 <TIM_Base_SetConfig+0x1a8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d017      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a5a      	ldr	r2, [pc, #360]	@ (8009704 <TIM_Base_SetConfig+0x1ac>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d013      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a59      	ldr	r2, [pc, #356]	@ (8009708 <TIM_Base_SetConfig+0x1b0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00f      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a58      	ldr	r2, [pc, #352]	@ (800970c <TIM_Base_SetConfig+0x1b4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a57      	ldr	r2, [pc, #348]	@ (8009710 <TIM_Base_SetConfig+0x1b8>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d007      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a56      	ldr	r2, [pc, #344]	@ (8009714 <TIM_Base_SetConfig+0x1bc>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_Base_SetConfig+0x70>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a55      	ldr	r2, [pc, #340]	@ (8009718 <TIM_Base_SetConfig+0x1c0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d108      	bne.n	80095da <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a45      	ldr	r2, [pc, #276]	@ (80096f4 <TIM_Base_SetConfig+0x19c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d03b      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a44      	ldr	r2, [pc, #272]	@ (80096f8 <TIM_Base_SetConfig+0x1a0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d037      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f0:	d033      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095f8:	d02f      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a3f      	ldr	r2, [pc, #252]	@ (80096fc <TIM_Base_SetConfig+0x1a4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d02b      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a3e      	ldr	r2, [pc, #248]	@ (8009700 <TIM_Base_SetConfig+0x1a8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d027      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a3d      	ldr	r2, [pc, #244]	@ (8009704 <TIM_Base_SetConfig+0x1ac>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d023      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a3c      	ldr	r2, [pc, #240]	@ (8009708 <TIM_Base_SetConfig+0x1b0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a3b      	ldr	r2, [pc, #236]	@ (800970c <TIM_Base_SetConfig+0x1b4>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a3a      	ldr	r2, [pc, #232]	@ (8009710 <TIM_Base_SetConfig+0x1b8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a39      	ldr	r2, [pc, #228]	@ (8009714 <TIM_Base_SetConfig+0x1bc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a38      	ldr	r2, [pc, #224]	@ (8009718 <TIM_Base_SetConfig+0x1c0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a37      	ldr	r2, [pc, #220]	@ (800971c <TIM_Base_SetConfig+0x1c4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a36      	ldr	r2, [pc, #216]	@ (8009720 <TIM_Base_SetConfig+0x1c8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a35      	ldr	r2, [pc, #212]	@ (8009724 <TIM_Base_SetConfig+0x1cc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0x102>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a34      	ldr	r2, [pc, #208]	@ (8009728 <TIM_Base_SetConfig+0x1d0>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a18      	ldr	r2, [pc, #96]	@ (80096f4 <TIM_Base_SetConfig+0x19c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <TIM_Base_SetConfig+0x168>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a17      	ldr	r2, [pc, #92]	@ (80096f8 <TIM_Base_SetConfig+0x1a0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00f      	beq.n	80096c0 <TIM_Base_SetConfig+0x168>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009714 <TIM_Base_SetConfig+0x1bc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00b      	beq.n	80096c0 <TIM_Base_SetConfig+0x168>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009718 <TIM_Base_SetConfig+0x1c0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d007      	beq.n	80096c0 <TIM_Base_SetConfig+0x168>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009724 <TIM_Base_SetConfig+0x1cc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_Base_SetConfig+0x168>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009728 <TIM_Base_SetConfig+0x1d0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d103      	bne.n	80096c8 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d105      	bne.n	80096e6 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f023 0201 	bic.w	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	611a      	str	r2, [r3, #16]
  }
}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40012c00 	.word	0x40012c00
 80096f8:	50012c00 	.word	0x50012c00
 80096fc:	40000400 	.word	0x40000400
 8009700:	50000400 	.word	0x50000400
 8009704:	40000800 	.word	0x40000800
 8009708:	50000800 	.word	0x50000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	50000c00 	.word	0x50000c00
 8009714:	40013400 	.word	0x40013400
 8009718:	50013400 	.word	0x50013400
 800971c:	40001800 	.word	0x40001800
 8009720:	50001800 	.word	0x50001800
 8009724:	40014000 	.word	0x40014000
 8009728:	50014000 	.word	0x50014000

0800972c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	f023 0201 	bic.w	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0303 	bic.w	r3, r3, #3
 8009766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f023 0302 	bic.w	r3, r3, #2
 8009778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a30      	ldr	r2, [pc, #192]	@ (8009848 <TIM_OC1_SetConfig+0x11c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d013      	beq.n	80097b4 <TIM_OC1_SetConfig+0x88>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a2f      	ldr	r2, [pc, #188]	@ (800984c <TIM_OC1_SetConfig+0x120>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00f      	beq.n	80097b4 <TIM_OC1_SetConfig+0x88>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a2e      	ldr	r2, [pc, #184]	@ (8009850 <TIM_OC1_SetConfig+0x124>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00b      	beq.n	80097b4 <TIM_OC1_SetConfig+0x88>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a2d      	ldr	r2, [pc, #180]	@ (8009854 <TIM_OC1_SetConfig+0x128>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d007      	beq.n	80097b4 <TIM_OC1_SetConfig+0x88>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009858 <TIM_OC1_SetConfig+0x12c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_OC1_SetConfig+0x88>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a2b      	ldr	r2, [pc, #172]	@ (800985c <TIM_OC1_SetConfig+0x130>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d10c      	bne.n	80097ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f023 0308 	bic.w	r3, r3, #8
 80097ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f023 0304 	bic.w	r3, r3, #4
 80097cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009848 <TIM_OC1_SetConfig+0x11c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <TIM_OC1_SetConfig+0xd2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <TIM_OC1_SetConfig+0x120>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00f      	beq.n	80097fe <TIM_OC1_SetConfig+0xd2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009850 <TIM_OC1_SetConfig+0x124>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00b      	beq.n	80097fe <TIM_OC1_SetConfig+0xd2>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009854 <TIM_OC1_SetConfig+0x128>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d007      	beq.n	80097fe <TIM_OC1_SetConfig+0xd2>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a19      	ldr	r2, [pc, #100]	@ (8009858 <TIM_OC1_SetConfig+0x12c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d003      	beq.n	80097fe <TIM_OC1_SetConfig+0xd2>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a18      	ldr	r2, [pc, #96]	@ (800985c <TIM_OC1_SetConfig+0x130>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d111      	bne.n	8009822 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800980c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	4313      	orrs	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	621a      	str	r2, [r3, #32]
}
 800983c:	bf00      	nop
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	40012c00 	.word	0x40012c00
 800984c:	50012c00 	.word	0x50012c00
 8009850:	40013400 	.word	0x40013400
 8009854:	50013400 	.word	0x50013400
 8009858:	40014000 	.word	0x40014000
 800985c:	50014000 	.word	0x50014000

08009860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	f023 0210 	bic.w	r2, r3, #16
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800989a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	021b      	lsls	r3, r3, #8
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f023 0320 	bic.w	r3, r3, #32
 80098ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a2e      	ldr	r2, [pc, #184]	@ (8009978 <TIM_OC2_SetConfig+0x118>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00b      	beq.n	80098dc <TIM_OC2_SetConfig+0x7c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a2d      	ldr	r2, [pc, #180]	@ (800997c <TIM_OC2_SetConfig+0x11c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d007      	beq.n	80098dc <TIM_OC2_SetConfig+0x7c>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009980 <TIM_OC2_SetConfig+0x120>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <TIM_OC2_SetConfig+0x7c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009984 <TIM_OC2_SetConfig+0x124>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d10d      	bne.n	80098f8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009978 <TIM_OC2_SetConfig+0x118>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <TIM_OC2_SetConfig+0xc8>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a1e      	ldr	r2, [pc, #120]	@ (800997c <TIM_OC2_SetConfig+0x11c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d00f      	beq.n	8009928 <TIM_OC2_SetConfig+0xc8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <TIM_OC2_SetConfig+0x120>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00b      	beq.n	8009928 <TIM_OC2_SetConfig+0xc8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a1c      	ldr	r2, [pc, #112]	@ (8009984 <TIM_OC2_SetConfig+0x124>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d007      	beq.n	8009928 <TIM_OC2_SetConfig+0xc8>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a1b      	ldr	r2, [pc, #108]	@ (8009988 <TIM_OC2_SetConfig+0x128>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_OC2_SetConfig+0xc8>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a1a      	ldr	r2, [pc, #104]	@ (800998c <TIM_OC2_SetConfig+0x12c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d113      	bne.n	8009950 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800992e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4313      	orrs	r3, r2
 8009942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40012c00 	.word	0x40012c00
 800997c:	50012c00 	.word	0x50012c00
 8009980:	40013400 	.word	0x40013400
 8009984:	50013400 	.word	0x50013400
 8009988:	40014000 	.word	0x40014000
 800998c:	50014000 	.word	0x50014000

08009990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a2d      	ldr	r2, [pc, #180]	@ (8009aa4 <TIM_OC3_SetConfig+0x114>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00b      	beq.n	8009a0a <TIM_OC3_SetConfig+0x7a>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a2c      	ldr	r2, [pc, #176]	@ (8009aa8 <TIM_OC3_SetConfig+0x118>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d007      	beq.n	8009a0a <TIM_OC3_SetConfig+0x7a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a2b      	ldr	r2, [pc, #172]	@ (8009aac <TIM_OC3_SetConfig+0x11c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d003      	beq.n	8009a0a <TIM_OC3_SetConfig+0x7a>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a2a      	ldr	r2, [pc, #168]	@ (8009ab0 <TIM_OC3_SetConfig+0x120>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d10d      	bne.n	8009a26 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa4 <TIM_OC3_SetConfig+0x114>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <TIM_OC3_SetConfig+0xc6>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa8 <TIM_OC3_SetConfig+0x118>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00f      	beq.n	8009a56 <TIM_OC3_SetConfig+0xc6>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a1c      	ldr	r2, [pc, #112]	@ (8009aac <TIM_OC3_SetConfig+0x11c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00b      	beq.n	8009a56 <TIM_OC3_SetConfig+0xc6>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab0 <TIM_OC3_SetConfig+0x120>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d007      	beq.n	8009a56 <TIM_OC3_SetConfig+0xc6>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab4 <TIM_OC3_SetConfig+0x124>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d003      	beq.n	8009a56 <TIM_OC3_SetConfig+0xc6>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a19      	ldr	r2, [pc, #100]	@ (8009ab8 <TIM_OC3_SetConfig+0x128>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d113      	bne.n	8009a7e <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	011b      	lsls	r3, r3, #4
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	621a      	str	r2, [r3, #32]
}
 8009a98:	bf00      	nop
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	40012c00 	.word	0x40012c00
 8009aa8:	50012c00 	.word	0x50012c00
 8009aac:	40013400 	.word	0x40013400
 8009ab0:	50013400 	.word	0x50013400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	50014000 	.word	0x50014000

08009abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	031b      	lsls	r3, r3, #12
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8009bd4 <TIM_OC4_SetConfig+0x118>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00b      	beq.n	8009b38 <TIM_OC4_SetConfig+0x7c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a2d      	ldr	r2, [pc, #180]	@ (8009bd8 <TIM_OC4_SetConfig+0x11c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d007      	beq.n	8009b38 <TIM_OC4_SetConfig+0x7c>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8009bdc <TIM_OC4_SetConfig+0x120>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_OC4_SetConfig+0x7c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a2b      	ldr	r2, [pc, #172]	@ (8009be0 <TIM_OC4_SetConfig+0x124>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d10d      	bne.n	8009b54 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	031b      	lsls	r3, r3, #12
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd4 <TIM_OC4_SetConfig+0x118>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d013      	beq.n	8009b84 <TIM_OC4_SetConfig+0xc8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bd8 <TIM_OC4_SetConfig+0x11c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00f      	beq.n	8009b84 <TIM_OC4_SetConfig+0xc8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a1d      	ldr	r2, [pc, #116]	@ (8009bdc <TIM_OC4_SetConfig+0x120>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00b      	beq.n	8009b84 <TIM_OC4_SetConfig+0xc8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8009be0 <TIM_OC4_SetConfig+0x124>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d007      	beq.n	8009b84 <TIM_OC4_SetConfig+0xc8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a1b      	ldr	r2, [pc, #108]	@ (8009be4 <TIM_OC4_SetConfig+0x128>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d003      	beq.n	8009b84 <TIM_OC4_SetConfig+0xc8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009be8 <TIM_OC4_SetConfig+0x12c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d113      	bne.n	8009bac <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	019b      	lsls	r3, r3, #6
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	019b      	lsls	r3, r3, #6
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40012c00 	.word	0x40012c00
 8009bd8:	50012c00 	.word	0x50012c00
 8009bdc:	40013400 	.word	0x40013400
 8009be0:	50013400 	.word	0x50013400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	50014000 	.word	0x50014000

08009bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <TIM_OC5_SetConfig+0xbc>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d013      	beq.n	8009c6e <TIM_OC5_SetConfig+0x82>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <TIM_OC5_SetConfig+0xc0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00f      	beq.n	8009c6e <TIM_OC5_SetConfig+0x82>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a17      	ldr	r2, [pc, #92]	@ (8009cb0 <TIM_OC5_SetConfig+0xc4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00b      	beq.n	8009c6e <TIM_OC5_SetConfig+0x82>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a16      	ldr	r2, [pc, #88]	@ (8009cb4 <TIM_OC5_SetConfig+0xc8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d007      	beq.n	8009c6e <TIM_OC5_SetConfig+0x82>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a15      	ldr	r2, [pc, #84]	@ (8009cb8 <TIM_OC5_SetConfig+0xcc>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d003      	beq.n	8009c6e <TIM_OC5_SetConfig+0x82>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a14      	ldr	r2, [pc, #80]	@ (8009cbc <TIM_OC5_SetConfig+0xd0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d109      	bne.n	8009c82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	621a      	str	r2, [r3, #32]
}
 8009c9c:	bf00      	nop
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	40012c00 	.word	0x40012c00
 8009cac:	50012c00 	.word	0x50012c00
 8009cb0:	40013400 	.word	0x40013400
 8009cb4:	50013400 	.word	0x50013400
 8009cb8:	40014000 	.word	0x40014000
 8009cbc:	50014000 	.word	0x50014000

08009cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	051b      	lsls	r3, r3, #20
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1a      	ldr	r2, [pc, #104]	@ (8009d80 <TIM_OC6_SetConfig+0xc0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d013      	beq.n	8009d44 <TIM_OC6_SetConfig+0x84>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a19      	ldr	r2, [pc, #100]	@ (8009d84 <TIM_OC6_SetConfig+0xc4>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00f      	beq.n	8009d44 <TIM_OC6_SetConfig+0x84>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a18      	ldr	r2, [pc, #96]	@ (8009d88 <TIM_OC6_SetConfig+0xc8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d00b      	beq.n	8009d44 <TIM_OC6_SetConfig+0x84>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a17      	ldr	r2, [pc, #92]	@ (8009d8c <TIM_OC6_SetConfig+0xcc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d007      	beq.n	8009d44 <TIM_OC6_SetConfig+0x84>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a16      	ldr	r2, [pc, #88]	@ (8009d90 <TIM_OC6_SetConfig+0xd0>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC6_SetConfig+0x84>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a15      	ldr	r2, [pc, #84]	@ (8009d94 <TIM_OC6_SetConfig+0xd4>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d109      	bne.n	8009d58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	029b      	lsls	r3, r3, #10
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	621a      	str	r2, [r3, #32]
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40012c00 	.word	0x40012c00
 8009d84:	50012c00 	.word	0x50012c00
 8009d88:	40013400 	.word	0x40013400
 8009d8c:	50013400 	.word	0x50013400
 8009d90:	40014000 	.word	0x40014000
 8009d94:	50014000 	.word	0x50014000

08009d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f023 030a 	bic.w	r3, r3, #10
 8009dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	621a      	str	r2, [r3, #32]
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b087      	sub	sp, #28
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	f023 0210 	bic.w	r2, r3, #16
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	031b      	lsls	r3, r3, #12
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	621a      	str	r2, [r3, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	371c      	adds	r7, #28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f043 0307 	orr.w	r3, r3, #7
 8009e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f003 031f 	and.w	r3, r3, #31
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1a      	ldr	r2, [r3, #32]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f003 031f 	and.w	r3, r3, #31
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	fa01 f303 	lsl.w	r3, r1, r3
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e0a1      	b.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a4a      	ldr	r2, [pc, #296]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d00e      	beq.n	8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a49      	ldr	r2, [pc, #292]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d009      	beq.n	8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a47      	ldr	r2, [pc, #284]	@ (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d004      	beq.n	8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a46      	ldr	r2, [pc, #280]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d108      	bne.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a34      	ldr	r2, [pc, #208]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d04a      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a33      	ldr	r2, [pc, #204]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d045      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc8:	d040      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fd2:	d03b      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a2e      	ldr	r2, [pc, #184]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d036      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2d      	ldr	r2, [pc, #180]	@ (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d031      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a2b      	ldr	r2, [pc, #172]	@ (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d02c      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a2a      	ldr	r2, [pc, #168]	@ (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d027      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a28      	ldr	r2, [pc, #160]	@ (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d022      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a27      	ldr	r2, [pc, #156]	@ (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d01d      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d018      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a20      	ldr	r2, [pc, #128]	@ (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00e      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1f      	ldr	r2, [pc, #124]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d009      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1c      	ldr	r2, [pc, #112]	@ (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d10c      	bne.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40012c00 	.word	0x40012c00
 800a088:	50012c00 	.word	0x50012c00
 800a08c:	40013400 	.word	0x40013400
 800a090:	50013400 	.word	0x50013400
 800a094:	40000400 	.word	0x40000400
 800a098:	50000400 	.word	0x50000400
 800a09c:	40000800 	.word	0x40000800
 800a0a0:	50000800 	.word	0x50000800
 800a0a4:	40000c00 	.word	0x40000c00
 800a0a8:	50000c00 	.word	0x50000c00
 800a0ac:	40001800 	.word	0x40001800
 800a0b0:	50001800 	.word	0x50001800
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	50014000 	.word	0x50014000

0800a0bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e042      	b.n	800a1e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7f8 fdd1 	bl	8002d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2224      	movs	r2, #36	@ 0x24
 800a176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fb4c 	bl	800a830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f99b 	bl	800a4d4 <UART_SetConfig>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e01b      	b.n	800a1e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fbcb 	bl	800a974 <UART_CheckIdleState>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	@ 0x28
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	f040 808b 	bne.w	800a31a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <HAL_UART_Transmit+0x28>
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e083      	b.n	800a31c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a21e:	2b80      	cmp	r3, #128	@ 0x80
 800a220:	d107      	bne.n	800a232 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a230:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2221      	movs	r2, #33	@ 0x21
 800a23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a242:	f7f9 f997 	bl	8003574 <HAL_GetTick>
 800a246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	88fa      	ldrh	r2, [r7, #6]
 800a254:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a260:	d108      	bne.n	800a274 <HAL_UART_Transmit+0x8c>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d104      	bne.n	800a274 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	e003      	b.n	800a27c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a27c:	e030      	b.n	800a2e0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2200      	movs	r2, #0
 800a286:	2180      	movs	r1, #128	@ 0x80
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fc1d 	bl	800aac8 <UART_WaitOnFlagUntilTimeout>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d005      	beq.n	800a2a0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2220      	movs	r2, #32
 800a298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e03d      	b.n	800a31c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	3302      	adds	r3, #2
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e007      	b.n	800a2ce <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1c8      	bne.n	800a27e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2140      	movs	r1, #64	@ 0x40
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 fbe6 	bl	800aac8 <UART_WaitOnFlagUntilTimeout>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2220      	movs	r2, #32
 800a306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e006      	b.n	800a31c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	e000      	b.n	800a31c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a31a:	2302      	movs	r3, #2
  }
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	@ 0x28
 800a328:	af02      	add	r7, sp, #8
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	4613      	mov	r3, r2
 800a332:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	f040 80c4 	bne.w	800a4c8 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <HAL_UART_Receive+0x28>
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0bc      	b.n	800a4ca <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35a:	2b40      	cmp	r3, #64	@ 0x40
 800a35c:	d107      	bne.n	800a36e <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a36c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2222      	movs	r2, #34	@ 0x22
 800a37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a384:	f7f9 f8f6 	bl	8003574 <HAL_GetTick>
 800a388:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	88fa      	ldrh	r2, [r7, #6]
 800a38e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3a2:	d10e      	bne.n	800a3c2 <HAL_UART_Receive+0x9e>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d105      	bne.n	800a3b8 <HAL_UART_Receive+0x94>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a3b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3b6:	e02d      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	22ff      	movs	r2, #255	@ 0xff
 800a3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3c0:	e028      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10d      	bne.n	800a3e6 <HAL_UART_Receive+0xc2>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d104      	bne.n	800a3dc <HAL_UART_Receive+0xb8>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22ff      	movs	r2, #255	@ 0xff
 800a3d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3da:	e01b      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	227f      	movs	r2, #127	@ 0x7f
 800a3e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3e4:	e016      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ee:	d10d      	bne.n	800a40c <HAL_UART_Receive+0xe8>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <HAL_UART_Receive+0xde>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	227f      	movs	r2, #127	@ 0x7f
 800a3fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a400:	e008      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	223f      	movs	r2, #63	@ 0x3f
 800a406:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a40a:	e003      	b.n	800a414 <HAL_UART_Receive+0xf0>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a41a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a424:	d108      	bne.n	800a438 <HAL_UART_Receive+0x114>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	e003      	b.n	800a440 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a43c:	2300      	movs	r3, #0
 800a43e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a440:	e036      	b.n	800a4b0 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2200      	movs	r2, #0
 800a44a:	2120      	movs	r1, #32
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fb3b 	bl	800aac8 <UART_WaitOnFlagUntilTimeout>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e032      	b.n	800a4ca <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10c      	bne.n	800a484 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a470:	b29a      	uxth	r2, r3
 800a472:	8a7b      	ldrh	r3, [r7, #18]
 800a474:	4013      	ands	r3, r2
 800a476:	b29a      	uxth	r2, r3
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	3302      	adds	r3, #2
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	e00c      	b.n	800a49e <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	8a7b      	ldrh	r3, [r7, #18]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	4013      	ands	r3, r2
 800a492:	b2da      	uxtb	r2, r3
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	3301      	adds	r3, #1
 800a49c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1c2      	bne.n	800a442 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e000      	b.n	800a4ca <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800a4c8:	2302      	movs	r3, #2
  }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b094      	sub	sp, #80	@ 0x50
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	4b83      	ldr	r3, [pc, #524]	@ (800a6f8 <UART_SetConfig+0x224>)
 800a4ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fe:	69db      	ldr	r3, [r3, #28]
 800a500:	4313      	orrs	r3, r2
 800a502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	497c      	ldr	r1, [pc, #496]	@ (800a6fc <UART_SetConfig+0x228>)
 800a50c:	4019      	ands	r1, r3
 800a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a514:	430b      	orrs	r3, r1
 800a516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a524:	68d9      	ldr	r1, [r3, #12]
 800a526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	ea40 0301 	orr.w	r3, r0, r1
 800a52e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	4b6f      	ldr	r3, [pc, #444]	@ (800a6f8 <UART_SetConfig+0x224>)
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d009      	beq.n	800a554 <UART_SetConfig+0x80>
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	4b6e      	ldr	r3, [pc, #440]	@ (800a700 <UART_SetConfig+0x22c>)
 800a546:	429a      	cmp	r2, r3
 800a548:	d004      	beq.n	800a554 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54c:	6a1a      	ldr	r2, [r3, #32]
 800a54e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a550:	4313      	orrs	r3, r2
 800a552:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a55e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a568:	430b      	orrs	r3, r1
 800a56a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a572:	f023 000f 	bic.w	r0, r3, #15
 800a576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a578:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	ea40 0301 	orr.w	r3, r0, r1
 800a582:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4b5e      	ldr	r3, [pc, #376]	@ (800a704 <UART_SetConfig+0x230>)
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d102      	bne.n	800a594 <UART_SetConfig+0xc0>
 800a58e:	2301      	movs	r3, #1
 800a590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a592:	e032      	b.n	800a5fa <UART_SetConfig+0x126>
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	4b5b      	ldr	r3, [pc, #364]	@ (800a708 <UART_SetConfig+0x234>)
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d102      	bne.n	800a5a4 <UART_SetConfig+0xd0>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5a2:	e02a      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	4b58      	ldr	r3, [pc, #352]	@ (800a70c <UART_SetConfig+0x238>)
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d102      	bne.n	800a5b4 <UART_SetConfig+0xe0>
 800a5ae:	2304      	movs	r3, #4
 800a5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b2:	e022      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4b55      	ldr	r3, [pc, #340]	@ (800a710 <UART_SetConfig+0x23c>)
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d102      	bne.n	800a5c4 <UART_SetConfig+0xf0>
 800a5be:	2308      	movs	r3, #8
 800a5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c2:	e01a      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	4b52      	ldr	r3, [pc, #328]	@ (800a714 <UART_SetConfig+0x240>)
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d102      	bne.n	800a5d4 <UART_SetConfig+0x100>
 800a5ce:	2310      	movs	r3, #16
 800a5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5d2:	e012      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	4b4f      	ldr	r3, [pc, #316]	@ (800a718 <UART_SetConfig+0x244>)
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d102      	bne.n	800a5e4 <UART_SetConfig+0x110>
 800a5de:	2320      	movs	r3, #32
 800a5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5e2:	e00a      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4b43      	ldr	r3, [pc, #268]	@ (800a6f8 <UART_SetConfig+0x224>)
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d103      	bne.n	800a5f6 <UART_SetConfig+0x122>
 800a5ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5f4:	e001      	b.n	800a5fa <UART_SetConfig+0x126>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f8 <UART_SetConfig+0x224>)
 800a600:	429a      	cmp	r2, r3
 800a602:	d005      	beq.n	800a610 <UART_SetConfig+0x13c>
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4b3d      	ldr	r3, [pc, #244]	@ (800a700 <UART_SetConfig+0x22c>)
 800a60a:	429a      	cmp	r2, r3
 800a60c:	f040 8088 	bne.w	800a720 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a612:	2200      	movs	r2, #0
 800a614:	623b      	str	r3, [r7, #32]
 800a616:	627a      	str	r2, [r7, #36]	@ 0x24
 800a618:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a61c:	f7fc faaa 	bl	8006b74 <HAL_RCCEx_GetPeriphCLKFreq>
 800a620:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80eb 	beq.w	800a800 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62e:	4a3b      	ldr	r2, [pc, #236]	@ (800a71c <UART_SetConfig+0x248>)
 800a630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a634:	461a      	mov	r2, r3
 800a636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a638:	fbb3 f3f2 	udiv	r3, r3, r2
 800a63c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	4613      	mov	r3, r2
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4413      	add	r3, r2
 800a648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d305      	bcc.n	800a65a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a656:	429a      	cmp	r2, r3
 800a658:	d903      	bls.n	800a662 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a660:	e048      	b.n	800a6f4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a664:	2200      	movs	r2, #0
 800a666:	61bb      	str	r3, [r7, #24]
 800a668:	61fa      	str	r2, [r7, #28]
 800a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66e:	4a2b      	ldr	r2, [pc, #172]	@ (800a71c <UART_SetConfig+0x248>)
 800a670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a674:	b29b      	uxth	r3, r3
 800a676:	2200      	movs	r2, #0
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	617a      	str	r2, [r7, #20]
 800a67c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a680:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a684:	f7f6 fb14 	bl	8000cb0 <__aeabi_uldivmod>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4610      	mov	r0, r2
 800a68e:	4619      	mov	r1, r3
 800a690:	f04f 0200 	mov.w	r2, #0
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	020b      	lsls	r3, r1, #8
 800a69a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a69e:	0202      	lsls	r2, r0, #8
 800a6a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6a2:	6849      	ldr	r1, [r1, #4]
 800a6a4:	0849      	lsrs	r1, r1, #1
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	eb12 0804 	adds.w	r8, r2, r4
 800a6b0:	eb43 0905 	adc.w	r9, r3, r5
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	60bb      	str	r3, [r7, #8]
 800a6bc:	60fa      	str	r2, [r7, #12]
 800a6be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f6 faf3 	bl	8000cb0 <__aeabi_uldivmod>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6d8:	d308      	bcc.n	800a6ec <UART_SetConfig+0x218>
 800a6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e0:	d204      	bcs.n	800a6ec <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6e8:	60da      	str	r2, [r3, #12]
 800a6ea:	e003      	b.n	800a6f4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a6f2:	e085      	b.n	800a800 <UART_SetConfig+0x32c>
 800a6f4:	e084      	b.n	800a800 <UART_SetConfig+0x32c>
 800a6f6:	bf00      	nop
 800a6f8:	44002400 	.word	0x44002400
 800a6fc:	cfff69f3 	.word	0xcfff69f3
 800a700:	54002400 	.word	0x54002400
 800a704:	40013800 	.word	0x40013800
 800a708:	40004400 	.word	0x40004400
 800a70c:	40004800 	.word	0x40004800
 800a710:	40004c00 	.word	0x40004c00
 800a714:	40005000 	.word	0x40005000
 800a718:	40006400 	.word	0x40006400
 800a71c:	0800fe30 	.word	0x0800fe30
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a728:	d13c      	bne.n	800a7a4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a72a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a72c:	2200      	movs	r2, #0
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	607a      	str	r2, [r7, #4]
 800a732:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a736:	f7fc fa1d 	bl	8006b74 <HAL_RCCEx_GetPeriphCLKFreq>
 800a73a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a73c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d05e      	beq.n	800a800 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	4a39      	ldr	r2, [pc, #228]	@ (800a82c <UART_SetConfig+0x358>)
 800a748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a750:	fbb3 f3f2 	udiv	r3, r3, r2
 800a754:	005a      	lsls	r2, r3, #1
 800a756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	085b      	lsrs	r3, r3, #1
 800a75c:	441a      	add	r2, r3
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	fbb2 f3f3 	udiv	r3, r2, r3
 800a766:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d916      	bls.n	800a79c <UART_SetConfig+0x2c8>
 800a76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a774:	d212      	bcs.n	800a79c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f023 030f 	bic.w	r3, r3, #15
 800a77e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a782:	085b      	lsrs	r3, r3, #1
 800a784:	b29b      	uxth	r3, r3
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a78e:	4313      	orrs	r3, r2
 800a790:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a798:	60da      	str	r2, [r3, #12]
 800a79a:	e031      	b.n	800a800 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a7a2:	e02d      	b.n	800a800 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a7a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	469a      	mov	sl, r3
 800a7aa:	4693      	mov	fp, r2
 800a7ac:	4650      	mov	r0, sl
 800a7ae:	4659      	mov	r1, fp
 800a7b0:	f7fc f9e0 	bl	8006b74 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7b4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a7b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d021      	beq.n	800a800 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a82c <UART_SetConfig+0x358>)
 800a7c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	085b      	lsrs	r3, r3, #1
 800a7d4:	441a      	add	r2, r3
 800a7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e2:	2b0f      	cmp	r3, #15
 800a7e4:	d909      	bls.n	800a7fa <UART_SetConfig+0x326>
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ec:	d205      	bcs.n	800a7fa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60da      	str	r2, [r3, #12]
 800a7f8:	e002      	b.n	800a800 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	2201      	movs	r2, #1
 800a804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	2201      	movs	r2, #1
 800a80c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a812:	2200      	movs	r2, #0
 800a814:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a818:	2200      	movs	r2, #0
 800a81a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a81c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a820:	4618      	mov	r0, r3
 800a822:	3750      	adds	r7, #80	@ 0x50
 800a824:	46bd      	mov	sp, r7
 800a826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a82a:	bf00      	nop
 800a82c:	0800fe30 	.word	0x0800fe30

0800a830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00a      	beq.n	800a8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01a      	beq.n	800a946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a92a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a92e:	d10a      	bne.n	800a946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	605a      	str	r2, [r3, #4]
  }
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b098      	sub	sp, #96	@ 0x60
 800a978:	af02      	add	r7, sp, #8
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a984:	f7f8 fdf6 	bl	8003574 <HAL_GetTick>
 800a988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b08      	cmp	r3, #8
 800a996:	d12f      	bne.n	800a9f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f88e 	bl	800aac8 <UART_WaitOnFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d022      	beq.n	800a9f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e6      	bne.n	800a9b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e063      	b.n	800aac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d149      	bne.n	800aa9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f857 	bl	800aac8 <UART_WaitOnFlagUntilTimeout>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d03c      	beq.n	800aa9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e6      	bne.n	800aa20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3308      	adds	r3, #8
 800aa58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f023 0301 	bic.w	r3, r3, #1
 800aa68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3308      	adds	r3, #8
 800aa70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa72:	61fa      	str	r2, [r7, #28]
 800aa74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	69b9      	ldr	r1, [r7, #24]
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e5      	bne.n	800aa52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e012      	b.n	800aac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3758      	adds	r7, #88	@ 0x58
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	4613      	mov	r3, r2
 800aad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad8:	e04f      	b.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae0:	d04b      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae2:	f7f8 fd47 	bl	8003574 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d302      	bcc.n	800aaf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e04e      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0304 	and.w	r3, r3, #4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d037      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b80      	cmp	r3, #128	@ 0x80
 800ab0e:	d034      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b40      	cmp	r3, #64	@ 0x40
 800ab14:	d031      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d110      	bne.n	800ab46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2208      	movs	r2, #8
 800ab2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 f838 	bl	800aba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2208      	movs	r2, #8
 800ab36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e029      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab54:	d111      	bne.n	800ab7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f000 f81e 	bl	800aba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e00f      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69da      	ldr	r2, [r3, #28]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4013      	ands	r3, r2
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	bf0c      	ite	eq
 800ab8a:	2301      	moveq	r3, #1
 800ab8c:	2300      	movne	r3, #0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	461a      	mov	r2, r3
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d0a0      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b095      	sub	sp, #84	@ 0x54
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e6      	bne.n	800abaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3308      	adds	r3, #8
 800abe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	61fb      	str	r3, [r7, #28]
   return(result);
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abf2:	f023 0301 	bic.w	r3, r3, #1
 800abf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e3      	bne.n	800abdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d118      	bne.n	800ac4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	e853 3f00 	ldrex	r3, [r3]
 800ac28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f023 0310 	bic.w	r3, r3, #16
 800ac30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac3a:	61bb      	str	r3, [r7, #24]
 800ac3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6979      	ldr	r1, [r7, #20]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	613b      	str	r3, [r7, #16]
   return(result);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e6      	bne.n	800ac1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac62:	bf00      	nop
 800ac64:	3754      	adds	r7, #84	@ 0x54
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d101      	bne.n	800ac84 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac80:	2302      	movs	r3, #2
 800ac82:	e027      	b.n	800acd4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2224      	movs	r2, #36	@ 0x24
 800ac90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0201 	bic.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d101      	bne.n	800acf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acf4:	2302      	movs	r3, #2
 800acf6:	e02d      	b.n	800ad54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2224      	movs	r2, #36	@ 0x24
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0201 	bic.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f84f 	bl	800add8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e02d      	b.n	800add0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2224      	movs	r2, #36	@ 0x24
 800ad80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f811 	bl	800add8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d108      	bne.n	800adfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adf8:	e031      	b.n	800ae5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adfa:	2308      	movs	r3, #8
 800adfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adfe:	2308      	movs	r3, #8
 800ae00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	0e5b      	lsrs	r3, r3, #25
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	0f5b      	lsrs	r3, r3, #29
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 0307 	and.w	r3, r3, #7
 800ae20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	7b3a      	ldrb	r2, [r7, #12]
 800ae26:	4911      	ldr	r1, [pc, #68]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x94>)
 800ae28:	5c8a      	ldrb	r2, [r1, r2]
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae2e:	7b3a      	ldrb	r2, [r7, #12]
 800ae30:	490f      	ldr	r1, [pc, #60]	@ (800ae70 <UARTEx_SetNbDataToProcess+0x98>)
 800ae32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae34:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	7b7a      	ldrb	r2, [r7, #13]
 800ae44:	4909      	ldr	r1, [pc, #36]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x94>)
 800ae46:	5c8a      	ldrb	r2, [r1, r2]
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae4c:	7b7a      	ldrb	r2, [r7, #13]
 800ae4e:	4908      	ldr	r1, [pc, #32]	@ (800ae70 <UARTEx_SetNbDataToProcess+0x98>)
 800ae50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae5e:	bf00      	nop
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	0800fe48 	.word	0x0800fe48
 800ae70:	0800fe50 	.word	0x0800fe50

0800ae74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ae7c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ae80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	43db      	mvns	r3, r3
 800ae8a:	401a      	ands	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b083      	sub	sp, #12
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	641a      	str	r2, [r3, #64]	@ 0x40
 800aebc:	e00b      	b.n	800aed6 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d106      	bne.n	800aed2 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	641a      	str	r2, [r3, #64]	@ 0x40
 800aed0:	e001      	b.n	800aed6 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800aee4:	b084      	sub	sp, #16
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	f107 001c 	add.w	r0, r7, #28
 800aef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af00:	f023 0201 	bic.w	r2, r3, #1
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800af08:	2100      	movs	r1, #0
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff ffc7 	bl	800ae9e <USB_SetCurrentMode>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af26:	b004      	add	sp, #16
 800af28:	4770      	bx	lr

0800af2a <atoi>:
 800af2a:	220a      	movs	r2, #10
 800af2c:	2100      	movs	r1, #0
 800af2e:	f000 b87d 	b.w	800b02c <strtol>
	...

0800af34 <_strtol_l.constprop.0>:
 800af34:	2b24      	cmp	r3, #36	@ 0x24
 800af36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3a:	4686      	mov	lr, r0
 800af3c:	4690      	mov	r8, r2
 800af3e:	d801      	bhi.n	800af44 <_strtol_l.constprop.0+0x10>
 800af40:	2b01      	cmp	r3, #1
 800af42:	d106      	bne.n	800af52 <_strtol_l.constprop.0+0x1e>
 800af44:	f001 f860 	bl	800c008 <__errno>
 800af48:	2316      	movs	r3, #22
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	2000      	movs	r0, #0
 800af4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af52:	460d      	mov	r5, r1
 800af54:	4833      	ldr	r0, [pc, #204]	@ (800b024 <_strtol_l.constprop.0+0xf0>)
 800af56:	462a      	mov	r2, r5
 800af58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af5c:	5d06      	ldrb	r6, [r0, r4]
 800af5e:	f016 0608 	ands.w	r6, r6, #8
 800af62:	d1f8      	bne.n	800af56 <_strtol_l.constprop.0+0x22>
 800af64:	2c2d      	cmp	r4, #45	@ 0x2d
 800af66:	d12d      	bne.n	800afc4 <_strtol_l.constprop.0+0x90>
 800af68:	782c      	ldrb	r4, [r5, #0]
 800af6a:	2601      	movs	r6, #1
 800af6c:	1c95      	adds	r5, r2, #2
 800af6e:	f033 0210 	bics.w	r2, r3, #16
 800af72:	d109      	bne.n	800af88 <_strtol_l.constprop.0+0x54>
 800af74:	2c30      	cmp	r4, #48	@ 0x30
 800af76:	d12a      	bne.n	800afce <_strtol_l.constprop.0+0x9a>
 800af78:	782a      	ldrb	r2, [r5, #0]
 800af7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af7e:	2a58      	cmp	r2, #88	@ 0x58
 800af80:	d125      	bne.n	800afce <_strtol_l.constprop.0+0x9a>
 800af82:	786c      	ldrb	r4, [r5, #1]
 800af84:	2310      	movs	r3, #16
 800af86:	3502      	adds	r5, #2
 800af88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af8c:	2200      	movs	r2, #0
 800af8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af92:	4610      	mov	r0, r2
 800af94:	fbbc f9f3 	udiv	r9, ip, r3
 800af98:	fb03 ca19 	mls	sl, r3, r9, ip
 800af9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800afa0:	2f09      	cmp	r7, #9
 800afa2:	d81b      	bhi.n	800afdc <_strtol_l.constprop.0+0xa8>
 800afa4:	463c      	mov	r4, r7
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	dd27      	ble.n	800affa <_strtol_l.constprop.0+0xc6>
 800afaa:	1c57      	adds	r7, r2, #1
 800afac:	d007      	beq.n	800afbe <_strtol_l.constprop.0+0x8a>
 800afae:	4581      	cmp	r9, r0
 800afb0:	d320      	bcc.n	800aff4 <_strtol_l.constprop.0+0xc0>
 800afb2:	d101      	bne.n	800afb8 <_strtol_l.constprop.0+0x84>
 800afb4:	45a2      	cmp	sl, r4
 800afb6:	db1d      	blt.n	800aff4 <_strtol_l.constprop.0+0xc0>
 800afb8:	fb00 4003 	mla	r0, r0, r3, r4
 800afbc:	2201      	movs	r2, #1
 800afbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc2:	e7eb      	b.n	800af9c <_strtol_l.constprop.0+0x68>
 800afc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800afc6:	bf04      	itt	eq
 800afc8:	782c      	ldrbeq	r4, [r5, #0]
 800afca:	1c95      	addeq	r5, r2, #2
 800afcc:	e7cf      	b.n	800af6e <_strtol_l.constprop.0+0x3a>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1da      	bne.n	800af88 <_strtol_l.constprop.0+0x54>
 800afd2:	2c30      	cmp	r4, #48	@ 0x30
 800afd4:	bf0c      	ite	eq
 800afd6:	2308      	moveq	r3, #8
 800afd8:	230a      	movne	r3, #10
 800afda:	e7d5      	b.n	800af88 <_strtol_l.constprop.0+0x54>
 800afdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afe0:	2f19      	cmp	r7, #25
 800afe2:	d801      	bhi.n	800afe8 <_strtol_l.constprop.0+0xb4>
 800afe4:	3c37      	subs	r4, #55	@ 0x37
 800afe6:	e7de      	b.n	800afa6 <_strtol_l.constprop.0+0x72>
 800afe8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afec:	2f19      	cmp	r7, #25
 800afee:	d804      	bhi.n	800affa <_strtol_l.constprop.0+0xc6>
 800aff0:	3c57      	subs	r4, #87	@ 0x57
 800aff2:	e7d8      	b.n	800afa6 <_strtol_l.constprop.0+0x72>
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	e7e1      	b.n	800afbe <_strtol_l.constprop.0+0x8a>
 800affa:	1c53      	adds	r3, r2, #1
 800affc:	d108      	bne.n	800b010 <_strtol_l.constprop.0+0xdc>
 800affe:	2322      	movs	r3, #34	@ 0x22
 800b000:	4660      	mov	r0, ip
 800b002:	f8ce 3000 	str.w	r3, [lr]
 800b006:	f1b8 0f00 	cmp.w	r8, #0
 800b00a:	d0a0      	beq.n	800af4e <_strtol_l.constprop.0+0x1a>
 800b00c:	1e69      	subs	r1, r5, #1
 800b00e:	e006      	b.n	800b01e <_strtol_l.constprop.0+0xea>
 800b010:	b106      	cbz	r6, 800b014 <_strtol_l.constprop.0+0xe0>
 800b012:	4240      	negs	r0, r0
 800b014:	f1b8 0f00 	cmp.w	r8, #0
 800b018:	d099      	beq.n	800af4e <_strtol_l.constprop.0+0x1a>
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	d1f6      	bne.n	800b00c <_strtol_l.constprop.0+0xd8>
 800b01e:	f8c8 1000 	str.w	r1, [r8]
 800b022:	e794      	b.n	800af4e <_strtol_l.constprop.0+0x1a>
 800b024:	0800fe59 	.word	0x0800fe59

0800b028 <_strtol_r>:
 800b028:	f7ff bf84 	b.w	800af34 <_strtol_l.constprop.0>

0800b02c <strtol>:
 800b02c:	4613      	mov	r3, r2
 800b02e:	460a      	mov	r2, r1
 800b030:	4601      	mov	r1, r0
 800b032:	4802      	ldr	r0, [pc, #8]	@ (800b03c <strtol+0x10>)
 800b034:	6800      	ldr	r0, [r0, #0]
 800b036:	f7ff bf7d 	b.w	800af34 <_strtol_l.constprop.0>
 800b03a:	bf00      	nop
 800b03c:	20000034 	.word	0x20000034

0800b040 <__cvt>:
 800b040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	ec57 6b10 	vmov	r6, r7, d0
 800b048:	2f00      	cmp	r7, #0
 800b04a:	460c      	mov	r4, r1
 800b04c:	4619      	mov	r1, r3
 800b04e:	463b      	mov	r3, r7
 800b050:	bfb4      	ite	lt
 800b052:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b056:	2300      	movge	r3, #0
 800b058:	4691      	mov	r9, r2
 800b05a:	bfbf      	itttt	lt
 800b05c:	4632      	movlt	r2, r6
 800b05e:	461f      	movlt	r7, r3
 800b060:	232d      	movlt	r3, #45	@ 0x2d
 800b062:	4616      	movlt	r6, r2
 800b064:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b068:	700b      	strb	r3, [r1, #0]
 800b06a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b06c:	f023 0820 	bic.w	r8, r3, #32
 800b070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b074:	d005      	beq.n	800b082 <__cvt+0x42>
 800b076:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b07a:	d100      	bne.n	800b07e <__cvt+0x3e>
 800b07c:	3401      	adds	r4, #1
 800b07e:	2102      	movs	r1, #2
 800b080:	e000      	b.n	800b084 <__cvt+0x44>
 800b082:	2103      	movs	r1, #3
 800b084:	ab03      	add	r3, sp, #12
 800b086:	4622      	mov	r2, r4
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	ab02      	add	r3, sp, #8
 800b08c:	ec47 6b10 	vmov	d0, r6, r7
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4653      	mov	r3, sl
 800b094:	f001 f894 	bl	800c1c0 <_dtoa_r>
 800b098:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b09c:	4605      	mov	r5, r0
 800b09e:	d119      	bne.n	800b0d4 <__cvt+0x94>
 800b0a0:	f019 0f01 	tst.w	r9, #1
 800b0a4:	d00e      	beq.n	800b0c4 <__cvt+0x84>
 800b0a6:	eb00 0904 	add.w	r9, r0, r4
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 fd1d 	bl	8000af0 <__aeabi_dcmpeq>
 800b0b6:	b108      	cbz	r0, 800b0bc <__cvt+0x7c>
 800b0b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0bc:	2230      	movs	r2, #48	@ 0x30
 800b0be:	9b03      	ldr	r3, [sp, #12]
 800b0c0:	454b      	cmp	r3, r9
 800b0c2:	d31e      	bcc.n	800b102 <__cvt+0xc2>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ca:	1b5b      	subs	r3, r3, r5
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	b004      	add	sp, #16
 800b0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0d8:	eb00 0904 	add.w	r9, r0, r4
 800b0dc:	d1e5      	bne.n	800b0aa <__cvt+0x6a>
 800b0de:	7803      	ldrb	r3, [r0, #0]
 800b0e0:	2b30      	cmp	r3, #48	@ 0x30
 800b0e2:	d10a      	bne.n	800b0fa <__cvt+0xba>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fd00 	bl	8000af0 <__aeabi_dcmpeq>
 800b0f0:	b918      	cbnz	r0, 800b0fa <__cvt+0xba>
 800b0f2:	f1c4 0401 	rsb	r4, r4, #1
 800b0f6:	f8ca 4000 	str.w	r4, [sl]
 800b0fa:	f8da 3000 	ldr.w	r3, [sl]
 800b0fe:	4499      	add	r9, r3
 800b100:	e7d3      	b.n	800b0aa <__cvt+0x6a>
 800b102:	1c59      	adds	r1, r3, #1
 800b104:	9103      	str	r1, [sp, #12]
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	e7d9      	b.n	800b0be <__cvt+0x7e>

0800b10a <__exponent>:
 800b10a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10c:	2900      	cmp	r1, #0
 800b10e:	7002      	strb	r2, [r0, #0]
 800b110:	bfba      	itte	lt
 800b112:	4249      	neglt	r1, r1
 800b114:	232d      	movlt	r3, #45	@ 0x2d
 800b116:	232b      	movge	r3, #43	@ 0x2b
 800b118:	2909      	cmp	r1, #9
 800b11a:	7043      	strb	r3, [r0, #1]
 800b11c:	dd28      	ble.n	800b170 <__exponent+0x66>
 800b11e:	f10d 0307 	add.w	r3, sp, #7
 800b122:	270a      	movs	r7, #10
 800b124:	461d      	mov	r5, r3
 800b126:	461a      	mov	r2, r3
 800b128:	3b01      	subs	r3, #1
 800b12a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b12e:	fb07 1416 	mls	r4, r7, r6, r1
 800b132:	3430      	adds	r4, #48	@ 0x30
 800b134:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b138:	460c      	mov	r4, r1
 800b13a:	4631      	mov	r1, r6
 800b13c:	2c63      	cmp	r4, #99	@ 0x63
 800b13e:	dcf2      	bgt.n	800b126 <__exponent+0x1c>
 800b140:	3130      	adds	r1, #48	@ 0x30
 800b142:	1e94      	subs	r4, r2, #2
 800b144:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b148:	1c41      	adds	r1, r0, #1
 800b14a:	4623      	mov	r3, r4
 800b14c:	42ab      	cmp	r3, r5
 800b14e:	d30a      	bcc.n	800b166 <__exponent+0x5c>
 800b150:	f10d 0309 	add.w	r3, sp, #9
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	42ac      	cmp	r4, r5
 800b158:	bf88      	it	hi
 800b15a:	2300      	movhi	r3, #0
 800b15c:	3302      	adds	r3, #2
 800b15e:	4403      	add	r3, r0
 800b160:	1a18      	subs	r0, r3, r0
 800b162:	b003      	add	sp, #12
 800b164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b166:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b16a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b16e:	e7ed      	b.n	800b14c <__exponent+0x42>
 800b170:	2330      	movs	r3, #48	@ 0x30
 800b172:	3130      	adds	r1, #48	@ 0x30
 800b174:	7083      	strb	r3, [r0, #2]
 800b176:	1d03      	adds	r3, r0, #4
 800b178:	70c1      	strb	r1, [r0, #3]
 800b17a:	e7f1      	b.n	800b160 <__exponent+0x56>

0800b17c <_printf_float>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	b08d      	sub	sp, #52	@ 0x34
 800b182:	460c      	mov	r4, r1
 800b184:	4616      	mov	r6, r2
 800b186:	461f      	mov	r7, r3
 800b188:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b18c:	4605      	mov	r5, r0
 800b18e:	f000 fef1 	bl	800bf74 <_localeconv_r>
 800b192:	6803      	ldr	r3, [r0, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	f7f5 f87e 	bl	8000298 <strlen>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9005      	str	r0, [sp, #20]
 800b1a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1a6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1aa:	3307      	adds	r3, #7
 800b1ac:	f8d4 b000 	ldr.w	fp, [r4]
 800b1b0:	f023 0307 	bic.w	r3, r3, #7
 800b1b4:	f103 0208 	add.w	r2, r3, #8
 800b1b8:	f8c8 2000 	str.w	r2, [r8]
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b1c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1cc:	9307      	str	r3, [sp, #28]
 800b1ce:	4b9d      	ldr	r3, [pc, #628]	@ (800b444 <_printf_float+0x2c8>)
 800b1d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b1d8:	f7f5 fcbc 	bl	8000b54 <__aeabi_dcmpun>
 800b1dc:	bb70      	cbnz	r0, 800b23c <_printf_float+0xc0>
 800b1de:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e2:	4b98      	ldr	r3, [pc, #608]	@ (800b444 <_printf_float+0x2c8>)
 800b1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e8:	f7f5 fc96 	bl	8000b18 <__aeabi_dcmple>
 800b1ec:	bb30      	cbnz	r0, 800b23c <_printf_float+0xc0>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f5 fc85 	bl	8000b04 <__aeabi_dcmplt>
 800b1fa:	b110      	cbz	r0, 800b202 <_printf_float+0x86>
 800b1fc:	232d      	movs	r3, #45	@ 0x2d
 800b1fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b202:	4a91      	ldr	r2, [pc, #580]	@ (800b448 <_printf_float+0x2cc>)
 800b204:	4b91      	ldr	r3, [pc, #580]	@ (800b44c <_printf_float+0x2d0>)
 800b206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b20a:	bf94      	ite	ls
 800b20c:	4690      	movls	r8, r2
 800b20e:	4698      	movhi	r8, r3
 800b210:	2303      	movs	r3, #3
 800b212:	f04f 0900 	mov.w	r9, #0
 800b216:	6123      	str	r3, [r4, #16]
 800b218:	f02b 0304 	bic.w	r3, fp, #4
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	4633      	mov	r3, r6
 800b220:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	9700      	str	r7, [sp, #0]
 800b228:	f000 f9d2 	bl	800b5d0 <_printf_common>
 800b22c:	3001      	adds	r0, #1
 800b22e:	f040 808d 	bne.w	800b34c <_printf_float+0x1d0>
 800b232:	f04f 30ff 	mov.w	r0, #4294967295
 800b236:	b00d      	add	sp, #52	@ 0x34
 800b238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23c:	4642      	mov	r2, r8
 800b23e:	464b      	mov	r3, r9
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 fc86 	bl	8000b54 <__aeabi_dcmpun>
 800b248:	b140      	cbz	r0, 800b25c <_printf_float+0xe0>
 800b24a:	464b      	mov	r3, r9
 800b24c:	4a80      	ldr	r2, [pc, #512]	@ (800b450 <_printf_float+0x2d4>)
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfbc      	itt	lt
 800b252:	232d      	movlt	r3, #45	@ 0x2d
 800b254:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b258:	4b7e      	ldr	r3, [pc, #504]	@ (800b454 <_printf_float+0x2d8>)
 800b25a:	e7d4      	b.n	800b206 <_printf_float+0x8a>
 800b25c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b260:	6863      	ldr	r3, [r4, #4]
 800b262:	9206      	str	r2, [sp, #24]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	d13b      	bne.n	800b2e0 <_printf_float+0x164>
 800b268:	2306      	movs	r3, #6
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b270:	2300      	movs	r3, #0
 800b272:	4628      	mov	r0, r5
 800b274:	6022      	str	r2, [r4, #0]
 800b276:	9303      	str	r3, [sp, #12]
 800b278:	ab0a      	add	r3, sp, #40	@ 0x28
 800b27a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b27e:	ab09      	add	r3, sp, #36	@ 0x24
 800b280:	ec49 8b10 	vmov	d0, r8, r9
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b28a:	6861      	ldr	r1, [r4, #4]
 800b28c:	f7ff fed8 	bl	800b040 <__cvt>
 800b290:	9b06      	ldr	r3, [sp, #24]
 800b292:	4680      	mov	r8, r0
 800b294:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b296:	2b47      	cmp	r3, #71	@ 0x47
 800b298:	d129      	bne.n	800b2ee <_printf_float+0x172>
 800b29a:	1cc8      	adds	r0, r1, #3
 800b29c:	db02      	blt.n	800b2a4 <_printf_float+0x128>
 800b29e:	6863      	ldr	r3, [r4, #4]
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	dd41      	ble.n	800b328 <_printf_float+0x1ac>
 800b2a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2a8:	fa5f fa8a 	uxtb.w	sl, sl
 800b2ac:	3901      	subs	r1, #1
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2b6:	f7ff ff28 	bl	800b10a <__exponent>
 800b2ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2bc:	4681      	mov	r9, r0
 800b2be:	1813      	adds	r3, r2, r0
 800b2c0:	2a01      	cmp	r2, #1
 800b2c2:	6123      	str	r3, [r4, #16]
 800b2c4:	dc02      	bgt.n	800b2cc <_printf_float+0x150>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	07d2      	lsls	r2, r2, #31
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_float+0x154>
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	6123      	str	r3, [r4, #16]
 800b2d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0a2      	beq.n	800b21e <_printf_float+0xa2>
 800b2d8:	232d      	movs	r3, #45	@ 0x2d
 800b2da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2de:	e79e      	b.n	800b21e <_printf_float+0xa2>
 800b2e0:	9a06      	ldr	r2, [sp, #24]
 800b2e2:	2a47      	cmp	r2, #71	@ 0x47
 800b2e4:	d1c2      	bne.n	800b26c <_printf_float+0xf0>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1c0      	bne.n	800b26c <_printf_float+0xf0>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e7bd      	b.n	800b26a <_printf_float+0xee>
 800b2ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2f2:	d9db      	bls.n	800b2ac <_printf_float+0x130>
 800b2f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2f8:	d118      	bne.n	800b32c <_printf_float+0x1b0>
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	dd0b      	ble.n	800b318 <_printf_float+0x19c>
 800b300:	6121      	str	r1, [r4, #16]
 800b302:	b913      	cbnz	r3, 800b30a <_printf_float+0x18e>
 800b304:	6822      	ldr	r2, [r4, #0]
 800b306:	07d0      	lsls	r0, r2, #31
 800b308:	d502      	bpl.n	800b310 <_printf_float+0x194>
 800b30a:	3301      	adds	r3, #1
 800b30c:	440b      	add	r3, r1
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	f04f 0900 	mov.w	r9, #0
 800b314:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b316:	e7db      	b.n	800b2d0 <_printf_float+0x154>
 800b318:	b913      	cbnz	r3, 800b320 <_printf_float+0x1a4>
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	07d2      	lsls	r2, r2, #31
 800b31e:	d501      	bpl.n	800b324 <_printf_float+0x1a8>
 800b320:	3302      	adds	r3, #2
 800b322:	e7f4      	b.n	800b30e <_printf_float+0x192>
 800b324:	2301      	movs	r3, #1
 800b326:	e7f2      	b.n	800b30e <_printf_float+0x192>
 800b328:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32e:	4299      	cmp	r1, r3
 800b330:	db05      	blt.n	800b33e <_printf_float+0x1c2>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	6121      	str	r1, [r4, #16]
 800b336:	07d8      	lsls	r0, r3, #31
 800b338:	d5ea      	bpl.n	800b310 <_printf_float+0x194>
 800b33a:	1c4b      	adds	r3, r1, #1
 800b33c:	e7e7      	b.n	800b30e <_printf_float+0x192>
 800b33e:	2900      	cmp	r1, #0
 800b340:	bfd4      	ite	le
 800b342:	f1c1 0202 	rsble	r2, r1, #2
 800b346:	2201      	movgt	r2, #1
 800b348:	4413      	add	r3, r2
 800b34a:	e7e0      	b.n	800b30e <_printf_float+0x192>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	055a      	lsls	r2, r3, #21
 800b350:	d407      	bmi.n	800b362 <_printf_float+0x1e6>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	4642      	mov	r2, r8
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	d12b      	bne.n	800b3b8 <_printf_float+0x23c>
 800b360:	e767      	b.n	800b232 <_printf_float+0xb6>
 800b362:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b366:	f240 80dd 	bls.w	800b524 <_printf_float+0x3a8>
 800b36a:	2200      	movs	r2, #0
 800b36c:	2300      	movs	r3, #0
 800b36e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b372:	f7f5 fbbd 	bl	8000af0 <__aeabi_dcmpeq>
 800b376:	2800      	cmp	r0, #0
 800b378:	d033      	beq.n	800b3e2 <_printf_float+0x266>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4a36      	ldr	r2, [pc, #216]	@ (800b458 <_printf_float+0x2dc>)
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f af54 	beq.w	800b232 <_printf_float+0xb6>
 800b38a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b38e:	4543      	cmp	r3, r8
 800b390:	db02      	blt.n	800b398 <_printf_float+0x21c>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	07d8      	lsls	r0, r3, #31
 800b396:	d50f      	bpl.n	800b3b8 <_printf_float+0x23c>
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a0:	47b8      	blx	r7
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f43f af45 	beq.w	800b232 <_printf_float+0xb6>
 800b3a8:	f04f 0900 	mov.w	r9, #0
 800b3ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3b0:	f104 0a1a 	add.w	sl, r4, #26
 800b3b4:	45c8      	cmp	r8, r9
 800b3b6:	dc09      	bgt.n	800b3cc <_printf_float+0x250>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	079b      	lsls	r3, r3, #30
 800b3bc:	f100 8103 	bmi.w	800b5c6 <_printf_float+0x44a>
 800b3c0:	68e0      	ldr	r0, [r4, #12]
 800b3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c4:	4298      	cmp	r0, r3
 800b3c6:	bfb8      	it	lt
 800b3c8:	4618      	movlt	r0, r3
 800b3ca:	e734      	b.n	800b236 <_printf_float+0xba>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	4652      	mov	r2, sl
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	47b8      	blx	r7
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	f43f af2b 	beq.w	800b232 <_printf_float+0xb6>
 800b3dc:	f109 0901 	add.w	r9, r9, #1
 800b3e0:	e7e8      	b.n	800b3b4 <_printf_float+0x238>
 800b3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc39      	bgt.n	800b45c <_printf_float+0x2e0>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b458 <_printf_float+0x2dc>)
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af1d 	beq.w	800b232 <_printf_float+0xb6>
 800b3f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3fc:	ea59 0303 	orrs.w	r3, r9, r3
 800b400:	d102      	bne.n	800b408 <_printf_float+0x28c>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	07d9      	lsls	r1, r3, #31
 800b406:	d5d7      	bpl.n	800b3b8 <_printf_float+0x23c>
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b410:	47b8      	blx	r7
 800b412:	3001      	adds	r0, #1
 800b414:	f43f af0d 	beq.w	800b232 <_printf_float+0xb6>
 800b418:	f04f 0a00 	mov.w	sl, #0
 800b41c:	f104 0b1a 	add.w	fp, r4, #26
 800b420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b422:	425b      	negs	r3, r3
 800b424:	4553      	cmp	r3, sl
 800b426:	dc01      	bgt.n	800b42c <_printf_float+0x2b0>
 800b428:	464b      	mov	r3, r9
 800b42a:	e793      	b.n	800b354 <_printf_float+0x1d8>
 800b42c:	2301      	movs	r3, #1
 800b42e:	465a      	mov	r2, fp
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f aefb 	beq.w	800b232 <_printf_float+0xb6>
 800b43c:	f10a 0a01 	add.w	sl, sl, #1
 800b440:	e7ee      	b.n	800b420 <_printf_float+0x2a4>
 800b442:	bf00      	nop
 800b444:	7fefffff 	.word	0x7fefffff
 800b448:	0800ff59 	.word	0x0800ff59
 800b44c:	0800ff5d 	.word	0x0800ff5d
 800b450:	0800ff61 	.word	0x0800ff61
 800b454:	0800ff65 	.word	0x0800ff65
 800b458:	0800ff69 	.word	0x0800ff69
 800b45c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b45e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b462:	4553      	cmp	r3, sl
 800b464:	bfa8      	it	ge
 800b466:	4653      	movge	r3, sl
 800b468:	2b00      	cmp	r3, #0
 800b46a:	4699      	mov	r9, r3
 800b46c:	dc36      	bgt.n	800b4dc <_printf_float+0x360>
 800b46e:	f04f 0b00 	mov.w	fp, #0
 800b472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b476:	f104 021a 	add.w	r2, r4, #26
 800b47a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b47c:	9306      	str	r3, [sp, #24]
 800b47e:	eba3 0309 	sub.w	r3, r3, r9
 800b482:	455b      	cmp	r3, fp
 800b484:	dc31      	bgt.n	800b4ea <_printf_float+0x36e>
 800b486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b488:	459a      	cmp	sl, r3
 800b48a:	dc3a      	bgt.n	800b502 <_printf_float+0x386>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	07da      	lsls	r2, r3, #31
 800b490:	d437      	bmi.n	800b502 <_printf_float+0x386>
 800b492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b494:	ebaa 0903 	sub.w	r9, sl, r3
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	ebaa 0303 	sub.w	r3, sl, r3
 800b49e:	4599      	cmp	r9, r3
 800b4a0:	bfa8      	it	ge
 800b4a2:	4699      	movge	r9, r3
 800b4a4:	f1b9 0f00 	cmp.w	r9, #0
 800b4a8:	dc33      	bgt.n	800b512 <_printf_float+0x396>
 800b4aa:	f04f 0800 	mov.w	r8, #0
 800b4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4b2:	f104 0b1a 	add.w	fp, r4, #26
 800b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b8:	ebaa 0303 	sub.w	r3, sl, r3
 800b4bc:	eba3 0309 	sub.w	r3, r3, r9
 800b4c0:	4543      	cmp	r3, r8
 800b4c2:	f77f af79 	ble.w	800b3b8 <_printf_float+0x23c>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	465a      	mov	r2, fp
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	47b8      	blx	r7
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	f43f aeae 	beq.w	800b232 <_printf_float+0xb6>
 800b4d6:	f108 0801 	add.w	r8, r8, #1
 800b4da:	e7ec      	b.n	800b4b6 <_printf_float+0x33a>
 800b4dc:	4642      	mov	r2, r8
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d1c2      	bne.n	800b46e <_printf_float+0x2f2>
 800b4e8:	e6a3      	b.n	800b232 <_printf_float+0xb6>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	9206      	str	r2, [sp, #24]
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae9c 	beq.w	800b232 <_printf_float+0xb6>
 800b4fa:	f10b 0b01 	add.w	fp, fp, #1
 800b4fe:	9a06      	ldr	r2, [sp, #24]
 800b500:	e7bb      	b.n	800b47a <_printf_float+0x2fe>
 800b502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1c0      	bne.n	800b492 <_printf_float+0x316>
 800b510:	e68f      	b.n	800b232 <_printf_float+0xb6>
 800b512:	9a06      	ldr	r2, [sp, #24]
 800b514:	464b      	mov	r3, r9
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	4442      	add	r2, r8
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	d1c3      	bne.n	800b4aa <_printf_float+0x32e>
 800b522:	e686      	b.n	800b232 <_printf_float+0xb6>
 800b524:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b528:	f1ba 0f01 	cmp.w	sl, #1
 800b52c:	dc01      	bgt.n	800b532 <_printf_float+0x3b6>
 800b52e:	07db      	lsls	r3, r3, #31
 800b530:	d536      	bpl.n	800b5a0 <_printf_float+0x424>
 800b532:	2301      	movs	r3, #1
 800b534:	4642      	mov	r2, r8
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f ae78 	beq.w	800b232 <_printf_float+0xb6>
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b54a:	47b8      	blx	r7
 800b54c:	3001      	adds	r0, #1
 800b54e:	f43f ae70 	beq.w	800b232 <_printf_float+0xb6>
 800b552:	2200      	movs	r2, #0
 800b554:	2300      	movs	r3, #0
 800b556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b55a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b55e:	f7f5 fac7 	bl	8000af0 <__aeabi_dcmpeq>
 800b562:	b9c0      	cbnz	r0, 800b596 <_printf_float+0x41a>
 800b564:	4653      	mov	r3, sl
 800b566:	f108 0201 	add.w	r2, r8, #1
 800b56a:	4631      	mov	r1, r6
 800b56c:	4628      	mov	r0, r5
 800b56e:	47b8      	blx	r7
 800b570:	3001      	adds	r0, #1
 800b572:	d10c      	bne.n	800b58e <_printf_float+0x412>
 800b574:	e65d      	b.n	800b232 <_printf_float+0xb6>
 800b576:	2301      	movs	r3, #1
 800b578:	465a      	mov	r2, fp
 800b57a:	4631      	mov	r1, r6
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b8      	blx	r7
 800b580:	3001      	adds	r0, #1
 800b582:	f43f ae56 	beq.w	800b232 <_printf_float+0xb6>
 800b586:	f108 0801 	add.w	r8, r8, #1
 800b58a:	45d0      	cmp	r8, sl
 800b58c:	dbf3      	blt.n	800b576 <_printf_float+0x3fa>
 800b58e:	464b      	mov	r3, r9
 800b590:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b594:	e6df      	b.n	800b356 <_printf_float+0x1da>
 800b596:	f04f 0800 	mov.w	r8, #0
 800b59a:	f104 0b1a 	add.w	fp, r4, #26
 800b59e:	e7f4      	b.n	800b58a <_printf_float+0x40e>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4642      	mov	r2, r8
 800b5a4:	e7e1      	b.n	800b56a <_printf_float+0x3ee>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	464a      	mov	r2, r9
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	47b8      	blx	r7
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f43f ae3e 	beq.w	800b232 <_printf_float+0xb6>
 800b5b6:	f108 0801 	add.w	r8, r8, #1
 800b5ba:	68e3      	ldr	r3, [r4, #12]
 800b5bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5be:	1a5b      	subs	r3, r3, r1
 800b5c0:	4543      	cmp	r3, r8
 800b5c2:	dcf0      	bgt.n	800b5a6 <_printf_float+0x42a>
 800b5c4:	e6fc      	b.n	800b3c0 <_printf_float+0x244>
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	f104 0919 	add.w	r9, r4, #25
 800b5ce:	e7f4      	b.n	800b5ba <_printf_float+0x43e>

0800b5d0 <_printf_common>:
 800b5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	4698      	mov	r8, r3
 800b5d8:	688a      	ldr	r2, [r1, #8]
 800b5da:	4607      	mov	r7, r0
 800b5dc:	690b      	ldr	r3, [r1, #16]
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	bfb8      	it	lt
 800b5e8:	4613      	movlt	r3, r2
 800b5ea:	6033      	str	r3, [r6, #0]
 800b5ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5f0:	b10a      	cbz	r2, 800b5f6 <_printf_common+0x26>
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	6033      	str	r3, [r6, #0]
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	0699      	lsls	r1, r3, #26
 800b5fa:	bf42      	ittt	mi
 800b5fc:	6833      	ldrmi	r3, [r6, #0]
 800b5fe:	3302      	addmi	r3, #2
 800b600:	6033      	strmi	r3, [r6, #0]
 800b602:	6825      	ldr	r5, [r4, #0]
 800b604:	f015 0506 	ands.w	r5, r5, #6
 800b608:	d106      	bne.n	800b618 <_printf_common+0x48>
 800b60a:	f104 0a19 	add.w	sl, r4, #25
 800b60e:	68e3      	ldr	r3, [r4, #12]
 800b610:	6832      	ldr	r2, [r6, #0]
 800b612:	1a9b      	subs	r3, r3, r2
 800b614:	42ab      	cmp	r3, r5
 800b616:	dc2b      	bgt.n	800b670 <_printf_common+0xa0>
 800b618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	3b00      	subs	r3, #0
 800b620:	bf18      	it	ne
 800b622:	2301      	movne	r3, #1
 800b624:	0692      	lsls	r2, r2, #26
 800b626:	d430      	bmi.n	800b68a <_printf_common+0xba>
 800b628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b62c:	4641      	mov	r1, r8
 800b62e:	4638      	mov	r0, r7
 800b630:	47c8      	blx	r9
 800b632:	3001      	adds	r0, #1
 800b634:	d023      	beq.n	800b67e <_printf_common+0xae>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	341a      	adds	r4, #26
 800b63a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b63e:	f003 0306 	and.w	r3, r3, #6
 800b642:	2b04      	cmp	r3, #4
 800b644:	bf0a      	itet	eq
 800b646:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b64a:	2500      	movne	r5, #0
 800b64c:	6833      	ldreq	r3, [r6, #0]
 800b64e:	f04f 0600 	mov.w	r6, #0
 800b652:	bf08      	it	eq
 800b654:	1aed      	subeq	r5, r5, r3
 800b656:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b65a:	bf08      	it	eq
 800b65c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b660:	4293      	cmp	r3, r2
 800b662:	bfc4      	itt	gt
 800b664:	1a9b      	subgt	r3, r3, r2
 800b666:	18ed      	addgt	r5, r5, r3
 800b668:	42b5      	cmp	r5, r6
 800b66a:	d11a      	bne.n	800b6a2 <_printf_common+0xd2>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e008      	b.n	800b682 <_printf_common+0xb2>
 800b670:	2301      	movs	r3, #1
 800b672:	4652      	mov	r2, sl
 800b674:	4641      	mov	r1, r8
 800b676:	4638      	mov	r0, r7
 800b678:	47c8      	blx	r9
 800b67a:	3001      	adds	r0, #1
 800b67c:	d103      	bne.n	800b686 <_printf_common+0xb6>
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b686:	3501      	adds	r5, #1
 800b688:	e7c1      	b.n	800b60e <_printf_common+0x3e>
 800b68a:	18e1      	adds	r1, r4, r3
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	2030      	movs	r0, #48	@ 0x30
 800b690:	3302      	adds	r3, #2
 800b692:	4422      	add	r2, r4
 800b694:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b69c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6a0:	e7c2      	b.n	800b628 <_printf_common+0x58>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	47c8      	blx	r9
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d0e6      	beq.n	800b67e <_printf_common+0xae>
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	e7d9      	b.n	800b668 <_printf_common+0x98>

0800b6b4 <_printf_i>:
 800b6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	7e0f      	ldrb	r7, [r1, #24]
 800b6ba:	4691      	mov	r9, r2
 800b6bc:	4680      	mov	r8, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	2f78      	cmp	r7, #120	@ 0x78
 800b6c2:	469a      	mov	sl, r3
 800b6c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6ca:	d807      	bhi.n	800b6dc <_printf_i+0x28>
 800b6cc:	2f62      	cmp	r7, #98	@ 0x62
 800b6ce:	d80a      	bhi.n	800b6e6 <_printf_i+0x32>
 800b6d0:	2f00      	cmp	r7, #0
 800b6d2:	f000 80d2 	beq.w	800b87a <_printf_i+0x1c6>
 800b6d6:	2f58      	cmp	r7, #88	@ 0x58
 800b6d8:	f000 80b9 	beq.w	800b84e <_printf_i+0x19a>
 800b6dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6e4:	e03a      	b.n	800b75c <_printf_i+0xa8>
 800b6e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6ea:	2b15      	cmp	r3, #21
 800b6ec:	d8f6      	bhi.n	800b6dc <_printf_i+0x28>
 800b6ee:	a101      	add	r1, pc, #4	@ (adr r1, 800b6f4 <_printf_i+0x40>)
 800b6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6f4:	0800b74d 	.word	0x0800b74d
 800b6f8:	0800b761 	.word	0x0800b761
 800b6fc:	0800b6dd 	.word	0x0800b6dd
 800b700:	0800b6dd 	.word	0x0800b6dd
 800b704:	0800b6dd 	.word	0x0800b6dd
 800b708:	0800b6dd 	.word	0x0800b6dd
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b6dd 	.word	0x0800b6dd
 800b714:	0800b6dd 	.word	0x0800b6dd
 800b718:	0800b6dd 	.word	0x0800b6dd
 800b71c:	0800b6dd 	.word	0x0800b6dd
 800b720:	0800b861 	.word	0x0800b861
 800b724:	0800b78b 	.word	0x0800b78b
 800b728:	0800b81b 	.word	0x0800b81b
 800b72c:	0800b6dd 	.word	0x0800b6dd
 800b730:	0800b6dd 	.word	0x0800b6dd
 800b734:	0800b883 	.word	0x0800b883
 800b738:	0800b6dd 	.word	0x0800b6dd
 800b73c:	0800b78b 	.word	0x0800b78b
 800b740:	0800b6dd 	.word	0x0800b6dd
 800b744:	0800b6dd 	.word	0x0800b6dd
 800b748:	0800b823 	.word	0x0800b823
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	1d1a      	adds	r2, r3, #4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6032      	str	r2, [r6, #0]
 800b754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b75c:	2301      	movs	r3, #1
 800b75e:	e09d      	b.n	800b89c <_printf_i+0x1e8>
 800b760:	6833      	ldr	r3, [r6, #0]
 800b762:	6820      	ldr	r0, [r4, #0]
 800b764:	1d19      	adds	r1, r3, #4
 800b766:	6031      	str	r1, [r6, #0]
 800b768:	0606      	lsls	r6, r0, #24
 800b76a:	d501      	bpl.n	800b770 <_printf_i+0xbc>
 800b76c:	681d      	ldr	r5, [r3, #0]
 800b76e:	e003      	b.n	800b778 <_printf_i+0xc4>
 800b770:	0645      	lsls	r5, r0, #25
 800b772:	d5fb      	bpl.n	800b76c <_printf_i+0xb8>
 800b774:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b778:	2d00      	cmp	r5, #0
 800b77a:	da03      	bge.n	800b784 <_printf_i+0xd0>
 800b77c:	232d      	movs	r3, #45	@ 0x2d
 800b77e:	426d      	negs	r5, r5
 800b780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b784:	4859      	ldr	r0, [pc, #356]	@ (800b8ec <_printf_i+0x238>)
 800b786:	230a      	movs	r3, #10
 800b788:	e011      	b.n	800b7ae <_printf_i+0xfa>
 800b78a:	6821      	ldr	r1, [r4, #0]
 800b78c:	6833      	ldr	r3, [r6, #0]
 800b78e:	0608      	lsls	r0, r1, #24
 800b790:	f853 5b04 	ldr.w	r5, [r3], #4
 800b794:	d402      	bmi.n	800b79c <_printf_i+0xe8>
 800b796:	0649      	lsls	r1, r1, #25
 800b798:	bf48      	it	mi
 800b79a:	b2ad      	uxthmi	r5, r5
 800b79c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	4852      	ldr	r0, [pc, #328]	@ (800b8ec <_printf_i+0x238>)
 800b7a2:	bf14      	ite	ne
 800b7a4:	230a      	movne	r3, #10
 800b7a6:	2308      	moveq	r3, #8
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ae:	6866      	ldr	r6, [r4, #4]
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	60a6      	str	r6, [r4, #8]
 800b7b4:	bfa2      	ittt	ge
 800b7b6:	6821      	ldrge	r1, [r4, #0]
 800b7b8:	f021 0104 	bicge.w	r1, r1, #4
 800b7bc:	6021      	strge	r1, [r4, #0]
 800b7be:	b90d      	cbnz	r5, 800b7c4 <_printf_i+0x110>
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	d04b      	beq.n	800b85c <_printf_i+0x1a8>
 800b7c4:	4616      	mov	r6, r2
 800b7c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b7ce:	5dc7      	ldrb	r7, [r0, r7]
 800b7d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7d4:	462f      	mov	r7, r5
 800b7d6:	460d      	mov	r5, r1
 800b7d8:	42bb      	cmp	r3, r7
 800b7da:	d9f4      	bls.n	800b7c6 <_printf_i+0x112>
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d10b      	bne.n	800b7f8 <_printf_i+0x144>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	07df      	lsls	r7, r3, #31
 800b7e4:	d508      	bpl.n	800b7f8 <_printf_i+0x144>
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	4299      	cmp	r1, r3
 800b7ec:	bfde      	ittt	le
 800b7ee:	2330      	movle	r3, #48	@ 0x30
 800b7f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7f8:	1b92      	subs	r2, r2, r6
 800b7fa:	6122      	str	r2, [r4, #16]
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	aa03      	add	r2, sp, #12
 800b800:	4621      	mov	r1, r4
 800b802:	4640      	mov	r0, r8
 800b804:	f8cd a000 	str.w	sl, [sp]
 800b808:	f7ff fee2 	bl	800b5d0 <_printf_common>
 800b80c:	3001      	adds	r0, #1
 800b80e:	d14a      	bne.n	800b8a6 <_printf_i+0x1f2>
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	b004      	add	sp, #16
 800b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	f043 0320 	orr.w	r3, r3, #32
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	2778      	movs	r7, #120	@ 0x78
 800b824:	4832      	ldr	r0, [pc, #200]	@ (800b8f0 <_printf_i+0x23c>)
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b82c:	061f      	lsls	r7, r3, #24
 800b82e:	6831      	ldr	r1, [r6, #0]
 800b830:	f851 5b04 	ldr.w	r5, [r1], #4
 800b834:	d402      	bmi.n	800b83c <_printf_i+0x188>
 800b836:	065f      	lsls	r7, r3, #25
 800b838:	bf48      	it	mi
 800b83a:	b2ad      	uxthmi	r5, r5
 800b83c:	6031      	str	r1, [r6, #0]
 800b83e:	07d9      	lsls	r1, r3, #31
 800b840:	bf44      	itt	mi
 800b842:	f043 0320 	orrmi.w	r3, r3, #32
 800b846:	6023      	strmi	r3, [r4, #0]
 800b848:	b11d      	cbz	r5, 800b852 <_printf_i+0x19e>
 800b84a:	2310      	movs	r3, #16
 800b84c:	e7ac      	b.n	800b7a8 <_printf_i+0xf4>
 800b84e:	4827      	ldr	r0, [pc, #156]	@ (800b8ec <_printf_i+0x238>)
 800b850:	e7e9      	b.n	800b826 <_printf_i+0x172>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	f023 0320 	bic.w	r3, r3, #32
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	e7f6      	b.n	800b84a <_printf_i+0x196>
 800b85c:	4616      	mov	r6, r2
 800b85e:	e7bd      	b.n	800b7dc <_printf_i+0x128>
 800b860:	6833      	ldr	r3, [r6, #0]
 800b862:	6825      	ldr	r5, [r4, #0]
 800b864:	1d18      	adds	r0, r3, #4
 800b866:	6961      	ldr	r1, [r4, #20]
 800b868:	6030      	str	r0, [r6, #0]
 800b86a:	062e      	lsls	r6, r5, #24
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	d501      	bpl.n	800b874 <_printf_i+0x1c0>
 800b870:	6019      	str	r1, [r3, #0]
 800b872:	e002      	b.n	800b87a <_printf_i+0x1c6>
 800b874:	0668      	lsls	r0, r5, #25
 800b876:	d5fb      	bpl.n	800b870 <_printf_i+0x1bc>
 800b878:	8019      	strh	r1, [r3, #0]
 800b87a:	2300      	movs	r3, #0
 800b87c:	4616      	mov	r6, r2
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	e7bc      	b.n	800b7fc <_printf_i+0x148>
 800b882:	6833      	ldr	r3, [r6, #0]
 800b884:	2100      	movs	r1, #0
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	6032      	str	r2, [r6, #0]
 800b88a:	681e      	ldr	r6, [r3, #0]
 800b88c:	6862      	ldr	r2, [r4, #4]
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 fbe7 	bl	800c062 <memchr>
 800b894:	b108      	cbz	r0, 800b89a <_printf_i+0x1e6>
 800b896:	1b80      	subs	r0, r0, r6
 800b898:	6060      	str	r0, [r4, #4]
 800b89a:	6863      	ldr	r3, [r4, #4]
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8a4:	e7aa      	b.n	800b7fc <_printf_i+0x148>
 800b8a6:	6923      	ldr	r3, [r4, #16]
 800b8a8:	4632      	mov	r2, r6
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	47d0      	blx	sl
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d0ad      	beq.n	800b810 <_printf_i+0x15c>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	079b      	lsls	r3, r3, #30
 800b8b8:	d413      	bmi.n	800b8e2 <_printf_i+0x22e>
 800b8ba:	68e0      	ldr	r0, [r4, #12]
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	4298      	cmp	r0, r3
 800b8c0:	bfb8      	it	lt
 800b8c2:	4618      	movlt	r0, r3
 800b8c4:	e7a6      	b.n	800b814 <_printf_i+0x160>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	47d0      	blx	sl
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d09d      	beq.n	800b810 <_printf_i+0x15c>
 800b8d4:	3501      	adds	r5, #1
 800b8d6:	68e3      	ldr	r3, [r4, #12]
 800b8d8:	9903      	ldr	r1, [sp, #12]
 800b8da:	1a5b      	subs	r3, r3, r1
 800b8dc:	42ab      	cmp	r3, r5
 800b8de:	dcf2      	bgt.n	800b8c6 <_printf_i+0x212>
 800b8e0:	e7eb      	b.n	800b8ba <_printf_i+0x206>
 800b8e2:	2500      	movs	r5, #0
 800b8e4:	f104 0619 	add.w	r6, r4, #25
 800b8e8:	e7f5      	b.n	800b8d6 <_printf_i+0x222>
 800b8ea:	bf00      	nop
 800b8ec:	0800ff6b 	.word	0x0800ff6b
 800b8f0:	0800ff7c 	.word	0x0800ff7c

0800b8f4 <_scanf_float>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	b087      	sub	sp, #28
 800b8fa:	4617      	mov	r7, r2
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	9303      	str	r3, [sp, #12]
 800b902:	688b      	ldr	r3, [r1, #8]
 800b904:	1e5a      	subs	r2, r3, #1
 800b906:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b90a:	460a      	mov	r2, r1
 800b90c:	bf89      	itett	hi
 800b90e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b912:	f04f 0b00 	movls.w	fp, #0
 800b916:	eb03 0b05 	addhi.w	fp, r3, r5
 800b91a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b91e:	f04f 0500 	mov.w	r5, #0
 800b922:	bf88      	it	hi
 800b924:	608b      	strhi	r3, [r1, #8]
 800b926:	680b      	ldr	r3, [r1, #0]
 800b928:	46aa      	mov	sl, r5
 800b92a:	46a9      	mov	r9, r5
 800b92c:	9502      	str	r5, [sp, #8]
 800b92e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b932:	f842 3b1c 	str.w	r3, [r2], #28
 800b936:	4616      	mov	r6, r2
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b93e:	68a2      	ldr	r2, [r4, #8]
 800b940:	b152      	cbz	r2, 800b958 <_scanf_float+0x64>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b4e      	cmp	r3, #78	@ 0x4e
 800b948:	d864      	bhi.n	800ba14 <_scanf_float+0x120>
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	d83c      	bhi.n	800b9c8 <_scanf_float+0xd4>
 800b94e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b952:	b2c8      	uxtb	r0, r1
 800b954:	280e      	cmp	r0, #14
 800b956:	d93a      	bls.n	800b9ce <_scanf_float+0xda>
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	d003      	beq.n	800b966 <_scanf_float+0x72>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b96a:	f1ba 0f01 	cmp.w	sl, #1
 800b96e:	f200 8117 	bhi.w	800bba0 <_scanf_float+0x2ac>
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	429e      	cmp	r6, r3
 800b976:	f200 8108 	bhi.w	800bb8a <_scanf_float+0x296>
 800b97a:	2001      	movs	r0, #1
 800b97c:	b007      	add	sp, #28
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b982:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b986:	2a0d      	cmp	r2, #13
 800b988:	d8e6      	bhi.n	800b958 <_scanf_float+0x64>
 800b98a:	a101      	add	r1, pc, #4	@ (adr r1, 800b990 <_scanf_float+0x9c>)
 800b98c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b990:	0800bad7 	.word	0x0800bad7
 800b994:	0800b959 	.word	0x0800b959
 800b998:	0800b959 	.word	0x0800b959
 800b99c:	0800b959 	.word	0x0800b959
 800b9a0:	0800bb37 	.word	0x0800bb37
 800b9a4:	0800bb0f 	.word	0x0800bb0f
 800b9a8:	0800b959 	.word	0x0800b959
 800b9ac:	0800b959 	.word	0x0800b959
 800b9b0:	0800bae5 	.word	0x0800bae5
 800b9b4:	0800b959 	.word	0x0800b959
 800b9b8:	0800b959 	.word	0x0800b959
 800b9bc:	0800b959 	.word	0x0800b959
 800b9c0:	0800b959 	.word	0x0800b959
 800b9c4:	0800ba9d 	.word	0x0800ba9d
 800b9c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b9cc:	e7db      	b.n	800b986 <_scanf_float+0x92>
 800b9ce:	290e      	cmp	r1, #14
 800b9d0:	d8c2      	bhi.n	800b958 <_scanf_float+0x64>
 800b9d2:	a001      	add	r0, pc, #4	@ (adr r0, 800b9d8 <_scanf_float+0xe4>)
 800b9d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b9d8:	0800ba8d 	.word	0x0800ba8d
 800b9dc:	0800b959 	.word	0x0800b959
 800b9e0:	0800ba8d 	.word	0x0800ba8d
 800b9e4:	0800bb23 	.word	0x0800bb23
 800b9e8:	0800b959 	.word	0x0800b959
 800b9ec:	0800ba35 	.word	0x0800ba35
 800b9f0:	0800ba73 	.word	0x0800ba73
 800b9f4:	0800ba73 	.word	0x0800ba73
 800b9f8:	0800ba73 	.word	0x0800ba73
 800b9fc:	0800ba73 	.word	0x0800ba73
 800ba00:	0800ba73 	.word	0x0800ba73
 800ba04:	0800ba73 	.word	0x0800ba73
 800ba08:	0800ba73 	.word	0x0800ba73
 800ba0c:	0800ba73 	.word	0x0800ba73
 800ba10:	0800ba73 	.word	0x0800ba73
 800ba14:	2b6e      	cmp	r3, #110	@ 0x6e
 800ba16:	d809      	bhi.n	800ba2c <_scanf_float+0x138>
 800ba18:	2b60      	cmp	r3, #96	@ 0x60
 800ba1a:	d8b2      	bhi.n	800b982 <_scanf_float+0x8e>
 800ba1c:	2b54      	cmp	r3, #84	@ 0x54
 800ba1e:	d07b      	beq.n	800bb18 <_scanf_float+0x224>
 800ba20:	2b59      	cmp	r3, #89	@ 0x59
 800ba22:	d199      	bne.n	800b958 <_scanf_float+0x64>
 800ba24:	2d07      	cmp	r5, #7
 800ba26:	d197      	bne.n	800b958 <_scanf_float+0x64>
 800ba28:	2508      	movs	r5, #8
 800ba2a:	e02c      	b.n	800ba86 <_scanf_float+0x192>
 800ba2c:	2b74      	cmp	r3, #116	@ 0x74
 800ba2e:	d073      	beq.n	800bb18 <_scanf_float+0x224>
 800ba30:	2b79      	cmp	r3, #121	@ 0x79
 800ba32:	e7f6      	b.n	800ba22 <_scanf_float+0x12e>
 800ba34:	6821      	ldr	r1, [r4, #0]
 800ba36:	05c8      	lsls	r0, r1, #23
 800ba38:	d51b      	bpl.n	800ba72 <_scanf_float+0x17e>
 800ba3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ba3e:	f109 0901 	add.w	r9, r9, #1
 800ba42:	6021      	str	r1, [r4, #0]
 800ba44:	f1bb 0f00 	cmp.w	fp, #0
 800ba48:	d003      	beq.n	800ba52 <_scanf_float+0x15e>
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba50:	60a2      	str	r2, [r4, #8]
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	60a3      	str	r3, [r4, #8]
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	f340 8087 	ble.w	800bb78 <_scanf_float+0x284>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	e765      	b.n	800b93e <_scanf_float+0x4a>
 800ba72:	eb1a 0105 	adds.w	r1, sl, r5
 800ba76:	f47f af6f 	bne.w	800b958 <_scanf_float+0x64>
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	468a      	mov	sl, r1
 800ba80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba84:	6022      	str	r2, [r4, #0]
 800ba86:	f806 3b01 	strb.w	r3, [r6], #1
 800ba8a:	e7e2      	b.n	800ba52 <_scanf_float+0x15e>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	0610      	lsls	r0, r2, #24
 800ba90:	f57f af62 	bpl.w	800b958 <_scanf_float+0x64>
 800ba94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba98:	6022      	str	r2, [r4, #0]
 800ba9a:	e7f4      	b.n	800ba86 <_scanf_float+0x192>
 800ba9c:	f1ba 0f00 	cmp.w	sl, #0
 800baa0:	d10e      	bne.n	800bac0 <_scanf_float+0x1cc>
 800baa2:	f1b9 0f00 	cmp.w	r9, #0
 800baa6:	d10e      	bne.n	800bac6 <_scanf_float+0x1d2>
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800baae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bab2:	d108      	bne.n	800bac6 <_scanf_float+0x1d2>
 800bab4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bab8:	f04f 0a01 	mov.w	sl, #1
 800babc:	6022      	str	r2, [r4, #0]
 800babe:	e7e2      	b.n	800ba86 <_scanf_float+0x192>
 800bac0:	f1ba 0f02 	cmp.w	sl, #2
 800bac4:	d055      	beq.n	800bb72 <_scanf_float+0x27e>
 800bac6:	2d01      	cmp	r5, #1
 800bac8:	d002      	beq.n	800bad0 <_scanf_float+0x1dc>
 800baca:	2d04      	cmp	r5, #4
 800bacc:	f47f af44 	bne.w	800b958 <_scanf_float+0x64>
 800bad0:	3501      	adds	r5, #1
 800bad2:	b2ed      	uxtb	r5, r5
 800bad4:	e7d7      	b.n	800ba86 <_scanf_float+0x192>
 800bad6:	f1ba 0f01 	cmp.w	sl, #1
 800bada:	f47f af3d 	bne.w	800b958 <_scanf_float+0x64>
 800bade:	f04f 0a02 	mov.w	sl, #2
 800bae2:	e7d0      	b.n	800ba86 <_scanf_float+0x192>
 800bae4:	b97d      	cbnz	r5, 800bb06 <_scanf_float+0x212>
 800bae6:	f1b9 0f00 	cmp.w	r9, #0
 800baea:	f47f af38 	bne.w	800b95e <_scanf_float+0x6a>
 800baee:	6822      	ldr	r2, [r4, #0]
 800baf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800baf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800baf8:	f040 8107 	bne.w	800bd0a <_scanf_float+0x416>
 800bafc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb00:	2501      	movs	r5, #1
 800bb02:	6022      	str	r2, [r4, #0]
 800bb04:	e7bf      	b.n	800ba86 <_scanf_float+0x192>
 800bb06:	2d03      	cmp	r5, #3
 800bb08:	d0e2      	beq.n	800bad0 <_scanf_float+0x1dc>
 800bb0a:	2d05      	cmp	r5, #5
 800bb0c:	e7de      	b.n	800bacc <_scanf_float+0x1d8>
 800bb0e:	2d02      	cmp	r5, #2
 800bb10:	f47f af22 	bne.w	800b958 <_scanf_float+0x64>
 800bb14:	2503      	movs	r5, #3
 800bb16:	e7b6      	b.n	800ba86 <_scanf_float+0x192>
 800bb18:	2d06      	cmp	r5, #6
 800bb1a:	f47f af1d 	bne.w	800b958 <_scanf_float+0x64>
 800bb1e:	2507      	movs	r5, #7
 800bb20:	e7b1      	b.n	800ba86 <_scanf_float+0x192>
 800bb22:	6822      	ldr	r2, [r4, #0]
 800bb24:	0591      	lsls	r1, r2, #22
 800bb26:	f57f af17 	bpl.w	800b958 <_scanf_float+0x64>
 800bb2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bb2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb32:	6022      	str	r2, [r4, #0]
 800bb34:	e7a7      	b.n	800ba86 <_scanf_float+0x192>
 800bb36:	6822      	ldr	r2, [r4, #0]
 800bb38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bb3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb40:	d006      	beq.n	800bb50 <_scanf_float+0x25c>
 800bb42:	0550      	lsls	r0, r2, #21
 800bb44:	f57f af08 	bpl.w	800b958 <_scanf_float+0x64>
 800bb48:	f1b9 0f00 	cmp.w	r9, #0
 800bb4c:	f000 80dd 	beq.w	800bd0a <_scanf_float+0x416>
 800bb50:	0591      	lsls	r1, r2, #22
 800bb52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb56:	bf58      	it	pl
 800bb58:	9902      	ldrpl	r1, [sp, #8]
 800bb5a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb5e:	bf58      	it	pl
 800bb60:	eba9 0101 	subpl.w	r1, r9, r1
 800bb64:	6022      	str	r2, [r4, #0]
 800bb66:	f04f 0900 	mov.w	r9, #0
 800bb6a:	bf58      	it	pl
 800bb6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb70:	e789      	b.n	800ba86 <_scanf_float+0x192>
 800bb72:	f04f 0a03 	mov.w	sl, #3
 800bb76:	e786      	b.n	800ba86 <_scanf_float+0x192>
 800bb78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	4640      	mov	r0, r8
 800bb80:	4798      	blx	r3
 800bb82:	2800      	cmp	r0, #0
 800bb84:	f43f aedb 	beq.w	800b93e <_scanf_float+0x4a>
 800bb88:	e6e6      	b.n	800b958 <_scanf_float+0x64>
 800bb8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb8e:	463a      	mov	r2, r7
 800bb90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb94:	4640      	mov	r0, r8
 800bb96:	4798      	blx	r3
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	e6e8      	b.n	800b972 <_scanf_float+0x7e>
 800bba0:	1e6b      	subs	r3, r5, #1
 800bba2:	2b06      	cmp	r3, #6
 800bba4:	d824      	bhi.n	800bbf0 <_scanf_float+0x2fc>
 800bba6:	2d02      	cmp	r5, #2
 800bba8:	d836      	bhi.n	800bc18 <_scanf_float+0x324>
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	429e      	cmp	r6, r3
 800bbae:	f67f aee4 	bls.w	800b97a <_scanf_float+0x86>
 800bbb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbb6:	463a      	mov	r2, r7
 800bbb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbbc:	4640      	mov	r0, r8
 800bbbe:	4798      	blx	r3
 800bbc0:	6923      	ldr	r3, [r4, #16]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	e7f0      	b.n	800bbaa <_scanf_float+0x2b6>
 800bbc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbcc:	463a      	mov	r2, r7
 800bbce:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	4798      	blx	r3
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	6123      	str	r3, [r4, #16]
 800bbdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbe0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbe4:	f1ba 0f02 	cmp.w	sl, #2
 800bbe8:	d1ee      	bne.n	800bbc8 <_scanf_float+0x2d4>
 800bbea:	3d03      	subs	r5, #3
 800bbec:	b2ed      	uxtb	r5, r5
 800bbee:	1b76      	subs	r6, r6, r5
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	05da      	lsls	r2, r3, #23
 800bbf4:	d52f      	bpl.n	800bc56 <_scanf_float+0x362>
 800bbf6:	055b      	lsls	r3, r3, #21
 800bbf8:	d511      	bpl.n	800bc1e <_scanf_float+0x32a>
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	429e      	cmp	r6, r3
 800bbfe:	f67f aebc 	bls.w	800b97a <_scanf_float+0x86>
 800bc02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc06:	463a      	mov	r2, r7
 800bc08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4798      	blx	r3
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	6123      	str	r3, [r4, #16]
 800bc16:	e7f0      	b.n	800bbfa <_scanf_float+0x306>
 800bc18:	46aa      	mov	sl, r5
 800bc1a:	46b3      	mov	fp, r6
 800bc1c:	e7de      	b.n	800bbdc <_scanf_float+0x2e8>
 800bc1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc22:	1e75      	subs	r5, r6, #1
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	2965      	cmp	r1, #101	@ 0x65
 800bc28:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	d00c      	beq.n	800bc4a <_scanf_float+0x356>
 800bc30:	2945      	cmp	r1, #69	@ 0x45
 800bc32:	d00a      	beq.n	800bc4a <_scanf_float+0x356>
 800bc34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc38:	463a      	mov	r2, r7
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	1eb5      	subs	r5, r6, #2
 800bc3e:	4798      	blx	r3
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	6123      	str	r3, [r4, #16]
 800bc4a:	462e      	mov	r6, r5
 800bc4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc50:	463a      	mov	r2, r7
 800bc52:	4640      	mov	r0, r8
 800bc54:	4798      	blx	r3
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	f012 0210 	ands.w	r2, r2, #16
 800bc5c:	d001      	beq.n	800bc62 <_scanf_float+0x36e>
 800bc5e:	2000      	movs	r0, #0
 800bc60:	e68c      	b.n	800b97c <_scanf_float+0x88>
 800bc62:	7032      	strb	r2, [r6, #0]
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc6e:	d11c      	bne.n	800bcaa <_scanf_float+0x3b6>
 800bc70:	9b02      	ldr	r3, [sp, #8]
 800bc72:	454b      	cmp	r3, r9
 800bc74:	eba3 0209 	sub.w	r2, r3, r9
 800bc78:	d123      	bne.n	800bcc2 <_scanf_float+0x3ce>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	9901      	ldr	r1, [sp, #4]
 800bc7e:	4640      	mov	r0, r8
 800bc80:	f002 fc22 	bl	800e4c8 <_strtod_r>
 800bc84:	6821      	ldr	r1, [r4, #0]
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	f011 0f02 	tst.w	r1, #2
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	ec57 6b10 	vmov	r6, r7, d0
 800bc92:	f103 0204 	add.w	r2, r3, #4
 800bc96:	d01f      	beq.n	800bcd8 <_scanf_float+0x3e4>
 800bc98:	9903      	ldr	r1, [sp, #12]
 800bc9a:	600a      	str	r2, [r1, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	e9c3 6700 	strd	r6, r7, [r3]
 800bca2:	68e3      	ldr	r3, [r4, #12]
 800bca4:	3301      	adds	r3, #1
 800bca6:	60e3      	str	r3, [r4, #12]
 800bca8:	e7d9      	b.n	800bc5e <_scanf_float+0x36a>
 800bcaa:	9b04      	ldr	r3, [sp, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0e4      	beq.n	800bc7a <_scanf_float+0x386>
 800bcb0:	9905      	ldr	r1, [sp, #20]
 800bcb2:	230a      	movs	r3, #10
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	3101      	adds	r1, #1
 800bcb8:	f7ff f9b6 	bl	800b028 <_strtol_r>
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	9e05      	ldr	r6, [sp, #20]
 800bcc0:	1ac2      	subs	r2, r0, r3
 800bcc2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bcc6:	4912      	ldr	r1, [pc, #72]	@ (800bd10 <_scanf_float+0x41c>)
 800bcc8:	429e      	cmp	r6, r3
 800bcca:	bf28      	it	cs
 800bccc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 f8e3 	bl	800be9c <siprintf>
 800bcd6:	e7d0      	b.n	800bc7a <_scanf_float+0x386>
 800bcd8:	f011 0f04 	tst.w	r1, #4
 800bcdc:	9903      	ldr	r1, [sp, #12]
 800bcde:	600a      	str	r2, [r1, #0]
 800bce0:	d1dc      	bne.n	800bc9c <_scanf_float+0x3a8>
 800bce2:	681d      	ldr	r5, [r3, #0]
 800bce4:	4632      	mov	r2, r6
 800bce6:	463b      	mov	r3, r7
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f4 ff32 	bl	8000b54 <__aeabi_dcmpun>
 800bcf0:	b128      	cbz	r0, 800bcfe <_scanf_float+0x40a>
 800bcf2:	4808      	ldr	r0, [pc, #32]	@ (800bd14 <_scanf_float+0x420>)
 800bcf4:	f000 f9d0 	bl	800c098 <nanf>
 800bcf8:	ed85 0a00 	vstr	s0, [r5]
 800bcfc:	e7d1      	b.n	800bca2 <_scanf_float+0x3ae>
 800bcfe:	4630      	mov	r0, r6
 800bd00:	4639      	mov	r1, r7
 800bd02:	f7f4 ff85 	bl	8000c10 <__aeabi_d2f>
 800bd06:	6028      	str	r0, [r5, #0]
 800bd08:	e7cb      	b.n	800bca2 <_scanf_float+0x3ae>
 800bd0a:	f04f 0900 	mov.w	r9, #0
 800bd0e:	e62a      	b.n	800b966 <_scanf_float+0x72>
 800bd10:	0800ff8d 	.word	0x0800ff8d
 800bd14:	08010224 	.word	0x08010224

0800bd18 <std>:
 800bd18:	2300      	movs	r3, #0
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	6083      	str	r3, [r0, #8]
 800bd20:	8181      	strh	r1, [r0, #12]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd26:	81c2      	strh	r2, [r0, #14]
 800bd28:	2208      	movs	r2, #8
 800bd2a:	6183      	str	r3, [r0, #24]
 800bd2c:	e9c0 3300 	strd	r3, r3, [r0]
 800bd30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd34:	305c      	adds	r0, #92	@ 0x5c
 800bd36:	f000 f914 	bl	800bf62 <memset>
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <std+0x58>)
 800bd3c:	6224      	str	r4, [r4, #32]
 800bd3e:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd40:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <std+0x5c>)
 800bd42:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd44:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <std+0x60>)
 800bd46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd48:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <std+0x64>)
 800bd4a:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <std+0x68>)
 800bd4e:	429c      	cmp	r4, r3
 800bd50:	d006      	beq.n	800bd60 <std+0x48>
 800bd52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd56:	4294      	cmp	r4, r2
 800bd58:	d002      	beq.n	800bd60 <std+0x48>
 800bd5a:	33d0      	adds	r3, #208	@ 0xd0
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d105      	bne.n	800bd6c <std+0x54>
 800bd60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd68:	f000 b978 	b.w	800c05c <__retarget_lock_init_recursive>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop
 800bd70:	0800bedd 	.word	0x0800bedd
 800bd74:	0800beff 	.word	0x0800beff
 800bd78:	0800bf37 	.word	0x0800bf37
 800bd7c:	0800bf5b 	.word	0x0800bf5b
 800bd80:	2003b278 	.word	0x2003b278

0800bd84 <stdio_exit_handler>:
 800bd84:	4a02      	ldr	r2, [pc, #8]	@ (800bd90 <stdio_exit_handler+0xc>)
 800bd86:	4903      	ldr	r1, [pc, #12]	@ (800bd94 <stdio_exit_handler+0x10>)
 800bd88:	4803      	ldr	r0, [pc, #12]	@ (800bd98 <stdio_exit_handler+0x14>)
 800bd8a:	f000 b869 	b.w	800be60 <_fwalk_sglue>
 800bd8e:	bf00      	nop
 800bd90:	20000028 	.word	0x20000028
 800bd94:	0800e88d 	.word	0x0800e88d
 800bd98:	20000038 	.word	0x20000038

0800bd9c <cleanup_stdio>:
 800bd9c:	6841      	ldr	r1, [r0, #4]
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd0 <cleanup_stdio+0x34>)
 800bda0:	4299      	cmp	r1, r3
 800bda2:	b510      	push	{r4, lr}
 800bda4:	4604      	mov	r4, r0
 800bda6:	d001      	beq.n	800bdac <cleanup_stdio+0x10>
 800bda8:	f002 fd70 	bl	800e88c <_fflush_r>
 800bdac:	68a1      	ldr	r1, [r4, #8]
 800bdae:	4b09      	ldr	r3, [pc, #36]	@ (800bdd4 <cleanup_stdio+0x38>)
 800bdb0:	4299      	cmp	r1, r3
 800bdb2:	d002      	beq.n	800bdba <cleanup_stdio+0x1e>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f002 fd69 	bl	800e88c <_fflush_r>
 800bdba:	68e1      	ldr	r1, [r4, #12]
 800bdbc:	4b06      	ldr	r3, [pc, #24]	@ (800bdd8 <cleanup_stdio+0x3c>)
 800bdbe:	4299      	cmp	r1, r3
 800bdc0:	d004      	beq.n	800bdcc <cleanup_stdio+0x30>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc8:	f002 bd60 	b.w	800e88c <_fflush_r>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	bf00      	nop
 800bdd0:	2003b278 	.word	0x2003b278
 800bdd4:	2003b2e0 	.word	0x2003b2e0
 800bdd8:	2003b348 	.word	0x2003b348

0800bddc <global_stdio_init.part.0>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4b0b      	ldr	r3, [pc, #44]	@ (800be0c <global_stdio_init.part.0+0x30>)
 800bde0:	2104      	movs	r1, #4
 800bde2:	4c0b      	ldr	r4, [pc, #44]	@ (800be10 <global_stdio_init.part.0+0x34>)
 800bde4:	4a0b      	ldr	r2, [pc, #44]	@ (800be14 <global_stdio_init.part.0+0x38>)
 800bde6:	4620      	mov	r0, r4
 800bde8:	601a      	str	r2, [r3, #0]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f7ff ff94 	bl	800bd18 <std>
 800bdf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	2109      	movs	r1, #9
 800bdf8:	f7ff ff8e 	bl	800bd18 <std>
 800bdfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be00:	2202      	movs	r2, #2
 800be02:	2112      	movs	r1, #18
 800be04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be08:	f7ff bf86 	b.w	800bd18 <std>
 800be0c:	2003b3b0 	.word	0x2003b3b0
 800be10:	2003b278 	.word	0x2003b278
 800be14:	0800bd85 	.word	0x0800bd85

0800be18 <__sfp_lock_acquire>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__sfp_lock_acquire+0x8>)
 800be1a:	f000 b920 	b.w	800c05e <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	2003b3b9 	.word	0x2003b3b9

0800be24 <__sfp_lock_release>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__sfp_lock_release+0x8>)
 800be26:	f000 b91b 	b.w	800c060 <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	2003b3b9 	.word	0x2003b3b9

0800be30 <__sinit>:
 800be30:	b510      	push	{r4, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	f7ff fff0 	bl	800be18 <__sfp_lock_acquire>
 800be38:	6a23      	ldr	r3, [r4, #32]
 800be3a:	b11b      	cbz	r3, 800be44 <__sinit+0x14>
 800be3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be40:	f7ff bff0 	b.w	800be24 <__sfp_lock_release>
 800be44:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <__sinit+0x28>)
 800be46:	6223      	str	r3, [r4, #32]
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <__sinit+0x2c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f5      	bne.n	800be3c <__sinit+0xc>
 800be50:	f7ff ffc4 	bl	800bddc <global_stdio_init.part.0>
 800be54:	e7f2      	b.n	800be3c <__sinit+0xc>
 800be56:	bf00      	nop
 800be58:	0800bd9d 	.word	0x0800bd9d
 800be5c:	2003b3b0 	.word	0x2003b3b0

0800be60 <_fwalk_sglue>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4607      	mov	r7, r0
 800be66:	4688      	mov	r8, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	2600      	movs	r6, #0
 800be6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be70:	f1b9 0901 	subs.w	r9, r9, #1
 800be74:	d505      	bpl.n	800be82 <_fwalk_sglue+0x22>
 800be76:	6824      	ldr	r4, [r4, #0]
 800be78:	2c00      	cmp	r4, #0
 800be7a:	d1f7      	bne.n	800be6c <_fwalk_sglue+0xc>
 800be7c:	4630      	mov	r0, r6
 800be7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d907      	bls.n	800be98 <_fwalk_sglue+0x38>
 800be88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8c:	3301      	adds	r3, #1
 800be8e:	d003      	beq.n	800be98 <_fwalk_sglue+0x38>
 800be90:	4629      	mov	r1, r5
 800be92:	4638      	mov	r0, r7
 800be94:	47c0      	blx	r8
 800be96:	4306      	orrs	r6, r0
 800be98:	3568      	adds	r5, #104	@ 0x68
 800be9a:	e7e9      	b.n	800be70 <_fwalk_sglue+0x10>

0800be9c <siprintf>:
 800be9c:	b40e      	push	{r1, r2, r3}
 800be9e:	b500      	push	{lr}
 800bea0:	b09c      	sub	sp, #112	@ 0x70
 800bea2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bea6:	ab1d      	add	r3, sp, #116	@ 0x74
 800bea8:	9002      	str	r0, [sp, #8]
 800beaa:	9006      	str	r0, [sp, #24]
 800beac:	9107      	str	r1, [sp, #28]
 800beae:	9104      	str	r1, [sp, #16]
 800beb0:	4808      	ldr	r0, [pc, #32]	@ (800bed4 <siprintf+0x38>)
 800beb2:	4909      	ldr	r1, [pc, #36]	@ (800bed8 <siprintf+0x3c>)
 800beb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb8:	9105      	str	r1, [sp, #20]
 800beba:	a902      	add	r1, sp, #8
 800bebc:	6800      	ldr	r0, [r0, #0]
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	f002 fb64 	bl	800e58c <_svfiprintf_r>
 800bec4:	9b02      	ldr	r3, [sp, #8]
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	b01c      	add	sp, #112	@ 0x70
 800becc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bed0:	b003      	add	sp, #12
 800bed2:	4770      	bx	lr
 800bed4:	20000034 	.word	0x20000034
 800bed8:	ffff0208 	.word	0xffff0208

0800bedc <__sread>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	460c      	mov	r4, r1
 800bee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee4:	f000 f86c 	bl	800bfc0 <_read_r>
 800bee8:	2800      	cmp	r0, #0
 800beea:	bfab      	itete	ge
 800beec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beee:	89a3      	ldrhlt	r3, [r4, #12]
 800bef0:	181b      	addge	r3, r3, r0
 800bef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bef6:	bfac      	ite	ge
 800bef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800befa:	81a3      	strhlt	r3, [r4, #12]
 800befc:	bd10      	pop	{r4, pc}

0800befe <__swrite>:
 800befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	461f      	mov	r7, r3
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	4605      	mov	r5, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	05db      	lsls	r3, r3, #23
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	d505      	bpl.n	800bf1c <__swrite+0x1e>
 800bf10:	2302      	movs	r3, #2
 800bf12:	2200      	movs	r2, #0
 800bf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf18:	f000 f840 	bl	800bf9c <_lseek_r>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	4632      	mov	r2, r6
 800bf20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf24:	4628      	mov	r0, r5
 800bf26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	463b      	mov	r3, r7
 800bf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	f000 b857 	b.w	800bfe4 <_write_r>

0800bf36 <__sseek>:
 800bf36:	b510      	push	{r4, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3e:	f000 f82d 	bl	800bf9c <_lseek_r>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	bf15      	itete	ne
 800bf48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf52:	81a3      	strheq	r3, [r4, #12]
 800bf54:	bf18      	it	ne
 800bf56:	81a3      	strhne	r3, [r4, #12]
 800bf58:	bd10      	pop	{r4, pc}

0800bf5a <__sclose>:
 800bf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5e:	f000 b80d 	b.w	800bf7c <_close_r>

0800bf62 <memset>:
 800bf62:	4402      	add	r2, r0
 800bf64:	4603      	mov	r3, r0
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d100      	bne.n	800bf6c <memset+0xa>
 800bf6a:	4770      	bx	lr
 800bf6c:	f803 1b01 	strb.w	r1, [r3], #1
 800bf70:	e7f9      	b.n	800bf66 <memset+0x4>
	...

0800bf74 <_localeconv_r>:
 800bf74:	4800      	ldr	r0, [pc, #0]	@ (800bf78 <_localeconv_r+0x4>)
 800bf76:	4770      	bx	lr
 800bf78:	20000174 	.word	0x20000174

0800bf7c <_close_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	2300      	movs	r3, #0
 800bf80:	4d05      	ldr	r5, [pc, #20]	@ (800bf98 <_close_r+0x1c>)
 800bf82:	4604      	mov	r4, r0
 800bf84:	4608      	mov	r0, r1
 800bf86:	602b      	str	r3, [r5, #0]
 800bf88:	f7f7 f932 	bl	80031f0 <_close>
 800bf8c:	1c43      	adds	r3, r0, #1
 800bf8e:	d102      	bne.n	800bf96 <_close_r+0x1a>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	b103      	cbz	r3, 800bf96 <_close_r+0x1a>
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	bd38      	pop	{r3, r4, r5, pc}
 800bf98:	2003b3b4 	.word	0x2003b3b4

0800bf9c <_lseek_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4d06      	ldr	r5, [pc, #24]	@ (800bfbc <_lseek_r+0x20>)
 800bfa2:	4608      	mov	r0, r1
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	602a      	str	r2, [r5, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f7f7 f947 	bl	800323e <_lseek>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_lseek_r+0x1e>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_lseek_r+0x1e>
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	2003b3b4 	.word	0x2003b3b4

0800bfc0 <_read_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4d06      	ldr	r5, [pc, #24]	@ (800bfe0 <_read_r+0x20>)
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f7f7 f8d5 	bl	800317e <_read>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_read_r+0x1e>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_read_r+0x1e>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	2003b3b4 	.word	0x2003b3b4

0800bfe4 <_write_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4d06      	ldr	r5, [pc, #24]	@ (800c004 <_write_r+0x20>)
 800bfea:	4608      	mov	r0, r1
 800bfec:	4611      	mov	r1, r2
 800bfee:	2200      	movs	r2, #0
 800bff0:	602a      	str	r2, [r5, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f7f7 f8e0 	bl	80031b8 <_write>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_write_r+0x1e>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_write_r+0x1e>
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	2003b3b4 	.word	0x2003b3b4

0800c008 <__errno>:
 800c008:	4b01      	ldr	r3, [pc, #4]	@ (800c010 <__errno+0x8>)
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000034 	.word	0x20000034

0800c014 <__libc_init_array>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	4d0d      	ldr	r5, [pc, #52]	@ (800c04c <__libc_init_array+0x38>)
 800c018:	2600      	movs	r6, #0
 800c01a:	4c0d      	ldr	r4, [pc, #52]	@ (800c050 <__libc_init_array+0x3c>)
 800c01c:	1b64      	subs	r4, r4, r5
 800c01e:	10a4      	asrs	r4, r4, #2
 800c020:	42a6      	cmp	r6, r4
 800c022:	d109      	bne.n	800c038 <__libc_init_array+0x24>
 800c024:	4d0b      	ldr	r5, [pc, #44]	@ (800c054 <__libc_init_array+0x40>)
 800c026:	2600      	movs	r6, #0
 800c028:	4c0b      	ldr	r4, [pc, #44]	@ (800c058 <__libc_init_array+0x44>)
 800c02a:	f003 fc19 	bl	800f860 <_init>
 800c02e:	1b64      	subs	r4, r4, r5
 800c030:	10a4      	asrs	r4, r4, #2
 800c032:	42a6      	cmp	r6, r4
 800c034:	d105      	bne.n	800c042 <__libc_init_array+0x2e>
 800c036:	bd70      	pop	{r4, r5, r6, pc}
 800c038:	f855 3b04 	ldr.w	r3, [r5], #4
 800c03c:	3601      	adds	r6, #1
 800c03e:	4798      	blx	r3
 800c040:	e7ee      	b.n	800c020 <__libc_init_array+0xc>
 800c042:	f855 3b04 	ldr.w	r3, [r5], #4
 800c046:	3601      	adds	r6, #1
 800c048:	4798      	blx	r3
 800c04a:	e7f2      	b.n	800c032 <__libc_init_array+0x1e>
 800c04c:	08010290 	.word	0x08010290
 800c050:	08010290 	.word	0x08010290
 800c054:	08010290 	.word	0x08010290
 800c058:	08010294 	.word	0x08010294

0800c05c <__retarget_lock_init_recursive>:
 800c05c:	4770      	bx	lr

0800c05e <__retarget_lock_acquire_recursive>:
 800c05e:	4770      	bx	lr

0800c060 <__retarget_lock_release_recursive>:
 800c060:	4770      	bx	lr

0800c062 <memchr>:
 800c062:	b2c9      	uxtb	r1, r1
 800c064:	4603      	mov	r3, r0
 800c066:	4402      	add	r2, r0
 800c068:	b510      	push	{r4, lr}
 800c06a:	4293      	cmp	r3, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	d101      	bne.n	800c074 <memchr+0x12>
 800c070:	2000      	movs	r0, #0
 800c072:	e003      	b.n	800c07c <memchr+0x1a>
 800c074:	7804      	ldrb	r4, [r0, #0]
 800c076:	3301      	adds	r3, #1
 800c078:	428c      	cmp	r4, r1
 800c07a:	d1f6      	bne.n	800c06a <memchr+0x8>
 800c07c:	bd10      	pop	{r4, pc}

0800c07e <memcpy>:
 800c07e:	440a      	add	r2, r1
 800c080:	1e43      	subs	r3, r0, #1
 800c082:	4291      	cmp	r1, r2
 800c084:	d100      	bne.n	800c088 <memcpy+0xa>
 800c086:	4770      	bx	lr
 800c088:	b510      	push	{r4, lr}
 800c08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c08e:	4291      	cmp	r1, r2
 800c090:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c094:	d1f9      	bne.n	800c08a <memcpy+0xc>
 800c096:	bd10      	pop	{r4, pc}

0800c098 <nanf>:
 800c098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c0a0 <nanf+0x8>
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	7fc00000 	.word	0x7fc00000

0800c0a4 <quorem>:
 800c0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	6903      	ldr	r3, [r0, #16]
 800c0aa:	4607      	mov	r7, r0
 800c0ac:	690c      	ldr	r4, [r1, #16]
 800c0ae:	42a3      	cmp	r3, r4
 800c0b0:	f2c0 8083 	blt.w	800c1ba <quorem+0x116>
 800c0b4:	3c01      	subs	r4, #1
 800c0b6:	f100 0514 	add.w	r5, r0, #20
 800c0ba:	f101 0814 	add.w	r8, r1, #20
 800c0be:	00a3      	lsls	r3, r4, #2
 800c0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0dc:	d331      	bcc.n	800c142 <quorem+0x9e>
 800c0de:	f04f 0a00 	mov.w	sl, #0
 800c0e2:	46c4      	mov	ip, r8
 800c0e4:	46ae      	mov	lr, r5
 800c0e6:	46d3      	mov	fp, sl
 800c0e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0ec:	b298      	uxth	r0, r3
 800c0ee:	45e1      	cmp	r9, ip
 800c0f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c0f4:	fb06 a000 	mla	r0, r6, r0, sl
 800c0f8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800c0fc:	b280      	uxth	r0, r0
 800c0fe:	fb06 2303 	mla	r3, r6, r3, r2
 800c102:	f8de 2000 	ldr.w	r2, [lr]
 800c106:	b292      	uxth	r2, r2
 800c108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c10c:	eba2 0200 	sub.w	r2, r2, r0
 800c110:	b29b      	uxth	r3, r3
 800c112:	f8de 0000 	ldr.w	r0, [lr]
 800c116:	445a      	add	r2, fp
 800c118:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c11c:	b292      	uxth	r2, r2
 800c11e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c122:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c126:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c12a:	f84e 2b04 	str.w	r2, [lr], #4
 800c12e:	d2db      	bcs.n	800c0e8 <quorem+0x44>
 800c130:	9b00      	ldr	r3, [sp, #0]
 800c132:	58eb      	ldr	r3, [r5, r3]
 800c134:	b92b      	cbnz	r3, 800c142 <quorem+0x9e>
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	3b04      	subs	r3, #4
 800c13a:	429d      	cmp	r5, r3
 800c13c:	461a      	mov	r2, r3
 800c13e:	d330      	bcc.n	800c1a2 <quorem+0xfe>
 800c140:	613c      	str	r4, [r7, #16]
 800c142:	4638      	mov	r0, r7
 800c144:	f001 f9c6 	bl	800d4d4 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	db26      	blt.n	800c19a <quorem+0xf6>
 800c14c:	4629      	mov	r1, r5
 800c14e:	2000      	movs	r0, #0
 800c150:	f858 2b04 	ldr.w	r2, [r8], #4
 800c154:	f8d1 c000 	ldr.w	ip, [r1]
 800c158:	fa1f fe82 	uxth.w	lr, r2
 800c15c:	45c1      	cmp	r9, r8
 800c15e:	fa1f f38c 	uxth.w	r3, ip
 800c162:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c166:	eba3 030e 	sub.w	r3, r3, lr
 800c16a:	4403      	add	r3, r0
 800c16c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c170:	b29b      	uxth	r3, r3
 800c172:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c17a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c17e:	f841 3b04 	str.w	r3, [r1], #4
 800c182:	d2e5      	bcs.n	800c150 <quorem+0xac>
 800c184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c18c:	b922      	cbnz	r2, 800c198 <quorem+0xf4>
 800c18e:	3b04      	subs	r3, #4
 800c190:	429d      	cmp	r5, r3
 800c192:	461a      	mov	r2, r3
 800c194:	d30b      	bcc.n	800c1ae <quorem+0x10a>
 800c196:	613c      	str	r4, [r7, #16]
 800c198:	3601      	adds	r6, #1
 800c19a:	4630      	mov	r0, r6
 800c19c:	b003      	add	sp, #12
 800c19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a2:	6812      	ldr	r2, [r2, #0]
 800c1a4:	3b04      	subs	r3, #4
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	d1ca      	bne.n	800c140 <quorem+0x9c>
 800c1aa:	3c01      	subs	r4, #1
 800c1ac:	e7c5      	b.n	800c13a <quorem+0x96>
 800c1ae:	6812      	ldr	r2, [r2, #0]
 800c1b0:	3b04      	subs	r3, #4
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	d1ef      	bne.n	800c196 <quorem+0xf2>
 800c1b6:	3c01      	subs	r4, #1
 800c1b8:	e7ea      	b.n	800c190 <quorem+0xec>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e7ee      	b.n	800c19c <quorem+0xf8>
	...

0800c1c0 <_dtoa_r>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	69c7      	ldr	r7, [r0, #28]
 800c1c6:	b099      	sub	sp, #100	@ 0x64
 800c1c8:	4683      	mov	fp, r0
 800c1ca:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c1cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c1d2:	ec55 4b10 	vmov	r4, r5, d0
 800c1d6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c1da:	b97f      	cbnz	r7, 800c1fc <_dtoa_r+0x3c>
 800c1dc:	2010      	movs	r0, #16
 800c1de:	f000 fdfd 	bl	800cddc <malloc>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c1e8:	b920      	cbnz	r0, 800c1f4 <_dtoa_r+0x34>
 800c1ea:	4ba7      	ldr	r3, [pc, #668]	@ (800c488 <_dtoa_r+0x2c8>)
 800c1ec:	21ef      	movs	r1, #239	@ 0xef
 800c1ee:	48a7      	ldr	r0, [pc, #668]	@ (800c48c <_dtoa_r+0x2cc>)
 800c1f0:	f002 fbba 	bl	800e968 <__assert_func>
 800c1f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1f8:	6007      	str	r7, [r0, #0]
 800c1fa:	60c7      	str	r7, [r0, #12]
 800c1fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	b159      	cbz	r1, 800c21c <_dtoa_r+0x5c>
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	2301      	movs	r3, #1
 800c208:	4658      	mov	r0, fp
 800c20a:	4093      	lsls	r3, r2
 800c20c:	604a      	str	r2, [r1, #4]
 800c20e:	608b      	str	r3, [r1, #8]
 800c210:	f000 feda 	bl	800cfc8 <_Bfree>
 800c214:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	1e2b      	subs	r3, r5, #0
 800c21e:	bfb7      	itett	lt
 800c220:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c224:	2300      	movge	r3, #0
 800c226:	2201      	movlt	r2, #1
 800c228:	9303      	strlt	r3, [sp, #12]
 800c22a:	bfa8      	it	ge
 800c22c:	6033      	strge	r3, [r6, #0]
 800c22e:	9f03      	ldr	r7, [sp, #12]
 800c230:	4b97      	ldr	r3, [pc, #604]	@ (800c490 <_dtoa_r+0x2d0>)
 800c232:	bfb8      	it	lt
 800c234:	6032      	strlt	r2, [r6, #0]
 800c236:	43bb      	bics	r3, r7
 800c238:	d112      	bne.n	800c260 <_dtoa_r+0xa0>
 800c23a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c23e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c246:	4323      	orrs	r3, r4
 800c248:	f000 854c 	beq.w	800cce4 <_dtoa_r+0xb24>
 800c24c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c24e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c4a4 <_dtoa_r+0x2e4>
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 854e 	beq.w	800ccf4 <_dtoa_r+0xb34>
 800c258:	f10a 0303 	add.w	r3, sl, #3
 800c25c:	f000 bd48 	b.w	800ccf0 <_dtoa_r+0xb30>
 800c260:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c264:	2200      	movs	r2, #0
 800c266:	2300      	movs	r3, #0
 800c268:	ec51 0b17 	vmov	r0, r1, d7
 800c26c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c270:	f7f4 fc3e 	bl	8000af0 <__aeabi_dcmpeq>
 800c274:	4680      	mov	r8, r0
 800c276:	b158      	cbz	r0, 800c290 <_dtoa_r+0xd0>
 800c278:	2301      	movs	r3, #1
 800c27a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c280:	b113      	cbz	r3, 800c288 <_dtoa_r+0xc8>
 800c282:	4b84      	ldr	r3, [pc, #528]	@ (800c494 <_dtoa_r+0x2d4>)
 800c284:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800c4a8 <_dtoa_r+0x2e8>
 800c28c:	f000 bd32 	b.w	800ccf4 <_dtoa_r+0xb34>
 800c290:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c294:	aa16      	add	r2, sp, #88	@ 0x58
 800c296:	a917      	add	r1, sp, #92	@ 0x5c
 800c298:	4658      	mov	r0, fp
 800c29a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c29e:	f001 fa41 	bl	800d724 <__d2b>
 800c2a2:	4681      	mov	r9, r0
 800c2a4:	2e00      	cmp	r6, #0
 800c2a6:	d075      	beq.n	800c394 <_dtoa_r+0x1d4>
 800c2a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2aa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c2ae:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c2ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2be:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4b74      	ldr	r3, [pc, #464]	@ (800c498 <_dtoa_r+0x2d8>)
 800c2c8:	f7f3 fff2 	bl	80002b0 <__aeabi_dsub>
 800c2cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c470 <_dtoa_r+0x2b0>)
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f4 f9a5 	bl	8000620 <__aeabi_dmul>
 800c2d6:	a368      	add	r3, pc, #416	@ (adr r3, 800c478 <_dtoa_r+0x2b8>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ffea 	bl	80002b4 <__adddf3>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7f4 f931 	bl	800054c <__aeabi_i2d>
 800c2ea:	a365      	add	r3, pc, #404	@ (adr r3, 800c480 <_dtoa_r+0x2c0>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f7f4 f996 	bl	8000620 <__aeabi_dmul>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f3 ffda 	bl	80002b4 <__adddf3>
 800c300:	4604      	mov	r4, r0
 800c302:	460d      	mov	r5, r1
 800c304:	f7f4 fc3c 	bl	8000b80 <__aeabi_d2iz>
 800c308:	2200      	movs	r2, #0
 800c30a:	4607      	mov	r7, r0
 800c30c:	2300      	movs	r3, #0
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f4 fbf7 	bl	8000b04 <__aeabi_dcmplt>
 800c316:	b140      	cbz	r0, 800c32a <_dtoa_r+0x16a>
 800c318:	4638      	mov	r0, r7
 800c31a:	f7f4 f917 	bl	800054c <__aeabi_i2d>
 800c31e:	4622      	mov	r2, r4
 800c320:	462b      	mov	r3, r5
 800c322:	f7f4 fbe5 	bl	8000af0 <__aeabi_dcmpeq>
 800c326:	b900      	cbnz	r0, 800c32a <_dtoa_r+0x16a>
 800c328:	3f01      	subs	r7, #1
 800c32a:	2f16      	cmp	r7, #22
 800c32c:	d851      	bhi.n	800c3d2 <_dtoa_r+0x212>
 800c32e:	4b5b      	ldr	r3, [pc, #364]	@ (800c49c <_dtoa_r+0x2dc>)
 800c330:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	f7f4 fbe2 	bl	8000b04 <__aeabi_dcmplt>
 800c340:	2800      	cmp	r0, #0
 800c342:	d048      	beq.n	800c3d6 <_dtoa_r+0x216>
 800c344:	3f01      	subs	r7, #1
 800c346:	2300      	movs	r3, #0
 800c348:	9312      	str	r3, [sp, #72]	@ 0x48
 800c34a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c34c:	1b9b      	subs	r3, r3, r6
 800c34e:	1e5a      	subs	r2, r3, #1
 800c350:	bf46      	itte	mi
 800c352:	f1c3 0801 	rsbmi	r8, r3, #1
 800c356:	2300      	movmi	r3, #0
 800c358:	f04f 0800 	movpl.w	r8, #0
 800c35c:	9208      	str	r2, [sp, #32]
 800c35e:	bf48      	it	mi
 800c360:	9308      	strmi	r3, [sp, #32]
 800c362:	2f00      	cmp	r7, #0
 800c364:	db39      	blt.n	800c3da <_dtoa_r+0x21a>
 800c366:	9b08      	ldr	r3, [sp, #32]
 800c368:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c36a:	443b      	add	r3, r7
 800c36c:	9308      	str	r3, [sp, #32]
 800c36e:	2300      	movs	r3, #0
 800c370:	930a      	str	r3, [sp, #40]	@ 0x28
 800c372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c374:	2b09      	cmp	r3, #9
 800c376:	d864      	bhi.n	800c442 <_dtoa_r+0x282>
 800c378:	2b05      	cmp	r3, #5
 800c37a:	bfc5      	ittet	gt
 800c37c:	3b04      	subgt	r3, #4
 800c37e:	2400      	movgt	r4, #0
 800c380:	2401      	movle	r4, #1
 800c382:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c386:	3b02      	subs	r3, #2
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d865      	bhi.n	800c458 <_dtoa_r+0x298>
 800c38c:	e8df f003 	tbb	[pc, r3]
 800c390:	5737392c 	.word	0x5737392c
 800c394:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c398:	441e      	add	r6, r3
 800c39a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c39e:	2b20      	cmp	r3, #32
 800c3a0:	bfc9      	itett	gt
 800c3a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c3a6:	f1c3 0320 	rsble	r3, r3, #32
 800c3aa:	409f      	lslgt	r7, r3
 800c3ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c3b0:	bfd8      	it	le
 800c3b2:	fa04 f003 	lslle.w	r0, r4, r3
 800c3b6:	f106 36ff 	add.w	r6, r6, #4294967295
 800c3ba:	bfc4      	itt	gt
 800c3bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c3c4:	f7f4 f8b2 	bl	800052c <__aeabi_ui2d>
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c3ce:	9214      	str	r2, [sp, #80]	@ 0x50
 800c3d0:	e777      	b.n	800c2c2 <_dtoa_r+0x102>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e7b8      	b.n	800c348 <_dtoa_r+0x188>
 800c3d6:	9012      	str	r0, [sp, #72]	@ 0x48
 800c3d8:	e7b7      	b.n	800c34a <_dtoa_r+0x18a>
 800c3da:	427b      	negs	r3, r7
 800c3dc:	eba8 0807 	sub.w	r8, r8, r7
 800c3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3e6:	e7c4      	b.n	800c372 <_dtoa_r+0x1b2>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dc35      	bgt.n	800c45e <_dtoa_r+0x29e>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	9307      	str	r3, [sp, #28]
 800c3fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3fc:	e00b      	b.n	800c416 <_dtoa_r+0x256>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e7f3      	b.n	800c3ea <_dtoa_r+0x22a>
 800c402:	2300      	movs	r3, #0
 800c404:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c408:	18fb      	adds	r3, r7, r3
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	3301      	adds	r3, #1
 800c40e:	2b01      	cmp	r3, #1
 800c410:	9307      	str	r3, [sp, #28]
 800c412:	bfb8      	it	lt
 800c414:	2301      	movlt	r3, #1
 800c416:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c41a:	2100      	movs	r1, #0
 800c41c:	2204      	movs	r2, #4
 800c41e:	f102 0514 	add.w	r5, r2, #20
 800c422:	429d      	cmp	r5, r3
 800c424:	d91f      	bls.n	800c466 <_dtoa_r+0x2a6>
 800c426:	6041      	str	r1, [r0, #4]
 800c428:	4658      	mov	r0, fp
 800c42a:	f000 fd8d 	bl	800cf48 <_Balloc>
 800c42e:	4682      	mov	sl, r0
 800c430:	2800      	cmp	r0, #0
 800c432:	d13b      	bne.n	800c4ac <_dtoa_r+0x2ec>
 800c434:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a0 <_dtoa_r+0x2e0>)
 800c436:	4602      	mov	r2, r0
 800c438:	f240 11af 	movw	r1, #431	@ 0x1af
 800c43c:	e6d7      	b.n	800c1ee <_dtoa_r+0x2e>
 800c43e:	2301      	movs	r3, #1
 800c440:	e7e0      	b.n	800c404 <_dtoa_r+0x244>
 800c442:	2401      	movs	r4, #1
 800c444:	2300      	movs	r3, #0
 800c446:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c448:	9309      	str	r3, [sp, #36]	@ 0x24
 800c44a:	f04f 33ff 	mov.w	r3, #4294967295
 800c44e:	2200      	movs	r2, #0
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	9307      	str	r3, [sp, #28]
 800c454:	2312      	movs	r3, #18
 800c456:	e7d0      	b.n	800c3fa <_dtoa_r+0x23a>
 800c458:	2301      	movs	r3, #1
 800c45a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c45c:	e7f5      	b.n	800c44a <_dtoa_r+0x28a>
 800c45e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	9307      	str	r3, [sp, #28]
 800c464:	e7d7      	b.n	800c416 <_dtoa_r+0x256>
 800c466:	3101      	adds	r1, #1
 800c468:	0052      	lsls	r2, r2, #1
 800c46a:	e7d8      	b.n	800c41e <_dtoa_r+0x25e>
 800c46c:	f3af 8000 	nop.w
 800c470:	636f4361 	.word	0x636f4361
 800c474:	3fd287a7 	.word	0x3fd287a7
 800c478:	8b60c8b3 	.word	0x8b60c8b3
 800c47c:	3fc68a28 	.word	0x3fc68a28
 800c480:	509f79fb 	.word	0x509f79fb
 800c484:	3fd34413 	.word	0x3fd34413
 800c488:	0800ff9f 	.word	0x0800ff9f
 800c48c:	0800ffb6 	.word	0x0800ffb6
 800c490:	7ff00000 	.word	0x7ff00000
 800c494:	0800ff6a 	.word	0x0800ff6a
 800c498:	3ff80000 	.word	0x3ff80000
 800c49c:	080100b0 	.word	0x080100b0
 800c4a0:	0801000e 	.word	0x0801000e
 800c4a4:	0800ff9b 	.word	0x0800ff9b
 800c4a8:	0800ff69 	.word	0x0800ff69
 800c4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4b0:	6018      	str	r0, [r3, #0]
 800c4b2:	9b07      	ldr	r3, [sp, #28]
 800c4b4:	2b0e      	cmp	r3, #14
 800c4b6:	f200 80a4 	bhi.w	800c602 <_dtoa_r+0x442>
 800c4ba:	2c00      	cmp	r4, #0
 800c4bc:	f000 80a1 	beq.w	800c602 <_dtoa_r+0x442>
 800c4c0:	2f00      	cmp	r7, #0
 800c4c2:	dd33      	ble.n	800c52c <_dtoa_r+0x36c>
 800c4c4:	f007 020f 	and.w	r2, r7, #15
 800c4c8:	4bac      	ldr	r3, [pc, #688]	@ (800c77c <_dtoa_r+0x5bc>)
 800c4ca:	05f8      	lsls	r0, r7, #23
 800c4cc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4d4:	ed93 7b00 	vldr	d7, [r3]
 800c4d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c4dc:	d516      	bpl.n	800c50c <_dtoa_r+0x34c>
 800c4de:	4ba8      	ldr	r3, [pc, #672]	@ (800c780 <_dtoa_r+0x5c0>)
 800c4e0:	f004 040f 	and.w	r4, r4, #15
 800c4e4:	2603      	movs	r6, #3
 800c4e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4ee:	f7f4 f9c1 	bl	8000874 <__aeabi_ddiv>
 800c4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f6:	4da2      	ldr	r5, [pc, #648]	@ (800c780 <_dtoa_r+0x5c0>)
 800c4f8:	b954      	cbnz	r4, 800c510 <_dtoa_r+0x350>
 800c4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c502:	f7f4 f9b7 	bl	8000874 <__aeabi_ddiv>
 800c506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c50a:	e028      	b.n	800c55e <_dtoa_r+0x39e>
 800c50c:	2602      	movs	r6, #2
 800c50e:	e7f2      	b.n	800c4f6 <_dtoa_r+0x336>
 800c510:	07e1      	lsls	r1, r4, #31
 800c512:	d508      	bpl.n	800c526 <_dtoa_r+0x366>
 800c514:	3601      	adds	r6, #1
 800c516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c51a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c51e:	f7f4 f87f 	bl	8000620 <__aeabi_dmul>
 800c522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c526:	1064      	asrs	r4, r4, #1
 800c528:	3508      	adds	r5, #8
 800c52a:	e7e5      	b.n	800c4f8 <_dtoa_r+0x338>
 800c52c:	f000 80d2 	beq.w	800c6d4 <_dtoa_r+0x514>
 800c530:	427c      	negs	r4, r7
 800c532:	4b92      	ldr	r3, [pc, #584]	@ (800c77c <_dtoa_r+0x5bc>)
 800c534:	4d92      	ldr	r5, [pc, #584]	@ (800c780 <_dtoa_r+0x5c0>)
 800c536:	2602      	movs	r6, #2
 800c538:	f004 020f 	and.w	r2, r4, #15
 800c53c:	1124      	asrs	r4, r4, #4
 800c53e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	f7f4 f869 	bl	8000620 <__aeabi_dmul>
 800c54e:	2300      	movs	r3, #0
 800c550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c554:	2c00      	cmp	r4, #0
 800c556:	f040 80b2 	bne.w	800c6be <_dtoa_r+0x4fe>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1d3      	bne.n	800c506 <_dtoa_r+0x346>
 800c55e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c560:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 80b7 	beq.w	800c6d8 <_dtoa_r+0x518>
 800c56a:	2200      	movs	r2, #0
 800c56c:	4b85      	ldr	r3, [pc, #532]	@ (800c784 <_dtoa_r+0x5c4>)
 800c56e:	4620      	mov	r0, r4
 800c570:	4629      	mov	r1, r5
 800c572:	f7f4 fac7 	bl	8000b04 <__aeabi_dcmplt>
 800c576:	2800      	cmp	r0, #0
 800c578:	f000 80ae 	beq.w	800c6d8 <_dtoa_r+0x518>
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80aa 	beq.w	800c6d8 <_dtoa_r+0x518>
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	dd37      	ble.n	800c5fa <_dtoa_r+0x43a>
 800c58a:	1e7b      	subs	r3, r7, #1
 800c58c:	4620      	mov	r0, r4
 800c58e:	2200      	movs	r2, #0
 800c590:	4629      	mov	r1, r5
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	3601      	adds	r6, #1
 800c596:	4b7c      	ldr	r3, [pc, #496]	@ (800c788 <_dtoa_r+0x5c8>)
 800c598:	f7f4 f842 	bl	8000620 <__aeabi_dmul>
 800c59c:	9c00      	ldr	r4, [sp, #0]
 800c59e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7f3 ffd2 	bl	800054c <__aeabi_i2d>
 800c5a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5ac:	f7f4 f838 	bl	8000620 <__aeabi_dmul>
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	4b76      	ldr	r3, [pc, #472]	@ (800c78c <_dtoa_r+0x5cc>)
 800c5b4:	f7f3 fe7e 	bl	80002b4 <__adddf3>
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	f040 808d 	bne.w	800c6de <_dtoa_r+0x51e>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4b72      	ldr	r3, [pc, #456]	@ (800c790 <_dtoa_r+0x5d0>)
 800c5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5cc:	f7f3 fe70 	bl	80002b0 <__aeabi_dsub>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5d8:	462a      	mov	r2, r5
 800c5da:	4633      	mov	r3, r6
 800c5dc:	f7f4 fab0 	bl	8000b40 <__aeabi_dcmpgt>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	f040 828b 	bne.w	800cafc <_dtoa_r+0x93c>
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f0:	f7f4 fa88 	bl	8000b04 <__aeabi_dcmplt>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	f040 8128 	bne.w	800c84a <_dtoa_r+0x68a>
 800c5fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c5fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c604:	2b00      	cmp	r3, #0
 800c606:	f2c0 815a 	blt.w	800c8be <_dtoa_r+0x6fe>
 800c60a:	2f0e      	cmp	r7, #14
 800c60c:	f300 8157 	bgt.w	800c8be <_dtoa_r+0x6fe>
 800c610:	4b5a      	ldr	r3, [pc, #360]	@ (800c77c <_dtoa_r+0x5bc>)
 800c612:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c616:	ed93 7b00 	vldr	d7, [r3]
 800c61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	ed8d 7b00 	vstr	d7, [sp]
 800c622:	da03      	bge.n	800c62c <_dtoa_r+0x46c>
 800c624:	9b07      	ldr	r3, [sp, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f340 8101 	ble.w	800c82e <_dtoa_r+0x66e>
 800c62c:	4656      	mov	r6, sl
 800c62e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c636:	4620      	mov	r0, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f4 f91b 	bl	8000874 <__aeabi_ddiv>
 800c63e:	f7f4 fa9f 	bl	8000b80 <__aeabi_d2iz>
 800c642:	4680      	mov	r8, r0
 800c644:	f7f3 ff82 	bl	800054c <__aeabi_i2d>
 800c648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64c:	f7f3 ffe8 	bl	8000620 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	4620      	mov	r0, r4
 800c654:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c658:	460b      	mov	r3, r1
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7f3 fe28 	bl	80002b0 <__aeabi_dsub>
 800c660:	9d07      	ldr	r5, [sp, #28]
 800c662:	f806 4b01 	strb.w	r4, [r6], #1
 800c666:	eba6 040a 	sub.w	r4, r6, sl
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	42a5      	cmp	r5, r4
 800c670:	f040 8117 	bne.w	800c8a2 <_dtoa_r+0x6e2>
 800c674:	f7f3 fe1e 	bl	80002b4 <__adddf3>
 800c678:	4604      	mov	r4, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c680:	f7f4 fa5e 	bl	8000b40 <__aeabi_dcmpgt>
 800c684:	2800      	cmp	r0, #0
 800c686:	f040 80f9 	bne.w	800c87c <_dtoa_r+0x6bc>
 800c68a:	4620      	mov	r0, r4
 800c68c:	4629      	mov	r1, r5
 800c68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c692:	f7f4 fa2d 	bl	8000af0 <__aeabi_dcmpeq>
 800c696:	b118      	cbz	r0, 800c6a0 <_dtoa_r+0x4e0>
 800c698:	f018 0f01 	tst.w	r8, #1
 800c69c:	f040 80ee 	bne.w	800c87c <_dtoa_r+0x6bc>
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	4658      	mov	r0, fp
 800c6a4:	f000 fc90 	bl	800cfc8 <_Bfree>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	3701      	adds	r7, #1
 800c6ac:	7033      	strb	r3, [r6, #0]
 800c6ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6b0:	601f      	str	r7, [r3, #0]
 800c6b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 831d 	beq.w	800ccf4 <_dtoa_r+0xb34>
 800c6ba:	601e      	str	r6, [r3, #0]
 800c6bc:	e31a      	b.n	800ccf4 <_dtoa_r+0xb34>
 800c6be:	07e2      	lsls	r2, r4, #31
 800c6c0:	d505      	bpl.n	800c6ce <_dtoa_r+0x50e>
 800c6c2:	3601      	adds	r6, #1
 800c6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6c8:	f7f3 ffaa 	bl	8000620 <__aeabi_dmul>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	1064      	asrs	r4, r4, #1
 800c6d0:	3508      	adds	r5, #8
 800c6d2:	e73f      	b.n	800c554 <_dtoa_r+0x394>
 800c6d4:	2602      	movs	r6, #2
 800c6d6:	e742      	b.n	800c55e <_dtoa_r+0x39e>
 800c6d8:	9c07      	ldr	r4, [sp, #28]
 800c6da:	9704      	str	r7, [sp, #16]
 800c6dc:	e761      	b.n	800c5a2 <_dtoa_r+0x3e2>
 800c6de:	4b27      	ldr	r3, [pc, #156]	@ (800c77c <_dtoa_r+0x5bc>)
 800c6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6e6:	4454      	add	r4, sl
 800c6e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	d053      	beq.n	800c798 <_dtoa_r+0x5d8>
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	4928      	ldr	r1, [pc, #160]	@ (800c794 <_dtoa_r+0x5d4>)
 800c6f4:	f7f4 f8be 	bl	8000874 <__aeabi_ddiv>
 800c6f8:	4633      	mov	r3, r6
 800c6fa:	4656      	mov	r6, sl
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	f7f3 fdd7 	bl	80002b0 <__aeabi_dsub>
 800c702:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70a:	f7f4 fa39 	bl	8000b80 <__aeabi_d2iz>
 800c70e:	4605      	mov	r5, r0
 800c710:	f7f3 ff1c 	bl	800054c <__aeabi_i2d>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	3530      	adds	r5, #48	@ 0x30
 800c71a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c71e:	f7f3 fdc7 	bl	80002b0 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	f806 5b01 	strb.w	r5, [r6], #1
 800c72a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c72e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c732:	f7f4 f9e7 	bl	8000b04 <__aeabi_dcmplt>
 800c736:	2800      	cmp	r0, #0
 800c738:	d171      	bne.n	800c81e <_dtoa_r+0x65e>
 800c73a:	2000      	movs	r0, #0
 800c73c:	4911      	ldr	r1, [pc, #68]	@ (800c784 <_dtoa_r+0x5c4>)
 800c73e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c742:	f7f3 fdb5 	bl	80002b0 <__aeabi_dsub>
 800c746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c74a:	f7f4 f9db 	bl	8000b04 <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	f040 8095 	bne.w	800c87e <_dtoa_r+0x6be>
 800c754:	42a6      	cmp	r6, r4
 800c756:	f43f af50 	beq.w	800c5fa <_dtoa_r+0x43a>
 800c75a:	2200      	movs	r2, #0
 800c75c:	4b0a      	ldr	r3, [pc, #40]	@ (800c788 <_dtoa_r+0x5c8>)
 800c75e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c762:	f7f3 ff5d 	bl	8000620 <__aeabi_dmul>
 800c766:	2200      	movs	r2, #0
 800c768:	4b07      	ldr	r3, [pc, #28]	@ (800c788 <_dtoa_r+0x5c8>)
 800c76a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c772:	f7f3 ff55 	bl	8000620 <__aeabi_dmul>
 800c776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c77a:	e7c4      	b.n	800c706 <_dtoa_r+0x546>
 800c77c:	080100b0 	.word	0x080100b0
 800c780:	08010088 	.word	0x08010088
 800c784:	3ff00000 	.word	0x3ff00000
 800c788:	40240000 	.word	0x40240000
 800c78c:	401c0000 	.word	0x401c0000
 800c790:	40140000 	.word	0x40140000
 800c794:	3fe00000 	.word	0x3fe00000
 800c798:	4631      	mov	r1, r6
 800c79a:	4656      	mov	r6, sl
 800c79c:	4628      	mov	r0, r5
 800c79e:	f7f3 ff3f 	bl	8000620 <__aeabi_dmul>
 800c7a2:	9415      	str	r4, [sp, #84]	@ 0x54
 800c7a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ac:	f7f4 f9e8 	bl	8000b80 <__aeabi_d2iz>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	f7f3 fecb 	bl	800054c <__aeabi_i2d>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	3530      	adds	r5, #48	@ 0x30
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7c0:	f7f3 fd76 	bl	80002b0 <__aeabi_dsub>
 800c7c4:	f806 5b01 	strb.w	r5, [r6], #1
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	d124      	bne.n	800c822 <_dtoa_r+0x662>
 800c7d8:	4bac      	ldr	r3, [pc, #688]	@ (800ca8c <_dtoa_r+0x8cc>)
 800c7da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c7de:	f7f3 fd69 	bl	80002b4 <__adddf3>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ea:	f7f4 f9a9 	bl	8000b40 <__aeabi_dcmpgt>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d145      	bne.n	800c87e <_dtoa_r+0x6be>
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	49a5      	ldr	r1, [pc, #660]	@ (800ca8c <_dtoa_r+0x8cc>)
 800c7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c7fa:	f7f3 fd59 	bl	80002b0 <__aeabi_dsub>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c806:	f7f4 f97d 	bl	8000b04 <__aeabi_dcmplt>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f43f aef5 	beq.w	800c5fa <_dtoa_r+0x43a>
 800c810:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c812:	1e73      	subs	r3, r6, #1
 800c814:	9315      	str	r3, [sp, #84]	@ 0x54
 800c816:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c81a:	2b30      	cmp	r3, #48	@ 0x30
 800c81c:	d0f8      	beq.n	800c810 <_dtoa_r+0x650>
 800c81e:	9f04      	ldr	r7, [sp, #16]
 800c820:	e73e      	b.n	800c6a0 <_dtoa_r+0x4e0>
 800c822:	4b9b      	ldr	r3, [pc, #620]	@ (800ca90 <_dtoa_r+0x8d0>)
 800c824:	f7f3 fefc 	bl	8000620 <__aeabi_dmul>
 800c828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c82c:	e7bc      	b.n	800c7a8 <_dtoa_r+0x5e8>
 800c82e:	d10c      	bne.n	800c84a <_dtoa_r+0x68a>
 800c830:	2200      	movs	r2, #0
 800c832:	4b98      	ldr	r3, [pc, #608]	@ (800ca94 <_dtoa_r+0x8d4>)
 800c834:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c838:	f7f3 fef2 	bl	8000620 <__aeabi_dmul>
 800c83c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c840:	f7f4 f974 	bl	8000b2c <__aeabi_dcmpge>
 800c844:	2800      	cmp	r0, #0
 800c846:	f000 8157 	beq.w	800caf8 <_dtoa_r+0x938>
 800c84a:	2400      	movs	r4, #0
 800c84c:	4625      	mov	r5, r4
 800c84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c850:	4656      	mov	r6, sl
 800c852:	43db      	mvns	r3, r3
 800c854:	9304      	str	r3, [sp, #16]
 800c856:	2700      	movs	r7, #0
 800c858:	4621      	mov	r1, r4
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fbb4 	bl	800cfc8 <_Bfree>
 800c860:	2d00      	cmp	r5, #0
 800c862:	d0dc      	beq.n	800c81e <_dtoa_r+0x65e>
 800c864:	b12f      	cbz	r7, 800c872 <_dtoa_r+0x6b2>
 800c866:	42af      	cmp	r7, r5
 800c868:	d003      	beq.n	800c872 <_dtoa_r+0x6b2>
 800c86a:	4639      	mov	r1, r7
 800c86c:	4658      	mov	r0, fp
 800c86e:	f000 fbab 	bl	800cfc8 <_Bfree>
 800c872:	4629      	mov	r1, r5
 800c874:	4658      	mov	r0, fp
 800c876:	f000 fba7 	bl	800cfc8 <_Bfree>
 800c87a:	e7d0      	b.n	800c81e <_dtoa_r+0x65e>
 800c87c:	9704      	str	r7, [sp, #16]
 800c87e:	4633      	mov	r3, r6
 800c880:	461e      	mov	r6, r3
 800c882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c886:	2a39      	cmp	r2, #57	@ 0x39
 800c888:	d107      	bne.n	800c89a <_dtoa_r+0x6da>
 800c88a:	459a      	cmp	sl, r3
 800c88c:	d1f8      	bne.n	800c880 <_dtoa_r+0x6c0>
 800c88e:	9a04      	ldr	r2, [sp, #16]
 800c890:	3201      	adds	r2, #1
 800c892:	9204      	str	r2, [sp, #16]
 800c894:	2230      	movs	r2, #48	@ 0x30
 800c896:	f88a 2000 	strb.w	r2, [sl]
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	3201      	adds	r2, #1
 800c89e:	701a      	strb	r2, [r3, #0]
 800c8a0:	e7bd      	b.n	800c81e <_dtoa_r+0x65e>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	4b7a      	ldr	r3, [pc, #488]	@ (800ca90 <_dtoa_r+0x8d0>)
 800c8a6:	f7f3 febb 	bl	8000620 <__aeabi_dmul>
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	460d      	mov	r5, r1
 800c8b2:	f7f4 f91d 	bl	8000af0 <__aeabi_dcmpeq>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f43f aebb 	beq.w	800c632 <_dtoa_r+0x472>
 800c8bc:	e6f0      	b.n	800c6a0 <_dtoa_r+0x4e0>
 800c8be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	f000 80db 	beq.w	800ca7c <_dtoa_r+0x8bc>
 800c8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8c8:	2a01      	cmp	r2, #1
 800c8ca:	f300 80bf 	bgt.w	800ca4c <_dtoa_r+0x88c>
 800c8ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c8d0:	2a00      	cmp	r2, #0
 800c8d2:	f000 80b7 	beq.w	800ca44 <_dtoa_r+0x884>
 800c8d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c8da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8dc:	4646      	mov	r6, r8
 800c8de:	9a08      	ldr	r2, [sp, #32]
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	4498      	add	r8, r3
 800c8e6:	441a      	add	r2, r3
 800c8e8:	9208      	str	r2, [sp, #32]
 800c8ea:	f000 fc6d 	bl	800d1c8 <__i2b>
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	b15e      	cbz	r6, 800c90a <_dtoa_r+0x74a>
 800c8f2:	9b08      	ldr	r3, [sp, #32]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dd08      	ble.n	800c90a <_dtoa_r+0x74a>
 800c8f8:	42b3      	cmp	r3, r6
 800c8fa:	9a08      	ldr	r2, [sp, #32]
 800c8fc:	bfa8      	it	ge
 800c8fe:	4633      	movge	r3, r6
 800c900:	eba8 0803 	sub.w	r8, r8, r3
 800c904:	1af6      	subs	r6, r6, r3
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	9308      	str	r3, [sp, #32]
 800c90a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c90c:	b1f3      	cbz	r3, 800c94c <_dtoa_r+0x78c>
 800c90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 80b7 	beq.w	800ca84 <_dtoa_r+0x8c4>
 800c916:	b18c      	cbz	r4, 800c93c <_dtoa_r+0x77c>
 800c918:	4629      	mov	r1, r5
 800c91a:	4622      	mov	r2, r4
 800c91c:	4658      	mov	r0, fp
 800c91e:	f000 fd13 	bl	800d348 <__pow5mult>
 800c922:	464a      	mov	r2, r9
 800c924:	4601      	mov	r1, r0
 800c926:	4605      	mov	r5, r0
 800c928:	4658      	mov	r0, fp
 800c92a:	f000 fc63 	bl	800d1f4 <__multiply>
 800c92e:	4649      	mov	r1, r9
 800c930:	9004      	str	r0, [sp, #16]
 800c932:	4658      	mov	r0, fp
 800c934:	f000 fb48 	bl	800cfc8 <_Bfree>
 800c938:	9b04      	ldr	r3, [sp, #16]
 800c93a:	4699      	mov	r9, r3
 800c93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c93e:	1b1a      	subs	r2, r3, r4
 800c940:	d004      	beq.n	800c94c <_dtoa_r+0x78c>
 800c942:	4649      	mov	r1, r9
 800c944:	4658      	mov	r0, fp
 800c946:	f000 fcff 	bl	800d348 <__pow5mult>
 800c94a:	4681      	mov	r9, r0
 800c94c:	2101      	movs	r1, #1
 800c94e:	4658      	mov	r0, fp
 800c950:	f000 fc3a 	bl	800d1c8 <__i2b>
 800c954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c956:	4604      	mov	r4, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 81cf 	beq.w	800ccfc <_dtoa_r+0xb3c>
 800c95e:	461a      	mov	r2, r3
 800c960:	4601      	mov	r1, r0
 800c962:	4658      	mov	r0, fp
 800c964:	f000 fcf0 	bl	800d348 <__pow5mult>
 800c968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c96a:	4604      	mov	r4, r0
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	f300 8095 	bgt.w	800ca9c <_dtoa_r+0x8dc>
 800c972:	9b02      	ldr	r3, [sp, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	f040 8087 	bne.w	800ca88 <_dtoa_r+0x8c8>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c980:	2b00      	cmp	r3, #0
 800c982:	f040 8089 	bne.w	800ca98 <_dtoa_r+0x8d8>
 800c986:	9b03      	ldr	r3, [sp, #12]
 800c988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c98c:	0d1b      	lsrs	r3, r3, #20
 800c98e:	051b      	lsls	r3, r3, #20
 800c990:	b12b      	cbz	r3, 800c99e <_dtoa_r+0x7de>
 800c992:	9b08      	ldr	r3, [sp, #32]
 800c994:	f108 0801 	add.w	r8, r8, #1
 800c998:	3301      	adds	r3, #1
 800c99a:	9308      	str	r3, [sp, #32]
 800c99c:	2301      	movs	r3, #1
 800c99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 81b0 	beq.w	800cd08 <_dtoa_r+0xb48>
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9ae:	6918      	ldr	r0, [r3, #16]
 800c9b0:	f000 fbbe 	bl	800d130 <__hi0bits>
 800c9b4:	f1c0 0020 	rsb	r0, r0, #32
 800c9b8:	9b08      	ldr	r3, [sp, #32]
 800c9ba:	4418      	add	r0, r3
 800c9bc:	f010 001f 	ands.w	r0, r0, #31
 800c9c0:	d077      	beq.n	800cab2 <_dtoa_r+0x8f2>
 800c9c2:	f1c0 0320 	rsb	r3, r0, #32
 800c9c6:	2b04      	cmp	r3, #4
 800c9c8:	dd6b      	ble.n	800caa2 <_dtoa_r+0x8e2>
 800c9ca:	f1c0 001c 	rsb	r0, r0, #28
 800c9ce:	9b08      	ldr	r3, [sp, #32]
 800c9d0:	4480      	add	r8, r0
 800c9d2:	4403      	add	r3, r0
 800c9d4:	4406      	add	r6, r0
 800c9d6:	9308      	str	r3, [sp, #32]
 800c9d8:	f1b8 0f00 	cmp.w	r8, #0
 800c9dc:	dd05      	ble.n	800c9ea <_dtoa_r+0x82a>
 800c9de:	4649      	mov	r1, r9
 800c9e0:	4642      	mov	r2, r8
 800c9e2:	4658      	mov	r0, fp
 800c9e4:	f000 fd0a 	bl	800d3fc <__lshift>
 800c9e8:	4681      	mov	r9, r0
 800c9ea:	9b08      	ldr	r3, [sp, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dd05      	ble.n	800c9fc <_dtoa_r+0x83c>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4658      	mov	r0, fp
 800c9f6:	f000 fd01 	bl	800d3fc <__lshift>
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d059      	beq.n	800cab6 <_dtoa_r+0x8f6>
 800ca02:	4621      	mov	r1, r4
 800ca04:	4648      	mov	r0, r9
 800ca06:	f000 fd65 	bl	800d4d4 <__mcmp>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	da53      	bge.n	800cab6 <_dtoa_r+0x8f6>
 800ca0e:	1e7b      	subs	r3, r7, #1
 800ca10:	4649      	mov	r1, r9
 800ca12:	220a      	movs	r2, #10
 800ca14:	4658      	mov	r0, fp
 800ca16:	9304      	str	r3, [sp, #16]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f000 faf7 	bl	800d00c <__multadd>
 800ca1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca20:	4681      	mov	r9, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 8172 	beq.w	800cd0c <_dtoa_r+0xb4c>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	220a      	movs	r2, #10
 800ca2e:	4658      	mov	r0, fp
 800ca30:	f000 faec 	bl	800d00c <__multadd>
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	4605      	mov	r5, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc67      	bgt.n	800cb0c <_dtoa_r+0x94c>
 800ca3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	dc41      	bgt.n	800cac6 <_dtoa_r+0x906>
 800ca42:	e063      	b.n	800cb0c <_dtoa_r+0x94c>
 800ca44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca4a:	e746      	b.n	800c8da <_dtoa_r+0x71a>
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	1e5c      	subs	r4, r3, #1
 800ca50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	bfb7      	itett	lt
 800ca56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ca58:	1b1c      	subge	r4, r3, r4
 800ca5a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ca5c:	1ae3      	sublt	r3, r4, r3
 800ca5e:	bfbe      	ittt	lt
 800ca60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ca62:	2400      	movlt	r4, #0
 800ca64:	18d2      	addlt	r2, r2, r3
 800ca66:	9b07      	ldr	r3, [sp, #28]
 800ca68:	bfb8      	it	lt
 800ca6a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bfb5      	itete	lt
 800ca70:	eba8 0603 	sublt.w	r6, r8, r3
 800ca74:	4646      	movge	r6, r8
 800ca76:	2300      	movlt	r3, #0
 800ca78:	9b07      	ldrge	r3, [sp, #28]
 800ca7a:	e730      	b.n	800c8de <_dtoa_r+0x71e>
 800ca7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca7e:	4646      	mov	r6, r8
 800ca80:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca82:	e735      	b.n	800c8f0 <_dtoa_r+0x730>
 800ca84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca86:	e75c      	b.n	800c942 <_dtoa_r+0x782>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e788      	b.n	800c99e <_dtoa_r+0x7de>
 800ca8c:	3fe00000 	.word	0x3fe00000
 800ca90:	40240000 	.word	0x40240000
 800ca94:	40140000 	.word	0x40140000
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	e780      	b.n	800c99e <_dtoa_r+0x7de>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800caa0:	e782      	b.n	800c9a8 <_dtoa_r+0x7e8>
 800caa2:	d099      	beq.n	800c9d8 <_dtoa_r+0x818>
 800caa4:	331c      	adds	r3, #28
 800caa6:	9a08      	ldr	r2, [sp, #32]
 800caa8:	441a      	add	r2, r3
 800caaa:	4498      	add	r8, r3
 800caac:	441e      	add	r6, r3
 800caae:	9208      	str	r2, [sp, #32]
 800cab0:	e792      	b.n	800c9d8 <_dtoa_r+0x818>
 800cab2:	4603      	mov	r3, r0
 800cab4:	e7f6      	b.n	800caa4 <_dtoa_r+0x8e4>
 800cab6:	9b07      	ldr	r3, [sp, #28]
 800cab8:	9704      	str	r7, [sp, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	dc20      	bgt.n	800cb00 <_dtoa_r+0x940>
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	dd1e      	ble.n	800cb04 <_dtoa_r+0x944>
 800cac6:	9b00      	ldr	r3, [sp, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f47f aec0 	bne.w	800c84e <_dtoa_r+0x68e>
 800cace:	4621      	mov	r1, r4
 800cad0:	2205      	movs	r2, #5
 800cad2:	4658      	mov	r0, fp
 800cad4:	f000 fa9a 	bl	800d00c <__multadd>
 800cad8:	4601      	mov	r1, r0
 800cada:	4604      	mov	r4, r0
 800cadc:	4648      	mov	r0, r9
 800cade:	f000 fcf9 	bl	800d4d4 <__mcmp>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f77f aeb3 	ble.w	800c84e <_dtoa_r+0x68e>
 800cae8:	2331      	movs	r3, #49	@ 0x31
 800caea:	4656      	mov	r6, sl
 800caec:	f806 3b01 	strb.w	r3, [r6], #1
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	3301      	adds	r3, #1
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	e6ae      	b.n	800c856 <_dtoa_r+0x696>
 800caf8:	9c07      	ldr	r4, [sp, #28]
 800cafa:	9704      	str	r7, [sp, #16]
 800cafc:	4625      	mov	r5, r4
 800cafe:	e7f3      	b.n	800cae8 <_dtoa_r+0x928>
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 8104 	beq.w	800cd14 <_dtoa_r+0xb54>
 800cb0c:	2e00      	cmp	r6, #0
 800cb0e:	dd05      	ble.n	800cb1c <_dtoa_r+0x95c>
 800cb10:	4629      	mov	r1, r5
 800cb12:	4632      	mov	r2, r6
 800cb14:	4658      	mov	r0, fp
 800cb16:	f000 fc71 	bl	800d3fc <__lshift>
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d05a      	beq.n	800cbd8 <_dtoa_r+0xa18>
 800cb22:	6869      	ldr	r1, [r5, #4]
 800cb24:	4658      	mov	r0, fp
 800cb26:	f000 fa0f 	bl	800cf48 <_Balloc>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	b928      	cbnz	r0, 800cb3a <_dtoa_r+0x97a>
 800cb2e:	4b84      	ldr	r3, [pc, #528]	@ (800cd40 <_dtoa_r+0xb80>)
 800cb30:	4602      	mov	r2, r0
 800cb32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb36:	f7ff bb5a 	b.w	800c1ee <_dtoa_r+0x2e>
 800cb3a:	692a      	ldr	r2, [r5, #16]
 800cb3c:	f105 010c 	add.w	r1, r5, #12
 800cb40:	300c      	adds	r0, #12
 800cb42:	3202      	adds	r2, #2
 800cb44:	0092      	lsls	r2, r2, #2
 800cb46:	f7ff fa9a 	bl	800c07e <memcpy>
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4658      	mov	r0, fp
 800cb50:	f000 fc54 	bl	800d3fc <__lshift>
 800cb54:	f10a 0301 	add.w	r3, sl, #1
 800cb58:	462f      	mov	r7, r5
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	9b00      	ldr	r3, [sp, #0]
 800cb60:	4453      	add	r3, sl
 800cb62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb64:	9b02      	ldr	r3, [sp, #8]
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb6c:	9b07      	ldr	r3, [sp, #28]
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4648      	mov	r0, r9
 800cb72:	3b01      	subs	r3, #1
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	f7ff fa95 	bl	800c0a4 <quorem>
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	9002      	str	r0, [sp, #8]
 800cb7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb82:	4648      	mov	r0, r9
 800cb84:	f000 fca6 	bl	800d4d4 <__mcmp>
 800cb88:	462a      	mov	r2, r5
 800cb8a:	9008      	str	r0, [sp, #32]
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	4658      	mov	r0, fp
 800cb90:	f000 fcbc 	bl	800d50c <__mdiff>
 800cb94:	68c2      	ldr	r2, [r0, #12]
 800cb96:	4606      	mov	r6, r0
 800cb98:	bb02      	cbnz	r2, 800cbdc <_dtoa_r+0xa1c>
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	4648      	mov	r0, r9
 800cb9e:	f000 fc99 	bl	800d4d4 <__mcmp>
 800cba2:	4602      	mov	r2, r0
 800cba4:	4631      	mov	r1, r6
 800cba6:	4658      	mov	r0, fp
 800cba8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbaa:	f000 fa0d 	bl	800cfc8 <_Bfree>
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbb2:	9e07      	ldr	r6, [sp, #28]
 800cbb4:	ea43 0102 	orr.w	r1, r3, r2
 800cbb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbba:	4319      	orrs	r1, r3
 800cbbc:	d110      	bne.n	800cbe0 <_dtoa_r+0xa20>
 800cbbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbc2:	d029      	beq.n	800cc18 <_dtoa_r+0xa58>
 800cbc4:	9b08      	ldr	r3, [sp, #32]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	dd02      	ble.n	800cbd0 <_dtoa_r+0xa10>
 800cbca:	9b02      	ldr	r3, [sp, #8]
 800cbcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cbd0:	9b00      	ldr	r3, [sp, #0]
 800cbd2:	f883 8000 	strb.w	r8, [r3]
 800cbd6:	e63f      	b.n	800c858 <_dtoa_r+0x698>
 800cbd8:	4628      	mov	r0, r5
 800cbda:	e7bb      	b.n	800cb54 <_dtoa_r+0x994>
 800cbdc:	2201      	movs	r2, #1
 800cbde:	e7e1      	b.n	800cba4 <_dtoa_r+0x9e4>
 800cbe0:	9b08      	ldr	r3, [sp, #32]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	db04      	blt.n	800cbf0 <_dtoa_r+0xa30>
 800cbe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cbec:	430b      	orrs	r3, r1
 800cbee:	d120      	bne.n	800cc32 <_dtoa_r+0xa72>
 800cbf0:	2a00      	cmp	r2, #0
 800cbf2:	dded      	ble.n	800cbd0 <_dtoa_r+0xa10>
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	4658      	mov	r0, fp
 800cbfa:	f000 fbff 	bl	800d3fc <__lshift>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4681      	mov	r9, r0
 800cc02:	f000 fc67 	bl	800d4d4 <__mcmp>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	dc03      	bgt.n	800cc12 <_dtoa_r+0xa52>
 800cc0a:	d1e1      	bne.n	800cbd0 <_dtoa_r+0xa10>
 800cc0c:	f018 0f01 	tst.w	r8, #1
 800cc10:	d0de      	beq.n	800cbd0 <_dtoa_r+0xa10>
 800cc12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc16:	d1d8      	bne.n	800cbca <_dtoa_r+0xa0a>
 800cc18:	2339      	movs	r3, #57	@ 0x39
 800cc1a:	9a00      	ldr	r2, [sp, #0]
 800cc1c:	7013      	strb	r3, [r2, #0]
 800cc1e:	4633      	mov	r3, r6
 800cc20:	461e      	mov	r6, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc28:	2a39      	cmp	r2, #57	@ 0x39
 800cc2a:	d052      	beq.n	800ccd2 <_dtoa_r+0xb12>
 800cc2c:	3201      	adds	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	e612      	b.n	800c858 <_dtoa_r+0x698>
 800cc32:	2a00      	cmp	r2, #0
 800cc34:	dd07      	ble.n	800cc46 <_dtoa_r+0xa86>
 800cc36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc3a:	d0ed      	beq.n	800cc18 <_dtoa_r+0xa58>
 800cc3c:	f108 0301 	add.w	r3, r8, #1
 800cc40:	9a00      	ldr	r2, [sp, #0]
 800cc42:	7013      	strb	r3, [r2, #0]
 800cc44:	e608      	b.n	800c858 <_dtoa_r+0x698>
 800cc46:	9b07      	ldr	r3, [sp, #28]
 800cc48:	9a07      	ldr	r2, [sp, #28]
 800cc4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d028      	beq.n	800cca6 <_dtoa_r+0xae6>
 800cc54:	4649      	mov	r1, r9
 800cc56:	2300      	movs	r3, #0
 800cc58:	220a      	movs	r2, #10
 800cc5a:	4658      	mov	r0, fp
 800cc5c:	f000 f9d6 	bl	800d00c <__multadd>
 800cc60:	42af      	cmp	r7, r5
 800cc62:	4681      	mov	r9, r0
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	f04f 020a 	mov.w	r2, #10
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	4658      	mov	r0, fp
 800cc70:	d107      	bne.n	800cc82 <_dtoa_r+0xac2>
 800cc72:	f000 f9cb 	bl	800d00c <__multadd>
 800cc76:	4607      	mov	r7, r0
 800cc78:	4605      	mov	r5, r0
 800cc7a:	9b07      	ldr	r3, [sp, #28]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	9307      	str	r3, [sp, #28]
 800cc80:	e774      	b.n	800cb6c <_dtoa_r+0x9ac>
 800cc82:	f000 f9c3 	bl	800d00c <__multadd>
 800cc86:	4629      	mov	r1, r5
 800cc88:	4607      	mov	r7, r0
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4658      	mov	r0, fp
 800cc90:	f000 f9bc 	bl	800d00c <__multadd>
 800cc94:	4605      	mov	r5, r0
 800cc96:	e7f0      	b.n	800cc7a <_dtoa_r+0xaba>
 800cc98:	9b00      	ldr	r3, [sp, #0]
 800cc9a:	2700      	movs	r7, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	bfcc      	ite	gt
 800cca0:	461e      	movgt	r6, r3
 800cca2:	2601      	movle	r6, #1
 800cca4:	4456      	add	r6, sl
 800cca6:	4649      	mov	r1, r9
 800cca8:	2201      	movs	r2, #1
 800ccaa:	4658      	mov	r0, fp
 800ccac:	f000 fba6 	bl	800d3fc <__lshift>
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	4681      	mov	r9, r0
 800ccb4:	f000 fc0e 	bl	800d4d4 <__mcmp>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	dcb0      	bgt.n	800cc1e <_dtoa_r+0xa5e>
 800ccbc:	d102      	bne.n	800ccc4 <_dtoa_r+0xb04>
 800ccbe:	f018 0f01 	tst.w	r8, #1
 800ccc2:	d1ac      	bne.n	800cc1e <_dtoa_r+0xa5e>
 800ccc4:	4633      	mov	r3, r6
 800ccc6:	461e      	mov	r6, r3
 800ccc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cccc:	2a30      	cmp	r2, #48	@ 0x30
 800ccce:	d0fa      	beq.n	800ccc6 <_dtoa_r+0xb06>
 800ccd0:	e5c2      	b.n	800c858 <_dtoa_r+0x698>
 800ccd2:	459a      	cmp	sl, r3
 800ccd4:	d1a4      	bne.n	800cc20 <_dtoa_r+0xa60>
 800ccd6:	9b04      	ldr	r3, [sp, #16]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	9304      	str	r3, [sp, #16]
 800ccdc:	2331      	movs	r3, #49	@ 0x31
 800ccde:	f88a 3000 	strb.w	r3, [sl]
 800cce2:	e5b9      	b.n	800c858 <_dtoa_r+0x698>
 800cce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cce6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cd44 <_dtoa_r+0xb84>
 800ccea:	b11b      	cbz	r3, 800ccf4 <_dtoa_r+0xb34>
 800ccec:	f10a 0308 	add.w	r3, sl, #8
 800ccf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	b019      	add	sp, #100	@ 0x64
 800ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	f77f ae37 	ble.w	800c972 <_dtoa_r+0x7b2>
 800cd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd06:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd08:	2001      	movs	r0, #1
 800cd0a:	e655      	b.n	800c9b8 <_dtoa_r+0x7f8>
 800cd0c:	9b00      	ldr	r3, [sp, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f77f aed6 	ble.w	800cac0 <_dtoa_r+0x900>
 800cd14:	4656      	mov	r6, sl
 800cd16:	4621      	mov	r1, r4
 800cd18:	4648      	mov	r0, r9
 800cd1a:	f7ff f9c3 	bl	800c0a4 <quorem>
 800cd1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd22:	9b00      	ldr	r3, [sp, #0]
 800cd24:	f806 8b01 	strb.w	r8, [r6], #1
 800cd28:	eba6 020a 	sub.w	r2, r6, sl
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	ddb3      	ble.n	800cc98 <_dtoa_r+0xad8>
 800cd30:	4649      	mov	r1, r9
 800cd32:	2300      	movs	r3, #0
 800cd34:	220a      	movs	r2, #10
 800cd36:	4658      	mov	r0, fp
 800cd38:	f000 f968 	bl	800d00c <__multadd>
 800cd3c:	4681      	mov	r9, r0
 800cd3e:	e7ea      	b.n	800cd16 <_dtoa_r+0xb56>
 800cd40:	0801000e 	.word	0x0801000e
 800cd44:	0800ff92 	.word	0x0800ff92

0800cd48 <_free_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	d041      	beq.n	800cdd4 <_free_r+0x8c>
 800cd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd54:	1f0c      	subs	r4, r1, #4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfb8      	it	lt
 800cd5a:	18e4      	addlt	r4, r4, r3
 800cd5c:	f000 f8e8 	bl	800cf30 <__malloc_lock>
 800cd60:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd8 <_free_r+0x90>)
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	b933      	cbnz	r3, 800cd74 <_free_r+0x2c>
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	6014      	str	r4, [r2, #0]
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd70:	f000 b8e4 	b.w	800cf3c <__malloc_unlock>
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d908      	bls.n	800cd8a <_free_r+0x42>
 800cd78:	6820      	ldr	r0, [r4, #0]
 800cd7a:	1821      	adds	r1, r4, r0
 800cd7c:	428b      	cmp	r3, r1
 800cd7e:	bf01      	itttt	eq
 800cd80:	6819      	ldreq	r1, [r3, #0]
 800cd82:	685b      	ldreq	r3, [r3, #4]
 800cd84:	1809      	addeq	r1, r1, r0
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	e7ed      	b.n	800cd66 <_free_r+0x1e>
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b10b      	cbz	r3, 800cd94 <_free_r+0x4c>
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d9fa      	bls.n	800cd8a <_free_r+0x42>
 800cd94:	6811      	ldr	r1, [r2, #0]
 800cd96:	1850      	adds	r0, r2, r1
 800cd98:	42a0      	cmp	r0, r4
 800cd9a:	d10b      	bne.n	800cdb4 <_free_r+0x6c>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	4401      	add	r1, r0
 800cda0:	1850      	adds	r0, r2, r1
 800cda2:	6011      	str	r1, [r2, #0]
 800cda4:	4283      	cmp	r3, r0
 800cda6:	d1e0      	bne.n	800cd6a <_free_r+0x22>
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	4408      	add	r0, r1
 800cdae:	6053      	str	r3, [r2, #4]
 800cdb0:	6010      	str	r0, [r2, #0]
 800cdb2:	e7da      	b.n	800cd6a <_free_r+0x22>
 800cdb4:	d902      	bls.n	800cdbc <_free_r+0x74>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	e7d6      	b.n	800cd6a <_free_r+0x22>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf02      	ittt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	1809      	addeq	r1, r1, r0
 800cdca:	6063      	str	r3, [r4, #4]
 800cdcc:	bf08      	it	eq
 800cdce:	6021      	streq	r1, [r4, #0]
 800cdd0:	6054      	str	r4, [r2, #4]
 800cdd2:	e7ca      	b.n	800cd6a <_free_r+0x22>
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	bf00      	nop
 800cdd8:	2003b3c0 	.word	0x2003b3c0

0800cddc <malloc>:
 800cddc:	4b02      	ldr	r3, [pc, #8]	@ (800cde8 <malloc+0xc>)
 800cdde:	4601      	mov	r1, r0
 800cde0:	6818      	ldr	r0, [r3, #0]
 800cde2:	f000 b825 	b.w	800ce30 <_malloc_r>
 800cde6:	bf00      	nop
 800cde8:	20000034 	.word	0x20000034

0800cdec <sbrk_aligned>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	4e0f      	ldr	r6, [pc, #60]	@ (800ce2c <sbrk_aligned+0x40>)
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	6831      	ldr	r1, [r6, #0]
 800cdf6:	b911      	cbnz	r1, 800cdfe <sbrk_aligned+0x12>
 800cdf8:	f001 fd9c 	bl	800e934 <_sbrk_r>
 800cdfc:	6030      	str	r0, [r6, #0]
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	f001 fd97 	bl	800e934 <_sbrk_r>
 800ce06:	1c43      	adds	r3, r0, #1
 800ce08:	d103      	bne.n	800ce12 <sbrk_aligned+0x26>
 800ce0a:	f04f 34ff 	mov.w	r4, #4294967295
 800ce0e:	4620      	mov	r0, r4
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	1cc4      	adds	r4, r0, #3
 800ce14:	f024 0403 	bic.w	r4, r4, #3
 800ce18:	42a0      	cmp	r0, r4
 800ce1a:	d0f8      	beq.n	800ce0e <sbrk_aligned+0x22>
 800ce1c:	1a21      	subs	r1, r4, r0
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f001 fd88 	bl	800e934 <_sbrk_r>
 800ce24:	3001      	adds	r0, #1
 800ce26:	d1f2      	bne.n	800ce0e <sbrk_aligned+0x22>
 800ce28:	e7ef      	b.n	800ce0a <sbrk_aligned+0x1e>
 800ce2a:	bf00      	nop
 800ce2c:	2003b3bc 	.word	0x2003b3bc

0800ce30 <_malloc_r>:
 800ce30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce34:	1ccd      	adds	r5, r1, #3
 800ce36:	4606      	mov	r6, r0
 800ce38:	f025 0503 	bic.w	r5, r5, #3
 800ce3c:	3508      	adds	r5, #8
 800ce3e:	2d0c      	cmp	r5, #12
 800ce40:	bf38      	it	cc
 800ce42:	250c      	movcc	r5, #12
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	db01      	blt.n	800ce4c <_malloc_r+0x1c>
 800ce48:	42a9      	cmp	r1, r5
 800ce4a:	d904      	bls.n	800ce56 <_malloc_r+0x26>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	6033      	str	r3, [r6, #0]
 800ce50:	2000      	movs	r0, #0
 800ce52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf2c <_malloc_r+0xfc>
 800ce5a:	f000 f869 	bl	800cf30 <__malloc_lock>
 800ce5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce62:	461c      	mov	r4, r3
 800ce64:	bb44      	cbnz	r4, 800ceb8 <_malloc_r+0x88>
 800ce66:	4629      	mov	r1, r5
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff ffbf 	bl	800cdec <sbrk_aligned>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	4604      	mov	r4, r0
 800ce72:	d158      	bne.n	800cf26 <_malloc_r+0xf6>
 800ce74:	f8d8 4000 	ldr.w	r4, [r8]
 800ce78:	4627      	mov	r7, r4
 800ce7a:	2f00      	cmp	r7, #0
 800ce7c:	d143      	bne.n	800cf06 <_malloc_r+0xd6>
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	d04b      	beq.n	800cf1a <_malloc_r+0xea>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	4639      	mov	r1, r7
 800ce86:	4630      	mov	r0, r6
 800ce88:	eb04 0903 	add.w	r9, r4, r3
 800ce8c:	f001 fd52 	bl	800e934 <_sbrk_r>
 800ce90:	4581      	cmp	r9, r0
 800ce92:	d142      	bne.n	800cf1a <_malloc_r+0xea>
 800ce94:	6821      	ldr	r1, [r4, #0]
 800ce96:	4630      	mov	r0, r6
 800ce98:	1a6d      	subs	r5, r5, r1
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	f7ff ffa6 	bl	800cdec <sbrk_aligned>
 800cea0:	3001      	adds	r0, #1
 800cea2:	d03a      	beq.n	800cf1a <_malloc_r+0xea>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	442b      	add	r3, r5
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	bb62      	cbnz	r2, 800cf0c <_malloc_r+0xdc>
 800ceb2:	f8c8 7000 	str.w	r7, [r8]
 800ceb6:	e00f      	b.n	800ced8 <_malloc_r+0xa8>
 800ceb8:	6822      	ldr	r2, [r4, #0]
 800ceba:	1b52      	subs	r2, r2, r5
 800cebc:	d420      	bmi.n	800cf00 <_malloc_r+0xd0>
 800cebe:	2a0b      	cmp	r2, #11
 800cec0:	d917      	bls.n	800cef2 <_malloc_r+0xc2>
 800cec2:	1961      	adds	r1, r4, r5
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	6025      	str	r5, [r4, #0]
 800cec8:	bf18      	it	ne
 800ceca:	6059      	strne	r1, [r3, #4]
 800cecc:	6863      	ldr	r3, [r4, #4]
 800cece:	bf08      	it	eq
 800ced0:	f8c8 1000 	streq.w	r1, [r8]
 800ced4:	5162      	str	r2, [r4, r5]
 800ced6:	604b      	str	r3, [r1, #4]
 800ced8:	4630      	mov	r0, r6
 800ceda:	f000 f82f 	bl	800cf3c <__malloc_unlock>
 800cede:	f104 000b 	add.w	r0, r4, #11
 800cee2:	1d23      	adds	r3, r4, #4
 800cee4:	f020 0007 	bic.w	r0, r0, #7
 800cee8:	1ac2      	subs	r2, r0, r3
 800ceea:	bf1c      	itt	ne
 800ceec:	1a1b      	subne	r3, r3, r0
 800ceee:	50a3      	strne	r3, [r4, r2]
 800cef0:	e7af      	b.n	800ce52 <_malloc_r+0x22>
 800cef2:	6862      	ldr	r2, [r4, #4]
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	bf0c      	ite	eq
 800cef8:	f8c8 2000 	streq.w	r2, [r8]
 800cefc:	605a      	strne	r2, [r3, #4]
 800cefe:	e7eb      	b.n	800ced8 <_malloc_r+0xa8>
 800cf00:	4623      	mov	r3, r4
 800cf02:	6864      	ldr	r4, [r4, #4]
 800cf04:	e7ae      	b.n	800ce64 <_malloc_r+0x34>
 800cf06:	463c      	mov	r4, r7
 800cf08:	687f      	ldr	r7, [r7, #4]
 800cf0a:	e7b6      	b.n	800ce7a <_malloc_r+0x4a>
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	d1fb      	bne.n	800cf0c <_malloc_r+0xdc>
 800cf14:	2300      	movs	r3, #0
 800cf16:	6053      	str	r3, [r2, #4]
 800cf18:	e7de      	b.n	800ced8 <_malloc_r+0xa8>
 800cf1a:	230c      	movs	r3, #12
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	6033      	str	r3, [r6, #0]
 800cf20:	f000 f80c 	bl	800cf3c <__malloc_unlock>
 800cf24:	e794      	b.n	800ce50 <_malloc_r+0x20>
 800cf26:	6005      	str	r5, [r0, #0]
 800cf28:	e7d6      	b.n	800ced8 <_malloc_r+0xa8>
 800cf2a:	bf00      	nop
 800cf2c:	2003b3c0 	.word	0x2003b3c0

0800cf30 <__malloc_lock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	@ (800cf38 <__malloc_lock+0x8>)
 800cf32:	f7ff b894 	b.w	800c05e <__retarget_lock_acquire_recursive>
 800cf36:	bf00      	nop
 800cf38:	2003b3b8 	.word	0x2003b3b8

0800cf3c <__malloc_unlock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	@ (800cf44 <__malloc_unlock+0x8>)
 800cf3e:	f7ff b88f 	b.w	800c060 <__retarget_lock_release_recursive>
 800cf42:	bf00      	nop
 800cf44:	2003b3b8 	.word	0x2003b3b8

0800cf48 <_Balloc>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	69c6      	ldr	r6, [r0, #28]
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	460d      	mov	r5, r1
 800cf50:	b976      	cbnz	r6, 800cf70 <_Balloc+0x28>
 800cf52:	2010      	movs	r0, #16
 800cf54:	f7ff ff42 	bl	800cddc <malloc>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	61e0      	str	r0, [r4, #28]
 800cf5c:	b920      	cbnz	r0, 800cf68 <_Balloc+0x20>
 800cf5e:	4b18      	ldr	r3, [pc, #96]	@ (800cfc0 <_Balloc+0x78>)
 800cf60:	216b      	movs	r1, #107	@ 0x6b
 800cf62:	4818      	ldr	r0, [pc, #96]	@ (800cfc4 <_Balloc+0x7c>)
 800cf64:	f001 fd00 	bl	800e968 <__assert_func>
 800cf68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf6c:	6006      	str	r6, [r0, #0]
 800cf6e:	60c6      	str	r6, [r0, #12]
 800cf70:	69e6      	ldr	r6, [r4, #28]
 800cf72:	68f3      	ldr	r3, [r6, #12]
 800cf74:	b183      	cbz	r3, 800cf98 <_Balloc+0x50>
 800cf76:	69e3      	ldr	r3, [r4, #28]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf7e:	b9b8      	cbnz	r0, 800cfb0 <_Balloc+0x68>
 800cf80:	2101      	movs	r1, #1
 800cf82:	4620      	mov	r0, r4
 800cf84:	fa01 f605 	lsl.w	r6, r1, r5
 800cf88:	1d72      	adds	r2, r6, #5
 800cf8a:	0092      	lsls	r2, r2, #2
 800cf8c:	f001 fd0a 	bl	800e9a4 <_calloc_r>
 800cf90:	b160      	cbz	r0, 800cfac <_Balloc+0x64>
 800cf92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf96:	e00e      	b.n	800cfb6 <_Balloc+0x6e>
 800cf98:	2221      	movs	r2, #33	@ 0x21
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f001 fd01 	bl	800e9a4 <_calloc_r>
 800cfa2:	69e3      	ldr	r3, [r4, #28]
 800cfa4:	60f0      	str	r0, [r6, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e4      	bne.n	800cf76 <_Balloc+0x2e>
 800cfac:	2000      	movs	r0, #0
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	6802      	ldr	r2, [r0, #0]
 800cfb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfbc:	e7f7      	b.n	800cfae <_Balloc+0x66>
 800cfbe:	bf00      	nop
 800cfc0:	0800ff9f 	.word	0x0800ff9f
 800cfc4:	0801001f 	.word	0x0801001f

0800cfc8 <_Bfree>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	69c6      	ldr	r6, [r0, #28]
 800cfcc:	4605      	mov	r5, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	b976      	cbnz	r6, 800cff0 <_Bfree+0x28>
 800cfd2:	2010      	movs	r0, #16
 800cfd4:	f7ff ff02 	bl	800cddc <malloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	61e8      	str	r0, [r5, #28]
 800cfdc:	b920      	cbnz	r0, 800cfe8 <_Bfree+0x20>
 800cfde:	4b09      	ldr	r3, [pc, #36]	@ (800d004 <_Bfree+0x3c>)
 800cfe0:	218f      	movs	r1, #143	@ 0x8f
 800cfe2:	4809      	ldr	r0, [pc, #36]	@ (800d008 <_Bfree+0x40>)
 800cfe4:	f001 fcc0 	bl	800e968 <__assert_func>
 800cfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfec:	6006      	str	r6, [r0, #0]
 800cfee:	60c6      	str	r6, [r0, #12]
 800cff0:	b13c      	cbz	r4, 800d002 <_Bfree+0x3a>
 800cff2:	69eb      	ldr	r3, [r5, #28]
 800cff4:	6862      	ldr	r2, [r4, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cffc:	6021      	str	r1, [r4, #0]
 800cffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	0800ff9f 	.word	0x0800ff9f
 800d008:	0801001f 	.word	0x0801001f

0800d00c <__multadd>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	f101 0c14 	add.w	ip, r1, #20
 800d014:	4607      	mov	r7, r0
 800d016:	460c      	mov	r4, r1
 800d018:	461e      	mov	r6, r3
 800d01a:	690d      	ldr	r5, [r1, #16]
 800d01c:	2000      	movs	r0, #0
 800d01e:	f8dc 3000 	ldr.w	r3, [ip]
 800d022:	3001      	adds	r0, #1
 800d024:	b299      	uxth	r1, r3
 800d026:	4285      	cmp	r5, r0
 800d028:	fb02 6101 	mla	r1, r2, r1, r6
 800d02c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d030:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d034:	b289      	uxth	r1, r1
 800d036:	fb02 3306 	mla	r3, r2, r6, r3
 800d03a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d042:	f84c 1b04 	str.w	r1, [ip], #4
 800d046:	dcea      	bgt.n	800d01e <__multadd+0x12>
 800d048:	b30e      	cbz	r6, 800d08e <__multadd+0x82>
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	42ab      	cmp	r3, r5
 800d04e:	dc19      	bgt.n	800d084 <__multadd+0x78>
 800d050:	6861      	ldr	r1, [r4, #4]
 800d052:	4638      	mov	r0, r7
 800d054:	3101      	adds	r1, #1
 800d056:	f7ff ff77 	bl	800cf48 <_Balloc>
 800d05a:	4680      	mov	r8, r0
 800d05c:	b928      	cbnz	r0, 800d06a <__multadd+0x5e>
 800d05e:	4602      	mov	r2, r0
 800d060:	4b0c      	ldr	r3, [pc, #48]	@ (800d094 <__multadd+0x88>)
 800d062:	21ba      	movs	r1, #186	@ 0xba
 800d064:	480c      	ldr	r0, [pc, #48]	@ (800d098 <__multadd+0x8c>)
 800d066:	f001 fc7f 	bl	800e968 <__assert_func>
 800d06a:	6922      	ldr	r2, [r4, #16]
 800d06c:	f104 010c 	add.w	r1, r4, #12
 800d070:	300c      	adds	r0, #12
 800d072:	3202      	adds	r2, #2
 800d074:	0092      	lsls	r2, r2, #2
 800d076:	f7ff f802 	bl	800c07e <memcpy>
 800d07a:	4621      	mov	r1, r4
 800d07c:	4644      	mov	r4, r8
 800d07e:	4638      	mov	r0, r7
 800d080:	f7ff ffa2 	bl	800cfc8 <_Bfree>
 800d084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d088:	3501      	adds	r5, #1
 800d08a:	615e      	str	r6, [r3, #20]
 800d08c:	6125      	str	r5, [r4, #16]
 800d08e:	4620      	mov	r0, r4
 800d090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d094:	0801000e 	.word	0x0801000e
 800d098:	0801001f 	.word	0x0801001f

0800d09c <__s2b>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	4615      	mov	r5, r2
 800d0a2:	461f      	mov	r7, r3
 800d0a4:	2209      	movs	r2, #9
 800d0a6:	3308      	adds	r3, #8
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	db09      	blt.n	800d0cc <__s2b+0x30>
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7ff ff45 	bl	800cf48 <_Balloc>
 800d0be:	b940      	cbnz	r0, 800d0d2 <__s2b+0x36>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	4b19      	ldr	r3, [pc, #100]	@ (800d128 <__s2b+0x8c>)
 800d0c4:	21d3      	movs	r1, #211	@ 0xd3
 800d0c6:	4819      	ldr	r0, [pc, #100]	@ (800d12c <__s2b+0x90>)
 800d0c8:	f001 fc4e 	bl	800e968 <__assert_func>
 800d0cc:	0052      	lsls	r2, r2, #1
 800d0ce:	3101      	adds	r1, #1
 800d0d0:	e7f0      	b.n	800d0b4 <__s2b+0x18>
 800d0d2:	9b08      	ldr	r3, [sp, #32]
 800d0d4:	2d09      	cmp	r5, #9
 800d0d6:	6143      	str	r3, [r0, #20]
 800d0d8:	f04f 0301 	mov.w	r3, #1
 800d0dc:	6103      	str	r3, [r0, #16]
 800d0de:	dd16      	ble.n	800d10e <__s2b+0x72>
 800d0e0:	f104 0909 	add.w	r9, r4, #9
 800d0e4:	442c      	add	r4, r5
 800d0e6:	46c8      	mov	r8, r9
 800d0e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0ec:	4601      	mov	r1, r0
 800d0ee:	220a      	movs	r2, #10
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	3b30      	subs	r3, #48	@ 0x30
 800d0f4:	f7ff ff8a 	bl	800d00c <__multadd>
 800d0f8:	45a0      	cmp	r8, r4
 800d0fa:	d1f5      	bne.n	800d0e8 <__s2b+0x4c>
 800d0fc:	f1a5 0408 	sub.w	r4, r5, #8
 800d100:	444c      	add	r4, r9
 800d102:	1b2d      	subs	r5, r5, r4
 800d104:	1963      	adds	r3, r4, r5
 800d106:	42bb      	cmp	r3, r7
 800d108:	db04      	blt.n	800d114 <__s2b+0x78>
 800d10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10e:	340a      	adds	r4, #10
 800d110:	2509      	movs	r5, #9
 800d112:	e7f6      	b.n	800d102 <__s2b+0x66>
 800d114:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d118:	4601      	mov	r1, r0
 800d11a:	220a      	movs	r2, #10
 800d11c:	4630      	mov	r0, r6
 800d11e:	3b30      	subs	r3, #48	@ 0x30
 800d120:	f7ff ff74 	bl	800d00c <__multadd>
 800d124:	e7ee      	b.n	800d104 <__s2b+0x68>
 800d126:	bf00      	nop
 800d128:	0801000e 	.word	0x0801000e
 800d12c:	0801001f 	.word	0x0801001f

0800d130 <__hi0bits>:
 800d130:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d134:	4603      	mov	r3, r0
 800d136:	bf36      	itet	cc
 800d138:	0403      	lslcc	r3, r0, #16
 800d13a:	2000      	movcs	r0, #0
 800d13c:	2010      	movcc	r0, #16
 800d13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d142:	bf3c      	itt	cc
 800d144:	021b      	lslcc	r3, r3, #8
 800d146:	3008      	addcc	r0, #8
 800d148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d14c:	bf3c      	itt	cc
 800d14e:	011b      	lslcc	r3, r3, #4
 800d150:	3004      	addcc	r0, #4
 800d152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d156:	bf3c      	itt	cc
 800d158:	009b      	lslcc	r3, r3, #2
 800d15a:	3002      	addcc	r0, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	db05      	blt.n	800d16c <__hi0bits+0x3c>
 800d160:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d164:	f100 0001 	add.w	r0, r0, #1
 800d168:	bf08      	it	eq
 800d16a:	2020      	moveq	r0, #32
 800d16c:	4770      	bx	lr

0800d16e <__lo0bits>:
 800d16e:	6803      	ldr	r3, [r0, #0]
 800d170:	4602      	mov	r2, r0
 800d172:	f013 0007 	ands.w	r0, r3, #7
 800d176:	d00b      	beq.n	800d190 <__lo0bits+0x22>
 800d178:	07d9      	lsls	r1, r3, #31
 800d17a:	d421      	bmi.n	800d1c0 <__lo0bits+0x52>
 800d17c:	0798      	lsls	r0, r3, #30
 800d17e:	bf47      	ittee	mi
 800d180:	085b      	lsrmi	r3, r3, #1
 800d182:	2001      	movmi	r0, #1
 800d184:	089b      	lsrpl	r3, r3, #2
 800d186:	2002      	movpl	r0, #2
 800d188:	bf4c      	ite	mi
 800d18a:	6013      	strmi	r3, [r2, #0]
 800d18c:	6013      	strpl	r3, [r2, #0]
 800d18e:	4770      	bx	lr
 800d190:	b299      	uxth	r1, r3
 800d192:	b909      	cbnz	r1, 800d198 <__lo0bits+0x2a>
 800d194:	0c1b      	lsrs	r3, r3, #16
 800d196:	2010      	movs	r0, #16
 800d198:	b2d9      	uxtb	r1, r3
 800d19a:	b909      	cbnz	r1, 800d1a0 <__lo0bits+0x32>
 800d19c:	3008      	adds	r0, #8
 800d19e:	0a1b      	lsrs	r3, r3, #8
 800d1a0:	0719      	lsls	r1, r3, #28
 800d1a2:	bf04      	itt	eq
 800d1a4:	091b      	lsreq	r3, r3, #4
 800d1a6:	3004      	addeq	r0, #4
 800d1a8:	0799      	lsls	r1, r3, #30
 800d1aa:	bf04      	itt	eq
 800d1ac:	089b      	lsreq	r3, r3, #2
 800d1ae:	3002      	addeq	r0, #2
 800d1b0:	07d9      	lsls	r1, r3, #31
 800d1b2:	d403      	bmi.n	800d1bc <__lo0bits+0x4e>
 800d1b4:	085b      	lsrs	r3, r3, #1
 800d1b6:	f100 0001 	add.w	r0, r0, #1
 800d1ba:	d003      	beq.n	800d1c4 <__lo0bits+0x56>
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	4770      	bx	lr
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	4770      	bx	lr
 800d1c4:	2020      	movs	r0, #32
 800d1c6:	4770      	bx	lr

0800d1c8 <__i2b>:
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	f7ff febb 	bl	800cf48 <_Balloc>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	b928      	cbnz	r0, 800d1e2 <__i2b+0x1a>
 800d1d6:	4b05      	ldr	r3, [pc, #20]	@ (800d1ec <__i2b+0x24>)
 800d1d8:	f240 1145 	movw	r1, #325	@ 0x145
 800d1dc:	4804      	ldr	r0, [pc, #16]	@ (800d1f0 <__i2b+0x28>)
 800d1de:	f001 fbc3 	bl	800e968 <__assert_func>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	6144      	str	r4, [r0, #20]
 800d1e6:	6103      	str	r3, [r0, #16]
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0801000e 	.word	0x0801000e
 800d1f0:	0801001f 	.word	0x0801001f

0800d1f4 <__multiply>:
 800d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	690a      	ldr	r2, [r1, #16]
 800d1fc:	460f      	mov	r7, r1
 800d1fe:	b085      	sub	sp, #20
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	429a      	cmp	r2, r3
 800d204:	bfa2      	ittt	ge
 800d206:	4623      	movge	r3, r4
 800d208:	460c      	movge	r4, r1
 800d20a:	461f      	movge	r7, r3
 800d20c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d210:	68a3      	ldr	r3, [r4, #8]
 800d212:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d216:	6861      	ldr	r1, [r4, #4]
 800d218:	eb0a 0609 	add.w	r6, sl, r9
 800d21c:	42b3      	cmp	r3, r6
 800d21e:	bfb8      	it	lt
 800d220:	3101      	addlt	r1, #1
 800d222:	f7ff fe91 	bl	800cf48 <_Balloc>
 800d226:	b930      	cbnz	r0, 800d236 <__multiply+0x42>
 800d228:	4602      	mov	r2, r0
 800d22a:	4b45      	ldr	r3, [pc, #276]	@ (800d340 <__multiply+0x14c>)
 800d22c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d230:	4844      	ldr	r0, [pc, #272]	@ (800d344 <__multiply+0x150>)
 800d232:	f001 fb99 	bl	800e968 <__assert_func>
 800d236:	f100 0514 	add.w	r5, r0, #20
 800d23a:	2200      	movs	r2, #0
 800d23c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d240:	462b      	mov	r3, r5
 800d242:	4543      	cmp	r3, r8
 800d244:	d321      	bcc.n	800d28a <__multiply+0x96>
 800d246:	f107 0114 	add.w	r1, r7, #20
 800d24a:	f104 0214 	add.w	r2, r4, #20
 800d24e:	f104 0715 	add.w	r7, r4, #21
 800d252:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d256:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	1b13      	subs	r3, r2, r4
 800d25e:	3b15      	subs	r3, #21
 800d260:	f023 0303 	bic.w	r3, r3, #3
 800d264:	3304      	adds	r3, #4
 800d266:	42ba      	cmp	r2, r7
 800d268:	bf38      	it	cc
 800d26a:	2304      	movcc	r3, #4
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	9103      	str	r1, [sp, #12]
 800d272:	428b      	cmp	r3, r1
 800d274:	d80c      	bhi.n	800d290 <__multiply+0x9c>
 800d276:	2e00      	cmp	r6, #0
 800d278:	dd03      	ble.n	800d282 <__multiply+0x8e>
 800d27a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d05b      	beq.n	800d33a <__multiply+0x146>
 800d282:	6106      	str	r6, [r0, #16]
 800d284:	b005      	add	sp, #20
 800d286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28a:	f843 2b04 	str.w	r2, [r3], #4
 800d28e:	e7d8      	b.n	800d242 <__multiply+0x4e>
 800d290:	f8b1 a000 	ldrh.w	sl, [r1]
 800d294:	f1ba 0f00 	cmp.w	sl, #0
 800d298:	d024      	beq.n	800d2e4 <__multiply+0xf0>
 800d29a:	f104 0e14 	add.w	lr, r4, #20
 800d29e:	46a9      	mov	r9, r5
 800d2a0:	f04f 0c00 	mov.w	ip, #0
 800d2a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2a8:	f8d9 3000 	ldr.w	r3, [r9]
 800d2ac:	fa1f fb87 	uxth.w	fp, r7
 800d2b0:	4572      	cmp	r2, lr
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d2b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d2bc:	f8d9 7000 	ldr.w	r7, [r9]
 800d2c0:	4463      	add	r3, ip
 800d2c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d2ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2d8:	f849 3b04 	str.w	r3, [r9], #4
 800d2dc:	d8e2      	bhi.n	800d2a4 <__multiply+0xb0>
 800d2de:	9b01      	ldr	r3, [sp, #4]
 800d2e0:	f845 c003 	str.w	ip, [r5, r3]
 800d2e4:	9b03      	ldr	r3, [sp, #12]
 800d2e6:	3104      	adds	r1, #4
 800d2e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d2ec:	f1b9 0f00 	cmp.w	r9, #0
 800d2f0:	d021      	beq.n	800d336 <__multiply+0x142>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	f104 0c14 	add.w	ip, r4, #20
 800d2f8:	46ae      	mov	lr, r5
 800d2fa:	f04f 0a00 	mov.w	sl, #0
 800d2fe:	f8bc b000 	ldrh.w	fp, [ip]
 800d302:	b29b      	uxth	r3, r3
 800d304:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d308:	fb09 770b 	mla	r7, r9, fp, r7
 800d30c:	4457      	add	r7, sl
 800d30e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d312:	f84e 3b04 	str.w	r3, [lr], #4
 800d316:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d31a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d31e:	f8be 3000 	ldrh.w	r3, [lr]
 800d322:	4562      	cmp	r2, ip
 800d324:	fb09 330a 	mla	r3, r9, sl, r3
 800d328:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d32c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d330:	d8e5      	bhi.n	800d2fe <__multiply+0x10a>
 800d332:	9f01      	ldr	r7, [sp, #4]
 800d334:	51eb      	str	r3, [r5, r7]
 800d336:	3504      	adds	r5, #4
 800d338:	e799      	b.n	800d26e <__multiply+0x7a>
 800d33a:	3e01      	subs	r6, #1
 800d33c:	e79b      	b.n	800d276 <__multiply+0x82>
 800d33e:	bf00      	nop
 800d340:	0801000e 	.word	0x0801000e
 800d344:	0801001f 	.word	0x0801001f

0800d348 <__pow5mult>:
 800d348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d34c:	4615      	mov	r5, r2
 800d34e:	f012 0203 	ands.w	r2, r2, #3
 800d352:	4607      	mov	r7, r0
 800d354:	460e      	mov	r6, r1
 800d356:	d007      	beq.n	800d368 <__pow5mult+0x20>
 800d358:	3a01      	subs	r2, #1
 800d35a:	4c25      	ldr	r4, [pc, #148]	@ (800d3f0 <__pow5mult+0xa8>)
 800d35c:	2300      	movs	r3, #0
 800d35e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d362:	f7ff fe53 	bl	800d00c <__multadd>
 800d366:	4606      	mov	r6, r0
 800d368:	10ad      	asrs	r5, r5, #2
 800d36a:	d03d      	beq.n	800d3e8 <__pow5mult+0xa0>
 800d36c:	69fc      	ldr	r4, [r7, #28]
 800d36e:	b97c      	cbnz	r4, 800d390 <__pow5mult+0x48>
 800d370:	2010      	movs	r0, #16
 800d372:	f7ff fd33 	bl	800cddc <malloc>
 800d376:	4602      	mov	r2, r0
 800d378:	61f8      	str	r0, [r7, #28]
 800d37a:	b928      	cbnz	r0, 800d388 <__pow5mult+0x40>
 800d37c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f4 <__pow5mult+0xac>)
 800d37e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d382:	481d      	ldr	r0, [pc, #116]	@ (800d3f8 <__pow5mult+0xb0>)
 800d384:	f001 faf0 	bl	800e968 <__assert_func>
 800d388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d38c:	6004      	str	r4, [r0, #0]
 800d38e:	60c4      	str	r4, [r0, #12]
 800d390:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d398:	b94c      	cbnz	r4, 800d3ae <__pow5mult+0x66>
 800d39a:	f240 2171 	movw	r1, #625	@ 0x271
 800d39e:	4638      	mov	r0, r7
 800d3a0:	f7ff ff12 	bl	800d1c8 <__i2b>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ac:	6003      	str	r3, [r0, #0]
 800d3ae:	f04f 0900 	mov.w	r9, #0
 800d3b2:	07eb      	lsls	r3, r5, #31
 800d3b4:	d50a      	bpl.n	800d3cc <__pow5mult+0x84>
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f7ff ff1a 	bl	800d1f4 <__multiply>
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	4646      	mov	r6, r8
 800d3c8:	f7ff fdfe 	bl	800cfc8 <_Bfree>
 800d3cc:	106d      	asrs	r5, r5, #1
 800d3ce:	d00b      	beq.n	800d3e8 <__pow5mult+0xa0>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	b938      	cbnz	r0, 800d3e4 <__pow5mult+0x9c>
 800d3d4:	4622      	mov	r2, r4
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f7ff ff0b 	bl	800d1f4 <__multiply>
 800d3de:	6020      	str	r0, [r4, #0]
 800d3e0:	f8c0 9000 	str.w	r9, [r0]
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	e7e4      	b.n	800d3b2 <__pow5mult+0x6a>
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ee:	bf00      	nop
 800d3f0:	08010078 	.word	0x08010078
 800d3f4:	0800ff9f 	.word	0x0800ff9f
 800d3f8:	0801001f 	.word	0x0801001f

0800d3fc <__lshift>:
 800d3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	460c      	mov	r4, r1
 800d402:	4607      	mov	r7, r0
 800d404:	4691      	mov	r9, r2
 800d406:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	6849      	ldr	r1, [r1, #4]
 800d40e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	f108 0601 	add.w	r6, r8, #1
 800d418:	42b3      	cmp	r3, r6
 800d41a:	db0b      	blt.n	800d434 <__lshift+0x38>
 800d41c:	4638      	mov	r0, r7
 800d41e:	f7ff fd93 	bl	800cf48 <_Balloc>
 800d422:	4605      	mov	r5, r0
 800d424:	b948      	cbnz	r0, 800d43a <__lshift+0x3e>
 800d426:	4602      	mov	r2, r0
 800d428:	4b28      	ldr	r3, [pc, #160]	@ (800d4cc <__lshift+0xd0>)
 800d42a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d42e:	4828      	ldr	r0, [pc, #160]	@ (800d4d0 <__lshift+0xd4>)
 800d430:	f001 fa9a 	bl	800e968 <__assert_func>
 800d434:	3101      	adds	r1, #1
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	e7ee      	b.n	800d418 <__lshift+0x1c>
 800d43a:	2300      	movs	r3, #0
 800d43c:	f100 0114 	add.w	r1, r0, #20
 800d440:	f100 0210 	add.w	r2, r0, #16
 800d444:	4618      	mov	r0, r3
 800d446:	4553      	cmp	r3, sl
 800d448:	db33      	blt.n	800d4b2 <__lshift+0xb6>
 800d44a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d44e:	f104 0314 	add.w	r3, r4, #20
 800d452:	6920      	ldr	r0, [r4, #16]
 800d454:	f019 091f 	ands.w	r9, r9, #31
 800d458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d45c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d460:	d02b      	beq.n	800d4ba <__lshift+0xbe>
 800d462:	f1c9 0e20 	rsb	lr, r9, #32
 800d466:	468a      	mov	sl, r1
 800d468:	2200      	movs	r2, #0
 800d46a:	6818      	ldr	r0, [r3, #0]
 800d46c:	fa00 f009 	lsl.w	r0, r0, r9
 800d470:	4310      	orrs	r0, r2
 800d472:	f84a 0b04 	str.w	r0, [sl], #4
 800d476:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47a:	459c      	cmp	ip, r3
 800d47c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d480:	d8f3      	bhi.n	800d46a <__lshift+0x6e>
 800d482:	ebac 0304 	sub.w	r3, ip, r4
 800d486:	f104 0015 	add.w	r0, r4, #21
 800d48a:	3b15      	subs	r3, #21
 800d48c:	f023 0303 	bic.w	r3, r3, #3
 800d490:	3304      	adds	r3, #4
 800d492:	4584      	cmp	ip, r0
 800d494:	bf38      	it	cc
 800d496:	2304      	movcc	r3, #4
 800d498:	50ca      	str	r2, [r1, r3]
 800d49a:	b10a      	cbz	r2, 800d4a0 <__lshift+0xa4>
 800d49c:	f108 0602 	add.w	r6, r8, #2
 800d4a0:	3e01      	subs	r6, #1
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	612e      	str	r6, [r5, #16]
 800d4a8:	f7ff fd8e 	bl	800cfc8 <_Bfree>
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4b8:	e7c5      	b.n	800d446 <__lshift+0x4a>
 800d4ba:	3904      	subs	r1, #4
 800d4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c0:	459c      	cmp	ip, r3
 800d4c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4c6:	d8f9      	bhi.n	800d4bc <__lshift+0xc0>
 800d4c8:	e7ea      	b.n	800d4a0 <__lshift+0xa4>
 800d4ca:	bf00      	nop
 800d4cc:	0801000e 	.word	0x0801000e
 800d4d0:	0801001f 	.word	0x0801001f

0800d4d4 <__mcmp>:
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	690a      	ldr	r2, [r1, #16]
 800d4d8:	6900      	ldr	r0, [r0, #16]
 800d4da:	1a80      	subs	r0, r0, r2
 800d4dc:	b530      	push	{r4, r5, lr}
 800d4de:	d10e      	bne.n	800d4fe <__mcmp+0x2a>
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	3114      	adds	r1, #20
 800d4e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d4e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4f4:	4295      	cmp	r5, r2
 800d4f6:	d003      	beq.n	800d500 <__mcmp+0x2c>
 800d4f8:	d205      	bcs.n	800d506 <__mcmp+0x32>
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	bd30      	pop	{r4, r5, pc}
 800d500:	42a3      	cmp	r3, r4
 800d502:	d3f3      	bcc.n	800d4ec <__mcmp+0x18>
 800d504:	e7fb      	b.n	800d4fe <__mcmp+0x2a>
 800d506:	2001      	movs	r0, #1
 800d508:	e7f9      	b.n	800d4fe <__mcmp+0x2a>
	...

0800d50c <__mdiff>:
 800d50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	4689      	mov	r9, r1
 800d512:	4606      	mov	r6, r0
 800d514:	4611      	mov	r1, r2
 800d516:	4614      	mov	r4, r2
 800d518:	4648      	mov	r0, r9
 800d51a:	f7ff ffdb 	bl	800d4d4 <__mcmp>
 800d51e:	1e05      	subs	r5, r0, #0
 800d520:	d112      	bne.n	800d548 <__mdiff+0x3c>
 800d522:	4629      	mov	r1, r5
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff fd0f 	bl	800cf48 <_Balloc>
 800d52a:	4602      	mov	r2, r0
 800d52c:	b928      	cbnz	r0, 800d53a <__mdiff+0x2e>
 800d52e:	4b41      	ldr	r3, [pc, #260]	@ (800d634 <__mdiff+0x128>)
 800d530:	f240 2137 	movw	r1, #567	@ 0x237
 800d534:	4840      	ldr	r0, [pc, #256]	@ (800d638 <__mdiff+0x12c>)
 800d536:	f001 fa17 	bl	800e968 <__assert_func>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d540:	4610      	mov	r0, r2
 800d542:	b003      	add	sp, #12
 800d544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d548:	bfbc      	itt	lt
 800d54a:	464b      	movlt	r3, r9
 800d54c:	46a1      	movlt	r9, r4
 800d54e:	4630      	mov	r0, r6
 800d550:	bfb8      	it	lt
 800d552:	2501      	movlt	r5, #1
 800d554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d558:	bfb4      	ite	lt
 800d55a:	461c      	movlt	r4, r3
 800d55c:	2500      	movge	r5, #0
 800d55e:	f7ff fcf3 	bl	800cf48 <_Balloc>
 800d562:	4602      	mov	r2, r0
 800d564:	b918      	cbnz	r0, 800d56e <__mdiff+0x62>
 800d566:	4b33      	ldr	r3, [pc, #204]	@ (800d634 <__mdiff+0x128>)
 800d568:	f240 2145 	movw	r1, #581	@ 0x245
 800d56c:	e7e2      	b.n	800d534 <__mdiff+0x28>
 800d56e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d572:	f104 0e14 	add.w	lr, r4, #20
 800d576:	6926      	ldr	r6, [r4, #16]
 800d578:	f100 0b14 	add.w	fp, r0, #20
 800d57c:	60c5      	str	r5, [r0, #12]
 800d57e:	f109 0514 	add.w	r5, r9, #20
 800d582:	f109 0310 	add.w	r3, r9, #16
 800d586:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d58a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d58e:	46d9      	mov	r9, fp
 800d590:	f04f 0c00 	mov.w	ip, #0
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d59c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5a0:	4576      	cmp	r6, lr
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	fa1f f38a 	uxth.w	r3, sl
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	b283      	uxth	r3, r0
 800d5ac:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d5b0:	eba1 0303 	sub.w	r3, r1, r3
 800d5b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5b8:	4463      	add	r3, ip
 800d5ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d5c8:	f849 3b04 	str.w	r3, [r9], #4
 800d5cc:	d8e3      	bhi.n	800d596 <__mdiff+0x8a>
 800d5ce:	1b33      	subs	r3, r6, r4
 800d5d0:	3415      	adds	r4, #21
 800d5d2:	3b15      	subs	r3, #21
 800d5d4:	f023 0303 	bic.w	r3, r3, #3
 800d5d8:	3304      	adds	r3, #4
 800d5da:	42a6      	cmp	r6, r4
 800d5dc:	bf38      	it	cc
 800d5de:	2304      	movcc	r3, #4
 800d5e0:	441d      	add	r5, r3
 800d5e2:	445b      	add	r3, fp
 800d5e4:	462c      	mov	r4, r5
 800d5e6:	461e      	mov	r6, r3
 800d5e8:	4544      	cmp	r4, r8
 800d5ea:	d30e      	bcc.n	800d60a <__mdiff+0xfe>
 800d5ec:	f108 0103 	add.w	r1, r8, #3
 800d5f0:	1b49      	subs	r1, r1, r5
 800d5f2:	3d03      	subs	r5, #3
 800d5f4:	f021 0103 	bic.w	r1, r1, #3
 800d5f8:	45a8      	cmp	r8, r5
 800d5fa:	bf38      	it	cc
 800d5fc:	2100      	movcc	r1, #0
 800d5fe:	440b      	add	r3, r1
 800d600:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d604:	b199      	cbz	r1, 800d62e <__mdiff+0x122>
 800d606:	6117      	str	r7, [r2, #16]
 800d608:	e79a      	b.n	800d540 <__mdiff+0x34>
 800d60a:	f854 1b04 	ldr.w	r1, [r4], #4
 800d60e:	46e6      	mov	lr, ip
 800d610:	fa1f fc81 	uxth.w	ip, r1
 800d614:	0c08      	lsrs	r0, r1, #16
 800d616:	4471      	add	r1, lr
 800d618:	44f4      	add	ip, lr
 800d61a:	b289      	uxth	r1, r1
 800d61c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d620:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d628:	f846 1b04 	str.w	r1, [r6], #4
 800d62c:	e7dc      	b.n	800d5e8 <__mdiff+0xdc>
 800d62e:	3f01      	subs	r7, #1
 800d630:	e7e6      	b.n	800d600 <__mdiff+0xf4>
 800d632:	bf00      	nop
 800d634:	0801000e 	.word	0x0801000e
 800d638:	0801001f 	.word	0x0801001f

0800d63c <__ulp>:
 800d63c:	b082      	sub	sp, #8
 800d63e:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <__ulp+0x48>)
 800d640:	ed8d 0b00 	vstr	d0, [sp]
 800d644:	9a01      	ldr	r2, [sp, #4]
 800d646:	4013      	ands	r3, r2
 800d648:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	dc08      	bgt.n	800d662 <__ulp+0x26>
 800d650:	425b      	negs	r3, r3
 800d652:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d656:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d65a:	da04      	bge.n	800d666 <__ulp+0x2a>
 800d65c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d660:	4113      	asrs	r3, r2
 800d662:	2200      	movs	r2, #0
 800d664:	e008      	b.n	800d678 <__ulp+0x3c>
 800d666:	f1a2 0314 	sub.w	r3, r2, #20
 800d66a:	2b1e      	cmp	r3, #30
 800d66c:	bfd6      	itet	le
 800d66e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d672:	2201      	movgt	r2, #1
 800d674:	40da      	lsrle	r2, r3
 800d676:	2300      	movs	r3, #0
 800d678:	4619      	mov	r1, r3
 800d67a:	4610      	mov	r0, r2
 800d67c:	ec41 0b10 	vmov	d0, r0, r1
 800d680:	b002      	add	sp, #8
 800d682:	4770      	bx	lr
 800d684:	7ff00000 	.word	0x7ff00000

0800d688 <__b2d>:
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	6906      	ldr	r6, [r0, #16]
 800d68e:	f100 0814 	add.w	r8, r0, #20
 800d692:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d696:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d69a:	1f37      	subs	r7, r6, #4
 800d69c:	4610      	mov	r0, r2
 800d69e:	f7ff fd47 	bl	800d130 <__hi0bits>
 800d6a2:	f1c0 0320 	rsb	r3, r0, #32
 800d6a6:	280a      	cmp	r0, #10
 800d6a8:	600b      	str	r3, [r1, #0]
 800d6aa:	491d      	ldr	r1, [pc, #116]	@ (800d720 <__b2d+0x98>)
 800d6ac:	dc16      	bgt.n	800d6dc <__b2d+0x54>
 800d6ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800d6b2:	45b8      	cmp	r8, r7
 800d6b4:	f100 0015 	add.w	r0, r0, #21
 800d6b8:	fa22 f30c 	lsr.w	r3, r2, ip
 800d6bc:	fa02 f000 	lsl.w	r0, r2, r0
 800d6c0:	ea43 0501 	orr.w	r5, r3, r1
 800d6c4:	bf34      	ite	cc
 800d6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6ca:	2300      	movcs	r3, #0
 800d6cc:	fa23 f30c 	lsr.w	r3, r3, ip
 800d6d0:	4303      	orrs	r3, r0
 800d6d2:	461c      	mov	r4, r3
 800d6d4:	ec45 4b10 	vmov	d0, r4, r5
 800d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6dc:	45b8      	cmp	r8, r7
 800d6de:	bf3a      	itte	cc
 800d6e0:	f1a6 0708 	subcc.w	r7, r6, #8
 800d6e4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6e8:	2300      	movcs	r3, #0
 800d6ea:	380b      	subs	r0, #11
 800d6ec:	d014      	beq.n	800d718 <__b2d+0x90>
 800d6ee:	f1c0 0120 	rsb	r1, r0, #32
 800d6f2:	4082      	lsls	r2, r0
 800d6f4:	4547      	cmp	r7, r8
 800d6f6:	fa23 f401 	lsr.w	r4, r3, r1
 800d6fa:	fa03 f300 	lsl.w	r3, r3, r0
 800d6fe:	ea42 0204 	orr.w	r2, r2, r4
 800d702:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d706:	bf8c      	ite	hi
 800d708:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d70c:	2200      	movls	r2, #0
 800d70e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d712:	40ca      	lsrs	r2, r1
 800d714:	4313      	orrs	r3, r2
 800d716:	e7dc      	b.n	800d6d2 <__b2d+0x4a>
 800d718:	ea42 0501 	orr.w	r5, r2, r1
 800d71c:	e7d9      	b.n	800d6d2 <__b2d+0x4a>
 800d71e:	bf00      	nop
 800d720:	3ff00000 	.word	0x3ff00000

0800d724 <__d2b>:
 800d724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d728:	460f      	mov	r7, r1
 800d72a:	2101      	movs	r1, #1
 800d72c:	4616      	mov	r6, r2
 800d72e:	ec59 8b10 	vmov	r8, r9, d0
 800d732:	f7ff fc09 	bl	800cf48 <_Balloc>
 800d736:	4604      	mov	r4, r0
 800d738:	b930      	cbnz	r0, 800d748 <__d2b+0x24>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b23      	ldr	r3, [pc, #140]	@ (800d7cc <__d2b+0xa8>)
 800d73e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d742:	4823      	ldr	r0, [pc, #140]	@ (800d7d0 <__d2b+0xac>)
 800d744:	f001 f910 	bl	800e968 <__assert_func>
 800d748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d74c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d750:	b10d      	cbz	r5, 800d756 <__d2b+0x32>
 800d752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	f1b8 0300 	subs.w	r3, r8, #0
 800d75c:	d023      	beq.n	800d7a6 <__d2b+0x82>
 800d75e:	4668      	mov	r0, sp
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	f7ff fd04 	bl	800d16e <__lo0bits>
 800d766:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d76a:	b1d0      	cbz	r0, 800d7a2 <__d2b+0x7e>
 800d76c:	f1c0 0320 	rsb	r3, r0, #32
 800d770:	fa02 f303 	lsl.w	r3, r2, r3
 800d774:	40c2      	lsrs	r2, r0
 800d776:	430b      	orrs	r3, r1
 800d778:	9201      	str	r2, [sp, #4]
 800d77a:	6163      	str	r3, [r4, #20]
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	61a3      	str	r3, [r4, #24]
 800d782:	bf0c      	ite	eq
 800d784:	2201      	moveq	r2, #1
 800d786:	2202      	movne	r2, #2
 800d788:	6122      	str	r2, [r4, #16]
 800d78a:	b1a5      	cbz	r5, 800d7b6 <__d2b+0x92>
 800d78c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d790:	4405      	add	r5, r0
 800d792:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d796:	603d      	str	r5, [r7, #0]
 800d798:	6030      	str	r0, [r6, #0]
 800d79a:	4620      	mov	r0, r4
 800d79c:	b003      	add	sp, #12
 800d79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	6161      	str	r1, [r4, #20]
 800d7a4:	e7ea      	b.n	800d77c <__d2b+0x58>
 800d7a6:	a801      	add	r0, sp, #4
 800d7a8:	f7ff fce1 	bl	800d16e <__lo0bits>
 800d7ac:	9b01      	ldr	r3, [sp, #4]
 800d7ae:	3020      	adds	r0, #32
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	6163      	str	r3, [r4, #20]
 800d7b4:	e7e8      	b.n	800d788 <__d2b+0x64>
 800d7b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7be:	6038      	str	r0, [r7, #0]
 800d7c0:	6918      	ldr	r0, [r3, #16]
 800d7c2:	f7ff fcb5 	bl	800d130 <__hi0bits>
 800d7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7ca:	e7e5      	b.n	800d798 <__d2b+0x74>
 800d7cc:	0801000e 	.word	0x0801000e
 800d7d0:	0801001f 	.word	0x0801001f

0800d7d4 <__ratio>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	e9cd 1000 	strd	r1, r0, [sp]
 800d7de:	a902      	add	r1, sp, #8
 800d7e0:	f7ff ff52 	bl	800d688 <__b2d>
 800d7e4:	a903      	add	r1, sp, #12
 800d7e6:	9800      	ldr	r0, [sp, #0]
 800d7e8:	ec55 4b10 	vmov	r4, r5, d0
 800d7ec:	f7ff ff4c 	bl	800d688 <__b2d>
 800d7f0:	9b01      	ldr	r3, [sp, #4]
 800d7f2:	462f      	mov	r7, r5
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	6919      	ldr	r1, [r3, #16]
 800d7f8:	9b00      	ldr	r3, [sp, #0]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	1ac9      	subs	r1, r1, r3
 800d7fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d802:	ec5b ab10 	vmov	sl, fp, d0
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	46d9      	mov	r9, fp
 800d80a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d80e:	2b00      	cmp	r3, #0
 800d810:	bfcd      	iteet	gt
 800d812:	462a      	movgt	r2, r5
 800d814:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d818:	465a      	movle	r2, fp
 800d81a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d81e:	bfd8      	it	le
 800d820:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d824:	4652      	mov	r2, sl
 800d826:	4639      	mov	r1, r7
 800d828:	464b      	mov	r3, r9
 800d82a:	f7f3 f823 	bl	8000874 <__aeabi_ddiv>
 800d82e:	ec41 0b10 	vmov	d0, r0, r1
 800d832:	b005      	add	sp, #20
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d838 <__copybits>:
 800d838:	3901      	subs	r1, #1
 800d83a:	f102 0314 	add.w	r3, r2, #20
 800d83e:	1149      	asrs	r1, r1, #5
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	3101      	adds	r1, #1
 800d844:	6914      	ldr	r4, [r2, #16]
 800d846:	1f05      	subs	r5, r0, #4
 800d848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d850:	42a3      	cmp	r3, r4
 800d852:	d30c      	bcc.n	800d86e <__copybits+0x36>
 800d854:	1aa3      	subs	r3, r4, r2
 800d856:	3211      	adds	r2, #17
 800d858:	3b11      	subs	r3, #17
 800d85a:	f023 0303 	bic.w	r3, r3, #3
 800d85e:	42a2      	cmp	r2, r4
 800d860:	bf88      	it	hi
 800d862:	2300      	movhi	r3, #0
 800d864:	4418      	add	r0, r3
 800d866:	2300      	movs	r3, #0
 800d868:	4288      	cmp	r0, r1
 800d86a:	d305      	bcc.n	800d878 <__copybits+0x40>
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d872:	f845 6f04 	str.w	r6, [r5, #4]!
 800d876:	e7eb      	b.n	800d850 <__copybits+0x18>
 800d878:	f840 3b04 	str.w	r3, [r0], #4
 800d87c:	e7f4      	b.n	800d868 <__copybits+0x30>

0800d87e <__any_on>:
 800d87e:	f100 0214 	add.w	r2, r0, #20
 800d882:	114b      	asrs	r3, r1, #5
 800d884:	6900      	ldr	r0, [r0, #16]
 800d886:	4298      	cmp	r0, r3
 800d888:	b510      	push	{r4, lr}
 800d88a:	db11      	blt.n	800d8b0 <__any_on+0x32>
 800d88c:	dd0a      	ble.n	800d8a4 <__any_on+0x26>
 800d88e:	f011 011f 	ands.w	r1, r1, #31
 800d892:	d007      	beq.n	800d8a4 <__any_on+0x26>
 800d894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d898:	fa24 f001 	lsr.w	r0, r4, r1
 800d89c:	fa00 f101 	lsl.w	r1, r0, r1
 800d8a0:	428c      	cmp	r4, r1
 800d8a2:	d10b      	bne.n	800d8bc <__any_on+0x3e>
 800d8a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d803      	bhi.n	800d8b4 <__any_on+0x36>
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	bd10      	pop	{r4, pc}
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	e7f7      	b.n	800d8a4 <__any_on+0x26>
 800d8b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d0f5      	beq.n	800d8a8 <__any_on+0x2a>
 800d8bc:	2001      	movs	r0, #1
 800d8be:	e7f6      	b.n	800d8ae <__any_on+0x30>

0800d8c0 <sulp>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	460d      	mov	r5, r1
 800d8c6:	4616      	mov	r6, r2
 800d8c8:	ec45 4b10 	vmov	d0, r4, r5
 800d8cc:	f7ff feb6 	bl	800d63c <__ulp>
 800d8d0:	ec51 0b10 	vmov	r0, r1, d0
 800d8d4:	b17e      	cbz	r6, 800d8f6 <sulp+0x36>
 800d8d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d8da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	dd09      	ble.n	800d8f6 <sulp+0x36>
 800d8e2:	051b      	lsls	r3, r3, #20
 800d8e4:	2400      	movs	r4, #0
 800d8e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	f7f2 fe95 	bl	8000620 <__aeabi_dmul>
 800d8f6:	ec41 0b10 	vmov	d0, r0, r1
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}
 800d8fc:	0000      	movs	r0, r0
	...

0800d900 <_strtod_l>:
 800d900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d904:	b09f      	sub	sp, #124	@ 0x7c
 800d906:	460c      	mov	r4, r1
 800d908:	f04f 0a00 	mov.w	sl, #0
 800d90c:	f04f 0b00 	mov.w	fp, #0
 800d910:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d912:	2200      	movs	r2, #0
 800d914:	9005      	str	r0, [sp, #20]
 800d916:	921a      	str	r2, [sp, #104]	@ 0x68
 800d918:	460a      	mov	r2, r1
 800d91a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d91c:	7811      	ldrb	r1, [r2, #0]
 800d91e:	292b      	cmp	r1, #43	@ 0x2b
 800d920:	d04a      	beq.n	800d9b8 <_strtod_l+0xb8>
 800d922:	d838      	bhi.n	800d996 <_strtod_l+0x96>
 800d924:	290d      	cmp	r1, #13
 800d926:	d832      	bhi.n	800d98e <_strtod_l+0x8e>
 800d928:	2908      	cmp	r1, #8
 800d92a:	d832      	bhi.n	800d992 <_strtod_l+0x92>
 800d92c:	2900      	cmp	r1, #0
 800d92e:	d03b      	beq.n	800d9a8 <_strtod_l+0xa8>
 800d930:	2200      	movs	r2, #0
 800d932:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d936:	782a      	ldrb	r2, [r5, #0]
 800d938:	2a30      	cmp	r2, #48	@ 0x30
 800d93a:	f040 80b3 	bne.w	800daa4 <_strtod_l+0x1a4>
 800d93e:	786a      	ldrb	r2, [r5, #1]
 800d940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d944:	2a58      	cmp	r2, #88	@ 0x58
 800d946:	d16e      	bne.n	800da26 <_strtod_l+0x126>
 800d948:	9302      	str	r3, [sp, #8]
 800d94a:	a919      	add	r1, sp, #100	@ 0x64
 800d94c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d94e:	4a90      	ldr	r2, [pc, #576]	@ (800db90 <_strtod_l+0x290>)
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	ab1a      	add	r3, sp, #104	@ 0x68
 800d954:	9805      	ldr	r0, [sp, #20]
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d95a:	f001 f89d 	bl	800ea98 <__gethex>
 800d95e:	f010 060f 	ands.w	r6, r0, #15
 800d962:	4604      	mov	r4, r0
 800d964:	d005      	beq.n	800d972 <_strtod_l+0x72>
 800d966:	2e06      	cmp	r6, #6
 800d968:	d128      	bne.n	800d9bc <_strtod_l+0xbc>
 800d96a:	3501      	adds	r5, #1
 800d96c:	2300      	movs	r3, #0
 800d96e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d970:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 858e 	bne.w	800e496 <_strtod_l+0xb96>
 800d97a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d97c:	b1cb      	cbz	r3, 800d9b2 <_strtod_l+0xb2>
 800d97e:	4652      	mov	r2, sl
 800d980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d984:	ec43 2b10 	vmov	d0, r2, r3
 800d988:	b01f      	add	sp, #124	@ 0x7c
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	2920      	cmp	r1, #32
 800d990:	d1ce      	bne.n	800d930 <_strtod_l+0x30>
 800d992:	3201      	adds	r2, #1
 800d994:	e7c1      	b.n	800d91a <_strtod_l+0x1a>
 800d996:	292d      	cmp	r1, #45	@ 0x2d
 800d998:	d1ca      	bne.n	800d930 <_strtod_l+0x30>
 800d99a:	2101      	movs	r1, #1
 800d99c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d99e:	1c51      	adds	r1, r2, #1
 800d9a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d9a2:	7852      	ldrb	r2, [r2, #1]
 800d9a4:	2a00      	cmp	r2, #0
 800d9a6:	d1c5      	bne.n	800d934 <_strtod_l+0x34>
 800d9a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d9aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8570 	bne.w	800e492 <_strtod_l+0xb92>
 800d9b2:	4652      	mov	r2, sl
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	e7e5      	b.n	800d984 <_strtod_l+0x84>
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	e7ef      	b.n	800d99c <_strtod_l+0x9c>
 800d9bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d9be:	b13a      	cbz	r2, 800d9d0 <_strtod_l+0xd0>
 800d9c0:	2135      	movs	r1, #53	@ 0x35
 800d9c2:	a81c      	add	r0, sp, #112	@ 0x70
 800d9c4:	f7ff ff38 	bl	800d838 <__copybits>
 800d9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9ca:	9805      	ldr	r0, [sp, #20]
 800d9cc:	f7ff fafc 	bl	800cfc8 <_Bfree>
 800d9d0:	3e01      	subs	r6, #1
 800d9d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d9d4:	2e04      	cmp	r6, #4
 800d9d6:	d806      	bhi.n	800d9e6 <_strtod_l+0xe6>
 800d9d8:	e8df f006 	tbb	[pc, r6]
 800d9dc:	201d0314 	.word	0x201d0314
 800d9e0:	14          	.byte	0x14
 800d9e1:	00          	.byte	0x00
 800d9e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d9e6:	05e1      	lsls	r1, r4, #23
 800d9e8:	bf48      	it	mi
 800d9ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d9ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9f2:	0d1b      	lsrs	r3, r3, #20
 800d9f4:	051b      	lsls	r3, r3, #20
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1bb      	bne.n	800d972 <_strtod_l+0x72>
 800d9fa:	f7fe fb05 	bl	800c008 <__errno>
 800d9fe:	2322      	movs	r3, #34	@ 0x22
 800da00:	6003      	str	r3, [r0, #0]
 800da02:	e7b6      	b.n	800d972 <_strtod_l+0x72>
 800da04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800da08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800da0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800da10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da14:	e7e7      	b.n	800d9e6 <_strtod_l+0xe6>
 800da16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800db98 <_strtod_l+0x298>
 800da1a:	e7e4      	b.n	800d9e6 <_strtod_l+0xe6>
 800da1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800da20:	f04f 3aff 	mov.w	sl, #4294967295
 800da24:	e7df      	b.n	800d9e6 <_strtod_l+0xe6>
 800da26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da2c:	785b      	ldrb	r3, [r3, #1]
 800da2e:	2b30      	cmp	r3, #48	@ 0x30
 800da30:	d0f9      	beq.n	800da26 <_strtod_l+0x126>
 800da32:	2b00      	cmp	r3, #0
 800da34:	d09d      	beq.n	800d972 <_strtod_l+0x72>
 800da36:	2301      	movs	r3, #1
 800da38:	9309      	str	r3, [sp, #36]	@ 0x24
 800da3a:	220a      	movs	r2, #10
 800da3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800da40:	2300      	movs	r3, #0
 800da42:	461f      	mov	r7, r3
 800da44:	9308      	str	r3, [sp, #32]
 800da46:	930a      	str	r3, [sp, #40]	@ 0x28
 800da48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800da4a:	7805      	ldrb	r5, [r0, #0]
 800da4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800da50:	b2d9      	uxtb	r1, r3
 800da52:	2909      	cmp	r1, #9
 800da54:	d928      	bls.n	800daa8 <_strtod_l+0x1a8>
 800da56:	2201      	movs	r2, #1
 800da58:	494e      	ldr	r1, [pc, #312]	@ (800db94 <_strtod_l+0x294>)
 800da5a:	f000 ff59 	bl	800e910 <strncmp>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d033      	beq.n	800daca <_strtod_l+0x1ca>
 800da62:	2000      	movs	r0, #0
 800da64:	462a      	mov	r2, r5
 800da66:	463d      	mov	r5, r7
 800da68:	4681      	mov	r9, r0
 800da6a:	4603      	mov	r3, r0
 800da6c:	2a65      	cmp	r2, #101	@ 0x65
 800da6e:	d001      	beq.n	800da74 <_strtod_l+0x174>
 800da70:	2a45      	cmp	r2, #69	@ 0x45
 800da72:	d114      	bne.n	800da9e <_strtod_l+0x19e>
 800da74:	b91d      	cbnz	r5, 800da7e <_strtod_l+0x17e>
 800da76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da78:	4302      	orrs	r2, r0
 800da7a:	d095      	beq.n	800d9a8 <_strtod_l+0xa8>
 800da7c:	2500      	movs	r5, #0
 800da7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800da80:	1c62      	adds	r2, r4, #1
 800da82:	9219      	str	r2, [sp, #100]	@ 0x64
 800da84:	7862      	ldrb	r2, [r4, #1]
 800da86:	2a2b      	cmp	r2, #43	@ 0x2b
 800da88:	d078      	beq.n	800db7c <_strtod_l+0x27c>
 800da8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800da8c:	d07c      	beq.n	800db88 <_strtod_l+0x288>
 800da8e:	f04f 0c00 	mov.w	ip, #0
 800da92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da96:	2909      	cmp	r1, #9
 800da98:	f240 8084 	bls.w	800dba4 <_strtod_l+0x2a4>
 800da9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800da9e:	f04f 0800 	mov.w	r8, #0
 800daa2:	e0a4      	b.n	800dbee <_strtod_l+0x2ee>
 800daa4:	2300      	movs	r3, #0
 800daa6:	e7c7      	b.n	800da38 <_strtod_l+0x138>
 800daa8:	2f08      	cmp	r7, #8
 800daaa:	f100 0001 	add.w	r0, r0, #1
 800daae:	f107 0701 	add.w	r7, r7, #1
 800dab2:	bfd5      	itete	le
 800dab4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dab6:	9908      	ldrgt	r1, [sp, #32]
 800dab8:	fb02 3301 	mlale	r3, r2, r1, r3
 800dabc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dac0:	bfd4      	ite	le
 800dac2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dac4:	9308      	strgt	r3, [sp, #32]
 800dac6:	9019      	str	r0, [sp, #100]	@ 0x64
 800dac8:	e7be      	b.n	800da48 <_strtod_l+0x148>
 800daca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dacc:	1c5a      	adds	r2, r3, #1
 800dace:	9219      	str	r2, [sp, #100]	@ 0x64
 800dad0:	785a      	ldrb	r2, [r3, #1]
 800dad2:	b37f      	cbz	r7, 800db34 <_strtod_l+0x234>
 800dad4:	4681      	mov	r9, r0
 800dad6:	463d      	mov	r5, r7
 800dad8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dadc:	2b09      	cmp	r3, #9
 800dade:	d912      	bls.n	800db06 <_strtod_l+0x206>
 800dae0:	2301      	movs	r3, #1
 800dae2:	e7c3      	b.n	800da6c <_strtod_l+0x16c>
 800dae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dae6:	3001      	adds	r0, #1
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	9219      	str	r2, [sp, #100]	@ 0x64
 800daec:	785a      	ldrb	r2, [r3, #1]
 800daee:	2a30      	cmp	r2, #48	@ 0x30
 800daf0:	d0f8      	beq.n	800dae4 <_strtod_l+0x1e4>
 800daf2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800daf6:	2b08      	cmp	r3, #8
 800daf8:	f200 84d2 	bhi.w	800e4a0 <_strtod_l+0xba0>
 800dafc:	4681      	mov	r9, r0
 800dafe:	2000      	movs	r0, #0
 800db00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db02:	4605      	mov	r5, r0
 800db04:	930c      	str	r3, [sp, #48]	@ 0x30
 800db06:	3a30      	subs	r2, #48	@ 0x30
 800db08:	f100 0301 	add.w	r3, r0, #1
 800db0c:	d02a      	beq.n	800db64 <_strtod_l+0x264>
 800db0e:	4499      	add	r9, r3
 800db10:	eb00 0c05 	add.w	ip, r0, r5
 800db14:	462b      	mov	r3, r5
 800db16:	210a      	movs	r1, #10
 800db18:	4563      	cmp	r3, ip
 800db1a:	d10d      	bne.n	800db38 <_strtod_l+0x238>
 800db1c:	1c69      	adds	r1, r5, #1
 800db1e:	4401      	add	r1, r0
 800db20:	4428      	add	r0, r5
 800db22:	2808      	cmp	r0, #8
 800db24:	dc16      	bgt.n	800db54 <_strtod_l+0x254>
 800db26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db28:	230a      	movs	r3, #10
 800db2a:	fb03 2300 	mla	r3, r3, r0, r2
 800db2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db30:	2300      	movs	r3, #0
 800db32:	e018      	b.n	800db66 <_strtod_l+0x266>
 800db34:	4638      	mov	r0, r7
 800db36:	e7da      	b.n	800daee <_strtod_l+0x1ee>
 800db38:	2b08      	cmp	r3, #8
 800db3a:	f103 0301 	add.w	r3, r3, #1
 800db3e:	dc03      	bgt.n	800db48 <_strtod_l+0x248>
 800db40:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800db42:	434e      	muls	r6, r1
 800db44:	960a      	str	r6, [sp, #40]	@ 0x28
 800db46:	e7e7      	b.n	800db18 <_strtod_l+0x218>
 800db48:	2b10      	cmp	r3, #16
 800db4a:	bfde      	ittt	le
 800db4c:	9e08      	ldrle	r6, [sp, #32]
 800db4e:	434e      	mulle	r6, r1
 800db50:	9608      	strle	r6, [sp, #32]
 800db52:	e7e1      	b.n	800db18 <_strtod_l+0x218>
 800db54:	280f      	cmp	r0, #15
 800db56:	dceb      	bgt.n	800db30 <_strtod_l+0x230>
 800db58:	9808      	ldr	r0, [sp, #32]
 800db5a:	230a      	movs	r3, #10
 800db5c:	fb03 2300 	mla	r3, r3, r0, r2
 800db60:	9308      	str	r3, [sp, #32]
 800db62:	e7e5      	b.n	800db30 <_strtod_l+0x230>
 800db64:	4629      	mov	r1, r5
 800db66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db68:	460d      	mov	r5, r1
 800db6a:	1c50      	adds	r0, r2, #1
 800db6c:	9019      	str	r0, [sp, #100]	@ 0x64
 800db6e:	4618      	mov	r0, r3
 800db70:	7852      	ldrb	r2, [r2, #1]
 800db72:	e7b1      	b.n	800dad8 <_strtod_l+0x1d8>
 800db74:	f04f 0900 	mov.w	r9, #0
 800db78:	2301      	movs	r3, #1
 800db7a:	e77c      	b.n	800da76 <_strtod_l+0x176>
 800db7c:	f04f 0c00 	mov.w	ip, #0
 800db80:	1ca2      	adds	r2, r4, #2
 800db82:	9219      	str	r2, [sp, #100]	@ 0x64
 800db84:	78a2      	ldrb	r2, [r4, #2]
 800db86:	e784      	b.n	800da92 <_strtod_l+0x192>
 800db88:	f04f 0c01 	mov.w	ip, #1
 800db8c:	e7f8      	b.n	800db80 <_strtod_l+0x280>
 800db8e:	bf00      	nop
 800db90:	08010190 	.word	0x08010190
 800db94:	08010178 	.word	0x08010178
 800db98:	7ff00000 	.word	0x7ff00000
 800db9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db9e:	1c51      	adds	r1, r2, #1
 800dba0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dba2:	7852      	ldrb	r2, [r2, #1]
 800dba4:	2a30      	cmp	r2, #48	@ 0x30
 800dba6:	d0f9      	beq.n	800db9c <_strtod_l+0x29c>
 800dba8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dbac:	2908      	cmp	r1, #8
 800dbae:	f63f af76 	bhi.w	800da9e <_strtod_l+0x19e>
 800dbb2:	3a30      	subs	r2, #48	@ 0x30
 800dbb4:	f04f 080a 	mov.w	r8, #10
 800dbb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dbbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dbbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dbc0:	1c56      	adds	r6, r2, #1
 800dbc2:	9619      	str	r6, [sp, #100]	@ 0x64
 800dbc4:	7852      	ldrb	r2, [r2, #1]
 800dbc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dbca:	f1be 0f09 	cmp.w	lr, #9
 800dbce:	d939      	bls.n	800dc44 <_strtod_l+0x344>
 800dbd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dbd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dbd6:	1a76      	subs	r6, r6, r1
 800dbd8:	2e08      	cmp	r6, #8
 800dbda:	dc03      	bgt.n	800dbe4 <_strtod_l+0x2e4>
 800dbdc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dbde:	4588      	cmp	r8, r1
 800dbe0:	bfa8      	it	ge
 800dbe2:	4688      	movge	r8, r1
 800dbe4:	f1bc 0f00 	cmp.w	ip, #0
 800dbe8:	d001      	beq.n	800dbee <_strtod_l+0x2ee>
 800dbea:	f1c8 0800 	rsb	r8, r8, #0
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	d14e      	bne.n	800dc90 <_strtod_l+0x390>
 800dbf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbf4:	4308      	orrs	r0, r1
 800dbf6:	f47f aebc 	bne.w	800d972 <_strtod_l+0x72>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f47f aed4 	bne.w	800d9a8 <_strtod_l+0xa8>
 800dc00:	2a69      	cmp	r2, #105	@ 0x69
 800dc02:	d028      	beq.n	800dc56 <_strtod_l+0x356>
 800dc04:	dc25      	bgt.n	800dc52 <_strtod_l+0x352>
 800dc06:	2a49      	cmp	r2, #73	@ 0x49
 800dc08:	d025      	beq.n	800dc56 <_strtod_l+0x356>
 800dc0a:	2a4e      	cmp	r2, #78	@ 0x4e
 800dc0c:	f47f aecc 	bne.w	800d9a8 <_strtod_l+0xa8>
 800dc10:	499b      	ldr	r1, [pc, #620]	@ (800de80 <_strtod_l+0x580>)
 800dc12:	a819      	add	r0, sp, #100	@ 0x64
 800dc14:	f001 f960 	bl	800eed8 <__match>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	f43f aec5 	beq.w	800d9a8 <_strtod_l+0xa8>
 800dc1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b28      	cmp	r3, #40	@ 0x28
 800dc24:	d12e      	bne.n	800dc84 <_strtod_l+0x384>
 800dc26:	aa1c      	add	r2, sp, #112	@ 0x70
 800dc28:	4996      	ldr	r1, [pc, #600]	@ (800de84 <_strtod_l+0x584>)
 800dc2a:	a819      	add	r0, sp, #100	@ 0x64
 800dc2c:	f001 f968 	bl	800ef00 <__hexnan>
 800dc30:	2805      	cmp	r0, #5
 800dc32:	d127      	bne.n	800dc84 <_strtod_l+0x384>
 800dc34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dc3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dc3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dc42:	e696      	b.n	800d972 <_strtod_l+0x72>
 800dc44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dc46:	fb08 2101 	mla	r1, r8, r1, r2
 800dc4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dc4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc50:	e7b5      	b.n	800dbbe <_strtod_l+0x2be>
 800dc52:	2a6e      	cmp	r2, #110	@ 0x6e
 800dc54:	e7da      	b.n	800dc0c <_strtod_l+0x30c>
 800dc56:	498c      	ldr	r1, [pc, #560]	@ (800de88 <_strtod_l+0x588>)
 800dc58:	a819      	add	r0, sp, #100	@ 0x64
 800dc5a:	f001 f93d 	bl	800eed8 <__match>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f43f aea2 	beq.w	800d9a8 <_strtod_l+0xa8>
 800dc64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc66:	a819      	add	r0, sp, #100	@ 0x64
 800dc68:	4988      	ldr	r1, [pc, #544]	@ (800de8c <_strtod_l+0x58c>)
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc6e:	f001 f933 	bl	800eed8 <__match>
 800dc72:	b910      	cbnz	r0, 800dc7a <_strtod_l+0x37a>
 800dc74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc76:	3301      	adds	r3, #1
 800dc78:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc7a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800de9c <_strtod_l+0x59c>
 800dc7e:	f04f 0a00 	mov.w	sl, #0
 800dc82:	e676      	b.n	800d972 <_strtod_l+0x72>
 800dc84:	4882      	ldr	r0, [pc, #520]	@ (800de90 <_strtod_l+0x590>)
 800dc86:	f000 fe67 	bl	800e958 <nan>
 800dc8a:	ec5b ab10 	vmov	sl, fp, d0
 800dc8e:	e670      	b.n	800d972 <_strtod_l+0x72>
 800dc90:	eba8 0309 	sub.w	r3, r8, r9
 800dc94:	2f00      	cmp	r7, #0
 800dc96:	bf08      	it	eq
 800dc98:	462f      	moveq	r7, r5
 800dc9a:	2d10      	cmp	r5, #16
 800dc9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dc9e:	462c      	mov	r4, r5
 800dca0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca2:	bfa8      	it	ge
 800dca4:	2410      	movge	r4, #16
 800dca6:	f7f2 fc41 	bl	800052c <__aeabi_ui2d>
 800dcaa:	2d09      	cmp	r5, #9
 800dcac:	4682      	mov	sl, r0
 800dcae:	468b      	mov	fp, r1
 800dcb0:	dc13      	bgt.n	800dcda <_strtod_l+0x3da>
 800dcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f43f ae5c 	beq.w	800d972 <_strtod_l+0x72>
 800dcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcbc:	dd78      	ble.n	800ddb0 <_strtod_l+0x4b0>
 800dcbe:	2b16      	cmp	r3, #22
 800dcc0:	dc5f      	bgt.n	800dd82 <_strtod_l+0x482>
 800dcc2:	4974      	ldr	r1, [pc, #464]	@ (800de94 <_strtod_l+0x594>)
 800dcc4:	4652      	mov	r2, sl
 800dcc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dcca:	465b      	mov	r3, fp
 800dccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcd0:	f7f2 fca6 	bl	8000620 <__aeabi_dmul>
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	468b      	mov	fp, r1
 800dcd8:	e64b      	b.n	800d972 <_strtod_l+0x72>
 800dcda:	4b6e      	ldr	r3, [pc, #440]	@ (800de94 <_strtod_l+0x594>)
 800dcdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dce0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dce4:	f7f2 fc9c 	bl	8000620 <__aeabi_dmul>
 800dce8:	4682      	mov	sl, r0
 800dcea:	468b      	mov	fp, r1
 800dcec:	9808      	ldr	r0, [sp, #32]
 800dcee:	f7f2 fc1d 	bl	800052c <__aeabi_ui2d>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4650      	mov	r0, sl
 800dcf8:	4659      	mov	r1, fp
 800dcfa:	f7f2 fadb 	bl	80002b4 <__adddf3>
 800dcfe:	2d0f      	cmp	r5, #15
 800dd00:	4682      	mov	sl, r0
 800dd02:	468b      	mov	fp, r1
 800dd04:	ddd5      	ble.n	800dcb2 <_strtod_l+0x3b2>
 800dd06:	1b2c      	subs	r4, r5, r4
 800dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0a:	441c      	add	r4, r3
 800dd0c:	2c00      	cmp	r4, #0
 800dd0e:	f340 8096 	ble.w	800de3e <_strtod_l+0x53e>
 800dd12:	f014 030f 	ands.w	r3, r4, #15
 800dd16:	d00a      	beq.n	800dd2e <_strtod_l+0x42e>
 800dd18:	495e      	ldr	r1, [pc, #376]	@ (800de94 <_strtod_l+0x594>)
 800dd1a:	4652      	mov	r2, sl
 800dd1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd20:	465b      	mov	r3, fp
 800dd22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd26:	f7f2 fc7b 	bl	8000620 <__aeabi_dmul>
 800dd2a:	4682      	mov	sl, r0
 800dd2c:	468b      	mov	fp, r1
 800dd2e:	f034 040f 	bics.w	r4, r4, #15
 800dd32:	d073      	beq.n	800de1c <_strtod_l+0x51c>
 800dd34:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dd38:	dd48      	ble.n	800ddcc <_strtod_l+0x4cc>
 800dd3a:	2400      	movs	r4, #0
 800dd3c:	46a0      	mov	r8, r4
 800dd3e:	46a1      	mov	r9, r4
 800dd40:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd42:	2322      	movs	r3, #34	@ 0x22
 800dd44:	9a05      	ldr	r2, [sp, #20]
 800dd46:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800de9c <_strtod_l+0x59c>
 800dd4a:	f04f 0a00 	mov.w	sl, #0
 800dd4e:	6013      	str	r3, [r2, #0]
 800dd50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f43f ae0d 	beq.w	800d972 <_strtod_l+0x72>
 800dd58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd5a:	9805      	ldr	r0, [sp, #20]
 800dd5c:	f7ff f934 	bl	800cfc8 <_Bfree>
 800dd60:	4649      	mov	r1, r9
 800dd62:	9805      	ldr	r0, [sp, #20]
 800dd64:	f7ff f930 	bl	800cfc8 <_Bfree>
 800dd68:	4641      	mov	r1, r8
 800dd6a:	9805      	ldr	r0, [sp, #20]
 800dd6c:	f7ff f92c 	bl	800cfc8 <_Bfree>
 800dd70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd72:	9805      	ldr	r0, [sp, #20]
 800dd74:	f7ff f928 	bl	800cfc8 <_Bfree>
 800dd78:	4621      	mov	r1, r4
 800dd7a:	9805      	ldr	r0, [sp, #20]
 800dd7c:	f7ff f924 	bl	800cfc8 <_Bfree>
 800dd80:	e5f7      	b.n	800d972 <_strtod_l+0x72>
 800dd82:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	dbbc      	blt.n	800dd06 <_strtod_l+0x406>
 800dd8c:	f1c5 050f 	rsb	r5, r5, #15
 800dd90:	4c40      	ldr	r4, [pc, #256]	@ (800de94 <_strtod_l+0x594>)
 800dd92:	4652      	mov	r2, sl
 800dd94:	465b      	mov	r3, fp
 800dd96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dd9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd9e:	f7f2 fc3f 	bl	8000620 <__aeabi_dmul>
 800dda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda4:	1b5d      	subs	r5, r3, r5
 800dda6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ddaa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ddae:	e78f      	b.n	800dcd0 <_strtod_l+0x3d0>
 800ddb0:	3316      	adds	r3, #22
 800ddb2:	dba8      	blt.n	800dd06 <_strtod_l+0x406>
 800ddb4:	eba9 0808 	sub.w	r8, r9, r8
 800ddb8:	4b36      	ldr	r3, [pc, #216]	@ (800de94 <_strtod_l+0x594>)
 800ddba:	4650      	mov	r0, sl
 800ddbc:	4659      	mov	r1, fp
 800ddbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ddc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ddc6:	f7f2 fd55 	bl	8000874 <__aeabi_ddiv>
 800ddca:	e783      	b.n	800dcd4 <_strtod_l+0x3d4>
 800ddcc:	4b32      	ldr	r3, [pc, #200]	@ (800de98 <_strtod_l+0x598>)
 800ddce:	1124      	asrs	r4, r4, #4
 800ddd0:	4650      	mov	r0, sl
 800ddd2:	4659      	mov	r1, fp
 800ddd4:	9308      	str	r3, [sp, #32]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	461e      	mov	r6, r3
 800ddda:	2c01      	cmp	r4, #1
 800dddc:	dc21      	bgt.n	800de22 <_strtod_l+0x522>
 800ddde:	b10b      	cbz	r3, 800dde4 <_strtod_l+0x4e4>
 800dde0:	4682      	mov	sl, r0
 800dde2:	468b      	mov	fp, r1
 800dde4:	492c      	ldr	r1, [pc, #176]	@ (800de98 <_strtod_l+0x598>)
 800dde6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ddea:	4652      	mov	r2, sl
 800ddec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ddf0:	465b      	mov	r3, fp
 800ddf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddf6:	f7f2 fc13 	bl	8000620 <__aeabi_dmul>
 800ddfa:	4b28      	ldr	r3, [pc, #160]	@ (800de9c <_strtod_l+0x59c>)
 800ddfc:	460a      	mov	r2, r1
 800ddfe:	4682      	mov	sl, r0
 800de00:	400b      	ands	r3, r1
 800de02:	4927      	ldr	r1, [pc, #156]	@ (800dea0 <_strtod_l+0x5a0>)
 800de04:	428b      	cmp	r3, r1
 800de06:	d898      	bhi.n	800dd3a <_strtod_l+0x43a>
 800de08:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800de0c:	428b      	cmp	r3, r1
 800de0e:	bf86      	itte	hi
 800de10:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dea4 <_strtod_l+0x5a4>
 800de14:	f04f 3aff 	movhi.w	sl, #4294967295
 800de18:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800de1c:	2300      	movs	r3, #0
 800de1e:	9308      	str	r3, [sp, #32]
 800de20:	e07a      	b.n	800df18 <_strtod_l+0x618>
 800de22:	07e2      	lsls	r2, r4, #31
 800de24:	d505      	bpl.n	800de32 <_strtod_l+0x532>
 800de26:	9b08      	ldr	r3, [sp, #32]
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 fbf8 	bl	8000620 <__aeabi_dmul>
 800de30:	2301      	movs	r3, #1
 800de32:	9a08      	ldr	r2, [sp, #32]
 800de34:	3601      	adds	r6, #1
 800de36:	1064      	asrs	r4, r4, #1
 800de38:	3208      	adds	r2, #8
 800de3a:	9208      	str	r2, [sp, #32]
 800de3c:	e7cd      	b.n	800ddda <_strtod_l+0x4da>
 800de3e:	d0ed      	beq.n	800de1c <_strtod_l+0x51c>
 800de40:	4264      	negs	r4, r4
 800de42:	f014 020f 	ands.w	r2, r4, #15
 800de46:	d00a      	beq.n	800de5e <_strtod_l+0x55e>
 800de48:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <_strtod_l+0x594>)
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	f7f2 fd0d 	bl	8000874 <__aeabi_ddiv>
 800de5a:	4682      	mov	sl, r0
 800de5c:	468b      	mov	fp, r1
 800de5e:	1124      	asrs	r4, r4, #4
 800de60:	d0dc      	beq.n	800de1c <_strtod_l+0x51c>
 800de62:	2c1f      	cmp	r4, #31
 800de64:	dd20      	ble.n	800dea8 <_strtod_l+0x5a8>
 800de66:	2400      	movs	r4, #0
 800de68:	46a0      	mov	r8, r4
 800de6a:	46a1      	mov	r9, r4
 800de6c:	940a      	str	r4, [sp, #40]	@ 0x28
 800de6e:	2322      	movs	r3, #34	@ 0x22
 800de70:	9a05      	ldr	r2, [sp, #20]
 800de72:	f04f 0a00 	mov.w	sl, #0
 800de76:	f04f 0b00 	mov.w	fp, #0
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	e768      	b.n	800dd50 <_strtod_l+0x450>
 800de7e:	bf00      	nop
 800de80:	0800ff66 	.word	0x0800ff66
 800de84:	0801017c 	.word	0x0801017c
 800de88:	0800ff5e 	.word	0x0800ff5e
 800de8c:	0800ff95 	.word	0x0800ff95
 800de90:	08010224 	.word	0x08010224
 800de94:	080100b0 	.word	0x080100b0
 800de98:	08010088 	.word	0x08010088
 800de9c:	7ff00000 	.word	0x7ff00000
 800dea0:	7ca00000 	.word	0x7ca00000
 800dea4:	7fefffff 	.word	0x7fefffff
 800dea8:	f014 0310 	ands.w	r3, r4, #16
 800deac:	4650      	mov	r0, sl
 800deae:	4659      	mov	r1, fp
 800deb0:	4ea9      	ldr	r6, [pc, #676]	@ (800e158 <_strtod_l+0x858>)
 800deb2:	bf18      	it	ne
 800deb4:	236a      	movne	r3, #106	@ 0x6a
 800deb6:	9308      	str	r3, [sp, #32]
 800deb8:	2300      	movs	r3, #0
 800deba:	07e2      	lsls	r2, r4, #31
 800debc:	d504      	bpl.n	800dec8 <_strtod_l+0x5c8>
 800debe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dec2:	f7f2 fbad 	bl	8000620 <__aeabi_dmul>
 800dec6:	2301      	movs	r3, #1
 800dec8:	1064      	asrs	r4, r4, #1
 800deca:	f106 0608 	add.w	r6, r6, #8
 800dece:	d1f4      	bne.n	800deba <_strtod_l+0x5ba>
 800ded0:	b10b      	cbz	r3, 800ded6 <_strtod_l+0x5d6>
 800ded2:	4682      	mov	sl, r0
 800ded4:	468b      	mov	fp, r1
 800ded6:	9b08      	ldr	r3, [sp, #32]
 800ded8:	b1b3      	cbz	r3, 800df08 <_strtod_l+0x608>
 800deda:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dede:	4659      	mov	r1, fp
 800dee0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd0f      	ble.n	800df08 <_strtod_l+0x608>
 800dee8:	2b1f      	cmp	r3, #31
 800deea:	dd55      	ble.n	800df98 <_strtod_l+0x698>
 800deec:	2b34      	cmp	r3, #52	@ 0x34
 800deee:	f04f 0a00 	mov.w	sl, #0
 800def2:	bfdb      	ittet	le
 800def4:	f04f 33ff 	movle.w	r3, #4294967295
 800def8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800defc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800df00:	4093      	lslle	r3, r2
 800df02:	bfd8      	it	le
 800df04:	ea03 0b01 	andle.w	fp, r3, r1
 800df08:	2200      	movs	r2, #0
 800df0a:	2300      	movs	r3, #0
 800df0c:	4650      	mov	r0, sl
 800df0e:	4659      	mov	r1, fp
 800df10:	f7f2 fdee 	bl	8000af0 <__aeabi_dcmpeq>
 800df14:	2800      	cmp	r0, #0
 800df16:	d1a6      	bne.n	800de66 <_strtod_l+0x566>
 800df18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df1a:	463a      	mov	r2, r7
 800df1c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	462b      	mov	r3, r5
 800df22:	9805      	ldr	r0, [sp, #20]
 800df24:	f7ff f8ba 	bl	800d09c <__s2b>
 800df28:	900a      	str	r0, [sp, #40]	@ 0x28
 800df2a:	2800      	cmp	r0, #0
 800df2c:	f43f af05 	beq.w	800dd3a <_strtod_l+0x43a>
 800df30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df32:	eba9 0308 	sub.w	r3, r9, r8
 800df36:	2400      	movs	r4, #0
 800df38:	2a00      	cmp	r2, #0
 800df3a:	46a0      	mov	r8, r4
 800df3c:	bfa8      	it	ge
 800df3e:	2300      	movge	r3, #0
 800df40:	9312      	str	r3, [sp, #72]	@ 0x48
 800df42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df46:	9316      	str	r3, [sp, #88]	@ 0x58
 800df48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df4a:	9805      	ldr	r0, [sp, #20]
 800df4c:	6859      	ldr	r1, [r3, #4]
 800df4e:	f7fe fffb 	bl	800cf48 <_Balloc>
 800df52:	4681      	mov	r9, r0
 800df54:	2800      	cmp	r0, #0
 800df56:	f43f aef4 	beq.w	800dd42 <_strtod_l+0x442>
 800df5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df5c:	300c      	adds	r0, #12
 800df5e:	691a      	ldr	r2, [r3, #16]
 800df60:	f103 010c 	add.w	r1, r3, #12
 800df64:	3202      	adds	r2, #2
 800df66:	0092      	lsls	r2, r2, #2
 800df68:	f7fe f889 	bl	800c07e <memcpy>
 800df6c:	aa1c      	add	r2, sp, #112	@ 0x70
 800df6e:	a91b      	add	r1, sp, #108	@ 0x6c
 800df70:	9805      	ldr	r0, [sp, #20]
 800df72:	ec4b ab10 	vmov	d0, sl, fp
 800df76:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800df7a:	f7ff fbd3 	bl	800d724 <__d2b>
 800df7e:	901a      	str	r0, [sp, #104]	@ 0x68
 800df80:	2800      	cmp	r0, #0
 800df82:	f43f aede 	beq.w	800dd42 <_strtod_l+0x442>
 800df86:	2101      	movs	r1, #1
 800df88:	9805      	ldr	r0, [sp, #20]
 800df8a:	f7ff f91d 	bl	800d1c8 <__i2b>
 800df8e:	4680      	mov	r8, r0
 800df90:	b948      	cbnz	r0, 800dfa6 <_strtod_l+0x6a6>
 800df92:	f04f 0800 	mov.w	r8, #0
 800df96:	e6d4      	b.n	800dd42 <_strtod_l+0x442>
 800df98:	f04f 32ff 	mov.w	r2, #4294967295
 800df9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa0:	ea03 0a0a 	and.w	sl, r3, sl
 800dfa4:	e7b0      	b.n	800df08 <_strtod_l+0x608>
 800dfa6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dfa8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dfaa:	2d00      	cmp	r5, #0
 800dfac:	bfa9      	itett	ge
 800dfae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dfb0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dfb2:	18ef      	addge	r7, r5, r3
 800dfb4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dfb6:	bfb8      	it	lt
 800dfb8:	1b5e      	sublt	r6, r3, r5
 800dfba:	9b08      	ldr	r3, [sp, #32]
 800dfbc:	bfb8      	it	lt
 800dfbe:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dfc0:	1aed      	subs	r5, r5, r3
 800dfc2:	4b66      	ldr	r3, [pc, #408]	@ (800e15c <_strtod_l+0x85c>)
 800dfc4:	4415      	add	r5, r2
 800dfc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dfca:	3d01      	subs	r5, #1
 800dfcc:	429d      	cmp	r5, r3
 800dfce:	da4f      	bge.n	800e070 <_strtod_l+0x770>
 800dfd0:	1b5b      	subs	r3, r3, r5
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	2b1f      	cmp	r3, #31
 800dfd6:	eba2 0203 	sub.w	r2, r2, r3
 800dfda:	dc3d      	bgt.n	800e058 <_strtod_l+0x758>
 800dfdc:	fa01 f303 	lsl.w	r3, r1, r3
 800dfe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfe6:	18bd      	adds	r5, r7, r2
 800dfe8:	9b08      	ldr	r3, [sp, #32]
 800dfea:	4416      	add	r6, r2
 800dfec:	42af      	cmp	r7, r5
 800dfee:	441e      	add	r6, r3
 800dff0:	463b      	mov	r3, r7
 800dff2:	bfa8      	it	ge
 800dff4:	462b      	movge	r3, r5
 800dff6:	42b3      	cmp	r3, r6
 800dff8:	bfa8      	it	ge
 800dffa:	4633      	movge	r3, r6
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	bfc2      	ittt	gt
 800e000:	1aed      	subgt	r5, r5, r3
 800e002:	1af6      	subgt	r6, r6, r3
 800e004:	1aff      	subgt	r7, r7, r3
 800e006:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dd16      	ble.n	800e03a <_strtod_l+0x73a>
 800e00c:	4641      	mov	r1, r8
 800e00e:	461a      	mov	r2, r3
 800e010:	9805      	ldr	r0, [sp, #20]
 800e012:	f7ff f999 	bl	800d348 <__pow5mult>
 800e016:	4680      	mov	r8, r0
 800e018:	2800      	cmp	r0, #0
 800e01a:	d0ba      	beq.n	800df92 <_strtod_l+0x692>
 800e01c:	4601      	mov	r1, r0
 800e01e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e020:	9805      	ldr	r0, [sp, #20]
 800e022:	f7ff f8e7 	bl	800d1f4 <__multiply>
 800e026:	900e      	str	r0, [sp, #56]	@ 0x38
 800e028:	2800      	cmp	r0, #0
 800e02a:	f43f ae8a 	beq.w	800dd42 <_strtod_l+0x442>
 800e02e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e030:	9805      	ldr	r0, [sp, #20]
 800e032:	f7fe ffc9 	bl	800cfc8 <_Bfree>
 800e036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e038:	931a      	str	r3, [sp, #104]	@ 0x68
 800e03a:	2d00      	cmp	r5, #0
 800e03c:	dc1d      	bgt.n	800e07a <_strtod_l+0x77a>
 800e03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	dd23      	ble.n	800e08c <_strtod_l+0x78c>
 800e044:	4649      	mov	r1, r9
 800e046:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e048:	9805      	ldr	r0, [sp, #20]
 800e04a:	f7ff f97d 	bl	800d348 <__pow5mult>
 800e04e:	4681      	mov	r9, r0
 800e050:	b9e0      	cbnz	r0, 800e08c <_strtod_l+0x78c>
 800e052:	f04f 0900 	mov.w	r9, #0
 800e056:	e674      	b.n	800dd42 <_strtod_l+0x442>
 800e058:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e05c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e05e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e062:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e066:	35e2      	adds	r5, #226	@ 0xe2
 800e068:	fa01 f305 	lsl.w	r3, r1, r5
 800e06c:	9310      	str	r3, [sp, #64]	@ 0x40
 800e06e:	e7ba      	b.n	800dfe6 <_strtod_l+0x6e6>
 800e070:	2300      	movs	r3, #0
 800e072:	9310      	str	r3, [sp, #64]	@ 0x40
 800e074:	2301      	movs	r3, #1
 800e076:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e078:	e7b5      	b.n	800dfe6 <_strtod_l+0x6e6>
 800e07a:	462a      	mov	r2, r5
 800e07c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e07e:	9805      	ldr	r0, [sp, #20]
 800e080:	f7ff f9bc 	bl	800d3fc <__lshift>
 800e084:	901a      	str	r0, [sp, #104]	@ 0x68
 800e086:	2800      	cmp	r0, #0
 800e088:	d1d9      	bne.n	800e03e <_strtod_l+0x73e>
 800e08a:	e65a      	b.n	800dd42 <_strtod_l+0x442>
 800e08c:	2e00      	cmp	r6, #0
 800e08e:	dd07      	ble.n	800e0a0 <_strtod_l+0x7a0>
 800e090:	4649      	mov	r1, r9
 800e092:	4632      	mov	r2, r6
 800e094:	9805      	ldr	r0, [sp, #20]
 800e096:	f7ff f9b1 	bl	800d3fc <__lshift>
 800e09a:	4681      	mov	r9, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d0d8      	beq.n	800e052 <_strtod_l+0x752>
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	dd08      	ble.n	800e0b6 <_strtod_l+0x7b6>
 800e0a4:	4641      	mov	r1, r8
 800e0a6:	463a      	mov	r2, r7
 800e0a8:	9805      	ldr	r0, [sp, #20]
 800e0aa:	f7ff f9a7 	bl	800d3fc <__lshift>
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f43f ae46 	beq.w	800dd42 <_strtod_l+0x442>
 800e0b6:	464a      	mov	r2, r9
 800e0b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0ba:	9805      	ldr	r0, [sp, #20]
 800e0bc:	f7ff fa26 	bl	800d50c <__mdiff>
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	f43f ae3d 	beq.w	800dd42 <_strtod_l+0x442>
 800e0c8:	68c3      	ldr	r3, [r0, #12]
 800e0ca:	4641      	mov	r1, r8
 800e0cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	60c3      	str	r3, [r0, #12]
 800e0d2:	f7ff f9ff 	bl	800d4d4 <__mcmp>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	da46      	bge.n	800e168 <_strtod_l+0x868>
 800e0da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0dc:	ea53 030a 	orrs.w	r3, r3, sl
 800e0e0:	d16c      	bne.n	800e1bc <_strtod_l+0x8bc>
 800e0e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d168      	bne.n	800e1bc <_strtod_l+0x8bc>
 800e0ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0ee:	0d1b      	lsrs	r3, r3, #20
 800e0f0:	051b      	lsls	r3, r3, #20
 800e0f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0f6:	d961      	bls.n	800e1bc <_strtod_l+0x8bc>
 800e0f8:	6963      	ldr	r3, [r4, #20]
 800e0fa:	b913      	cbnz	r3, 800e102 <_strtod_l+0x802>
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	dd5c      	ble.n	800e1bc <_strtod_l+0x8bc>
 800e102:	4621      	mov	r1, r4
 800e104:	2201      	movs	r2, #1
 800e106:	9805      	ldr	r0, [sp, #20]
 800e108:	f7ff f978 	bl	800d3fc <__lshift>
 800e10c:	4641      	mov	r1, r8
 800e10e:	4604      	mov	r4, r0
 800e110:	f7ff f9e0 	bl	800d4d4 <__mcmp>
 800e114:	2800      	cmp	r0, #0
 800e116:	dd51      	ble.n	800e1bc <_strtod_l+0x8bc>
 800e118:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e11c:	9a08      	ldr	r2, [sp, #32]
 800e11e:	0d1b      	lsrs	r3, r3, #20
 800e120:	051b      	lsls	r3, r3, #20
 800e122:	2a00      	cmp	r2, #0
 800e124:	d06b      	beq.n	800e1fe <_strtod_l+0x8fe>
 800e126:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e12a:	d868      	bhi.n	800e1fe <_strtod_l+0x8fe>
 800e12c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e130:	f67f ae9d 	bls.w	800de6e <_strtod_l+0x56e>
 800e134:	4b0a      	ldr	r3, [pc, #40]	@ (800e160 <_strtod_l+0x860>)
 800e136:	4650      	mov	r0, sl
 800e138:	4659      	mov	r1, fp
 800e13a:	2200      	movs	r2, #0
 800e13c:	f7f2 fa70 	bl	8000620 <__aeabi_dmul>
 800e140:	4b08      	ldr	r3, [pc, #32]	@ (800e164 <_strtod_l+0x864>)
 800e142:	4682      	mov	sl, r0
 800e144:	468b      	mov	fp, r1
 800e146:	400b      	ands	r3, r1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f47f ae05 	bne.w	800dd58 <_strtod_l+0x458>
 800e14e:	2322      	movs	r3, #34	@ 0x22
 800e150:	9a05      	ldr	r2, [sp, #20]
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	e600      	b.n	800dd58 <_strtod_l+0x458>
 800e156:	bf00      	nop
 800e158:	080101a8 	.word	0x080101a8
 800e15c:	fffffc02 	.word	0xfffffc02
 800e160:	39500000 	.word	0x39500000
 800e164:	7ff00000 	.word	0x7ff00000
 800e168:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e16c:	d165      	bne.n	800e23a <_strtod_l+0x93a>
 800e16e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e174:	b35a      	cbz	r2, 800e1ce <_strtod_l+0x8ce>
 800e176:	4a9e      	ldr	r2, [pc, #632]	@ (800e3f0 <_strtod_l+0xaf0>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d12b      	bne.n	800e1d4 <_strtod_l+0x8d4>
 800e17c:	9b08      	ldr	r3, [sp, #32]
 800e17e:	4651      	mov	r1, sl
 800e180:	b303      	cbz	r3, 800e1c4 <_strtod_l+0x8c4>
 800e182:	465a      	mov	r2, fp
 800e184:	4b9b      	ldr	r3, [pc, #620]	@ (800e3f4 <_strtod_l+0xaf4>)
 800e186:	4013      	ands	r3, r2
 800e188:	f04f 32ff 	mov.w	r2, #4294967295
 800e18c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e190:	d81b      	bhi.n	800e1ca <_strtod_l+0x8ca>
 800e192:	0d1b      	lsrs	r3, r3, #20
 800e194:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e198:	fa02 f303 	lsl.w	r3, r2, r3
 800e19c:	4299      	cmp	r1, r3
 800e19e:	d119      	bne.n	800e1d4 <_strtod_l+0x8d4>
 800e1a0:	4b95      	ldr	r3, [pc, #596]	@ (800e3f8 <_strtod_l+0xaf8>)
 800e1a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d102      	bne.n	800e1ae <_strtod_l+0x8ae>
 800e1a8:	3101      	adds	r1, #1
 800e1aa:	f43f adca 	beq.w	800dd42 <_strtod_l+0x442>
 800e1ae:	4b91      	ldr	r3, [pc, #580]	@ (800e3f4 <_strtod_l+0xaf4>)
 800e1b0:	f04f 0a00 	mov.w	sl, #0
 800e1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1b6:	401a      	ands	r2, r3
 800e1b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e1bc:	9b08      	ldr	r3, [sp, #32]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1b8      	bne.n	800e134 <_strtod_l+0x834>
 800e1c2:	e5c9      	b.n	800dd58 <_strtod_l+0x458>
 800e1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c8:	e7e8      	b.n	800e19c <_strtod_l+0x89c>
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	e7e6      	b.n	800e19c <_strtod_l+0x89c>
 800e1ce:	ea53 030a 	orrs.w	r3, r3, sl
 800e1d2:	d0a1      	beq.n	800e118 <_strtod_l+0x818>
 800e1d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1d6:	b1db      	cbz	r3, 800e210 <_strtod_l+0x910>
 800e1d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1da:	4213      	tst	r3, r2
 800e1dc:	d0ee      	beq.n	800e1bc <_strtod_l+0x8bc>
 800e1de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	9a08      	ldr	r2, [sp, #32]
 800e1e4:	4659      	mov	r1, fp
 800e1e6:	b1bb      	cbz	r3, 800e218 <_strtod_l+0x918>
 800e1e8:	f7ff fb6a 	bl	800d8c0 <sulp>
 800e1ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1f0:	ec53 2b10 	vmov	r2, r3, d0
 800e1f4:	f7f2 f85e 	bl	80002b4 <__adddf3>
 800e1f8:	4682      	mov	sl, r0
 800e1fa:	468b      	mov	fp, r1
 800e1fc:	e7de      	b.n	800e1bc <_strtod_l+0x8bc>
 800e1fe:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e202:	f04f 3aff 	mov.w	sl, #4294967295
 800e206:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e20a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e20e:	e7d5      	b.n	800e1bc <_strtod_l+0x8bc>
 800e210:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e212:	ea13 0f0a 	tst.w	r3, sl
 800e216:	e7e1      	b.n	800e1dc <_strtod_l+0x8dc>
 800e218:	f7ff fb52 	bl	800d8c0 <sulp>
 800e21c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e220:	ec53 2b10 	vmov	r2, r3, d0
 800e224:	f7f2 f844 	bl	80002b0 <__aeabi_dsub>
 800e228:	2200      	movs	r2, #0
 800e22a:	2300      	movs	r3, #0
 800e22c:	4682      	mov	sl, r0
 800e22e:	468b      	mov	fp, r1
 800e230:	f7f2 fc5e 	bl	8000af0 <__aeabi_dcmpeq>
 800e234:	2800      	cmp	r0, #0
 800e236:	d0c1      	beq.n	800e1bc <_strtod_l+0x8bc>
 800e238:	e619      	b.n	800de6e <_strtod_l+0x56e>
 800e23a:	4641      	mov	r1, r8
 800e23c:	4620      	mov	r0, r4
 800e23e:	f7ff fac9 	bl	800d7d4 <__ratio>
 800e242:	2200      	movs	r2, #0
 800e244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e248:	ec57 6b10 	vmov	r6, r7, d0
 800e24c:	4630      	mov	r0, r6
 800e24e:	4639      	mov	r1, r7
 800e250:	f7f2 fc62 	bl	8000b18 <__aeabi_dcmple>
 800e254:	2800      	cmp	r0, #0
 800e256:	d06f      	beq.n	800e338 <_strtod_l+0xa38>
 800e258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d17a      	bne.n	800e354 <_strtod_l+0xa54>
 800e25e:	f1ba 0f00 	cmp.w	sl, #0
 800e262:	d158      	bne.n	800e316 <_strtod_l+0xa16>
 800e264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d15a      	bne.n	800e324 <_strtod_l+0xa24>
 800e26e:	2200      	movs	r2, #0
 800e270:	4b62      	ldr	r3, [pc, #392]	@ (800e3fc <_strtod_l+0xafc>)
 800e272:	4630      	mov	r0, r6
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 fc45 	bl	8000b04 <__aeabi_dcmplt>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d159      	bne.n	800e332 <_strtod_l+0xa32>
 800e27e:	4630      	mov	r0, r6
 800e280:	4639      	mov	r1, r7
 800e282:	2200      	movs	r2, #0
 800e284:	4b5e      	ldr	r3, [pc, #376]	@ (800e400 <_strtod_l+0xb00>)
 800e286:	f7f2 f9cb 	bl	8000620 <__aeabi_dmul>
 800e28a:	4606      	mov	r6, r0
 800e28c:	460f      	mov	r7, r1
 800e28e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e292:	9606      	str	r6, [sp, #24]
 800e294:	9307      	str	r3, [sp, #28]
 800e296:	4d57      	ldr	r5, [pc, #348]	@ (800e3f4 <_strtod_l+0xaf4>)
 800e298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e29c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2a2:	401d      	ands	r5, r3
 800e2a4:	4b57      	ldr	r3, [pc, #348]	@ (800e404 <_strtod_l+0xb04>)
 800e2a6:	429d      	cmp	r5, r3
 800e2a8:	f040 80b0 	bne.w	800e40c <_strtod_l+0xb0c>
 800e2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2ae:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e2b2:	ec4b ab10 	vmov	d0, sl, fp
 800e2b6:	f7ff f9c1 	bl	800d63c <__ulp>
 800e2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2be:	ec51 0b10 	vmov	r0, r1, d0
 800e2c2:	f7f2 f9ad 	bl	8000620 <__aeabi_dmul>
 800e2c6:	4652      	mov	r2, sl
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	f7f1 fff3 	bl	80002b4 <__adddf3>
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4948      	ldr	r1, [pc, #288]	@ (800e3f4 <_strtod_l+0xaf4>)
 800e2d2:	4682      	mov	sl, r0
 800e2d4:	4a4c      	ldr	r2, [pc, #304]	@ (800e408 <_strtod_l+0xb08>)
 800e2d6:	4019      	ands	r1, r3
 800e2d8:	4291      	cmp	r1, r2
 800e2da:	d942      	bls.n	800e362 <_strtod_l+0xa62>
 800e2dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2de:	4b46      	ldr	r3, [pc, #280]	@ (800e3f8 <_strtod_l+0xaf8>)
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d103      	bne.n	800e2ec <_strtod_l+0x9ec>
 800e2e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	f43f ad2b 	beq.w	800dd42 <_strtod_l+0x442>
 800e2ec:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800e3f8 <_strtod_l+0xaf8>
 800e2f0:	f04f 3aff 	mov.w	sl, #4294967295
 800e2f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e2f6:	9805      	ldr	r0, [sp, #20]
 800e2f8:	f7fe fe66 	bl	800cfc8 <_Bfree>
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	9805      	ldr	r0, [sp, #20]
 800e300:	f7fe fe62 	bl	800cfc8 <_Bfree>
 800e304:	4641      	mov	r1, r8
 800e306:	9805      	ldr	r0, [sp, #20]
 800e308:	f7fe fe5e 	bl	800cfc8 <_Bfree>
 800e30c:	4621      	mov	r1, r4
 800e30e:	9805      	ldr	r0, [sp, #20]
 800e310:	f7fe fe5a 	bl	800cfc8 <_Bfree>
 800e314:	e618      	b.n	800df48 <_strtod_l+0x648>
 800e316:	f1ba 0f01 	cmp.w	sl, #1
 800e31a:	d103      	bne.n	800e324 <_strtod_l+0xa24>
 800e31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f43f ada5 	beq.w	800de6e <_strtod_l+0x56e>
 800e324:	2600      	movs	r6, #0
 800e326:	4f35      	ldr	r7, [pc, #212]	@ (800e3fc <_strtod_l+0xafc>)
 800e328:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800e3d0 <_strtod_l+0xad0>
 800e32c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e330:	e7b1      	b.n	800e296 <_strtod_l+0x996>
 800e332:	2600      	movs	r6, #0
 800e334:	4f32      	ldr	r7, [pc, #200]	@ (800e400 <_strtod_l+0xb00>)
 800e336:	e7aa      	b.n	800e28e <_strtod_l+0x98e>
 800e338:	4b31      	ldr	r3, [pc, #196]	@ (800e400 <_strtod_l+0xb00>)
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	2200      	movs	r2, #0
 800e340:	f7f2 f96e 	bl	8000620 <__aeabi_dmul>
 800e344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e346:	4606      	mov	r6, r0
 800e348:	460f      	mov	r7, r1
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d09f      	beq.n	800e28e <_strtod_l+0x98e>
 800e34e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e352:	e7a0      	b.n	800e296 <_strtod_l+0x996>
 800e354:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800e3d8 <_strtod_l+0xad8>
 800e358:	ec57 6b17 	vmov	r6, r7, d7
 800e35c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e360:	e799      	b.n	800e296 <_strtod_l+0x996>
 800e362:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e366:	9b08      	ldr	r3, [sp, #32]
 800e368:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1c1      	bne.n	800e2f4 <_strtod_l+0x9f4>
 800e370:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e374:	0d1b      	lsrs	r3, r3, #20
 800e376:	051b      	lsls	r3, r3, #20
 800e378:	429d      	cmp	r5, r3
 800e37a:	d1bb      	bne.n	800e2f4 <_strtod_l+0x9f4>
 800e37c:	4630      	mov	r0, r6
 800e37e:	4639      	mov	r1, r7
 800e380:	f7f2 fcae 	bl	8000ce0 <__aeabi_d2lz>
 800e384:	f7f2 f91e 	bl	80005c4 <__aeabi_l2d>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	4630      	mov	r0, r6
 800e38e:	4639      	mov	r1, r7
 800e390:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e394:	f7f1 ff8c 	bl	80002b0 <__aeabi_dsub>
 800e398:	460b      	mov	r3, r1
 800e39a:	4602      	mov	r2, r0
 800e39c:	ea46 060a 	orr.w	r6, r6, sl
 800e3a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3a6:	431e      	orrs	r6, r3
 800e3a8:	d06d      	beq.n	800e486 <_strtod_l+0xb86>
 800e3aa:	a30d      	add	r3, pc, #52	@ (adr r3, 800e3e0 <_strtod_l+0xae0>)
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	f7f2 fba8 	bl	8000b04 <__aeabi_dcmplt>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f47f accf 	bne.w	800dd58 <_strtod_l+0x458>
 800e3ba:	a30b      	add	r3, pc, #44	@ (adr r3, 800e3e8 <_strtod_l+0xae8>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3c4:	f7f2 fbbc 	bl	8000b40 <__aeabi_dcmpgt>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d093      	beq.n	800e2f4 <_strtod_l+0x9f4>
 800e3cc:	e4c4      	b.n	800dd58 <_strtod_l+0x458>
 800e3ce:	bf00      	nop
 800e3d0:	00000000 	.word	0x00000000
 800e3d4:	bff00000 	.word	0xbff00000
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	3ff00000 	.word	0x3ff00000
 800e3e0:	94a03595 	.word	0x94a03595
 800e3e4:	3fdfffff 	.word	0x3fdfffff
 800e3e8:	35afe535 	.word	0x35afe535
 800e3ec:	3fe00000 	.word	0x3fe00000
 800e3f0:	000fffff 	.word	0x000fffff
 800e3f4:	7ff00000 	.word	0x7ff00000
 800e3f8:	7fefffff 	.word	0x7fefffff
 800e3fc:	3ff00000 	.word	0x3ff00000
 800e400:	3fe00000 	.word	0x3fe00000
 800e404:	7fe00000 	.word	0x7fe00000
 800e408:	7c9fffff 	.word	0x7c9fffff
 800e40c:	9b08      	ldr	r3, [sp, #32]
 800e40e:	b323      	cbz	r3, 800e45a <_strtod_l+0xb5a>
 800e410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e414:	d821      	bhi.n	800e45a <_strtod_l+0xb5a>
 800e416:	4630      	mov	r0, r6
 800e418:	4639      	mov	r1, r7
 800e41a:	a327      	add	r3, pc, #156	@ (adr r3, 800e4b8 <_strtod_l+0xbb8>)
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	f7f2 fb7a 	bl	8000b18 <__aeabi_dcmple>
 800e424:	b1a0      	cbz	r0, 800e450 <_strtod_l+0xb50>
 800e426:	4639      	mov	r1, r7
 800e428:	4630      	mov	r0, r6
 800e42a:	f7f2 fbd1 	bl	8000bd0 <__aeabi_d2uiz>
 800e42e:	2801      	cmp	r0, #1
 800e430:	bf38      	it	cc
 800e432:	2001      	movcc	r0, #1
 800e434:	f7f2 f87a 	bl	800052c <__aeabi_ui2d>
 800e438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e43a:	4606      	mov	r6, r0
 800e43c:	460f      	mov	r7, r1
 800e43e:	b9fb      	cbnz	r3, 800e480 <_strtod_l+0xb80>
 800e440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e444:	9014      	str	r0, [sp, #80]	@ 0x50
 800e446:	9315      	str	r3, [sp, #84]	@ 0x54
 800e448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e44c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e456:	1b5b      	subs	r3, r3, r5
 800e458:	9311      	str	r3, [sp, #68]	@ 0x44
 800e45a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e45e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e462:	f7ff f8eb 	bl	800d63c <__ulp>
 800e466:	4650      	mov	r0, sl
 800e468:	4659      	mov	r1, fp
 800e46a:	ec53 2b10 	vmov	r2, r3, d0
 800e46e:	f7f2 f8d7 	bl	8000620 <__aeabi_dmul>
 800e472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e476:	f7f1 ff1d 	bl	80002b4 <__adddf3>
 800e47a:	4682      	mov	sl, r0
 800e47c:	468b      	mov	fp, r1
 800e47e:	e772      	b.n	800e366 <_strtod_l+0xa66>
 800e480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e484:	e7e0      	b.n	800e448 <_strtod_l+0xb48>
 800e486:	a30e      	add	r3, pc, #56	@ (adr r3, 800e4c0 <_strtod_l+0xbc0>)
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	f7f2 fb3a 	bl	8000b04 <__aeabi_dcmplt>
 800e490:	e79a      	b.n	800e3c8 <_strtod_l+0xac8>
 800e492:	2300      	movs	r3, #0
 800e494:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e498:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e49a:	6013      	str	r3, [r2, #0]
 800e49c:	f7ff ba6d 	b.w	800d97a <_strtod_l+0x7a>
 800e4a0:	2a65      	cmp	r2, #101	@ 0x65
 800e4a2:	f43f ab67 	beq.w	800db74 <_strtod_l+0x274>
 800e4a6:	2a45      	cmp	r2, #69	@ 0x45
 800e4a8:	f43f ab64 	beq.w	800db74 <_strtod_l+0x274>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f7ff bba0 	b.w	800dbf2 <_strtod_l+0x2f2>
 800e4b2:	bf00      	nop
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	ffc00000 	.word	0xffc00000
 800e4bc:	41dfffff 	.word	0x41dfffff
 800e4c0:	94a03595 	.word	0x94a03595
 800e4c4:	3fcfffff 	.word	0x3fcfffff

0800e4c8 <_strtod_r>:
 800e4c8:	4b01      	ldr	r3, [pc, #4]	@ (800e4d0 <_strtod_r+0x8>)
 800e4ca:	f7ff ba19 	b.w	800d900 <_strtod_l>
 800e4ce:	bf00      	nop
 800e4d0:	20000084 	.word	0x20000084

0800e4d4 <__ssputs_r>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	461f      	mov	r7, r3
 800e4da:	688e      	ldr	r6, [r1, #8]
 800e4dc:	4682      	mov	sl, r0
 800e4de:	460c      	mov	r4, r1
 800e4e0:	42be      	cmp	r6, r7
 800e4e2:	4690      	mov	r8, r2
 800e4e4:	680b      	ldr	r3, [r1, #0]
 800e4e6:	d82d      	bhi.n	800e544 <__ssputs_r+0x70>
 800e4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e4f0:	d026      	beq.n	800e540 <__ssputs_r+0x6c>
 800e4f2:	6965      	ldr	r5, [r4, #20]
 800e4f4:	6909      	ldr	r1, [r1, #16]
 800e4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4fa:	eba3 0901 	sub.w	r9, r3, r1
 800e4fe:	1c7b      	adds	r3, r7, #1
 800e500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e504:	444b      	add	r3, r9
 800e506:	106d      	asrs	r5, r5, #1
 800e508:	429d      	cmp	r5, r3
 800e50a:	bf38      	it	cc
 800e50c:	461d      	movcc	r5, r3
 800e50e:	0553      	lsls	r3, r2, #21
 800e510:	d527      	bpl.n	800e562 <__ssputs_r+0x8e>
 800e512:	4629      	mov	r1, r5
 800e514:	f7fe fc8c 	bl	800ce30 <_malloc_r>
 800e518:	4606      	mov	r6, r0
 800e51a:	b360      	cbz	r0, 800e576 <__ssputs_r+0xa2>
 800e51c:	464a      	mov	r2, r9
 800e51e:	6921      	ldr	r1, [r4, #16]
 800e520:	f7fd fdad 	bl	800c07e <memcpy>
 800e524:	89a3      	ldrh	r3, [r4, #12]
 800e526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e52e:	81a3      	strh	r3, [r4, #12]
 800e530:	6126      	str	r6, [r4, #16]
 800e532:	444e      	add	r6, r9
 800e534:	6165      	str	r5, [r4, #20]
 800e536:	eba5 0509 	sub.w	r5, r5, r9
 800e53a:	6026      	str	r6, [r4, #0]
 800e53c:	463e      	mov	r6, r7
 800e53e:	60a5      	str	r5, [r4, #8]
 800e540:	42be      	cmp	r6, r7
 800e542:	d900      	bls.n	800e546 <__ssputs_r+0x72>
 800e544:	463e      	mov	r6, r7
 800e546:	4632      	mov	r2, r6
 800e548:	4641      	mov	r1, r8
 800e54a:	6820      	ldr	r0, [r4, #0]
 800e54c:	f000 f9c6 	bl	800e8dc <memmove>
 800e550:	68a3      	ldr	r3, [r4, #8]
 800e552:	2000      	movs	r0, #0
 800e554:	1b9b      	subs	r3, r3, r6
 800e556:	60a3      	str	r3, [r4, #8]
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	4433      	add	r3, r6
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e562:	462a      	mov	r2, r5
 800e564:	f000 fd79 	bl	800f05a <_realloc_r>
 800e568:	4606      	mov	r6, r0
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d1e0      	bne.n	800e530 <__ssputs_r+0x5c>
 800e56e:	6921      	ldr	r1, [r4, #16]
 800e570:	4650      	mov	r0, sl
 800e572:	f7fe fbe9 	bl	800cd48 <_free_r>
 800e576:	230c      	movs	r3, #12
 800e578:	f04f 30ff 	mov.w	r0, #4294967295
 800e57c:	f8ca 3000 	str.w	r3, [sl]
 800e580:	89a3      	ldrh	r3, [r4, #12]
 800e582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	e7e9      	b.n	800e55e <__ssputs_r+0x8a>
	...

0800e58c <_svfiprintf_r>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	4698      	mov	r8, r3
 800e592:	898b      	ldrh	r3, [r1, #12]
 800e594:	b09d      	sub	sp, #116	@ 0x74
 800e596:	4607      	mov	r7, r0
 800e598:	061b      	lsls	r3, r3, #24
 800e59a:	460d      	mov	r5, r1
 800e59c:	4614      	mov	r4, r2
 800e59e:	d510      	bpl.n	800e5c2 <_svfiprintf_r+0x36>
 800e5a0:	690b      	ldr	r3, [r1, #16]
 800e5a2:	b973      	cbnz	r3, 800e5c2 <_svfiprintf_r+0x36>
 800e5a4:	2140      	movs	r1, #64	@ 0x40
 800e5a6:	f7fe fc43 	bl	800ce30 <_malloc_r>
 800e5aa:	6028      	str	r0, [r5, #0]
 800e5ac:	6128      	str	r0, [r5, #16]
 800e5ae:	b930      	cbnz	r0, 800e5be <_svfiprintf_r+0x32>
 800e5b0:	230c      	movs	r3, #12
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b8:	b01d      	add	sp, #116	@ 0x74
 800e5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5be:	2340      	movs	r3, #64	@ 0x40
 800e5c0:	616b      	str	r3, [r5, #20]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5c8:	f04f 0901 	mov.w	r9, #1
 800e5cc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e770 <_svfiprintf_r+0x1e4>
 800e5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5d2:	2320      	movs	r3, #32
 800e5d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5d8:	2330      	movs	r3, #48	@ 0x30
 800e5da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5de:	4623      	mov	r3, r4
 800e5e0:	469a      	mov	sl, r3
 800e5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5e6:	b10a      	cbz	r2, 800e5ec <_svfiprintf_r+0x60>
 800e5e8:	2a25      	cmp	r2, #37	@ 0x25
 800e5ea:	d1f9      	bne.n	800e5e0 <_svfiprintf_r+0x54>
 800e5ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e5f0:	d00b      	beq.n	800e60a <_svfiprintf_r+0x7e>
 800e5f2:	465b      	mov	r3, fp
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4638      	mov	r0, r7
 800e5fa:	f7ff ff6b 	bl	800e4d4 <__ssputs_r>
 800e5fe:	3001      	adds	r0, #1
 800e600:	f000 80a7 	beq.w	800e752 <_svfiprintf_r+0x1c6>
 800e604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e606:	445a      	add	r2, fp
 800e608:	9209      	str	r2, [sp, #36]	@ 0x24
 800e60a:	f89a 3000 	ldrb.w	r3, [sl]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 809f 	beq.w	800e752 <_svfiprintf_r+0x1c6>
 800e614:	2300      	movs	r3, #0
 800e616:	f04f 32ff 	mov.w	r2, #4294967295
 800e61a:	f10a 0a01 	add.w	sl, sl, #1
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	9307      	str	r3, [sp, #28]
 800e622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e626:	931a      	str	r3, [sp, #104]	@ 0x68
 800e628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e62c:	4654      	mov	r4, sl
 800e62e:	2205      	movs	r2, #5
 800e630:	484f      	ldr	r0, [pc, #316]	@ (800e770 <_svfiprintf_r+0x1e4>)
 800e632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e636:	f7fd fd14 	bl	800c062 <memchr>
 800e63a:	9a04      	ldr	r2, [sp, #16]
 800e63c:	b9d8      	cbnz	r0, 800e676 <_svfiprintf_r+0xea>
 800e63e:	06d0      	lsls	r0, r2, #27
 800e640:	bf44      	itt	mi
 800e642:	2320      	movmi	r3, #32
 800e644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e648:	0711      	lsls	r1, r2, #28
 800e64a:	bf44      	itt	mi
 800e64c:	232b      	movmi	r3, #43	@ 0x2b
 800e64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e652:	f89a 3000 	ldrb.w	r3, [sl]
 800e656:	2b2a      	cmp	r3, #42	@ 0x2a
 800e658:	d015      	beq.n	800e686 <_svfiprintf_r+0xfa>
 800e65a:	9a07      	ldr	r2, [sp, #28]
 800e65c:	4654      	mov	r4, sl
 800e65e:	2000      	movs	r0, #0
 800e660:	f04f 0c0a 	mov.w	ip, #10
 800e664:	4621      	mov	r1, r4
 800e666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e66a:	3b30      	subs	r3, #48	@ 0x30
 800e66c:	2b09      	cmp	r3, #9
 800e66e:	d94b      	bls.n	800e708 <_svfiprintf_r+0x17c>
 800e670:	b1b0      	cbz	r0, 800e6a0 <_svfiprintf_r+0x114>
 800e672:	9207      	str	r2, [sp, #28]
 800e674:	e014      	b.n	800e6a0 <_svfiprintf_r+0x114>
 800e676:	eba0 0308 	sub.w	r3, r0, r8
 800e67a:	46a2      	mov	sl, r4
 800e67c:	fa09 f303 	lsl.w	r3, r9, r3
 800e680:	4313      	orrs	r3, r2
 800e682:	9304      	str	r3, [sp, #16]
 800e684:	e7d2      	b.n	800e62c <_svfiprintf_r+0xa0>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	1d19      	adds	r1, r3, #4
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	9103      	str	r1, [sp, #12]
 800e690:	bfbb      	ittet	lt
 800e692:	425b      	neglt	r3, r3
 800e694:	f042 0202 	orrlt.w	r2, r2, #2
 800e698:	9307      	strge	r3, [sp, #28]
 800e69a:	9307      	strlt	r3, [sp, #28]
 800e69c:	bfb8      	it	lt
 800e69e:	9204      	strlt	r2, [sp, #16]
 800e6a0:	7823      	ldrb	r3, [r4, #0]
 800e6a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6a4:	d10a      	bne.n	800e6bc <_svfiprintf_r+0x130>
 800e6a6:	7863      	ldrb	r3, [r4, #1]
 800e6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6aa:	d132      	bne.n	800e712 <_svfiprintf_r+0x186>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	3402      	adds	r4, #2
 800e6b0:	1d1a      	adds	r2, r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6b8:	9203      	str	r2, [sp, #12]
 800e6ba:	9305      	str	r3, [sp, #20]
 800e6bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e780 <_svfiprintf_r+0x1f4>
 800e6c0:	2203      	movs	r2, #3
 800e6c2:	7821      	ldrb	r1, [r4, #0]
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	f7fd fccc 	bl	800c062 <memchr>
 800e6ca:	b138      	cbz	r0, 800e6dc <_svfiprintf_r+0x150>
 800e6cc:	eba0 000a 	sub.w	r0, r0, sl
 800e6d0:	2240      	movs	r2, #64	@ 0x40
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	3401      	adds	r4, #1
 800e6d6:	4082      	lsls	r2, r0
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	9304      	str	r3, [sp, #16]
 800e6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e0:	2206      	movs	r2, #6
 800e6e2:	4824      	ldr	r0, [pc, #144]	@ (800e774 <_svfiprintf_r+0x1e8>)
 800e6e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6e8:	f7fd fcbb 	bl	800c062 <memchr>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d036      	beq.n	800e75e <_svfiprintf_r+0x1d2>
 800e6f0:	4b21      	ldr	r3, [pc, #132]	@ (800e778 <_svfiprintf_r+0x1ec>)
 800e6f2:	bb1b      	cbnz	r3, 800e73c <_svfiprintf_r+0x1b0>
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	3307      	adds	r3, #7
 800e6f8:	f023 0307 	bic.w	r3, r3, #7
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	9303      	str	r3, [sp, #12]
 800e700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e702:	4433      	add	r3, r6
 800e704:	9309      	str	r3, [sp, #36]	@ 0x24
 800e706:	e76a      	b.n	800e5de <_svfiprintf_r+0x52>
 800e708:	fb0c 3202 	mla	r2, ip, r2, r3
 800e70c:	460c      	mov	r4, r1
 800e70e:	2001      	movs	r0, #1
 800e710:	e7a8      	b.n	800e664 <_svfiprintf_r+0xd8>
 800e712:	2300      	movs	r3, #0
 800e714:	3401      	adds	r4, #1
 800e716:	f04f 0c0a 	mov.w	ip, #10
 800e71a:	4619      	mov	r1, r3
 800e71c:	9305      	str	r3, [sp, #20]
 800e71e:	4620      	mov	r0, r4
 800e720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e724:	3a30      	subs	r2, #48	@ 0x30
 800e726:	2a09      	cmp	r2, #9
 800e728:	d903      	bls.n	800e732 <_svfiprintf_r+0x1a6>
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d0c6      	beq.n	800e6bc <_svfiprintf_r+0x130>
 800e72e:	9105      	str	r1, [sp, #20]
 800e730:	e7c4      	b.n	800e6bc <_svfiprintf_r+0x130>
 800e732:	fb0c 2101 	mla	r1, ip, r1, r2
 800e736:	4604      	mov	r4, r0
 800e738:	2301      	movs	r3, #1
 800e73a:	e7f0      	b.n	800e71e <_svfiprintf_r+0x192>
 800e73c:	ab03      	add	r3, sp, #12
 800e73e:	462a      	mov	r2, r5
 800e740:	a904      	add	r1, sp, #16
 800e742:	4638      	mov	r0, r7
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	4b0d      	ldr	r3, [pc, #52]	@ (800e77c <_svfiprintf_r+0x1f0>)
 800e748:	f7fc fd18 	bl	800b17c <_printf_float>
 800e74c:	1c42      	adds	r2, r0, #1
 800e74e:	4606      	mov	r6, r0
 800e750:	d1d6      	bne.n	800e700 <_svfiprintf_r+0x174>
 800e752:	89ab      	ldrh	r3, [r5, #12]
 800e754:	065b      	lsls	r3, r3, #25
 800e756:	f53f af2d 	bmi.w	800e5b4 <_svfiprintf_r+0x28>
 800e75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e75c:	e72c      	b.n	800e5b8 <_svfiprintf_r+0x2c>
 800e75e:	ab03      	add	r3, sp, #12
 800e760:	462a      	mov	r2, r5
 800e762:	a904      	add	r1, sp, #16
 800e764:	4638      	mov	r0, r7
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	4b04      	ldr	r3, [pc, #16]	@ (800e77c <_svfiprintf_r+0x1f0>)
 800e76a:	f7fc ffa3 	bl	800b6b4 <_printf_i>
 800e76e:	e7ed      	b.n	800e74c <_svfiprintf_r+0x1c0>
 800e770:	080101d0 	.word	0x080101d0
 800e774:	080101da 	.word	0x080101da
 800e778:	0800b17d 	.word	0x0800b17d
 800e77c:	0800e4d5 	.word	0x0800e4d5
 800e780:	080101d6 	.word	0x080101d6

0800e784 <__sflush_r>:
 800e784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78c:	0716      	lsls	r6, r2, #28
 800e78e:	4605      	mov	r5, r0
 800e790:	460c      	mov	r4, r1
 800e792:	d454      	bmi.n	800e83e <__sflush_r+0xba>
 800e794:	684b      	ldr	r3, [r1, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	dc02      	bgt.n	800e7a0 <__sflush_r+0x1c>
 800e79a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	dd48      	ble.n	800e832 <__sflush_r+0xae>
 800e7a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7a2:	2e00      	cmp	r6, #0
 800e7a4:	d045      	beq.n	800e832 <__sflush_r+0xae>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7ac:	682f      	ldr	r7, [r5, #0]
 800e7ae:	6a21      	ldr	r1, [r4, #32]
 800e7b0:	602b      	str	r3, [r5, #0]
 800e7b2:	d030      	beq.n	800e816 <__sflush_r+0x92>
 800e7b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	0759      	lsls	r1, r3, #29
 800e7ba:	d505      	bpl.n	800e7c8 <__sflush_r+0x44>
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	1ad2      	subs	r2, r2, r3
 800e7c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e7c2:	b10b      	cbz	r3, 800e7c8 <__sflush_r+0x44>
 800e7c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e7c6:	1ad2      	subs	r2, r2, r3
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7cc:	6a21      	ldr	r1, [r4, #32]
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	47b0      	blx	r6
 800e7d2:	1c43      	adds	r3, r0, #1
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	d106      	bne.n	800e7e6 <__sflush_r+0x62>
 800e7d8:	6829      	ldr	r1, [r5, #0]
 800e7da:	291d      	cmp	r1, #29
 800e7dc:	d82b      	bhi.n	800e836 <__sflush_r+0xb2>
 800e7de:	4a2a      	ldr	r2, [pc, #168]	@ (800e888 <__sflush_r+0x104>)
 800e7e0:	410a      	asrs	r2, r1
 800e7e2:	07d6      	lsls	r6, r2, #31
 800e7e4:	d427      	bmi.n	800e836 <__sflush_r+0xb2>
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	04d9      	lsls	r1, r3, #19
 800e7ea:	6062      	str	r2, [r4, #4]
 800e7ec:	6922      	ldr	r2, [r4, #16]
 800e7ee:	6022      	str	r2, [r4, #0]
 800e7f0:	d504      	bpl.n	800e7fc <__sflush_r+0x78>
 800e7f2:	1c42      	adds	r2, r0, #1
 800e7f4:	d101      	bne.n	800e7fa <__sflush_r+0x76>
 800e7f6:	682b      	ldr	r3, [r5, #0]
 800e7f8:	b903      	cbnz	r3, 800e7fc <__sflush_r+0x78>
 800e7fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800e7fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7fe:	602f      	str	r7, [r5, #0]
 800e800:	b1b9      	cbz	r1, 800e832 <__sflush_r+0xae>
 800e802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e806:	4299      	cmp	r1, r3
 800e808:	d002      	beq.n	800e810 <__sflush_r+0x8c>
 800e80a:	4628      	mov	r0, r5
 800e80c:	f7fe fa9c 	bl	800cd48 <_free_r>
 800e810:	2300      	movs	r3, #0
 800e812:	6363      	str	r3, [r4, #52]	@ 0x34
 800e814:	e00d      	b.n	800e832 <__sflush_r+0xae>
 800e816:	2301      	movs	r3, #1
 800e818:	4628      	mov	r0, r5
 800e81a:	47b0      	blx	r6
 800e81c:	4602      	mov	r2, r0
 800e81e:	1c50      	adds	r0, r2, #1
 800e820:	d1c9      	bne.n	800e7b6 <__sflush_r+0x32>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d0c6      	beq.n	800e7b6 <__sflush_r+0x32>
 800e828:	2b1d      	cmp	r3, #29
 800e82a:	d001      	beq.n	800e830 <__sflush_r+0xac>
 800e82c:	2b16      	cmp	r3, #22
 800e82e:	d11d      	bne.n	800e86c <__sflush_r+0xe8>
 800e830:	602f      	str	r7, [r5, #0]
 800e832:	2000      	movs	r0, #0
 800e834:	e021      	b.n	800e87a <__sflush_r+0xf6>
 800e836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e83a:	b21b      	sxth	r3, r3
 800e83c:	e01a      	b.n	800e874 <__sflush_r+0xf0>
 800e83e:	690f      	ldr	r7, [r1, #16]
 800e840:	2f00      	cmp	r7, #0
 800e842:	d0f6      	beq.n	800e832 <__sflush_r+0xae>
 800e844:	0793      	lsls	r3, r2, #30
 800e846:	680e      	ldr	r6, [r1, #0]
 800e848:	600f      	str	r7, [r1, #0]
 800e84a:	bf0c      	ite	eq
 800e84c:	694b      	ldreq	r3, [r1, #20]
 800e84e:	2300      	movne	r3, #0
 800e850:	eba6 0807 	sub.w	r8, r6, r7
 800e854:	608b      	str	r3, [r1, #8]
 800e856:	f1b8 0f00 	cmp.w	r8, #0
 800e85a:	ddea      	ble.n	800e832 <__sflush_r+0xae>
 800e85c:	4643      	mov	r3, r8
 800e85e:	463a      	mov	r2, r7
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	4628      	mov	r0, r5
 800e864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e866:	47b0      	blx	r6
 800e868:	2800      	cmp	r0, #0
 800e86a:	dc08      	bgt.n	800e87e <__sflush_r+0xfa>
 800e86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e874:	f04f 30ff 	mov.w	r0, #4294967295
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87e:	4407      	add	r7, r0
 800e880:	eba8 0800 	sub.w	r8, r8, r0
 800e884:	e7e7      	b.n	800e856 <__sflush_r+0xd2>
 800e886:	bf00      	nop
 800e888:	dfbffffe 	.word	0xdfbffffe

0800e88c <_fflush_r>:
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	690b      	ldr	r3, [r1, #16]
 800e890:	4605      	mov	r5, r0
 800e892:	460c      	mov	r4, r1
 800e894:	b913      	cbnz	r3, 800e89c <_fflush_r+0x10>
 800e896:	2500      	movs	r5, #0
 800e898:	4628      	mov	r0, r5
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	b118      	cbz	r0, 800e8a6 <_fflush_r+0x1a>
 800e89e:	6a03      	ldr	r3, [r0, #32]
 800e8a0:	b90b      	cbnz	r3, 800e8a6 <_fflush_r+0x1a>
 800e8a2:	f7fd fac5 	bl	800be30 <__sinit>
 800e8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0f3      	beq.n	800e896 <_fflush_r+0xa>
 800e8ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8b0:	07d0      	lsls	r0, r2, #31
 800e8b2:	d404      	bmi.n	800e8be <_fflush_r+0x32>
 800e8b4:	0599      	lsls	r1, r3, #22
 800e8b6:	d402      	bmi.n	800e8be <_fflush_r+0x32>
 800e8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8ba:	f7fd fbd0 	bl	800c05e <__retarget_lock_acquire_recursive>
 800e8be:	4628      	mov	r0, r5
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	f7ff ff5f 	bl	800e784 <__sflush_r>
 800e8c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	07da      	lsls	r2, r3, #31
 800e8cc:	d4e4      	bmi.n	800e898 <_fflush_r+0xc>
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	059b      	lsls	r3, r3, #22
 800e8d2:	d4e1      	bmi.n	800e898 <_fflush_r+0xc>
 800e8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8d6:	f7fd fbc3 	bl	800c060 <__retarget_lock_release_recursive>
 800e8da:	e7dd      	b.n	800e898 <_fflush_r+0xc>

0800e8dc <memmove>:
 800e8dc:	4288      	cmp	r0, r1
 800e8de:	b510      	push	{r4, lr}
 800e8e0:	eb01 0402 	add.w	r4, r1, r2
 800e8e4:	d902      	bls.n	800e8ec <memmove+0x10>
 800e8e6:	4284      	cmp	r4, r0
 800e8e8:	4623      	mov	r3, r4
 800e8ea:	d807      	bhi.n	800e8fc <memmove+0x20>
 800e8ec:	1e43      	subs	r3, r0, #1
 800e8ee:	42a1      	cmp	r1, r4
 800e8f0:	d008      	beq.n	800e904 <memmove+0x28>
 800e8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8fa:	e7f8      	b.n	800e8ee <memmove+0x12>
 800e8fc:	4402      	add	r2, r0
 800e8fe:	4601      	mov	r1, r0
 800e900:	428a      	cmp	r2, r1
 800e902:	d100      	bne.n	800e906 <memmove+0x2a>
 800e904:	bd10      	pop	{r4, pc}
 800e906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e90e:	e7f7      	b.n	800e900 <memmove+0x24>

0800e910 <strncmp>:
 800e910:	b510      	push	{r4, lr}
 800e912:	b16a      	cbz	r2, 800e930 <strncmp+0x20>
 800e914:	3901      	subs	r1, #1
 800e916:	1884      	adds	r4, r0, r2
 800e918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e91c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e920:	429a      	cmp	r2, r3
 800e922:	d103      	bne.n	800e92c <strncmp+0x1c>
 800e924:	42a0      	cmp	r0, r4
 800e926:	d001      	beq.n	800e92c <strncmp+0x1c>
 800e928:	2a00      	cmp	r2, #0
 800e92a:	d1f5      	bne.n	800e918 <strncmp+0x8>
 800e92c:	1ad0      	subs	r0, r2, r3
 800e92e:	bd10      	pop	{r4, pc}
 800e930:	4610      	mov	r0, r2
 800e932:	e7fc      	b.n	800e92e <strncmp+0x1e>

0800e934 <_sbrk_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	2300      	movs	r3, #0
 800e938:	4d05      	ldr	r5, [pc, #20]	@ (800e950 <_sbrk_r+0x1c>)
 800e93a:	4604      	mov	r4, r0
 800e93c:	4608      	mov	r0, r1
 800e93e:	602b      	str	r3, [r5, #0]
 800e940:	f7f4 fc8a 	bl	8003258 <_sbrk>
 800e944:	1c43      	adds	r3, r0, #1
 800e946:	d102      	bne.n	800e94e <_sbrk_r+0x1a>
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	b103      	cbz	r3, 800e94e <_sbrk_r+0x1a>
 800e94c:	6023      	str	r3, [r4, #0]
 800e94e:	bd38      	pop	{r3, r4, r5, pc}
 800e950:	2003b3b4 	.word	0x2003b3b4
 800e954:	00000000 	.word	0x00000000

0800e958 <nan>:
 800e958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e960 <nan+0x8>
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	00000000 	.word	0x00000000
 800e964:	7ff80000 	.word	0x7ff80000

0800e968 <__assert_func>:
 800e968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e96a:	4614      	mov	r4, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	4b09      	ldr	r3, [pc, #36]	@ (800e994 <__assert_func+0x2c>)
 800e970:	4605      	mov	r5, r0
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68d8      	ldr	r0, [r3, #12]
 800e976:	b954      	cbnz	r4, 800e98e <__assert_func+0x26>
 800e978:	4b07      	ldr	r3, [pc, #28]	@ (800e998 <__assert_func+0x30>)
 800e97a:	461c      	mov	r4, r3
 800e97c:	9100      	str	r1, [sp, #0]
 800e97e:	4907      	ldr	r1, [pc, #28]	@ (800e99c <__assert_func+0x34>)
 800e980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e984:	462b      	mov	r3, r5
 800e986:	f000 fba3 	bl	800f0d0 <fiprintf>
 800e98a:	f000 fbb3 	bl	800f0f4 <abort>
 800e98e:	4b04      	ldr	r3, [pc, #16]	@ (800e9a0 <__assert_func+0x38>)
 800e990:	e7f4      	b.n	800e97c <__assert_func+0x14>
 800e992:	bf00      	nop
 800e994:	20000034 	.word	0x20000034
 800e998:	08010224 	.word	0x08010224
 800e99c:	080101f6 	.word	0x080101f6
 800e9a0:	080101e9 	.word	0x080101e9

0800e9a4 <_calloc_r>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800e9aa:	b93c      	cbnz	r4, 800e9bc <_calloc_r+0x18>
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7fe fa3f 	bl	800ce30 <_malloc_r>
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	b928      	cbnz	r0, 800e9c2 <_calloc_r+0x1e>
 800e9b6:	2600      	movs	r6, #0
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
 800e9bc:	220c      	movs	r2, #12
 800e9be:	6002      	str	r2, [r0, #0]
 800e9c0:	e7f9      	b.n	800e9b6 <_calloc_r+0x12>
 800e9c2:	462a      	mov	r2, r5
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	f7fd facc 	bl	800bf62 <memset>
 800e9ca:	e7f5      	b.n	800e9b8 <_calloc_r+0x14>

0800e9cc <rshift>:
 800e9cc:	6903      	ldr	r3, [r0, #16]
 800e9ce:	114a      	asrs	r2, r1, #5
 800e9d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9d8:	f100 0414 	add.w	r4, r0, #20
 800e9dc:	dd45      	ble.n	800ea6a <rshift+0x9e>
 800e9de:	f011 011f 	ands.w	r1, r1, #31
 800e9e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9ea:	d10c      	bne.n	800ea06 <rshift+0x3a>
 800e9ec:	f100 0710 	add.w	r7, r0, #16
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	42b1      	cmp	r1, r6
 800e9f4:	d334      	bcc.n	800ea60 <rshift+0x94>
 800e9f6:	1a9b      	subs	r3, r3, r2
 800e9f8:	1eea      	subs	r2, r5, #3
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4296      	cmp	r6, r2
 800e9fe:	bf38      	it	cc
 800ea00:	2300      	movcc	r3, #0
 800ea02:	4423      	add	r3, r4
 800ea04:	e015      	b.n	800ea32 <rshift+0x66>
 800ea06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea0a:	f1c1 0820 	rsb	r8, r1, #32
 800ea0e:	f105 0e04 	add.w	lr, r5, #4
 800ea12:	46a1      	mov	r9, r4
 800ea14:	40cf      	lsrs	r7, r1
 800ea16:	4576      	cmp	r6, lr
 800ea18:	46f4      	mov	ip, lr
 800ea1a:	d815      	bhi.n	800ea48 <rshift+0x7c>
 800ea1c:	1a9a      	subs	r2, r3, r2
 800ea1e:	3501      	adds	r5, #1
 800ea20:	0092      	lsls	r2, r2, #2
 800ea22:	3a04      	subs	r2, #4
 800ea24:	42ae      	cmp	r6, r5
 800ea26:	bf38      	it	cc
 800ea28:	2200      	movcc	r2, #0
 800ea2a:	18a3      	adds	r3, r4, r2
 800ea2c:	50a7      	str	r7, [r4, r2]
 800ea2e:	b107      	cbz	r7, 800ea32 <rshift+0x66>
 800ea30:	3304      	adds	r3, #4
 800ea32:	1b1a      	subs	r2, r3, r4
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea3a:	bf08      	it	eq
 800ea3c:	2300      	moveq	r3, #0
 800ea3e:	6102      	str	r2, [r0, #16]
 800ea40:	bf08      	it	eq
 800ea42:	6143      	streq	r3, [r0, #20]
 800ea44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea48:	f8dc c000 	ldr.w	ip, [ip]
 800ea4c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea50:	ea4c 0707 	orr.w	r7, ip, r7
 800ea54:	f849 7b04 	str.w	r7, [r9], #4
 800ea58:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea5c:	40cf      	lsrs	r7, r1
 800ea5e:	e7da      	b.n	800ea16 <rshift+0x4a>
 800ea60:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea64:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea68:	e7c3      	b.n	800e9f2 <rshift+0x26>
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	e7e1      	b.n	800ea32 <rshift+0x66>

0800ea6e <__hexdig_fun>:
 800ea6e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ea72:	2b09      	cmp	r3, #9
 800ea74:	d802      	bhi.n	800ea7c <__hexdig_fun+0xe>
 800ea76:	3820      	subs	r0, #32
 800ea78:	b2c0      	uxtb	r0, r0
 800ea7a:	4770      	bx	lr
 800ea7c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ea80:	2b05      	cmp	r3, #5
 800ea82:	d801      	bhi.n	800ea88 <__hexdig_fun+0x1a>
 800ea84:	3847      	subs	r0, #71	@ 0x47
 800ea86:	e7f7      	b.n	800ea78 <__hexdig_fun+0xa>
 800ea88:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ea8c:	2b05      	cmp	r3, #5
 800ea8e:	d801      	bhi.n	800ea94 <__hexdig_fun+0x26>
 800ea90:	3827      	subs	r0, #39	@ 0x27
 800ea92:	e7f1      	b.n	800ea78 <__hexdig_fun+0xa>
 800ea94:	2000      	movs	r0, #0
 800ea96:	4770      	bx	lr

0800ea98 <__gethex>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	b085      	sub	sp, #20
 800ea9e:	468a      	mov	sl, r1
 800eaa0:	4690      	mov	r8, r2
 800eaa2:	9302      	str	r3, [sp, #8]
 800eaa4:	680b      	ldr	r3, [r1, #0]
 800eaa6:	9001      	str	r0, [sp, #4]
 800eaa8:	1c9c      	adds	r4, r3, #2
 800eaaa:	46a1      	mov	r9, r4
 800eaac:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eab0:	2830      	cmp	r0, #48	@ 0x30
 800eab2:	d0fa      	beq.n	800eaaa <__gethex+0x12>
 800eab4:	eba9 0303 	sub.w	r3, r9, r3
 800eab8:	f1a3 0b02 	sub.w	fp, r3, #2
 800eabc:	f7ff ffd7 	bl	800ea6e <__hexdig_fun>
 800eac0:	4605      	mov	r5, r0
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d166      	bne.n	800eb94 <__gethex+0xfc>
 800eac6:	2201      	movs	r2, #1
 800eac8:	499e      	ldr	r1, [pc, #632]	@ (800ed44 <__gethex+0x2ac>)
 800eaca:	4648      	mov	r0, r9
 800eacc:	f7ff ff20 	bl	800e910 <strncmp>
 800ead0:	4607      	mov	r7, r0
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d165      	bne.n	800eba2 <__gethex+0x10a>
 800ead6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eada:	4626      	mov	r6, r4
 800eadc:	f7ff ffc7 	bl	800ea6e <__hexdig_fun>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d060      	beq.n	800eba6 <__gethex+0x10e>
 800eae4:	4623      	mov	r3, r4
 800eae6:	7818      	ldrb	r0, [r3, #0]
 800eae8:	4699      	mov	r9, r3
 800eaea:	3301      	adds	r3, #1
 800eaec:	2830      	cmp	r0, #48	@ 0x30
 800eaee:	d0fa      	beq.n	800eae6 <__gethex+0x4e>
 800eaf0:	f7ff ffbd 	bl	800ea6e <__hexdig_fun>
 800eaf4:	fab0 f580 	clz	r5, r0
 800eaf8:	f04f 0b01 	mov.w	fp, #1
 800eafc:	096d      	lsrs	r5, r5, #5
 800eafe:	464a      	mov	r2, r9
 800eb00:	4616      	mov	r6, r2
 800eb02:	3201      	adds	r2, #1
 800eb04:	7830      	ldrb	r0, [r6, #0]
 800eb06:	f7ff ffb2 	bl	800ea6e <__hexdig_fun>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d1f8      	bne.n	800eb00 <__gethex+0x68>
 800eb0e:	2201      	movs	r2, #1
 800eb10:	498c      	ldr	r1, [pc, #560]	@ (800ed44 <__gethex+0x2ac>)
 800eb12:	4630      	mov	r0, r6
 800eb14:	f7ff fefc 	bl	800e910 <strncmp>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	d13e      	bne.n	800eb9a <__gethex+0x102>
 800eb1c:	b944      	cbnz	r4, 800eb30 <__gethex+0x98>
 800eb1e:	1c74      	adds	r4, r6, #1
 800eb20:	4622      	mov	r2, r4
 800eb22:	4616      	mov	r6, r2
 800eb24:	3201      	adds	r2, #1
 800eb26:	7830      	ldrb	r0, [r6, #0]
 800eb28:	f7ff ffa1 	bl	800ea6e <__hexdig_fun>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d1f8      	bne.n	800eb22 <__gethex+0x8a>
 800eb30:	1ba4      	subs	r4, r4, r6
 800eb32:	00a7      	lsls	r7, r4, #2
 800eb34:	7833      	ldrb	r3, [r6, #0]
 800eb36:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb3a:	2b50      	cmp	r3, #80	@ 0x50
 800eb3c:	d13d      	bne.n	800ebba <__gethex+0x122>
 800eb3e:	7873      	ldrb	r3, [r6, #1]
 800eb40:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb42:	d032      	beq.n	800ebaa <__gethex+0x112>
 800eb44:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb46:	d033      	beq.n	800ebb0 <__gethex+0x118>
 800eb48:	1c71      	adds	r1, r6, #1
 800eb4a:	2400      	movs	r4, #0
 800eb4c:	7808      	ldrb	r0, [r1, #0]
 800eb4e:	f7ff ff8e 	bl	800ea6e <__hexdig_fun>
 800eb52:	1e43      	subs	r3, r0, #1
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b18      	cmp	r3, #24
 800eb58:	d82f      	bhi.n	800ebba <__gethex+0x122>
 800eb5a:	f1a0 0210 	sub.w	r2, r0, #16
 800eb5e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb62:	f7ff ff84 	bl	800ea6e <__hexdig_fun>
 800eb66:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb6a:	230a      	movs	r3, #10
 800eb6c:	fa5f fc8c 	uxtb.w	ip, ip
 800eb70:	f1bc 0f18 	cmp.w	ip, #24
 800eb74:	d91e      	bls.n	800ebb4 <__gethex+0x11c>
 800eb76:	b104      	cbz	r4, 800eb7a <__gethex+0xe2>
 800eb78:	4252      	negs	r2, r2
 800eb7a:	4417      	add	r7, r2
 800eb7c:	f8ca 1000 	str.w	r1, [sl]
 800eb80:	b1ed      	cbz	r5, 800ebbe <__gethex+0x126>
 800eb82:	f1bb 0f00 	cmp.w	fp, #0
 800eb86:	bf0c      	ite	eq
 800eb88:	2506      	moveq	r5, #6
 800eb8a:	2500      	movne	r5, #0
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	b005      	add	sp, #20
 800eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb94:	2500      	movs	r5, #0
 800eb96:	462c      	mov	r4, r5
 800eb98:	e7b1      	b.n	800eafe <__gethex+0x66>
 800eb9a:	2c00      	cmp	r4, #0
 800eb9c:	d1c8      	bne.n	800eb30 <__gethex+0x98>
 800eb9e:	4627      	mov	r7, r4
 800eba0:	e7c8      	b.n	800eb34 <__gethex+0x9c>
 800eba2:	464e      	mov	r6, r9
 800eba4:	462f      	mov	r7, r5
 800eba6:	2501      	movs	r5, #1
 800eba8:	e7c4      	b.n	800eb34 <__gethex+0x9c>
 800ebaa:	2400      	movs	r4, #0
 800ebac:	1cb1      	adds	r1, r6, #2
 800ebae:	e7cd      	b.n	800eb4c <__gethex+0xb4>
 800ebb0:	2401      	movs	r4, #1
 800ebb2:	e7fb      	b.n	800ebac <__gethex+0x114>
 800ebb4:	fb03 0002 	mla	r0, r3, r2, r0
 800ebb8:	e7cf      	b.n	800eb5a <__gethex+0xc2>
 800ebba:	4631      	mov	r1, r6
 800ebbc:	e7de      	b.n	800eb7c <__gethex+0xe4>
 800ebbe:	eba6 0309 	sub.w	r3, r6, r9
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	2b07      	cmp	r3, #7
 800ebc8:	dc0a      	bgt.n	800ebe0 <__gethex+0x148>
 800ebca:	9801      	ldr	r0, [sp, #4]
 800ebcc:	f7fe f9bc 	bl	800cf48 <_Balloc>
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	b940      	cbnz	r0, 800ebe6 <__gethex+0x14e>
 800ebd4:	4b5c      	ldr	r3, [pc, #368]	@ (800ed48 <__gethex+0x2b0>)
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	21e4      	movs	r1, #228	@ 0xe4
 800ebda:	485c      	ldr	r0, [pc, #368]	@ (800ed4c <__gethex+0x2b4>)
 800ebdc:	f7ff fec4 	bl	800e968 <__assert_func>
 800ebe0:	3101      	adds	r1, #1
 800ebe2:	105b      	asrs	r3, r3, #1
 800ebe4:	e7ef      	b.n	800ebc6 <__gethex+0x12e>
 800ebe6:	f100 0a14 	add.w	sl, r0, #20
 800ebea:	2300      	movs	r3, #0
 800ebec:	4655      	mov	r5, sl
 800ebee:	469b      	mov	fp, r3
 800ebf0:	45b1      	cmp	r9, r6
 800ebf2:	d337      	bcc.n	800ec64 <__gethex+0x1cc>
 800ebf4:	f845 bb04 	str.w	fp, [r5], #4
 800ebf8:	eba5 050a 	sub.w	r5, r5, sl
 800ebfc:	4658      	mov	r0, fp
 800ebfe:	10ad      	asrs	r5, r5, #2
 800ec00:	6125      	str	r5, [r4, #16]
 800ec02:	016d      	lsls	r5, r5, #5
 800ec04:	f7fe fa94 	bl	800d130 <__hi0bits>
 800ec08:	f8d8 6000 	ldr.w	r6, [r8]
 800ec0c:	1a2d      	subs	r5, r5, r0
 800ec0e:	42b5      	cmp	r5, r6
 800ec10:	dd54      	ble.n	800ecbc <__gethex+0x224>
 800ec12:	1bad      	subs	r5, r5, r6
 800ec14:	4620      	mov	r0, r4
 800ec16:	4629      	mov	r1, r5
 800ec18:	f7fe fe31 	bl	800d87e <__any_on>
 800ec1c:	4681      	mov	r9, r0
 800ec1e:	b178      	cbz	r0, 800ec40 <__gethex+0x1a8>
 800ec20:	1e6b      	subs	r3, r5, #1
 800ec22:	f04f 0901 	mov.w	r9, #1
 800ec26:	1159      	asrs	r1, r3, #5
 800ec28:	f003 021f 	and.w	r2, r3, #31
 800ec2c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec30:	fa09 f202 	lsl.w	r2, r9, r2
 800ec34:	420a      	tst	r2, r1
 800ec36:	d003      	beq.n	800ec40 <__gethex+0x1a8>
 800ec38:	454b      	cmp	r3, r9
 800ec3a:	dc36      	bgt.n	800ecaa <__gethex+0x212>
 800ec3c:	f04f 0902 	mov.w	r9, #2
 800ec40:	442f      	add	r7, r5
 800ec42:	4629      	mov	r1, r5
 800ec44:	4620      	mov	r0, r4
 800ec46:	f7ff fec1 	bl	800e9cc <rshift>
 800ec4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec4e:	42bb      	cmp	r3, r7
 800ec50:	da42      	bge.n	800ecd8 <__gethex+0x240>
 800ec52:	4621      	mov	r1, r4
 800ec54:	9801      	ldr	r0, [sp, #4]
 800ec56:	f7fe f9b7 	bl	800cfc8 <_Bfree>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec5e:	25a3      	movs	r5, #163	@ 0xa3
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	e793      	b.n	800eb8c <__gethex+0xf4>
 800ec64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ec68:	2a2e      	cmp	r2, #46	@ 0x2e
 800ec6a:	d012      	beq.n	800ec92 <__gethex+0x1fa>
 800ec6c:	2b20      	cmp	r3, #32
 800ec6e:	d104      	bne.n	800ec7a <__gethex+0x1e2>
 800ec70:	f845 bb04 	str.w	fp, [r5], #4
 800ec74:	f04f 0b00 	mov.w	fp, #0
 800ec78:	465b      	mov	r3, fp
 800ec7a:	7830      	ldrb	r0, [r6, #0]
 800ec7c:	9303      	str	r3, [sp, #12]
 800ec7e:	f7ff fef6 	bl	800ea6e <__hexdig_fun>
 800ec82:	9b03      	ldr	r3, [sp, #12]
 800ec84:	f000 000f 	and.w	r0, r0, #15
 800ec88:	4098      	lsls	r0, r3
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ec90:	e7ae      	b.n	800ebf0 <__gethex+0x158>
 800ec92:	45b1      	cmp	r9, r6
 800ec94:	d8ea      	bhi.n	800ec6c <__gethex+0x1d4>
 800ec96:	2201      	movs	r2, #1
 800ec98:	492a      	ldr	r1, [pc, #168]	@ (800ed44 <__gethex+0x2ac>)
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	9303      	str	r3, [sp, #12]
 800ec9e:	f7ff fe37 	bl	800e910 <strncmp>
 800eca2:	9b03      	ldr	r3, [sp, #12]
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d1e1      	bne.n	800ec6c <__gethex+0x1d4>
 800eca8:	e7a2      	b.n	800ebf0 <__gethex+0x158>
 800ecaa:	1ea9      	subs	r1, r5, #2
 800ecac:	4620      	mov	r0, r4
 800ecae:	f7fe fde6 	bl	800d87e <__any_on>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d0c2      	beq.n	800ec3c <__gethex+0x1a4>
 800ecb6:	f04f 0903 	mov.w	r9, #3
 800ecba:	e7c1      	b.n	800ec40 <__gethex+0x1a8>
 800ecbc:	da09      	bge.n	800ecd2 <__gethex+0x23a>
 800ecbe:	1b75      	subs	r5, r6, r5
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	9801      	ldr	r0, [sp, #4]
 800ecc4:	462a      	mov	r2, r5
 800ecc6:	1b7f      	subs	r7, r7, r5
 800ecc8:	f7fe fb98 	bl	800d3fc <__lshift>
 800eccc:	4604      	mov	r4, r0
 800ecce:	f100 0a14 	add.w	sl, r0, #20
 800ecd2:	f04f 0900 	mov.w	r9, #0
 800ecd6:	e7b8      	b.n	800ec4a <__gethex+0x1b2>
 800ecd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ecdc:	42bd      	cmp	r5, r7
 800ecde:	dd6f      	ble.n	800edc0 <__gethex+0x328>
 800ece0:	1bed      	subs	r5, r5, r7
 800ece2:	42ae      	cmp	r6, r5
 800ece4:	dc34      	bgt.n	800ed50 <__gethex+0x2b8>
 800ece6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d022      	beq.n	800ed34 <__gethex+0x29c>
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d024      	beq.n	800ed3c <__gethex+0x2a4>
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d115      	bne.n	800ed22 <__gethex+0x28a>
 800ecf6:	42ae      	cmp	r6, r5
 800ecf8:	d113      	bne.n	800ed22 <__gethex+0x28a>
 800ecfa:	2e01      	cmp	r6, #1
 800ecfc:	d10b      	bne.n	800ed16 <__gethex+0x27e>
 800ecfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed02:	2562      	movs	r5, #98	@ 0x62
 800ed04:	9a02      	ldr	r2, [sp, #8]
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	2301      	movs	r3, #1
 800ed0a:	6123      	str	r3, [r4, #16]
 800ed0c:	f8ca 3000 	str.w	r3, [sl]
 800ed10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed12:	601c      	str	r4, [r3, #0]
 800ed14:	e73a      	b.n	800eb8c <__gethex+0xf4>
 800ed16:	1e71      	subs	r1, r6, #1
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f7fe fdb0 	bl	800d87e <__any_on>
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d1ed      	bne.n	800ecfe <__gethex+0x266>
 800ed22:	4621      	mov	r1, r4
 800ed24:	9801      	ldr	r0, [sp, #4]
 800ed26:	f7fe f94f 	bl	800cfc8 <_Bfree>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed2e:	2550      	movs	r5, #80	@ 0x50
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	e72b      	b.n	800eb8c <__gethex+0xf4>
 800ed34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1f3      	bne.n	800ed22 <__gethex+0x28a>
 800ed3a:	e7e0      	b.n	800ecfe <__gethex+0x266>
 800ed3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1dd      	bne.n	800ecfe <__gethex+0x266>
 800ed42:	e7ee      	b.n	800ed22 <__gethex+0x28a>
 800ed44:	08010178 	.word	0x08010178
 800ed48:	0801000e 	.word	0x0801000e
 800ed4c:	08010225 	.word	0x08010225
 800ed50:	1e6f      	subs	r7, r5, #1
 800ed52:	f1b9 0f00 	cmp.w	r9, #0
 800ed56:	d130      	bne.n	800edba <__gethex+0x322>
 800ed58:	b127      	cbz	r7, 800ed64 <__gethex+0x2cc>
 800ed5a:	4639      	mov	r1, r7
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7fe fd8e 	bl	800d87e <__any_on>
 800ed62:	4681      	mov	r9, r0
 800ed64:	117a      	asrs	r2, r7, #5
 800ed66:	2301      	movs	r3, #1
 800ed68:	f007 071f 	and.w	r7, r7, #31
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed72:	4620      	mov	r0, r4
 800ed74:	40bb      	lsls	r3, r7
 800ed76:	1b76      	subs	r6, r6, r5
 800ed78:	2502      	movs	r5, #2
 800ed7a:	4213      	tst	r3, r2
 800ed7c:	bf18      	it	ne
 800ed7e:	f049 0902 	orrne.w	r9, r9, #2
 800ed82:	f7ff fe23 	bl	800e9cc <rshift>
 800ed86:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ed8a:	f1b9 0f00 	cmp.w	r9, #0
 800ed8e:	d047      	beq.n	800ee20 <__gethex+0x388>
 800ed90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d015      	beq.n	800edc4 <__gethex+0x32c>
 800ed98:	2b03      	cmp	r3, #3
 800ed9a:	d017      	beq.n	800edcc <__gethex+0x334>
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d109      	bne.n	800edb4 <__gethex+0x31c>
 800eda0:	f019 0f02 	tst.w	r9, #2
 800eda4:	d006      	beq.n	800edb4 <__gethex+0x31c>
 800eda6:	f8da 3000 	ldr.w	r3, [sl]
 800edaa:	ea49 0903 	orr.w	r9, r9, r3
 800edae:	f019 0f01 	tst.w	r9, #1
 800edb2:	d10e      	bne.n	800edd2 <__gethex+0x33a>
 800edb4:	f045 0510 	orr.w	r5, r5, #16
 800edb8:	e032      	b.n	800ee20 <__gethex+0x388>
 800edba:	f04f 0901 	mov.w	r9, #1
 800edbe:	e7d1      	b.n	800ed64 <__gethex+0x2cc>
 800edc0:	2501      	movs	r5, #1
 800edc2:	e7e2      	b.n	800ed8a <__gethex+0x2f2>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edc6:	f1c3 0301 	rsb	r3, r3, #1
 800edca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800edcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d0f0      	beq.n	800edb4 <__gethex+0x31c>
 800edd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800edd6:	f104 0314 	add.w	r3, r4, #20
 800edda:	f04f 0c00 	mov.w	ip, #0
 800edde:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ede2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ede6:	4618      	mov	r0, r3
 800ede8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800edf0:	d01b      	beq.n	800ee2a <__gethex+0x392>
 800edf2:	3201      	adds	r2, #1
 800edf4:	6002      	str	r2, [r0, #0]
 800edf6:	2d02      	cmp	r5, #2
 800edf8:	f104 0314 	add.w	r3, r4, #20
 800edfc:	d13c      	bne.n	800ee78 <__gethex+0x3e0>
 800edfe:	f8d8 2000 	ldr.w	r2, [r8]
 800ee02:	3a01      	subs	r2, #1
 800ee04:	42b2      	cmp	r2, r6
 800ee06:	d109      	bne.n	800ee1c <__gethex+0x384>
 800ee08:	1171      	asrs	r1, r6, #5
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f006 061f 	and.w	r6, r6, #31
 800ee10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee14:	fa02 f606 	lsl.w	r6, r2, r6
 800ee18:	421e      	tst	r6, r3
 800ee1a:	d13a      	bne.n	800ee92 <__gethex+0x3fa>
 800ee1c:	f045 0520 	orr.w	r5, r5, #32
 800ee20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee22:	601c      	str	r4, [r3, #0]
 800ee24:	9b02      	ldr	r3, [sp, #8]
 800ee26:	601f      	str	r7, [r3, #0]
 800ee28:	e6b0      	b.n	800eb8c <__gethex+0xf4>
 800ee2a:	4299      	cmp	r1, r3
 800ee2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee30:	d8d9      	bhi.n	800ede6 <__gethex+0x34e>
 800ee32:	68a3      	ldr	r3, [r4, #8]
 800ee34:	459b      	cmp	fp, r3
 800ee36:	db17      	blt.n	800ee68 <__gethex+0x3d0>
 800ee38:	6861      	ldr	r1, [r4, #4]
 800ee3a:	9801      	ldr	r0, [sp, #4]
 800ee3c:	3101      	adds	r1, #1
 800ee3e:	f7fe f883 	bl	800cf48 <_Balloc>
 800ee42:	4681      	mov	r9, r0
 800ee44:	b918      	cbnz	r0, 800ee4e <__gethex+0x3b6>
 800ee46:	4b1a      	ldr	r3, [pc, #104]	@ (800eeb0 <__gethex+0x418>)
 800ee48:	4602      	mov	r2, r0
 800ee4a:	2184      	movs	r1, #132	@ 0x84
 800ee4c:	e6c5      	b.n	800ebda <__gethex+0x142>
 800ee4e:	6922      	ldr	r2, [r4, #16]
 800ee50:	f104 010c 	add.w	r1, r4, #12
 800ee54:	300c      	adds	r0, #12
 800ee56:	3202      	adds	r2, #2
 800ee58:	0092      	lsls	r2, r2, #2
 800ee5a:	f7fd f910 	bl	800c07e <memcpy>
 800ee5e:	4621      	mov	r1, r4
 800ee60:	464c      	mov	r4, r9
 800ee62:	9801      	ldr	r0, [sp, #4]
 800ee64:	f7fe f8b0 	bl	800cfc8 <_Bfree>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee70:	6122      	str	r2, [r4, #16]
 800ee72:	2201      	movs	r2, #1
 800ee74:	615a      	str	r2, [r3, #20]
 800ee76:	e7be      	b.n	800edf6 <__gethex+0x35e>
 800ee78:	6922      	ldr	r2, [r4, #16]
 800ee7a:	455a      	cmp	r2, fp
 800ee7c:	dd0b      	ble.n	800ee96 <__gethex+0x3fe>
 800ee7e:	2101      	movs	r1, #1
 800ee80:	4620      	mov	r0, r4
 800ee82:	f7ff fda3 	bl	800e9cc <rshift>
 800ee86:	3701      	adds	r7, #1
 800ee88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee8c:	42bb      	cmp	r3, r7
 800ee8e:	f6ff aee0 	blt.w	800ec52 <__gethex+0x1ba>
 800ee92:	2501      	movs	r5, #1
 800ee94:	e7c2      	b.n	800ee1c <__gethex+0x384>
 800ee96:	f016 061f 	ands.w	r6, r6, #31
 800ee9a:	d0fa      	beq.n	800ee92 <__gethex+0x3fa>
 800ee9c:	4453      	add	r3, sl
 800ee9e:	f1c6 0620 	rsb	r6, r6, #32
 800eea2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eea6:	f7fe f943 	bl	800d130 <__hi0bits>
 800eeaa:	42b0      	cmp	r0, r6
 800eeac:	dbe7      	blt.n	800ee7e <__gethex+0x3e6>
 800eeae:	e7f0      	b.n	800ee92 <__gethex+0x3fa>
 800eeb0:	0801000e 	.word	0x0801000e

0800eeb4 <L_shift>:
 800eeb4:	f1c2 0208 	rsb	r2, r2, #8
 800eeb8:	0092      	lsls	r2, r2, #2
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	f1c2 0620 	rsb	r6, r2, #32
 800eec0:	6843      	ldr	r3, [r0, #4]
 800eec2:	6804      	ldr	r4, [r0, #0]
 800eec4:	fa03 f506 	lsl.w	r5, r3, r6
 800eec8:	40d3      	lsrs	r3, r2
 800eeca:	432c      	orrs	r4, r5
 800eecc:	6004      	str	r4, [r0, #0]
 800eece:	f840 3f04 	str.w	r3, [r0, #4]!
 800eed2:	4288      	cmp	r0, r1
 800eed4:	d3f4      	bcc.n	800eec0 <L_shift+0xc>
 800eed6:	bd70      	pop	{r4, r5, r6, pc}

0800eed8 <__match>:
 800eed8:	6803      	ldr	r3, [r0, #0]
 800eeda:	3301      	adds	r3, #1
 800eedc:	b530      	push	{r4, r5, lr}
 800eede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eee2:	b914      	cbnz	r4, 800eeea <__match+0x12>
 800eee4:	6003      	str	r3, [r0, #0]
 800eee6:	2001      	movs	r0, #1
 800eee8:	bd30      	pop	{r4, r5, pc}
 800eeea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eef2:	2d19      	cmp	r5, #25
 800eef4:	bf98      	it	ls
 800eef6:	3220      	addls	r2, #32
 800eef8:	42a2      	cmp	r2, r4
 800eefa:	d0f0      	beq.n	800eede <__match+0x6>
 800eefc:	2000      	movs	r0, #0
 800eefe:	e7f3      	b.n	800eee8 <__match+0x10>

0800ef00 <__hexnan>:
 800ef00:	680b      	ldr	r3, [r1, #0]
 800ef02:	6801      	ldr	r1, [r0, #0]
 800ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef08:	115e      	asrs	r6, r3, #5
 800ef0a:	f013 031f 	ands.w	r3, r3, #31
 800ef0e:	f04f 0500 	mov.w	r5, #0
 800ef12:	b087      	sub	sp, #28
 800ef14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef18:	4682      	mov	sl, r0
 800ef1a:	4690      	mov	r8, r2
 800ef1c:	46ab      	mov	fp, r5
 800ef1e:	bf18      	it	ne
 800ef20:	3604      	addne	r6, #4
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	9502      	str	r5, [sp, #8]
 800ef26:	1f37      	subs	r7, r6, #4
 800ef28:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef2c:	46b9      	mov	r9, r7
 800ef2e:	463c      	mov	r4, r7
 800ef30:	1c4b      	adds	r3, r1, #1
 800ef32:	784a      	ldrb	r2, [r1, #1]
 800ef34:	9303      	str	r3, [sp, #12]
 800ef36:	b342      	cbz	r2, 800ef8a <__hexnan+0x8a>
 800ef38:	4610      	mov	r0, r2
 800ef3a:	9105      	str	r1, [sp, #20]
 800ef3c:	9204      	str	r2, [sp, #16]
 800ef3e:	f7ff fd96 	bl	800ea6e <__hexdig_fun>
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d151      	bne.n	800efea <__hexnan+0xea>
 800ef46:	9a04      	ldr	r2, [sp, #16]
 800ef48:	9905      	ldr	r1, [sp, #20]
 800ef4a:	2a20      	cmp	r2, #32
 800ef4c:	d818      	bhi.n	800ef80 <__hexnan+0x80>
 800ef4e:	9b02      	ldr	r3, [sp, #8]
 800ef50:	459b      	cmp	fp, r3
 800ef52:	dd13      	ble.n	800ef7c <__hexnan+0x7c>
 800ef54:	454c      	cmp	r4, r9
 800ef56:	d206      	bcs.n	800ef66 <__hexnan+0x66>
 800ef58:	2d07      	cmp	r5, #7
 800ef5a:	dc04      	bgt.n	800ef66 <__hexnan+0x66>
 800ef5c:	462a      	mov	r2, r5
 800ef5e:	4649      	mov	r1, r9
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7ff ffa7 	bl	800eeb4 <L_shift>
 800ef66:	4544      	cmp	r4, r8
 800ef68:	d951      	bls.n	800f00e <__hexnan+0x10e>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f1a4 0904 	sub.w	r9, r4, #4
 800ef70:	f8cd b008 	str.w	fp, [sp, #8]
 800ef74:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef78:	461d      	mov	r5, r3
 800ef7a:	464c      	mov	r4, r9
 800ef7c:	9903      	ldr	r1, [sp, #12]
 800ef7e:	e7d7      	b.n	800ef30 <__hexnan+0x30>
 800ef80:	2a29      	cmp	r2, #41	@ 0x29
 800ef82:	d156      	bne.n	800f032 <__hexnan+0x132>
 800ef84:	3102      	adds	r1, #2
 800ef86:	f8ca 1000 	str.w	r1, [sl]
 800ef8a:	f1bb 0f00 	cmp.w	fp, #0
 800ef8e:	d050      	beq.n	800f032 <__hexnan+0x132>
 800ef90:	454c      	cmp	r4, r9
 800ef92:	d206      	bcs.n	800efa2 <__hexnan+0xa2>
 800ef94:	2d07      	cmp	r5, #7
 800ef96:	dc04      	bgt.n	800efa2 <__hexnan+0xa2>
 800ef98:	462a      	mov	r2, r5
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f7ff ff89 	bl	800eeb4 <L_shift>
 800efa2:	4544      	cmp	r4, r8
 800efa4:	d935      	bls.n	800f012 <__hexnan+0x112>
 800efa6:	f1a8 0204 	sub.w	r2, r8, #4
 800efaa:	4623      	mov	r3, r4
 800efac:	f853 1b04 	ldr.w	r1, [r3], #4
 800efb0:	429f      	cmp	r7, r3
 800efb2:	f842 1f04 	str.w	r1, [r2, #4]!
 800efb6:	d2f9      	bcs.n	800efac <__hexnan+0xac>
 800efb8:	1b3b      	subs	r3, r7, r4
 800efba:	3e03      	subs	r6, #3
 800efbc:	3401      	adds	r4, #1
 800efbe:	2200      	movs	r2, #0
 800efc0:	f023 0303 	bic.w	r3, r3, #3
 800efc4:	3304      	adds	r3, #4
 800efc6:	42b4      	cmp	r4, r6
 800efc8:	bf88      	it	hi
 800efca:	2304      	movhi	r3, #4
 800efcc:	4443      	add	r3, r8
 800efce:	f843 2b04 	str.w	r2, [r3], #4
 800efd2:	429f      	cmp	r7, r3
 800efd4:	d2fb      	bcs.n	800efce <__hexnan+0xce>
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	b91b      	cbnz	r3, 800efe2 <__hexnan+0xe2>
 800efda:	4547      	cmp	r7, r8
 800efdc:	d127      	bne.n	800f02e <__hexnan+0x12e>
 800efde:	2301      	movs	r3, #1
 800efe0:	603b      	str	r3, [r7, #0]
 800efe2:	2005      	movs	r0, #5
 800efe4:	b007      	add	sp, #28
 800efe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efea:	3501      	adds	r5, #1
 800efec:	f10b 0b01 	add.w	fp, fp, #1
 800eff0:	2d08      	cmp	r5, #8
 800eff2:	dd05      	ble.n	800f000 <__hexnan+0x100>
 800eff4:	4544      	cmp	r4, r8
 800eff6:	d9c1      	bls.n	800ef7c <__hexnan+0x7c>
 800eff8:	2300      	movs	r3, #0
 800effa:	3c04      	subs	r4, #4
 800effc:	2501      	movs	r5, #1
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	6822      	ldr	r2, [r4, #0]
 800f002:	f000 000f 	and.w	r0, r0, #15
 800f006:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f00a:	6020      	str	r0, [r4, #0]
 800f00c:	e7b6      	b.n	800ef7c <__hexnan+0x7c>
 800f00e:	2508      	movs	r5, #8
 800f010:	e7b4      	b.n	800ef7c <__hexnan+0x7c>
 800f012:	9b01      	ldr	r3, [sp, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d0de      	beq.n	800efd6 <__hexnan+0xd6>
 800f018:	f1c3 0320 	rsb	r3, r3, #32
 800f01c:	f04f 32ff 	mov.w	r2, #4294967295
 800f020:	40da      	lsrs	r2, r3
 800f022:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f026:	4013      	ands	r3, r2
 800f028:	f846 3c04 	str.w	r3, [r6, #-4]
 800f02c:	e7d3      	b.n	800efd6 <__hexnan+0xd6>
 800f02e:	3f04      	subs	r7, #4
 800f030:	e7d1      	b.n	800efd6 <__hexnan+0xd6>
 800f032:	2004      	movs	r0, #4
 800f034:	e7d6      	b.n	800efe4 <__hexnan+0xe4>

0800f036 <__ascii_mbtowc>:
 800f036:	b082      	sub	sp, #8
 800f038:	b901      	cbnz	r1, 800f03c <__ascii_mbtowc+0x6>
 800f03a:	a901      	add	r1, sp, #4
 800f03c:	b142      	cbz	r2, 800f050 <__ascii_mbtowc+0x1a>
 800f03e:	b14b      	cbz	r3, 800f054 <__ascii_mbtowc+0x1e>
 800f040:	7813      	ldrb	r3, [r2, #0]
 800f042:	600b      	str	r3, [r1, #0]
 800f044:	7812      	ldrb	r2, [r2, #0]
 800f046:	1e10      	subs	r0, r2, #0
 800f048:	bf18      	it	ne
 800f04a:	2001      	movne	r0, #1
 800f04c:	b002      	add	sp, #8
 800f04e:	4770      	bx	lr
 800f050:	4610      	mov	r0, r2
 800f052:	e7fb      	b.n	800f04c <__ascii_mbtowc+0x16>
 800f054:	f06f 0001 	mvn.w	r0, #1
 800f058:	e7f8      	b.n	800f04c <__ascii_mbtowc+0x16>

0800f05a <_realloc_r>:
 800f05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f05e:	4680      	mov	r8, r0
 800f060:	4615      	mov	r5, r2
 800f062:	460c      	mov	r4, r1
 800f064:	b921      	cbnz	r1, 800f070 <_realloc_r+0x16>
 800f066:	4611      	mov	r1, r2
 800f068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f06c:	f7fd bee0 	b.w	800ce30 <_malloc_r>
 800f070:	b92a      	cbnz	r2, 800f07e <_realloc_r+0x24>
 800f072:	f7fd fe69 	bl	800cd48 <_free_r>
 800f076:	2400      	movs	r4, #0
 800f078:	4620      	mov	r0, r4
 800f07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07e:	f000 f840 	bl	800f102 <_malloc_usable_size_r>
 800f082:	4285      	cmp	r5, r0
 800f084:	4606      	mov	r6, r0
 800f086:	d802      	bhi.n	800f08e <_realloc_r+0x34>
 800f088:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f08c:	d8f4      	bhi.n	800f078 <_realloc_r+0x1e>
 800f08e:	4629      	mov	r1, r5
 800f090:	4640      	mov	r0, r8
 800f092:	f7fd fecd 	bl	800ce30 <_malloc_r>
 800f096:	4607      	mov	r7, r0
 800f098:	2800      	cmp	r0, #0
 800f09a:	d0ec      	beq.n	800f076 <_realloc_r+0x1c>
 800f09c:	42b5      	cmp	r5, r6
 800f09e:	462a      	mov	r2, r5
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	bf28      	it	cs
 800f0a4:	4632      	movcs	r2, r6
 800f0a6:	f7fc ffea 	bl	800c07e <memcpy>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4640      	mov	r0, r8
 800f0ae:	463c      	mov	r4, r7
 800f0b0:	f7fd fe4a 	bl	800cd48 <_free_r>
 800f0b4:	e7e0      	b.n	800f078 <_realloc_r+0x1e>

0800f0b6 <__ascii_wctomb>:
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	b141      	cbz	r1, 800f0ce <__ascii_wctomb+0x18>
 800f0bc:	2aff      	cmp	r2, #255	@ 0xff
 800f0be:	d904      	bls.n	800f0ca <__ascii_wctomb+0x14>
 800f0c0:	228a      	movs	r2, #138	@ 0x8a
 800f0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	4770      	bx	lr
 800f0ca:	2001      	movs	r0, #1
 800f0cc:	700a      	strb	r2, [r1, #0]
 800f0ce:	4770      	bx	lr

0800f0d0 <fiprintf>:
 800f0d0:	b40e      	push	{r1, r2, r3}
 800f0d2:	b503      	push	{r0, r1, lr}
 800f0d4:	ab03      	add	r3, sp, #12
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	4805      	ldr	r0, [pc, #20]	@ (800f0f0 <fiprintf+0x20>)
 800f0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0de:	6800      	ldr	r0, [r0, #0]
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	f000 f83f 	bl	800f164 <_vfiprintf_r>
 800f0e6:	b002      	add	sp, #8
 800f0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ec:	b003      	add	sp, #12
 800f0ee:	4770      	bx	lr
 800f0f0:	20000034 	.word	0x20000034

0800f0f4 <abort>:
 800f0f4:	2006      	movs	r0, #6
 800f0f6:	b508      	push	{r3, lr}
 800f0f8:	f000 fa08 	bl	800f50c <raise>
 800f0fc:	2001      	movs	r0, #1
 800f0fe:	f7f4 f833 	bl	8003168 <_exit>

0800f102 <_malloc_usable_size_r>:
 800f102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f106:	1f18      	subs	r0, r3, #4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	bfbc      	itt	lt
 800f10c:	580b      	ldrlt	r3, [r1, r0]
 800f10e:	18c0      	addlt	r0, r0, r3
 800f110:	4770      	bx	lr

0800f112 <__sfputc_r>:
 800f112:	6893      	ldr	r3, [r2, #8]
 800f114:	3b01      	subs	r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	6093      	str	r3, [r2, #8]
 800f11a:	b410      	push	{r4}
 800f11c:	da08      	bge.n	800f130 <__sfputc_r+0x1e>
 800f11e:	6994      	ldr	r4, [r2, #24]
 800f120:	42a3      	cmp	r3, r4
 800f122:	db01      	blt.n	800f128 <__sfputc_r+0x16>
 800f124:	290a      	cmp	r1, #10
 800f126:	d103      	bne.n	800f130 <__sfputc_r+0x1e>
 800f128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f12c:	f000 b932 	b.w	800f394 <__swbuf_r>
 800f130:	6813      	ldr	r3, [r2, #0]
 800f132:	1c58      	adds	r0, r3, #1
 800f134:	6010      	str	r0, [r2, #0]
 800f136:	4608      	mov	r0, r1
 800f138:	7019      	strb	r1, [r3, #0]
 800f13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <__sfputs_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	4606      	mov	r6, r0
 800f144:	460f      	mov	r7, r1
 800f146:	4614      	mov	r4, r2
 800f148:	18d5      	adds	r5, r2, r3
 800f14a:	42ac      	cmp	r4, r5
 800f14c:	d101      	bne.n	800f152 <__sfputs_r+0x12>
 800f14e:	2000      	movs	r0, #0
 800f150:	e007      	b.n	800f162 <__sfputs_r+0x22>
 800f152:	463a      	mov	r2, r7
 800f154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f158:	4630      	mov	r0, r6
 800f15a:	f7ff ffda 	bl	800f112 <__sfputc_r>
 800f15e:	1c43      	adds	r3, r0, #1
 800f160:	d1f3      	bne.n	800f14a <__sfputs_r+0xa>
 800f162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f164 <_vfiprintf_r>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	460d      	mov	r5, r1
 800f16a:	b09d      	sub	sp, #116	@ 0x74
 800f16c:	4614      	mov	r4, r2
 800f16e:	4698      	mov	r8, r3
 800f170:	4606      	mov	r6, r0
 800f172:	b118      	cbz	r0, 800f17c <_vfiprintf_r+0x18>
 800f174:	6a03      	ldr	r3, [r0, #32]
 800f176:	b90b      	cbnz	r3, 800f17c <_vfiprintf_r+0x18>
 800f178:	f7fc fe5a 	bl	800be30 <__sinit>
 800f17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f17e:	07d9      	lsls	r1, r3, #31
 800f180:	d405      	bmi.n	800f18e <_vfiprintf_r+0x2a>
 800f182:	89ab      	ldrh	r3, [r5, #12]
 800f184:	059a      	lsls	r2, r3, #22
 800f186:	d402      	bmi.n	800f18e <_vfiprintf_r+0x2a>
 800f188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f18a:	f7fc ff68 	bl	800c05e <__retarget_lock_acquire_recursive>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	071b      	lsls	r3, r3, #28
 800f192:	d501      	bpl.n	800f198 <_vfiprintf_r+0x34>
 800f194:	692b      	ldr	r3, [r5, #16]
 800f196:	b99b      	cbnz	r3, 800f1c0 <_vfiprintf_r+0x5c>
 800f198:	4629      	mov	r1, r5
 800f19a:	4630      	mov	r0, r6
 800f19c:	f000 f938 	bl	800f410 <__swsetup_r>
 800f1a0:	b170      	cbz	r0, 800f1c0 <_vfiprintf_r+0x5c>
 800f1a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1a4:	07dc      	lsls	r4, r3, #31
 800f1a6:	d504      	bpl.n	800f1b2 <_vfiprintf_r+0x4e>
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	b01d      	add	sp, #116	@ 0x74
 800f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b2:	89ab      	ldrh	r3, [r5, #12]
 800f1b4:	0598      	lsls	r0, r3, #22
 800f1b6:	d4f7      	bmi.n	800f1a8 <_vfiprintf_r+0x44>
 800f1b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ba:	f7fc ff51 	bl	800c060 <__retarget_lock_release_recursive>
 800f1be:	e7f3      	b.n	800f1a8 <_vfiprintf_r+0x44>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1c6:	f04f 0901 	mov.w	r9, #1
 800f1ca:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f380 <_vfiprintf_r+0x21c>
 800f1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1d0:	2320      	movs	r3, #32
 800f1d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1d6:	2330      	movs	r3, #48	@ 0x30
 800f1d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1dc:	4623      	mov	r3, r4
 800f1de:	469a      	mov	sl, r3
 800f1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e4:	b10a      	cbz	r2, 800f1ea <_vfiprintf_r+0x86>
 800f1e6:	2a25      	cmp	r2, #37	@ 0x25
 800f1e8:	d1f9      	bne.n	800f1de <_vfiprintf_r+0x7a>
 800f1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ee:	d00b      	beq.n	800f208 <_vfiprintf_r+0xa4>
 800f1f0:	465b      	mov	r3, fp
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ffa2 	bl	800f140 <__sfputs_r>
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	f000 80a7 	beq.w	800f350 <_vfiprintf_r+0x1ec>
 800f202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f204:	445a      	add	r2, fp
 800f206:	9209      	str	r2, [sp, #36]	@ 0x24
 800f208:	f89a 3000 	ldrb.w	r3, [sl]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f000 809f 	beq.w	800f350 <_vfiprintf_r+0x1ec>
 800f212:	2300      	movs	r3, #0
 800f214:	f04f 32ff 	mov.w	r2, #4294967295
 800f218:	f10a 0a01 	add.w	sl, sl, #1
 800f21c:	9304      	str	r3, [sp, #16]
 800f21e:	9307      	str	r3, [sp, #28]
 800f220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f224:	931a      	str	r3, [sp, #104]	@ 0x68
 800f226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f22a:	4654      	mov	r4, sl
 800f22c:	2205      	movs	r2, #5
 800f22e:	4854      	ldr	r0, [pc, #336]	@ (800f380 <_vfiprintf_r+0x21c>)
 800f230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f234:	f7fc ff15 	bl	800c062 <memchr>
 800f238:	9a04      	ldr	r2, [sp, #16]
 800f23a:	b9d8      	cbnz	r0, 800f274 <_vfiprintf_r+0x110>
 800f23c:	06d1      	lsls	r1, r2, #27
 800f23e:	bf44      	itt	mi
 800f240:	2320      	movmi	r3, #32
 800f242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f246:	0713      	lsls	r3, r2, #28
 800f248:	bf44      	itt	mi
 800f24a:	232b      	movmi	r3, #43	@ 0x2b
 800f24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f250:	f89a 3000 	ldrb.w	r3, [sl]
 800f254:	2b2a      	cmp	r3, #42	@ 0x2a
 800f256:	d015      	beq.n	800f284 <_vfiprintf_r+0x120>
 800f258:	9a07      	ldr	r2, [sp, #28]
 800f25a:	4654      	mov	r4, sl
 800f25c:	2000      	movs	r0, #0
 800f25e:	f04f 0c0a 	mov.w	ip, #10
 800f262:	4621      	mov	r1, r4
 800f264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f268:	3b30      	subs	r3, #48	@ 0x30
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d94b      	bls.n	800f306 <_vfiprintf_r+0x1a2>
 800f26e:	b1b0      	cbz	r0, 800f29e <_vfiprintf_r+0x13a>
 800f270:	9207      	str	r2, [sp, #28]
 800f272:	e014      	b.n	800f29e <_vfiprintf_r+0x13a>
 800f274:	eba0 0308 	sub.w	r3, r0, r8
 800f278:	46a2      	mov	sl, r4
 800f27a:	fa09 f303 	lsl.w	r3, r9, r3
 800f27e:	4313      	orrs	r3, r2
 800f280:	9304      	str	r3, [sp, #16]
 800f282:	e7d2      	b.n	800f22a <_vfiprintf_r+0xc6>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	1d19      	adds	r1, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	9103      	str	r1, [sp, #12]
 800f28e:	bfbb      	ittet	lt
 800f290:	425b      	neglt	r3, r3
 800f292:	f042 0202 	orrlt.w	r2, r2, #2
 800f296:	9307      	strge	r3, [sp, #28]
 800f298:	9307      	strlt	r3, [sp, #28]
 800f29a:	bfb8      	it	lt
 800f29c:	9204      	strlt	r2, [sp, #16]
 800f29e:	7823      	ldrb	r3, [r4, #0]
 800f2a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2a2:	d10a      	bne.n	800f2ba <_vfiprintf_r+0x156>
 800f2a4:	7863      	ldrb	r3, [r4, #1]
 800f2a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2a8:	d132      	bne.n	800f310 <_vfiprintf_r+0x1ac>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	3402      	adds	r4, #2
 800f2ae:	1d1a      	adds	r2, r3, #4
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2b6:	9203      	str	r2, [sp, #12]
 800f2b8:	9305      	str	r3, [sp, #20]
 800f2ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f390 <_vfiprintf_r+0x22c>
 800f2be:	2203      	movs	r2, #3
 800f2c0:	7821      	ldrb	r1, [r4, #0]
 800f2c2:	4650      	mov	r0, sl
 800f2c4:	f7fc fecd 	bl	800c062 <memchr>
 800f2c8:	b138      	cbz	r0, 800f2da <_vfiprintf_r+0x176>
 800f2ca:	eba0 000a 	sub.w	r0, r0, sl
 800f2ce:	2240      	movs	r2, #64	@ 0x40
 800f2d0:	9b04      	ldr	r3, [sp, #16]
 800f2d2:	3401      	adds	r4, #1
 800f2d4:	4082      	lsls	r2, r0
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2de:	2206      	movs	r2, #6
 800f2e0:	4828      	ldr	r0, [pc, #160]	@ (800f384 <_vfiprintf_r+0x220>)
 800f2e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2e6:	f7fc febc 	bl	800c062 <memchr>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d03f      	beq.n	800f36e <_vfiprintf_r+0x20a>
 800f2ee:	4b26      	ldr	r3, [pc, #152]	@ (800f388 <_vfiprintf_r+0x224>)
 800f2f0:	bb1b      	cbnz	r3, 800f33a <_vfiprintf_r+0x1d6>
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	3307      	adds	r3, #7
 800f2f6:	f023 0307 	bic.w	r3, r3, #7
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	9303      	str	r3, [sp, #12]
 800f2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f300:	443b      	add	r3, r7
 800f302:	9309      	str	r3, [sp, #36]	@ 0x24
 800f304:	e76a      	b.n	800f1dc <_vfiprintf_r+0x78>
 800f306:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30a:	460c      	mov	r4, r1
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7a8      	b.n	800f262 <_vfiprintf_r+0xfe>
 800f310:	2300      	movs	r3, #0
 800f312:	3401      	adds	r4, #1
 800f314:	f04f 0c0a 	mov.w	ip, #10
 800f318:	4619      	mov	r1, r3
 800f31a:	9305      	str	r3, [sp, #20]
 800f31c:	4620      	mov	r0, r4
 800f31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f322:	3a30      	subs	r2, #48	@ 0x30
 800f324:	2a09      	cmp	r2, #9
 800f326:	d903      	bls.n	800f330 <_vfiprintf_r+0x1cc>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0c6      	beq.n	800f2ba <_vfiprintf_r+0x156>
 800f32c:	9105      	str	r1, [sp, #20]
 800f32e:	e7c4      	b.n	800f2ba <_vfiprintf_r+0x156>
 800f330:	fb0c 2101 	mla	r1, ip, r1, r2
 800f334:	4604      	mov	r4, r0
 800f336:	2301      	movs	r3, #1
 800f338:	e7f0      	b.n	800f31c <_vfiprintf_r+0x1b8>
 800f33a:	ab03      	add	r3, sp, #12
 800f33c:	462a      	mov	r2, r5
 800f33e:	a904      	add	r1, sp, #16
 800f340:	4630      	mov	r0, r6
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	4b11      	ldr	r3, [pc, #68]	@ (800f38c <_vfiprintf_r+0x228>)
 800f346:	f7fb ff19 	bl	800b17c <_printf_float>
 800f34a:	4607      	mov	r7, r0
 800f34c:	1c78      	adds	r0, r7, #1
 800f34e:	d1d6      	bne.n	800f2fe <_vfiprintf_r+0x19a>
 800f350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f352:	07d9      	lsls	r1, r3, #31
 800f354:	d405      	bmi.n	800f362 <_vfiprintf_r+0x1fe>
 800f356:	89ab      	ldrh	r3, [r5, #12]
 800f358:	059a      	lsls	r2, r3, #22
 800f35a:	d402      	bmi.n	800f362 <_vfiprintf_r+0x1fe>
 800f35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f35e:	f7fc fe7f 	bl	800c060 <__retarget_lock_release_recursive>
 800f362:	89ab      	ldrh	r3, [r5, #12]
 800f364:	065b      	lsls	r3, r3, #25
 800f366:	f53f af1f 	bmi.w	800f1a8 <_vfiprintf_r+0x44>
 800f36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f36c:	e71e      	b.n	800f1ac <_vfiprintf_r+0x48>
 800f36e:	ab03      	add	r3, sp, #12
 800f370:	462a      	mov	r2, r5
 800f372:	a904      	add	r1, sp, #16
 800f374:	4630      	mov	r0, r6
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	4b04      	ldr	r3, [pc, #16]	@ (800f38c <_vfiprintf_r+0x228>)
 800f37a:	f7fc f99b 	bl	800b6b4 <_printf_i>
 800f37e:	e7e4      	b.n	800f34a <_vfiprintf_r+0x1e6>
 800f380:	080101d0 	.word	0x080101d0
 800f384:	080101da 	.word	0x080101da
 800f388:	0800b17d 	.word	0x0800b17d
 800f38c:	0800f141 	.word	0x0800f141
 800f390:	080101d6 	.word	0x080101d6

0800f394 <__swbuf_r>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	460e      	mov	r6, r1
 800f398:	4614      	mov	r4, r2
 800f39a:	4605      	mov	r5, r0
 800f39c:	b118      	cbz	r0, 800f3a6 <__swbuf_r+0x12>
 800f39e:	6a03      	ldr	r3, [r0, #32]
 800f3a0:	b90b      	cbnz	r3, 800f3a6 <__swbuf_r+0x12>
 800f3a2:	f7fc fd45 	bl	800be30 <__sinit>
 800f3a6:	69a3      	ldr	r3, [r4, #24]
 800f3a8:	60a3      	str	r3, [r4, #8]
 800f3aa:	89a3      	ldrh	r3, [r4, #12]
 800f3ac:	071a      	lsls	r2, r3, #28
 800f3ae:	d501      	bpl.n	800f3b4 <__swbuf_r+0x20>
 800f3b0:	6923      	ldr	r3, [r4, #16]
 800f3b2:	b943      	cbnz	r3, 800f3c6 <__swbuf_r+0x32>
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f000 f82a 	bl	800f410 <__swsetup_r>
 800f3bc:	b118      	cbz	r0, 800f3c6 <__swbuf_r+0x32>
 800f3be:	f04f 37ff 	mov.w	r7, #4294967295
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	b2f6      	uxtb	r6, r6
 800f3ca:	6922      	ldr	r2, [r4, #16]
 800f3cc:	4637      	mov	r7, r6
 800f3ce:	1a98      	subs	r0, r3, r2
 800f3d0:	6963      	ldr	r3, [r4, #20]
 800f3d2:	4283      	cmp	r3, r0
 800f3d4:	dc05      	bgt.n	800f3e2 <__swbuf_r+0x4e>
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f7ff fa57 	bl	800e88c <_fflush_r>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	d1ed      	bne.n	800f3be <__swbuf_r+0x2a>
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	60a3      	str	r3, [r4, #8]
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	6022      	str	r2, [r4, #0]
 800f3ee:	701e      	strb	r6, [r3, #0]
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	6962      	ldr	r2, [r4, #20]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d004      	beq.n	800f402 <__swbuf_r+0x6e>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	07db      	lsls	r3, r3, #31
 800f3fc:	d5e1      	bpl.n	800f3c2 <__swbuf_r+0x2e>
 800f3fe:	2e0a      	cmp	r6, #10
 800f400:	d1df      	bne.n	800f3c2 <__swbuf_r+0x2e>
 800f402:	4621      	mov	r1, r4
 800f404:	4628      	mov	r0, r5
 800f406:	f7ff fa41 	bl	800e88c <_fflush_r>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d0d9      	beq.n	800f3c2 <__swbuf_r+0x2e>
 800f40e:	e7d6      	b.n	800f3be <__swbuf_r+0x2a>

0800f410 <__swsetup_r>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	4b29      	ldr	r3, [pc, #164]	@ (800f4b8 <__swsetup_r+0xa8>)
 800f414:	4605      	mov	r5, r0
 800f416:	460c      	mov	r4, r1
 800f418:	6818      	ldr	r0, [r3, #0]
 800f41a:	b118      	cbz	r0, 800f424 <__swsetup_r+0x14>
 800f41c:	6a03      	ldr	r3, [r0, #32]
 800f41e:	b90b      	cbnz	r3, 800f424 <__swsetup_r+0x14>
 800f420:	f7fc fd06 	bl	800be30 <__sinit>
 800f424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f428:	0719      	lsls	r1, r3, #28
 800f42a:	d422      	bmi.n	800f472 <__swsetup_r+0x62>
 800f42c:	06da      	lsls	r2, r3, #27
 800f42e:	d407      	bmi.n	800f440 <__swsetup_r+0x30>
 800f430:	2209      	movs	r2, #9
 800f432:	602a      	str	r2, [r5, #0]
 800f434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	e033      	b.n	800f4a8 <__swsetup_r+0x98>
 800f440:	0758      	lsls	r0, r3, #29
 800f442:	d512      	bpl.n	800f46a <__swsetup_r+0x5a>
 800f444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f446:	b141      	cbz	r1, 800f45a <__swsetup_r+0x4a>
 800f448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f44c:	4299      	cmp	r1, r3
 800f44e:	d002      	beq.n	800f456 <__swsetup_r+0x46>
 800f450:	4628      	mov	r0, r5
 800f452:	f7fd fc79 	bl	800cd48 <_free_r>
 800f456:	2300      	movs	r3, #0
 800f458:	6363      	str	r3, [r4, #52]	@ 0x34
 800f45a:	89a3      	ldrh	r3, [r4, #12]
 800f45c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	2300      	movs	r3, #0
 800f464:	6063      	str	r3, [r4, #4]
 800f466:	6923      	ldr	r3, [r4, #16]
 800f468:	6023      	str	r3, [r4, #0]
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	f043 0308 	orr.w	r3, r3, #8
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	b94b      	cbnz	r3, 800f48a <__swsetup_r+0x7a>
 800f476:	89a3      	ldrh	r3, [r4, #12]
 800f478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f480:	d003      	beq.n	800f48a <__swsetup_r+0x7a>
 800f482:	4621      	mov	r1, r4
 800f484:	4628      	mov	r0, r5
 800f486:	f000 f882 	bl	800f58e <__smakebuf_r>
 800f48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48e:	f013 0201 	ands.w	r2, r3, #1
 800f492:	d00a      	beq.n	800f4aa <__swsetup_r+0x9a>
 800f494:	2200      	movs	r2, #0
 800f496:	60a2      	str	r2, [r4, #8]
 800f498:	6962      	ldr	r2, [r4, #20]
 800f49a:	4252      	negs	r2, r2
 800f49c:	61a2      	str	r2, [r4, #24]
 800f49e:	6922      	ldr	r2, [r4, #16]
 800f4a0:	b942      	cbnz	r2, 800f4b4 <__swsetup_r+0xa4>
 800f4a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4a6:	d1c5      	bne.n	800f434 <__swsetup_r+0x24>
 800f4a8:	bd38      	pop	{r3, r4, r5, pc}
 800f4aa:	0799      	lsls	r1, r3, #30
 800f4ac:	bf58      	it	pl
 800f4ae:	6962      	ldrpl	r2, [r4, #20]
 800f4b0:	60a2      	str	r2, [r4, #8]
 800f4b2:	e7f4      	b.n	800f49e <__swsetup_r+0x8e>
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	e7f7      	b.n	800f4a8 <__swsetup_r+0x98>
 800f4b8:	20000034 	.word	0x20000034

0800f4bc <_raise_r>:
 800f4bc:	291f      	cmp	r1, #31
 800f4be:	b538      	push	{r3, r4, r5, lr}
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	d904      	bls.n	800f4d0 <_raise_r+0x14>
 800f4c6:	2316      	movs	r3, #22
 800f4c8:	6003      	str	r3, [r0, #0]
 800f4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ce:	bd38      	pop	{r3, r4, r5, pc}
 800f4d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4d2:	b112      	cbz	r2, 800f4da <_raise_r+0x1e>
 800f4d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4d8:	b94b      	cbnz	r3, 800f4ee <_raise_r+0x32>
 800f4da:	4628      	mov	r0, r5
 800f4dc:	f000 f830 	bl	800f540 <_getpid_r>
 800f4e0:	4622      	mov	r2, r4
 800f4e2:	4601      	mov	r1, r0
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ea:	f000 b817 	b.w	800f51c <_kill_r>
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d00a      	beq.n	800f508 <_raise_r+0x4c>
 800f4f2:	1c59      	adds	r1, r3, #1
 800f4f4:	d103      	bne.n	800f4fe <_raise_r+0x42>
 800f4f6:	2316      	movs	r3, #22
 800f4f8:	6003      	str	r3, [r0, #0]
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	e7e7      	b.n	800f4ce <_raise_r+0x12>
 800f4fe:	2100      	movs	r1, #0
 800f500:	4620      	mov	r0, r4
 800f502:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f506:	4798      	blx	r3
 800f508:	2000      	movs	r0, #0
 800f50a:	e7e0      	b.n	800f4ce <_raise_r+0x12>

0800f50c <raise>:
 800f50c:	4b02      	ldr	r3, [pc, #8]	@ (800f518 <raise+0xc>)
 800f50e:	4601      	mov	r1, r0
 800f510:	6818      	ldr	r0, [r3, #0]
 800f512:	f7ff bfd3 	b.w	800f4bc <_raise_r>
 800f516:	bf00      	nop
 800f518:	20000034 	.word	0x20000034

0800f51c <_kill_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	2300      	movs	r3, #0
 800f520:	4d06      	ldr	r5, [pc, #24]	@ (800f53c <_kill_r+0x20>)
 800f522:	4604      	mov	r4, r0
 800f524:	4608      	mov	r0, r1
 800f526:	4611      	mov	r1, r2
 800f528:	602b      	str	r3, [r5, #0]
 800f52a:	f7f3 fe0d 	bl	8003148 <_kill>
 800f52e:	1c43      	adds	r3, r0, #1
 800f530:	d102      	bne.n	800f538 <_kill_r+0x1c>
 800f532:	682b      	ldr	r3, [r5, #0]
 800f534:	b103      	cbz	r3, 800f538 <_kill_r+0x1c>
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	bd38      	pop	{r3, r4, r5, pc}
 800f53a:	bf00      	nop
 800f53c:	2003b3b4 	.word	0x2003b3b4

0800f540 <_getpid_r>:
 800f540:	f7f3 bdfa 	b.w	8003138 <_getpid>

0800f544 <__swhatbuf_r>:
 800f544:	b570      	push	{r4, r5, r6, lr}
 800f546:	460c      	mov	r4, r1
 800f548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54c:	b096      	sub	sp, #88	@ 0x58
 800f54e:	4615      	mov	r5, r2
 800f550:	2900      	cmp	r1, #0
 800f552:	461e      	mov	r6, r3
 800f554:	da0c      	bge.n	800f570 <__swhatbuf_r+0x2c>
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	2100      	movs	r1, #0
 800f55a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f55e:	bf14      	ite	ne
 800f560:	2340      	movne	r3, #64	@ 0x40
 800f562:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f566:	2000      	movs	r0, #0
 800f568:	6031      	str	r1, [r6, #0]
 800f56a:	602b      	str	r3, [r5, #0]
 800f56c:	b016      	add	sp, #88	@ 0x58
 800f56e:	bd70      	pop	{r4, r5, r6, pc}
 800f570:	466a      	mov	r2, sp
 800f572:	f000 f849 	bl	800f608 <_fstat_r>
 800f576:	2800      	cmp	r0, #0
 800f578:	dbed      	blt.n	800f556 <__swhatbuf_r+0x12>
 800f57a:	9901      	ldr	r1, [sp, #4]
 800f57c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f580:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f584:	4259      	negs	r1, r3
 800f586:	4159      	adcs	r1, r3
 800f588:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f58c:	e7eb      	b.n	800f566 <__swhatbuf_r+0x22>

0800f58e <__smakebuf_r>:
 800f58e:	898b      	ldrh	r3, [r1, #12]
 800f590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f592:	079d      	lsls	r5, r3, #30
 800f594:	4606      	mov	r6, r0
 800f596:	460c      	mov	r4, r1
 800f598:	d507      	bpl.n	800f5aa <__smakebuf_r+0x1c>
 800f59a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f59e:	6023      	str	r3, [r4, #0]
 800f5a0:	6123      	str	r3, [r4, #16]
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	6163      	str	r3, [r4, #20]
 800f5a6:	b003      	add	sp, #12
 800f5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5aa:	ab01      	add	r3, sp, #4
 800f5ac:	466a      	mov	r2, sp
 800f5ae:	f7ff ffc9 	bl	800f544 <__swhatbuf_r>
 800f5b2:	9f00      	ldr	r7, [sp, #0]
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	f7fd fc39 	bl	800ce30 <_malloc_r>
 800f5be:	b948      	cbnz	r0, 800f5d4 <__smakebuf_r+0x46>
 800f5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c4:	059a      	lsls	r2, r3, #22
 800f5c6:	d4ee      	bmi.n	800f5a6 <__smakebuf_r+0x18>
 800f5c8:	f023 0303 	bic.w	r3, r3, #3
 800f5cc:	f043 0302 	orr.w	r3, r3, #2
 800f5d0:	81a3      	strh	r3, [r4, #12]
 800f5d2:	e7e2      	b.n	800f59a <__smakebuf_r+0xc>
 800f5d4:	89a3      	ldrh	r3, [r4, #12]
 800f5d6:	6020      	str	r0, [r4, #0]
 800f5d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5dc:	81a3      	strh	r3, [r4, #12]
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5e4:	b15b      	cbz	r3, 800f5fe <__smakebuf_r+0x70>
 800f5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f000 f81e 	bl	800f62c <_isatty_r>
 800f5f0:	b128      	cbz	r0, 800f5fe <__smakebuf_r+0x70>
 800f5f2:	89a3      	ldrh	r3, [r4, #12]
 800f5f4:	f023 0303 	bic.w	r3, r3, #3
 800f5f8:	f043 0301 	orr.w	r3, r3, #1
 800f5fc:	81a3      	strh	r3, [r4, #12]
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	431d      	orrs	r5, r3
 800f602:	81a5      	strh	r5, [r4, #12]
 800f604:	e7cf      	b.n	800f5a6 <__smakebuf_r+0x18>
	...

0800f608 <_fstat_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	2300      	movs	r3, #0
 800f60c:	4d06      	ldr	r5, [pc, #24]	@ (800f628 <_fstat_r+0x20>)
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	4611      	mov	r1, r2
 800f614:	602b      	str	r3, [r5, #0]
 800f616:	f7f3 fdf7 	bl	8003208 <_fstat>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d102      	bne.n	800f624 <_fstat_r+0x1c>
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	b103      	cbz	r3, 800f624 <_fstat_r+0x1c>
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	2003b3b4 	.word	0x2003b3b4

0800f62c <_isatty_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	2300      	movs	r3, #0
 800f630:	4d05      	ldr	r5, [pc, #20]	@ (800f648 <_isatty_r+0x1c>)
 800f632:	4604      	mov	r4, r0
 800f634:	4608      	mov	r0, r1
 800f636:	602b      	str	r3, [r5, #0]
 800f638:	f7f3 fdf6 	bl	8003228 <_isatty>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d102      	bne.n	800f646 <_isatty_r+0x1a>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b103      	cbz	r3, 800f646 <_isatty_r+0x1a>
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	2003b3b4 	.word	0x2003b3b4

0800f64c <sqrt>:
 800f64c:	b538      	push	{r3, r4, r5, lr}
 800f64e:	ec55 4b10 	vmov	r4, r5, d0
 800f652:	ed2d 8b02 	vpush	{d8}
 800f656:	f000 f825 	bl	800f6a4 <__ieee754_sqrt>
 800f65a:	4622      	mov	r2, r4
 800f65c:	462b      	mov	r3, r5
 800f65e:	4620      	mov	r0, r4
 800f660:	4629      	mov	r1, r5
 800f662:	eeb0 8a40 	vmov.f32	s16, s0
 800f666:	eef0 8a60 	vmov.f32	s17, s1
 800f66a:	f7f1 fa73 	bl	8000b54 <__aeabi_dcmpun>
 800f66e:	b990      	cbnz	r0, 800f696 <sqrt+0x4a>
 800f670:	2200      	movs	r2, #0
 800f672:	2300      	movs	r3, #0
 800f674:	4620      	mov	r0, r4
 800f676:	4629      	mov	r1, r5
 800f678:	f7f1 fa44 	bl	8000b04 <__aeabi_dcmplt>
 800f67c:	b158      	cbz	r0, 800f696 <sqrt+0x4a>
 800f67e:	f7fc fcc3 	bl	800c008 <__errno>
 800f682:	2321      	movs	r3, #33	@ 0x21
 800f684:	2200      	movs	r2, #0
 800f686:	6003      	str	r3, [r0, #0]
 800f688:	2300      	movs	r3, #0
 800f68a:	4610      	mov	r0, r2
 800f68c:	4619      	mov	r1, r3
 800f68e:	f7f1 f8f1 	bl	8000874 <__aeabi_ddiv>
 800f692:	ec41 0b18 	vmov	d8, r0, r1
 800f696:	eeb0 0a48 	vmov.f32	s0, s16
 800f69a:	eef0 0a68 	vmov.f32	s1, s17
 800f69e:	ecbd 8b02 	vpop	{d8}
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}

0800f6a4 <__ieee754_sqrt>:
 800f6a4:	4a6b      	ldr	r2, [pc, #428]	@ (800f854 <__ieee754_sqrt+0x1b0>)
 800f6a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6aa:	ec55 4b10 	vmov	r4, r5, d0
 800f6ae:	43aa      	bics	r2, r5
 800f6b0:	462b      	mov	r3, r5
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	d110      	bne.n	800f6d8 <__ieee754_sqrt+0x34>
 800f6b6:	4622      	mov	r2, r4
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	f7f0 ffb0 	bl	8000620 <__aeabi_dmul>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f7f0 fdf4 	bl	80002b4 <__adddf3>
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	460d      	mov	r5, r1
 800f6d0:	ec45 4b10 	vmov	d0, r4, r5
 800f6d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d8:	2d00      	cmp	r5, #0
 800f6da:	dc0e      	bgt.n	800f6fa <__ieee754_sqrt+0x56>
 800f6dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f6e0:	4322      	orrs	r2, r4
 800f6e2:	d0f5      	beq.n	800f6d0 <__ieee754_sqrt+0x2c>
 800f6e4:	b19d      	cbz	r5, 800f70e <__ieee754_sqrt+0x6a>
 800f6e6:	4622      	mov	r2, r4
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	4629      	mov	r1, r5
 800f6ec:	f7f0 fde0 	bl	80002b0 <__aeabi_dsub>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	f7f1 f8be 	bl	8000874 <__aeabi_ddiv>
 800f6f8:	e7e8      	b.n	800f6cc <__ieee754_sqrt+0x28>
 800f6fa:	152a      	asrs	r2, r5, #20
 800f6fc:	d115      	bne.n	800f72a <__ieee754_sqrt+0x86>
 800f6fe:	2000      	movs	r0, #0
 800f700:	e009      	b.n	800f716 <__ieee754_sqrt+0x72>
 800f702:	0acb      	lsrs	r3, r1, #11
 800f704:	3a15      	subs	r2, #21
 800f706:	0549      	lsls	r1, r1, #21
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d0fa      	beq.n	800f702 <__ieee754_sqrt+0x5e>
 800f70c:	e7f7      	b.n	800f6fe <__ieee754_sqrt+0x5a>
 800f70e:	462a      	mov	r2, r5
 800f710:	e7fa      	b.n	800f708 <__ieee754_sqrt+0x64>
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	3001      	adds	r0, #1
 800f716:	02dc      	lsls	r4, r3, #11
 800f718:	d5fb      	bpl.n	800f712 <__ieee754_sqrt+0x6e>
 800f71a:	1e44      	subs	r4, r0, #1
 800f71c:	1b12      	subs	r2, r2, r4
 800f71e:	f1c0 0420 	rsb	r4, r0, #32
 800f722:	fa21 f404 	lsr.w	r4, r1, r4
 800f726:	4081      	lsls	r1, r0
 800f728:	4323      	orrs	r3, r4
 800f72a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f72e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f732:	07d2      	lsls	r2, r2, #31
 800f734:	f04f 0600 	mov.w	r6, #0
 800f738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f73c:	ea4f 0565 	mov.w	r5, r5, asr #1
 800f740:	f04f 0016 	mov.w	r0, #22
 800f744:	4632      	mov	r2, r6
 800f746:	bf58      	it	pl
 800f748:	005b      	lslpl	r3, r3, #1
 800f74a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f74e:	bf5c      	itt	pl
 800f750:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f754:	0049      	lslpl	r1, r1, #1
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f75c:	0049      	lsls	r1, r1, #1
 800f75e:	1917      	adds	r7, r2, r4
 800f760:	429f      	cmp	r7, r3
 800f762:	bfde      	ittt	le
 800f764:	193a      	addle	r2, r7, r4
 800f766:	1bdb      	suble	r3, r3, r7
 800f768:	1936      	addle	r6, r6, r4
 800f76a:	0fcf      	lsrs	r7, r1, #31
 800f76c:	3801      	subs	r0, #1
 800f76e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f772:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f776:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f77a:	d1f0      	bne.n	800f75e <__ieee754_sqrt+0xba>
 800f77c:	4604      	mov	r4, r0
 800f77e:	2720      	movs	r7, #32
 800f780:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f784:	429a      	cmp	r2, r3
 800f786:	eb00 0e0c 	add.w	lr, r0, ip
 800f78a:	db02      	blt.n	800f792 <__ieee754_sqrt+0xee>
 800f78c:	d113      	bne.n	800f7b6 <__ieee754_sqrt+0x112>
 800f78e:	458e      	cmp	lr, r1
 800f790:	d811      	bhi.n	800f7b6 <__ieee754_sqrt+0x112>
 800f792:	f1be 0f00 	cmp.w	lr, #0
 800f796:	eb0e 000c 	add.w	r0, lr, ip
 800f79a:	da43      	bge.n	800f824 <__ieee754_sqrt+0x180>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	db41      	blt.n	800f824 <__ieee754_sqrt+0x180>
 800f7a0:	f102 0801 	add.w	r8, r2, #1
 800f7a4:	1a9b      	subs	r3, r3, r2
 800f7a6:	458e      	cmp	lr, r1
 800f7a8:	4464      	add	r4, ip
 800f7aa:	eba1 010e 	sub.w	r1, r1, lr
 800f7ae:	bf88      	it	hi
 800f7b0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f7b4:	4642      	mov	r2, r8
 800f7b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f7ba:	3f01      	subs	r7, #1
 800f7bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f7c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f7c8:	d1dc      	bne.n	800f784 <__ieee754_sqrt+0xe0>
 800f7ca:	4319      	orrs	r1, r3
 800f7cc:	d01b      	beq.n	800f806 <__ieee754_sqrt+0x162>
 800f7ce:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800f858 <__ieee754_sqrt+0x1b4>
 800f7d2:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800f85c <__ieee754_sqrt+0x1b8>
 800f7d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7da:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7de:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7e2:	f7f0 fd65 	bl	80002b0 <__aeabi_dsub>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	4640      	mov	r0, r8
 800f7ec:	4649      	mov	r1, r9
 800f7ee:	f7f1 f993 	bl	8000b18 <__aeabi_dcmple>
 800f7f2:	b140      	cbz	r0, 800f806 <__ieee754_sqrt+0x162>
 800f7f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f7f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800f800:	d112      	bne.n	800f828 <__ieee754_sqrt+0x184>
 800f802:	3601      	adds	r6, #1
 800f804:	463c      	mov	r4, r7
 800f806:	1072      	asrs	r2, r6, #1
 800f808:	07f1      	lsls	r1, r6, #31
 800f80a:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800f80e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f812:	bf48      	it	mi
 800f814:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f818:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f81c:	4618      	mov	r0, r3
 800f81e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f822:	e753      	b.n	800f6cc <__ieee754_sqrt+0x28>
 800f824:	4690      	mov	r8, r2
 800f826:	e7bd      	b.n	800f7a4 <__ieee754_sqrt+0x100>
 800f828:	e9da 8900 	ldrd	r8, r9, [sl]
 800f82c:	f7f0 fd42 	bl	80002b4 <__adddf3>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	4640      	mov	r0, r8
 800f836:	4649      	mov	r1, r9
 800f838:	f7f1 f964 	bl	8000b04 <__aeabi_dcmplt>
 800f83c:	b128      	cbz	r0, 800f84a <__ieee754_sqrt+0x1a6>
 800f83e:	1ca0      	adds	r0, r4, #2
 800f840:	f104 0402 	add.w	r4, r4, #2
 800f844:	bf08      	it	eq
 800f846:	3601      	addeq	r6, #1
 800f848:	e7dd      	b.n	800f806 <__ieee754_sqrt+0x162>
 800f84a:	1c63      	adds	r3, r4, #1
 800f84c:	f023 0401 	bic.w	r4, r3, #1
 800f850:	e7d9      	b.n	800f806 <__ieee754_sqrt+0x162>
 800f852:	bf00      	nop
 800f854:	7ff00000 	.word	0x7ff00000
 800f858:	200001f8 	.word	0x200001f8
 800f85c:	200001f0 	.word	0x200001f0

0800f860 <_init>:
 800f860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f862:	bf00      	nop
 800f864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f866:	bc08      	pop	{r3}
 800f868:	469e      	mov	lr, r3
 800f86a:	4770      	bx	lr

0800f86c <_fini>:
 800f86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86e:	bf00      	nop
 800f870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f872:	bc08      	pop	{r3}
 800f874:	469e      	mov	lr, r3
 800f876:	4770      	bx	lr
