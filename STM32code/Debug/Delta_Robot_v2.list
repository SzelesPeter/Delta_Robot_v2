
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e30  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a088  0800a088  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c8  0800a0c8  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0c8  0800a0c8  0000b0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d0  0800a0d0  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d0  0800a0d0  0000b0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0d4  0800a0d4  0000b0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a0d8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1ac  20000078  0800a150  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b224  0800a150  0000c224  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb33  00000000  00000000  0000c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372d  00000000  00000000  0002abe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001443  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d525  00000000  00000000  0003113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002192b  00000000  00000000  0005e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012457f  00000000  00000000  0007ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a450a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007480  00000000  00000000  001a4550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001ab9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000078 	.word	0x20000078
 8000274:	00000000 	.word	0x00000000
 8000278:	0800a070 	.word	0x0800a070

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000007c 	.word	0x2000007c
 8000294:	0800a070 	.word	0x0800a070

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	@ 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	3c01      	subs	r4, #1
 80003d4:	bf28      	it	cs
 80003d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003da:	d2e9      	bcs.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <Frequency_To_Period+0x28>)
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	3b01      	subs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	07735940 	.word	0x07735940

08000ef4 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f006 fde0 	bl	8007ac4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f006 fd28 	bl	8007968 <HAL_TIM_Base_Start_IT>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 8000f28:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <Mototr_Poz_Inc+0x48>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d009      	beq.n	8000f48 <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <Mototr_Poz_Inc+0x4c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	490b      	ldr	r1, [pc, #44]	@ (8000f6c <Mototr_Poz_Inc+0x4c>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 8000f46:	e008      	b.n	8000f5a <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 8000f48:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <Mototr_Poz_Inc+0x4c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	4906      	ldr	r1, [pc, #24]	@ (8000f6c <Mototr_Poz_Inc+0x4c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000094 	.word	0x20000094

08000f70 <Ramp>:

void Ramp(uint32_t M)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	e08c      	b.n	8001098 <Ramp+0x128>
	{
		if(i<M_move_l[M]/2)
 8000f7e:	4a50      	ldr	r2, [pc, #320]	@ (80010c0 <Ramp+0x150>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	0fda      	lsrs	r2, r3, #31
 8000f88:	4413      	add	r3, r2
 8000f8a:	105b      	asrs	r3, r3, #1
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d234      	bcs.n	8000ffe <Ramp+0x8e>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fabf 	bl	800051c <__aeabi_ui2d>
 8000f9e:	a346      	add	r3, pc, #280	@ (adr r3, 80010b8 <Ramp+0x148>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fc5e 	bl	8000864 <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	ec43 2b17 	vmov	d7, r2, r3
 8000fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb4:	eef0 0a67 	vmov.f32	s1, s15
 8000fb8:	f008 ff50 	bl	8009e5c <sqrt>
 8000fbc:	ec51 0b10 	vmov	r0, r1, d0
 8000fc0:	a33d      	add	r3, pc, #244	@ (adr r3, 80010b8 <Ramp+0x148>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fb23 	bl	8000610 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <Ramp+0x154>)
 8000fd8:	f7ff f964 	bl	80002a4 <__adddf3>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fdc4 	bl	8000b70 <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d93d      	bls.n	8001072 <Ramp+0x102>
				tmp = f_MAX;
 8000ff6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e039      	b.n	8001072 <Ramp+0x102>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-i))/a_MAX);
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <Ramp+0x150>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	461a      	mov	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa84 	bl	800051c <__aeabi_ui2d>
 8001014:	a328      	add	r3, pc, #160	@ (adr r3, 80010b8 <Ramp+0x148>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fc23 	bl	8000864 <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	ec43 2b17 	vmov	d7, r2, r3
 8001026:	eeb0 0a47 	vmov.f32	s0, s14
 800102a:	eef0 0a67 	vmov.f32	s1, s15
 800102e:	f008 ff15 	bl	8009e5c <sqrt>
 8001032:	ec51 0b10 	vmov	r0, r1, d0
 8001036:	a320      	add	r3, pc, #128	@ (adr r3, 80010b8 <Ramp+0x148>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fae8 	bl	8000610 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <Ramp+0x154>)
 800104e:	f7ff f929 	bl	80002a4 <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd89 	bl	8000b70 <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <Ramp+0x102>
				tmp = f_MAX;
 800106c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001070:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff ff28 	bl	8000ec8 <Frequency_To_Period>
 8001078:	4603      	mov	r3, r0
 800107a:	b298      	uxth	r0, r3
 800107c:	4912      	ldr	r1, [pc, #72]	@ (80010c8 <Ramp+0x158>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001084:	fb03 f202 	mul.w	r2, r3, r2
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	4602      	mov	r2, r0
 800108e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3301      	adds	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <Ramp+0x150>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	461a      	mov	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	f4ff af6a 	bcc.w	8000f7e <Ramp+0xe>
	}
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40f86a00 	.word	0x40f86a00
 80010c0:	2003aa20 	.word	0x2003aa20
 80010c4:	40590000 	.word	0x40590000
 80010c8:	200000a0 	.word	0x200000a0

080010cc <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 80010d8:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <Ramp_Out+0x68>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	4915      	ldr	r1, [pc, #84]	@ (8001138 <Ramp_Out+0x6c>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d304      	bcc.n	80010f6 <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f006 ff0a 	bl	8007f08 <HAL_TIM_OC_Stop_IT>
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);

		M_move_poz[M]++;
	}
}
 80010f4:	e019      	b.n	800112a <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <Ramp_Out+0x68>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	490f      	ldr	r1, [pc, #60]	@ (800113c <Ramp_Out+0x70>)
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8001106:	fb00 f202 	mul.w	r2, r0, r2
 800110a:	4413      	add	r3, r2
 800110c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff feee 	bl	8000ef4 <Period_Out>
		M_move_poz[M]++;
 8001118:	4a06      	ldr	r2, [pc, #24]	@ (8001134 <Ramp_Out+0x68>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	4904      	ldr	r1, [pc, #16]	@ (8001134 <Ramp_Out+0x68>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2003aa2c 	.word	0x2003aa2c
 8001138:	2003aa20 	.word	0x2003aa20
 800113c:	200000a0 	.word	0x200000a0

08001140 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 800114e:	4b52      	ldr	r3, [pc, #328]	@ (8001298 <move+0x158>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a51      	ldr	r2, [pc, #324]	@ (800129c <move+0x15c>)
 8001158:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 800115a:	4b4f      	ldr	r3, [pc, #316]	@ (8001298 <move+0x158>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a4e      	ldr	r2, [pc, #312]	@ (800129c <move+0x15c>)
 8001164:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 8001166:	4b4c      	ldr	r3, [pc, #304]	@ (8001298 <move+0x158>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a4b      	ldr	r2, [pc, #300]	@ (800129c <move+0x15c>)
 8001170:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 8001172:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <move+0x15c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	da0d      	bge.n	8001196 <move+0x56>
	{
		M_move_l[0] = M_move_l[0]*(-1);
 800117a:	4b48      	ldr	r3, [pc, #288]	@ (800129c <move+0x15c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	425b      	negs	r3, r3
 8001180:	4a46      	ldr	r2, [pc, #280]	@ (800129c <move+0x15c>)
 8001182:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 8001184:	4b46      	ldr	r3, [pc, #280]	@ (80012a0 <move+0x160>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2101      	movs	r1, #1
 800118e:	4845      	ldr	r0, [pc, #276]	@ (80012a4 <move+0x164>)
 8001190:	f001 fdf6 	bl	8002d80 <HAL_GPIO_WritePin>
 8001194:	e007      	b.n	80011a6 <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 8001196:	4b42      	ldr	r3, [pc, #264]	@ (80012a0 <move+0x160>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4840      	ldr	r0, [pc, #256]	@ (80012a4 <move+0x164>)
 80011a2:	f001 fded 	bl	8002d80 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 80011a6:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <move+0x15c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da0d      	bge.n	80011ca <move+0x8a>
	{
		M_move_l[1] = M_move_l[1]*(-1);
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <move+0x15c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	425b      	negs	r3, r3
 80011b4:	4a39      	ldr	r2, [pc, #228]	@ (800129c <move+0x15c>)
 80011b6:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <move+0x160>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2102      	movs	r1, #2
 80011c2:	4839      	ldr	r0, [pc, #228]	@ (80012a8 <move+0x168>)
 80011c4:	f001 fddc 	bl	8002d80 <HAL_GPIO_WritePin>
 80011c8:	e007      	b.n	80011da <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 80011ca:	4b35      	ldr	r3, [pc, #212]	@ (80012a0 <move+0x160>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2102      	movs	r1, #2
 80011d4:	4834      	ldr	r0, [pc, #208]	@ (80012a8 <move+0x168>)
 80011d6:	f001 fdd3 	bl	8002d80 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 80011da:	4b30      	ldr	r3, [pc, #192]	@ (800129c <move+0x15c>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da0d      	bge.n	80011fe <move+0xbe>
	{
		M_move_l[2] = M_move_l[2]*(-1);
 80011e2:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <move+0x15c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	425b      	negs	r3, r3
 80011e8:	4a2c      	ldr	r2, [pc, #176]	@ (800129c <move+0x15c>)
 80011ea:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 80011ec:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <move+0x160>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	482c      	ldr	r0, [pc, #176]	@ (80012a8 <move+0x168>)
 80011f8:	f001 fdc2 	bl	8002d80 <HAL_GPIO_WritePin>
 80011fc:	e007      	b.n	800120e <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <move+0x160>)
 8001200:	2201      	movs	r2, #1
 8001202:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2101      	movs	r1, #1
 8001208:	4827      	ldr	r0, [pc, #156]	@ (80012a8 <move+0x168>)
 800120a:	f001 fdb9 	bl	8002d80 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff feae 	bl	8000f70 <Ramp>
	Ramp(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff feab 	bl	8000f70 <Ramp>
	Ramp(2);
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff fea8 	bl	8000f70 <Ramp>

	M_move_poz[0] =0;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <move+0x16c>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <move+0x16c>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <move+0x16c>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_OC_Start_IT(tim1,Channel1);
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f006 fcc9 	bl	8007be4 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 8001252:	6a39      	ldr	r1, [r7, #32]
 8001254:	69f8      	ldr	r0, [r7, #28]
 8001256:	f006 fcc5 	bl	8007be4 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 800125a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800125c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800125e:	f006 fcc1 	bl	8007be4 <HAL_TIM_OC_Start_IT>

	while(M_move_l[0] >  M_move_poz[0] || M_move_l[1] >  M_move_poz[1] || M_move_l[2] >  M_move_poz[2])
 8001262:	bf00      	nop
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <move+0x15c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <move+0x16c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d8f8      	bhi.n	8001264 <move+0x124>
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <move+0x15c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	461a      	mov	r2, r3
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <move+0x16c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f1      	bhi.n	8001264 <move+0x124>
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <move+0x15c>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	461a      	mov	r2, r3
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <move+0x16c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	d8ea      	bhi.n	8001264 <move+0x124>
	{

	}
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000094 	.word	0x20000094
 800129c:	2003aa20 	.word	0x2003aa20
 80012a0:	20000000 	.word	0x20000000
 80012a4:	42020400 	.word	0x42020400
 80012a8:	42020800 	.word	0x42020800
 80012ac:	2003aa2c 	.word	0x2003aa2c

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f001 f987 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f851 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 fc2f 	bl	8001b20 <MX_GPIO_Init>
  MX_UART5_Init();
 80012c2:	f000 fb15 	bl	80018f0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80012c6:	f000 fb61 	bl	800198c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80012ca:	f000 fbf7 	bl	8001abc <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80012ce:	f000 f8bb 	bl	8001448 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012d2:	f000 f905 	bl	80014e0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80012d6:	f000 fba5 	bl	8001a24 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80012da:	f000 f957 	bl	800158c <MX_TIM2_Init>
  MX_TIM3_Init();
 80012de:	f000 f9cb 	bl	8001678 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012e2:	f000 fa3f 	bl	8001764 <MX_TIM5_Init>
  MX_TIM15_Init();
 80012e6:	f000 fab3 	bl	8001850 <MX_TIM15_Init>
  MX_ICACHE_Init();
 80012ea:	f000 f8ed 	bl	80014c8 <MX_ICACHE_Init>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <main+0xa0>)
 80012f0:	f006 fb3a 	bl	8007968 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  move (20000,20000,20000,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 80012f4:	230c      	movs	r3, #12
 80012f6:	9304      	str	r3, [sp, #16]
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <main+0xa4>)
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	2304      	movs	r3, #4
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <main+0xa8>)
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <main+0xac>)
 800130a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800130e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001312:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001316:	f7ff ff13 	bl	8001140 <move>


	  HAL_Delay(1000);
 800131a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800131e:	f001 fa11 	bl	8002744 <HAL_Delay>


	  move (0,0,0,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8001322:	230c      	movs	r3, #12
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <main+0xa4>)
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	2304      	movs	r3, #4
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <main+0xa8>)
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2300      	movs	r3, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <main+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff feff 	bl	8001140 <move>


	  HAL_Delay(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001346:	f001 f9fd 	bl	8002744 <HAL_Delay>
	  move (20000,20000,20000,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 800134a:	bf00      	nop
 800134c:	e7d2      	b.n	80012f4 <main+0x44>
 800134e:	bf00      	nop
 8001350:	2003ac00 	.word	0x2003ac00
 8001354:	2003ab68 	.word	0x2003ab68
 8001358:	2003ab1c 	.word	0x2003ab1c
 800135c:	2003abb4 	.word	0x2003abb4

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09c      	sub	sp, #112	@ 0x70
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2250      	movs	r2, #80	@ 0x50
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f008 fd41 	bl	8009df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <SystemClock_Config+0xe0>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	4a2d      	ldr	r2, [pc, #180]	@ (8001440 <SystemClock_Config+0xe0>)
 800138c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001390:	6113      	str	r3, [r2, #16]
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <SystemClock_Config+0xe0>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800139e:	bf00      	nop
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <SystemClock_Config+0xe0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d1f9      	bne.n	80013a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013ac:	2321      	movs	r3, #33	@ 0x21
 80013ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80013c0:	2303      	movs	r3, #3
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80013c4:	2306      	movs	r3, #6
 80013c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80013c8:	237d      	movs	r3, #125	@ 0x7d
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013d0:	2308      	movs	r3, #8
 80013d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80013d8:	2308      	movs	r3, #8
 80013da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80013dc:	2300      	movs	r3, #0
 80013de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 ff27 	bl	800323c <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f4:	f000 fc46 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	231f      	movs	r3, #31
 80013fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2303      	movs	r3, #3
 80013fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001404:	2350      	movs	r3, #80	@ 0x50
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001408:	2350      	movs	r3, #80	@ 0x50
 800140a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 800140c:	2350      	movs	r3, #80	@ 0x50
 800140e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	2105      	movs	r1, #5
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fb48 	bl	8003aac <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001422:	f000 fc2f 	bl	8001c84 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <SystemClock_Config+0xe4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemClock_Config+0xe4>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	3770      	adds	r7, #112	@ 0x70
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	44020800 	.word	0x44020800
 8001444:	40022000 	.word	0x40022000

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_I2C1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_I2C1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <MX_I2C1_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001484:	f001 fc94 	bl	8002db0 <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800148e:	f000 fbf9 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001496:	f001 fd26 	bl	8002ee6 <HAL_I2CEx_ConfigAnalogFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 fbf0 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_I2C1_Init+0x74>)
 80014a8:	f001 fd68 	bl	8002f7c <HAL_I2CEx_ConfigDigitalFilter>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 fbe7 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2003aa38 	.word	0x2003aa38
 80014c0:	40005400 	.word	0x40005400
 80014c4:	2050517a 	.word	0x2050517a

080014c8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80014cc:	f001 fda2 	bl	8003014 <HAL_ICACHE_Enable>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80014d6:	f000 fbd5 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014e6:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <MX_SPI1_Init+0xa8>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800150c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800152c:	2207      	movs	r2, #7
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001532:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800155e:	2200      	movs	r2, #0
 8001560:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001564:	2200      	movs	r2, #0
 8001566:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001570:	f006 f85c 	bl	800762c <HAL_SPI_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800157a:	f000 fb83 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2003aa8c 	.word	0x2003aa8c
 8001588:	40013000 	.word	0x40013000

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015c8:	22f9      	movs	r2, #249	@ 0xf9
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80015d2:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e4:	4823      	ldr	r0, [pc, #140]	@ (8001674 <MX_TIM2_Init+0xe8>)
 80015e6:	f006 f968 	bl	80078ba <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015f0:	f000 fb48 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fe:	4619      	mov	r1, r3
 8001600:	481c      	ldr	r0, [pc, #112]	@ (8001674 <MX_TIM2_Init+0xe8>)
 8001602:	f006 ff35 	bl	8008470 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800160c:	f000 fb3a 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001610:	4818      	ldr	r0, [pc, #96]	@ (8001674 <MX_TIM2_Init+0xe8>)
 8001612:	f006 fa86 	bl	8007b22 <HAL_TIM_OC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800161c:	f000 fb32 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_TIM2_Init+0xe8>)
 8001630:	f007 fd50 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800163a:	f000 fb23 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800163e:	2330      	movs	r3, #48	@ 0x30
 8001640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	2204      	movs	r2, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	@ (8001674 <MX_TIM2_Init+0xe8>)
 8001656:	f006 fe91 	bl	800837c <HAL_TIM_OC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001660:	f000 fb10 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <MX_TIM2_Init+0xe8>)
 8001666:	f000 fc6f 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	@ 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2003ab1c 	.word	0x2003ab1c

08001678 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	@ 0x38
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001760 <MX_TIM3_Init+0xe8>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016b2:	22f9      	movs	r2, #249	@ 0xf9
 80016b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016be:	2201      	movs	r2, #1
 80016c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ce:	4823      	ldr	r0, [pc, #140]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016d0:	f006 f8f3 	bl	80078ba <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016da:	f000 fad3 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e8:	4619      	mov	r1, r3
 80016ea:	481c      	ldr	r0, [pc, #112]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016ec:	f006 fec0 	bl	8008470 <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016f6:	f000 fac5 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80016fa:	4818      	ldr	r0, [pc, #96]	@ (800175c <MX_TIM3_Init+0xe4>)
 80016fc:	f006 fa11 	bl	8007b22 <HAL_TIM_OC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001706:	f000 fabd 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4810      	ldr	r0, [pc, #64]	@ (800175c <MX_TIM3_Init+0xe4>)
 800171a:	f007 fcdb 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001724:	f000 faae 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001728:	2330      	movs	r3, #48	@ 0x30
 800172a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	220c      	movs	r2, #12
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	@ (800175c <MX_TIM3_Init+0xe4>)
 8001740:	f006 fe1c 	bl	800837c <HAL_TIM_OC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800174a:	f000 fa9b 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800174e:	4803      	ldr	r0, [pc, #12]	@ (800175c <MX_TIM3_Init+0xe4>)
 8001750:	f000 fbfa 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	@ 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2003ab68 	.word	0x2003ab68
 8001760:	40000400 	.word	0x40000400

08001764 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	@ 0x38
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001796:	4b2c      	ldr	r3, [pc, #176]	@ (8001848 <MX_TIM5_Init+0xe4>)
 8001798:	4a2c      	ldr	r2, [pc, #176]	@ (800184c <MX_TIM5_Init+0xe8>)
 800179a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 800179c:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <MX_TIM5_Init+0xe4>)
 800179e:	22f9      	movs	r2, #249	@ 0xf9
 80017a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017ba:	4823      	ldr	r0, [pc, #140]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017bc:	f006 f87d 	bl	80078ba <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80017c6:	f000 fa5d 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d4:	4619      	mov	r1, r3
 80017d6:	481c      	ldr	r0, [pc, #112]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017d8:	f006 fe4a 	bl	8008470 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80017e2:	f000 fa4f 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80017e6:	4818      	ldr	r0, [pc, #96]	@ (8001848 <MX_TIM5_Init+0xe4>)
 80017e8:	f006 f99b 	bl	8007b22 <HAL_TIM_OC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80017f2:	f000 fa47 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	@ (8001848 <MX_TIM5_Init+0xe4>)
 8001806:	f007 fc65 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001810:	f000 fa38 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001814:	2330      	movs	r3, #48	@ 0x30
 8001816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	@ (8001848 <MX_TIM5_Init+0xe4>)
 800182c:	f006 fda6 	bl	800837c <HAL_TIM_OC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001836:	f000 fa25 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <MX_TIM5_Init+0xe4>)
 800183c:	f000 fb84 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3738      	adds	r7, #56	@ 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2003abb4 	.word	0x2003abb4
 800184c:	40000c00 	.word	0x40000c00

08001850 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM15_Init+0x98>)
 8001870:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <MX_TIM15_Init+0x9c>)
 8001872:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_TIM15_Init+0x98>)
 8001876:	220a      	movs	r2, #10
 8001878:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM15_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_TIM15_Init+0x98>)
 8001882:	227c      	movs	r2, #124	@ 0x7c
 8001884:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_TIM15_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_TIM15_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <MX_TIM15_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <MX_TIM15_Init+0x98>)
 800189a:	f006 f80e 	bl	80078ba <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f9ee 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_TIM15_Init+0x98>)
 80018b6:	f006 fddb 	bl	8008470 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80018c0:	f000 f9e0 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_TIM15_Init+0x98>)
 80018d2:	f007 fbff 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80018dc:	f000 f9d2 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2003ac00 	.word	0x2003ac00
 80018ec:	40014000 	.word	0x40014000

080018f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018f4:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <MX_UART5_Init+0x94>)
 80018f6:	4a24      	ldr	r2, [pc, #144]	@ (8001988 <MX_UART5_Init+0x98>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_UART5_Init+0x94>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <MX_UART5_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <MX_UART5_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_UART5_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <MX_UART5_Init+0x94>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_UART5_Init+0x94>)
 800191c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001920:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <MX_UART5_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_UART5_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MX_UART5_Init+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_UART5_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800193a:	4812      	ldr	r0, [pc, #72]	@ (8001984 <MX_UART5_Init+0x94>)
 800193c:	f007 fce0 	bl	8009300 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001946:	f000 f99d 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <MX_UART5_Init+0x94>)
 800194e:	f008 f92d 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 8001958:	f000 f994 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195c:	2100      	movs	r1, #0
 800195e:	4809      	ldr	r0, [pc, #36]	@ (8001984 <MX_UART5_Init+0x94>)
 8001960:	f008 f962 	bl	8009c28 <HAL_UARTEx_SetRxFifoThreshold>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 800196a:	f000 f98b 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_UART5_Init+0x94>)
 8001970:	f008 f8e3 	bl	8009b3a <HAL_UARTEx_DisableFifoMode>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 800197a:	f000 f983 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2003ac4c 	.word	0x2003ac4c
 8001988:	40005000 	.word	0x40005000

0800198c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 8001992:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <MX_USART1_UART_Init+0x94>)
 8001994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d4:	4811      	ldr	r0, [pc, #68]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019d6:	f007 fc93 	bl	8009300 <HAL_UART_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019e0:	f000 f950 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019e8:	f008 f8e0 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019f2:	f000 f947 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 80019fa:	f008 f915 	bl	8009c28 <HAL_UARTEx_SetRxFifoThreshold>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f000 f93e 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <MX_USART1_UART_Init+0x90>)
 8001a0a:	f008 f896 	bl	8009b3a <HAL_UARTEx_DisableFifoMode>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a14:	f000 f936 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2003ace0 	.word	0x2003ace0
 8001a20:	40013800 	.word	0x40013800

08001a24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a2a:	4a23      	ldr	r2, [pc, #140]	@ (8001ab8 <MX_USART6_UART_Init+0x94>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a6c:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a6e:	f007 fc47 	bl	8009300 <HAL_UART_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001a78:	f000 f904 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a80:	f008 f894 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001a8a:	f000 f8fb 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4808      	ldr	r0, [pc, #32]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001a92:	f008 f8c9 	bl	8009c28 <HAL_UARTEx_SetRxFifoThreshold>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001a9c:	f000 f8f2 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <MX_USART6_UART_Init+0x90>)
 8001aa2:	f008 f84a 	bl	8009b3a <HAL_UARTEx_DisableFifoMode>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f000 f8ea 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2003ad74 	.word	0x2003ad74
 8001ab8:	40006400 	.word	0x40006400

08001abc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <MX_USB_PCD_Init+0x60>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ac8:	2208      	movs	r2, #8
 8001aca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_USB_PCD_Init+0x5c>)
 8001b04:	f001 fa96 	bl	8003034 <HAL_PCD_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001b0e:	f000 f8b9 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2003ae08 	.word	0x2003ae08
 8001b1c:	40016000 	.word	0x40016000

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b54:	4b46      	ldr	r3, [pc, #280]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5a:	4a45      	ldr	r2, [pc, #276]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b64:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b78:	4a3d      	ldr	r2, [pc, #244]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b96:	4a36      	ldr	r2, [pc, #216]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba0:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <MX_GPIO_Init+0x150>)
 8001ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8001bb4:	482f      	ldr	r0, [pc, #188]	@ (8001c74 <MX_GPIO_Init+0x154>)
 8001bb6:	f001 f8e3 	bl	8002d80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f240 5121 	movw	r1, #1313	@ 0x521
 8001bc0:	482d      	ldr	r0, [pc, #180]	@ (8001c78 <MX_GPIO_Init+0x158>)
 8001bc2:	f001 f8dd 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bcc:	482b      	ldr	r0, [pc, #172]	@ (8001c7c <MX_GPIO_Init+0x15c>)
 8001bce:	f001 f8d7 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001bd2:	f24a 0313 	movw	r3, #40979	@ 0xa013
 8001bd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4822      	ldr	r0, [pc, #136]	@ (8001c74 <MX_GPIO_Init+0x154>)
 8001bec:	f000 ff5e 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <MX_GPIO_Init+0x160>)
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	481b      	ldr	r0, [pc, #108]	@ (8001c74 <MX_GPIO_Init+0x154>)
 8001c06:	f000 ff51 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4813      	ldr	r0, [pc, #76]	@ (8001c74 <MX_GPIO_Init+0x154>)
 8001c26:	f000 ff41 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 8001c2a:	f240 5321 	movw	r3, #1313	@ 0x521
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <MX_GPIO_Init+0x158>)
 8001c44:	f000 ff32 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <MX_GPIO_Init+0x15c>)
 8001c62:	f000 ff23 	bl	8002aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	@ 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	44020c00 	.word	0x44020c00
 8001c74:	42020800 	.word	0x42020800
 8001c78:	42020400 	.word	0x42020400
 8001c7c:	42020000 	.word	0x42020000
 8001c80:	10110000 	.word	0x10110000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0be      	sub	sp, #248	@ 0xf8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	22d0      	movs	r2, #208	@ 0xd0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f008 f898 	bl	8009df6 <memset>
  if(hi2c->Instance==I2C1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a26      	ldr	r2, [pc, #152]	@ (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d145      	bne.n	8001d5c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fa22 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cf2:	f7ff ffc7 	bl	8001c84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d14:	23c0      	movs	r3, #192	@ 0xc0
 8001d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d3a:	f000 feb7 	bl	8002aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d5c:	bf00      	nop
 8001d5e:	37f8      	adds	r7, #248	@ 0xf8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005400 	.word	0x40005400
 8001d68:	44020c00 	.word	0x44020c00
 8001d6c:	42020400 	.word	0x42020400

08001d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0be      	sub	sp, #248	@ 0xf8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	22d0      	movs	r2, #208	@ 0xd0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f008 f830 	bl	8009df6 <memset>
  if(hspi->Instance==SPI1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a26      	ldr	r2, [pc, #152]	@ (8001e34 <HAL_SPI_MspInit+0xc4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d145      	bne.n	8001e2c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001da0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 f9ba 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001dc2:	f7ff ff5f 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dd6:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dea:	4a13      	ldr	r2, [pc, #76]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e02:	23e0      	movs	r3, #224	@ 0xe0
 8001e04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <HAL_SPI_MspInit+0xcc>)
 8001e28:	f000 fe40 	bl	8002aac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e2c:	bf00      	nop
 8001e2e:	37f8      	adds	r7, #248	@ 0xf8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40013000 	.word	0x40013000
 8001e38:	44020c00 	.word	0x44020c00
 8001e3c:	42020000 	.word	0x42020000

08001e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e50:	d117      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e58:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	202d      	movs	r0, #45	@ 0x2d
 8001e76:	f000 fd41 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e7a:	202d      	movs	r0, #45	@ 0x2d
 8001e7c:	f000 fd58 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e80:	e055      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_TIM_Base_MspInit+0xfc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d117      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e92:	4a29      	ldr	r2, [pc, #164]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	202e      	movs	r0, #46	@ 0x2e
 8001eb0:	f000 fd24 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb4:	202e      	movs	r0, #46	@ 0x2e
 8001eb6:	f000 fd3b 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001eba:	e038      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_TIM_Base_MspInit+0x100>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d117      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2030      	movs	r0, #48	@ 0x30
 8001eea:	f000 fd07 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001eee:	2030      	movs	r0, #48	@ 0x30
 8001ef0:	f000 fd1e 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001ef4:	e01b      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_TIM_Base_MspInit+0x104>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d116      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f00:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2047      	movs	r0, #71	@ 0x47
 8001f24:	f000 fcea 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001f28:	2047      	movs	r0, #71	@ 0x47
 8001f2a:	f000 fd01 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	44020c00 	.word	0x44020c00
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	40014000 	.word	0x40014000

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f68:	d11f      	bne.n	8001faa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f70:	4a34      	ldr	r2, [pc, #208]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7a:	4b32      	ldr	r3, [pc, #200]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4829      	ldr	r0, [pc, #164]	@ (8002048 <HAL_TIM_MspPostInit+0x100>)
 8001fa4:	f000 fd82 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fa8:	e048      	b.n	800203c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a27      	ldr	r2, [pc, #156]	@ (800204c <HAL_TIM_MspPostInit+0x104>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d11f      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb4:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fba:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4818      	ldr	r0, [pc, #96]	@ (8002050 <HAL_TIM_MspPostInit+0x108>)
 8001fee:	f000 fd5d 	bl	8002aac <HAL_GPIO_Init>
}
 8001ff2:	e023      	b.n	800203c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <HAL_TIM_MspPostInit+0x10c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11e      	bne.n	800203c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002004:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201c:	2301      	movs	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800202c:	2302      	movs	r3, #2
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	4804      	ldr	r0, [pc, #16]	@ (8002048 <HAL_TIM_MspPostInit+0x100>)
 8002038:	f000 fd38 	bl	8002aac <HAL_GPIO_Init>
}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	@ 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	44020c00 	.word	0x44020c00
 8002048:	42020000 	.word	0x42020000
 800204c:	40000400 	.word	0x40000400
 8002050:	42020400 	.word	0x42020400
 8002054:	40000c00 	.word	0x40000c00

08002058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0c4      	sub	sp, #272	@ 0x110
 800205c:	af00      	add	r7, sp, #0
 800205e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002066:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800207c:	22d0      	movs	r2, #208	@ 0xd0
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f007 feb8 	bl	8009df6 <memset>
  if(huart->Instance==UART5)
 8002086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800208a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a92      	ldr	r2, [pc, #584]	@ (80022dc <HAL_UART_MspInit+0x284>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d16c      	bne.n	8002172 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002098:	f04f 0210 	mov.w	r2, #16
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 f83e 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80020ba:	f7ff fde3 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80020be:	4b88      	ldr	r3, [pc, #544]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020c4:	4a86      	ldr	r2, [pc, #536]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020ce:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	4b80      	ldr	r3, [pc, #512]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e2:	4a7f      	ldr	r2, [pc, #508]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020ec:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002100:	4a77      	ldr	r2, [pc, #476]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800210a:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002118:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800211c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002132:	230e      	movs	r3, #14
 8002134:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800213c:	4619      	mov	r1, r3
 800213e:	4869      	ldr	r0, [pc, #420]	@ (80022e4 <HAL_UART_MspInit+0x28c>)
 8002140:	f000 fcb4 	bl	8002aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002144:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002148:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800215e:	2308      	movs	r3, #8
 8002160:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002168:	4619      	mov	r1, r3
 800216a:	485f      	ldr	r0, [pc, #380]	@ (80022e8 <HAL_UART_MspInit+0x290>)
 800216c:	f000 fc9e 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002170:	e0af      	b.n	80022d2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8002172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002176:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ec <HAL_UART_MspInit+0x294>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d147      	bne.n	8002214 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002184:	f04f 0201 	mov.w	r2, #1
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800219a:	4618      	mov	r0, r3
 800219c:	f001 ffc8 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x152>
      Error_Handler();
 80021a6:	f7ff fd6d 	bl	8001c84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021b0:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80021ba:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ce:	4a44      	ldr	r2, [pc, #272]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021d8:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002200:	2304      	movs	r3, #4
 8002202:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800220a:	4619      	mov	r1, r3
 800220c:	4835      	ldr	r0, [pc, #212]	@ (80022e4 <HAL_UART_MspInit+0x28c>)
 800220e:	f000 fc4d 	bl	8002aac <HAL_GPIO_Init>
}
 8002212:	e05e      	b.n	80022d2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8002214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002218:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <HAL_UART_MspInit+0x298>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d155      	bne.n	80022d2 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002226:	f04f 0220 	mov.w	r2, #32
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002238:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800223c:	4618      	mov	r0, r3
 800223e:	f001 ff77 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8002248:	f7ff fd1c 	bl	8001c84 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 800224e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 8002254:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002258:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 800225e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002262:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800226a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002274:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002278:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 800227c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002280:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <HAL_UART_MspInit+0x288>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002290:	f003 0204 	and.w	r2, r3, #4
 8002294:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022a6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a8:	23c0      	movs	r3, #192	@ 0xc0
 80022aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80022c0:	2307      	movs	r3, #7
 80022c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80022ca:	4619      	mov	r1, r3
 80022cc:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <HAL_UART_MspInit+0x290>)
 80022ce:	f000 fbed 	bl	8002aac <HAL_GPIO_Init>
}
 80022d2:	bf00      	nop
 80022d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40005000 	.word	0x40005000
 80022e0:	44020c00 	.word	0x44020c00
 80022e4:	42020400 	.word	0x42020400
 80022e8:	42020800 	.word	0x42020800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40006400 	.word	0x40006400

080022f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0b8      	sub	sp, #224	@ 0xe0
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	22d0      	movs	r2, #208	@ 0xd0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fd76 	bl	8009df6 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <HAL_PCD_MspInit+0x70>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d123      	bne.n	800235c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0310 	mov.w	r3, #16
 800231c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002320:	2330      	movs	r3, #48	@ 0x30
 8002322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f001 ff00 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8002336:	f7ff fca5 	bl	8001c84 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800233a:	f000 ff6f 	bl	800321c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_PCD_MspInit+0x74>)
 8002340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002344:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <HAL_PCD_MspInit+0x74>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_PCD_MspInit+0x74>)
 8002350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800235c:	bf00      	nop
 800235e:	37e0      	adds	r7, #224	@ 0xe0
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40016000 	.word	0x40016000
 8002368:	44020c00 	.word	0x44020c00

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <NMI_Handler+0x4>

08002374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <MemManage_Handler+0x4>

08002384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <UsageFault_Handler+0x4>

08002394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c2:	f000 f99f 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 80023d0:	2102      	movs	r1, #2
 80023d2:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <TIM2_IRQHandler+0x2c>)
 80023d4:	f000 fcbc 	bl	8002d50 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 80023de:	2201      	movs	r2, #1
 80023e0:	2104      	movs	r1, #4
 80023e2:	4806      	ldr	r0, [pc, #24]	@ (80023fc <TIM2_IRQHandler+0x30>)
 80023e4:	f7fe fe72 	bl	80010cc <Ramp_Out>
		Mototr_Poz_Inc(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe fd99 	bl	8000f20 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ee:	4803      	ldr	r0, [pc, #12]	@ (80023fc <TIM2_IRQHandler+0x30>)
 80023f0:	f005 fe74 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	42020000 	.word	0x42020000
 80023fc:	2003ab1c 	.word	0x2003ab1c

08002400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 8002404:	2102      	movs	r1, #2
 8002406:	4809      	ldr	r0, [pc, #36]	@ (800242c <TIM3_IRQHandler+0x2c>)
 8002408:	f000 fca2 	bl	8002d50 <HAL_GPIO_ReadPin>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 8002412:	2202      	movs	r2, #2
 8002414:	210c      	movs	r1, #12
 8002416:	4806      	ldr	r0, [pc, #24]	@ (8002430 <TIM3_IRQHandler+0x30>)
 8002418:	f7fe fe58 	bl	80010cc <Ramp_Out>
		Mototr_Poz_Inc(2);
 800241c:	2002      	movs	r0, #2
 800241e:	f7fe fd7f 	bl	8000f20 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <TIM3_IRQHandler+0x30>)
 8002424:	f005 fe5a 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	42020400 	.word	0x42020400
 8002430:	2003ab68 	.word	0x2003ab68

08002434 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 8002438:	2101      	movs	r1, #1
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <TIM5_IRQHandler+0x2c>)
 800243c:	f000 fc88 	bl	8002d50 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	4806      	ldr	r0, [pc, #24]	@ (8002464 <TIM5_IRQHandler+0x30>)
 800244c:	f7fe fe3e 	bl	80010cc <Ramp_Out>
		  Mototr_Poz_Inc(0);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fd65 	bl	8000f20 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002456:	4803      	ldr	r0, [pc, #12]	@ (8002464 <TIM5_IRQHandler+0x30>)
 8002458:	f005 fe40 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	42020000 	.word	0x42020000
 8002464:	2003abb4 	.word	0x2003abb4

08002468 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <TIM15_IRQHandler+0x10>)
 800246e:	f005 fe35 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2003ac00 	.word	0x2003ac00

0800247c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002482:	4b35      	ldr	r3, [pc, #212]	@ (8002558 <SystemInit+0xdc>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	4a33      	ldr	r2, [pc, #204]	@ (8002558 <SystemInit+0xdc>)
 800248a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800248e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002492:	4b32      	ldr	r3, [pc, #200]	@ (800255c <SystemInit+0xe0>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002498:	4b30      	ldr	r3, [pc, #192]	@ (800255c <SystemInit+0xe0>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <SystemInit+0xe0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <SystemInit+0xe0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	492c      	ldr	r1, [pc, #176]	@ (800255c <SystemInit+0xe0>)
 80024aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002560 <SystemInit+0xe4>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80024b0:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <SystemInit+0xe0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80024b6:	4b29      	ldr	r3, [pc, #164]	@ (800255c <SystemInit+0xe0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <SystemInit+0xe0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <SystemInit+0xe0>)
 80024c4:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <SystemInit+0xe8>)
 80024c6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80024c8:	4b24      	ldr	r3, [pc, #144]	@ (800255c <SystemInit+0xe0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80024ce:	4b23      	ldr	r3, [pc, #140]	@ (800255c <SystemInit+0xe0>)
 80024d0:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <SystemInit+0xe8>)
 80024d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80024d4:	4b21      	ldr	r3, [pc, #132]	@ (800255c <SystemInit+0xe0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <SystemInit+0xe0>)
 80024dc:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <SystemInit+0xe8>)
 80024de:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <SystemInit+0xe0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80024e6:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <SystemInit+0xe0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <SystemInit+0xe0>)
 80024ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <SystemInit+0xe0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <SystemInit+0xdc>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <SystemInit+0xec>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002508:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002510:	d003      	beq.n	800251a <SystemInit+0x9e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002518:	d117      	bne.n	800254a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <SystemInit+0xec>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <SystemInit+0xec>)
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <SystemInit+0xf0>)
 800252a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <SystemInit+0xec>)
 800252e:	4a10      	ldr	r2, [pc, #64]	@ (8002570 <SystemInit+0xf4>)
 8002530:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <SystemInit+0xec>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <SystemInit+0xec>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <SystemInit+0xec>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <SystemInit+0xec>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	61d3      	str	r3, [r2, #28]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	44020c00 	.word	0x44020c00
 8002560:	eae2eae3 	.word	0xeae2eae3
 8002564:	01010280 	.word	0x01010280
 8002568:	40022000 	.word	0x40022000
 800256c:	08192a3b 	.word	0x08192a3b
 8002570:	4c5d6e7f 	.word	0x4c5d6e7f

08002574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002578:	f7ff ff80 	bl	800247c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800257c:	480c      	ldr	r0, [pc, #48]	@ (80025b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800257e:	490d      	ldr	r1, [pc, #52]	@ (80025b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <LoopForever+0xe>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002594:	4c0a      	ldr	r4, [pc, #40]	@ (80025c0 <LoopForever+0x16>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025a2:	f007 fc37 	bl	8009e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025a6:	f7fe fe83 	bl	80012b0 <main>

080025aa <LoopForever>:

LoopForever:
    b LoopForever
 80025aa:	e7fe      	b.n	80025aa <LoopForever>
  ldr   r0, =_estack
 80025ac:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025b8:	0800a0d8 	.word	0x0800a0d8
  ldr r2, =_sbss
 80025bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025c0:	2003b224 	.word	0x2003b224

080025c4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC1_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f98a 	bl	80028e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025d2:	f001 fc23 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_Init+0x44>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	490b      	ldr	r1, [pc, #44]	@ (8002610 <HAL_Init+0x48>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_Init+0x4c>)
 80025ea:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025ec:	2004      	movs	r0, #4
 80025ee:	f000 f9cf 	bl	8002990 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025f2:	200f      	movs	r0, #15
 80025f4:	f000 f810 	bl	8002618 <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e002      	b.n	8002608 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002602:	f7ff fb45 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	44020c00 	.word	0x44020c00
 8002610:	0800a088 	.word	0x0800a088
 8002614:	2000000c 	.word	0x2000000c

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002624:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_InitTick+0xdc>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e05c      	b.n	80026ea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_InitTick+0xe0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d10c      	bne.n	8002656 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800263c:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <HAL_InitTick+0xe4>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <HAL_InitTick+0xdc>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e037      	b.n	80026c6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002656:	f000 f9f3 	bl	8002a40 <HAL_SYSTICK_GetCLKSourceConfig>
 800265a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d023      	beq.n	80026aa <HAL_InitTick+0x92>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d82d      	bhi.n	80026c4 <HAL_InitTick+0xac>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_InitTick+0x5e>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d00d      	beq.n	8002690 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002674:	e026      	b.n	80026c4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002676:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <HAL_InitTick+0xe4>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_InitTick+0xdc>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002684:	fbb3 f3f1 	udiv	r3, r3, r1
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	60fb      	str	r3, [r7, #12]
        break;
 800268e:	e01a      	b.n	80026c6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_InitTick+0xdc>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800269a:	fbb3 f3f2 	udiv	r3, r3, r2
 800269e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
        break;
 80026a8:	e00d      	b.n	80026c6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_InitTick+0xdc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	60fb      	str	r3, [r7, #12]
        break;
 80026c2:	e000      	b.n	80026c6 <HAL_InitTick+0xae>
        break;
 80026c4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f940 	bl	800294c <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e009      	b.n	80026ea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d6:	2200      	movs	r2, #0
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	f000 f90d 	bl	80028fc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80026e2:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <HAL_InitTick+0xe8>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000014 	.word	0x20000014
 80026f8:	e000e010 	.word	0xe000e010
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	20000010 	.word	0x20000010

08002704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000014 	.word	0x20000014
 8002728:	2003b0e8 	.word	0x2003b0e8

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2003b0e8 	.word	0x2003b0e8

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff ffee 	bl	800272c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffde 	bl	800272c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000014 	.word	0x20000014

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	@ (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <__NVIC_SetPriority+0x50>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	@ 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff4c 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290a:	f7ff ff63 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800290e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7ff ffb3 	bl	8002880 <NVIC_EncodePriority>
 800291a:	4602      	mov	r2, r0
 800291c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff82 	bl	800282c <__NVIC_SetPriority>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff56 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800295c:	d301      	bcc.n	8002962 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800295e:	2301      	movs	r3, #1
 8002960:	e00d      	b.n	800297e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <HAL_SYSTICK_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_SYSTICK_Config+0x40>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_SYSTICK_Config+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a05      	ldr	r2, [pc, #20]	@ (800298c <HAL_SYSTICK_Config+0x40>)
 8002976:	f043 0303 	orr.w	r3, r3, #3
 800297a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d844      	bhi.n	8002a28 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800299e:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029c7 	.word	0x080029c7
 80029a8:	080029e5 	.word	0x080029e5
 80029ac:	08002a07 	.word	0x08002a07
 80029b0:	08002a29 	.word	0x08002a29
 80029b4:	080029b9 	.word	0x080029b9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6013      	str	r3, [r2, #0]
      break;
 80029c4:	e031      	b.n	8002a2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80029d2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029da:	f023 030c 	bic.w	r3, r3, #12
 80029de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029e2:	e022      	b.n	8002a2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029e4:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029f0:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029f6:	f023 030c 	bic.w	r3, r3, #12
 80029fa:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a04:	e011      	b.n	8002a2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a18:	f023 030c 	bic.w	r3, r3, #12
 8002a1c:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002a28:	bf00      	nop
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010
 8002a3c:	44020c00 	.word	0x44020c00

08002a40 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002a46:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002a52:	2304      	movs	r3, #4
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e01e      	b.n	8002a96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d00f      	beq.n	8002a8a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d80f      	bhi.n	8002a90 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d003      	beq.n	8002a84 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002a7c:	e008      	b.n	8002a90 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
        break;
 8002a82:	e008      	b.n	8002a96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002a84:	2301      	movs	r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
        break;
 8002a88:	e005      	b.n	8002a96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	607b      	str	r3, [r7, #4]
        break;
 8002a8e:	e002      	b.n	8002a96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
        break;
 8002a94:	bf00      	nop
    }
  }
  return systick_source;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e010 	.word	0xe000e010
 8002aa8:	44020c00 	.word	0x44020c00

08002aac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002aba:	e136      	b.n	8002d2a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8128 	beq.w	8002d24 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x38>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b12      	cmp	r3, #18
 8002ae2:	d125      	bne.n	8002b30 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d00b      	beq.n	8002b84 <HAL_GPIO_Init+0xd8>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d007      	beq.n	8002b84 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b78:	2b11      	cmp	r3, #17
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d130      	bne.n	8002be6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bba:	2201      	movs	r2, #1
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0201 	and.w	r2, r3, #1
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d017      	beq.n	8002c1e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07c      	beq.n	8002d24 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002c2a:	4a47      	ldr	r2, [pc, #284]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3318      	adds	r3, #24
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0a9a      	lsrs	r2, r3, #10
 8002c52:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <HAL_GPIO_Init+0x2a0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	00d2      	lsls	r2, r2, #3
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c66:	4938      	ldr	r1, [pc, #224]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c74:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002c98:	4a2b      	ldr	r2, [pc, #172]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4013      	ands	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002cc2:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4013      	ands	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <HAL_GPIO_Init+0x29c>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3301      	adds	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f aec1 	bne.w	8002abc <HAL_GPIO_Init+0x10>
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	44022000 	.word	0x44022000
 8002d4c:	002f7f7f 	.word	0x002f7f7f

08002d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e001      	b.n	8002d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe ff62 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e006      	b.n	8002e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d108      	bne.n	8002e52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d138      	bne.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e032      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	@ 0x24
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d139      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e033      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_ICACHE_Enable+0x1c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_ICACHE_Enable+0x1c>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40030400 	.word	0x40030400

08003034 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af02      	add	r7, sp, #8
 800303a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0c3      	b.n	80031ce <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff f94a 	bl	80022f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f006 fe67 	bl	8009d40 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e03f      	b.n	80030f8 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	3315      	adds	r3, #21
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3314      	adds	r3, #20
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3317      	adds	r3, #23
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	3324      	adds	r3, #36	@ 0x24
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3328      	adds	r3, #40	@ 0x28
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3304      	adds	r3, #4
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3ba      	bcc.n	8003078 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e044      	b.n	8003192 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	791b      	ldrb	r3, [r3, #4]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3b5      	bcc.n	8003108 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7c1a      	ldrb	r2, [r3, #16]
 80031a4:	f88d 2000 	strb.w	r2, [sp]
 80031a8:	3304      	adds	r3, #4
 80031aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ac:	f006 fe00 	bl	8009db0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7b1b      	ldrb	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f805 	bl	80031d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f043 0202 	orr.w	r2, r3, #2
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003226:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800322a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	44020800 	.word	0x44020800

0800323c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f000 bc28 	b.w	8003aa0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003250:	4b94      	ldr	r3, [pc, #592]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 0318 	and.w	r3, r3, #24
 8003258:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800325a:	4b92      	ldr	r3, [pc, #584]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05b      	beq.n	8003328 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x46>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2b18      	cmp	r3, #24
 800327a:	d114      	bne.n	80032a6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d111      	bne.n	80032a6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f000 bc08 	b.w	8003aa0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003290:	4b84      	ldr	r3, [pc, #528]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4981      	ldr	r1, [pc, #516]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d023      	beq.n	80032f6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032ae:	4b7d      	ldr	r3, [pc, #500]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7c      	ldr	r2, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7ff fa37 	bl	800272c <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80032c2:	f7ff fa33 	bl	800272c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e3e5      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80032e0:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	496d      	ldr	r1, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	618b      	str	r3, [r1, #24]
 80032f4:	e018      	b.n	8003328 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032f6:	4b6b      	ldr	r3, [pc, #428]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff fa13 	bl	800272c <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800330a:	f7ff fa0f 	bl	800272c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e3c1      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800331c:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a0 	beq.w	8003476 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d005      	beq.n	8003348 <HAL_RCC_OscConfig+0x10c>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b18      	cmp	r3, #24
 8003340:	d109      	bne.n	8003356 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 8092 	bne.w	8003476 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e3a4      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x132>
 8003360:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4f      	ldr	r2, [pc, #316]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e058      	b.n	8003420 <HAL_RCC_OscConfig+0x1e4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d112      	bne.n	800339c <HAL_RCC_OscConfig+0x160>
 8003376:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800337c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a47      	ldr	r2, [pc, #284]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003388:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b45      	ldr	r3, [pc, #276]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a44      	ldr	r2, [pc, #272]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e041      	b.n	8003420 <HAL_RCC_OscConfig+0x1e4>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x190>
 80033a6:	4b3f      	ldr	r3, [pc, #252]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a3e      	ldr	r2, [pc, #248]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a38      	ldr	r2, [pc, #224]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e029      	b.n	8003420 <HAL_RCC_OscConfig+0x1e4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80033d4:	d112      	bne.n	80033fc <HAL_RCC_OscConfig+0x1c0>
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2f      	ldr	r2, [pc, #188]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e011      	b.n	8003420 <HAL_RCC_OscConfig+0x1e4>
 80033fc:	4b29      	ldr	r3, [pc, #164]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800341a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7ff f980 	bl	800272c <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003430:	f7ff f97c 	bl	800272c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e32e      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003442:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x1f4>
 800344e:	e012      	b.n	8003476 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7ff f96c 	bl	800272c <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003458:	f7ff f968 	bl	800272c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e31a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <HAL_RCC_OscConfig+0x268>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 809a 	beq.w	80035b8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x25a>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b18      	cmp	r3, #24
 800348e:	d149      	bne.n	8003524 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d146      	bne.n	8003524 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e2fe      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
 80034a2:	bf00      	nop
 80034a4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80034ae:	4b9a      	ldr	r3, [pc, #616]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0218 	and.w	r2, r3, #24
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d014      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80034be:	4b96      	ldr	r3, [pc, #600]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0218 	bic.w	r2, r3, #24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4993      	ldr	r1, [pc, #588]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80034d0:	f000 fdd0 	bl	8004074 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034d4:	4b91      	ldr	r3, [pc, #580]	@ (800371c <HAL_RCC_OscConfig+0x4e0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f89d 	bl	8002618 <HAL_InitTick>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e2db      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7ff f920 	bl	800272c <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80034f0:	f7ff f91c 	bl	800272c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e2ce      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003502:	4b85      	ldr	r3, [pc, #532]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800350e:	4b82      	ldr	r3, [pc, #520]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	497e      	ldr	r1, [pc, #504]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003522:	e049      	b.n	80035b8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02c      	beq.n	8003586 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800352c:	4b7a      	ldr	r3, [pc, #488]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 0218 	bic.w	r2, r3, #24
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	4977      	ldr	r1, [pc, #476]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800353e:	4b76      	ldr	r3, [pc, #472]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7ff f8ef 	bl	800272c <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003552:	f7ff f8eb 	bl	800272c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e29d      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003564:	4b6c      	ldr	r3, [pc, #432]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003570:	4b69      	ldr	r3, [pc, #420]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	4966      	ldr	r1, [pc, #408]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
 8003584:	e018      	b.n	80035b8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b64      	ldr	r3, [pc, #400]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a63      	ldr	r2, [pc, #396]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7ff f8cb 	bl	800272c <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800359a:	f7ff f8c7 	bl	800272c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e279      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03c      	beq.n	800363e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01c      	beq.n	8003606 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035cc:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035d2:	4a51      	ldr	r2, [pc, #324]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80035d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7ff f8a6 	bl	800272c <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80035e4:	f7ff f8a2 	bl	800272c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e254      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035f6:	4b48      	ldr	r3, [pc, #288]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80035f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3a8>
 8003604:	e01b      	b.n	800363e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b44      	ldr	r3, [pc, #272]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800360c:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800360e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003612:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7ff f889 	bl	800272c <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800361e:	f7ff f885 	bl	800272c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e237      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80d2 	beq.w	80037f0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800364c:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x4e4>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d118      	bne.n	800368a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003658:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <HAL_RCC_OscConfig+0x4e4>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	4a30      	ldr	r2, [pc, #192]	@ (8003720 <HAL_RCC_OscConfig+0x4e4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003664:	f7ff f862 	bl	800272c <HAL_GetTick>
 8003668:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7ff f85e 	bl	800272c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e210      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800367e:	4b28      	ldr	r3, [pc, #160]	@ (8003720 <HAL_RCC_OscConfig+0x4e4>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d108      	bne.n	80036a4 <HAL_RCC_OscConfig+0x468>
 8003692:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003698:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036a2:	e074      	b.n	800378e <HAL_RCC_OscConfig+0x552>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d118      	bne.n	80036de <HAL_RCC_OscConfig+0x4a2>
 80036ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036b2:	4a19      	ldr	r2, [pc, #100]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036bc:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c2:	4a15      	ldr	r2, [pc, #84]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d2:	4a11      	ldr	r2, [pc, #68]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036dc:	e057      	b.n	800378e <HAL_RCC_OscConfig+0x552>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d11e      	bne.n	8003724 <HAL_RCC_OscConfig+0x4e8>
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036fc:	4a06      	ldr	r2, [pc, #24]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003706:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 8003708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800370c:	4a02      	ldr	r2, [pc, #8]	@ (8003718 <HAL_RCC_OscConfig+0x4dc>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003716:	e03a      	b.n	800378e <HAL_RCC_OscConfig+0x552>
 8003718:	44020c00 	.word	0x44020c00
 800371c:	20000010 	.word	0x20000010
 8003720:	44020800 	.word	0x44020800
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b85      	cmp	r3, #133	@ 0x85
 800372a:	d118      	bne.n	800375e <HAL_RCC_OscConfig+0x522>
 800372c:	4ba2      	ldr	r3, [pc, #648]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800372e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003732:	4aa1      	ldr	r2, [pc, #644]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800373c:	4b9e      	ldr	r3, [pc, #632]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003742:	4a9d      	ldr	r2, [pc, #628]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800374c:	4b9a      	ldr	r3, [pc, #616]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800374e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003752:	4a99      	ldr	r2, [pc, #612]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800375c:	e017      	b.n	800378e <HAL_RCC_OscConfig+0x552>
 800375e:	4b96      	ldr	r3, [pc, #600]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003764:	4a94      	ldr	r2, [pc, #592]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800376e:	4b92      	ldr	r3, [pc, #584]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003774:	4a90      	ldr	r2, [pc, #576]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800377e:	4b8e      	ldr	r3, [pc, #568]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003784:	4a8c      	ldr	r2, [pc, #560]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800378a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fe ffc9 	bl	800272c <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe ffc5 	bl	800272c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e175      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	4b80      	ldr	r3, [pc, #512]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 80037b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ed      	beq.n	800379e <HAL_RCC_OscConfig+0x562>
 80037c2:	e015      	b.n	80037f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe ffb2 	bl	800272c <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fe ffae 	bl	800272c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e15e      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e2:	4b75      	ldr	r3, [pc, #468]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 80037e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ed      	bne.n	80037cc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d036      	beq.n	800386a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d019      	beq.n	8003838 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003804:	4b6c      	ldr	r3, [pc, #432]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6b      	ldr	r2, [pc, #428]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800380a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800380e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe ff8c 	bl	800272c <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003818:	f7fe ff88 	bl	800272c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e13a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800382a:	4b63      	ldr	r3, [pc, #396]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x5dc>
 8003836:	e018      	b.n	800386a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003838:	4b5f      	ldr	r3, [pc, #380]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5e      	ldr	r2, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800383e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe ff72 	bl	800272c <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800384c:	f7fe ff6e 	bl	800272c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e120      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800385e:	4b56      	ldr	r3, [pc, #344]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8115 	beq.w	8003a9e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b18      	cmp	r3, #24
 8003878:	f000 80af 	beq.w	80039da <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	2b02      	cmp	r3, #2
 8003882:	f040 8086 	bne.w	8003992 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003886:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a4b      	ldr	r2, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800388c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fe ff4b 	bl	800272c <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800389a:	f7fe ff47 	bl	800272c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0f9      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80038ac:	4b42      	ldr	r3, [pc, #264]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038c0:	f023 0303 	bic.w	r3, r3, #3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038cc:	0212      	lsls	r2, r2, #8
 80038ce:	430a      	orrs	r2, r1
 80038d0:	4939      	ldr	r1, [pc, #228]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	3b01      	subs	r3, #1
 80038dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	3b01      	subs	r3, #1
 80038e6:	025b      	lsls	r3, r3, #9
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	3b01      	subs	r3, #1
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003906:	492c      	ldr	r1, [pc, #176]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003922:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	f023 020c 	bic.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	491f      	ldr	r1, [pc, #124]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800393c:	4313      	orrs	r3, r2
 800393e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	f023 0220 	bic.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	491a      	ldr	r1, [pc, #104]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003952:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a15      	ldr	r2, [pc, #84]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003964:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fe fedf 	bl	800272c <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003972:	f7fe fedb 	bl	800272c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e08d      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x736>
 8003990:	e085      	b.n	8003a9e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <HAL_RCC_OscConfig+0x77c>)
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe fec5 	bl	800272c <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fec1 	bl	800272c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d903      	bls.n	80039bc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e073      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
 80039b8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80039bc:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ee      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80039c8:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	4a36      	ldr	r2, [pc, #216]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 80039ce:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	6293      	str	r3, [r2, #40]	@ 0x28
 80039d8:	e061      	b.n	8003a9e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80039da:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d031      	beq.n	8003a52 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d12a      	bne.n	8003a52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d122      	bne.n	8003a52 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d11a      	bne.n	8003a52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	0a5b      	lsrs	r3, r3, #9
 8003a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d111      	bne.n	8003a52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	0e1b      	lsrs	r3, r3, #24
 8003a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e024      	b.n	8003aa0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d01a      	beq.n	8003a9e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a68:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe fe5a 	bl	800272c <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003a7a:	bf00      	nop
 8003a7c:	f7fe fe56 	bl	800272c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d0f9      	beq.n	8003a7c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8c:	4a06      	ldr	r2, [pc, #24]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <HAL_RCC_OscConfig+0x86c>)
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	44020c00 	.word	0x44020c00

08003aac <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e19e      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b83      	ldr	r3, [pc, #524]	@ (8003cd0 <HAL_RCC_ClockConfig+0x224>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCC_ClockConfig+0x224>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 020f 	bic.w	r2, r3, #15
 8003ad6:	497e      	ldr	r1, [pc, #504]	@ (8003cd0 <HAL_RCC_ClockConfig+0x224>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd0 <HAL_RCC_ClockConfig+0x224>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e186      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	4b74      	ldr	r3, [pc, #464]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d909      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003b0e:	4b71      	ldr	r3, [pc, #452]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	496d      	ldr	r1, [pc, #436]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	4b68      	ldr	r3, [pc, #416]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d909      	bls.n	8003b54 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b40:	4b64      	ldr	r3, [pc, #400]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4961      	ldr	r1, [pc, #388]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d908      	bls.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b70:	4b58      	ldr	r3, [pc, #352]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4955      	ldr	r1, [pc, #340]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	4b50      	ldr	r3, [pc, #320]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d908      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 020f 	bic.w	r2, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	494a      	ldr	r1, [pc, #296]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8093 	beq.w	8003ce4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bc6:	4b43      	ldr	r3, [pc, #268]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e113      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bde:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d115      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e107      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003bf6:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0fb      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c06:	4b33      	ldr	r3, [pc, #204]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0f3      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003c16:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f023 0203 	bic.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	492c      	ldr	r1, [pc, #176]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c28:	f7fe fd80 	bl	800272c <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fe fd78 	bl	800272c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0d7      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4e:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0318 	and.w	r3, r3, #24
 8003c56:	2b18      	cmp	r3, #24
 8003c58:	d1ee      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x18c>
 8003c5a:	e043      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d112      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c66:	f7fe fd61 	bl	800272c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0c0      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7c:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 0318 	and.w	r3, r3, #24
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_ClockConfig+0x1ba>
 8003c88:	e02c      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d122      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7fe fd4a 	bl	800272c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0a9      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_RCC_ClockConfig+0x228>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0318 	and.w	r3, r3, #24
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x1e8>
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fe fd38 	bl	800272c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d906      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e097      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
 8003cce:	bf00      	nop
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 0318 	and.w	r3, r3, #24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e9      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b44      	ldr	r3, [pc, #272]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d208      	bcs.n	8003d12 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d00:	4b41      	ldr	r3, [pc, #260]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 020f 	bic.w	r2, r3, #15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	493e      	ldr	r1, [pc, #248]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d12:	4b3e      	ldr	r3, [pc, #248]	@ (8003e0c <HAL_RCC_ClockConfig+0x360>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d210      	bcs.n	8003d42 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d20:	4b3a      	ldr	r3, [pc, #232]	@ (8003e0c <HAL_RCC_ClockConfig+0x360>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 020f 	bic.w	r2, r3, #15
 8003d28:	4938      	ldr	r1, [pc, #224]	@ (8003e0c <HAL_RCC_ClockConfig+0x360>)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_RCC_ClockConfig+0x360>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e05d      	b.n	8003dfe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b2d      	ldr	r3, [pc, #180]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d208      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4927      	ldr	r1, [pc, #156]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d209      	bcs.n	8003da2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	491a      	ldr	r1, [pc, #104]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d012      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d209      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003dc0:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	490e      	ldr	r1, [pc, #56]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003dd4:	f000 f822 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_ClockConfig+0x35c>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	490b      	ldr	r1, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x364>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x368>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <HAL_RCC_ClockConfig+0x36c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fc10 	bl	8002618 <HAL_InitTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	44020c00 	.word	0x44020c00
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	0800a088 	.word	0x0800a088
 8003e14:	2000000c 	.word	0x2000000c
 8003e18:	20000010 	.word	0x20000010

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	@ 0x24
 8003e20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e22:	4b8c      	ldr	r3, [pc, #560]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0318 	and.w	r3, r3, #24
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e107      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e34:	4b87      	ldr	r3, [pc, #540]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0318 	and.w	r3, r3, #24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d112      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003e40:	4b84      	ldr	r3, [pc, #528]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e4c:	4b81      	ldr	r3, [pc, #516]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	08db      	lsrs	r3, r3, #3
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	4a81      	ldr	r2, [pc, #516]	@ (800405c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e0f1      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003e60:	4b7e      	ldr	r3, [pc, #504]	@ (800405c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e0ee      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e66:	4b7b      	ldr	r3, [pc, #492]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0318 	and.w	r3, r3, #24
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d102      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e72:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x244>)
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e0e5      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	4b76      	ldr	r3, [pc, #472]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 0318 	and.w	r3, r3, #24
 8003e80:	2b18      	cmp	r3, #24
 8003e82:	f040 80dd 	bne.w	8004040 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e86:	4b73      	ldr	r3, [pc, #460]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003e90:	4b70      	ldr	r3, [pc, #448]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80b7 	beq.w	800403a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0xbe>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d056      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x16a>
 8003ed8:	e077      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003eda:	4b5e      	ldr	r3, [pc, #376]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02d      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <HAL_RCC_GetSysClockFreq+0x240>)
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f10:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f24:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004064 <HAL_RCC_GetSysClockFreq+0x248>
 8003f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003f40:	e065      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x24c>
 8003f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f54:	4b3f      	ldr	r3, [pc, #252]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f68:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004064 <HAL_RCC_GetSysClockFreq+0x248>
 8003f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003f84:	e043      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f90:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800406c <HAL_RCC_GetSysClockFreq+0x250>
 8003f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f98:	4b2e      	ldr	r3, [pc, #184]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fac:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004064 <HAL_RCC_GetSysClockFreq+0x248>
 8003fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003fc8:	e021      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004070 <HAL_RCC_GetSysClockFreq+0x254>
 8003fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ff0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004064 <HAL_RCC_GetSysClockFreq+0x248>
 8003ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004000:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004008:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800400c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800400e:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x238>)
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	0a5b      	lsrs	r3, r3, #9
 8004014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004018:	3301      	adds	r3, #1
 800401a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004026:	edd7 6a06 	vldr	s13, [r7, #24]
 800402a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004032:	ee17 3a90 	vmov	r3, s15
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e004      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e001      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <HAL_RCC_GetSysClockFreq+0x240>)
 8004042:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004044:	69fb      	ldr	r3, [r7, #28]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	44020c00 	.word	0x44020c00
 8004058:	003d0900 	.word	0x003d0900
 800405c:	03d09000 	.word	0x03d09000
 8004060:	016e3600 	.word	0x016e3600
 8004064:	46000000 	.word	0x46000000
 8004068:	4c742400 	.word	0x4c742400
 800406c:	4bb71b00 	.word	0x4bb71b00
 8004070:	4a742400 	.word	0x4a742400

08004074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004078:	f7ff fed0 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004082:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004086:	4907      	ldr	r1, [pc, #28]	@ (80040a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004088:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800408a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004094:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004096:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8004098:	681b      	ldr	r3, [r3, #0]
}
 800409a:	4618      	mov	r0, r3
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	44020c00 	.word	0x44020c00
 80040a4:	0800a088 	.word	0x0800a088
 80040a8:	2000000c 	.word	0x2000000c

080040ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80040b0:	f7ff ffe0 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4904      	ldr	r1, [pc, #16]	@ (80040d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	44020c00 	.word	0x44020c00
 80040d4:	0800a098 	.word	0x0800a098

080040d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80040dc:	f7ff ffca 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4904      	ldr	r1, [pc, #16]	@ (8004100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	44020c00 	.word	0x44020c00
 8004100:	0800a098 	.word	0x0800a098

08004104 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004108:	f7ff ffb4 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	0b1b      	lsrs	r3, r3, #12
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4904      	ldr	r1, [pc, #16]	@ (800412c <HAL_RCC_GetPCLK3Freq+0x28>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	44020c00 	.word	0x44020c00
 800412c:	0800a098 	.word	0x0800a098

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b0ba      	sub	sp, #232	@ 0xe8
 8004136:	af00      	add	r7, sp, #0
 8004138:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004142:	2300      	movs	r3, #0
 8004144:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004154:	2500      	movs	r5, #0
 8004156:	ea54 0305 	orrs.w	r3, r4, r5
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800415c:	4bcd      	ldr	r3, [pc, #820]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800415e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004162:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	4ac9      	ldr	r2, [pc, #804]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800416e:	430b      	orrs	r3, r1
 8004170:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f002 0801 	and.w	r8, r2, #1
 8004180:	f04f 0900 	mov.w	r9, #0
 8004184:	ea58 0309 	orrs.w	r3, r8, r9
 8004188:	d042      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800418a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	2b05      	cmp	r3, #5
 8004192:	d823      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041e5 	.word	0x080041e5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041b8:	3308      	adds	r3, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 f906 	bl	80073cc <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80041c6:	e00e      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041cc:	3330      	adds	r3, #48	@ 0x30
 80041ce:	4618      	mov	r0, r3
 80041d0:	f003 f994 	bl	80074fc <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80041da:	e004      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80041e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80041ee:	4ba9      	ldr	r3, [pc, #676]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041f4:	f023 0107 	bic.w	r1, r3, #7
 80041f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004200:	430b      	orrs	r3, r1
 8004202:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800420c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 0a02 	and.w	sl, r2, #2
 800421c:	f04f 0b00 	mov.w	fp, #0
 8004220:	ea5a 030b 	orrs.w	r3, sl, fp
 8004224:	f000 8088 	beq.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	2b28      	cmp	r3, #40	@ 0x28
 8004230:	d868      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800430d 	.word	0x0800430d
 800423c:	08004305 	.word	0x08004305
 8004240:	08004305 	.word	0x08004305
 8004244:	08004305 	.word	0x08004305
 8004248:	08004305 	.word	0x08004305
 800424c:	08004305 	.word	0x08004305
 8004250:	08004305 	.word	0x08004305
 8004254:	08004305 	.word	0x08004305
 8004258:	080042dd 	.word	0x080042dd
 800425c:	08004305 	.word	0x08004305
 8004260:	08004305 	.word	0x08004305
 8004264:	08004305 	.word	0x08004305
 8004268:	08004305 	.word	0x08004305
 800426c:	08004305 	.word	0x08004305
 8004270:	08004305 	.word	0x08004305
 8004274:	08004305 	.word	0x08004305
 8004278:	080042f1 	.word	0x080042f1
 800427c:	08004305 	.word	0x08004305
 8004280:	08004305 	.word	0x08004305
 8004284:	08004305 	.word	0x08004305
 8004288:	08004305 	.word	0x08004305
 800428c:	08004305 	.word	0x08004305
 8004290:	08004305 	.word	0x08004305
 8004294:	08004305 	.word	0x08004305
 8004298:	0800430d 	.word	0x0800430d
 800429c:	08004305 	.word	0x08004305
 80042a0:	08004305 	.word	0x08004305
 80042a4:	08004305 	.word	0x08004305
 80042a8:	08004305 	.word	0x08004305
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004305 	.word	0x08004305
 80042b4:	08004305 	.word	0x08004305
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004305 	.word	0x08004305
 80042c0:	08004305 	.word	0x08004305
 80042c4:	08004305 	.word	0x08004305
 80042c8:	08004305 	.word	0x08004305
 80042cc:	08004305 	.word	0x08004305
 80042d0:	08004305 	.word	0x08004305
 80042d4:	08004305 	.word	0x08004305
 80042d8:	0800430d 	.word	0x0800430d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e0:	3308      	adds	r3, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 f872 	bl	80073cc <RCCEx_PLL2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80042ee:	e00e      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f4:	3330      	adds	r3, #48	@ 0x30
 80042f6:	4618      	mov	r0, r3
 80042f8:	f003 f900 	bl	80074fc <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004316:	4b5f      	ldr	r3, [pc, #380]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800431c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004326:	4a5b      	ldr	r2, [pc, #364]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004328:	430b      	orrs	r3, r1
 800432a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800432e:	e003      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004334:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f002 0304 	and.w	r3, r2, #4
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800434e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004352:	460b      	mov	r3, r1
 8004354:	4313      	orrs	r3, r2
 8004356:	d04e      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800435e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004362:	d02c      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004364:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004368:	d825      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	d028      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004374:	d81f      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004376:	2bc0      	cmp	r3, #192	@ 0xc0
 8004378:	d025      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800437a:	2bc0      	cmp	r3, #192	@ 0xc0
 800437c:	d81b      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800437e:	2b80      	cmp	r3, #128	@ 0x80
 8004380:	d00f      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004382:	2b80      	cmp	r3, #128	@ 0x80
 8004384:	d817      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01f      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800438a:	2b40      	cmp	r3, #64	@ 0x40
 800438c:	d113      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800438e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004392:	3308      	adds	r3, #8
 8004394:	4618      	mov	r0, r3
 8004396:	f003 f819 	bl	80073cc <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80043a0:	e014      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a6:	3330      	adds	r3, #48	@ 0x30
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 f8a7 	bl	80074fc <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80043b4:	e00a      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043be:	bf00      	nop
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80043d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043da:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f002 0308 	and.w	r3, r2, #8
 8004402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800440c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d056      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800441c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004420:	d031      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004422:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004426:	d82a      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800442c:	d02d      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004432:	d824      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004434:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004438:	d029      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800443a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800443e:	d81e      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	d011      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444a:	d818      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d023      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004454:	d113      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445a:	3308      	adds	r3, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f002 ffb5 	bl	80073cc <RCCEx_PLL2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004468:	e017      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446e:	3330      	adds	r3, #48	@ 0x30
 8004470:	4618      	mov	r0, r3
 8004472:	f003 f843 	bl	80074fc <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800447c:	e00d      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004484:	e009      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004486:	bf00      	nop
 8004488:	e007      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800448a:	bf00      	nop
 800448c:	e005      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800448e:	bf00      	nop
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004492:	bf00      	nop
 8004494:	44020c00 	.word	0x44020c00
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80044a2:	4bb9      	ldr	r3, [pc, #740]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044a8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80044ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044b2:	4ab5      	ldr	r2, [pc, #724]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f002 0310 	and.w	r3, r2, #16
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d053      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80044e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044ee:	d031      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80044f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044f4:	d82a      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fa:	d02d      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004500:	d824      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004506:	d029      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800450c:	d81e      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004512:	d011      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004518:	d818      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d020      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d113      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004528:	3308      	adds	r3, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f002 ff4e 	bl	80073cc <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004536:	e014      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800453c:	3330      	adds	r3, #48	@ 0x30
 800453e:	4618      	mov	r0, r3
 8004540:	f002 ffdc 	bl	80074fc <RCCEx_PLL3_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800454a:	e00a      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004552:	e006      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004554:	bf00      	nop
 8004556:	e004      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004558:	bf00      	nop
 800455a:	e002      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800455c:	bf00      	nop
 800455e:	e000      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004562:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800456a:	4b87      	ldr	r3, [pc, #540]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800456c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004570:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457a:	4a83      	ldr	r2, [pc, #524]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800457c:	430b      	orrs	r3, r1
 800457e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004588:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800458c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f002 0320 	and.w	r3, r2, #32
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d053      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80045ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80045b6:	d031      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80045b8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80045bc:	d82a      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c2:	d02d      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c8:	d824      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045ca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80045ce:	d029      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80045d0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80045d4:	d81e      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045da:	d011      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e0:	d818      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80045e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ea:	d113      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f0:	3308      	adds	r3, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 feea 	bl	80073cc <RCCEx_PLL2_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80045fe:	e014      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004604:	3330      	adds	r3, #48	@ 0x30
 8004606:	4618      	mov	r0, r3
 8004608:	f002 ff78 	bl	80074fc <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004612:	e00a      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800461a:	e006      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800461c:	bf00      	nop
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004620:	bf00      	nop
 8004622:	e002      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004624:	bf00      	nop
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004632:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004638:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800463c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	4a51      	ldr	r2, [pc, #324]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004644:	430b      	orrs	r3, r1
 8004646:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800464a:	e003      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004650:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800466a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d053      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800467e:	d031      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004680:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004684:	d82a      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468a:	d02d      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800468c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004690:	d824      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004692:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004696:	d029      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004698:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800469c:	d81e      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800469e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a2:	d011      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80046a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a8:	d818      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d020      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b2:	d113      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b8:	3308      	adds	r3, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f002 fe86 	bl	80073cc <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80046c6:	e014      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046cc:	3330      	adds	r3, #48	@ 0x30
 80046ce:	4618      	mov	r0, r3
 80046d0:	f002 ff14 	bl	80074fc <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80046da:	e00a      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046e2:	e006      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046e4:	bf00      	nop
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004700:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470a:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800470c:	430b      	orrs	r3, r1
 800470e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004718:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800471c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004728:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004732:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d03d      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800473c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004742:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004746:	d01b      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004748:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800474c:	d814      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800474e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004752:	d017      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004758:	d80e      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004762:	d109      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004768:	3330      	adds	r3, #48	@ 0x30
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fec6 	bl	80074fc <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004776:	e00a      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800477e:	e006      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004780:	bf00      	nop
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004788:	44020c00 	.word	0x44020c00
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004796:	4b99      	ldr	r3, [pc, #612]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800479c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047a6:	4a95      	ldr	r2, [pc, #596]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047ae:	e003      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80047c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d03b      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80047d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e2:	d01b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80047e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e8:	d814      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80047ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047ee:	d017      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80047f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047f4:	d80e      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d014      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80047fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004804:	3330      	adds	r3, #48	@ 0x30
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fe78 	bl	80074fc <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800482e:	4b73      	ldr	r3, [pc, #460]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004834:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800483c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483e:	4a6f      	ldr	r2, [pc, #444]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004840:	430b      	orrs	r3, r1
 8004842:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800484c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800485c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004866:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d03d      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800487c:	d01b      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800487e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004882:	d814      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004888:	d017      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800488a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800488e:	d80e      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d014      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004898:	d109      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489e:	3330      	adds	r3, #48	@ 0x30
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 fe2b 	bl	80074fc <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80048c8:	4b4c      	ldr	r3, [pc, #304]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a48      	ldr	r2, [pc, #288]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80048ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80048f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004902:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d035      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800490c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004918:	d015      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800491a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800491e:	d80e      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d012      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800492e:	3330      	adds	r3, #48	@ 0x30
 8004930:	4618      	mov	r0, r3
 8004932:	f002 fde3 	bl	80074fc <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800494a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004954:	4b29      	ldr	r3, [pc, #164]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800495a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800495e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004966:	4a25      	ldr	r2, [pc, #148]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004968:	430b      	orrs	r3, r1
 800496a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004974:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	2100      	movs	r1, #0
 8004982:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800498a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800498e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d037      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a4:	d015      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80049a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049aa:	d80e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049b4:	d109      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ba:	3330      	adds	r3, #48	@ 0x30
 80049bc:	4618      	mov	r0, r3
 80049be:	f002 fd9d 	bl	80074fc <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80049d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10f      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	4a02      	ldr	r2, [pc, #8]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80049fc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	2100      	movs	r1, #0
 8004a12:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004a24:	4bb8      	ldr	r3, [pc, #736]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4ab7      	ldr	r2, [pc, #732]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a2e:	61d3      	str	r3, [r2, #28]
 8004a30:	4bb5      	ldr	r3, [pc, #724]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a38:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004a3c:	4ab2      	ldr	r2, [pc, #712]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a50:	2300      	movs	r3, #0
 8004a52:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d055      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a66:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a6a:	d031      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004a6c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a70:	d82a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d02d      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a82:	d029      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a88:	d81e      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8e:	d011      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a94:	d818      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9e:	d113      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 fc90 	bl	80073cc <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ab2:	e014      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab8:	3330      	adds	r3, #48	@ 0x30
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 fd1e 	bl	80074fc <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ac6:	e00a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ae6:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ae8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af8:	4a83      	ldr	r2, [pc, #524]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004b00:	e003      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b18:	2300      	movs	r3, #0
 8004b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d055      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b32:	d031      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004b34:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b38:	d82a      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b3e:	d02d      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b44:	d824      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b4a:	d029      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b50:	d81e      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b56:	d011      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b5c:	d818      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b66:	d113      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 fc2c 	bl	80073cc <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b80:	3330      	adds	r3, #48	@ 0x30
 8004b82:	4618      	mov	r0, r3
 8004b84:	f002 fcba 	bl	80074fc <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b96:	e006      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004b98:	bf00      	nop
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004b9c:	bf00      	nop
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004bae:	4b56      	ldr	r3, [pc, #344]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	4a51      	ldr	r2, [pc, #324]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bde:	663b      	str	r3, [r7, #96]	@ 0x60
 8004be0:	2300      	movs	r3, #0
 8004be2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004be4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004be8:	460b      	mov	r3, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	d032      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d80f      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d211      	bcs.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d911      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d109      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f002 fbdd 	bl	80073cc <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c18:	e006      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004c30:	4b35      	ldr	r3, [pc, #212]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c36:	f023 0107 	bic.w	r1, r3, #7
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c42:	4a31      	ldr	r2, [pc, #196]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	d024      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004c96:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c9c:	f023 0108 	bic.w	r1, r3, #8
 8004ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ca8:	4a17      	ldr	r2, [pc, #92]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004caa:	430b      	orrs	r3, r1
 8004cac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cc8:	2300      	movs	r3, #0
 8004cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ccc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f000 80b9 	beq.w	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd fd22 	bl	800272c <HAL_GetTick>
 8004ce8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004cec:	e010      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fd fd1d 	bl	800272c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d908      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d04:	e00a      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004d06:	bf00      	nop
 8004d08:	44020c00 	.word	0x44020c00
 8004d0c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d10:	4bba      	ldr	r3, [pc, #744]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0e8      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 808e 	bne.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d26:	4bb6      	ldr	r3, [pc, #728]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d023      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d40:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d4c:	4bac      	ldr	r3, [pc, #688]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d60:	4aa7      	ldr	r2, [pc, #668]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6a:	4ba5      	ldr	r3, [pc, #660]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d70:	4aa3      	ldr	r2, [pc, #652]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d7a:	4aa1      	ldr	r2, [pc, #644]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fd fccc 	bl	800272c <HAL_GetTick>
 8004d94:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d98:	e00d      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fd fcc7 	bl	800272c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da4:	1ad2      	subs	r2, r2, r3
 8004da6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d903      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	4b92      	ldr	r3, [pc, #584]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ea      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004dc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d135      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ddc:	d110      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004dde:	4b88      	ldr	r3, [pc, #544]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004df4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004df8:	4a81      	ldr	r2, [pc, #516]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	61d3      	str	r3, [r2, #28]
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004e00:	4b7f      	ldr	r3, [pc, #508]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4a7e      	ldr	r2, [pc, #504]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e0a:	61d3      	str	r3, [r2, #28]
 8004e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e12:	4a7b      	ldr	r2, [pc, #492]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e1c:	4b78      	ldr	r3, [pc, #480]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e1e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2e:	4a74      	ldr	r2, [pc, #464]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e46:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e58:	2300      	movs	r3, #0
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d035      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e6e:	2b30      	cmp	r3, #48	@ 0x30
 8004e70:	d014      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004e72:	2b30      	cmp	r3, #48	@ 0x30
 8004e74:	d80e      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d012      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d80a      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e86:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e90:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004e9c:	bf00      	nop
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004eae:	4b54      	ldr	r3, [pc, #336]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ec8:	e003      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ece:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4313      	orrs	r3, r2
 8004eec:	d033      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d007      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004efe:	e010      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b3f      	ldr	r3, [pc, #252]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	4a3e      	ldr	r2, [pc, #248]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004f0c:	e00d      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f12:	3308      	adds	r3, #8
 8004f14:	4618      	mov	r0, r3
 8004f16:	f002 fa59 	bl	80073cc <RCCEx_PLL2_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f38:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f44:	4a2e      	ldr	r2, [pc, #184]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f4c:	e003      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f52:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	d04c      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d827      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f99 	.word	0x08004f99
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fd7 	.word	0x08004fd7
 8004f94:	08004fd7 	.word	0x08004fd7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e018      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004faa:	3308      	adds	r3, #8
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 fa0d 	bl	80073cc <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00e      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fbe:	3330      	adds	r3, #48	@ 0x30
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f002 fa9b 	bl	80074fc <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d111      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004fe0:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe6:	f023 0107 	bic.w	r1, r3, #7
 8004fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ff2:	4a03      	ldr	r2, [pc, #12]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ffa:	e007      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8004ffc:	44020800 	.word	0x44020800
 8005000:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005008:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800500c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
 800501e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	f000 8081 	beq.w	800512c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800502a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800502e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005032:	2b20      	cmp	r3, #32
 8005034:	d85f      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005036:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	080050c1 	.word	0x080050c1
 8005040:	080050f7 	.word	0x080050f7
 8005044:	080050f7 	.word	0x080050f7
 8005048:	080050f7 	.word	0x080050f7
 800504c:	080050f7 	.word	0x080050f7
 8005050:	080050f7 	.word	0x080050f7
 8005054:	080050f7 	.word	0x080050f7
 8005058:	080050f7 	.word	0x080050f7
 800505c:	080050cf 	.word	0x080050cf
 8005060:	080050f7 	.word	0x080050f7
 8005064:	080050f7 	.word	0x080050f7
 8005068:	080050f7 	.word	0x080050f7
 800506c:	080050f7 	.word	0x080050f7
 8005070:	080050f7 	.word	0x080050f7
 8005074:	080050f7 	.word	0x080050f7
 8005078:	080050f7 	.word	0x080050f7
 800507c:	080050e3 	.word	0x080050e3
 8005080:	080050f7 	.word	0x080050f7
 8005084:	080050f7 	.word	0x080050f7
 8005088:	080050f7 	.word	0x080050f7
 800508c:	080050f7 	.word	0x080050f7
 8005090:	080050f7 	.word	0x080050f7
 8005094:	080050f7 	.word	0x080050f7
 8005098:	080050f7 	.word	0x080050f7
 800509c:	080050ff 	.word	0x080050ff
 80050a0:	080050f7 	.word	0x080050f7
 80050a4:	080050f7 	.word	0x080050f7
 80050a8:	080050f7 	.word	0x080050f7
 80050ac:	080050f7 	.word	0x080050f7
 80050b0:	080050f7 	.word	0x080050f7
 80050b4:	080050f7 	.word	0x080050f7
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050ff 	.word	0x080050ff
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4bb9      	ldr	r3, [pc, #740]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	4ab8      	ldr	r2, [pc, #736]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050cc:	e018      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050d2:	3308      	adds	r3, #8
 80050d4:	4618      	mov	r0, r3
 80050d6:	f002 f979 	bl	80073cc <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050e0:	e00e      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e6:	3330      	adds	r3, #48	@ 0x30
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 fa07 	bl	80074fc <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005108:	4ba7      	ldr	r3, [pc, #668]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800510a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800510e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800511a:	4aa3      	ldr	r2, [pc, #652]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800511c:	430b      	orrs	r3, r1
 800511e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005128:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800512c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513a:	2300      	movs	r3, #0
 800513c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800513e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d04e      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800514c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005154:	d02e      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515a:	d827      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800515c:	2bc0      	cmp	r3, #192	@ 0xc0
 800515e:	d02b      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005160:	2bc0      	cmp	r3, #192	@ 0xc0
 8005162:	d823      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	d017      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005168:	2b80      	cmp	r3, #128	@ 0x80
 800516a:	d81f      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d007      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005174:	e01a      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005176:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	4a8b      	ldr	r2, [pc, #556]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800517c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005180:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005182:	e01a      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005188:	3308      	adds	r3, #8
 800518a:	4618      	mov	r0, r3
 800518c:	f002 f91e 	bl	80073cc <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005196:	e010      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800519c:	3330      	adds	r3, #48	@ 0x30
 800519e:	4618      	mov	r0, r3
 80051a0:	f002 f9ac 	bl	80074fc <RCCEx_PLL3_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80051aa:	e006      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051b2:	e002      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80051b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80051c2:	4b79      	ldr	r3, [pc, #484]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80051c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c8:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80051cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051d4:	4974      	ldr	r1, [pc, #464]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	2300      	movs	r3, #0
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051fc:	460b      	mov	r3, r1
 80051fe:	4313      	orrs	r3, r2
 8005200:	d055      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005206:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800520a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800520e:	d031      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005210:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005214:	d82a      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521a:	d02d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005220:	d824      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005222:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005226:	d029      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005228:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800522c:	d81e      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005232:	d011      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005238:	d818      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800523e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005242:	d113      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005248:	3308      	adds	r3, #8
 800524a:	4618      	mov	r0, r3
 800524c:	f002 f8be 	bl	80073cc <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005256:	e014      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525c:	3330      	adds	r3, #48	@ 0x30
 800525e:	4618      	mov	r0, r3
 8005260:	f002 f94c 	bl	80074fc <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800528a:	4b47      	ldr	r3, [pc, #284]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800528c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005290:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005298:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800529c:	4942      	ldr	r1, [pc, #264]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	2100      	movs	r1, #0
 80052b8:	61b9      	str	r1, [r7, #24]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d03c      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d81b      	bhi.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005317 	.word	0x08005317
 80052e0:	080052ed 	.word	0x080052ed
 80052e4:	080052fb 	.word	0x080052fb
 80052e8:	08005317 	.word	0x08005317
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b2e      	ldr	r3, [pc, #184]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	4a2d      	ldr	r2, [pc, #180]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052f8:	e00e      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fe:	3308      	adds	r3, #8
 8005300:	4618      	mov	r0, r3
 8005302:	f002 f863 	bl	80073cc <RCCEx_PLL2_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800530c:	e004      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005318:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005322:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005326:	f023 0203 	bic.w	r2, r3, #3
 800532a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800532e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005332:	491d      	ldr	r1, [pc, #116]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005340:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	2100      	movs	r1, #0
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800535a:	460b      	mov	r3, r1
 800535c:	4313      	orrs	r3, r2
 800535e:	d03c      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800536c:	d00e      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800536e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005372:	d815      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d019      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537c:	d110      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005388:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800538a:	e010      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800538c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005390:	3308      	adds	r3, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f002 f81a 	bl	80073cc <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800539e:	e006      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053a6:	e002      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80053a8:	44020c00 	.word	0x44020c00
        break;
 80053ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80053b6:	4b3d      	ldr	r3, [pc, #244]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80053b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c8:	4938      	ldr	r1, [pc, #224]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80053d0:	e003      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	2100      	movs	r1, #0
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053f0:	460b      	mov	r3, r1
 80053f2:	4313      	orrs	r3, r2
 80053f4:	d038      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80053f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053fe:	2b30      	cmp	r3, #48	@ 0x30
 8005400:	d01b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005402:	2b30      	cmp	r3, #48	@ 0x30
 8005404:	d815      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005406:	2b10      	cmp	r3, #16
 8005408:	d002      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800540a:	2b20      	cmp	r3, #32
 800540c:	d007      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800540e:	e010      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b26      	ldr	r3, [pc, #152]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800541a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800541c:	e00e      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005422:	3330      	adds	r3, #48	@ 0x30
 8005424:	4618      	mov	r0, r3
 8005426:	f002 f869 	bl	80074fc <RCCEx_PLL3_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005430:	e004      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10d      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800544a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800544e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005452:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005456:	4915      	ldr	r1, [pc, #84]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005464:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	2100      	movs	r1, #0
 8005472:	6039      	str	r1, [r7, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d00c      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005484:	4b09      	ldr	r3, [pc, #36]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800548a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800548e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005492:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005496:	4905      	ldr	r1, [pc, #20]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800549e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	37e8      	adds	r7, #232	@ 0xe8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ac:	44020c00 	.word	0x44020c00

080054b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b08b      	sub	sp, #44	@ 0x2c
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80054b8:	4bad      	ldr	r3, [pc, #692]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80054c2:	4bab      	ldr	r3, [pc, #684]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80054cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80054d8:	4ba5      	ldr	r3, [pc, #660]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80054e2:	4ba3      	ldr	r3, [pc, #652]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	08db      	lsrs	r3, r3, #3
 80054e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8126 	beq.w	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d053      	beq.n	80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d86f      	bhi.n	80055f2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d003      	beq.n	8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d02b      	beq.n	8005576 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800551e:	e068      	b.n	80055f2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005520:	4b93      	ldr	r3, [pc, #588]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	08db      	lsrs	r3, r3, #3
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	4a92      	ldr	r2, [pc, #584]	@ (8005774 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005554:	ed97 6a04 	vldr	s12, [r7, #16]
 8005558:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005778 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800555c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005570:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005574:	e068      	b.n	8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005580:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800577c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	ed97 6a04 	vldr	s12, [r7, #16]
 8005596:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005778 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800559a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80055b2:	e049      	b.n	8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055be:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80055c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80055d4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005778 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80055d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80055f0:	e02a      	b.n	8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005774 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a04 	vldr	s12, [r7, #16]
 800562a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005778 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005646:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005648:	4b49      	ldr	r3, [pc, #292]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005654:	d121      	bne.n	800569a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005656:	4b46      	ldr	r3, [pc, #280]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d017      	beq.n	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005662:	4b43      	ldr	r3, [pc, #268]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	0a5b      	lsrs	r3, r3, #9
 8005668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005674:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005678:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800567c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005688:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ac:	d121      	bne.n	80056f2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80056ae:	4b30      	ldr	r3, [pc, #192]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d017      	beq.n	80056ea <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80056cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80056d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005704:	d121      	bne.n	800574a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005706:	4b1a      	ldr	r3, [pc, #104]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d017      	beq.n	8005742 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005712:	4b17      	ldr	r3, [pc, #92]	@ (8005770 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005716:	0e1b      	lsrs	r3, r3, #24
 8005718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005724:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005728:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800572c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005738:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005740:	e010      	b.n	8005764 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	e00c      	b.n	8005764 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	e008      	b.n	8005764 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	609a      	str	r2, [r3, #8]
}
 8005764:	bf00      	nop
 8005766:	372c      	adds	r7, #44	@ 0x2c
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	44020c00 	.word	0x44020c00
 8005774:	03d09000 	.word	0x03d09000
 8005778:	46000000 	.word	0x46000000
 800577c:	4a742400 	.word	0x4a742400
 8005780:	4bb71b00 	.word	0x4bb71b00

08005784 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005784:	b480      	push	{r7}
 8005786:	b08b      	sub	sp, #44	@ 0x2c
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800578c:	4bad      	ldr	r3, [pc, #692]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800578e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005794:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005796:	4bab      	ldr	r3, [pc, #684]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80057a0:	4ba8      	ldr	r3, [pc, #672]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057aa:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80057ac:	4ba5      	ldr	r3, [pc, #660]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80057b6:	4ba3      	ldr	r3, [pc, #652]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8126 	beq.w	8005a26 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d053      	beq.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d86f      	bhi.n	80058c6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d02b      	beq.n	800584a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80057f2:	e068      	b.n	80058c6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057f4:	4b93      	ldr	r3, [pc, #588]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	4a92      	ldr	r2, [pc, #584]	@ (8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005828:	ed97 6a04 	vldr	s12, [r7, #16]
 800582c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005844:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005848:	e068      	b.n	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005854:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a04 	vldr	s12, [r7, #16]
 800586a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005886:	e049      	b.n	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80058a8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80058ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80058c4:	e02a      	b.n	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80058fe:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800591a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800591c:	4b49      	ldr	r3, [pc, #292]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005928:	d121      	bne.n	800596e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800592a:	4b46      	ldr	r3, [pc, #280]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d017      	beq.n	8005966 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005936:	4b43      	ldr	r3, [pc, #268]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	0a5b      	lsrs	r3, r3, #9
 800593c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800594c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005950:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e006      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005974:	4b33      	ldr	r3, [pc, #204]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005980:	d121      	bne.n	80059c6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005982:	4b30      	ldr	r3, [pc, #192]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d017      	beq.n	80059be <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800598e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80059a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80059a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d8:	d121      	bne.n	8005a1e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80059da:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d017      	beq.n	8005a16 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059e6:	4b17      	ldr	r3, [pc, #92]	@ (8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	0e1b      	lsrs	r3, r3, #24
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80059f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005a00:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a14:	e010      	b.n	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	609a      	str	r2, [r3, #8]
}
 8005a1c:	e00c      	b.n	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
}
 8005a24:	e008      	b.n	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	372c      	adds	r7, #44	@ 0x2c
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	44020c00 	.word	0x44020c00
 8005a48:	03d09000 	.word	0x03d09000
 8005a4c:	46000000 	.word	0x46000000
 8005a50:	4a742400 	.word	0x4a742400
 8005a54:	4bb71b00 	.word	0x4bb71b00

08005a58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b08b      	sub	sp, #44	@ 0x2c
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005a60:	4bad      	ldr	r3, [pc, #692]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005a6a:	4bab      	ldr	r3, [pc, #684]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005a74:	4ba8      	ldr	r3, [pc, #672]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a7e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005a80:	4ba5      	ldr	r3, [pc, #660]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005a8a:	4ba3      	ldr	r3, [pc, #652]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8e:	08db      	lsrs	r3, r3, #3
 8005a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8126 	beq.w	8005cfa <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d053      	beq.n	8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d86f      	bhi.n	8005b9a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d02b      	beq.n	8005b1e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005ac6:	e068      	b.n	8005b9a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ac8:	4b93      	ldr	r3, [pc, #588]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	08db      	lsrs	r3, r3, #3
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	4a92      	ldr	r2, [pc, #584]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afc:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b00:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005b1c:	e068      	b.n	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b5a:	e049      	b.n	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b78:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b7c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b98:	e02a      	b.n	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8005baa:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bd2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005bee:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bf0:	4b49      	ldr	r3, [pc, #292]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005bfe:	4b46      	ldr	r3, [pc, #280]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c0a:	4b43      	ldr	r3, [pc, #268]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0e:	0a5b      	lsrs	r3, r3, #9
 8005c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005c1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c20:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005c24:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c30:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c48:	4b33      	ldr	r3, [pc, #204]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c54:	d121      	bne.n	8005c9a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005c56:	4b30      	ldr	r3, [pc, #192]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d017      	beq.n	8005c92 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c62:	4b2d      	ldr	r3, [pc, #180]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c78:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005c7c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c88:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cac:	d121      	bne.n	8005cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005cae:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d017      	beq.n	8005cea <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cba:	4b17      	ldr	r3, [pc, #92]	@ (8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	0e1b      	lsrs	r3, r3, #24
 8005cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005ccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005cd4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005ce8:	e010      	b.n	8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	609a      	str	r2, [r3, #8]
}
 8005cf0:	e00c      	b.n	8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	372c      	adds	r7, #44	@ 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	44020c00 	.word	0x44020c00
 8005d1c:	03d09000 	.word	0x03d09000
 8005d20:	46000000 	.word	0x46000000
 8005d24:	4a742400 	.word	0x4a742400
 8005d28:	4bb71b00 	.word	0x4bb71b00

08005d2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b08f      	sub	sp, #60	@ 0x3c
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d3a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005d3e:	4321      	orrs	r1, r4
 8005d40:	d150      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d42:	4b26      	ldr	r3, [pc, #152]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005d4e:	4b23      	ldr	r3, [pc, #140]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d108      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d62:	d104      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6a:	f001 bb20 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d7c:	d108      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d84:	d104      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005d86:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d8c:	f001 bb0f 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005d90:	4b12      	ldr	r3, [pc, #72]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9c:	d119      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da4:	d115      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db2:	d30a      	bcc.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005db4:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dbe:	4a08      	ldr	r2, [pc, #32]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005dc6:	f001 baf2 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005dce:	f001 baee 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	f001 baea 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005dda:	bf00      	nop
 8005ddc:	44020c00 	.word	0x44020c00
 8005de0:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de8:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005dec:	ea50 0104 	orrs.w	r1, r0, r4
 8005df0:	f000 8615 	beq.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df8:	2801      	cmp	r0, #1
 8005dfa:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8005dfe:	f081 82d3 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e06:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005e0a:	ea50 0104 	orrs.w	r1, r0, r4
 8005e0e:	f000 84d8 	beq.w	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e16:	2801      	cmp	r0, #1
 8005e18:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005e1c:	f081 82c4 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e24:	f1a1 0410 	sub.w	r4, r1, #16
 8005e28:	ea50 0104 	orrs.w	r1, r0, r4
 8005e2c:	f001 8288 	beq.w	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8005e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e34:	2801      	cmp	r0, #1
 8005e36:	f171 0110 	sbcs.w	r1, r1, #16
 8005e3a:	f081 82b5 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e42:	f1a1 0408 	sub.w	r4, r1, #8
 8005e46:	ea50 0104 	orrs.w	r1, r0, r4
 8005e4a:	f001 81fe 	beq.w	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e52:	2801      	cmp	r0, #1
 8005e54:	f171 0108 	sbcs.w	r1, r1, #8
 8005e58:	f081 82a6 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e60:	1f0c      	subs	r4, r1, #4
 8005e62:	ea50 0104 	orrs.w	r1, r0, r4
 8005e66:	f000 8753 	beq.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8005e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e6e:	2801      	cmp	r0, #1
 8005e70:	f171 0104 	sbcs.w	r1, r1, #4
 8005e74:	f081 8298 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7c:	1e8c      	subs	r4, r1, #2
 8005e7e:	ea50 0104 	orrs.w	r1, r0, r4
 8005e82:	f001 8173 	beq.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8005e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e8a:	2801      	cmp	r0, #1
 8005e8c:	f171 0102 	sbcs.w	r1, r1, #2
 8005e90:	f081 828a 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e98:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005e9c:	4321      	orrs	r1, r4
 8005e9e:	f001 80fe 	beq.w	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea6:	4ccb      	ldr	r4, [pc, #812]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	f171 0100 	sbcs.w	r1, r1, #0
 8005eae:	f081 827b 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eb6:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005eba:	4321      	orrs	r1, r4
 8005ebc:	f001 8076 	beq.w	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8005ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ec4:	4cc4      	ldr	r4, [pc, #784]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005ec6:	42a0      	cmp	r0, r4
 8005ec8:	f171 0100 	sbcs.w	r1, r1, #0
 8005ecc:	f081 826c 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ed4:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005ed8:	4321      	orrs	r1, r4
 8005eda:	f000 87b5 	beq.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8005ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee2:	4cbe      	ldr	r4, [pc, #760]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005ee4:	42a0      	cmp	r0, r4
 8005ee6:	f171 0100 	sbcs.w	r1, r1, #0
 8005eea:	f081 825d 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ef2:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005ef6:	4321      	orrs	r1, r4
 8005ef8:	f000 8738 	beq.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f00:	4cb7      	ldr	r4, [pc, #732]	@ (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8005f02:	42a0      	cmp	r0, r4
 8005f04:	f171 0100 	sbcs.w	r1, r1, #0
 8005f08:	f081 824e 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f10:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005f14:	4321      	orrs	r1, r4
 8005f16:	f001 81cd 	beq.w	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f1e:	4cb1      	ldr	r4, [pc, #708]	@ (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	f171 0100 	sbcs.w	r1, r1, #0
 8005f26:	f081 823f 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005f32:	4321      	orrs	r1, r4
 8005f34:	f000 80d9 	beq.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3c:	4caa      	ldr	r4, [pc, #680]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8005f3e:	42a0      	cmp	r0, r4
 8005f40:	f171 0100 	sbcs.w	r1, r1, #0
 8005f44:	f081 8230 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f4c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005f50:	4321      	orrs	r1, r4
 8005f52:	f000 83da 	beq.w	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f5a:	4ca4      	ldr	r4, [pc, #656]	@ (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8005f5c:	42a0      	cmp	r0, r4
 8005f5e:	f171 0100 	sbcs.w	r1, r1, #0
 8005f62:	f081 8221 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f6a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005f6e:	4321      	orrs	r1, r4
 8005f70:	f000 8627 	beq.w	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8005f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f78:	4c9d      	ldr	r4, [pc, #628]	@ (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8005f7a:	42a0      	cmp	r0, r4
 8005f7c:	f171 0100 	sbcs.w	r1, r1, #0
 8005f80:	f081 8212 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f88:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005f8c:	4321      	orrs	r1, r4
 8005f8e:	f000 857a 	beq.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f96:	4c97      	ldr	r4, [pc, #604]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	f171 0100 	sbcs.w	r1, r1, #0
 8005f9e:	f081 8203 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005faa:	4321      	orrs	r1, r4
 8005fac:	f000 84fb 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fb4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005fb8:	f171 0100 	sbcs.w	r1, r1, #0
 8005fbc:	f081 81f4 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fc4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005fc8:	4321      	orrs	r1, r4
 8005fca:	f000 84a9 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fd2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005fd6:	42a0      	cmp	r0, r4
 8005fd8:	f171 0100 	sbcs.w	r1, r1, #0
 8005fdc:	f081 81e4 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005fe8:	4321      	orrs	r1, r4
 8005fea:	f000 8456 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8005fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ff2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005ff6:	42a0      	cmp	r0, r4
 8005ff8:	f171 0100 	sbcs.w	r1, r1, #0
 8005ffc:	f081 81d4 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006004:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006008:	4321      	orrs	r1, r4
 800600a:	f000 8403 	beq.w	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800600e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006012:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006016:	42a0      	cmp	r0, r4
 8006018:	f171 0100 	sbcs.w	r1, r1, #0
 800601c:	f081 81c4 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006024:	2821      	cmp	r0, #33	@ 0x21
 8006026:	f171 0100 	sbcs.w	r1, r1, #0
 800602a:	d255      	bcs.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800602c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006030:	4301      	orrs	r1, r0
 8006032:	f001 81b9 	beq.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603a:	1e42      	subs	r2, r0, #1
 800603c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006040:	2a20      	cmp	r2, #32
 8006042:	f173 0100 	sbcs.w	r1, r3, #0
 8006046:	f081 81af 	bcs.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800604a:	2a1f      	cmp	r2, #31
 800604c:	f201 81ac 	bhi.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006050:	a101      	add	r1, pc, #4	@ (adr r1, 8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006052:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006056:	bf00      	nop
 8006058:	0800612f 	.word	0x0800612f
 800605c:	0800622d 	.word	0x0800622d
 8006060:	080073a9 	.word	0x080073a9
 8006064:	080062ed 	.word	0x080062ed
 8006068:	080073a9 	.word	0x080073a9
 800606c:	080073a9 	.word	0x080073a9
 8006070:	080073a9 	.word	0x080073a9
 8006074:	080063bd 	.word	0x080063bd
 8006078:	080073a9 	.word	0x080073a9
 800607c:	080073a9 	.word	0x080073a9
 8006080:	080073a9 	.word	0x080073a9
 8006084:	080073a9 	.word	0x080073a9
 8006088:	080073a9 	.word	0x080073a9
 800608c:	080073a9 	.word	0x080073a9
 8006090:	080073a9 	.word	0x080073a9
 8006094:	080064a1 	.word	0x080064a1
 8006098:	080073a9 	.word	0x080073a9
 800609c:	080073a9 	.word	0x080073a9
 80060a0:	080073a9 	.word	0x080073a9
 80060a4:	080073a9 	.word	0x080073a9
 80060a8:	080073a9 	.word	0x080073a9
 80060ac:	080073a9 	.word	0x080073a9
 80060b0:	080073a9 	.word	0x080073a9
 80060b4:	080073a9 	.word	0x080073a9
 80060b8:	080073a9 	.word	0x080073a9
 80060bc:	080073a9 	.word	0x080073a9
 80060c0:	080073a9 	.word	0x080073a9
 80060c4:	080073a9 	.word	0x080073a9
 80060c8:	080073a9 	.word	0x080073a9
 80060cc:	080073a9 	.word	0x080073a9
 80060d0:	080073a9 	.word	0x080073a9
 80060d4:	08006577 	.word	0x08006577
 80060d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060dc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80060e0:	430b      	orrs	r3, r1
 80060e2:	f000 82b3 	beq.w	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80060e6:	f001 b95f 	b.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80060ea:	4b43      	ldr	r3, [pc, #268]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80060ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fc:	f107 0320 	add.w	r3, r7, #32
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff f9d5 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800610a:	f001 b950 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d108      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fb33 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006122:	f001 b944 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800612a:	f001 b940 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800612e:	4b32      	ldr	r3, [pc, #200]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fd ffca 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 8006144:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006146:	f001 b932 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800614a:	4b2b      	ldr	r3, [pc, #172]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006156:	d10a      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2b01      	cmp	r3, #1
 800615c:	d107      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fb0e 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	637b      	str	r3, [r7, #52]	@ 0x34
 800616c:	e05c      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800616e:	4b22      	ldr	r3, [pc, #136]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800617a:	d10a      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	2b02      	cmp	r3, #2
 8006180:	d107      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fc66 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	e04a      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006192:	4b19      	ldr	r3, [pc, #100]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d10c      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d109      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061a4:	4b14      	ldr	r3, [pc, #80]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b6:	e037      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80061b8:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c4:	d11e      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d11b      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80061cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d0:	e02a      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80061d2:	bf00      	nop
 80061d4:	40000001 	.word	0x40000001
 80061d8:	20000001 	.word	0x20000001
 80061dc:	10000001 	.word	0x10000001
 80061e0:	08000001 	.word	0x08000001
 80061e4:	04000001 	.word	0x04000001
 80061e8:	00400001 	.word	0x00400001
 80061ec:	00200001 	.word	0x00200001
 80061f0:	00040001 	.word	0x00040001
 80061f4:	00020001 	.word	0x00020001
 80061f8:	44020c00 	.word	0x44020c00
 80061fc:	03d09000 	.word	0x03d09000
 8006200:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006204:	4ba3      	ldr	r3, [pc, #652]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d106      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	2b05      	cmp	r3, #5
 8006216:	d103      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
 800621e:	e003      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006224:	f001 b8c3 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006228:	f001 b8c1 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800622c:	4b99      	ldr	r3, [pc, #612]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800622e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006236:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800623e:	f7fd ff35 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8006242:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006244:	f001 b8b3 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006248:	4b92      	ldr	r3, [pc, #584]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006254:	d10a      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	2b08      	cmp	r3, #8
 800625a:	d107      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fa8f 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	637b      	str	r3, [r7, #52]	@ 0x34
 800626a:	e03d      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2b10      	cmp	r3, #16
 8006270:	d108      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fbee 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006280:	f001 b895 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006284:	4b83      	ldr	r3, [pc, #524]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d10c      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	2b18      	cmp	r3, #24
 8006294:	d109      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006296:	4b7f      	ldr	r3, [pc, #508]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	08db      	lsrs	r3, r3, #3
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	4a7d      	ldr	r2, [pc, #500]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80062a2:	fa22 f303 	lsr.w	r3, r2, r3
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a8:	e01e      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80062aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b6:	d105      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d102      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80062be:	4b77      	ldr	r3, [pc, #476]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c2:	e011      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062c4:	4b73      	ldr	r3, [pc, #460]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d106      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	2b28      	cmp	r3, #40	@ 0x28
 80062d6:	d103      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80062d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062de:	e003      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e4:	f001 b863 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80062e8:	f001 b861 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062ec:	4b69      	ldr	r3, [pc, #420]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d104      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fd fed5 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8006302:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006304:	f001 b853 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006308:	4b62      	ldr	r3, [pc, #392]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006314:	d10a      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fa2f 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
 800632a:	e045      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006338:	d10a      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d107      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fb87 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
 800634e:	e033      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006350:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b02      	cmp	r3, #2
 800635a:	d10c      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006360:	d109      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006362:	4b4c      	ldr	r3, [pc, #304]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	08db      	lsrs	r3, r3, #3
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	4a4a      	ldr	r2, [pc, #296]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800636e:	fa22 f303 	lsr.w	r3, r2, r3
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	e020      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800637e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006382:	d106      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638a:	d102      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 800638c:	4b43      	ldr	r3, [pc, #268]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006390:	e012      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006392:	4b40      	ldr	r3, [pc, #256]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b02      	cmp	r3, #2
 800639e:	d107      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063a6:	d103      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80063a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b4:	f000 bffb 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80063b8:	f000 bff9 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063bc:	4b35      	ldr	r3, [pc, #212]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063c2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80063c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063ce:	f7fd fe6d 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80063d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80063d4:	f000 bfeb 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80063d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063e4:	d10b      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ec:	d107      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff f9c6 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fc:	e047      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80063fe:	4b25      	ldr	r3, [pc, #148]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640a:	d10b      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fb1d 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
 8006422:	e034      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006424:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d10d      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006436:	d109      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	08db      	lsrs	r3, r3, #3
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	4a15      	ldr	r2, [pc, #84]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
 800644a:	e020      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800644c:	4b11      	ldr	r3, [pc, #68]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006458:	d106      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006460:	d102      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8006462:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
 8006466:	e012      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006468:	4b0a      	ldr	r3, [pc, #40]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800646a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800647c:	d103      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
 8006484:	e003      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800648a:	f000 bf90 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800648e:	f000 bf8e 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006492:	bf00      	nop
 8006494:	44020c00 	.word	0x44020c00
 8006498:	03d09000 	.word	0x03d09000
 800649c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064a0:	4ba5      	ldr	r3, [pc, #660]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fd fdfb 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80064b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80064b8:	f000 bf79 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80064bc:	4b9e      	ldr	r3, [pc, #632]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c8:	d10b      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d0:	d107      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d2:	f107 0314 	add.w	r3, r7, #20
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff f954 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e0:	e047      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80064e2:	4b95      	ldr	r3, [pc, #596]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ee:	d10b      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff faab 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
 8006506:	e034      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006508:	4b8b      	ldr	r3, [pc, #556]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800651a:	d109      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800651c:	4b86      	ldr	r3, [pc, #536]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	4a85      	ldr	r2, [pc, #532]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
 800652e:	e020      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006530:	4b81      	ldr	r3, [pc, #516]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653c:	d106      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006544:	d102      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006546:	4b7e      	ldr	r3, [pc, #504]	@ (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006548:	637b      	str	r3, [r7, #52]	@ 0x34
 800654a:	e012      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800654c:	4b7a      	ldr	r3, [pc, #488]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800654e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d107      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006560:	d103      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800656e:	f000 bf1e 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006572:	f000 bf1c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006576:	4b70      	ldr	r3, [pc, #448]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800657c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fd fd90 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 800658c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800658e:	f000 bf0e 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006592:	4b69      	ldr	r3, [pc, #420]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800659a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800659e:	d10b      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a6:	d107      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f8e9 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b6:	e047      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80065b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c4:	d10b      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff fa40 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
 80065dc:	e034      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80065de:	4b56      	ldr	r3, [pc, #344]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d10d      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80065f0:	d109      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065f2:	4b51      	ldr	r3, [pc, #324]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	08db      	lsrs	r3, r3, #3
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	4a4f      	ldr	r2, [pc, #316]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	e020      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006606:	4b4c      	ldr	r3, [pc, #304]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800660e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006612:	d106      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661a:	d102      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 800661c:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006620:	e012      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006622:	4b45      	ldr	r3, [pc, #276]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d107      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006636:	d103      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
 800663e:	e003      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006644:	f000 beb3 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006648:	f000 beb1 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800664c:	4b3a      	ldr	r3, [pc, #232]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800664e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006652:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006656:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800665e:	f7fd fd51 	bl	8004104 <HAL_RCC_GetPCLK3Freq>
 8006662:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006664:	f000 bea3 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800666e:	d108      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff f885 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800667e:	f000 be96 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006688:	d108      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f9e2 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006698:	f000 be89 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800669c:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066ae:	d109      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066b0:	4b21      	ldr	r3, [pc, #132]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a20      	ldr	r2, [pc, #128]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c2:	e020      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80066c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d0:	d106      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066d8:	d102      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	e012      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066e0:	4b15      	ldr	r3, [pc, #84]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80066f4:	d103      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006702:	f000 be54 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006706:	f000 be52 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800670c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800671c:	f7fd fcaa 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8006720:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006722:	f000 be44 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10b      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 800672c:	f7fd fb76 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8006730:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006732:	f000 be3c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006736:	bf00      	nop
 8006738:	44020c00 	.word	0x44020c00
 800673c:	03d09000 	.word	0x03d09000
 8006740:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	2b02      	cmp	r3, #2
 8006748:	d108      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff f818 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006758:	f000 be29 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800675c:	4b9f      	ldr	r3, [pc, #636]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006768:	d105      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2b03      	cmp	r3, #3
 800676e:	d102      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006770:	4b9b      	ldr	r3, [pc, #620]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
 8006774:	e023      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006776:	4b99      	ldr	r3, [pc, #612]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d10c      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	2b04      	cmp	r3, #4
 8006786:	d109      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006788:	4b94      	ldr	r3, [pc, #592]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	4a94      	ldr	r2, [pc, #592]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
 800679a:	e010      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800679c:	4b8f      	ldr	r3, [pc, #572]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a8:	d105      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80067b0:	4b8d      	ldr	r3, [pc, #564]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b4:	e003      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ba:	f000 bdf8 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067be:	f000 bdf6 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80067c2:	4b86      	ldr	r3, [pc, #536]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80067ce:	4b83      	ldr	r3, [pc, #524]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d106      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e8:	e012      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80067ea:	4b7c      	ldr	r3, [pc, #496]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067f8:	d106      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d103      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006800:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
 8006806:	e003      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800680c:	f000 bdcf 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006810:	f000 bdcd 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006814:	4b71      	ldr	r3, [pc, #452]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800681a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800681e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006826:	f7fd fc41 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 800682a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800682c:	f000 bdbf 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006836:	d108      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006838:	f107 0308 	add.w	r3, r7, #8
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff f90b 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006846:	f000 bdb2 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800684a:	4b64      	ldr	r3, [pc, #400]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d10d      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800685c:	d109      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800685e:	4b5f      	ldr	r3, [pc, #380]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	4a5e      	ldr	r2, [pc, #376]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800686a:	fa22 f303 	lsr.w	r3, r2, r3
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006870:	e011      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006872:	4b5a      	ldr	r3, [pc, #360]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800687a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687e:	d106      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006886:	d102      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006888:	4b57      	ldr	r3, [pc, #348]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006892:	f000 bd8c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006896:	f000 bd8a 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800689a:	4b50      	ldr	r3, [pc, #320]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800689c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80068a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7fd fbfe 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80068b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80068b2:	f000 bd7c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068bc:	d108      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff f8c8 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068cc:	f000 bd6f 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80068d0:	4b42      	ldr	r3, [pc, #264]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d10d      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068e2:	d109      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e4:	4b3d      	ldr	r3, [pc, #244]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	08db      	lsrs	r3, r3, #3
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	4a3d      	ldr	r2, [pc, #244]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	e011      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80068f8:	4b38      	ldr	r3, [pc, #224]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006904:	d106      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800690c:	d102      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800690e:	4b36      	ldr	r3, [pc, #216]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
 8006912:	e003      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006918:	f000 bd49 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800691c:	f000 bd47 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006920:	4b2e      	ldr	r3, [pc, #184]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006926:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006932:	f7fd fbe7 	bl	8004104 <HAL_RCC_GetPCLK3Freq>
 8006936:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006938:	f000 bd39 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006942:	d108      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006944:	f107 0308 	add.w	r3, r7, #8
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff f885 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006952:	f000 bd2c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006956:	4b21      	ldr	r3, [pc, #132]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b02      	cmp	r3, #2
 8006960:	d10d      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696a:	4b1c      	ldr	r3, [pc, #112]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a1b      	ldr	r2, [pc, #108]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
 800697c:	e011      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800697e:	4b17      	ldr	r3, [pc, #92]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006994:	4b14      	ldr	r3, [pc, #80]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
 8006998:	e003      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800699e:	f000 bd06 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069a2:	f000 bd04 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80069a6:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ac:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fd fb78 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80069bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069be:	f000 bcf6 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069c8:	d110      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ca:	f107 0308 	add.w	r3, r7, #8
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff f842 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d8:	f000 bce9 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069dc:	44020c00 	.word	0x44020c00
 80069e0:	016e3600 	.word	0x016e3600
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80069ec:	4ba4      	ldr	r3, [pc, #656]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d10e      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069fe:	d10a      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a00:	4b9f      	ldr	r3, [pc, #636]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	4a9e      	ldr	r2, [pc, #632]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a12:	f000 bccc 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1a:	f000 bcc8 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006a1e:	4b98      	ldr	r3, [pc, #608]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a24:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a28:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a30:	f7fd fb68 	bl	8004104 <HAL_RCC_GetPCLK3Freq>
 8006a34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a36:	f000 bcba 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a40:	d108      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff f806 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a50:	f000 bcad 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a54:	4b8a      	ldr	r3, [pc, #552]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d10e      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a66:	d10a      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a68:	4b85      	ldr	r3, [pc, #532]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	08db      	lsrs	r3, r3, #3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	4a84      	ldr	r2, [pc, #528]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7a:	f000 bc98 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a82:	f000 bc94 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a86:	4b7e      	ldr	r3, [pc, #504]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a98:	d056      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006aa0:	f200 808b 	bhi.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aaa:	d03e      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab2:	f200 8082 	bhi.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006abc:	d027      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac4:	d879      	bhi.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006acc:	d017      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad4:	d871      	bhi.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae2:	d004      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006ae4:	e069      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ae6:	f7fd fb0d 	bl	8004104 <HAL_RCC_GetPCLK3Freq>
 8006aea:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006aec:	e068      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fe46 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006afc:	e060      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe ffa8 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b0c:	e058      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d103      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006b1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b22:	e04d      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b28:	e04a      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b2a:	4b55      	ldr	r3, [pc, #340]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b38:	d103      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006b3a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b40:	e03e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b46:	e03b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b48:	4b4d      	ldr	r3, [pc, #308]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b4e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b54:	4b4a      	ldr	r3, [pc, #296]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d10c      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b66:	4b46      	ldr	r3, [pc, #280]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	4a44      	ldr	r2, [pc, #272]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006b72:	fa22 f303 	lsr.w	r3, r2, r3
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b78:	e01e      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b7a:	4b41      	ldr	r3, [pc, #260]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d102      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b90:	4b3d      	ldr	r3, [pc, #244]	@ (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	e010      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b96:	4b3a      	ldr	r3, [pc, #232]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006baa:	d102      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bac:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bbe:	bf00      	nop
          }
        }
        break;
 8006bc0:	e3f5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bc8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bd4:	d05f      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bdc:	f200 8094 	bhi.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006be6:	d03f      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bee:	f200 808b 	bhi.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bf8:	d028      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c00:	f200 8082 	bhi.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0a:	d017      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c12:	d879      	bhi.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c20:	d004      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006c22:	e071      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fd fa42 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8006c28:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006c2a:	e070      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fda7 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c3a:	e068      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe ff09 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c4a:	e060      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d103      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c60:	e055      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c66:	e052      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c76:	d10b      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006c78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c7e:	e046      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006c80:	44020c00 	.word	0x44020c00
 8006c84:	03d09000 	.word	0x03d09000
 8006c88:	003d0900 	.word	0x003d0900
 8006c8c:	016e3600 	.word	0x016e3600
              frequency = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c94:	e03b      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c96:	4bae      	ldr	r3, [pc, #696]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c9c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ca2:	4bab      	ldr	r3, [pc, #684]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cb4:	4ba6      	ldr	r3, [pc, #664]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	08db      	lsrs	r3, r3, #3
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	4aa5      	ldr	r2, [pc, #660]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	e01e      	b.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd4:	d106      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cdc:	d102      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cde:	4b9e      	ldr	r3, [pc, #632]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce2:	e010      	b.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf0:	d106      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf8:	d102      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006cfa:	4b98      	ldr	r3, [pc, #608]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d04:	e003      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006d06:	e002      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d0c:	bf00      	nop
          }
        }
        break;
 8006d0e:	e34e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d10:	4b8f      	ldr	r3, [pc, #572]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d28:	d105      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006d30:	4b8a      	ldr	r3, [pc, #552]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006d32:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006d34:	e33b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d3e:	f107 0320 	add.w	r3, r7, #32
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fbb4 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4c:	e32f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d54:	d107      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fd12 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d64:	e323      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d6a:	e320      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d6c:	4b78      	ldr	r3, [pc, #480]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d860      	bhi.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d99 	.word	0x08006d99
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006dcf 	.word	0x08006dcf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d98:	f107 0320 	add.w	r3, r7, #32
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fb87 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006da6:	e04e      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fe fce9 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006db6:	e046      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db8:	f107 0308 	add.w	r3, r7, #8
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fe4b 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dc6:	e03e      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006dc8:	4b65      	ldr	r3, [pc, #404]	@ (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dcc:	e03b      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dce:	4b60      	ldr	r3, [pc, #384]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dda:	4b5d      	ldr	r3, [pc, #372]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dec:	4b58      	ldr	r3, [pc, #352]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	08db      	lsrs	r3, r3, #3
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	4a57      	ldr	r2, [pc, #348]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	e01e      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e00:	4b53      	ldr	r3, [pc, #332]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e14:	d102      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e16:	4b50      	ldr	r3, [pc, #320]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	e010      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e28:	d106      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e32:	4b4a      	ldr	r3, [pc, #296]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	e002      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e3c:	e003      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006e3e:	e002      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e44:	bf00      	nop
          }
        }
        break;
 8006e46:	e2b2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e48:	4b41      	ldr	r3, [pc, #260]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	f200 80a4 	bhi.w	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006fa5 	.word	0x08006fa5
 8006e6c:	08006fa5 	.word	0x08006fa5
 8006e70:	08006fa5 	.word	0x08006fa5
 8006e74:	08006fa5 	.word	0x08006fa5
 8006e78:	08006fa5 	.word	0x08006fa5
 8006e7c:	08006fa5 	.word	0x08006fa5
 8006e80:	08006fa5 	.word	0x08006fa5
 8006e84:	08006ef9 	.word	0x08006ef9
 8006e88:	08006fa5 	.word	0x08006fa5
 8006e8c:	08006fa5 	.word	0x08006fa5
 8006e90:	08006fa5 	.word	0x08006fa5
 8006e94:	08006fa5 	.word	0x08006fa5
 8006e98:	08006fa5 	.word	0x08006fa5
 8006e9c:	08006fa5 	.word	0x08006fa5
 8006ea0:	08006fa5 	.word	0x08006fa5
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006fa5 	.word	0x08006fa5
 8006eac:	08006fa5 	.word	0x08006fa5
 8006eb0:	08006fa5 	.word	0x08006fa5
 8006eb4:	08006fa5 	.word	0x08006fa5
 8006eb8:	08006fa5 	.word	0x08006fa5
 8006ebc:	08006fa5 	.word	0x08006fa5
 8006ec0:	08006fa5 	.word	0x08006fa5
 8006ec4:	08006f19 	.word	0x08006f19
 8006ec8:	08006fa5 	.word	0x08006fa5
 8006ecc:	08006fa5 	.word	0x08006fa5
 8006ed0:	08006fa5 	.word	0x08006fa5
 8006ed4:	08006fa5 	.word	0x08006fa5
 8006ed8:	08006fa5 	.word	0x08006fa5
 8006edc:	08006fa5 	.word	0x08006fa5
 8006ee0:	08006fa5 	.word	0x08006fa5
 8006ee4:	08006f1f 	.word	0x08006f1f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ee8:	f107 0320 	add.w	r3, r7, #32
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fadf 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ef6:	e058      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fc41 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f06:	e050      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f08:	f107 0308 	add.w	r3, r7, #8
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fda3 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f16:	e048      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f18:	4b11      	ldr	r3, [pc, #68]	@ (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f1c:	e045      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f24:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f2a:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d116      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d113      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f3c:	4b04      	ldr	r3, [pc, #16]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	08db      	lsrs	r3, r3, #3
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	4a03      	ldr	r2, [pc, #12]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4e:	e028      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006f50:	44020c00 	.word	0x44020c00
 8006f54:	03d09000 	.word	0x03d09000
 8006f58:	003d0900 	.word	0x003d0900
 8006f5c:	016e3600 	.word	0x016e3600
 8006f60:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f64:	4b95      	ldr	r3, [pc, #596]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f70:	d106      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f78:	d102      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f7a:	4b91      	ldr	r3, [pc, #580]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7e:	e010      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f80:	4b8e      	ldr	r3, [pc, #568]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8006f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f96:	4b8b      	ldr	r3, [pc, #556]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8006fa2:	e002      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fa8:	bf00      	nop
          }
        }
        break;
 8006faa:	e200      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006fac:	4b83      	ldr	r3, [pc, #524]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fb2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fbe:	d031      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc6:	d866      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fcc:	d027      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fd2:	d860      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	2b80      	cmp	r3, #128	@ 0x80
 8006fd8:	d019      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	2b80      	cmp	r3, #128	@ 0x80
 8006fde:	d85a      	bhi.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	2b40      	cmp	r3, #64	@ 0x40
 8006fea:	d008      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006fec:	e053      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fee:	f107 0320 	add.w	r3, r7, #32
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fa5c 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ffc:	e04e      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ffe:	f107 0314 	add.w	r3, r7, #20
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fbbe 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800700c:	e046      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe fd20 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800701c:	e03e      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800701e:	4b6a      	ldr	r3, [pc, #424]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007022:	e03b      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007024:	4b65      	ldr	r3, [pc, #404]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800702a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007030:	4b62      	ldr	r3, [pc, #392]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d10c      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007042:	4b5e      	ldr	r3, [pc, #376]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	08db      	lsrs	r3, r3, #3
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	4a5f      	ldr	r2, [pc, #380]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800704e:	fa22 f303 	lsr.w	r3, r2, r3
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
 8007054:	e01e      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007056:	4b59      	ldr	r3, [pc, #356]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800705e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007062:	d106      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706a:	d102      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800706c:	4b54      	ldr	r3, [pc, #336]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007070:	e010      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007072:	4b52      	ldr	r3, [pc, #328]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800707e:	d106      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007086:	d102      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007088:	4b4e      	ldr	r3, [pc, #312]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
 800708c:	e002      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007092:	e003      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007094:	e002      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800709a:	bf00      	nop
          }
        }
        break;
 800709c:	e187      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800709e:	4b47      	ldr	r3, [pc, #284]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070a4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80070a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80070b0:	f7fd f812 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 80070b4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80070b6:	e17a      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80070b8:	4b40      	ldr	r3, [pc, #256]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070c4:	d10b      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070cc:	d107      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ce:	f107 0314 	add.w	r3, r7, #20
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fb56 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
 80070dc:	e045      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80070de:	4b37      	ldr	r3, [pc, #220]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ea:	d10b      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f2:	d107      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fcad 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
 8007102:	e032      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007104:	4b2d      	ldr	r3, [pc, #180]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d10d      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007116:	d109      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007118:	4b28      	ldr	r3, [pc, #160]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a2a      	ldr	r2, [pc, #168]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
 800712a:	e01e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800712c:	4b23      	ldr	r3, [pc, #140]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007138:	d106      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007140:	d102      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8007142:	4b1f      	ldr	r3, [pc, #124]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	e010      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007148:	4b1c      	ldr	r3, [pc, #112]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007154:	d106      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800715c:	d102      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800715e:	4b19      	ldr	r3, [pc, #100]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
 8007162:	e002      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007168:	e121      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800716a:	e120      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800716c:	4b13      	ldr	r3, [pc, #76]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800716e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	633b      	str	r3, [r7, #48]	@ 0x30
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	2b03      	cmp	r3, #3
 800717c:	d861      	bhi.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800717e:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007195 	.word	0x08007195
 8007188:	0800719d 	.word	0x0800719d
 800718c:	080071ad 	.word	0x080071ad
 8007190:	080071d1 	.word	0x080071d1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007194:	f7fc ff6e 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8007198:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800719a:	e055      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800719c:	f107 0320 	add.w	r3, r7, #32
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe f985 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071aa:	e04d      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fae7 	bl	8005784 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071ba:	e045      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80071bc:	44020c00 	.word	0x44020c00
 80071c0:	003d0900 	.word	0x003d0900
 80071c4:	016e3600 	.word	0x016e3600
 80071c8:	00bb8000 	.word	0x00bb8000
 80071cc:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071d0:	4b79      	ldr	r3, [pc, #484]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80071d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071da:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071dc:	4b76      	ldr	r3, [pc, #472]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d10c      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071ee:	4b72      	ldr	r3, [pc, #456]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	08db      	lsrs	r3, r3, #3
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	4a70      	ldr	r2, [pc, #448]	@ (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80071fa:	fa22 f303 	lsr.w	r3, r2, r3
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007200:	e01e      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007202:	4b6d      	ldr	r3, [pc, #436]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800720a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720e:	d106      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007216:	d102      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007218:	4b69      	ldr	r3, [pc, #420]	@ (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800721a:	637b      	str	r3, [r7, #52]	@ 0x34
 800721c:	e010      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800721e:	4b66      	ldr	r3, [pc, #408]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722a:	d106      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007232:	d102      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007234:	4b63      	ldr	r3, [pc, #396]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
 8007238:	e002      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800723e:	e003      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007240:	e002      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007246:	bf00      	nop
          }
        }
        break;
 8007248:	e0b1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800724a:	4b5b      	ldr	r3, [pc, #364]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800724c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007250:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007256:	4b58      	ldr	r3, [pc, #352]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d106      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	e01f      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007272:	4b51      	ldr	r3, [pc, #324]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800727c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007280:	d106      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2b40      	cmp	r3, #64	@ 0x40
 8007286:	d103      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007288:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
 800728e:	e010      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007290:	4b49      	ldr	r3, [pc, #292]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800729c:	d106      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	2b80      	cmp	r3, #128	@ 0x80
 80072a2:	d103      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80072a4:	f248 0312 	movw	r3, #32786	@ 0x8012
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072aa:	e002      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80072b0:	e07d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072b2:	e07c      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072b4:	4b40      	ldr	r3, [pc, #256]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80072c0:	4b3d      	ldr	r3, [pc, #244]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072cc:	d105      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80072d4:	4b3c      	ldr	r3, [pc, #240]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d8:	e031      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80072da:	4b37      	ldr	r3, [pc, #220]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e6:	d10a      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d107      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ee:	f107 0320 	add.w	r3, r7, #32
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe f8dc 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fc:	e01f      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80072fe:	4b2e      	ldr	r3, [pc, #184]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d106      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	2b20      	cmp	r3, #32
 8007310:	d103      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8007312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
 8007318:	e011      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800731a:	4b27      	ldr	r3, [pc, #156]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800731c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007328:	d106      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d103      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8007330:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
 8007336:	e002      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800733c:	e037      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800733e:	e036      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007340:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007346:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	2b10      	cmp	r3, #16
 8007350:	d107      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007352:	f107 0320 	add.w	r3, r7, #32
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe f8aa 	bl	80054b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007360:	e025      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007362:	4b15      	ldr	r3, [pc, #84]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736e:	d10a      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	2b20      	cmp	r3, #32
 8007374:	d107      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fb6c 	bl	8005a58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
 8007384:	e00f      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007386:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800738e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b30      	cmp	r3, #48	@ 0x30
 8007398:	d102      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	e002      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80073a4:	e003      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80073a6:	e002      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ac:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80073ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	373c      	adds	r7, #60	@ 0x3c
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd90      	pop	{r4, r7, pc}
 80073b8:	44020c00 	.word	0x44020c00
 80073bc:	03d09000 	.word	0x03d09000
 80073c0:	003d0900 	.word	0x003d0900
 80073c4:	016e3600 	.word	0x016e3600
 80073c8:	02dc6c00 	.word	0x02dc6c00

080073cc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80073d4:	4b48      	ldr	r3, [pc, #288]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80073da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073e0:	f7fb f9a4 	bl	800272c <HAL_GetTick>
 80073e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073e6:	e008      	b.n	80073fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073e8:	f7fb f9a0 	bl	800272c <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e07a      	b.n	80074f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073fa:	4b3f      	ldr	r3, [pc, #252]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007406:	4b3c      	ldr	r3, [pc, #240]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6852      	ldr	r2, [r2, #4]
 800741a:	0212      	lsls	r2, r2, #8
 800741c:	430a      	orrs	r2, r1
 800741e:	4936      	ldr	r1, [pc, #216]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007420:	4313      	orrs	r3, r2
 8007422:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	3b01      	subs	r3, #1
 8007434:	025b      	lsls	r3, r3, #9
 8007436:	b29b      	uxth	r3, r3
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	3b01      	subs	r3, #1
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	3b01      	subs	r3, #1
 800744e:	061b      	lsls	r3, r3, #24
 8007450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007454:	4928      	ldr	r1, [pc, #160]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800745a:	4b27      	ldr	r3, [pc, #156]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	f023 020c 	bic.w	r2, r3, #12
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	4924      	ldr	r1, [pc, #144]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007468:	4313      	orrs	r3, r2
 800746a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800746c:	4b22      	ldr	r3, [pc, #136]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	f023 0220 	bic.w	r2, r3, #32
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	491f      	ldr	r1, [pc, #124]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800747e:	4b1e      	ldr	r3, [pc, #120]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	491c      	ldr	r1, [pc, #112]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007488:	4313      	orrs	r3, r2
 800748a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800748c:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4a19      	ldr	r2, [pc, #100]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007498:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 800749a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6a12      	ldr	r2, [r2, #32]
 80074a8:	00d2      	lsls	r2, r2, #3
 80074aa:	4913      	ldr	r1, [pc, #76]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80074b0:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	4a10      	ldr	r2, [pc, #64]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074b6:	f043 0310 	orr.w	r3, r3, #16
 80074ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80074bc:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0d      	ldr	r2, [pc, #52]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074c8:	f7fb f930 	bl	800272c <HAL_GetTick>
 80074cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074ce:	e008      	b.n	80074e2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074d0:	f7fb f92c 	bl	800272c <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e006      	b.n	80074f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <RCCEx_PLL2_Config+0x12c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0

}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	44020c00 	.word	0x44020c00

080074fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007504:	4b48      	ldr	r3, [pc, #288]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a47      	ldr	r2, [pc, #284]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 800750a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800750e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007510:	f7fb f90c 	bl	800272c <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007516:	e008      	b.n	800752a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007518:	f7fb f908 	bl	800272c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e07a      	b.n	8007620 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800752a:	4b3f      	ldr	r3, [pc, #252]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007536:	4b3c      	ldr	r3, [pc, #240]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6852      	ldr	r2, [r2, #4]
 800754a:	0212      	lsls	r2, r2, #8
 800754c:	430a      	orrs	r2, r1
 800754e:	4936      	ldr	r1, [pc, #216]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007550:	4313      	orrs	r3, r2
 8007552:	630b      	str	r3, [r1, #48]	@ 0x30
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	3b01      	subs	r3, #1
 800755a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	3b01      	subs	r3, #1
 8007564:	025b      	lsls	r3, r3, #9
 8007566:	b29b      	uxth	r3, r3
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	3b01      	subs	r3, #1
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	3b01      	subs	r3, #1
 800757e:	061b      	lsls	r3, r3, #24
 8007580:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007584:	4928      	ldr	r1, [pc, #160]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007586:	4313      	orrs	r3, r2
 8007588:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800758a:	4b27      	ldr	r3, [pc, #156]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	f023 020c 	bic.w	r2, r3, #12
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	4924      	ldr	r1, [pc, #144]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007598:	4313      	orrs	r3, r2
 800759a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800759c:	4b22      	ldr	r3, [pc, #136]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a0:	f023 0220 	bic.w	r2, r3, #32
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	491f      	ldr	r1, [pc, #124]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80075ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	491c      	ldr	r1, [pc, #112]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80075bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075c2:	f023 0310 	bic.w	r3, r3, #16
 80075c6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80075c8:	4b17      	ldr	r3, [pc, #92]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6a12      	ldr	r2, [r2, #32]
 80075d8:	00d2      	lsls	r2, r2, #3
 80075da:	4913      	ldr	r1, [pc, #76]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80075e0:	4b11      	ldr	r3, [pc, #68]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e4:	4a10      	ldr	r2, [pc, #64]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075e6:	f043 0310 	orr.w	r3, r3, #16
 80075ea:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80075ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 80075f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075f8:	f7fb f898 	bl	800272c <HAL_GetTick>
 80075fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075fe:	e008      	b.n	8007612 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007600:	f7fb f894 	bl	800272c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e006      	b.n	8007620 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007612:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <RCCEx_PLL3_Config+0x12c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	44020c00 	.word	0x44020c00

0800762c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e10d      	b.n	800785a <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a88      	ldr	r2, [pc, #544]	@ (8007864 <HAL_SPI_Init+0x238>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <HAL_SPI_Init+0x26>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a86      	ldr	r2, [pc, #536]	@ (8007868 <HAL_SPI_Init+0x23c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	e000      	b.n	8007654 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007652:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a81      	ldr	r2, [pc, #516]	@ (8007864 <HAL_SPI_Init+0x238>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_SPI_Init+0x42>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a7f      	ldr	r2, [pc, #508]	@ (8007868 <HAL_SPI_Init+0x23c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d105      	bne.n	800767a <HAL_SPI_Init+0x4e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b0f      	cmp	r3, #15
 8007674:	d901      	bls.n	800767a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e0ef      	b.n	800785a <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f902 	bl	8007884 <SPI_GetPacketSize>
 8007680:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a77      	ldr	r2, [pc, #476]	@ (8007864 <HAL_SPI_Init+0x238>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <HAL_SPI_Init+0x6a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a75      	ldr	r2, [pc, #468]	@ (8007868 <HAL_SPI_Init+0x23c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d102      	bne.n	800769c <HAL_SPI_Init+0x70>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d820      	bhi.n	80076de <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076a0:	4a72      	ldr	r2, [pc, #456]	@ (800786c <HAL_SPI_Init+0x240>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d018      	beq.n	80076d8 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a71      	ldr	r2, [pc, #452]	@ (8007870 <HAL_SPI_Init+0x244>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_SPI_Init+0xac>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6f      	ldr	r2, [pc, #444]	@ (8007874 <HAL_SPI_Init+0x248>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <HAL_SPI_Init+0xac>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6e      	ldr	r2, [pc, #440]	@ (8007878 <HAL_SPI_Init+0x24c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_SPI_Init+0xac>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a6c      	ldr	r2, [pc, #432]	@ (800787c <HAL_SPI_Init+0x250>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_SPI_Init+0xac>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a6b      	ldr	r2, [pc, #428]	@ (8007880 <HAL_SPI_Init+0x254>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d104      	bne.n	80076e2 <HAL_SPI_Init+0xb6>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d901      	bls.n	80076e2 <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e0bb      	b.n	800785a <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fa fb3a 	bl	8001d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800771e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007728:	d119      	bne.n	800775e <HAL_SPI_Init+0x132>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007732:	d103      	bne.n	800773c <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10c      	bne.n	800775e <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800774c:	d107      	bne.n	800775e <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00f      	beq.n	800778a <HAL_SPI_Init+0x15e>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	2b06      	cmp	r3, #6
 8007770:	d90b      	bls.n	800778a <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e007      	b.n	800779a <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007798:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69da      	ldr	r2, [r3, #28]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	ea42 0103 	orr.w	r1, r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007806:	ea42 0103 	orr.w	r1, r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40014c00 	.word	0x40014c00
 8007868:	50014c00 	.word	0x50014c00
 800786c:	40013000 	.word	0x40013000
 8007870:	50013000 	.word	0x50013000
 8007874:	40003800 	.word	0x40003800
 8007878:	50003800 	.word	0x50003800
 800787c:	40003c00 	.word	0x40003c00
 8007880:	50003c00 	.word	0x50003c00

08007884 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	3301      	adds	r3, #1
 800789c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3307      	adds	r3, #7
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e049      	b.n	8007960 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fa faad 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f000 ff09 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d001      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e07c      	b.n	8007a7a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3a      	ldr	r2, [pc, #232]	@ (8007a88 <HAL_TIM_Base_Start_IT+0x120>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d04a      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a39      	ldr	r2, [pc, #228]	@ (8007a8c <HAL_TIM_Base_Start_IT+0x124>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d045      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d040      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079be:	d03b      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a32      	ldr	r2, [pc, #200]	@ (8007a90 <HAL_TIM_Base_Start_IT+0x128>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d036      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a31      	ldr	r2, [pc, #196]	@ (8007a94 <HAL_TIM_Base_Start_IT+0x12c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d031      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a98 <HAL_TIM_Base_Start_IT+0x130>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d02c      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a9c <HAL_TIM_Base_Start_IT+0x134>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d027      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa0 <HAL_TIM_Base_Start_IT+0x138>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d022      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2b      	ldr	r2, [pc, #172]	@ (8007aa4 <HAL_TIM_Base_Start_IT+0x13c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d01d      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <HAL_TIM_Base_Start_IT+0x140>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d018      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a28      	ldr	r2, [pc, #160]	@ (8007aac <HAL_TIM_Base_Start_IT+0x144>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <HAL_TIM_Base_Start_IT+0x148>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a25      	ldr	r2, [pc, #148]	@ (8007ab4 <HAL_TIM_Base_Start_IT+0x14c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a23      	ldr	r2, [pc, #140]	@ (8007ab8 <HAL_TIM_Base_Start_IT+0x150>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0xd0>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a22      	ldr	r2, [pc, #136]	@ (8007abc <HAL_TIM_Base_Start_IT+0x154>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d115      	bne.n	8007a64 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4b20      	ldr	r3, [pc, #128]	@ (8007ac0 <HAL_TIM_Base_Start_IT+0x158>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b06      	cmp	r3, #6
 8007a48:	d015      	beq.n	8007a76 <HAL_TIM_Base_Start_IT+0x10e>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a50:	d011      	beq.n	8007a76 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0201 	orr.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a62:	e008      	b.n	8007a76 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e000      	b.n	8007a78 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40012c00 	.word	0x40012c00
 8007a8c:	50012c00 	.word	0x50012c00
 8007a90:	40000400 	.word	0x40000400
 8007a94:	50000400 	.word	0x50000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	50000800 	.word	0x50000800
 8007aa0:	40000c00 	.word	0x40000c00
 8007aa4:	50000c00 	.word	0x50000c00
 8007aa8:	40013400 	.word	0x40013400
 8007aac:	50013400 	.word	0x50013400
 8007ab0:	40001800 	.word	0x40001800
 8007ab4:	50001800 	.word	0x50001800
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	50014000 	.word	0x50014000
 8007ac0:	00010007 	.word	0x00010007

08007ac4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10f      	bne.n	8007b0c <HAL_TIM_Base_Stop_IT+0x48>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_Base_Stop_IT+0x48>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0201 	bic.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e049      	b.n	8007bc8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f841 	bl	8007bd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f000 fdd5 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <HAL_TIM_OC_Start_IT+0x28>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	e03c      	b.n	8007c86 <HAL_TIM_OC_Start_IT+0xa2>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d109      	bne.n	8007c26 <HAL_TIM_OC_Start_IT+0x42>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	e02f      	b.n	8007c86 <HAL_TIM_OC_Start_IT+0xa2>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d109      	bne.n	8007c40 <HAL_TIM_OC_Start_IT+0x5c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	bf14      	ite	ne
 8007c38:	2301      	movne	r3, #1
 8007c3a:	2300      	moveq	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	e022      	b.n	8007c86 <HAL_TIM_OC_Start_IT+0xa2>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	d109      	bne.n	8007c5a <HAL_TIM_OC_Start_IT+0x76>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e015      	b.n	8007c86 <HAL_TIM_OC_Start_IT+0xa2>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d109      	bne.n	8007c74 <HAL_TIM_OC_Start_IT+0x90>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e008      	b.n	8007c86 <HAL_TIM_OC_Start_IT+0xa2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e11a      	b.n	8007ec4 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_TIM_OC_Start_IT+0xba>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c9c:	e023      	b.n	8007ce6 <HAL_TIM_OC_Start_IT+0x102>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d104      	bne.n	8007cae <HAL_TIM_OC_Start_IT+0xca>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cac:	e01b      	b.n	8007ce6 <HAL_TIM_OC_Start_IT+0x102>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d104      	bne.n	8007cbe <HAL_TIM_OC_Start_IT+0xda>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cbc:	e013      	b.n	8007ce6 <HAL_TIM_OC_Start_IT+0x102>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_OC_Start_IT+0xea>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ccc:	e00b      	b.n	8007ce6 <HAL_TIM_OC_Start_IT+0x102>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_OC_Start_IT+0xfa>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cdc:	e003      	b.n	8007ce6 <HAL_TIM_OC_Start_IT+0x102>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b0c      	cmp	r3, #12
 8007cea:	d841      	bhi.n	8007d70 <HAL_TIM_OC_Start_IT+0x18c>
 8007cec:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <HAL_TIM_OC_Start_IT+0x110>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d29 	.word	0x08007d29
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d71 	.word	0x08007d71
 8007d00:	08007d71 	.word	0x08007d71
 8007d04:	08007d3b 	.word	0x08007d3b
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d4d 	.word	0x08007d4d
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d71 	.word	0x08007d71
 8007d24:	08007d5f 	.word	0x08007d5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0202 	orr.w	r2, r2, #2
 8007d36:	60da      	str	r2, [r3, #12]
      break;
 8007d38:	e01d      	b.n	8007d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0204 	orr.w	r2, r2, #4
 8007d48:	60da      	str	r2, [r3, #12]
      break;
 8007d4a:	e014      	b.n	8007d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0208 	orr.w	r2, r2, #8
 8007d5a:	60da      	str	r2, [r3, #12]
      break;
 8007d5c:	e00b      	b.n	8007d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0210 	orr.w	r2, r2, #16
 8007d6c:	60da      	str	r2, [r3, #12]
      break;
 8007d6e:	e002      	b.n	8007d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 80a2 	bne.w	8007ec2 <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 f97e 	bl	8009088 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a4e      	ldr	r2, [pc, #312]	@ (8007ecc <HAL_TIM_OC_Start_IT+0x2e8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8007ed0 <HAL_TIM_OC_Start_IT+0x2ec>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a4b      	ldr	r2, [pc, #300]	@ (8007ed4 <HAL_TIM_OC_Start_IT+0x2f0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a4a      	ldr	r2, [pc, #296]	@ (8007ed8 <HAL_TIM_OC_Start_IT+0x2f4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a48      	ldr	r2, [pc, #288]	@ (8007edc <HAL_TIM_OC_Start_IT+0x2f8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a47      	ldr	r2, [pc, #284]	@ (8007ee0 <HAL_TIM_OC_Start_IT+0x2fc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d101      	bne.n	8007dcc <HAL_TIM_OC_Start_IT+0x1e8>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <HAL_TIM_OC_Start_IT+0x1ea>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a39      	ldr	r2, [pc, #228]	@ (8007ecc <HAL_TIM_OC_Start_IT+0x2e8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d04a      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a37      	ldr	r2, [pc, #220]	@ (8007ed0 <HAL_TIM_OC_Start_IT+0x2ec>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d045      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dfe:	d040      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e08:	d03b      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a35      	ldr	r2, [pc, #212]	@ (8007ee4 <HAL_TIM_OC_Start_IT+0x300>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d036      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a33      	ldr	r2, [pc, #204]	@ (8007ee8 <HAL_TIM_OC_Start_IT+0x304>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d031      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a32      	ldr	r2, [pc, #200]	@ (8007eec <HAL_TIM_OC_Start_IT+0x308>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d02c      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	@ (8007ef0 <HAL_TIM_OC_Start_IT+0x30c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d027      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef4 <HAL_TIM_OC_Start_IT+0x310>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2d      	ldr	r2, [pc, #180]	@ (8007ef8 <HAL_TIM_OC_Start_IT+0x314>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a22      	ldr	r2, [pc, #136]	@ (8007ed4 <HAL_TIM_OC_Start_IT+0x2f0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a20      	ldr	r2, [pc, #128]	@ (8007ed8 <HAL_TIM_OC_Start_IT+0x2f4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a27      	ldr	r2, [pc, #156]	@ (8007efc <HAL_TIM_OC_Start_IT+0x318>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a25      	ldr	r2, [pc, #148]	@ (8007f00 <HAL_TIM_OC_Start_IT+0x31c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1a      	ldr	r2, [pc, #104]	@ (8007edc <HAL_TIM_OC_Start_IT+0x2f8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIM_OC_Start_IT+0x29e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a18      	ldr	r2, [pc, #96]	@ (8007ee0 <HAL_TIM_OC_Start_IT+0x2fc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d115      	bne.n	8007eae <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	4b1e      	ldr	r3, [pc, #120]	@ (8007f04 <HAL_TIM_OC_Start_IT+0x320>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d015      	beq.n	8007ec0 <HAL_TIM_OC_Start_IT+0x2dc>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9a:	d011      	beq.n	8007ec0 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eac:	e008      	b.n	8007ec0 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e000      	b.n	8007ec2 <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	50012c00 	.word	0x50012c00
 8007ed4:	40013400 	.word	0x40013400
 8007ed8:	50013400 	.word	0x50013400
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	50014000 	.word	0x50014000
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	50000400 	.word	0x50000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	50000800 	.word	0x50000800
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	50000c00 	.word	0x50000c00
 8007efc:	40001800 	.word	0x40001800
 8007f00:	50001800 	.word	0x50001800
 8007f04:	00010007 	.word	0x00010007

08007f08 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	d841      	bhi.n	8007fa0 <HAL_TIM_OC_Stop_IT+0x98>
 8007f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <HAL_TIM_OC_Stop_IT+0x1c>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f59 	.word	0x08007f59
 8007f28:	08007fa1 	.word	0x08007fa1
 8007f2c:	08007fa1 	.word	0x08007fa1
 8007f30:	08007fa1 	.word	0x08007fa1
 8007f34:	08007f6b 	.word	0x08007f6b
 8007f38:	08007fa1 	.word	0x08007fa1
 8007f3c:	08007fa1 	.word	0x08007fa1
 8007f40:	08007fa1 	.word	0x08007fa1
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007fa1 	.word	0x08007fa1
 8007f4c:	08007fa1 	.word	0x08007fa1
 8007f50:	08007fa1 	.word	0x08007fa1
 8007f54:	08007f8f 	.word	0x08007f8f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0202 	bic.w	r2, r2, #2
 8007f66:	60da      	str	r2, [r3, #12]
      break;
 8007f68:	e01d      	b.n	8007fa6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0204 	bic.w	r2, r2, #4
 8007f78:	60da      	str	r2, [r3, #12]
      break;
 8007f7a:	e014      	b.n	8007fa6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0208 	bic.w	r2, r2, #8
 8007f8a:	60da      	str	r2, [r3, #12]
      break;
 8007f8c:	e00b      	b.n	8007fa6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0210 	bic.w	r2, r2, #16
 8007f9c:	60da      	str	r2, [r3, #12]
      break;
 8007f9e:	e002      	b.n	8007fa6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f040 8086 	bne.w	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 f866 	bl	8009088 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a40      	ldr	r2, [pc, #256]	@ (80080c4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d018      	beq.n	8007ff8 <HAL_TIM_OC_Stop_IT+0xf0>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a3f      	ldr	r2, [pc, #252]	@ (80080c8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <HAL_TIM_OC_Stop_IT+0xf0>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80080cc <HAL_TIM_OC_Stop_IT+0x1c4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_TIM_OC_Stop_IT+0xf0>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a3c      	ldr	r2, [pc, #240]	@ (80080d0 <HAL_TIM_OC_Stop_IT+0x1c8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_TIM_OC_Stop_IT+0xf0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a3a      	ldr	r2, [pc, #232]	@ (80080d4 <HAL_TIM_OC_Stop_IT+0x1cc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_TIM_OC_Stop_IT+0xf0>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a39      	ldr	r2, [pc, #228]	@ (80080d8 <HAL_TIM_OC_Stop_IT+0x1d0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d101      	bne.n	8007ffc <HAL_TIM_OC_Stop_IT+0xf4>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <HAL_TIM_OC_Stop_IT+0xf6>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d017      	beq.n	8008032 <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6a1a      	ldr	r2, [r3, #32]
 8008008:	f241 1311 	movw	r3, #4369	@ 0x1111
 800800c:	4013      	ands	r3, r2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10f      	bne.n	8008032 <HAL_TIM_OC_Stop_IT+0x12a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	f244 4344 	movw	r3, #17476	@ 0x4444
 800801c:	4013      	ands	r3, r2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d107      	bne.n	8008032 <HAL_TIM_OC_Stop_IT+0x12a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6a1a      	ldr	r2, [r3, #32]
 8008038:	f241 1311 	movw	r3, #4369	@ 0x1111
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10f      	bne.n	8008062 <HAL_TIM_OC_Stop_IT+0x15a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	f244 4344 	movw	r3, #17476	@ 0x4444
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <HAL_TIM_OC_Stop_IT+0x15a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <HAL_TIM_OC_Stop_IT+0x16a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008070:	e023      	b.n	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d104      	bne.n	8008082 <HAL_TIM_OC_Stop_IT+0x17a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008080:	e01b      	b.n	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d104      	bne.n	8008092 <HAL_TIM_OC_Stop_IT+0x18a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008090:	e013      	b.n	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_OC_Stop_IT+0x19a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a0:	e00b      	b.n	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_OC_Stop_IT+0x1aa>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080b0:	e003      	b.n	80080ba <HAL_TIM_OC_Stop_IT+0x1b2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	50012c00 	.word	0x50012c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	50013400 	.word	0x50013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	50014000 	.word	0x50014000

080080dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d020      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0202 	mvn.w	r2, #2
 8008110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fad4 	bl	80086d4 <HAL_TIM_IC_CaptureCallback>
 800812c:	e005      	b.n	800813a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fac6 	bl	80086c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fad7 	bl	80086e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0204 	mvn.w	r2, #4
 800815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 faae 	bl	80086d4 <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 faa0 	bl	80086c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fab1 	bl	80086e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01b      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0208 	mvn.w	r2, #8
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa88 	bl	80086d4 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa7a 	bl	80086c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa8b 	bl	80086e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa62 	bl	80086d4 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa54 	bl	80086c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa65 	bl	80086e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0201 	mvn.w	r2, #1
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa32 	bl	80086ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f809 	bl	8009288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f801 	bl	800929c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa1f 	bl	80086fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0220 	mvn.w	r2, #32
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 ffc9 	bl	8009274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80082fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 ffd5 	bl	80092b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 ffcd 	bl	80092c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 ffc5 	bl	80092d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00c      	beq.n	8008372 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800836a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ffbd 	bl	80092ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008396:	2302      	movs	r3, #2
 8008398:	e066      	b.n	8008468 <HAL_TIM_OC_ConfigChannel+0xec>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b14      	cmp	r3, #20
 80083a6:	d857      	bhi.n	8008458 <HAL_TIM_OC_ConfigChannel+0xdc>
 80083a8:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	08008405 	.word	0x08008405
 80083b4:	08008459 	.word	0x08008459
 80083b8:	08008459 	.word	0x08008459
 80083bc:	08008459 	.word	0x08008459
 80083c0:	08008413 	.word	0x08008413
 80083c4:	08008459 	.word	0x08008459
 80083c8:	08008459 	.word	0x08008459
 80083cc:	08008459 	.word	0x08008459
 80083d0:	08008421 	.word	0x08008421
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	0800842f 	.word	0x0800842f
 80083e4:	08008459 	.word	0x08008459
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008459 	.word	0x08008459
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008459 	.word	0x08008459
 8008400:	0800844b 	.word	0x0800844b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fa6a 	bl	80088e4 <TIM_OC1_SetConfig>
      break;
 8008410:	e025      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fafd 	bl	8008a18 <TIM_OC2_SetConfig>
      break;
 800841e:	e01e      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fb8e 	bl	8008b48 <TIM_OC3_SetConfig>
      break;
 800842c:	e017      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fc1d 	bl	8008c74 <TIM_OC4_SetConfig>
      break;
 800843a:	e010      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fcae 	bl	8008da4 <TIM_OC5_SetConfig>
      break;
 8008448:	e009      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fd11 	bl	8008e78 <TIM_OC6_SetConfig>
      break;
 8008456:	e002      	b.n	800845e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
      break;
 800845c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_TIM_ConfigClockSource+0x1c>
 8008488:	2302      	movs	r3, #2
 800848a:	e0fe      	b.n	800868a <HAL_TIM_ConfigClockSource+0x21a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80084aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084c8:	f000 80c9 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80084cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084d0:	f200 80ce 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 80084d4:	4a6f      	ldr	r2, [pc, #444]	@ (8008694 <HAL_TIM_ConfigClockSource+0x224>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f000 80c1 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80084dc:	4a6d      	ldr	r2, [pc, #436]	@ (8008694 <HAL_TIM_ConfigClockSource+0x224>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f200 80c6 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 80084e4:	4a6c      	ldr	r2, [pc, #432]	@ (8008698 <HAL_TIM_ConfigClockSource+0x228>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	f000 80b9 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80084ec:	4a6a      	ldr	r2, [pc, #424]	@ (8008698 <HAL_TIM_ConfigClockSource+0x228>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f200 80be 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 80084f4:	4a69      	ldr	r2, [pc, #420]	@ (800869c <HAL_TIM_ConfigClockSource+0x22c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f000 80b1 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80084fc:	4a67      	ldr	r2, [pc, #412]	@ (800869c <HAL_TIM_ConfigClockSource+0x22c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	f200 80b6 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008504:	4a66      	ldr	r2, [pc, #408]	@ (80086a0 <HAL_TIM_ConfigClockSource+0x230>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f000 80a9 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800850c:	4a64      	ldr	r2, [pc, #400]	@ (80086a0 <HAL_TIM_ConfigClockSource+0x230>)
 800850e:	4293      	cmp	r3, r2
 8008510:	f200 80ae 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008514:	4a63      	ldr	r2, [pc, #396]	@ (80086a4 <HAL_TIM_ConfigClockSource+0x234>)
 8008516:	4293      	cmp	r3, r2
 8008518:	f000 80a1 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800851c:	4a61      	ldr	r2, [pc, #388]	@ (80086a4 <HAL_TIM_ConfigClockSource+0x234>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f200 80a6 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008524:	4a60      	ldr	r2, [pc, #384]	@ (80086a8 <HAL_TIM_ConfigClockSource+0x238>)
 8008526:	4293      	cmp	r3, r2
 8008528:	f000 8099 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800852c:	4a5e      	ldr	r2, [pc, #376]	@ (80086a8 <HAL_TIM_ConfigClockSource+0x238>)
 800852e:	4293      	cmp	r3, r2
 8008530:	f200 809e 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008534:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008538:	f000 8091 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800853c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008540:	f200 8096 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008548:	f000 8089 	beq.w	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800854c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008550:	f200 808e 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008558:	d03e      	beq.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 800855a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800855e:	f200 8087 	bhi.w	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008566:	f000 8086 	beq.w	8008676 <HAL_TIM_ConfigClockSource+0x206>
 800856a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800856e:	d87f      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008570:	2b70      	cmp	r3, #112	@ 0x70
 8008572:	d01a      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x13a>
 8008574:	2b70      	cmp	r3, #112	@ 0x70
 8008576:	d87b      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008578:	2b60      	cmp	r3, #96	@ 0x60
 800857a:	d050      	beq.n	800861e <HAL_TIM_ConfigClockSource+0x1ae>
 800857c:	2b60      	cmp	r3, #96	@ 0x60
 800857e:	d877      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008580:	2b50      	cmp	r3, #80	@ 0x50
 8008582:	d03c      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x18e>
 8008584:	2b50      	cmp	r3, #80	@ 0x50
 8008586:	d873      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008588:	2b40      	cmp	r3, #64	@ 0x40
 800858a:	d058      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x1ce>
 800858c:	2b40      	cmp	r3, #64	@ 0x40
 800858e:	d86f      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008590:	2b30      	cmp	r3, #48	@ 0x30
 8008592:	d064      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 8008594:	2b30      	cmp	r3, #48	@ 0x30
 8008596:	d86b      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 8008598:	2b20      	cmp	r3, #32
 800859a:	d060      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 800859c:	2b20      	cmp	r3, #32
 800859e:	d867      	bhi.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d05c      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d05a      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x1ee>
 80085a8:	e062      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085ba:	f000 fd45 	bl	8009048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	609a      	str	r2, [r3, #8]
      break;
 80085d6:	e04f      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085e8:	f000 fd2e 	bl	8009048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085fa:	609a      	str	r2, [r3, #8]
      break;
 80085fc:	e03c      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800860a:	461a      	mov	r2, r3
 800860c:	f000 fca0 	bl	8008f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2150      	movs	r1, #80	@ 0x50
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fcf9 	bl	800900e <TIM_ITRx_SetConfig>
      break;
 800861c:	e02c      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fcbf 	bl	8008fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2160      	movs	r1, #96	@ 0x60
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fce9 	bl	800900e <TIM_ITRx_SetConfig>
      break;
 800863c:	e01c      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800864a:	461a      	mov	r2, r3
 800864c:	f000 fc80 	bl	8008f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2140      	movs	r1, #64	@ 0x40
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fcd9 	bl	800900e <TIM_ITRx_SetConfig>
      break;
 800865c:	e00c      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f000 fcd0 	bl	800900e <TIM_ITRx_SetConfig>
      break;
 800866e:	e003      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	e000      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8008676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	00100070 	.word	0x00100070
 8008698:	00100060 	.word	0x00100060
 800869c:	00100050 	.word	0x00100050
 80086a0:	00100040 	.word	0x00100040
 80086a4:	00100030 	.word	0x00100030
 80086a8:	00100020 	.word	0x00100020

080086ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a62      	ldr	r2, [pc, #392]	@ (80088ac <TIM_Base_SetConfig+0x19c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d02b      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a61      	ldr	r2, [pc, #388]	@ (80088b0 <TIM_Base_SetConfig+0x1a0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d027      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008736:	d023      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800873e:	d01f      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a5c      	ldr	r2, [pc, #368]	@ (80088b4 <TIM_Base_SetConfig+0x1a4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d01b      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a5b      	ldr	r2, [pc, #364]	@ (80088b8 <TIM_Base_SetConfig+0x1a8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d017      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a5a      	ldr	r2, [pc, #360]	@ (80088bc <TIM_Base_SetConfig+0x1ac>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d013      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a59      	ldr	r2, [pc, #356]	@ (80088c0 <TIM_Base_SetConfig+0x1b0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a58      	ldr	r2, [pc, #352]	@ (80088c4 <TIM_Base_SetConfig+0x1b4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a57      	ldr	r2, [pc, #348]	@ (80088c8 <TIM_Base_SetConfig+0x1b8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a56      	ldr	r2, [pc, #344]	@ (80088cc <TIM_Base_SetConfig+0x1bc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0x70>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a55      	ldr	r2, [pc, #340]	@ (80088d0 <TIM_Base_SetConfig+0x1c0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d108      	bne.n	8008792 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a45      	ldr	r2, [pc, #276]	@ (80088ac <TIM_Base_SetConfig+0x19c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d03b      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a44      	ldr	r2, [pc, #272]	@ (80088b0 <TIM_Base_SetConfig+0x1a0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d037      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a8:	d033      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087b0:	d02f      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a3f      	ldr	r2, [pc, #252]	@ (80088b4 <TIM_Base_SetConfig+0x1a4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d02b      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a3e      	ldr	r2, [pc, #248]	@ (80088b8 <TIM_Base_SetConfig+0x1a8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d027      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a3d      	ldr	r2, [pc, #244]	@ (80088bc <TIM_Base_SetConfig+0x1ac>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d023      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a3c      	ldr	r2, [pc, #240]	@ (80088c0 <TIM_Base_SetConfig+0x1b0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d01f      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a3b      	ldr	r2, [pc, #236]	@ (80088c4 <TIM_Base_SetConfig+0x1b4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d01b      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a3a      	ldr	r2, [pc, #232]	@ (80088c8 <TIM_Base_SetConfig+0x1b8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d017      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a39      	ldr	r2, [pc, #228]	@ (80088cc <TIM_Base_SetConfig+0x1bc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a38      	ldr	r2, [pc, #224]	@ (80088d0 <TIM_Base_SetConfig+0x1c0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00f      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a37      	ldr	r2, [pc, #220]	@ (80088d4 <TIM_Base_SetConfig+0x1c4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00b      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a36      	ldr	r2, [pc, #216]	@ (80088d8 <TIM_Base_SetConfig+0x1c8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d007      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a35      	ldr	r2, [pc, #212]	@ (80088dc <TIM_Base_SetConfig+0x1cc>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d003      	beq.n	8008812 <TIM_Base_SetConfig+0x102>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a34      	ldr	r2, [pc, #208]	@ (80088e0 <TIM_Base_SetConfig+0x1d0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d108      	bne.n	8008824 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a18      	ldr	r2, [pc, #96]	@ (80088ac <TIM_Base_SetConfig+0x19c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d013      	beq.n	8008878 <TIM_Base_SetConfig+0x168>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a17      	ldr	r2, [pc, #92]	@ (80088b0 <TIM_Base_SetConfig+0x1a0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00f      	beq.n	8008878 <TIM_Base_SetConfig+0x168>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <TIM_Base_SetConfig+0x1bc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00b      	beq.n	8008878 <TIM_Base_SetConfig+0x168>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1b      	ldr	r2, [pc, #108]	@ (80088d0 <TIM_Base_SetConfig+0x1c0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d007      	beq.n	8008878 <TIM_Base_SetConfig+0x168>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1c      	ldr	r2, [pc, #112]	@ (80088dc <TIM_Base_SetConfig+0x1cc>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0x168>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a1b      	ldr	r2, [pc, #108]	@ (80088e0 <TIM_Base_SetConfig+0x1d0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d103      	bne.n	8008880 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b01      	cmp	r3, #1
 8008890:	d105      	bne.n	800889e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	611a      	str	r2, [r3, #16]
  }
}
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40012c00 	.word	0x40012c00
 80088b0:	50012c00 	.word	0x50012c00
 80088b4:	40000400 	.word	0x40000400
 80088b8:	50000400 	.word	0x50000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	50000800 	.word	0x50000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	50000c00 	.word	0x50000c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	50013400 	.word	0x50013400
 80088d4:	40001800 	.word	0x40001800
 80088d8:	50001800 	.word	0x50001800
 80088dc:	40014000 	.word	0x40014000
 80088e0:	50014000 	.word	0x50014000

080088e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	f023 0201 	bic.w	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f023 0302 	bic.w	r3, r3, #2
 8008930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a30      	ldr	r2, [pc, #192]	@ (8008a00 <TIM_OC1_SetConfig+0x11c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <TIM_OC1_SetConfig+0x88>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a2f      	ldr	r2, [pc, #188]	@ (8008a04 <TIM_OC1_SetConfig+0x120>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d00f      	beq.n	800896c <TIM_OC1_SetConfig+0x88>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a08 <TIM_OC1_SetConfig+0x124>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00b      	beq.n	800896c <TIM_OC1_SetConfig+0x88>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a2d      	ldr	r2, [pc, #180]	@ (8008a0c <TIM_OC1_SetConfig+0x128>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d007      	beq.n	800896c <TIM_OC1_SetConfig+0x88>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a10 <TIM_OC1_SetConfig+0x12c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d003      	beq.n	800896c <TIM_OC1_SetConfig+0x88>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a2b      	ldr	r2, [pc, #172]	@ (8008a14 <TIM_OC1_SetConfig+0x130>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d10c      	bne.n	8008986 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f023 0308 	bic.w	r3, r3, #8
 8008972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 0304 	bic.w	r3, r3, #4
 8008984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1d      	ldr	r2, [pc, #116]	@ (8008a00 <TIM_OC1_SetConfig+0x11c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <TIM_OC1_SetConfig+0xd2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1c      	ldr	r2, [pc, #112]	@ (8008a04 <TIM_OC1_SetConfig+0x120>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00f      	beq.n	80089b6 <TIM_OC1_SetConfig+0xd2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1b      	ldr	r2, [pc, #108]	@ (8008a08 <TIM_OC1_SetConfig+0x124>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_OC1_SetConfig+0xd2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a0c <TIM_OC1_SetConfig+0x128>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_OC1_SetConfig+0xd2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a19      	ldr	r2, [pc, #100]	@ (8008a10 <TIM_OC1_SetConfig+0x12c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC1_SetConfig+0xd2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a18      	ldr	r2, [pc, #96]	@ (8008a14 <TIM_OC1_SetConfig+0x130>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d111      	bne.n	80089da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	621a      	str	r2, [r3, #32]
}
 80089f4:	bf00      	nop
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	50012c00 	.word	0x50012c00
 8008a08:	40013400 	.word	0x40013400
 8008a0c:	50013400 	.word	0x50013400
 8008a10:	40014000 	.word	0x40014000
 8008a14:	50014000 	.word	0x50014000

08008a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f023 0210 	bic.w	r2, r3, #16
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0320 	bic.w	r3, r3, #32
 8008a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a2e      	ldr	r2, [pc, #184]	@ (8008b30 <TIM_OC2_SetConfig+0x118>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00b      	beq.n	8008a94 <TIM_OC2_SetConfig+0x7c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8008b34 <TIM_OC2_SetConfig+0x11c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d007      	beq.n	8008a94 <TIM_OC2_SetConfig+0x7c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a2c      	ldr	r2, [pc, #176]	@ (8008b38 <TIM_OC2_SetConfig+0x120>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_OC2_SetConfig+0x7c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8008b3c <TIM_OC2_SetConfig+0x124>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d10d      	bne.n	8008ab0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8008b30 <TIM_OC2_SetConfig+0x118>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xc8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a1e      	ldr	r2, [pc, #120]	@ (8008b34 <TIM_OC2_SetConfig+0x11c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xc8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8008b38 <TIM_OC2_SetConfig+0x120>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xc8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a1c      	ldr	r2, [pc, #112]	@ (8008b3c <TIM_OC2_SetConfig+0x124>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xc8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b40 <TIM_OC2_SetConfig+0x128>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xc8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1a      	ldr	r2, [pc, #104]	@ (8008b44 <TIM_OC2_SetConfig+0x12c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d113      	bne.n	8008b08 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	50012c00 	.word	0x50012c00
 8008b38:	40013400 	.word	0x40013400
 8008b3c:	50013400 	.word	0x50013400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	50014000 	.word	0x50014000

08008b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c5c <TIM_OC3_SetConfig+0x114>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00b      	beq.n	8008bc2 <TIM_OC3_SetConfig+0x7a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a2c      	ldr	r2, [pc, #176]	@ (8008c60 <TIM_OC3_SetConfig+0x118>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d007      	beq.n	8008bc2 <TIM_OC3_SetConfig+0x7a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c64 <TIM_OC3_SetConfig+0x11c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <TIM_OC3_SetConfig+0x7a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c68 <TIM_OC3_SetConfig+0x120>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d10d      	bne.n	8008bde <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c5c <TIM_OC3_SetConfig+0x114>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d013      	beq.n	8008c0e <TIM_OC3_SetConfig+0xc6>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <TIM_OC3_SetConfig+0x118>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00f      	beq.n	8008c0e <TIM_OC3_SetConfig+0xc6>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c64 <TIM_OC3_SetConfig+0x11c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00b      	beq.n	8008c0e <TIM_OC3_SetConfig+0xc6>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c68 <TIM_OC3_SetConfig+0x120>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d007      	beq.n	8008c0e <TIM_OC3_SetConfig+0xc6>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a1a      	ldr	r2, [pc, #104]	@ (8008c6c <TIM_OC3_SetConfig+0x124>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_OC3_SetConfig+0xc6>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a19      	ldr	r2, [pc, #100]	@ (8008c70 <TIM_OC3_SetConfig+0x128>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d113      	bne.n	8008c36 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	621a      	str	r2, [r3, #32]
}
 8008c50:	bf00      	nop
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40012c00 	.word	0x40012c00
 8008c60:	50012c00 	.word	0x50012c00
 8008c64:	40013400 	.word	0x40013400
 8008c68:	50013400 	.word	0x50013400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	50014000 	.word	0x50014000

08008c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	031b      	lsls	r3, r3, #12
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d8c <TIM_OC4_SetConfig+0x118>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x7c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a2d      	ldr	r2, [pc, #180]	@ (8008d90 <TIM_OC4_SetConfig+0x11c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x7c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8008d94 <TIM_OC4_SetConfig+0x120>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x7c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a2b      	ldr	r2, [pc, #172]	@ (8008d98 <TIM_OC4_SetConfig+0x124>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10d      	bne.n	8008d0c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	031b      	lsls	r3, r3, #12
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d8c <TIM_OC4_SetConfig+0x118>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <TIM_OC4_SetConfig+0xc8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	@ (8008d90 <TIM_OC4_SetConfig+0x11c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <TIM_OC4_SetConfig+0xc8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <TIM_OC4_SetConfig+0x120>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <TIM_OC4_SetConfig+0xc8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <TIM_OC4_SetConfig+0x124>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d007      	beq.n	8008d3c <TIM_OC4_SetConfig+0xc8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d9c <TIM_OC4_SetConfig+0x128>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_OC4_SetConfig+0xc8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a1a      	ldr	r2, [pc, #104]	@ (8008da0 <TIM_OC4_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d113      	bne.n	8008d64 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	019b      	lsls	r3, r3, #6
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	019b      	lsls	r3, r3, #6
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40012c00 	.word	0x40012c00
 8008d90:	50012c00 	.word	0x50012c00
 8008d94:	40013400 	.word	0x40013400
 8008d98:	50013400 	.word	0x50013400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	50014000 	.word	0x50014000

08008da4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008de8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	041b      	lsls	r3, r3, #16
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a19      	ldr	r2, [pc, #100]	@ (8008e60 <TIM_OC5_SetConfig+0xbc>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d013      	beq.n	8008e26 <TIM_OC5_SetConfig+0x82>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a18      	ldr	r2, [pc, #96]	@ (8008e64 <TIM_OC5_SetConfig+0xc0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00f      	beq.n	8008e26 <TIM_OC5_SetConfig+0x82>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a17      	ldr	r2, [pc, #92]	@ (8008e68 <TIM_OC5_SetConfig+0xc4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00b      	beq.n	8008e26 <TIM_OC5_SetConfig+0x82>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a16      	ldr	r2, [pc, #88]	@ (8008e6c <TIM_OC5_SetConfig+0xc8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <TIM_OC5_SetConfig+0x82>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a15      	ldr	r2, [pc, #84]	@ (8008e70 <TIM_OC5_SetConfig+0xcc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_OC5_SetConfig+0x82>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a14      	ldr	r2, [pc, #80]	@ (8008e74 <TIM_OC5_SetConfig+0xd0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d109      	bne.n	8008e3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	50012c00 	.word	0x50012c00
 8008e68:	40013400 	.word	0x40013400
 8008e6c:	50013400 	.word	0x50013400
 8008e70:	40014000 	.word	0x40014000
 8008e74:	50014000 	.word	0x50014000

08008e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	051b      	lsls	r3, r3, #20
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a1a      	ldr	r2, [pc, #104]	@ (8008f38 <TIM_OC6_SetConfig+0xc0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <TIM_OC6_SetConfig+0x84>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a19      	ldr	r2, [pc, #100]	@ (8008f3c <TIM_OC6_SetConfig+0xc4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00f      	beq.n	8008efc <TIM_OC6_SetConfig+0x84>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a18      	ldr	r2, [pc, #96]	@ (8008f40 <TIM_OC6_SetConfig+0xc8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00b      	beq.n	8008efc <TIM_OC6_SetConfig+0x84>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a17      	ldr	r2, [pc, #92]	@ (8008f44 <TIM_OC6_SetConfig+0xcc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d007      	beq.n	8008efc <TIM_OC6_SetConfig+0x84>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a16      	ldr	r2, [pc, #88]	@ (8008f48 <TIM_OC6_SetConfig+0xd0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC6_SetConfig+0x84>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a15      	ldr	r2, [pc, #84]	@ (8008f4c <TIM_OC6_SetConfig+0xd4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d109      	bne.n	8008f10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	029b      	lsls	r3, r3, #10
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40012c00 	.word	0x40012c00
 8008f3c:	50012c00 	.word	0x50012c00
 8008f40:	40013400 	.word	0x40013400
 8008f44:	50013400 	.word	0x50013400
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	50014000 	.word	0x50014000

08008f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f023 0201 	bic.w	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f023 030a 	bic.w	r3, r3, #10
 8008f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	621a      	str	r2, [r3, #32]
}
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b087      	sub	sp, #28
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	f023 0210 	bic.w	r2, r3, #16
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	031b      	lsls	r3, r3, #12
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	f043 0307 	orr.w	r3, r3, #7
 8009034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	609a      	str	r2, [r3, #8]
}
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	021a      	lsls	r2, r3, #8
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	431a      	orrs	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4313      	orrs	r3, r2
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	4313      	orrs	r3, r2
 8009074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	609a      	str	r2, [r3, #8]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	2201      	movs	r2, #1
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	43db      	mvns	r3, r3
 80090aa:	401a      	ands	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1a      	ldr	r2, [r3, #32]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 031f 	and.w	r3, r3, #31
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
	...

080090d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e0a1      	b.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a4a      	ldr	r2, [pc, #296]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d00e      	beq.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a49      	ldr	r2, [pc, #292]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d009      	beq.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a47      	ldr	r2, [pc, #284]	@ (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d004      	beq.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a46      	ldr	r2, [pc, #280]	@ (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d108      	bne.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800913a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800914c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a34      	ldr	r2, [pc, #208]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d04a      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a33      	ldr	r2, [pc, #204]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d045      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009180:	d040      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800918a:	d03b      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a2e      	ldr	r2, [pc, #184]	@ (800924c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d036      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a2d      	ldr	r2, [pc, #180]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d031      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d02c      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d027      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a28      	ldr	r2, [pc, #160]	@ (800925c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d022      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a27      	ldr	r2, [pc, #156]	@ (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d01d      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a20      	ldr	r2, [pc, #128]	@ (8009264 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009268 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1d      	ldr	r2, [pc, #116]	@ (800926c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009270 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d10c      	bne.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800920a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4313      	orrs	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40012c00 	.word	0x40012c00
 8009240:	50012c00 	.word	0x50012c00
 8009244:	40013400 	.word	0x40013400
 8009248:	50013400 	.word	0x50013400
 800924c:	40000400 	.word	0x40000400
 8009250:	50000400 	.word	0x50000400
 8009254:	40000800 	.word	0x40000800
 8009258:	50000800 	.word	0x50000800
 800925c:	40000c00 	.word	0x40000c00
 8009260:	50000c00 	.word	0x50000c00
 8009264:	40001800 	.word	0x40001800
 8009268:	50001800 	.word	0x50001800
 800926c:	40014000 	.word	0x40014000
 8009270:	50014000 	.word	0x50014000

08009274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e042      	b.n	8009398 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7f8 fe97 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	@ 0x24
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f9d6 	bl	80096fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f825 	bl	80093a0 <UART_SetConfig>
 8009356:	4603      	mov	r3, r0
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e01b      	b.n	8009398 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800936e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800937e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fa55 	bl	8009840 <UART_CheckIdleState>
 8009396:	4603      	mov	r3, r0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093a4:	b094      	sub	sp, #80	@ 0x50
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	4b83      	ldr	r3, [pc, #524]	@ (80095c4 <UART_SetConfig+0x224>)
 80093b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	431a      	orrs	r2, r3
 80093c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	497c      	ldr	r1, [pc, #496]	@ (80095c8 <UART_SetConfig+0x228>)
 80093d8:	4019      	ands	r1, r3
 80093da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80093ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f0:	68d9      	ldr	r1, [r3, #12]
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	ea40 0301 	orr.w	r3, r0, r1
 80093fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b6f      	ldr	r3, [pc, #444]	@ (80095c4 <UART_SetConfig+0x224>)
 8009408:	429a      	cmp	r2, r3
 800940a:	d009      	beq.n	8009420 <UART_SetConfig+0x80>
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	4b6e      	ldr	r3, [pc, #440]	@ (80095cc <UART_SetConfig+0x22c>)
 8009412:	429a      	cmp	r2, r3
 8009414:	d004      	beq.n	8009420 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	6a1a      	ldr	r2, [r3, #32]
 800941a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800941c:	4313      	orrs	r3, r2
 800941e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800942a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009434:	430b      	orrs	r3, r1
 8009436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	f023 000f 	bic.w	r0, r3, #15
 8009442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009444:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	ea40 0301 	orr.w	r3, r0, r1
 800944e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	4b5e      	ldr	r3, [pc, #376]	@ (80095d0 <UART_SetConfig+0x230>)
 8009456:	429a      	cmp	r2, r3
 8009458:	d102      	bne.n	8009460 <UART_SetConfig+0xc0>
 800945a:	2301      	movs	r3, #1
 800945c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945e:	e032      	b.n	80094c6 <UART_SetConfig+0x126>
 8009460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b5b      	ldr	r3, [pc, #364]	@ (80095d4 <UART_SetConfig+0x234>)
 8009466:	429a      	cmp	r2, r3
 8009468:	d102      	bne.n	8009470 <UART_SetConfig+0xd0>
 800946a:	2302      	movs	r3, #2
 800946c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800946e:	e02a      	b.n	80094c6 <UART_SetConfig+0x126>
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	4b58      	ldr	r3, [pc, #352]	@ (80095d8 <UART_SetConfig+0x238>)
 8009476:	429a      	cmp	r2, r3
 8009478:	d102      	bne.n	8009480 <UART_SetConfig+0xe0>
 800947a:	2304      	movs	r3, #4
 800947c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800947e:	e022      	b.n	80094c6 <UART_SetConfig+0x126>
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b55      	ldr	r3, [pc, #340]	@ (80095dc <UART_SetConfig+0x23c>)
 8009486:	429a      	cmp	r2, r3
 8009488:	d102      	bne.n	8009490 <UART_SetConfig+0xf0>
 800948a:	2308      	movs	r3, #8
 800948c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800948e:	e01a      	b.n	80094c6 <UART_SetConfig+0x126>
 8009490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4b52      	ldr	r3, [pc, #328]	@ (80095e0 <UART_SetConfig+0x240>)
 8009496:	429a      	cmp	r2, r3
 8009498:	d102      	bne.n	80094a0 <UART_SetConfig+0x100>
 800949a:	2310      	movs	r3, #16
 800949c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800949e:	e012      	b.n	80094c6 <UART_SetConfig+0x126>
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4b4f      	ldr	r3, [pc, #316]	@ (80095e4 <UART_SetConfig+0x244>)
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d102      	bne.n	80094b0 <UART_SetConfig+0x110>
 80094aa:	2320      	movs	r3, #32
 80094ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ae:	e00a      	b.n	80094c6 <UART_SetConfig+0x126>
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4b43      	ldr	r3, [pc, #268]	@ (80095c4 <UART_SetConfig+0x224>)
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d103      	bne.n	80094c2 <UART_SetConfig+0x122>
 80094ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094c0:	e001      	b.n	80094c6 <UART_SetConfig+0x126>
 80094c2:	2300      	movs	r3, #0
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b3e      	ldr	r3, [pc, #248]	@ (80095c4 <UART_SetConfig+0x224>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d005      	beq.n	80094dc <UART_SetConfig+0x13c>
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b3d      	ldr	r3, [pc, #244]	@ (80095cc <UART_SetConfig+0x22c>)
 80094d6:	429a      	cmp	r2, r3
 80094d8:	f040 8088 	bne.w	80095ec <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094de:	2200      	movs	r2, #0
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80094e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80094e8:	f7fc fc20 	bl	8005d2c <HAL_RCCEx_GetPeriphCLKFreq>
 80094ec:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80094ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80eb 	beq.w	80096cc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fa:	4a3b      	ldr	r2, [pc, #236]	@ (80095e8 <UART_SetConfig+0x248>)
 80094fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009500:	461a      	mov	r2, r3
 8009502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009504:	fbb3 f3f2 	udiv	r3, r3, r2
 8009508:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	4413      	add	r3, r2
 8009514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009516:	429a      	cmp	r2, r3
 8009518:	d305      	bcc.n	8009526 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009522:	429a      	cmp	r2, r3
 8009524:	d903      	bls.n	800952e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800952c:	e048      	b.n	80095c0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009530:	2200      	movs	r2, #0
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	61fa      	str	r2, [r7, #28]
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953a:	4a2b      	ldr	r2, [pc, #172]	@ (80095e8 <UART_SetConfig+0x248>)
 800953c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009540:	b29b      	uxth	r3, r3
 8009542:	2200      	movs	r2, #0
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	617a      	str	r2, [r7, #20]
 8009548:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800954c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009550:	f7f7 fb2e 	bl	8000bb0 <__aeabi_uldivmod>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4610      	mov	r0, r2
 800955a:	4619      	mov	r1, r3
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	020b      	lsls	r3, r1, #8
 8009566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800956a:	0202      	lsls	r2, r0, #8
 800956c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800956e:	6849      	ldr	r1, [r1, #4]
 8009570:	0849      	lsrs	r1, r1, #1
 8009572:	2000      	movs	r0, #0
 8009574:	460c      	mov	r4, r1
 8009576:	4605      	mov	r5, r0
 8009578:	eb12 0804 	adds.w	r8, r2, r4
 800957c:	eb43 0905 	adc.w	r9, r3, r5
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	60bb      	str	r3, [r7, #8]
 8009588:	60fa      	str	r2, [r7, #12]
 800958a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f7 fb0d 	bl	8000bb0 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4613      	mov	r3, r2
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095a4:	d308      	bcc.n	80095b8 <UART_SetConfig+0x218>
 80095a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ac:	d204      	bcs.n	80095b8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80095b4:	60da      	str	r2, [r3, #12]
 80095b6:	e003      	b.n	80095c0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80095be:	e085      	b.n	80096cc <UART_SetConfig+0x32c>
 80095c0:	e084      	b.n	80096cc <UART_SetConfig+0x32c>
 80095c2:	bf00      	nop
 80095c4:	44002400 	.word	0x44002400
 80095c8:	cfff69f3 	.word	0xcfff69f3
 80095cc:	54002400 	.word	0x54002400
 80095d0:	40013800 	.word	0x40013800
 80095d4:	40004400 	.word	0x40004400
 80095d8:	40004800 	.word	0x40004800
 80095dc:	40004c00 	.word	0x40004c00
 80095e0:	40005000 	.word	0x40005000
 80095e4:	40006400 	.word	0x40006400
 80095e8:	0800a0a0 	.word	0x0800a0a0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095f4:	d13c      	bne.n	8009670 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80095f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f8:	2200      	movs	r2, #0
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009602:	f7fc fb93 	bl	8005d2c <HAL_RCCEx_GetPeriphCLKFreq>
 8009606:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d05e      	beq.n	80096cc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009612:	4a39      	ldr	r2, [pc, #228]	@ (80096f8 <UART_SetConfig+0x358>)
 8009614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009618:	461a      	mov	r2, r3
 800961a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800961c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009620:	005a      	lsls	r2, r3, #1
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	441a      	add	r2, r3
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009636:	2b0f      	cmp	r3, #15
 8009638:	d916      	bls.n	8009668 <UART_SetConfig+0x2c8>
 800963a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009640:	d212      	bcs.n	8009668 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009644:	b29b      	uxth	r3, r3
 8009646:	f023 030f 	bic.w	r3, r3, #15
 800964a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800964c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964e:	085b      	lsrs	r3, r3, #1
 8009650:	b29b      	uxth	r3, r3
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	b29a      	uxth	r2, r3
 8009658:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800965a:	4313      	orrs	r3, r2
 800965c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009664:	60da      	str	r2, [r3, #12]
 8009666:	e031      	b.n	80096cc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800966e:	e02d      	b.n	80096cc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009672:	2200      	movs	r2, #0
 8009674:	469a      	mov	sl, r3
 8009676:	4693      	mov	fp, r2
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7fc fb56 	bl	8005d2c <HAL_RCCEx_GetPeriphCLKFreq>
 8009680:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d021      	beq.n	80096cc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	4a1a      	ldr	r2, [pc, #104]	@ (80096f8 <UART_SetConfig+0x358>)
 800968e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009692:	461a      	mov	r2, r3
 8009694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009696:	fbb3 f2f2 	udiv	r2, r3, r2
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	441a      	add	r2, r3
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d909      	bls.n	80096c6 <UART_SetConfig+0x326>
 80096b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b8:	d205      	bcs.n	80096c6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096bc:	b29a      	uxth	r2, r3
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60da      	str	r2, [r3, #12]
 80096c4:	e002      	b.n	80096cc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	2201      	movs	r2, #1
 80096d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	2200      	movs	r2, #0
 80096e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	2200      	movs	r2, #0
 80096e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3750      	adds	r7, #80	@ 0x50
 80096f0:	46bd      	mov	sp, r7
 80096f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f6:	bf00      	nop
 80096f8:	0800a0a0 	.word	0x0800a0a0

080096fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009708:	f003 0308 	and.w	r3, r3, #8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976e:	f003 0304 	and.w	r3, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d01a      	beq.n	8009812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097fa:	d10a      	bne.n	8009812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
  }
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b098      	sub	sp, #96	@ 0x60
 8009844:	af02      	add	r7, sp, #8
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009850:	f7f8 ff6c 	bl	800272c <HAL_GetTick>
 8009854:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b08      	cmp	r3, #8
 8009862:	d12f      	bne.n	80098c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800986c:	2200      	movs	r2, #0
 800986e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f88e 	bl	8009994 <UART_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d022      	beq.n	80098c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800988c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009892:	653b      	str	r3, [r7, #80]	@ 0x50
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800989c:	647b      	str	r3, [r7, #68]	@ 0x44
 800989e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e6      	bne.n	800987e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e063      	b.n	800998c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d149      	bne.n	8009966 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098da:	2200      	movs	r2, #0
 80098dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f857 	bl	8009994 <UART_WaitOnFlagUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d03c      	beq.n	8009966 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	623b      	str	r3, [r7, #32]
   return(result);
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30
 800990c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e6      	bne.n	80098ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	60fb      	str	r3, [r7, #12]
   return(result);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f023 0301 	bic.w	r3, r3, #1
 8009934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3308      	adds	r3, #8
 800993c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800993e:	61fa      	str	r2, [r7, #28]
 8009940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	69b9      	ldr	r1, [r7, #24]
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	617b      	str	r3, [r7, #20]
   return(result);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e5      	bne.n	800991e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e012      	b.n	800998c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3758      	adds	r7, #88	@ 0x58
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	4613      	mov	r3, r2
 80099a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099a4:	e04f      	b.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d04b      	beq.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ae:	f7f8 febd 	bl	800272c <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d302      	bcc.n	80099c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e04e      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d037      	beq.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b80      	cmp	r3, #128	@ 0x80
 80099da:	d034      	beq.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b40      	cmp	r3, #64	@ 0x40
 80099e0:	d031      	beq.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f003 0308 	and.w	r3, r3, #8
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d110      	bne.n	8009a12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2208      	movs	r2, #8
 80099f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f838 	bl	8009a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2208      	movs	r2, #8
 8009a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e029      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a20:	d111      	bne.n	8009a46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f81e 	bl	8009a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e00f      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69da      	ldr	r2, [r3, #28]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	bf0c      	ite	eq
 8009a56:	2301      	moveq	r3, #1
 8009a58:	2300      	movne	r3, #0
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d0a0      	beq.n	80099a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b095      	sub	sp, #84	@ 0x54
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009abe:	f023 0301 	bic.w	r3, r3, #1
 8009ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e3      	bne.n	8009aa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d118      	bne.n	8009b1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f023 0310 	bic.w	r3, r3, #16
 8009afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6979      	ldr	r1, [r7, #20]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	613b      	str	r3, [r7, #16]
   return(result);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e6      	bne.n	8009ae8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b2e:	bf00      	nop
 8009b30:	3754      	adds	r7, #84	@ 0x54
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e027      	b.n	8009ba0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2224      	movs	r2, #36	@ 0x24
 8009b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e02d      	b.n	8009c20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2224      	movs	r2, #36	@ 0x24
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0201 	bic.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f84f 	bl	8009ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e02d      	b.n	8009c9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	@ 0x24
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0201 	bic.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f811 	bl	8009ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d108      	bne.n	8009cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc4:	e031      	b.n	8009d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cca:	2308      	movs	r3, #8
 8009ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	0e5b      	lsrs	r3, r3, #25
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	0f5b      	lsrs	r3, r3, #29
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0307 	and.w	r3, r3, #7
 8009cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	7b3a      	ldrb	r2, [r7, #12]
 8009cf2:	4911      	ldr	r1, [pc, #68]	@ (8009d38 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf4:	5c8a      	ldrb	r2, [r1, r2]
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cfa:	7b3a      	ldrb	r2, [r7, #12]
 8009cfc:	490f      	ldr	r1, [pc, #60]	@ (8009d3c <UARTEx_SetNbDataToProcess+0x98>)
 8009cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	7b7a      	ldrb	r2, [r7, #13]
 8009d10:	4909      	ldr	r1, [pc, #36]	@ (8009d38 <UARTEx_SetNbDataToProcess+0x94>)
 8009d12:	5c8a      	ldrb	r2, [r1, r2]
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d18:	7b7a      	ldrb	r2, [r7, #13]
 8009d1a:	4908      	ldr	r1, [pc, #32]	@ (8009d3c <UARTEx_SetNbDataToProcess+0x98>)
 8009d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	0800a0b8 	.word	0x0800a0b8
 8009d3c:	0800a0c0 	.word	0x0800a0c0

08009d40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d48:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009d4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	43db      	mvns	r3, r3
 8009d56:	401a      	ands	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d106      	bne.n	8009d8a <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	641a      	str	r2, [r3, #64]	@ 0x40
 8009d88:	e00b      	b.n	8009da2 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d106      	bne.n	8009d9e <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8009d9c:	e001      	b.n	8009da2 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009db0:	b084      	sub	sp, #16
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	f107 001c 	add.w	r0, r7, #28
 8009dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dcc:	f023 0201 	bic.w	r2, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff ffc7 	bl	8009d6a <USB_SetCurrentMode>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009df2:	b004      	add	sp, #16
 8009df4:	4770      	bx	lr

08009df6 <memset>:
 8009df6:	4402      	add	r2, r0
 8009df8:	4603      	mov	r3, r0
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d100      	bne.n	8009e00 <memset+0xa>
 8009dfe:	4770      	bx	lr
 8009e00:	f803 1b01 	strb.w	r1, [r3], #1
 8009e04:	e7f9      	b.n	8009dfa <memset+0x4>
	...

08009e08 <__errno>:
 8009e08:	4b01      	ldr	r3, [pc, #4]	@ (8009e10 <__errno+0x8>)
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000018 	.word	0x20000018

08009e14 <__libc_init_array>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4d0d      	ldr	r5, [pc, #52]	@ (8009e4c <__libc_init_array+0x38>)
 8009e18:	2600      	movs	r6, #0
 8009e1a:	4c0d      	ldr	r4, [pc, #52]	@ (8009e50 <__libc_init_array+0x3c>)
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	d109      	bne.n	8009e38 <__libc_init_array+0x24>
 8009e24:	4d0b      	ldr	r5, [pc, #44]	@ (8009e54 <__libc_init_array+0x40>)
 8009e26:	2600      	movs	r6, #0
 8009e28:	4c0b      	ldr	r4, [pc, #44]	@ (8009e58 <__libc_init_array+0x44>)
 8009e2a:	f000 f921 	bl	800a070 <_init>
 8009e2e:	1b64      	subs	r4, r4, r5
 8009e30:	10a4      	asrs	r4, r4, #2
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	d105      	bne.n	8009e42 <__libc_init_array+0x2e>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	4798      	blx	r3
 8009e40:	e7ee      	b.n	8009e20 <__libc_init_array+0xc>
 8009e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e46:	3601      	adds	r6, #1
 8009e48:	4798      	blx	r3
 8009e4a:	e7f2      	b.n	8009e32 <__libc_init_array+0x1e>
 8009e4c:	0800a0d0 	.word	0x0800a0d0
 8009e50:	0800a0d0 	.word	0x0800a0d0
 8009e54:	0800a0d0 	.word	0x0800a0d0
 8009e58:	0800a0d4 	.word	0x0800a0d4

08009e5c <sqrt>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	ec55 4b10 	vmov	r4, r5, d0
 8009e62:	ed2d 8b02 	vpush	{d8}
 8009e66:	f000 f825 	bl	8009eb4 <__ieee754_sqrt>
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	eeb0 8a40 	vmov.f32	s16, s0
 8009e76:	eef0 8a60 	vmov.f32	s17, s1
 8009e7a:	f7f6 fe63 	bl	8000b44 <__aeabi_dcmpun>
 8009e7e:	b990      	cbnz	r0, 8009ea6 <sqrt+0x4a>
 8009e80:	2200      	movs	r2, #0
 8009e82:	2300      	movs	r3, #0
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 fe34 	bl	8000af4 <__aeabi_dcmplt>
 8009e8c:	b158      	cbz	r0, 8009ea6 <sqrt+0x4a>
 8009e8e:	f7ff ffbb 	bl	8009e08 <__errno>
 8009e92:	2321      	movs	r3, #33	@ 0x21
 8009e94:	2200      	movs	r2, #0
 8009e96:	6003      	str	r3, [r0, #0]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f7f6 fce1 	bl	8000864 <__aeabi_ddiv>
 8009ea2:	ec41 0b18 	vmov	d8, r0, r1
 8009ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8009eaa:	eef0 0a68 	vmov.f32	s1, s17
 8009eae:	ecbd 8b02 	vpop	{d8}
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}

08009eb4 <__ieee754_sqrt>:
 8009eb4:	4a6b      	ldr	r2, [pc, #428]	@ (800a064 <__ieee754_sqrt+0x1b0>)
 8009eb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	ec55 4b10 	vmov	r4, r5, d0
 8009ebe:	43aa      	bics	r2, r5
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	d110      	bne.n	8009ee8 <__ieee754_sqrt+0x34>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4629      	mov	r1, r5
 8009ecc:	f7f6 fba0 	bl	8000610 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 f9e4 	bl	80002a4 <__adddf3>
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	ec45 4b10 	vmov	d0, r4, r5
 8009ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	2d00      	cmp	r5, #0
 8009eea:	dc0e      	bgt.n	8009f0a <__ieee754_sqrt+0x56>
 8009eec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009ef0:	4322      	orrs	r2, r4
 8009ef2:	d0f5      	beq.n	8009ee0 <__ieee754_sqrt+0x2c>
 8009ef4:	b19d      	cbz	r5, 8009f1e <__ieee754_sqrt+0x6a>
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f9d0 	bl	80002a0 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	f7f6 fcae 	bl	8000864 <__aeabi_ddiv>
 8009f08:	e7e8      	b.n	8009edc <__ieee754_sqrt+0x28>
 8009f0a:	152a      	asrs	r2, r5, #20
 8009f0c:	d115      	bne.n	8009f3a <__ieee754_sqrt+0x86>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	e009      	b.n	8009f26 <__ieee754_sqrt+0x72>
 8009f12:	0acb      	lsrs	r3, r1, #11
 8009f14:	3a15      	subs	r2, #21
 8009f16:	0549      	lsls	r1, r1, #21
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d0fa      	beq.n	8009f12 <__ieee754_sqrt+0x5e>
 8009f1c:	e7f7      	b.n	8009f0e <__ieee754_sqrt+0x5a>
 8009f1e:	462a      	mov	r2, r5
 8009f20:	e7fa      	b.n	8009f18 <__ieee754_sqrt+0x64>
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	3001      	adds	r0, #1
 8009f26:	02dc      	lsls	r4, r3, #11
 8009f28:	d5fb      	bpl.n	8009f22 <__ieee754_sqrt+0x6e>
 8009f2a:	1e44      	subs	r4, r0, #1
 8009f2c:	1b12      	subs	r2, r2, r4
 8009f2e:	f1c0 0420 	rsb	r4, r0, #32
 8009f32:	fa21 f404 	lsr.w	r4, r1, r4
 8009f36:	4081      	lsls	r1, r0
 8009f38:	4323      	orrs	r3, r4
 8009f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f3e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009f42:	07d2      	lsls	r2, r2, #31
 8009f44:	f04f 0600 	mov.w	r6, #0
 8009f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f4c:	ea4f 0565 	mov.w	r5, r5, asr #1
 8009f50:	f04f 0016 	mov.w	r0, #22
 8009f54:	4632      	mov	r2, r6
 8009f56:	bf58      	it	pl
 8009f58:	005b      	lslpl	r3, r3, #1
 8009f5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009f5e:	bf5c      	itt	pl
 8009f60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009f64:	0049      	lslpl	r1, r1, #1
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009f6c:	0049      	lsls	r1, r1, #1
 8009f6e:	1917      	adds	r7, r2, r4
 8009f70:	429f      	cmp	r7, r3
 8009f72:	bfde      	ittt	le
 8009f74:	193a      	addle	r2, r7, r4
 8009f76:	1bdb      	suble	r3, r3, r7
 8009f78:	1936      	addle	r6, r6, r4
 8009f7a:	0fcf      	lsrs	r7, r1, #31
 8009f7c:	3801      	subs	r0, #1
 8009f7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009f82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009f86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009f8a:	d1f0      	bne.n	8009f6e <__ieee754_sqrt+0xba>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2720      	movs	r7, #32
 8009f90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009f94:	429a      	cmp	r2, r3
 8009f96:	eb00 0e0c 	add.w	lr, r0, ip
 8009f9a:	db02      	blt.n	8009fa2 <__ieee754_sqrt+0xee>
 8009f9c:	d113      	bne.n	8009fc6 <__ieee754_sqrt+0x112>
 8009f9e:	458e      	cmp	lr, r1
 8009fa0:	d811      	bhi.n	8009fc6 <__ieee754_sqrt+0x112>
 8009fa2:	f1be 0f00 	cmp.w	lr, #0
 8009fa6:	eb0e 000c 	add.w	r0, lr, ip
 8009faa:	da43      	bge.n	800a034 <__ieee754_sqrt+0x180>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	db41      	blt.n	800a034 <__ieee754_sqrt+0x180>
 8009fb0:	f102 0801 	add.w	r8, r2, #1
 8009fb4:	1a9b      	subs	r3, r3, r2
 8009fb6:	458e      	cmp	lr, r1
 8009fb8:	4464      	add	r4, ip
 8009fba:	eba1 010e 	sub.w	r1, r1, lr
 8009fbe:	bf88      	it	hi
 8009fc0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009fca:	3f01      	subs	r7, #1
 8009fcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009fd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009fd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009fd8:	d1dc      	bne.n	8009f94 <__ieee754_sqrt+0xe0>
 8009fda:	4319      	orrs	r1, r3
 8009fdc:	d01b      	beq.n	800a016 <__ieee754_sqrt+0x162>
 8009fde:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800a068 <__ieee754_sqrt+0x1b4>
 8009fe2:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800a06c <__ieee754_sqrt+0x1b8>
 8009fe6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009fea:	e9db 2300 	ldrd	r2, r3, [fp]
 8009fee:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ff2:	f7f6 f955 	bl	80002a0 <__aeabi_dsub>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	f7f6 fd83 	bl	8000b08 <__aeabi_dcmple>
 800a002:	b140      	cbz	r0, 800a016 <__ieee754_sqrt+0x162>
 800a004:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a008:	e9da 0100 	ldrd	r0, r1, [sl]
 800a00c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a010:	d112      	bne.n	800a038 <__ieee754_sqrt+0x184>
 800a012:	3601      	adds	r6, #1
 800a014:	463c      	mov	r4, r7
 800a016:	1072      	asrs	r2, r6, #1
 800a018:	07f1      	lsls	r1, r6, #31
 800a01a:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800a01e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a022:	bf48      	it	mi
 800a024:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a028:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a02c:	4618      	mov	r0, r3
 800a02e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a032:	e753      	b.n	8009edc <__ieee754_sqrt+0x28>
 800a034:	4690      	mov	r8, r2
 800a036:	e7bd      	b.n	8009fb4 <__ieee754_sqrt+0x100>
 800a038:	e9da 8900 	ldrd	r8, r9, [sl]
 800a03c:	f7f6 f932 	bl	80002a4 <__adddf3>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 fd54 	bl	8000af4 <__aeabi_dcmplt>
 800a04c:	b128      	cbz	r0, 800a05a <__ieee754_sqrt+0x1a6>
 800a04e:	1ca0      	adds	r0, r4, #2
 800a050:	f104 0402 	add.w	r4, r4, #2
 800a054:	bf08      	it	eq
 800a056:	3601      	addeq	r6, #1
 800a058:	e7dd      	b.n	800a016 <__ieee754_sqrt+0x162>
 800a05a:	1c63      	adds	r3, r4, #1
 800a05c:	f023 0401 	bic.w	r4, r3, #1
 800a060:	e7d9      	b.n	800a016 <__ieee754_sqrt+0x162>
 800a062:	bf00      	nop
 800a064:	7ff00000 	.word	0x7ff00000
 800a068:	20000070 	.word	0x20000070
 800a06c:	20000068 	.word	0x20000068

0800a070 <_init>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr

0800a07c <_fini>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	bf00      	nop
 800a080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a082:	bc08      	pop	{r3}
 800a084:	469e      	mov	lr, r3
 800a086:	4770      	bx	lr
