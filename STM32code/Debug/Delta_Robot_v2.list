
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff88  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080101e0  080101e0  000111e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c88  08010c88  00012200  2**0
                  CONTENTS
  4 .ARM          00000008  08010c88  08010c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c90  08010c90  00012200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c90  08010c90  00011c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010c94  08010c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08010c98  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  20000200  08010e98  00012200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b3c4  08010e98  000123c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219d0  00000000  00000000  00012236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004039  00000000  00000000  00033c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00037c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a2  00000000  00000000  00039810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fa0b  00000000  00000000  0003adb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248dd  00000000  00000000  0006a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012707f  00000000  00000000  0008f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b6119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d64  00000000  00000000  001b615c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001beec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000200 	.word	0x20000200
 8000274:	00000000 	.word	0x00000000
 8000278:	080101c8 	.word	0x080101c8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000204 	.word	0x20000204
 8000294:	080101c8 	.word	0x080101c8

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Hall_Sensor_Read_Magnitude>:
 */

#include "AS5048A_P.h"

uint16_t Hall_Sensor_Read_Magnitude(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af02      	add	r7, sp, #8
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = magnitude_adress;
 8001042:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001046:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f002 ff36 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001054:	f107 0216 	add.w	r2, r7, #22
 8001058:	f107 0116 	add.w	r1, r7, #22
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f007 fcae 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f002 ff26 	bl	8003ec0 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f002 ff1e 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001084:	f107 0216 	add.w	r2, r7, #22
 8001088:	f107 0116 	add.w	r1, r7, #22
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f007 fc96 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f002 ff0e 	bl	8003ec0 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 80010a4:	2300      	movs	r3, #0
 80010a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f002 ff06 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010b4:	f107 0216 	add.w	r2, r7, #22
 80010b8:	f107 0116 	add.w	r1, r7, #22
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f007 fc7e 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f002 fef6 	bl	8003ec0 <HAL_GPIO_WritePin>
	return tmp;
 80010d4:	8afb      	ldrh	r3, [r7, #22]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <Hall_Sensor_Read_Angle>:



uint16_t Hall_Sensor_Read_Angle(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = angle_adress;
 80010ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f0:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f002 fee1 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010fe:	f107 0216 	add.w	r2, r7, #22
 8001102:	f107 0116 	add.w	r1, r7, #22
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f007 fc59 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f002 fed1 	bl	8003ec0 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800111e:	2300      	movs	r3, #0
 8001120:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f002 fec9 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800112e:	f107 0216 	add.w	r2, r7, #22
 8001132:	f107 0116 	add.w	r1, r7, #22
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f007 fc41 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f002 feb9 	bl	8003ec0 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f002 feb1 	bl	8003ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800115e:	f107 0216 	add.w	r2, r7, #22
 8001162:	f107 0116 	add.w	r1, r7, #22
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f007 fc29 	bl	80089c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f002 fea1 	bl	8003ec0 <HAL_GPIO_WritePin>
	return tmp;
 800117e:	8afb      	ldrh	r3, [r7, #22]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <Relay_0_Set+0x14>)
 8001192:	f002 fe95 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42020800 	.word	0x42020800

080011a0 <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <Relay_0_Reset+0x14>)
 80011aa:	f002 fe89 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	42020800 	.word	0x42020800

080011b8 <Relay_0_Read>:

uint8_t Relay_0_Read(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RELAY0_PORT, RELAY0_PIN);
 80011bc:	2110      	movs	r1, #16
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Relay_0_Read+0x14>)
 80011c0:	f002 fe66 	bl	8003e90 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	42020800 	.word	0x42020800

080011d0 <Relay_1_Set>:

void Relay_1_Set(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <Relay_1_Set+0x14>)
 80011dc:	f002 fe70 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	42020400 	.word	0x42020400

080011e8 <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	4802      	ldr	r0, [pc, #8]	@ (80011fc <Relay_1_Reset+0x14>)
 80011f4:	f002 fe64 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	42020400 	.word	0x42020400

08001200 <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0f0      	sub	sp, #448	@ 0x1c0
 8001204:	af00      	add	r7, sp, #0
 8001206:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800120a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800120e:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 8001210:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001214:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001218:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <Menu_UART_Start+0x84>)
 800121a:	4618      	mov	r0, r3
 800121c:	4611      	mov	r1, r2
 800121e:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001222:	461a      	mov	r2, r3
 8001224:	f00b fbdf 	bl	800c9e6 <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800122e:	e013      	b.n	8001258 <Menu_UART_Start+0x58>
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001238:	18d1      	adds	r1, r2, r3
 800123a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800123e:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	2201      	movs	r2, #1
 8001248:	6800      	ldr	r0, [r0, #0]
 800124a:	f009 fc81 	bl	800ab50 <HAL_UART_Transmit>
 800124e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001252:	3301      	adds	r3, #1
 8001254:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001258:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800125c:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 8001260:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e1      	bne.n	8001230 <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 800126c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001270:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f000 f807 	bl	8001288 <Menu_UART_Update>
}
 800127a:	bf00      	nop
 800127c:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080101e0 	.word	0x080101e0

08001288 <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <Menu_UART_Update+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000

080012a4 <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b09c      	sub	sp, #112	@ 0x70
 80012a8:	af06      	add	r7, sp, #24
 80012aa:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80012ac:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b6:	2224      	movs	r2, #36	@ 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00b fb05 	bl	800c8ca <memset>
	uint32_t poz0;
	uint32_t poz1;
	uint32_t poz2;

	uint8_t *Menu_Main[] = {
 80012c0:	4b75      	ldr	r3, [pc, #468]	@ (8001498 <Menu_UART_Main+0x1f4>)
 80012c2:	f107 040c 	add.w	r4, r7, #12
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012d0:	e884 0003 	stmia.w	r4, {r0, r1}
			"Set a",
			"Move to motor poz",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2206      	movs	r2, #6
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc27 	bl	8001b30 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 80012e2:	2300      	movs	r3, #0
 80012e4:	813b      	strh	r3, [r7, #8]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80012e6:	f107 0108 	add.w	r1, r7, #8
 80012ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ee:	2201      	movs	r2, #1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f009 fccb 	bl	800ac8c <HAL_UART_Receive>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f040 81d3 	bne.w	80016a4 <Menu_UART_Main+0x400>
		{
			switch (rx_buff[0])
 80012fe:	7a3b      	ldrb	r3, [r7, #8]
 8001300:	3b30      	subs	r3, #48	@ 0x30
 8001302:	2b05      	cmp	r3, #5
 8001304:	f200 81d0 	bhi.w	80016a8 <Menu_UART_Main+0x404>
 8001308:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <Menu_UART_Main+0x6c>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001329 	.word	0x08001329
 8001314:	080013a3 	.word	0x080013a3
 8001318:	0800141d 	.word	0x0800141d
 800131c:	080014c1 	.word	0x080014c1
 8001320:	08001693 	.word	0x08001693
 8001324:	0800169b 	.word	0x0800169b
			{
				case '0':
					sprintf(tx_buff, "\r\nf MAX was: %d\r\n",Get_f_MAX());
 8001328:	f000 ff44 	bl	80021b4 <Get_f_MAX>
 800132c:	4602      	mov	r2, r0
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	495a      	ldr	r1, [pc, #360]	@ (800149c <Menu_UART_Main+0x1f8>)
 8001334:	4618      	mov	r0, r3
 8001336:	f00b fa65 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fc3f 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input f MAX\r\n");
 8001346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134a:	4a55      	ldr	r2, [pc, #340]	@ (80014a0 <Menu_UART_Main+0x1fc>)
 800134c:	461c      	mov	r4, r3
 800134e:	4613      	mov	r3, r2
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	c407      	stmia	r4!, {r0, r1, r2}
 8001354:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fc31 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	2214      	movs	r2, #20
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fc49 	bl	8001c02 <UART_In>
					Set_f_MAX(atoi(tx_buff));
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	4618      	mov	r0, r3
 8001376:	f00a fa8c 	bl	800b892 <atoi>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fee9 	bl	8002154 <Set_f_MAX>
					sprintf(tx_buff, "New f MAX is: %d\r\n",Get_f_MAX());
 8001382:	f000 ff17 	bl	80021b4 <Get_f_MAX>
 8001386:	4602      	mov	r2, r0
 8001388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138c:	4945      	ldr	r1, [pc, #276]	@ (80014a4 <Menu_UART_Main+0x200>)
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fa38 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fc12 	bl	8001bc4 <UART_Out>
					break;
 80013a0:	e17f      	b.n	80016a2 <Menu_UART_Main+0x3fe>
				case '1':
					sprintf(tx_buff, "\r\nf MIN was: %d\r\n",Get_f_MIN());
 80013a2:	f000 ff13 	bl	80021cc <Get_f_MIN>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ac:	493e      	ldr	r1, [pc, #248]	@ (80014a8 <Menu_UART_Main+0x204>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00b fa28 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fc02 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input f MIN\r\n");
 80013c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c4:	4a39      	ldr	r2, [pc, #228]	@ (80014ac <Menu_UART_Main+0x208>)
 80013c6:	461c      	mov	r4, r3
 80013c8:	4613      	mov	r3, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	c407      	stmia	r4!, {r0, r1, r2}
 80013ce:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80013d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fbf4 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	2214      	movs	r2, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fc0c 	bl	8001c02 <UART_In>
					Set_f_MIN(atoi(tx_buff));
 80013ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00a fa4f 	bl	800b892 <atoi>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 febc 	bl	8002174 <Set_f_MIN>
					sprintf(tx_buff, "New f MIN is: %d\r\n",Get_f_MIN());
 80013fc:	f000 fee6 	bl	80021cc <Get_f_MIN>
 8001400:	4602      	mov	r2, r0
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	492a      	ldr	r1, [pc, #168]	@ (80014b0 <Menu_UART_Main+0x20c>)
 8001408:	4618      	mov	r0, r3
 800140a:	f00b f9fb 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fbd5 	bl	8001bc4 <UART_Out>
					break;
 800141a:	e142      	b.n	80016a2 <Menu_UART_Main+0x3fe>
				case '2':
					sprintf(tx_buff, "\r\na MAX was: %d\r\n",Get_a_MAX());
 800141c:	f000 fee2 	bl	80021e4 <Get_a_MAX>
 8001420:	4602      	mov	r2, r0
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4923      	ldr	r1, [pc, #140]	@ (80014b4 <Menu_UART_Main+0x210>)
 8001428:	4618      	mov	r0, r3
 800142a:	f00b f9eb 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fbc5 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input a MAX\r\n");
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <Menu_UART_Main+0x214>)
 8001440:	461c      	mov	r4, r3
 8001442:	4613      	mov	r3, r2
 8001444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001446:	c407      	stmia	r4!, {r0, r1, r2}
 8001448:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fbb7 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	2214      	movs	r2, #20
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fbcf 	bl	8001c02 <UART_In>
					Set_a_MAX(atoi(tx_buff));
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	4618      	mov	r0, r3
 800146a:	f00a fa12 	bl	800b892 <atoi>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fe8f 	bl	8002194 <Set_a_MAX>
					sprintf(tx_buff, "New a MAX is: %d\r\n",Get_a_MAX());
 8001476:	f000 feb5 	bl	80021e4 <Get_a_MAX>
 800147a:	4602      	mov	r2, r0
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	490e      	ldr	r1, [pc, #56]	@ (80014bc <Menu_UART_Main+0x218>)
 8001482:	4618      	mov	r0, r3
 8001484:	f00b f9be 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb98 	bl	8001bc4 <UART_Out>
					break;
 8001494:	e105      	b.n	80016a2 <Menu_UART_Main+0x3fe>
 8001496:	bf00      	nop
 8001498:	080105b8 	.word	0x080105b8
 800149c:	08010390 	.word	0x08010390
 80014a0:	080103a4 	.word	0x080103a4
 80014a4:	080103b4 	.word	0x080103b4
 80014a8:	080103c8 	.word	0x080103c8
 80014ac:	080103dc 	.word	0x080103dc
 80014b0:	080103ec 	.word	0x080103ec
 80014b4:	08010400 	.word	0x08010400
 80014b8:	08010414 	.word	0x08010414
 80014bc:	08010424 	.word	0x08010424
				case '3':
					sprintf(tx_buff, "\r\nMotor 0 poz was: %d\r\n",M_Poz_0());
 80014c0:	f000 fe9c 	bl	80021fc <M_Poz_0>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	497a      	ldr	r1, [pc, #488]	@ (80016b4 <Menu_UART_Main+0x410>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00b f999 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb73 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input motor 0 poz\r\n");
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4a75      	ldr	r2, [pc, #468]	@ (80016b8 <Menu_UART_Main+0x414>)
 80014e4:	461c      	mov	r4, r3
 80014e6:	4615      	mov	r5, r2
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fb64 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 80014fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001500:	2214      	movs	r2, #20
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fb7c 	bl	8001c02 <UART_In>
					poz0 = atoi(tx_buff);
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	4618      	mov	r0, r3
 8001510:	f00a f9bf 	bl	800b892 <atoi>
 8001514:	4603      	mov	r3, r0
 8001516:	657b      	str	r3, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New motor 0 poz will be: %d\r\n",poz0);
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800151e:	4967      	ldr	r1, [pc, #412]	@ (80016bc <Menu_UART_Main+0x418>)
 8001520:	4618      	mov	r0, r3
 8001522:	f00b f96f 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fb49 	bl	8001bc4 <UART_Out>

					sprintf(tx_buff, "\r\nMotor 1 poz was: %d\r\n",M_Poz_1());
 8001532:	f000 fe6f 	bl	8002214 <M_Poz_1>
 8001536:	4602      	mov	r2, r0
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4960      	ldr	r1, [pc, #384]	@ (80016c0 <Menu_UART_Main+0x41c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f00b f960 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fb3a 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input motor 1 poz\r\n");
 8001550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001554:	4a5b      	ldr	r2, [pc, #364]	@ (80016c4 <Menu_UART_Main+0x420>)
 8001556:	461c      	mov	r4, r3
 8001558:	4615      	mov	r5, r2
 800155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8001562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fb2b 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	2214      	movs	r2, #20
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fb43 	bl	8001c02 <UART_In>
					poz1 = atoi(tx_buff);
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4618      	mov	r0, r3
 8001582:	f00a f986 	bl	800b892 <atoi>
 8001586:	4603      	mov	r3, r0
 8001588:	653b      	str	r3, [r7, #80]	@ 0x50
					sprintf(tx_buff, "New motor 1 poz will be: %d\r\n",poz1);
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001590:	494d      	ldr	r1, [pc, #308]	@ (80016c8 <Menu_UART_Main+0x424>)
 8001592:	4618      	mov	r0, r3
 8001594:	f00b f936 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fb10 	bl	8001bc4 <UART_Out>

					sprintf(tx_buff, "\r\nMotor 2 poz was: %d\r\n",M_Poz_2());
 80015a4:	f000 fe42 	bl	800222c <M_Poz_2>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4947      	ldr	r1, [pc, #284]	@ (80016cc <Menu_UART_Main+0x428>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00b f927 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fb01 	bl	8001bc4 <UART_Out>
					strcpy(tx_buff, "Input motor 2 poz\r\n");
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4a42      	ldr	r2, [pc, #264]	@ (80016d0 <Menu_UART_Main+0x42c>)
 80015c8:	461c      	mov	r4, r3
 80015ca:	4615      	mov	r5, r2
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 faf2 	bl	8001bc4 <UART_Out>
					UART_In(huart, tx_buff, 20);
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	2214      	movs	r2, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb0a 	bl	8001c02 <UART_In>
					poz2 = atoi(tx_buff);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00a f94d 	bl	800b892 <atoi>
 80015f8:	4603      	mov	r3, r0
 80015fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
					sprintf(tx_buff, "New motor 2 poz will be: %d\r\n",poz2);
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001602:	4934      	ldr	r1, [pc, #208]	@ (80016d4 <Menu_UART_Main+0x430>)
 8001604:	4618      	mov	r0, r3
 8001606:	f00b f8fd 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fad7 	bl	8001bc4 <UART_Out>

					move(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8001616:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001618:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800161a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800161c:	230c      	movs	r3, #12
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <Menu_UART_Main+0x434>)
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	2304      	movs	r3, #4
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <Menu_UART_Main+0x438>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2300      	movs	r3, #0
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <Menu_UART_Main+0x43c>)
 8001632:	f000 fc95 	bl	8001f60 <move>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 8001636:	f000 fde1 	bl	80021fc <M_Poz_0>
 800163a:	4602      	mov	r2, r0
 800163c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001640:	4928      	ldr	r1, [pc, #160]	@ (80016e4 <Menu_UART_Main+0x440>)
 8001642:	4618      	mov	r0, r3
 8001644:	f00b f8de 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fab8 	bl	8001bc4 <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 8001654:	f000 fdde 	bl	8002214 <M_Poz_1>
 8001658:	4602      	mov	r2, r0
 800165a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165e:	4922      	ldr	r1, [pc, #136]	@ (80016e8 <Menu_UART_Main+0x444>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00b f8cf 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 faa9 	bl	8001bc4 <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 8001672:	f000 fddb 	bl	800222c <M_Poz_2>
 8001676:	4602      	mov	r2, r0
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	491b      	ldr	r1, [pc, #108]	@ (80016ec <Menu_UART_Main+0x448>)
 800167e:	4618      	mov	r0, r3
 8001680:	f00b f8c0 	bl	800c804 <siprintf>
					UART_Out(huart, tx_buff);
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fa9a 	bl	8001bc4 <UART_Out>
					break;
 8001690:	e007      	b.n	80016a2 <Menu_UART_Main+0x3fe>
				case '4':
					Menu_State = Menu_UART_Relay;
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <Menu_UART_Main+0x44c>)
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <Menu_UART_Main+0x450>)
 8001696:	601a      	str	r2, [r3, #0]
					break;
 8001698:	e003      	b.n	80016a2 <Menu_UART_Main+0x3fe>
				case '5':
					Menu_State = Menu_UART_Sensors;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <Menu_UART_Main+0x44c>)
 800169c:	4a16      	ldr	r2, [pc, #88]	@ (80016f8 <Menu_UART_Main+0x454>)
 800169e:	601a      	str	r2, [r3, #0]
					break;
 80016a0:	bf00      	nop
			}
			break;
 80016a2:	e001      	b.n	80016a8 <Menu_UART_Main+0x404>
		} else {
			__NOP();
 80016a4:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80016a6:	e61e      	b.n	80012e6 <Menu_UART_Main+0x42>
			break;
 80016a8:	bf00      	nop
		}
	}
}
 80016aa:	bf00      	nop
 80016ac:	3758      	adds	r7, #88	@ 0x58
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	08010438 	.word	0x08010438
 80016b8:	08010450 	.word	0x08010450
 80016bc:	08010464 	.word	0x08010464
 80016c0:	08010484 	.word	0x08010484
 80016c4:	0801049c 	.word	0x0801049c
 80016c8:	080104b0 	.word	0x080104b0
 80016cc:	080104d0 	.word	0x080104d0
 80016d0:	080104e8 	.word	0x080104e8
 80016d4:	080104fc 	.word	0x080104fc
 80016d8:	2003acf0 	.word	0x2003acf0
 80016dc:	2003aca4 	.word	0x2003aca4
 80016e0:	2003ad3c 	.word	0x2003ad3c
 80016e4:	0801051c 	.word	0x0801051c
 80016e8:	08010534 	.word	0x08010534
 80016ec:	0801054c 	.word	0x0801054c
 80016f0:	20000000 	.word	0x20000000
 80016f4:	0800194d 	.word	0x0800194d
 80016f8:	08001701 	.word	0x08001701
 80016fc:	00000000 	.word	0x00000000

08001700 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8001708:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001712:	2224      	movs	r2, #36	@ 0x24
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00b f8d7 	bl	800c8ca <memset>

	uint8_t *Menu_Sensor[] = {
 800171c:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <Menu_UART_Sensors+0x218>)
 800171e:	f107 040c 	add.w	r4, r7, #12
 8001722:	461d      	mov	r5, r3
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2207      	movs	r2, #7
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f9f9 	bl	8001b30 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 800173e:	2300      	movs	r3, #0
 8001740:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	2201      	movs	r2, #1
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f009 fa9d 	bl	800ac8c <HAL_UART_Receive>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80d4 	bne.w	8001902 <Menu_UART_Sensors+0x202>
			{
				switch (rx_buff[0])
 800175a:	7a3b      	ldrb	r3, [r7, #8]
 800175c:	3b30      	subs	r3, #48	@ 0x30
 800175e:	2b06      	cmp	r3, #6
 8001760:	f200 80d1 	bhi.w	8001906 <Menu_UART_Sensors+0x206>
 8001764:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <Menu_UART_Sensors+0x6c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	08001789 	.word	0x08001789
 8001770:	080017d9 	.word	0x080017d9
 8001774:	08001805 	.word	0x08001805
 8001778:	08001855 	.word	0x08001855
 800177c:	08001881 	.word	0x08001881
 8001780:	080018cf 	.word	0x080018cf
 8001784:	080018f9 	.word	0x080018f9
				{
					case '0':
						sprintf(tx_buff, "\r\nHALL 0 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF));
 8001788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800178c:	4963      	ldr	r1, [pc, #396]	@ (800191c <Menu_UART_Sensors+0x21c>)
 800178e:	4864      	ldr	r0, [pc, #400]	@ (8001920 <Menu_UART_Sensors+0x220>)
 8001790:	f7ff fca5 	bl	80010de <Hall_Sensor_Read_Angle>
 8001794:	4603      	mov	r3, r0
 8001796:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fed6 	bl	800054c <__aeabi_i2d>
 80017a0:	a35b      	add	r3, pc, #364	@ (adr r3, 8001910 <Menu_UART_Sensors+0x210>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f865 	bl	8000874 <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001924 <Menu_UART_Sensors+0x224>)
 80017b8:	f7fe ff32 	bl	8000620 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80017c4:	4958      	ldr	r1, [pc, #352]	@ (8001928 <Menu_UART_Sensors+0x228>)
 80017c6:	f00b f81d 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 80017ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f9f7 	bl	8001bc4 <UART_Out>
						break;
 80017d6:	e093      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '1':
						sprintf(tx_buff, "\r\nHALL 0 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS0_PORT, Hall_SS0_PIN));
 80017d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017dc:	494f      	ldr	r1, [pc, #316]	@ (800191c <Menu_UART_Sensors+0x21c>)
 80017de:	4850      	ldr	r0, [pc, #320]	@ (8001920 <Menu_UART_Sensors+0x220>)
 80017e0:	f7ff fc28 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ee:	494f      	ldr	r1, [pc, #316]	@ (800192c <Menu_UART_Sensors+0x22c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00b f807 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 80017f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f9e1 	bl	8001bc4 <UART_Out>
						break;
 8001802:	e07d      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '2':
						sprintf(tx_buff, "\r\nHALL 1 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN))/0x3FFF));
 8001804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001808:	4949      	ldr	r1, [pc, #292]	@ (8001930 <Menu_UART_Sensors+0x230>)
 800180a:	4845      	ldr	r0, [pc, #276]	@ (8001920 <Menu_UART_Sensors+0x220>)
 800180c:	f7ff fc67 	bl	80010de <Hall_Sensor_Read_Angle>
 8001810:	4603      	mov	r3, r0
 8001812:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe98 	bl	800054c <__aeabi_i2d>
 800181c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001910 <Menu_UART_Sensors+0x210>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7ff f827 	bl	8000874 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b3c      	ldr	r3, [pc, #240]	@ (8001924 <Menu_UART_Sensors+0x224>)
 8001834:	f7fe fef4 	bl	8000620 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001840:	493c      	ldr	r1, [pc, #240]	@ (8001934 <Menu_UART_Sensors+0x234>)
 8001842:	f00a ffdf 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 8001846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f9b9 	bl	8001bc4 <UART_Out>
						break;
 8001852:	e055      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '3':
						sprintf(tx_buff, "\r\nHALL 1 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN));
 8001854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001858:	4935      	ldr	r1, [pc, #212]	@ (8001930 <Menu_UART_Sensors+0x230>)
 800185a:	4831      	ldr	r0, [pc, #196]	@ (8001920 <Menu_UART_Sensors+0x220>)
 800185c:	f7ff fbea 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 8001860:	4603      	mov	r3, r0
 8001862:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	4933      	ldr	r1, [pc, #204]	@ (8001938 <Menu_UART_Sensors+0x238>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00a ffc9 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 8001872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9a3 	bl	8001bc4 <UART_Out>
						break;
 800187e:	e03f      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '4':
						sprintf(tx_buff, "\r\nHALL 2 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS2_PORT, Hall_SS2_PIN))/0x3FFF));
 8001880:	2220      	movs	r2, #32
 8001882:	492b      	ldr	r1, [pc, #172]	@ (8001930 <Menu_UART_Sensors+0x230>)
 8001884:	4826      	ldr	r0, [pc, #152]	@ (8001920 <Menu_UART_Sensors+0x220>)
 8001886:	f7ff fc2a 	bl	80010de <Hall_Sensor_Read_Angle>
 800188a:	4603      	mov	r3, r0
 800188c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe5b 	bl	800054c <__aeabi_i2d>
 8001896:	a31e      	add	r3, pc, #120	@ (adr r3, 8001910 <Menu_UART_Sensors+0x210>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe ffea 	bl	8000874 <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <Menu_UART_Sensors+0x224>)
 80018ae:	f7fe feb7 	bl	8000620 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018ba:	4920      	ldr	r1, [pc, #128]	@ (800193c <Menu_UART_Sensors+0x23c>)
 80018bc:	f00a ffa2 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 80018c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f97c 	bl	8001bc4 <UART_Out>
						break;
 80018cc:	e018      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '5':
						sprintf(tx_buff, "\r\nHALL 2 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS2_PORT, Hall_SS2_PIN));
 80018ce:	2220      	movs	r2, #32
 80018d0:	4917      	ldr	r1, [pc, #92]	@ (8001930 <Menu_UART_Sensors+0x230>)
 80018d2:	4813      	ldr	r0, [pc, #76]	@ (8001920 <Menu_UART_Sensors+0x220>)
 80018d4:	f7ff fbae 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80018d8:	4603      	mov	r3, r0
 80018da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018e2:	4917      	ldr	r1, [pc, #92]	@ (8001940 <Menu_UART_Sensors+0x240>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00a ff8d 	bl	800c804 <siprintf>
						UART_Out(huart, tx_buff);
 80018ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ee:	4619      	mov	r1, r3
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f967 	bl	8001bc4 <UART_Out>
						break;
 80018f6:	e003      	b.n	8001900 <Menu_UART_Sensors+0x200>
					case '6':
						Menu_State = Menu_UART_Main;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <Menu_UART_Sensors+0x244>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <Menu_UART_Sensors+0x248>)
 80018fc:	601a      	str	r2, [r3, #0]
						break;
 80018fe:	bf00      	nop
				}
				break;
 8001900:	e001      	b.n	8001906 <Menu_UART_Sensors+0x206>
			} else {
				__NOP();
 8001902:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001904:	e71d      	b.n	8001742 <Menu_UART_Sensors+0x42>
				break;
 8001906:	bf00      	nop
			}
		}
}
 8001908:	bf00      	nop
 800190a:	3750      	adds	r7, #80	@ 0x50
 800190c:	46bd      	mov	sp, r7
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	00000000 	.word	0x00000000
 8001914:	40cfff80 	.word	0x40cfff80
 8001918:	080106cc 	.word	0x080106cc
 800191c:	42020000 	.word	0x42020000
 8001920:	2003ac14 	.word	0x2003ac14
 8001924:	40768000 	.word	0x40768000
 8001928:	080105d0 	.word	0x080105d0
 800192c:	080105e8 	.word	0x080105e8
 8001930:	42020400 	.word	0x42020400
 8001934:	08010604 	.word	0x08010604
 8001938:	0801061c 	.word	0x0801061c
 800193c:	08010638 	.word	0x08010638
 8001940:	08010650 	.word	0x08010650
 8001944:	20000000 	.word	0x20000000
 8001948:	080012a5 	.word	0x080012a5

0800194c <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b092      	sub	sp, #72	@ 0x48
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8001954:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	2224      	movs	r2, #36	@ 0x24
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f00a ffb1 	bl	800c8ca <memset>

	uint8_t *Menu_Relay[] = {
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <Menu_UART_Relay+0x1b8>)
 800196a:	f107 040c 	add.w	r4, r7, #12
 800196e:	461d      	mov	r5, r3
 8001970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2205      	movs	r2, #5
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8d5 	bl	8001b30 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8001986:	2300      	movs	r3, #0
 8001988:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800198a:	f107 0108 	add.w	r1, r7, #8
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	2201      	movs	r2, #1
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f009 f979 	bl	800ac8c <HAL_UART_Receive>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 80aa 	bne.w	8001af6 <Menu_UART_Relay+0x1aa>
			{
				switch (rx_buff[0])
 80019a2:	7a3b      	ldrb	r3, [r7, #8]
 80019a4:	3b30      	subs	r3, #48	@ 0x30
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	f200 80a7 	bhi.w	8001afa <Menu_UART_Relay+0x1ae>
 80019ac:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <Menu_UART_Relay+0x68>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c9 	.word	0x080019c9
 80019b8:	08001a0f 	.word	0x08001a0f
 80019bc:	08001a5b 	.word	0x08001a5b
 80019c0:	08001aa1 	.word	0x08001aa1
 80019c4:	08001aed 	.word	0x08001aed
				{
					case '0':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was set\r\n");
 80019c8:	f7ff fbf6 	bl	80011b8 <Relay_0_Read>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <Menu_UART_Relay+0x9a>
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b08 <Menu_UART_Relay+0x1bc>)
 80019d8:	461c      	mov	r4, r3
 80019da:	4615      	mov	r5, r2
 80019dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	6023      	str	r3, [r4, #0]
 80019e4:	e00a      	b.n	80019fc <Menu_UART_Relay+0xb0>
						else strcpy(tx_buff, "\r\nRelay 0 was already set\r\n");
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4a48      	ldr	r2, [pc, #288]	@ (8001b0c <Menu_UART_Relay+0x1c0>)
 80019ec:	461c      	mov	r4, r3
 80019ee:	4615      	mov	r5, r2
 80019f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8de 	bl	8001bc4 <UART_Out>
						Relay_0_Set();
 8001a08:	f7ff fbbe 	bl	8001188 <Relay_0_Set>
						break;
 8001a0c:	e072      	b.n	8001af4 <Menu_UART_Relay+0x1a8>
					case '1':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was already reset\r\n");
 8001a0e:	f7ff fbd3 	bl	80011b8 <Relay_0_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10b      	bne.n	8001a30 <Menu_UART_Relay+0xe4>
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <Menu_UART_Relay+0x1c4>)
 8001a1e:	461c      	mov	r4, r3
 8001a20:	4615      	mov	r5, r2
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2a:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2c:	8023      	strh	r3, [r4, #0]
 8001a2e:	e00b      	b.n	8001a48 <Menu_UART_Relay+0xfc>
						else strcpy(tx_buff, "\r\nRelay 0 was reset\r\n");
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	4a37      	ldr	r2, [pc, #220]	@ (8001b14 <Menu_UART_Relay+0x1c8>)
 8001a36:	461c      	mov	r4, r3
 8001a38:	4615      	mov	r5, r2
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a42:	6020      	str	r0, [r4, #0]
 8001a44:	3404      	adds	r4, #4
 8001a46:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8b8 	bl	8001bc4 <UART_Out>
						Relay_0_Reset();
 8001a54:	f7ff fba4 	bl	80011a0 <Relay_0_Reset>
						break;
 8001a58:	e04c      	b.n	8001af4 <Menu_UART_Relay+0x1a8>
					case '2':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was set\r\n");
 8001a5a:	f7ff fbad 	bl	80011b8 <Relay_0_Read>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <Menu_UART_Relay+0x12c>
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4a2b      	ldr	r2, [pc, #172]	@ (8001b18 <Menu_UART_Relay+0x1cc>)
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	4615      	mov	r5, r2
 8001a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	e00a      	b.n	8001a8e <Menu_UART_Relay+0x142>
						else strcpy(tx_buff, "\r\nRelay 1 was already set\r\n");
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <Menu_UART_Relay+0x1d0>)
 8001a7e:	461c      	mov	r4, r3
 8001a80:	4615      	mov	r5, r2
 8001a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f895 	bl	8001bc4 <UART_Out>
						Relay_1_Set();
 8001a9a:	f7ff fb99 	bl	80011d0 <Relay_1_Set>
						break;
 8001a9e:	e029      	b.n	8001af4 <Menu_UART_Relay+0x1a8>
					case '3':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was already reset\r\n");
 8001aa0:	f7ff fb8a 	bl	80011b8 <Relay_0_Read>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10b      	bne.n	8001ac2 <Menu_UART_Relay+0x176>
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <Menu_UART_Relay+0x1d4>)
 8001ab0:	461c      	mov	r4, r3
 8001ab2:	4615      	mov	r5, r2
 8001ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001abc:	c407      	stmia	r4!, {r0, r1, r2}
 8001abe:	8023      	strh	r3, [r4, #0]
 8001ac0:	e00b      	b.n	8001ada <Menu_UART_Relay+0x18e>
						else strcpy(tx_buff, "\r\nRelay 1 was reset\r\n");
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <Menu_UART_Relay+0x1d8>)
 8001ac8:	461c      	mov	r4, r3
 8001aca:	4615      	mov	r5, r2
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ad4:	6020      	str	r0, [r4, #0]
 8001ad6:	3404      	adds	r4, #4
 8001ad8:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f86f 	bl	8001bc4 <UART_Out>
						Relay_1_Reset();
 8001ae6:	f7ff fb7f 	bl	80011e8 <Relay_1_Reset>
						break;
 8001aea:	e003      	b.n	8001af4 <Menu_UART_Relay+0x1a8>
					case '4':
						Menu_State = Menu_UART_Main;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <Menu_UART_Relay+0x1dc>)
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <Menu_UART_Relay+0x1e0>)
 8001af0:	601a      	str	r2, [r3, #0]
						break;
 8001af2:	bf00      	nop
				}
				break;
 8001af4:	e001      	b.n	8001afa <Menu_UART_Relay+0x1ae>
			} else {
				__NOP();
 8001af6:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001af8:	e747      	b.n	800198a <Menu_UART_Relay+0x3e>
				break;
 8001afa:	bf00      	nop
			}
		}
}
 8001afc:	bf00      	nop
 8001afe:	3748      	adds	r7, #72	@ 0x48
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdb0      	pop	{r4, r5, r7, pc}
 8001b04:	080107f0 	.word	0x080107f0
 8001b08:	080106e8 	.word	0x080106e8
 8001b0c:	080106fc 	.word	0x080106fc
 8001b10:	08010718 	.word	0x08010718
 8001b14:	08010738 	.word	0x08010738
 8001b18:	08010750 	.word	0x08010750
 8001b1c:	08010764 	.word	0x08010764
 8001b20:	08010780 	.word	0x08010780
 8001b24:	080107a0 	.word	0x080107a0
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	080012a5 	.word	0x080012a5

08001b30 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	@ 0x40
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8001b3c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00a febd 	bl	800c8ca <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001b50:	f107 0114 	add.w	r1, r7, #20
 8001b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b58:	2204      	movs	r2, #4
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f008 fff8 	bl	800ab50 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001b60:	f107 0114 	add.w	r1, r7, #20
 8001b64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b68:	2204      	movs	r2, #4
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f008 fff0 	bl	800ab50 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001b76:	e018      	b.n	8001baa <Menu_UART_Out+0x7a>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 8001b78:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8001b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4413      	add	r3, r2
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f107 0014 	add.w	r0, r7, #20
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <Menu_UART_Out+0x90>)
 8001b90:	f00a fe38 	bl	800c804 <siprintf>
		UART_Out(huart, tx_buff);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f812 	bl	8001bc4 <UART_Out>
	for(uint8_t i=0;i<size;i++)
 8001ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001baa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8e1      	bhi.n	8001b78 <Menu_UART_Out+0x48>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3740      	adds	r7, #64	@ 0x40
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08010804 	.word	0x08010804

08001bc4 <UART_Out>:

void UART_Out(UART_HandleTypeDef *huart, uint8_t* p)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	for(uint8_t j=0;p[j];j++) HAL_UART_Transmit(huart, (p+j), 1, 1000);
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e00b      	b.n	8001bec <UART_Out+0x28>
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	18d1      	adds	r1, r2, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	2201      	movs	r2, #1
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f008 ffb5 	bl	800ab50 <HAL_UART_Transmit>
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	3301      	adds	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ed      	bne.n	8001bd4 <UART_Out+0x10>
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <UART_In>:

void UART_In(UART_HandleTypeDef *huart, uint8_t* p, uint8_t len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff =0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buff[10]={"\r\n"};
 8001c14:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	809a      	strh	r2, [r3, #4]
	uint8_t i=0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8001c28:	e020      	b.n	8001c6c <UART_In+0x6a>
	{
		while(1)
		{
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001c2a:	f107 011e 	add.w	r1, r7, #30
 8001c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c32:	2201      	movs	r2, #1
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f009 f829 	bl	800ac8c <HAL_UART_Receive>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <UART_In+0x42>
			{
				break;
			} else {
				__NOP();
 8001c40:	bf00      	nop
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001c42:	e7f2      	b.n	8001c2a <UART_In+0x28>
				break;
 8001c44:	bf00      	nop
			}
		}
		if(rx_buff=='\r') break;
 8001c46:	7fbb      	ldrb	r3, [r7, #30]
 8001c48:	2b0d      	cmp	r3, #13
 8001c4a:	d014      	beq.n	8001c76 <UART_In+0x74>
		*(p+i) = rx_buff;
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4413      	add	r3, r2
 8001c52:	7fba      	ldrb	r2, [r7, #30]
 8001c54:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, &rx_buff, 1, 1000);
 8001c56:	f107 011e 	add.w	r1, r7, #30
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	2201      	movs	r2, #1
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f008 ff75 	bl	800ab50 <HAL_UART_Transmit>
		i++;
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8001c6c:	7ffa      	ldrb	r2, [r7, #31]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3da      	bcc.n	8001c2a <UART_In+0x28>
 8001c74:	e000      	b.n	8001c78 <UART_In+0x76>
		if(rx_buff=='\r') break;
 8001c76:	bf00      	nop
	}
	*(p+i) = 0;
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001c82:	f107 0114 	add.w	r1, r7, #20
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f008 ff5f 	bl	800ab50 <HAL_UART_Transmit>
}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <Frequency_To_Period+0x28>)
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	3b01      	subs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	07735940 	.word	0x07735940

08001cc8 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f007 face 	bl	8009274 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f007 fa16 	bl	8009118 <HAL_TIM_Base_Start_IT>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d3c <Mototr_Poz_Inc+0x48>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <Mototr_Poz_Inc+0x4c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	490b      	ldr	r1, [pc, #44]	@ (8001d40 <Mototr_Poz_Inc+0x4c>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 8001d1a:	e008      	b.n	8001d2e <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 8001d1c:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <Mototr_Poz_Inc+0x4c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	4906      	ldr	r1, [pc, #24]	@ (8001d40 <Mototr_Poz_Inc+0x4c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	2000021c 	.word	0x2000021c

08001d44 <Ramp>:

void Ramp(uint32_t M)
{
 8001d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	e0b1      	b.n	8001eb8 <Ramp+0x174>
	{
		if(i<M_move_l[M]/2)
 8001d54:	4a60      	ldr	r2, [pc, #384]	@ (8001ed8 <Ramp+0x194>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	0fda      	lsrs	r2, r3, #31
 8001d5e:	4413      	add	r3, r2
 8001d60:	105b      	asrs	r3, r3, #1
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d246      	bcs.n	8001df8 <Ramp+0xb4>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001edc <Ramp+0x198>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbdc 	bl	800052c <__aeabi_ui2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
 8001d78:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <Ramp+0x19c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd5 	bl	800052c <__aeabi_ui2d>
 8001d82:	4680      	mov	r8, r0
 8001d84:	4689      	mov	r9, r1
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbce 	bl	800052c <__aeabi_ui2d>
 8001d90:	4682      	mov	sl, r0
 8001d92:	468b      	mov	fp, r1
 8001d94:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <Ramp+0x19c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbc7 	bl	800052c <__aeabi_ui2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4650      	mov	r0, sl
 8001da4:	4659      	mov	r1, fp
 8001da6:	f7fe fd65 	bl	8000874 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b17 	vmov	d7, r2, r3
 8001db2:	eeb0 0a47 	vmov.f32	s0, s14
 8001db6:	eef0 0a67 	vmov.f32	s1, s15
 8001dba:	f00e f8fb 	bl	800ffb4 <sqrt>
 8001dbe:	ec53 2b10 	vmov	r2, r3, d0
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	f7fe fc2b 	bl	8000620 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fa6f 	bl	80002b4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fef7 	bl	8000bd0 <__aeabi_d2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <Ramp+0x1a0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d950      	bls.n	8001e92 <Ramp+0x14e>
				tmp = f_MAX;
 8001df0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <Ramp+0x1a0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e04c      	b.n	8001e92 <Ramp+0x14e>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-1-i))/a_MAX);
 8001df8:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <Ramp+0x198>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb95 	bl	800052c <__aeabi_ui2d>
 8001e02:	4604      	mov	r4, r0
 8001e04:	460d      	mov	r5, r1
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <Ramp+0x19c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb8e 	bl	800052c <__aeabi_ui2d>
 8001e10:	4680      	mov	r8, r0
 8001e12:	4689      	mov	r9, r1
 8001e14:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <Ramp+0x194>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb80 	bl	800052c <__aeabi_ui2d>
 8001e2c:	4682      	mov	sl, r0
 8001e2e:	468b      	mov	fp, r1
 8001e30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <Ramp+0x19c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb79 	bl	800052c <__aeabi_ui2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4650      	mov	r0, sl
 8001e40:	4659      	mov	r1, fp
 8001e42:	f7fe fd17 	bl	8000874 <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	ec43 2b17 	vmov	d7, r2, r3
 8001e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e52:	eef0 0a67 	vmov.f32	s1, s15
 8001e56:	f00e f8ad 	bl	800ffb4 <sqrt>
 8001e5a:	ec53 2b10 	vmov	r2, r3, d0
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f7fe fbdd 	bl	8000620 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe fa21 	bl	80002b4 <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fea9 	bl	8000bd0 <__aeabi_d2uiz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <Ramp+0x1a0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d902      	bls.n	8001e92 <Ramp+0x14e>
				tmp = f_MAX;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <Ramp+0x1a0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ff02 	bl	8001c9c <Frequency_To_Period>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b298      	uxth	r0, r3
 8001e9c:	4912      	ldr	r1, [pc, #72]	@ (8001ee8 <Ramp+0x1a4>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001ea4:	fb03 f202 	mul.w	r2, r3, r2
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4602      	mov	r2, r0
 8001eae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <Ramp+0x194>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	f4ff af45 	bcc.w	8001d54 <Ramp+0x10>
	}
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2003aba8 	.word	0x2003aba8
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000228 	.word	0x20000228

08001eec <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 8001ef8:	4a16      	ldr	r2, [pc, #88]	@ (8001f54 <Ramp_Out+0x68>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	4915      	ldr	r1, [pc, #84]	@ (8001f58 <Ramp_Out+0x6c>)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d304      	bcc.n	8001f16 <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f007 fbd2 	bl	80096b8 <HAL_TIM_OC_Stop_IT>
	else
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
		M_move_poz[M]++;
	}
}
 8001f14:	e019      	b.n	8001f4a <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 8001f16:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <Ramp_Out+0x68>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	490f      	ldr	r1, [pc, #60]	@ (8001f5c <Ramp_Out+0x70>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8001f26:	fb00 f202 	mul.w	r2, r0, r2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f30:	4619      	mov	r1, r3
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fec8 	bl	8001cc8 <Period_Out>
		M_move_poz[M]++;
 8001f38:	4a06      	ldr	r2, [pc, #24]	@ (8001f54 <Ramp_Out+0x68>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4904      	ldr	r1, [pc, #16]	@ (8001f54 <Ramp_Out+0x68>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2003abb4 	.word	0x2003abb4
 8001f58:	2003aba8 	.word	0x2003aba8
 8001f5c:	20000228 	.word	0x20000228

08001f60 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 8001f6e:	4b72      	ldr	r3, [pc, #456]	@ (8002138 <move+0x1d8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a71      	ldr	r2, [pc, #452]	@ (800213c <move+0x1dc>)
 8001f78:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 8001f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002138 <move+0x1d8>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	4a6e      	ldr	r2, [pc, #440]	@ (800213c <move+0x1dc>)
 8001f84:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 8001f86:	4b6c      	ldr	r3, [pc, #432]	@ (8002138 <move+0x1d8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800213c <move+0x1dc>)
 8001f90:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 8001f92:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <move+0x1dc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0d      	bge.n	8001fb6 <move+0x56>
	{
		M_move_l[0] = M_move_l[0]*(-1);
 8001f9a:	4b68      	ldr	r3, [pc, #416]	@ (800213c <move+0x1dc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	425b      	negs	r3, r3
 8001fa0:	4a66      	ldr	r2, [pc, #408]	@ (800213c <move+0x1dc>)
 8001fa2:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <move+0x1e0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	4865      	ldr	r0, [pc, #404]	@ (8002144 <move+0x1e4>)
 8001fb0:	f001 ff86 	bl	8003ec0 <HAL_GPIO_WritePin>
 8001fb4:	e007      	b.n	8001fc6 <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 8001fb6:	4b62      	ldr	r3, [pc, #392]	@ (8002140 <move+0x1e0>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4860      	ldr	r0, [pc, #384]	@ (8002144 <move+0x1e4>)
 8001fc2:	f001 ff7d 	bl	8003ec0 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800213c <move+0x1dc>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0d      	bge.n	8001fea <move+0x8a>
	{
		M_move_l[1] = M_move_l[1]*(-1);
 8001fce:	4b5b      	ldr	r3, [pc, #364]	@ (800213c <move+0x1dc>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	4a59      	ldr	r2, [pc, #356]	@ (800213c <move+0x1dc>)
 8001fd6:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 8001fd8:	4b59      	ldr	r3, [pc, #356]	@ (8002140 <move+0x1e0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4859      	ldr	r0, [pc, #356]	@ (8002148 <move+0x1e8>)
 8001fe4:	f001 ff6c 	bl	8003ec0 <HAL_GPIO_WritePin>
 8001fe8:	e007      	b.n	8001ffa <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 8001fea:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <move+0x1e0>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4854      	ldr	r0, [pc, #336]	@ (8002148 <move+0x1e8>)
 8001ff6:	f001 ff63 	bl	8003ec0 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 8001ffa:	4b50      	ldr	r3, [pc, #320]	@ (800213c <move+0x1dc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0d      	bge.n	800201e <move+0xbe>
	{
		M_move_l[2] = M_move_l[2]*(-1);
 8002002:	4b4e      	ldr	r3, [pc, #312]	@ (800213c <move+0x1dc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	425b      	negs	r3, r3
 8002008:	4a4c      	ldr	r2, [pc, #304]	@ (800213c <move+0x1dc>)
 800200a:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 800200c:	4b4c      	ldr	r3, [pc, #304]	@ (8002140 <move+0x1e0>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	484c      	ldr	r0, [pc, #304]	@ (8002148 <move+0x1e8>)
 8002018:	f001 ff52 	bl	8003ec0 <HAL_GPIO_WritePin>
 800201c:	e007      	b.n	800202e <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 800201e:	4b48      	ldr	r3, [pc, #288]	@ (8002140 <move+0x1e0>)
 8002020:	2201      	movs	r2, #1
 8002022:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	2101      	movs	r1, #1
 8002028:	4847      	ldr	r0, [pc, #284]	@ (8002148 <move+0x1e8>)
 800202a:	f001 ff49 	bl	8003ec0 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fe88 	bl	8001d44 <Ramp>
	Ramp(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff fe85 	bl	8001d44 <Ramp>
	Ramp(2);
 800203a:	2002      	movs	r0, #2
 800203c:	f7ff fe82 	bl	8001d44 <Ramp>

	M_move_poz[0] =0;
 8002040:	4b42      	ldr	r3, [pc, #264]	@ (800214c <move+0x1ec>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8002046:	4b41      	ldr	r3, [pc, #260]	@ (800214c <move+0x1ec>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 800204c:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <move+0x1ec>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

	Period_Out(tim1,Period_ramp[0][M_move_poz[0]]);
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <move+0x1ec>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a38      	ldr	r2, [pc, #224]	@ (8002150 <move+0x1f0>)
 8002070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002074:	4619      	mov	r1, r3
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7ff fe26 	bl	8001cc8 <Period_Out>
	Period_Out(tim2,Period_ramp[1][M_move_poz[1]]);
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <move+0x1ec>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a33      	ldr	r2, [pc, #204]	@ (8002150 <move+0x1f0>)
 8002082:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8002086:	3340      	adds	r3, #64	@ 0x40
 8002088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800208c:	4619      	mov	r1, r3
 800208e:	69f8      	ldr	r0, [r7, #28]
 8002090:	f7ff fe1a 	bl	8001cc8 <Period_Out>
	Period_Out(tim3,Period_ramp[2][M_move_poz[2]]);
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <move+0x1ec>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <move+0x1f0>)
 800209a:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800209e:	3380      	adds	r3, #128	@ 0x80
 80020a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020a4:	4619      	mov	r1, r3
 80020a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020a8:	f7ff fe0e 	bl	8001cc8 <Period_Out>

	if(M_move_l[0] >  M_move_poz[0])
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <move+0x1dc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <move+0x1ec>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d903      	bls.n	80020c2 <move+0x162>
	HAL_TIM_OC_Start_IT(tim1,Channel1);
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f007 f969 	bl	8009394 <HAL_TIM_OC_Start_IT>
	if(M_move_l[1] >  M_move_poz[1])
 80020c2:	4b1e      	ldr	r3, [pc, #120]	@ (800213c <move+0x1dc>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b20      	ldr	r3, [pc, #128]	@ (800214c <move+0x1ec>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d903      	bls.n	80020d8 <move+0x178>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	69f8      	ldr	r0, [r7, #28]
 80020d4:	f007 f95e 	bl	8009394 <HAL_TIM_OC_Start_IT>
	if(M_move_l[2] >  M_move_poz[2])
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <move+0x1dc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <move+0x1ec>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d903      	bls.n	80020ee <move+0x18e>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 80020e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ea:	f007 f953 	bl	8009394 <HAL_TIM_OC_Start_IT>

	M_move_poz[0]++;
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <move+0x1ec>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a15      	ldr	r2, [pc, #84]	@ (800214c <move+0x1ec>)
 80020f6:	6013      	str	r3, [r2, #0]
	M_move_poz[1]++;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <move+0x1ec>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a13      	ldr	r2, [pc, #76]	@ (800214c <move+0x1ec>)
 8002100:	6053      	str	r3, [r2, #4]
	M_move_poz[2]++;
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <move+0x1ec>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	3301      	adds	r3, #1
 8002108:	4a10      	ldr	r2, [pc, #64]	@ (800214c <move+0x1ec>)
 800210a:	6093      	str	r3, [r2, #8]

	while(!(theta0_target ==  M_poz[0]) || !(theta1_target ==  M_poz[1]) || !(theta2_target ==  M_poz[2]))
 800210c:	bf00      	nop
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <move+0x1d8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d1fa      	bne.n	800210e <move+0x1ae>
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <move+0x1d8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d1f5      	bne.n	800210e <move+0x1ae>
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <move+0x1d8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d1f0      	bne.n	800210e <move+0x1ae>
	{
	}
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000021c 	.word	0x2000021c
 800213c:	2003aba8 	.word	0x2003aba8
 8002140:	20000010 	.word	0x20000010
 8002144:	42020400 	.word	0x42020400
 8002148:	42020800 	.word	0x42020800
 800214c:	2003abb4 	.word	0x2003abb4
 8002150:	20000228 	.word	0x20000228

08002154 <Set_f_MAX>:

void Set_f_MAX(uint32_t tmp)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	f_MAX = tmp;
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <Set_f_MAX+0x1c>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004

08002174 <Set_f_MIN>:

void Set_f_MIN(uint32_t tmp)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	f_MIN = tmp;
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <Set_f_MIN+0x1c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <Set_a_MAX>:

void Set_a_MAX(uint32_t tmp)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	a_MAX = tmp;
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <Set_a_MAX+0x1c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <Get_f_MAX>:

uint32_t Get_f_MAX(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	return f_MAX;
 80021b8:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <Get_f_MAX+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000004 	.word	0x20000004

080021cc <Get_f_MIN>:

uint32_t Get_f_MIN(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	return f_MIN;
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <Get_f_MIN+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008

080021e4 <Get_a_MAX>:

uint32_t Get_a_MAX(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
	return a_MAX;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <Get_a_MAX+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	2000000c 	.word	0x2000000c

080021fc <M_Poz_0>:

uint32_t M_Poz_0(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	return M_poz[0];
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <M_Poz_0+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000021c 	.word	0x2000021c

08002214 <M_Poz_1>:

uint32_t M_Poz_1(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	return M_poz[1];
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <M_Poz_1+0x14>)
 800221a:	685b      	ldr	r3, [r3, #4]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000021c 	.word	0x2000021c

0800222c <M_Poz_2>:

uint32_t M_Poz_2(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	return M_poz[2];
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <M_Poz_2+0x14>)
 8002232:	689b      	ldr	r3, [r3, #8]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	2000021c 	.word	0x2000021c

08002244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b090      	sub	sp, #64	@ 0x40
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224a:	f001 fa5d 	bl	8003708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800224e:	f000 f845 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002252:	f000 fc23 	bl	8002a9c <MX_GPIO_Init>
  MX_UART5_Init();
 8002256:	f000 fb09 	bl	800286c <MX_UART5_Init>
  MX_USART1_UART_Init();
 800225a:	f000 fb55 	bl	8002908 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800225e:	f000 fbeb 	bl	8002a38 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8002262:	f000 f8af 	bl	80023c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002266:	f000 f8f9 	bl	800245c <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800226a:	f000 fb99 	bl	80029a0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800226e:	f000 f94b 	bl	8002508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002272:	f000 f9bf 	bl	80025f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002276:	f000 fa33 	bl	80026e0 <MX_TIM5_Init>
  MX_TIM15_Init();
 800227a:	f000 faa7 	bl	80027cc <MX_TIM15_Init>
  MX_ICACHE_Init();
 800227e:	f000 f8e1 	bl	8002444 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 8002282:	4a13      	ldr	r2, [pc, #76]	@ (80022d0 <main+0x8c>)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	6810      	ldr	r0, [r2, #0]
 8002288:	6851      	ldr	r1, [r2, #4]
 800228a:	c303      	stmia	r3!, {r0, r1}
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2234      	movs	r2, #52	@ 0x34
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00a fb18 	bl	800c8ca <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 800229a:	f7fe ff75 	bl	8001188 <Relay_0_Set>
  HAL_Delay(200);
 800229e:	20c8      	movs	r0, #200	@ 0xc8
 80022a0:	f001 faf0 	bl	8003884 <HAL_Delay>
  Relay_1_Set();
 80022a4:	f7fe ff94 	bl	80011d0 <Relay_1_Set>
  HAL_Delay(200);
 80022a8:	20c8      	movs	r0, #200	@ 0xc8
 80022aa:	f001 faeb 	bl	8003884 <HAL_Delay>
  Relay_0_Reset();
 80022ae:	f7fe ff77 	bl	80011a0 <Relay_0_Reset>
  HAL_Delay(200);
 80022b2:	20c8      	movs	r0, #200	@ 0xc8
 80022b4:	f001 fae6 	bl	8003884 <HAL_Delay>
  Relay_1_Reset();
 80022b8:	f7fe ff96 	bl	80011e8 <Relay_1_Reset>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 80022bc:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <main+0x90>)
 80022be:	f006 ff2b 	bl	8009118 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <main+0x94>)
 80022c4:	f7fe ff9c 	bl	8001200 <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 80022c8:	4803      	ldr	r0, [pc, #12]	@ (80022d8 <main+0x94>)
 80022ca:	f7fe ffdd 	bl	8001288 <Menu_UART_Update>
 80022ce:	e7fb      	b.n	80022c8 <main+0x84>
 80022d0:	08010814 	.word	0x08010814
 80022d4:	2003ad88 	.word	0x2003ad88
 80022d8:	2003ae68 	.word	0x2003ae68

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b09c      	sub	sp, #112	@ 0x70
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	2250      	movs	r2, #80	@ 0x50
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00a faed 	bl	800c8ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002302:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <SystemClock_Config+0xe0>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a2d      	ldr	r2, [pc, #180]	@ (80023bc <SystemClock_Config+0xe0>)
 8002308:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800230c:	6113      	str	r3, [r2, #16]
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <SystemClock_Config+0xe0>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800231a:	bf00      	nop
 800231c:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <SystemClock_Config+0xe0>)
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b08      	cmp	r3, #8
 8002326:	d1f9      	bne.n	800231c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002328:	2321      	movs	r3, #33	@ 0x21
 800232a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002336:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002338:	2302      	movs	r3, #2
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800233c:	2303      	movs	r3, #3
 800233e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002340:	2306      	movs	r3, #6
 8002342:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8002344:	237d      	movs	r3, #125	@ 0x7d
 8002346:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002348:	2302      	movs	r3, #2
 800234a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800234c:	2308      	movs	r3, #8
 800234e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002350:	2302      	movs	r3, #2
 8002352:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002354:	2308      	movs	r3, #8
 8002356:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002358:	2300      	movs	r3, #0
 800235a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4618      	mov	r0, r3
 8002366:	f002 f809 	bl	800437c <HAL_RCC_OscConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002370:	f000 fc4c 	bl	8002c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002374:	231f      	movs	r3, #31
 8002376:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002378:	2303      	movs	r3, #3
 800237a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002380:	2350      	movs	r3, #80	@ 0x50
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002384:	2350      	movs	r3, #80	@ 0x50
 8002386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 8002388:	2350      	movs	r3, #80	@ 0x50
 800238a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	2105      	movs	r1, #5
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fc2a 	bl	8004bec <HAL_RCC_ClockConfig>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800239e:	f000 fc35 	bl	8002c0c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80023a2:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <SystemClock_Config+0xe4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023aa:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <SystemClock_Config+0xe4>)
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	3770      	adds	r7, #112	@ 0x70
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	44020800 	.word	0x44020800
 80023c0:	40022000 	.word	0x40022000

080023c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023ca:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <MX_I2C1_Init+0x78>)
 80023cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <MX_I2C1_Init+0x7c>)
 80023d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023dc:	2201      	movs	r2, #1
 80023de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_I2C1_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <MX_I2C1_Init+0x74>)
 8002400:	f001 fd76 	bl	8003ef0 <HAL_I2C_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800240a:	f000 fbff 	bl	8002c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800240e:	2100      	movs	r1, #0
 8002410:	4809      	ldr	r0, [pc, #36]	@ (8002438 <MX_I2C1_Init+0x74>)
 8002412:	f001 fe08 	bl	8004026 <HAL_I2CEx_ConfigAnalogFilter>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800241c:	f000 fbf6 	bl	8002c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002420:	2100      	movs	r1, #0
 8002422:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_I2C1_Init+0x74>)
 8002424:	f001 fe4a 	bl	80040bc <HAL_I2CEx_ConfigDigitalFilter>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800242e:	f000 fbed 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2003abc0 	.word	0x2003abc0
 800243c:	40005400 	.word	0x40005400
 8002440:	2050517a 	.word	0x2050517a

08002444 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002448:	f001 fe84 	bl	8004154 <HAL_ICACHE_Enable>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8002452:	f000 fbdb 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002462:	4a28      	ldr	r2, [pc, #160]	@ (8002504 <MX_SPI1_Init+0xa8>)
 8002464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002466:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002468:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800246c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002476:	220f      	movs	r2, #15
 8002478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800247a:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <MX_SPI1_Init+0xa4>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002482:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002486:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <MX_SPI1_Init+0xa4>)
 800248a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800248e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <MX_SPI1_Init+0xa4>)
 8002492:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <MX_SPI1_Init+0xa4>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a4:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <MX_SPI1_Init+0xa4>)
 80024ee:	f006 f93d 	bl	800876c <HAL_SPI_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80024f8:	f000 fb88 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2003ac14 	.word	0x2003ac14
 8002504:	40013000 	.word	0x40013000

08002508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	@ 0x38
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002528:	463b      	mov	r3, r7
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
 8002536:	615a      	str	r2, [r3, #20]
 8002538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800253c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 8002542:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002544:	22f9      	movs	r2, #249	@ 0xf9
 8002546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800254e:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002550:	2201      	movs	r2, #1
 8002552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002560:	4823      	ldr	r0, [pc, #140]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 8002562:	f006 fd82 	bl	800906a <HAL_TIM_Base_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800256c:	f000 fb4e 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800257a:	4619      	mov	r1, r3
 800257c:	481c      	ldr	r0, [pc, #112]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800257e:	f007 fb4f 	bl	8009c20 <HAL_TIM_ConfigClockSource>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002588:	f000 fb40 	bl	8002c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800258c:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 800258e:	f006 fea0 	bl	80092d2 <HAL_TIM_OC_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002598:	f000 fb38 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4811      	ldr	r0, [pc, #68]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025ac:	f008 f96a 	bl	800a884 <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025b6:	f000 fb29 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80025ba:	2330      	movs	r3, #48	@ 0x30
 80025bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	2204      	movs	r2, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025d2:	f007 faab 	bl	8009b2c <HAL_TIM_OC_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80025dc:	f000 fb16 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025e0:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <MX_TIM2_Init+0xe8>)
 80025e2:	f000 fc8b 	bl	8002efc <HAL_TIM_MspPostInit>

}
 80025e6:	bf00      	nop
 80025e8:	3738      	adds	r7, #56	@ 0x38
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2003aca4 	.word	0x2003aca4

080025f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002626:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002628:	4a2c      	ldr	r2, [pc, #176]	@ (80026dc <MX_TIM3_Init+0xe8>)
 800262a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 800262e:	22f9      	movs	r2, #249	@ 0xf9
 8002630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 800263a:	2201      	movs	r2, #1
 800263c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800264a:	4823      	ldr	r0, [pc, #140]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 800264c:	f006 fd0d 	bl	800906a <HAL_TIM_Base_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002656:	f000 fad9 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002660:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002664:	4619      	mov	r1, r3
 8002666:	481c      	ldr	r0, [pc, #112]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002668:	f007 fada 	bl	8009c20 <HAL_TIM_ConfigClockSource>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002672:	f000 facb 	bl	8002c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002676:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002678:	f006 fe2b 	bl	80092d2 <HAL_TIM_OC_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002682:	f000 fac3 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	4810      	ldr	r0, [pc, #64]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 8002696:	f008 f8f5 	bl	800a884 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80026a0:	f000 fab4 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80026a4:	2330      	movs	r3, #48	@ 0x30
 80026a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026b4:	463b      	mov	r3, r7
 80026b6:	220c      	movs	r2, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 80026bc:	f007 fa36 	bl	8009b2c <HAL_TIM_OC_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026c6:	f000 faa1 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ca:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <MX_TIM3_Init+0xe4>)
 80026cc:	f000 fc16 	bl	8002efc <HAL_TIM_MspPostInit>

}
 80026d0:	bf00      	nop
 80026d2:	3738      	adds	r7, #56	@ 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	2003acf0 	.word	0x2003acf0
 80026dc:	40000400 	.word	0x40000400

080026e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	@ 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002714:	4a2c      	ldr	r2, [pc, #176]	@ (80027c8 <MX_TIM5_Init+0xe8>)
 8002716:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8002718:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 800271a:	22f9      	movs	r2, #249	@ 0xf9
 800271c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002726:	2201      	movs	r2, #1
 8002728:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002736:	4823      	ldr	r0, [pc, #140]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002738:	f006 fc97 	bl	800906a <HAL_TIM_Base_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002742:	f000 fa63 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800274c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002750:	4619      	mov	r1, r3
 8002752:	481c      	ldr	r0, [pc, #112]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002754:	f007 fa64 	bl	8009c20 <HAL_TIM_ConfigClockSource>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800275e:	f000 fa55 	bl	8002c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002762:	4818      	ldr	r0, [pc, #96]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002764:	f006 fdb5 	bl	80092d2 <HAL_TIM_OC_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800276e:	f000 fa4d 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4810      	ldr	r0, [pc, #64]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 8002782:	f008 f87f 	bl	800a884 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800278c:	f000 fa3e 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002790:	2330      	movs	r3, #48	@ 0x30
 8002792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4807      	ldr	r0, [pc, #28]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 80027a8:	f007 f9c0 	bl	8009b2c <HAL_TIM_OC_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80027b2:	f000 fa2b 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027b6:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <MX_TIM5_Init+0xe4>)
 80027b8:	f000 fba0 	bl	8002efc <HAL_TIM_MspPostInit>

}
 80027bc:	bf00      	nop
 80027be:	3738      	adds	r7, #56	@ 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2003ad3c 	.word	0x2003ad3c
 80027c8:	40000c00 	.word	0x40000c00

080027cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM15_Init+0x98>)
 80027ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002868 <MX_TIM15_Init+0x9c>)
 80027ee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <MX_TIM15_Init+0x98>)
 80027f2:	220a      	movs	r2, #10
 80027f4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <MX_TIM15_Init+0x98>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <MX_TIM15_Init+0x98>)
 80027fe:	227c      	movs	r2, #124	@ 0x7c
 8002800:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <MX_TIM15_Init+0x98>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_TIM15_Init+0x98>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_TIM15_Init+0x98>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002814:	4813      	ldr	r0, [pc, #76]	@ (8002864 <MX_TIM15_Init+0x98>)
 8002816:	f006 fc28 	bl	800906a <HAL_TIM_Base_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002820:	f000 f9f4 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002828:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <MX_TIM15_Init+0x98>)
 8002832:	f007 f9f5 	bl	8009c20 <HAL_TIM_ConfigClockSource>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800283c:	f000 f9e6 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_TIM15_Init+0x98>)
 800284e:	f008 f819 	bl	800a884 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002858:	f000 f9d8 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2003ad88 	.word	0x2003ad88
 8002868:	40014000 	.word	0x40014000

0800286c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002870:	4b23      	ldr	r3, [pc, #140]	@ (8002900 <MX_UART5_Init+0x94>)
 8002872:	4a24      	ldr	r2, [pc, #144]	@ (8002904 <MX_UART5_Init+0x98>)
 8002874:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002876:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <MX_UART5_Init+0x94>)
 8002878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800287c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <MX_UART5_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <MX_UART5_Init+0x94>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <MX_UART5_Init+0x94>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <MX_UART5_Init+0x94>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002896:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <MX_UART5_Init+0x94>)
 8002898:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800289c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800289e:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <MX_UART5_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a4:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <MX_UART5_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <MX_UART5_Init+0x94>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <MX_UART5_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028b6:	4812      	ldr	r0, [pc, #72]	@ (8002900 <MX_UART5_Init+0x94>)
 80028b8:	f008 f8fa 	bl	800aab0 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80028c2:	f000 f9a3 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c6:	2100      	movs	r1, #0
 80028c8:	480d      	ldr	r0, [pc, #52]	@ (8002900 <MX_UART5_Init+0x94>)
 80028ca:	f008 febd 	bl	800b648 <HAL_UARTEx_SetTxFifoThreshold>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80028d4:	f000 f99a 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d8:	2100      	movs	r1, #0
 80028da:	4809      	ldr	r0, [pc, #36]	@ (8002900 <MX_UART5_Init+0x94>)
 80028dc:	f008 fef2 	bl	800b6c4 <HAL_UARTEx_SetRxFifoThreshold>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80028e6:	f000 f991 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_UART5_Init+0x94>)
 80028ec:	f008 fe73 	bl	800b5d6 <HAL_UARTEx_DisableFifoMode>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80028f6:	f000 f989 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2003add4 	.word	0x2003add4
 8002904:	40005000 	.word	0x40005000

08002908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800290c:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 800290e:	4a23      	ldr	r2, [pc, #140]	@ (800299c <MX_USART1_UART_Init+0x94>)
 8002910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002912:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b1f      	ldr	r3, [pc, #124]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294a:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002950:	4811      	ldr	r0, [pc, #68]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002952:	f008 f8ad 	bl	800aab0 <HAL_UART_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800295c:	f000 f956 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002960:	2100      	movs	r1, #0
 8002962:	480d      	ldr	r0, [pc, #52]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002964:	f008 fe70 	bl	800b648 <HAL_UARTEx_SetTxFifoThreshold>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800296e:	f000 f94d 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002972:	2100      	movs	r1, #0
 8002974:	4808      	ldr	r0, [pc, #32]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002976:	f008 fea5 	bl	800b6c4 <HAL_UARTEx_SetRxFifoThreshold>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002980:	f000 f944 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <MX_USART1_UART_Init+0x90>)
 8002986:	f008 fe26 	bl	800b5d6 <HAL_UARTEx_DisableFifoMode>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002990:	f000 f93c 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	2003ae68 	.word	0x2003ae68
 800299c:	40013800 	.word	0x40013800

080029a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029a4:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029a6:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <MX_USART6_UART_Init+0x94>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80029aa:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80029be:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d6:	4b16      	ldr	r3, [pc, #88]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e2:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80029e8:	4811      	ldr	r0, [pc, #68]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029ea:	f008 f861 	bl	800aab0 <HAL_UART_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80029f4:	f000 f90a 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f8:	2100      	movs	r1, #0
 80029fa:	480d      	ldr	r0, [pc, #52]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 80029fc:	f008 fe24 	bl	800b648 <HAL_UARTEx_SetTxFifoThreshold>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002a06:	f000 f901 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4808      	ldr	r0, [pc, #32]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 8002a0e:	f008 fe59 	bl	800b6c4 <HAL_UARTEx_SetRxFifoThreshold>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002a18:	f000 f8f8 	bl	8002c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	@ (8002a30 <MX_USART6_UART_Init+0x90>)
 8002a1e:	f008 fdda 	bl	800b5d6 <HAL_UARTEx_DisableFifoMode>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002a28:	f000 f8f0 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2003aefc 	.word	0x2003aefc
 8002a34:	40006400 	.word	0x40006400

08002a38 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a3e:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <MX_USB_PCD_Init+0x60>)
 8002a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a44:	2208      	movs	r2, #8
 8002a46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a50:	2202      	movs	r2, #2
 8002a52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <MX_USB_PCD_Init+0x5c>)
 8002a80:	f001 fb78 	bl	8004174 <HAL_PCD_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8002a8a:	f000 f8bf 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2003af90 	.word	0x2003af90
 8002a98:	40016000 	.word	0x40016000

08002a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	4b51      	ldr	r3, [pc, #324]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad0:	4b49      	ldr	r3, [pc, #292]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ad6:	4a48      	ldr	r2, [pc, #288]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002adc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ae0:	4b45      	ldr	r3, [pc, #276]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af4:	4a40      	ldr	r2, [pc, #256]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002afe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b12:	4a39      	ldr	r2, [pc, #228]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b1c:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8002b30:	4832      	ldr	r0, [pc, #200]	@ (8002bfc <MX_GPIO_Init+0x160>)
 8002b32:	f001 f9c5 	bl	8003ec0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f240 1101 	movw	r1, #257	@ 0x101
 8002b3c:	4830      	ldr	r0, [pc, #192]	@ (8002c00 <MX_GPIO_Init+0x164>)
 8002b3e:	f001 f9bf 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b48:	482d      	ldr	r0, [pc, #180]	@ (8002c00 <MX_GPIO_Init+0x164>)
 8002b4a:	f001 f9b9 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b54:	482b      	ldr	r0, [pc, #172]	@ (8002c04 <MX_GPIO_Init+0x168>)
 8002b56:	f001 f9b3 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002b5a:	f24a 0313 	movw	r3, #40979	@ 0xa013
 8002b5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	4822      	ldr	r0, [pc, #136]	@ (8002bfc <MX_GPIO_Init+0x160>)
 8002b74:	f001 f83a 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b7e:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <MX_GPIO_Init+0x16c>)
 8002b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	481b      	ldr	r0, [pc, #108]	@ (8002bfc <MX_GPIO_Init+0x160>)
 8002b8e:	f001 f82d 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b92:	2304      	movs	r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	4813      	ldr	r0, [pc, #76]	@ (8002bfc <MX_GPIO_Init+0x160>)
 8002bae:	f001 f81d 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 8002bb2:	f240 5321 	movw	r3, #1313	@ 0x521
 8002bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480d      	ldr	r0, [pc, #52]	@ (8002c00 <MX_GPIO_Init+0x164>)
 8002bcc:	f001 f80e 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4806      	ldr	r0, [pc, #24]	@ (8002c04 <MX_GPIO_Init+0x168>)
 8002bea:	f000 ffff 	bl	8003bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	@ 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	44020c00 	.word	0x44020c00
 8002bfc:	42020800 	.word	0x42020800
 8002c00:	42020400 	.word	0x42020400
 8002c04:	42020000 	.word	0x42020000
 8002c08:	10110000 	.word	0x10110000

08002c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <Error_Handler+0x8>

08002c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0be      	sub	sp, #248	@ 0xf8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	22d0      	movs	r2, #208	@ 0xd0
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fe3e 	bl	800c8ca <memset>
  if(hi2c->Instance==I2C1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a26      	ldr	r2, [pc, #152]	@ (8002cec <HAL_I2C_MspInit+0xc4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d145      	bne.n	8002ce4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fafe 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c7a:	f7ff ffc7 	bl	8002c0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c84:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c8e:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c9c:	23c0      	movs	r3, #192	@ 0xc0
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca2:	2312      	movs	r3, #18
 8002ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	@ (8002cf4 <HAL_I2C_MspInit+0xcc>)
 8002cc2:	f000 ff93 	bl	8003bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ccc:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002cce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cd2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_I2C_MspInit+0xc8>)
 8002cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ce4:	bf00      	nop
 8002ce6:	37f8      	adds	r7, #248	@ 0xf8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40005400 	.word	0x40005400
 8002cf0:	44020c00 	.word	0x44020c00
 8002cf4:	42020400 	.word	0x42020400

08002cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0be      	sub	sp, #248	@ 0xf8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	22d0      	movs	r2, #208	@ 0xd0
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f009 fdd6 	bl	800c8ca <memset>
  if(hspi->Instance==SPI1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a31      	ldr	r2, [pc, #196]	@ (8002de8 <HAL_SPI_MspInit+0xf0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d15a      	bne.n	8002dde <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 fa96 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002d4a:	f7ff ff5f 	bl	8002c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d4e:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d54:	4a25      	ldr	r2, [pc, #148]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d5a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002d5e:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d72:	4a1e      	ldr	r2, [pc, #120]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_SPI_MspInit+0xf4>)
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d8a:	23a0      	movs	r3, #160	@ 0xa0
 8002d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002da2:	2305      	movs	r3, #5
 8002da4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4810      	ldr	r0, [pc, #64]	@ (8002df0 <HAL_SPI_MspInit+0xf8>)
 8002db0:	f000 ff1c 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db4:	2340      	movs	r3, #64	@ 0x40
 8002db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <HAL_SPI_MspInit+0xf8>)
 8002dda:	f000 ff07 	bl	8003bec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002dde:	bf00      	nop
 8002de0:	37f8      	adds	r7, #248	@ 0xf8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40013000 	.word	0x40013000
 8002dec:	44020c00 	.word	0x44020c00
 8002df0:	42020000 	.word	0x42020000

08002df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d117      	bne.n	8002e36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e0c:	4a37      	ldr	r2, [pc, #220]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e16:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	202d      	movs	r0, #45	@ 0x2d
 8002e2a:	f000 fe07 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e2e:	202d      	movs	r0, #45	@ 0x2d
 8002e30:	f000 fe1e 	bl	8003a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002e34:	e055      	b.n	8002ee2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_TIM_Base_MspInit+0xfc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d117      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e40:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e46:	4a29      	ldr	r2, [pc, #164]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	202e      	movs	r0, #46	@ 0x2e
 8002e64:	f000 fdea 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e68:	202e      	movs	r0, #46	@ 0x2e
 8002e6a:	f000 fe01 	bl	8003a70 <HAL_NVIC_EnableIRQ>
}
 8002e6e:	e038      	b.n	8002ee2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x100>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d117      	bne.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e80:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2030      	movs	r0, #48	@ 0x30
 8002e9e:	f000 fdcd 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ea2:	2030      	movs	r0, #48	@ 0x30
 8002ea4:	f000 fde4 	bl	8003a70 <HAL_NVIC_EnableIRQ>
}
 8002ea8:	e01b      	b.n	8002ee2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <HAL_TIM_Base_MspInit+0x104>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d116      	bne.n	8002ee2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eba:	4a0c      	ldr	r2, [pc, #48]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_TIM_Base_MspInit+0xf8>)
 8002ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2047      	movs	r0, #71	@ 0x47
 8002ed8:	f000 fdb0 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002edc:	2047      	movs	r0, #71	@ 0x47
 8002ede:	f000 fdc7 	bl	8003a70 <HAL_NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	44020c00 	.word	0x44020c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40014000 	.word	0x40014000

08002efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1c:	d11f      	bne.n	8002f5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f24:	4a34      	ldr	r2, [pc, #208]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f2e:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4829      	ldr	r0, [pc, #164]	@ (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002f58:	f000 fe48 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f5c:	e048      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <HAL_TIM_MspPostInit+0x104>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d11f      	bne.n	8002fa8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f68:	4b23      	ldr	r3, [pc, #140]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f86:	2302      	movs	r3, #2
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f96:	2302      	movs	r3, #2
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4818      	ldr	r0, [pc, #96]	@ (8003004 <HAL_TIM_MspPostInit+0x108>)
 8002fa2:	f000 fe23 	bl	8003bec <HAL_GPIO_Init>
}
 8002fa6:	e023      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_TIM_MspPostInit+0x10c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_TIM_MspPostInit+0xfc>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4804      	ldr	r0, [pc, #16]	@ (8002ffc <HAL_TIM_MspPostInit+0x100>)
 8002fec:	f000 fdfe 	bl	8003bec <HAL_GPIO_Init>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	@ 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	44020c00 	.word	0x44020c00
 8002ffc:	42020000 	.word	0x42020000
 8003000:	40000400 	.word	0x40000400
 8003004:	42020400 	.word	0x42020400
 8003008:	40000c00 	.word	0x40000c00

0800300c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0c4      	sub	sp, #272	@ 0x110
 8003010:	af00      	add	r7, sp, #0
 8003012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800302c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003030:	22d0      	movs	r2, #208	@ 0xd0
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f009 fc48 	bl	800c8ca <memset>
  if(huart->Instance==UART5)
 800303a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800303e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a92      	ldr	r2, [pc, #584]	@ (8003290 <HAL_UART_MspInit+0x284>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d16c      	bne.n	8003126 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800304c:	f04f 0210 	mov.w	r2, #16
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800305e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003062:	4618      	mov	r0, r3
 8003064:	f002 f904 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 800306e:	f7ff fdcd 	bl	8002c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003072:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003078:	4a86      	ldr	r2, [pc, #536]	@ (8003294 <HAL_UART_MspInit+0x288>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003082:	4b84      	ldr	r3, [pc, #528]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003090:	4b80      	ldr	r3, [pc, #512]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003096:	4a7f      	ldr	r2, [pc, #508]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_UART_MspInit+0x288>)
 80030a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	4b79      	ldr	r3, [pc, #484]	@ (8003294 <HAL_UART_MspInit+0x288>)
 80030b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b4:	4a77      	ldr	r2, [pc, #476]	@ (8003294 <HAL_UART_MspInit+0x288>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030be:	4b75      	ldr	r3, [pc, #468]	@ (8003294 <HAL_UART_MspInit+0x288>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80030cc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80030d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80030e6:	230e      	movs	r3, #14
 80030e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80030f0:	4619      	mov	r1, r3
 80030f2:	4869      	ldr	r0, [pc, #420]	@ (8003298 <HAL_UART_MspInit+0x28c>)
 80030f4:	f000 fd7a 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003112:	2308      	movs	r3, #8
 8003114:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003118:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800311c:	4619      	mov	r1, r3
 800311e:	485f      	ldr	r0, [pc, #380]	@ (800329c <HAL_UART_MspInit+0x290>)
 8003120:	f000 fd64 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003124:	e0af      	b.n	8003286 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8003126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800312a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5b      	ldr	r2, [pc, #364]	@ (80032a0 <HAL_UART_MspInit+0x294>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d147      	bne.n	80031c8 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003138:	f04f 0201 	mov.w	r2, #1
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800314e:	4618      	mov	r0, r3
 8003150:	f002 f88e 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800315a:	f7ff fd57 	bl	8002c0c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800315e:	4b4d      	ldr	r3, [pc, #308]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003164:	4a4b      	ldr	r2, [pc, #300]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <HAL_UART_MspInit+0x288>)
 800317e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003182:	4a44      	ldr	r2, [pc, #272]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800318c:	4b41      	ldr	r3, [pc, #260]	@ (8003294 <HAL_UART_MspInit+0x288>)
 800318e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800319a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800319e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80031b4:	2304      	movs	r3, #4
 80031b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80031be:	4619      	mov	r1, r3
 80031c0:	4835      	ldr	r0, [pc, #212]	@ (8003298 <HAL_UART_MspInit+0x28c>)
 80031c2:	f000 fd13 	bl	8003bec <HAL_GPIO_Init>
}
 80031c6:	e05e      	b.n	8003286 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 80031c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a33      	ldr	r2, [pc, #204]	@ (80032a4 <HAL_UART_MspInit+0x298>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d155      	bne.n	8003286 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80031da:	f04f 0220 	mov.w	r2, #32
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 f83d 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80031fc:	f7ff fd06 	bl	8002c0c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003200:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003206:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800320c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003210:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003216:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800321a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800321e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003228:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800322c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <HAL_UART_MspInit+0x288>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003244:	f003 0204 	and.w	r2, r3, #4
 8003248:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800324c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800325a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800325c:	23c0      	movs	r3, #192	@ 0xc0
 800325e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003274:	2307      	movs	r3, #7
 8003276:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800327e:	4619      	mov	r1, r3
 8003280:	4806      	ldr	r0, [pc, #24]	@ (800329c <HAL_UART_MspInit+0x290>)
 8003282:	f000 fcb3 	bl	8003bec <HAL_GPIO_Init>
}
 8003286:	bf00      	nop
 8003288:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40005000 	.word	0x40005000
 8003294:	44020c00 	.word	0x44020c00
 8003298:	42020400 	.word	0x42020400
 800329c:	42020800 	.word	0x42020800
 80032a0:	40013800 	.word	0x40013800
 80032a4:	40006400 	.word	0x40006400

080032a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0b8      	sub	sp, #224	@ 0xe0
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	22d0      	movs	r2, #208	@ 0xd0
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f009 fb06 	bl	800c8ca <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <HAL_PCD_MspInit+0x70>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d123      	bne.n	8003310 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0310 	mov.w	r3, #16
 80032d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80032d4:	2330      	movs	r3, #48	@ 0x30
 80032d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 ffc6 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80032ea:	f7ff fc8f 	bl	8002c0c <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 80032ee:	f001 f835 	bl	800435c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_PCD_MspInit+0x74>)
 80032f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032f8:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_PCD_MspInit+0x74>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_PCD_MspInit+0x74>)
 8003304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8003310:	bf00      	nop
 8003312:	37e0      	adds	r7, #224	@ 0xe0
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40016000 	.word	0x40016000
 800331c:	44020c00 	.word	0x44020c00

08003320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <NMI_Handler+0x4>

08003328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <HardFault_Handler+0x4>

08003330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <MemManage_Handler+0x4>

08003338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <BusFault_Handler+0x4>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <UsageFault_Handler+0x4>

08003348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003376:	f000 fa65 	bl	8003844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 8003384:	2102      	movs	r1, #2
 8003386:	4809      	ldr	r0, [pc, #36]	@ (80033ac <TIM2_IRQHandler+0x2c>)
 8003388:	f000 fd82 	bl	8003e90 <HAL_GPIO_ReadPin>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d107      	bne.n	80033a2 <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 8003392:	2201      	movs	r2, #1
 8003394:	2104      	movs	r1, #4
 8003396:	4806      	ldr	r0, [pc, #24]	@ (80033b0 <TIM2_IRQHandler+0x30>)
 8003398:	f7fe fda8 	bl	8001eec <Ramp_Out>
		Mototr_Poz_Inc(1);
 800339c:	2001      	movs	r0, #1
 800339e:	f7fe fca9 	bl	8001cf4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033a2:	4803      	ldr	r0, [pc, #12]	@ (80033b0 <TIM2_IRQHandler+0x30>)
 80033a4:	f006 fa72 	bl	800988c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	42020000 	.word	0x42020000
 80033b0:	2003aca4 	.word	0x2003aca4

080033b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 80033b8:	2102      	movs	r1, #2
 80033ba:	4809      	ldr	r0, [pc, #36]	@ (80033e0 <TIM3_IRQHandler+0x2c>)
 80033bc:	f000 fd68 	bl	8003e90 <HAL_GPIO_ReadPin>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 80033c6:	2202      	movs	r2, #2
 80033c8:	210c      	movs	r1, #12
 80033ca:	4806      	ldr	r0, [pc, #24]	@ (80033e4 <TIM3_IRQHandler+0x30>)
 80033cc:	f7fe fd8e 	bl	8001eec <Ramp_Out>
		Mototr_Poz_Inc(2);
 80033d0:	2002      	movs	r0, #2
 80033d2:	f7fe fc8f 	bl	8001cf4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033d6:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <TIM3_IRQHandler+0x30>)
 80033d8:	f006 fa58 	bl	800988c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	42020400 	.word	0x42020400
 80033e4:	2003acf0 	.word	0x2003acf0

080033e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 80033ec:	2101      	movs	r1, #1
 80033ee:	4809      	ldr	r0, [pc, #36]	@ (8003414 <TIM5_IRQHandler+0x2c>)
 80033f0:	f000 fd4e 	bl	8003e90 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2100      	movs	r1, #0
 80033fe:	4806      	ldr	r0, [pc, #24]	@ (8003418 <TIM5_IRQHandler+0x30>)
 8003400:	f7fe fd74 	bl	8001eec <Ramp_Out>
		  Mototr_Poz_Inc(0);
 8003404:	2000      	movs	r0, #0
 8003406:	f7fe fc75 	bl	8001cf4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800340a:	4803      	ldr	r0, [pc, #12]	@ (8003418 <TIM5_IRQHandler+0x30>)
 800340c:	f006 fa3e 	bl	800988c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	42020000 	.word	0x42020000
 8003418:	2003ad3c 	.word	0x2003ad3c

0800341c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003420:	4802      	ldr	r0, [pc, #8]	@ (800342c <TIM15_IRQHandler+0x10>)
 8003422:	f006 fa33 	bl	800988c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2003ad88 	.word	0x2003ad88

08003430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return 1;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <_kill>:

int _kill(int pid, int sig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800344a:	f009 fa91 	bl	800c970 <__errno>
 800344e:	4603      	mov	r3, r0
 8003450:	2216      	movs	r2, #22
 8003452:	601a      	str	r2, [r3, #0]
  return -1;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_exit>:

void _exit (int status)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffe7 	bl	8003440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <_exit+0x12>

08003476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e00a      	b.n	800349e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003488:	f3af 8000 	nop.w
 800348c:	4601      	mov	r1, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	60ba      	str	r2, [r7, #8]
 8003494:	b2ca      	uxtb	r2, r1
 8003496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf0      	blt.n	8003488 <_read+0x12>
  }

  return len;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e009      	b.n	80034d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	60ba      	str	r2, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	dbf1      	blt.n	80034c2 <_write+0x12>
  }
  return len;
 80034de:	687b      	ldr	r3, [r7, #4]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <_close>:

int _close(int file)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003510:	605a      	str	r2, [r3, #4]
  return 0;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_isatty>:

int _isatty(int file)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <_sbrk+0x5c>)
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <_sbrk+0x60>)
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <_sbrk+0x64>)
 800356e:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <_sbrk+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d207      	bcs.n	8003590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003580:	f009 f9f6 	bl	800c970 <__errno>
 8003584:	4603      	mov	r3, r0
 8003586:	220c      	movs	r2, #12
 8003588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e009      	b.n	80035a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003590:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <_sbrk+0x64>)
 80035a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20044000 	.word	0x20044000
 80035b0:	00000400 	.word	0x00000400
 80035b4:	2003b270 	.word	0x2003b270
 80035b8:	2003b3c8 	.word	0x2003b3c8

080035bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035c2:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <SystemInit+0xdc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <SystemInit+0xdc>)
 80035ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80035d2:	4b32      	ldr	r3, [pc, #200]	@ (800369c <SystemInit+0xe0>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80035d8:	4b30      	ldr	r3, [pc, #192]	@ (800369c <SystemInit+0xe0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80035de:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <SystemInit+0xe0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <SystemInit+0xe0>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	492c      	ldr	r1, [pc, #176]	@ (800369c <SystemInit+0xe0>)
 80035ea:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <SystemInit+0xe4>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80035f0:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <SystemInit+0xe0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80035f6:	4b29      	ldr	r3, [pc, #164]	@ (800369c <SystemInit+0xe0>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80035fc:	4b27      	ldr	r3, [pc, #156]	@ (800369c <SystemInit+0xe0>)
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003602:	4b26      	ldr	r3, [pc, #152]	@ (800369c <SystemInit+0xe0>)
 8003604:	4a27      	ldr	r2, [pc, #156]	@ (80036a4 <SystemInit+0xe8>)
 8003606:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <SystemInit+0xe0>)
 800360a:	2200      	movs	r2, #0
 800360c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <SystemInit+0xe0>)
 8003610:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <SystemInit+0xe8>)
 8003612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003614:	4b21      	ldr	r3, [pc, #132]	@ (800369c <SystemInit+0xe0>)
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <SystemInit+0xe0>)
 800361c:	4a21      	ldr	r2, [pc, #132]	@ (80036a4 <SystemInit+0xe8>)
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003620:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <SystemInit+0xe0>)
 8003622:	2200      	movs	r2, #0
 8003624:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003626:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <SystemInit+0xe0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <SystemInit+0xe0>)
 800362c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003630:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <SystemInit+0xe0>)
 8003634:	2200      	movs	r2, #0
 8003636:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003638:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <SystemInit+0xdc>)
 800363a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800363e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <SystemInit+0xec>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003648:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003650:	d003      	beq.n	800365a <SystemInit+0x9e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003658:	d117      	bne.n	800368a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800365a:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <SystemInit+0xec>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <SystemInit+0xec>)
 8003668:	4a10      	ldr	r2, [pc, #64]	@ (80036ac <SystemInit+0xf0>)
 800366a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800366c:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <SystemInit+0xec>)
 800366e:	4a10      	ldr	r2, [pc, #64]	@ (80036b0 <SystemInit+0xf4>)
 8003670:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <SystemInit+0xec>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <SystemInit+0xec>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800367e:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <SystemInit+0xec>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <SystemInit+0xec>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	61d3      	str	r3, [r2, #28]
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	44020c00 	.word	0x44020c00
 80036a0:	eae2eae3 	.word	0xeae2eae3
 80036a4:	01010280 	.word	0x01010280
 80036a8:	40022000 	.word	0x40022000
 80036ac:	08192a3b 	.word	0x08192a3b
 80036b0:	4c5d6e7f 	.word	0x4c5d6e7f

080036b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b8:	f7ff ff80 	bl	80035bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80036be:	490d      	ldr	r1, [pc, #52]	@ (80036f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036c0:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <LoopForever+0xe>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003700 <LoopForever+0x16>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036e2:	f009 f94b 	bl	800c97c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036e6:	f7fe fdad 	bl	8002244 <main>

080036ea <LoopForever>:

LoopForever:
    b LoopForever
 80036ea:	e7fe      	b.n	80036ea <LoopForever>
  ldr   r0, =_estack
 80036ec:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80036f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80036f8:	08010c98 	.word	0x08010c98
  ldr r2, =_sbss
 80036fc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003700:	2003b3c4 	.word	0x2003b3c4

08003704 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003704:	e7fe      	b.n	8003704 <ADC1_IRQHandler>
	...

08003708 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800370c:	2003      	movs	r0, #3
 800370e:	f000 f98a 	bl	8003a26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003712:	f001 fc23 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <HAL_Init+0x44>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	490b      	ldr	r1, [pc, #44]	@ (8003750 <HAL_Init+0x48>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <HAL_Init+0x4c>)
 800372a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800372c:	2004      	movs	r0, #4
 800372e:	f000 f9cf 	bl	8003ad0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003732:	200f      	movs	r0, #15
 8003734:	f000 f810 	bl	8003758 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e002      	b.n	8003748 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003742:	f7ff fa69 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	44020c00 	.word	0x44020c00
 8003750:	0801081c 	.word	0x0801081c
 8003754:	2000001c 	.word	0x2000001c

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003764:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <HAL_InitTick+0xdc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e05c      	b.n	800382a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003770:	4b31      	ldr	r3, [pc, #196]	@ (8003838 <HAL_InitTick+0xe0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d10c      	bne.n	8003796 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800377c:	4b2f      	ldr	r3, [pc, #188]	@ (800383c <HAL_InitTick+0xe4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <HAL_InitTick+0xdc>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378a:	fbb3 f3f1 	udiv	r3, r3, r1
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e037      	b.n	8003806 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003796:	f000 f9f3 	bl	8003b80 <HAL_SYSTICK_GetCLKSourceConfig>
 800379a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d023      	beq.n	80037ea <HAL_InitTick+0x92>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d82d      	bhi.n	8003804 <HAL_InitTick+0xac>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_InitTick+0x5e>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00d      	beq.n	80037d0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80037b4:	e026      	b.n	8003804 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80037b6:	4b21      	ldr	r3, [pc, #132]	@ (800383c <HAL_InitTick+0xe4>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_InitTick+0xdc>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4619      	mov	r1, r3
 80037c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80037c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	60fb      	str	r3, [r7, #12]
        break;
 80037ce:	e01a      	b.n	8003806 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_InitTick+0xdc>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037da:	fbb3 f3f2 	udiv	r3, r3, r2
 80037de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	60fb      	str	r3, [r7, #12]
        break;
 80037e8:	e00d      	b.n	8003806 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_InitTick+0xdc>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	60fb      	str	r3, [r7, #12]
        break;
 8003802:	e000      	b.n	8003806 <HAL_InitTick+0xae>
        break;
 8003804:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f940 	bl	8003a8c <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e009      	b.n	800382a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003816:	2200      	movs	r2, #0
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	f04f 30ff 	mov.w	r0, #4294967295
 800381e:	f000 f90d 	bl	8003a3c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003822:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <HAL_InitTick+0xe8>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000024 	.word	0x20000024
 8003838:	e000e010 	.word	0xe000e010
 800383c:	2000001c 	.word	0x2000001c
 8003840:	20000020 	.word	0x20000020

08003844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003848:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_IncTick+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_IncTick+0x24>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <HAL_IncTick+0x24>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000024 	.word	0x20000024
 8003868:	2003b274 	.word	0x2003b274

0800386c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return uwTick;
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_GetTick+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2003b274 	.word	0x2003b274

08003884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff ffee 	bl	800386c <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d005      	beq.n	80038aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_Delay+0x44>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038aa:	bf00      	nop
 80038ac:	f7ff ffde 	bl	800386c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8f7      	bhi.n	80038ac <HAL_Delay+0x28>
  {
  }
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000024 	.word	0x20000024

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	@ (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	@ (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	@ (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	@ 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff4c 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4a:	f7ff ff63 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f7ff ffb3 	bl	80039c0 <NVIC_EncodePriority>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff82 	bl	800396c <__NVIC_SetPriority>
}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff56 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a9c:	d301      	bcc.n	8003aa2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00d      	b.n	8003abe <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_SYSTICK_Config+0x40>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_SYSTICK_Config+0x40>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_SYSTICK_Config+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <HAL_SYSTICK_Config+0x40>)
 8003ab6:	f043 0303 	orr.w	r3, r3, #3
 8003aba:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010

08003ad0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d844      	bhi.n	8003b68 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b07 	.word	0x08003b07
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b47 	.word	0x08003b47
 8003af0:	08003b69 	.word	0x08003b69
 8003af4:	08003af9 	.word	0x08003af9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6013      	str	r3, [r2, #0]
      break;
 8003b04:	e031      	b.n	8003b6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003b12:	4b1a      	ldr	r3, [pc, #104]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b18:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b1a:	f023 030c 	bic.w	r3, r3, #12
 8003b1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003b22:	e022      	b.n	8003b6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003b24:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a13      	ldr	r2, [pc, #76]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003b30:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b36:	f023 030c 	bic.w	r3, r3, #12
 8003b3a:	4a10      	ldr	r2, [pc, #64]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003b44:	e011      	b.n	8003b6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003b46:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b78 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b58:	f023 030c 	bic.w	r3, r3, #12
 8003b5c:	4a07      	ldr	r2, [pc, #28]	@ (8003b7c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003b5e:	f043 0308 	orr.w	r3, r3, #8
 8003b62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003b66:	e000      	b.n	8003b6a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003b68:	bf00      	nop
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010
 8003b7c:	44020c00 	.word	0x44020c00

08003b80 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003b86:	4b17      	ldr	r3, [pc, #92]	@ (8003be4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003b92:	2304      	movs	r3, #4
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e01e      	b.n	8003bd6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003b98:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003b9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d00f      	beq.n	8003bca <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d80f      	bhi.n	8003bd0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d003      	beq.n	8003bc4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003bbc:	e008      	b.n	8003bd0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
        break;
 8003bc2:	e008      	b.n	8003bd6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
        break;
 8003bc8:	e005      	b.n	8003bd6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	607b      	str	r3, [r7, #4]
        break;
 8003bce:	e002      	b.n	8003bd6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	607b      	str	r3, [r7, #4]
        break;
 8003bd4:	bf00      	nop
    }
  }
  return systick_source;
 8003bd6:	687b      	ldr	r3, [r7, #4]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e010 	.word	0xe000e010
 8003be8:	44020c00 	.word	0x44020c00

08003bec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003bfa:	e136      	b.n	8003e6a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8128 	beq.w	8003e64 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x38>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b12      	cmp	r3, #18
 8003c22:	d125      	bne.n	8003c70 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	08da      	lsrs	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3208      	adds	r2, #8
 8003c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c30:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4013      	ands	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d00b      	beq.n	8003cc4 <HAL_GPIO_Init+0xd8>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d007      	beq.n	8003cc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cb8:	2b11      	cmp	r3, #17
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b12      	cmp	r3, #18
 8003cc2:	d130      	bne.n	8003d26 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 0201 	and.w	r2, r3, #1
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d017      	beq.n	8003d5e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4013      	ands	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d07c      	beq.n	8003e64 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d6a:	4a47      	ldr	r2, [pc, #284]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3318      	adds	r3, #24
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0a9a      	lsrs	r2, r3, #10
 8003d92:	4b3e      	ldr	r3, [pc, #248]	@ (8003e8c <HAL_GPIO_Init+0x2a0>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	f002 0203 	and.w	r2, r2, #3
 8003d9c:	00d2      	lsls	r2, r2, #3
 8003d9e:	4093      	lsls	r3, r2
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003da6:	4938      	ldr	r1, [pc, #224]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3318      	adds	r3, #24
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003db4:	4b34      	ldr	r3, [pc, #208]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003dde:	4b2a      	ldr	r3, [pc, #168]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4013      	ands	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003e02:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003e08:	4b1f      	ldr	r3, [pc, #124]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4013      	ands	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003e2e:	4a16      	ldr	r2, [pc, #88]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4013      	ands	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e88 <HAL_GPIO_Init+0x29c>)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f aec1 	bne.w	8003bfc <HAL_GPIO_Init+0x10>
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	44022000 	.word	0x44022000
 8003e8c:	002f7f7f 	.word	0x002f7f7f

08003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08d      	b.n	800401e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fe86 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e006      	b.n	8003f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d108      	bne.n	8003f92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e007      	b.n	8003fa2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69d9      	ldr	r1, [r3, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d138      	bne.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004046:	2302      	movs	r3, #2
 8004048:	e032      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2224      	movs	r2, #36	@ 0x24
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004078:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d139      	bne.n	8004146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040dc:	2302      	movs	r3, #2
 80040de:	e033      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800410e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_ICACHE_Enable+0x1c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_ICACHE_Enable+0x1c>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40030400 	.word	0x40030400

08004174 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0c3      	b.n	800430e <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff f884 	bl	80032a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f007 fb15 	bl	800b7dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e03f      	b.n	8004238 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	3315      	adds	r3, #21
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	3314      	adds	r3, #20
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	3317      	adds	r3, #23
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	3324      	adds	r3, #36	@ 0x24
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	3328      	adds	r3, #40	@ 0x28
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	3304      	adds	r3, #4
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	3301      	adds	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	791b      	ldrb	r3, [r3, #4]
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	429a      	cmp	r2, r3
 8004240:	d3ba      	bcc.n	80041b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	e044      	b.n	80042d2 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	3301      	adds	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d3b5      	bcc.n	8004248 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7c1a      	ldrb	r2, [r3, #16]
 80042e4:	f88d 2000 	strb.w	r2, [sp]
 80042e8:	3304      	adds	r3, #4
 80042ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ec:	f007 faae 	bl	800b84c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7b1b      	ldrb	r3, [r3, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f805 	bl	8004316 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f043 0201 	orr.w	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	f043 0202 	orr.w	r2, r3, #2
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800436a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	44020800 	.word	0x44020800

0800437c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f000 bc28 	b.w	8004be0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004390:	4b94      	ldr	r3, [pc, #592]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f003 0318 	and.w	r3, r3, #24
 8004398:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800439a:	4b92      	ldr	r3, [pc, #584]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b18      	cmp	r3, #24
 80043ba:	d114      	bne.n	80043e6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d111      	bne.n	80043e6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f000 bc08 	b.w	8004be0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80043d0:	4b84      	ldr	r3, [pc, #528]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	4981      	ldr	r1, [pc, #516]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80043e4:	e040      	b.n	8004468 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d023      	beq.n	8004436 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043ee:	4b7d      	ldr	r3, [pc, #500]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7c      	ldr	r2, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7ff fa37 	bl	800386c <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004402:	f7ff fa33 	bl	800386c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e3e5      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004414:	4b73      	ldr	r3, [pc, #460]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004420:	4b70      	ldr	r3, [pc, #448]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	496d      	ldr	r1, [pc, #436]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004430:	4313      	orrs	r3, r2
 8004432:	618b      	str	r3, [r1, #24]
 8004434:	e018      	b.n	8004468 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004436:	4b6b      	ldr	r3, [pc, #428]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6a      	ldr	r2, [pc, #424]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800443c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7ff fa13 	bl	800386c <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800444a:	f7ff fa0f 	bl	800386c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e3c1      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800445c:	4b61      	ldr	r3, [pc, #388]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a0 	beq.w	80045b6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d005      	beq.n	8004488 <HAL_RCC_OscConfig+0x10c>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b18      	cmp	r3, #24
 8004480:	d109      	bne.n	8004496 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8092 	bne.w	80045b6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e3a4      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x132>
 80044a0:	4b50      	ldr	r3, [pc, #320]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4f      	ldr	r2, [pc, #316]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e058      	b.n	8004560 <HAL_RCC_OscConfig+0x1e4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d112      	bne.n	80044dc <HAL_RCC_OscConfig+0x160>
 80044b6:	4b4b      	ldr	r3, [pc, #300]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b48      	ldr	r3, [pc, #288]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a47      	ldr	r2, [pc, #284]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b45      	ldr	r3, [pc, #276]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a44      	ldr	r2, [pc, #272]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e041      	b.n	8004560 <HAL_RCC_OscConfig+0x1e4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e4:	d112      	bne.n	800450c <HAL_RCC_OscConfig+0x190>
 80044e6:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3e      	ldr	r2, [pc, #248]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b3c      	ldr	r3, [pc, #240]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3b      	ldr	r2, [pc, #236]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a38      	ldr	r2, [pc, #224]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e029      	b.n	8004560 <HAL_RCC_OscConfig+0x1e4>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004514:	d112      	bne.n	800453c <HAL_RCC_OscConfig+0x1c0>
 8004516:	4b33      	ldr	r3, [pc, #204]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a32      	ldr	r2, [pc, #200]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b30      	ldr	r3, [pc, #192]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b2d      	ldr	r3, [pc, #180]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e011      	b.n	8004560 <HAL_RCC_OscConfig+0x1e4>
 800453c:	4b29      	ldr	r3, [pc, #164]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a28      	ldr	r2, [pc, #160]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b26      	ldr	r3, [pc, #152]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 800455a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7ff f980 	bl	800386c <HAL_GetTick>
 800456c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004570:	f7ff f97c 	bl	800386c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e32e      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004582:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x1f4>
 800458e:	e012      	b.n	80045b6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7ff f96c 	bl	800386c <HAL_GetTick>
 8004594:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004598:	f7ff f968 	bl	800386c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e31a      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045aa:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCC_OscConfig+0x268>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 809a 	beq.w	80046f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x25a>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b18      	cmp	r3, #24
 80045ce:	d149      	bne.n	8004664 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d146      	bne.n	8004664 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e2fe      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
 80045e2:	bf00      	nop
 80045e4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80045ee:	4b9a      	ldr	r3, [pc, #616]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0218 	and.w	r2, r3, #24
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d014      	beq.n	8004628 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80045fe:	4b96      	ldr	r3, [pc, #600]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0218 	bic.w	r2, r3, #24
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	4993      	ldr	r1, [pc, #588]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004610:	f000 fdd0 	bl	80051b4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004614:	4b91      	ldr	r3, [pc, #580]	@ (800485c <HAL_RCC_OscConfig+0x4e0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f89d 	bl	8003758 <HAL_InitTick>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e2db      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7ff f920 	bl	800386c <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004630:	f7ff f91c 	bl	800386c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e2ce      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004642:	4b85      	ldr	r3, [pc, #532]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800464e:	4b82      	ldr	r3, [pc, #520]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	497e      	ldr	r1, [pc, #504]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004662:	e049      	b.n	80046f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d02c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800466c:	4b7a      	ldr	r3, [pc, #488]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 0218 	bic.w	r2, r3, #24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	4977      	ldr	r1, [pc, #476]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800467e:	4b76      	ldr	r3, [pc, #472]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a75      	ldr	r2, [pc, #468]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7ff f8ef 	bl	800386c <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004692:	f7ff f8eb 	bl	800386c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e29d      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80046b0:	4b69      	ldr	r3, [pc, #420]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	4966      	ldr	r1, [pc, #408]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	610b      	str	r3, [r1, #16]
 80046c4:	e018      	b.n	80046f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b64      	ldr	r3, [pc, #400]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7ff f8cb 	bl	800386c <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80046da:	f7ff f8c7 	bl	800386c <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e279      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d03c      	beq.n	800477e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01c      	beq.n	8004746 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470c:	4b52      	ldr	r3, [pc, #328]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800470e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004712:	4a51      	ldr	r2, [pc, #324]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004718:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7ff f8a6 	bl	800386c <HAL_GetTick>
 8004720:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004724:	f7ff f8a2 	bl	800386c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e254      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004736:	4b48      	ldr	r3, [pc, #288]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <HAL_RCC_OscConfig+0x3a8>
 8004744:	e01b      	b.n	800477e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004746:	4b44      	ldr	r3, [pc, #272]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	4a42      	ldr	r2, [pc, #264]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800474e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7ff f889 	bl	800386c <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800475e:	f7ff f885 	bl	800386c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e237      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004770:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ef      	bne.n	800475e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80d2 	beq.w	8004930 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800478c:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <HAL_RCC_OscConfig+0x4e4>)
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d118      	bne.n	80047ca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004798:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <HAL_RCC_OscConfig+0x4e4>)
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	4a30      	ldr	r2, [pc, #192]	@ (8004860 <HAL_RCC_OscConfig+0x4e4>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a4:	f7ff f862 	bl	800386c <HAL_GetTick>
 80047a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7ff f85e 	bl	800386c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e210      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80047be:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <HAL_RCC_OscConfig+0x4e4>)
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d108      	bne.n	80047e4 <HAL_RCC_OscConfig+0x468>
 80047d2:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80047d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047e2:	e074      	b.n	80048ce <HAL_RCC_OscConfig+0x552>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d118      	bne.n	800481e <HAL_RCC_OscConfig+0x4a2>
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f2:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047fc:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 80047fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004802:	4a15      	ldr	r2, [pc, #84]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004808:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800480c:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800480e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004812:	4a11      	ldr	r2, [pc, #68]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800481c:	e057      	b.n	80048ce <HAL_RCC_OscConfig+0x552>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b05      	cmp	r3, #5
 8004824:	d11e      	bne.n	8004864 <HAL_RCC_OscConfig+0x4e8>
 8004826:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800482c:	4a0a      	ldr	r2, [pc, #40]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004836:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800483c:	4a06      	ldr	r2, [pc, #24]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800483e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004842:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004846:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800484c:	4a02      	ldr	r2, [pc, #8]	@ (8004858 <HAL_RCC_OscConfig+0x4dc>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x552>
 8004858:	44020c00 	.word	0x44020c00
 800485c:	20000020 	.word	0x20000020
 8004860:	44020800 	.word	0x44020800
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b85      	cmp	r3, #133	@ 0x85
 800486a:	d118      	bne.n	800489e <HAL_RCC_OscConfig+0x522>
 800486c:	4ba2      	ldr	r3, [pc, #648]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800486e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004872:	4aa1      	ldr	r2, [pc, #644]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800487c:	4b9e      	ldr	r3, [pc, #632]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800487e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004882:	4a9d      	ldr	r2, [pc, #628]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004888:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800488c:	4b9a      	ldr	r3, [pc, #616]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800488e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004892:	4a99      	ldr	r2, [pc, #612]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800489c:	e017      	b.n	80048ce <HAL_RCC_OscConfig+0x552>
 800489e:	4b96      	ldr	r3, [pc, #600]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a4:	4a94      	ldr	r2, [pc, #592]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048ae:	4b92      	ldr	r3, [pc, #584]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b4:	4a90      	ldr	r2, [pc, #576]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048be:	4b8e      	ldr	r3, [pc, #568]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c4:	4a8c      	ldr	r2, [pc, #560]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fe ffc9 	bl	800386c <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fe ffc5 	bl	800386c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e175      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f4:	4b80      	ldr	r3, [pc, #512]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80048f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0ed      	beq.n	80048de <HAL_RCC_OscConfig+0x562>
 8004902:	e015      	b.n	8004930 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fe ffb2 	bl	800386c <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490a:	e00a      	b.n	8004922 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fe ffae 	bl	800386c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e15e      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004922:	4b75      	ldr	r3, [pc, #468]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ed      	bne.n	800490c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d036      	beq.n	80049aa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004944:	4b6c      	ldr	r3, [pc, #432]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6b      	ldr	r2, [pc, #428]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800494a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800494e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fe ff8c 	bl	800386c <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004958:	f7fe ff88 	bl	800386c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e13a      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800496a:	4b63      	ldr	r3, [pc, #396]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x5dc>
 8004976:	e018      	b.n	80049aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004978:	4b5f      	ldr	r3, [pc, #380]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5e      	ldr	r2, [pc, #376]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 800497e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fe ff72 	bl	800386c <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800498c:	f7fe ff6e 	bl	800386c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e120      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800499e:	4b56      	ldr	r3, [pc, #344]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8115 	beq.w	8004bde <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b18      	cmp	r3, #24
 80049b8:	f000 80af 	beq.w	8004b1a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 8086 	bne.w	8004ad2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80049c6:	4b4c      	ldr	r3, [pc, #304]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4b      	ldr	r2, [pc, #300]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80049cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fe ff4b 	bl	800386c <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80049da:	f7fe ff47 	bl	800386c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0f9      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049ec:	4b42      	ldr	r3, [pc, #264]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80049f8:	4b3f      	ldr	r3, [pc, #252]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a0c:	0212      	lsls	r2, r2, #8
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	4939      	ldr	r1, [pc, #228]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	3b01      	subs	r3, #1
 8004a26:	025b      	lsls	r3, r3, #9
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a46:	492c      	ldr	r1, [pc, #176]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5c:	4a26      	ldr	r2, [pc, #152]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004a62:	4b25      	ldr	r3, [pc, #148]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004a6e:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	f023 020c 	bic.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	491f      	ldr	r1, [pc, #124]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	f023 0220 	bic.w	r2, r3, #32
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8c:	491a      	ldr	r1, [pc, #104]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a92:	4b19      	ldr	r3, [pc, #100]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	4a18      	ldr	r2, [pc, #96]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004a9e:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fedf 	bl	800386c <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004ab2:	f7fe fedb 	bl	800386c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e08d      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x736>
 8004ad0:	e085      	b.n	8004bde <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004ad2:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a08      	ldr	r2, [pc, #32]	@ (8004af8 <HAL_RCC_OscConfig+0x77c>)
 8004ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ade:	f7fe fec5 	bl	800386c <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004ae6:	f7fe fec1 	bl	800386c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d903      	bls.n	8004afc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e073      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
 8004af8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004afc:	4b3a      	ldr	r3, [pc, #232]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ee      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004b08:	4b37      	ldr	r3, [pc, #220]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	4a36      	ldr	r2, [pc, #216]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004b0e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	6293      	str	r3, [r2, #40]	@ 0x28
 8004b18:	e061      	b.n	8004bde <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004b1a:	4b33      	ldr	r3, [pc, #204]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b20:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b24:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d031      	beq.n	8004b92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f003 0203 	and.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d12a      	bne.n	8004b92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d122      	bne.n	8004b92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d11a      	bne.n	8004b92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0a5b      	lsrs	r3, r3, #9
 8004b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d111      	bne.n	8004b92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0e1b      	lsrs	r3, r3, #24
 8004b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e024      	b.n	8004be0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b96:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d01a      	beq.n	8004bde <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	4a0e      	ldr	r2, [pc, #56]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fe5a 	bl	800386c <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004bba:	bf00      	nop
 8004bbc:	f7fe fe56 	bl	800386c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d0f9      	beq.n	8004bbc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bcc:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <HAL_RCC_OscConfig+0x86c>)
 8004bd8:	f043 0310 	orr.w	r3, r3, #16
 8004bdc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	44020c00 	.word	0x44020c00

08004bec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e19e      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c00:	4b83      	ldr	r3, [pc, #524]	@ (8004e10 <HAL_RCC_ClockConfig+0x224>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d910      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <HAL_RCC_ClockConfig+0x224>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 020f 	bic.w	r2, r3, #15
 8004c16:	497e      	ldr	r1, [pc, #504]	@ (8004e10 <HAL_RCC_ClockConfig+0x224>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e10 <HAL_RCC_ClockConfig+0x224>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e186      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	4b74      	ldr	r3, [pc, #464]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d909      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004c4e:	4b71      	ldr	r3, [pc, #452]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	496d      	ldr	r1, [pc, #436]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	4b68      	ldr	r3, [pc, #416]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d909      	bls.n	8004c94 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004c80:	4b64      	ldr	r3, [pc, #400]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	4961      	ldr	r1, [pc, #388]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004cb0:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4955      	ldr	r1, [pc, #340]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b50      	ldr	r3, [pc, #320]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d908      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004cde:	4b4d      	ldr	r3, [pc, #308]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 020f 	bic.w	r2, r3, #15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	494a      	ldr	r1, [pc, #296]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8093 	beq.w	8004e24 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d06:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d121      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e113      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d115      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e107      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004d36:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0fb      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d46:	4b33      	ldr	r3, [pc, #204]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0f3      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004d56:	4b2f      	ldr	r3, [pc, #188]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	492c      	ldr	r1, [pc, #176]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fe fd80 	bl	800386c <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d112      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fe fd78 	bl	800386c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e0d7      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8e:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0318 	and.w	r3, r3, #24
 8004d96:	2b18      	cmp	r3, #24
 8004d98:	d1ee      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x18c>
 8004d9a:	e043      	b.n	8004e24 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d112      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fe fd61 	bl	800386c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0c0      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbc:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 0318 	and.w	r3, r3, #24
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
 8004dc8:	e02c      	b.n	8004e24 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d122      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fe fd4a 	bl	800386c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0a9      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004dea:	4b0a      	ldr	r3, [pc, #40]	@ (8004e14 <HAL_RCC_ClockConfig+0x228>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0318 	and.w	r3, r3, #24
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d1ee      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x1e8>
 8004df6:	e015      	b.n	8004e24 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fe fd38 	bl	800386c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d906      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e097      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
 8004e0e:	bf00      	nop
 8004e10:	40022000 	.word	0x40022000
 8004e14:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e18:	4b4b      	ldr	r3, [pc, #300]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f003 0318 	and.w	r3, r3, #24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e9      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b44      	ldr	r3, [pc, #272]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d208      	bcs.n	8004e52 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004e40:	4b41      	ldr	r3, [pc, #260]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f023 020f 	bic.w	r2, r3, #15
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	493e      	ldr	r1, [pc, #248]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e52:	4b3e      	ldr	r3, [pc, #248]	@ (8004f4c <HAL_RCC_ClockConfig+0x360>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d210      	bcs.n	8004e82 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e60:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <HAL_RCC_ClockConfig+0x360>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 020f 	bic.w	r2, r3, #15
 8004e68:	4938      	ldr	r1, [pc, #224]	@ (8004f4c <HAL_RCC_ClockConfig+0x360>)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e70:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <HAL_RCC_ClockConfig+0x360>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e05d      	b.n	8004f3e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4b2d      	ldr	r3, [pc, #180]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d208      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	4927      	ldr	r1, [pc, #156]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d012      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	4b21      	ldr	r3, [pc, #132]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d209      	bcs.n	8004ee2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004ece:	4b1e      	ldr	r3, [pc, #120]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	491a      	ldr	r1, [pc, #104]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d012      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d209      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	490e      	ldr	r1, [pc, #56]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f14:	f000 f822 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	490b      	ldr	r1, [pc, #44]	@ (8004f50 <HAL_RCC_ClockConfig+0x364>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <HAL_RCC_ClockConfig+0x368>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <HAL_RCC_ClockConfig+0x36c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fc10 	bl	8003758 <HAL_InitTick>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	44020c00 	.word	0x44020c00
 8004f4c:	40022000 	.word	0x40022000
 8004f50:	0801081c 	.word	0x0801081c
 8004f54:	2000001c 	.word	0x2000001c
 8004f58:	20000020 	.word	0x20000020

08004f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	@ 0x24
 8004f60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004f62:	4b8c      	ldr	r3, [pc, #560]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f003 0318 	and.w	r3, r3, #24
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d102      	bne.n	8004f74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e107      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f74:	4b87      	ldr	r3, [pc, #540]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0318 	and.w	r3, r3, #24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d112      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004f80:	4b84      	ldr	r3, [pc, #528]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f8c:	4b81      	ldr	r3, [pc, #516]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	08db      	lsrs	r3, r3, #3
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	4a81      	ldr	r2, [pc, #516]	@ (800519c <HAL_RCC_GetSysClockFreq+0x240>)
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e0f1      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800519c <HAL_RCC_GetSysClockFreq+0x240>)
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e0ee      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0318 	and.w	r3, r3, #24
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d102      	bne.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x244>)
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e0e5      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb8:	4b76      	ldr	r3, [pc, #472]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0318 	and.w	r3, r3, #24
 8004fc0:	2b18      	cmp	r3, #24
 8004fc2:	f040 80dd 	bne.w	8005180 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004fc6:	4b73      	ldr	r3, [pc, #460]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fd0:	4b70      	ldr	r3, [pc, #448]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fdc:	4b6d      	ldr	r3, [pc, #436]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005000:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80b7 	beq.w	800517a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d003      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0xbe>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d056      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0x16a>
 8005018:	e077      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800501a:	4b5e      	ldr	r3, [pc, #376]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02d      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005026:	4b5b      	ldr	r3, [pc, #364]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	08db      	lsrs	r3, r3, #3
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	4a5a      	ldr	r2, [pc, #360]	@ (800519c <HAL_RCC_GetSysClockFreq+0x240>)
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005050:	4b50      	ldr	r3, [pc, #320]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8005052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005060:	ed97 6a02 	vldr	s12, [r7, #8]
 8005064:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005068:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800506c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005074:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005080:	e065      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x24c>
 8005090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005094:	4b3f      	ldr	r3, [pc, #252]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80050a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x248>
 80050ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80050b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80050c4:	e043      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x250>
 80050d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 80050da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ec:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x248>
 80050f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005104:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005108:	e021      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005114:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x254>
 8005118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 800511e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800512c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005130:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005134:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005138:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800513c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005140:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005148:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800514c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800514e:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x238>)
 8005150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005152:	0a5b      	lsrs	r3, r3, #9
 8005154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005158:	3301      	adds	r3, #1
 800515a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005166:	edd7 6a06 	vldr	s13, [r7, #24]
 800516a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005172:	ee17 3a90 	vmov	r3, s15
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e004      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e001      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_RCC_GetSysClockFreq+0x240>)
 8005182:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005184:	69fb      	ldr	r3, [r7, #28]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	@ 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	44020c00 	.word	0x44020c00
 8005198:	003d0900 	.word	0x003d0900
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	016e3600 	.word	0x016e3600
 80051a4:	46000000 	.word	0x46000000
 80051a8:	4c742400 	.word	0x4c742400
 80051ac:	4bb71b00 	.word	0x4bb71b00
 80051b0:	4a742400 	.word	0x4a742400

080051b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80051b8:	f7ff fed0 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80051c2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80051c6:	4907      	ldr	r1, [pc, #28]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80051c8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80051ca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	4a05      	ldr	r2, [pc, #20]	@ (80051e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80051d4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80051d6:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80051d8:	681b      	ldr	r3, [r3, #0]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	44020c00 	.word	0x44020c00
 80051e4:	0801081c 	.word	0x0801081c
 80051e8:	2000001c 	.word	0x2000001c

080051ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80051f0:	f7ff ffe0 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	4904      	ldr	r1, [pc, #16]	@ (8005214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	44020c00 	.word	0x44020c00
 8005214:	0801082c 	.word	0x0801082c

08005218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800521c:	f7ff ffca 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	@ (8005240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	44020c00 	.word	0x44020c00
 8005240:	0801082c 	.word	0x0801082c

08005244 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005248:	f7ff ffb4 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	0b1b      	lsrs	r3, r3, #12
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <HAL_RCC_GetPCLK3Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	44020c00 	.word	0x44020c00
 800526c:	0801082c 	.word	0x0801082c

08005270 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005274:	b0ba      	sub	sp, #232	@ 0xe8
 8005276:	af00      	add	r7, sp, #0
 8005278:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800527c:	2300      	movs	r3, #0
 800527e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005282:	2300      	movs	r3, #0
 8005284:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005294:	2500      	movs	r5, #0
 8005296:	ea54 0305 	orrs.w	r3, r4, r5
 800529a:	d00b      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800529c:	4bcd      	ldr	r3, [pc, #820]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800529e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052a2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	4ac9      	ldr	r2, [pc, #804]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f002 0801 	and.w	r8, r2, #1
 80052c0:	f04f 0900 	mov.w	r9, #0
 80052c4:	ea58 0309 	orrs.w	r3, r8, r9
 80052c8:	d042      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d823      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005325 	.word	0x08005325
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	08005325 	.word	0x08005325
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f8:	3308      	adds	r3, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 f906 	bl	800850c <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8005306:	e00e      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800530c:	3330      	adds	r3, #48	@ 0x30
 800530e:	4618      	mov	r0, r3
 8005310:	f003 f994 	bl	800863c <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800531a:	e004      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005326:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800532e:	4ba9      	ldr	r3, [pc, #676]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005334:	f023 0107 	bic.w	r1, r3, #7
 8005338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800533c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533e:	4aa5      	ldr	r2, [pc, #660]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005340:	430b      	orrs	r3, r1
 8005342:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800534c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f002 0a02 	and.w	sl, r2, #2
 800535c:	f04f 0b00 	mov.w	fp, #0
 8005360:	ea5a 030b 	orrs.w	r3, sl, fp
 8005364:	f000 8088 	beq.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536e:	2b28      	cmp	r3, #40	@ 0x28
 8005370:	d868      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800544d 	.word	0x0800544d
 800537c:	08005445 	.word	0x08005445
 8005380:	08005445 	.word	0x08005445
 8005384:	08005445 	.word	0x08005445
 8005388:	08005445 	.word	0x08005445
 800538c:	08005445 	.word	0x08005445
 8005390:	08005445 	.word	0x08005445
 8005394:	08005445 	.word	0x08005445
 8005398:	0800541d 	.word	0x0800541d
 800539c:	08005445 	.word	0x08005445
 80053a0:	08005445 	.word	0x08005445
 80053a4:	08005445 	.word	0x08005445
 80053a8:	08005445 	.word	0x08005445
 80053ac:	08005445 	.word	0x08005445
 80053b0:	08005445 	.word	0x08005445
 80053b4:	08005445 	.word	0x08005445
 80053b8:	08005431 	.word	0x08005431
 80053bc:	08005445 	.word	0x08005445
 80053c0:	08005445 	.word	0x08005445
 80053c4:	08005445 	.word	0x08005445
 80053c8:	08005445 	.word	0x08005445
 80053cc:	08005445 	.word	0x08005445
 80053d0:	08005445 	.word	0x08005445
 80053d4:	08005445 	.word	0x08005445
 80053d8:	0800544d 	.word	0x0800544d
 80053dc:	08005445 	.word	0x08005445
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005445 	.word	0x08005445
 80053e8:	08005445 	.word	0x08005445
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005445 	.word	0x08005445
 80053f4:	08005445 	.word	0x08005445
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005445 	.word	0x08005445
 800540c:	08005445 	.word	0x08005445
 8005410:	08005445 	.word	0x08005445
 8005414:	08005445 	.word	0x08005445
 8005418:	0800544d 	.word	0x0800544d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800541c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005420:	3308      	adds	r3, #8
 8005422:	4618      	mov	r0, r3
 8005424:	f003 f872 	bl	800850c <RCCEx_PLL2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800542e:	e00e      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005434:	3330      	adds	r3, #48	@ 0x30
 8005436:	4618      	mov	r0, r3
 8005438:	f003 f900 	bl	800863c <RCCEx_PLL3_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005442:	e004      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800544c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005456:	4b5f      	ldr	r3, [pc, #380]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800545c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005466:	4a5b      	ldr	r2, [pc, #364]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005468:	430b      	orrs	r3, r1
 800546a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005474:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 0304 	and.w	r3, r2, #4
 8005484:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800548e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d04e      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800549c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800549e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80054a2:	d02c      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80054a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80054a8:	d825      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ae:	d028      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b4:	d81f      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80054b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b8:	d025      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80054ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80054bc:	d81b      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80054be:	2b80      	cmp	r3, #128	@ 0x80
 80054c0:	d00f      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d817      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01f      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d113      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054d2:	3308      	adds	r3, #8
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 f819 	bl	800850c <RCCEx_PLL2_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80054e0:	e014      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e6:	3330      	adds	r3, #48	@ 0x30
 80054e8:	4618      	mov	r0, r3
 80054ea:	f003 f8a7 	bl	800863c <RCCEx_PLL3_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80054f4:	e00a      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054fc:	e006      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80054fe:	bf00      	nop
 8005500:	e004      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800550a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005514:	4b2f      	ldr	r3, [pc, #188]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800551a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800551e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005524:	4a2b      	ldr	r2, [pc, #172]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005526:	430b      	orrs	r3, r1
 8005528:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800552c:	e003      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005532:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f002 0308 	and.w	r3, r2, #8
 8005542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800554c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d056      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800555a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800555c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005560:	d031      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005562:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005566:	d82a      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800556c:	d02d      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800556e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005572:	d824      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005574:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005578:	d029      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800557a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800557e:	d81e      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005584:	d011      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800558a:	d818      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005594:	d113      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559a:	3308      	adds	r3, #8
 800559c:	4618      	mov	r0, r3
 800559e:	f002 ffb5 	bl	800850c <RCCEx_PLL2_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80055a8:	e017      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ae:	3330      	adds	r3, #48	@ 0x30
 80055b0:	4618      	mov	r0, r3
 80055b2:	f003 f843 	bl	800863c <RCCEx_PLL3_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80055bc:	e00d      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055c4:	e009      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80055c6:	bf00      	nop
 80055c8:	e007      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80055ca:	bf00      	nop
 80055cc:	e005      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80055ce:	bf00      	nop
 80055d0:	e003      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80055d2:	bf00      	nop
 80055d4:	44020c00 	.word	0x44020c00
        break;
 80055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10c      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80055e2:	4bb9      	ldr	r3, [pc, #740]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055e8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80055ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f2:	4ab5      	ldr	r2, [pc, #724]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005600:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 0310 	and.w	r3, r2, #16
 8005610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800561a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800561e:	460b      	mov	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	d053      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800562e:	d031      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005630:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005634:	d82a      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800563a:	d02d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800563c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005640:	d824      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005642:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005646:	d029      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005648:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800564c:	d81e      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005652:	d011      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005658:	d818      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005662:	d113      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005668:	3308      	adds	r3, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f002 ff4e 	bl	800850c <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005676:	e014      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567c:	3330      	adds	r3, #48	@ 0x30
 800567e:	4618      	mov	r0, r3
 8005680:	f002 ffdc 	bl	800863c <RCCEx_PLL3_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800568a:	e00a      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005692:	e006      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005694:	bf00      	nop
 8005696:	e004      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80056a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80056aa:	4b87      	ldr	r3, [pc, #540]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ba:	4a83      	ldr	r2, [pc, #524]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80056c2:	e003      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f002 0320 	and.w	r3, r2, #32
 80056d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d053      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80056ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80056f6:	d031      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80056f8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80056fc:	d82a      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80056fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005702:	d02d      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005708:	d824      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800570a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800570e:	d029      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005710:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005714:	d81e      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571a:	d011      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d818      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d020      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572a:	d113      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800572c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005730:	3308      	adds	r3, #8
 8005732:	4618      	mov	r0, r3
 8005734:	f002 feea 	bl	800850c <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800573e:	e014      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005744:	3330      	adds	r3, #48	@ 0x30
 8005746:	4618      	mov	r0, r3
 8005748:	f002 ff78 	bl	800863c <RCCEx_PLL3_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005752:	e00a      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800575a:	e006      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005772:	4b55      	ldr	r3, [pc, #340]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005778:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800577c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005782:	4a51      	ldr	r2, [pc, #324]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005784:	430b      	orrs	r3, r1
 8005786:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005790:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80057a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d053      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80057be:	d031      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80057c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80057c4:	d82a      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ca:	d02d      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80057cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057d0:	d824      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057d6:	d029      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80057d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057dc:	d81e      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e2:	d011      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80057e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e8:	d818      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80057ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057f2:	d113      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f8:	3308      	adds	r3, #8
 80057fa:	4618      	mov	r0, r3
 80057fc:	f002 fe86 	bl	800850c <RCCEx_PLL2_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005806:	e014      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580c:	3330      	adds	r3, #48	@ 0x30
 800580e:	4618      	mov	r0, r3
 8005810:	f002 ff14 	bl	800863c <RCCEx_PLL3_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800581a:	e00a      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005822:	e006      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005824:	bf00      	nop
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005828:	bf00      	nop
 800582a:	e002      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800582c:	bf00      	nop
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005832:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10c      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800583a:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800583c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005840:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584a:	4a1f      	ldr	r2, [pc, #124]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800584c:	430b      	orrs	r3, r1
 800584e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005852:	e003      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005858:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800585c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005872:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d03d      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800587c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005882:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005886:	d01b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800588c:	d814      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800588e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005892:	d017      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8005894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005898:	d80e      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d016      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800589e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a8:	3330      	adds	r3, #48	@ 0x30
 80058aa:	4618      	mov	r0, r3
 80058ac:	f002 fec6 	bl	800863c <RCCEx_PLL3_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80058b6:	e00a      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058be:	e006      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80058c0:	bf00      	nop
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80058c4:	bf00      	nop
 80058c6:	e002      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80058c8:	44020c00 	.word	0x44020c00
        break;
 80058cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80058d6:	4b99      	ldr	r3, [pc, #612]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058dc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80058e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e6:	4a95      	ldr	r2, [pc, #596]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058ee:	e003      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800590e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	d03b      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800591e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005922:	d01b      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005924:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005928:	d814      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800592a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800592e:	d017      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005930:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005934:	d80e      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d014      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800593a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800593e:	d109      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005944:	3330      	adds	r3, #48	@ 0x30
 8005946:	4618      	mov	r0, r3
 8005948:	f002 fe78 	bl	800863c <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10c      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800596e:	4b73      	ldr	r3, [pc, #460]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005974:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800597c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597e:	4a6f      	ldr	r2, [pc, #444]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005980:	430b      	orrs	r3, r1
 8005982:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800598c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800599c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80059aa:	460b      	mov	r3, r1
 80059ac:	4313      	orrs	r3, r2
 80059ae:	d03d      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80059b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059bc:	d01b      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80059be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059c2:	d814      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80059c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c8:	d017      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80059ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ce:	d80e      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d014      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80059d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d8:	d109      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059de:	3330      	adds	r3, #48	@ 0x30
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fe2b 	bl	800863c <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80059ec:	e008      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059f4:	e004      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80059fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005a08:	4b4c      	ldr	r3, [pc, #304]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1a:	4a48      	ldr	r2, [pc, #288]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d035      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a58:	d015      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a5e:	d80e      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a68:	d109      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a6e:	3330      	adds	r3, #48	@ 0x30
 8005a70:	4618      	mov	r0, r3
 8005a72:	f002 fde3 	bl	800863c <RCCEx_PLL3_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005a7c:	e006      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005a94:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a9a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa6:	4a25      	ldr	r2, [pc, #148]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005aae:	e003      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ab4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ace:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d037      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ae4:	d015      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aea:	d80e      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d012      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005af4:	d109      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005afa:	3330      	adds	r3, #48	@ 0x30
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 fd9d 	bl	800863c <RCCEx_PLL3_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005b16:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005b20:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	4a02      	ldr	r2, [pc, #8]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b3a:	e005      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005b3c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b44:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	2100      	movs	r1, #0
 8005b52:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005b64:	4bb8      	ldr	r3, [pc, #736]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4ab7      	ldr	r2, [pc, #732]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005b6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b6e:	61d3      	str	r3, [r2, #28]
 8005b70:	4bb5      	ldr	r3, [pc, #724]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b78:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b7c:	4ab2      	ldr	r2, [pc, #712]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b90:	2300      	movs	r3, #0
 8005b92:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	d055      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ba6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005baa:	d031      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005bac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005bb0:	d82a      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	d02d      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bbc:	d824      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc2:	d029      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc8:	d81e      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bce:	d011      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd4:	d818      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bde:	d113      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be4:	3308      	adds	r3, #8
 8005be6:	4618      	mov	r0, r3
 8005be8:	f002 fc90 	bl	800850c <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005bf2:	e014      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bf8:	3330      	adds	r3, #48	@ 0x30
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 fd1e 	bl	800863c <RCCEx_PLL3_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005c06:	e00a      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c0e:	e006      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005c10:	bf00      	nop
 8005c12:	e004      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005c14:	bf00      	nop
 8005c16:	e002      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e000      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10d      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005c26:	4b88      	ldr	r3, [pc, #544]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005c28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c2c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c38:	4a83      	ldr	r2, [pc, #524]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c46:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c58:	2300      	movs	r3, #0
 8005c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c60:	460b      	mov	r3, r1
 8005c62:	4313      	orrs	r3, r2
 8005c64:	d055      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c72:	d031      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005c74:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c78:	d82a      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c7e:	d02d      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c84:	d824      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005c86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c8a:	d029      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c90:	d81e      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c96:	d011      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9c:	d818      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca6:	d113      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cac:	3308      	adds	r3, #8
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f002 fc2c 	bl	800850c <RCCEx_PLL2_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005cba:	e014      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cc0:	3330      	adds	r3, #48	@ 0x30
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f002 fcba 	bl	800863c <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005cce:	e00a      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cd6:	e006      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005cd8:	bf00      	nop
 8005cda:	e004      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e002      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005cee:	4b56      	ldr	r3, [pc, #344]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005cf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	4a51      	ldr	r2, [pc, #324]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d20:	2300      	movs	r3, #0
 8005d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	d032      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d80f      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d211      	bcs.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d911      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f002 fbdd 	bl	800850c <RCCEx_PLL2_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d58:	e006      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d60:	e002      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005d70:	4b35      	ldr	r3, [pc, #212]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d76:	f023 0107 	bic.w	r1, r3, #7
 8005d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d82:	4a31      	ldr	r2, [pc, #196]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005d84:	430b      	orrs	r3, r1
 8005d86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d8a:	e003      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005da6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	d024      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005dc6:	e002      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ddc:	f023 0108 	bic.w	r1, r3, #8
 8005de0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005de4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005de8:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005df6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e08:	2300      	movs	r3, #0
 8005e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e0c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f000 80b9 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005e18:	4b0c      	ldr	r3, [pc, #48]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e24:	f7fd fd22 	bl	800386c <HAL_GetTick>
 8005e28:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005e2c:	e010      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2e:	f7fd fd1d 	bl	800386c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d908      	bls.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e44:	e00a      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8005e46:	bf00      	nop
 8005e48:	44020c00 	.word	0x44020c00
 8005e4c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005e50:	4bba      	ldr	r3, [pc, #744]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0e8      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005e5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 808e 	bne.w	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e66:	4bb6      	ldr	r3, [pc, #728]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d023      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005e7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e80:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e8c:	4bac      	ldr	r3, [pc, #688]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e9a:	4ba9      	ldr	r3, [pc, #676]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea0:	4aa7      	ldr	r2, [pc, #668]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eaa:	4ba5      	ldr	r3, [pc, #660]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eb0:	4aa3      	ldr	r2, [pc, #652]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eba:	4aa1      	ldr	r2, [pc, #644]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d019      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fd fccc 	bl	800386c <HAL_GetTick>
 8005ed4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed8:	e00d      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fd fcc7 	bl	800386c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d903      	bls.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef6:	4b92      	ldr	r3, [pc, #584]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ea      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005f04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d135      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f1c:	d110      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005f1e:	4b88      	ldr	r3, [pc, #544]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f34:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f38:	4a81      	ldr	r2, [pc, #516]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	61d3      	str	r3, [r2, #28]
 8005f3e:	e005      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005f40:	4b7f      	ldr	r3, [pc, #508]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4a7e      	ldr	r2, [pc, #504]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f4a:	61d3      	str	r3, [r2, #28]
 8005f4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f52:	4a7b      	ldr	r2, [pc, #492]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f5c:	4b78      	ldr	r3, [pc, #480]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f5e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6e:	4a74      	ldr	r2, [pc, #464]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f76:	e008      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f7c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005f80:	e003      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f86:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f98:	2300      	movs	r3, #0
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	d035      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fae:	2b30      	cmp	r3, #48	@ 0x30
 8005fb0:	d014      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005fb2:	2b30      	cmp	r3, #48	@ 0x30
 8005fb4:	d80e      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d80a      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d010      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005fc2:	2b10      	cmp	r3, #16
 8005fc4:	d106      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	4a5d      	ldr	r2, [pc, #372]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005fee:	4b54      	ldr	r3, [pc, #336]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ff4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006000:	4a4f      	ldr	r2, [pc, #316]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006002:	430b      	orrs	r3, r1
 8006004:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800600e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800601e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006020:	2300      	movs	r3, #0
 8006022:	647b      	str	r3, [r7, #68]	@ 0x44
 8006024:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d033      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800602e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d007      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800603e:	e010      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006040:	4b3f      	ldr	r3, [pc, #252]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	4a3e      	ldr	r2, [pc, #248]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800604c:	e00d      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800604e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006052:	3308      	adds	r3, #8
 8006054:	4618      	mov	r0, r3
 8006056:	f002 fa59 	bl	800850c <RCCEx_PLL2_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006060:	e003      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10d      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006072:	4b33      	ldr	r3, [pc, #204]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006074:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006078:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800607c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006080:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006084:	4a2e      	ldr	r2, [pc, #184]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006086:	430b      	orrs	r3, r1
 8006088:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006092:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80060a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d04c      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80060b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d827      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060e7 	.word	0x080060e7
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	08006117 	.word	0x08006117
 80060d4:	08006117 	.word	0x08006117
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d8:	4b19      	ldr	r3, [pc, #100]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	4a18      	ldr	r2, [pc, #96]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80060de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80060e4:	e018      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ea:	3308      	adds	r3, #8
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 fa0d 	bl	800850c <RCCEx_PLL2_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80060f8:	e00e      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060fe:	3330      	adds	r3, #48	@ 0x30
 8006100:	4618      	mov	r0, r3
 8006102:	f002 fa9b 	bl	800863c <RCCEx_PLL3_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800610c:	e004      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006114:	e000      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8006116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006118:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d111      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006126:	f023 0107 	bic.w	r1, r3, #7
 800612a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800612e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006132:	4a03      	ldr	r2, [pc, #12]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006134:	430b      	orrs	r3, r1
 8006136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800613a:	e007      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800613c:	44020800 	.word	0x44020800
 8006140:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006148:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800614c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
 800615e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	f000 8081 	beq.w	800626c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800616a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800616e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006172:	2b20      	cmp	r3, #32
 8006174:	d85f      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8006176:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	08006201 	.word	0x08006201
 8006180:	08006237 	.word	0x08006237
 8006184:	08006237 	.word	0x08006237
 8006188:	08006237 	.word	0x08006237
 800618c:	08006237 	.word	0x08006237
 8006190:	08006237 	.word	0x08006237
 8006194:	08006237 	.word	0x08006237
 8006198:	08006237 	.word	0x08006237
 800619c:	0800620f 	.word	0x0800620f
 80061a0:	08006237 	.word	0x08006237
 80061a4:	08006237 	.word	0x08006237
 80061a8:	08006237 	.word	0x08006237
 80061ac:	08006237 	.word	0x08006237
 80061b0:	08006237 	.word	0x08006237
 80061b4:	08006237 	.word	0x08006237
 80061b8:	08006237 	.word	0x08006237
 80061bc:	08006223 	.word	0x08006223
 80061c0:	08006237 	.word	0x08006237
 80061c4:	08006237 	.word	0x08006237
 80061c8:	08006237 	.word	0x08006237
 80061cc:	08006237 	.word	0x08006237
 80061d0:	08006237 	.word	0x08006237
 80061d4:	08006237 	.word	0x08006237
 80061d8:	08006237 	.word	0x08006237
 80061dc:	0800623f 	.word	0x0800623f
 80061e0:	08006237 	.word	0x08006237
 80061e4:	08006237 	.word	0x08006237
 80061e8:	08006237 	.word	0x08006237
 80061ec:	08006237 	.word	0x08006237
 80061f0:	08006237 	.word	0x08006237
 80061f4:	08006237 	.word	0x08006237
 80061f8:	08006237 	.word	0x08006237
 80061fc:	0800623f 	.word	0x0800623f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006200:	4bb9      	ldr	r3, [pc, #740]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	4ab8      	ldr	r2, [pc, #736]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800620a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800620c:	e018      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800620e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006212:	3308      	adds	r3, #8
 8006214:	4618      	mov	r0, r3
 8006216:	f002 f979 	bl	800850c <RCCEx_PLL2_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006220:	e00e      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006226:	3330      	adds	r3, #48	@ 0x30
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fa07 	bl	800863c <RCCEx_PLL3_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006234:	e004      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800623c:	e000      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800623e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006240:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006248:	4ba7      	ldr	r3, [pc, #668]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800624a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800624e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800625a:	4aa3      	ldr	r2, [pc, #652]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800625c:	430b      	orrs	r3, r1
 800625e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006268:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800626c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800627a:	2300      	movs	r3, #0
 800627c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006282:	460b      	mov	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	d04e      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800628c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006294:	d02e      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629a:	d827      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800629c:	2bc0      	cmp	r3, #192	@ 0xc0
 800629e:	d02b      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80062a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80062a2:	d823      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80062a4:	2b80      	cmp	r3, #128	@ 0x80
 80062a6:	d017      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80062a8:	2b80      	cmp	r3, #128	@ 0x80
 80062aa:	d81f      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d007      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80062b4:	e01a      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b6:	4b8c      	ldr	r3, [pc, #560]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	4a8b      	ldr	r2, [pc, #556]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80062bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062c0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80062c2:	e01a      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062c8:	3308      	adds	r3, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 f91e 	bl	800850c <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80062d6:	e010      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062dc:	3330      	adds	r3, #48	@ 0x30
 80062de:	4618      	mov	r0, r3
 80062e0:	f002 f9ac 	bl	800863c <RCCEx_PLL3_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80062ea:	e006      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80062f2:	e002      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80062f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006302:	4b79      	ldr	r3, [pc, #484]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006308:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800630c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006314:	4974      	ldr	r1, [pc, #464]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006322:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d055      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006346:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800634a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800634e:	d031      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8006350:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006354:	d82a      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800635a:	d02d      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800635c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006360:	d824      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006362:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006366:	d029      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8006368:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800636c:	d81e      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006372:	d011      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006378:	d818      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d020      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800637e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006382:	d113      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006388:	3308      	adds	r3, #8
 800638a:	4618      	mov	r0, r3
 800638c:	f002 f8be 	bl	800850c <RCCEx_PLL2_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006396:	e014      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639c:	3330      	adds	r3, #48	@ 0x30
 800639e:	4618      	mov	r0, r3
 80063a0:	f002 f94c 	bl	800863c <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80063aa:	e00a      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80063b2:	e006      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80063b4:	bf00      	nop
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80063c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10d      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80063ca:	4b47      	ldr	r3, [pc, #284]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80063cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063d0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80063d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063dc:	4942      	ldr	r1, [pc, #264]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	2100      	movs	r1, #0
 80063f8:	61b9      	str	r1, [r7, #24]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d03c      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800640a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800640e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006412:	2b03      	cmp	r3, #3
 8006414:	d81b      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006457 	.word	0x08006457
 8006420:	0800642d 	.word	0x0800642d
 8006424:	0800643b 	.word	0x0800643b
 8006428:	08006457 	.word	0x08006457
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642c:	4b2e      	ldr	r3, [pc, #184]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006436:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006438:	e00e      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800643a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800643e:	3308      	adds	r3, #8
 8006440:	4618      	mov	r0, r3
 8006442:	f002 f863 	bl	800850c <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8006456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006458:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006460:	4b21      	ldr	r3, [pc, #132]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006466:	f023 0203 	bic.w	r2, r3, #3
 800646a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800646e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006472:	491d      	ldr	r1, [pc, #116]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006480:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	2100      	movs	r1, #0
 800648e:	6139      	str	r1, [r7, #16]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	d03c      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80064a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ac:	d00e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80064ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b2:	d815      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d019      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064bc:	d110      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064ca:	e010      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064d0:	3308      	adds	r3, #8
 80064d2:	4618      	mov	r0, r3
 80064d4:	f002 f81a 	bl	800850c <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064de:	e006      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80064e6:	e002      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80064e8:	44020c00 	.word	0x44020c00
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80064f6:	4b3d      	ldr	r3, [pc, #244]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80064f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006508:	4938      	ldr	r1, [pc, #224]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006516:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800651a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	2100      	movs	r1, #0
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006530:	460b      	mov	r3, r1
 8006532:	4313      	orrs	r3, r2
 8006534:	d038      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800653a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d01b      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8006542:	2b30      	cmp	r3, #48	@ 0x30
 8006544:	d815      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8006546:	2b10      	cmp	r3, #16
 8006548:	d002      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d007      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800654e:	e010      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006550:	4b26      	ldr	r3, [pc, #152]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	4a25      	ldr	r2, [pc, #148]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800655a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800655c:	e00e      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800655e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006562:	3330      	adds	r3, #48	@ 0x30
 8006564:	4618      	mov	r0, r3
 8006566:	f002 f869 	bl	800863c <RCCEx_PLL3_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006570:	e004      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800657a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006584:	4b19      	ldr	r3, [pc, #100]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800658a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800658e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006592:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006596:	4915      	ldr	r1, [pc, #84]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	2100      	movs	r1, #0
 80065b2:	6039      	str	r1, [r7, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d00c      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80065c4:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80065c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065d6:	4905      	ldr	r1, [pc, #20]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80065de:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	37e8      	adds	r7, #232	@ 0xe8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ec:	44020c00 	.word	0x44020c00

080065f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b08b      	sub	sp, #44	@ 0x2c
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80065f8:	4bad      	ldr	r3, [pc, #692]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80065fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006600:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006602:	4bab      	ldr	r3, [pc, #684]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800660c:	4ba8      	ldr	r3, [pc, #672]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	0a1b      	lsrs	r3, r3, #8
 8006612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006616:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006618:	4ba5      	ldr	r3, [pc, #660]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006622:	4ba3      	ldr	r3, [pc, #652]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	08db      	lsrs	r3, r3, #3
 8006628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	fb02 f303 	mul.w	r3, r2, r3
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8126 	beq.w	8006892 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d053      	beq.n	80066f4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2b03      	cmp	r3, #3
 8006650:	d86f      	bhi.n	8006732 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d003      	beq.n	8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d02b      	beq.n	80066b6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800665e:	e068      	b.n	8006732 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006660:	4b93      	ldr	r3, [pc, #588]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	4a92      	ldr	r2, [pc, #584]	@ (80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006694:	ed97 6a04 	vldr	s12, [r7, #16]
 8006698:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800669c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80066b4:	e068      	b.n	8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80068bc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80066c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80066d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80066da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80066f2:	e049      	b.n	8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80068c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006710:	ed97 6a04 	vldr	s12, [r7, #16]
 8006714:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006730:	e02a      	b.n	8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006732:	4b5f      	ldr	r3, [pc, #380]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	4a5d      	ldr	r2, [pc, #372]	@ (80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800673e:	fa22 f303 	lsr.w	r3, r2, r3
 8006742:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	ed97 6a04 	vldr	s12, [r7, #16]
 800676a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800676e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006786:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006788:	4b49      	ldr	r3, [pc, #292]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006794:	d121      	bne.n	80067da <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006796:	4b46      	ldr	r3, [pc, #280]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067a2:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	0a5b      	lsrs	r3, r3, #9
 80067a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80067b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80067bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e006      	b.n	80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e002      	b.n	80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067e0:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ec:	d121      	bne.n	8006832 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80067ee:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d017      	beq.n	800682a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067fa:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800680c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006810:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006814:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006820:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006838:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006844:	d121      	bne.n	800688a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006846:	4b1a      	ldr	r3, [pc, #104]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d017      	beq.n	8006882 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006852:	4b17      	ldr	r3, [pc, #92]	@ (80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006856:	0e1b      	lsrs	r3, r3, #24
 8006858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006868:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800686c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006878:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006880:	e010      	b.n	80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	e00c      	b.n	80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	e008      	b.n	80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	372c      	adds	r7, #44	@ 0x2c
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	44020c00 	.word	0x44020c00
 80068b4:	03d09000 	.word	0x03d09000
 80068b8:	46000000 	.word	0x46000000
 80068bc:	4a742400 	.word	0x4a742400
 80068c0:	4bb71b00 	.word	0x4bb71b00

080068c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b08b      	sub	sp, #44	@ 0x2c
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80068cc:	4bad      	ldr	r3, [pc, #692]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80068d6:	4bab      	ldr	r3, [pc, #684]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80068e0:	4ba8      	ldr	r3, [pc, #672]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ea:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80068ec:	4ba5      	ldr	r3, [pc, #660]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80068f6:	4ba3      	ldr	r3, [pc, #652]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	08db      	lsrs	r3, r3, #3
 80068fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	fb02 f303 	mul.w	r3, r2, r3
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8126 	beq.w	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d053      	beq.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d86f      	bhi.n	8006a06 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d003      	beq.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d02b      	beq.n	800698a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006932:	e068      	b.n	8006a06 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006934:	4b93      	ldr	r3, [pc, #588]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	4a92      	ldr	r2, [pc, #584]	@ (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006968:	ed97 6a04 	vldr	s12, [r7, #16]
 800696c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006984:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006988:	e068      	b.n	8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006994:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80069aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80069c6:	e049      	b.n	8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80069e8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80069ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006a04:	e02a      	b.n	8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a06:	4b5f      	ldr	r3, [pc, #380]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	08db      	lsrs	r3, r3, #3
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	4a5d      	ldr	r2, [pc, #372]	@ (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a3e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006a5a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a5c:	4b49      	ldr	r3, [pc, #292]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a68:	d121      	bne.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006a6a:	4b46      	ldr	r3, [pc, #280]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a76:	4b43      	ldr	r3, [pc, #268]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7a:	0a5b      	lsrs	r3, r3, #9
 8006a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006a90:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e006      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e002      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ab4:	4b33      	ldr	r3, [pc, #204]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac0:	d121      	bne.n	8006b06 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006ac2:	4b30      	ldr	r3, [pc, #192]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d017      	beq.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ace:	4b2d      	ldr	r3, [pc, #180]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad8:	ee07 3a90 	vmov	s15, r3
 8006adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006ae0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006ae8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	e006      	b.n	8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	605a      	str	r2, [r3, #4]
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b18:	d121      	bne.n	8006b5e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d017      	beq.n	8006b56 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006b26:	4b17      	ldr	r3, [pc, #92]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2a:	0e1b      	lsrs	r3, r3, #24
 8006b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006b40:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b54:	e010      	b.n	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	e00c      	b.n	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	e008      	b.n	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	372c      	adds	r7, #44	@ 0x2c
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	44020c00 	.word	0x44020c00
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	46000000 	.word	0x46000000
 8006b90:	4a742400 	.word	0x4a742400
 8006b94:	4bb71b00 	.word	0x4bb71b00

08006b98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08b      	sub	sp, #44	@ 0x2c
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006ba0:	4bad      	ldr	r3, [pc, #692]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006baa:	4bab      	ldr	r3, [pc, #684]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006bb4:	4ba8      	ldr	r3, [pc, #672]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bbe:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006bc0:	4ba5      	ldr	r3, [pc, #660]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006bca:	4ba3      	ldr	r3, [pc, #652]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bce:	08db      	lsrs	r3, r3, #3
 8006bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8126 	beq.w	8006e3a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d053      	beq.n	8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d86f      	bhi.n	8006cda <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d02b      	beq.n	8006c5e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006c06:	e068      	b.n	8006cda <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c08:	4b93      	ldr	r3, [pc, #588]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	08db      	lsrs	r3, r3, #3
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	4a92      	ldr	r2, [pc, #584]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c40:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c5c:	e068      	b.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c68:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006c9a:	e049      	b.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006cbc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006cd8:	e02a      	b.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cda:	4b5f      	ldr	r3, [pc, #380]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d12:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d2e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d30:	4b49      	ldr	r3, [pc, #292]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d3c:	d121      	bne.n	8006d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006d3e:	4b46      	ldr	r3, [pc, #280]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d4a:	4b43      	ldr	r3, [pc, #268]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	0a5b      	lsrs	r3, r3, #9
 8006d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d60:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006d64:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d70:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d88:	4b33      	ldr	r3, [pc, #204]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d94:	d121      	bne.n	8006dda <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006d96:	4b30      	ldr	r3, [pc, #192]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d017      	beq.n	8006dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006da2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006db4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006db8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006dbc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]
 8006dd0:	e006      	b.n	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	605a      	str	r2, [r3, #4]
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006de0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dec:	d121      	bne.n	8006e32 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006dee:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006dfa:	4b17      	ldr	r3, [pc, #92]	@ (8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006e0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e10:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006e14:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e20:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006e28:	e010      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	e00c      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	e008      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	609a      	str	r2, [r3, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	372c      	adds	r7, #44	@ 0x2c
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	44020c00 	.word	0x44020c00
 8006e5c:	03d09000 	.word	0x03d09000
 8006e60:	46000000 	.word	0x46000000
 8006e64:	4a742400 	.word	0x4a742400
 8006e68:	4bb71b00 	.word	0x4bb71b00

08006e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e6c:	b590      	push	{r4, r7, lr}
 8006e6e:	b08f      	sub	sp, #60	@ 0x3c
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e7a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006e7e:	4321      	orrs	r1, r4
 8006e80:	d150      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e82:	4b26      	ldr	r3, [pc, #152]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e8c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006e8e:	4b23      	ldr	r3, [pc, #140]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d108      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea2:	d104      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eaa:	f001 bb20 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006eae:	4b1b      	ldr	r3, [pc, #108]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebc:	d108      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec4:	d104      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006ec6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	f001 bb0f 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006ed0:	4b12      	ldr	r3, [pc, #72]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006edc:	d119      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ee4:	d115      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef2:	d30a      	bcc.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006ef4:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006efe:	4a08      	ldr	r2, [pc, #32]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006f06:	f001 baf2 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006f0e:	f001 baee 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f16:	f001 baea 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006f1a:	bf00      	nop
 8006f1c:	44020c00 	.word	0x44020c00
 8006f20:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f28:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006f2c:	ea50 0104 	orrs.w	r1, r0, r4
 8006f30:	f000 8615 	beq.w	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f38:	2801      	cmp	r0, #1
 8006f3a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8006f3e:	f081 82d3 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f46:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006f4a:	ea50 0104 	orrs.w	r1, r0, r4
 8006f4e:	f000 84d8 	beq.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f56:	2801      	cmp	r0, #1
 8006f58:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006f5c:	f081 82c4 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f64:	f1a1 0410 	sub.w	r4, r1, #16
 8006f68:	ea50 0104 	orrs.w	r1, r0, r4
 8006f6c:	f001 8288 	beq.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f74:	2801      	cmp	r0, #1
 8006f76:	f171 0110 	sbcs.w	r1, r1, #16
 8006f7a:	f081 82b5 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f82:	f1a1 0408 	sub.w	r4, r1, #8
 8006f86:	ea50 0104 	orrs.w	r1, r0, r4
 8006f8a:	f001 81fe 	beq.w	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8006f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f92:	2801      	cmp	r0, #1
 8006f94:	f171 0108 	sbcs.w	r1, r1, #8
 8006f98:	f081 82a6 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fa0:	1f0c      	subs	r4, r1, #4
 8006fa2:	ea50 0104 	orrs.w	r1, r0, r4
 8006fa6:	f000 8753 	beq.w	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fae:	2801      	cmp	r0, #1
 8006fb0:	f171 0104 	sbcs.w	r1, r1, #4
 8006fb4:	f081 8298 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbc:	1e8c      	subs	r4, r1, #2
 8006fbe:	ea50 0104 	orrs.w	r1, r0, r4
 8006fc2:	f001 8173 	beq.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8006fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fca:	2801      	cmp	r0, #1
 8006fcc:	f171 0102 	sbcs.w	r1, r1, #2
 8006fd0:	f081 828a 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fd8:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006fdc:	4321      	orrs	r1, r4
 8006fde:	f001 80fe 	beq.w	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fe6:	4ccb      	ldr	r4, [pc, #812]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	f171 0100 	sbcs.w	r1, r1, #0
 8006fee:	f081 827b 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ff6:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006ffa:	4321      	orrs	r1, r4
 8006ffc:	f001 8076 	beq.w	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8007000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007004:	4cc4      	ldr	r4, [pc, #784]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8007006:	42a0      	cmp	r0, r4
 8007008:	f171 0100 	sbcs.w	r1, r1, #0
 800700c:	f081 826c 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007014:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007018:	4321      	orrs	r1, r4
 800701a:	f000 87b5 	beq.w	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800701e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007022:	4cbe      	ldr	r4, [pc, #760]	@ (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8007024:	42a0      	cmp	r0, r4
 8007026:	f171 0100 	sbcs.w	r1, r1, #0
 800702a:	f081 825d 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800702e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007032:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007036:	4321      	orrs	r1, r4
 8007038:	f000 8738 	beq.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800703c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007040:	4cb7      	ldr	r4, [pc, #732]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8007042:	42a0      	cmp	r0, r4
 8007044:	f171 0100 	sbcs.w	r1, r1, #0
 8007048:	f081 824e 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800704c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007050:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007054:	4321      	orrs	r1, r4
 8007056:	f001 81cd 	beq.w	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800705a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800705e:	4cb1      	ldr	r4, [pc, #708]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8007060:	42a0      	cmp	r0, r4
 8007062:	f171 0100 	sbcs.w	r1, r1, #0
 8007066:	f081 823f 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800706a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007072:	4321      	orrs	r1, r4
 8007074:	f000 80d9 	beq.w	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	4caa      	ldr	r4, [pc, #680]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800707e:	42a0      	cmp	r0, r4
 8007080:	f171 0100 	sbcs.w	r1, r1, #0
 8007084:	f081 8230 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800708c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007090:	4321      	orrs	r1, r4
 8007092:	f000 83da 	beq.w	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709a:	4ca4      	ldr	r4, [pc, #656]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 800709c:	42a0      	cmp	r0, r4
 800709e:	f171 0100 	sbcs.w	r1, r1, #0
 80070a2:	f081 8221 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80070a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070aa:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80070ae:	4321      	orrs	r1, r4
 80070b0:	f000 8627 	beq.w	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80070b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070b8:	4c9d      	ldr	r4, [pc, #628]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80070ba:	42a0      	cmp	r0, r4
 80070bc:	f171 0100 	sbcs.w	r1, r1, #0
 80070c0:	f081 8212 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80070c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070c8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80070cc:	4321      	orrs	r1, r4
 80070ce:	f000 857a 	beq.w	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80070d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d6:	4c97      	ldr	r4, [pc, #604]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80070d8:	42a0      	cmp	r0, r4
 80070da:	f171 0100 	sbcs.w	r1, r1, #0
 80070de:	f081 8203 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80070e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80070ea:	4321      	orrs	r1, r4
 80070ec:	f000 84fb 	beq.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80070f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070f4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80070f8:	f171 0100 	sbcs.w	r1, r1, #0
 80070fc:	f081 81f4 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007104:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007108:	4321      	orrs	r1, r4
 800710a:	f000 84a9 	beq.w	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800710e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007112:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007116:	42a0      	cmp	r0, r4
 8007118:	f171 0100 	sbcs.w	r1, r1, #0
 800711c:	f081 81e4 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007124:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007128:	4321      	orrs	r1, r4
 800712a:	f000 8456 	beq.w	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800712e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007132:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007136:	42a0      	cmp	r0, r4
 8007138:	f171 0100 	sbcs.w	r1, r1, #0
 800713c:	f081 81d4 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007140:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007144:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007148:	4321      	orrs	r1, r4
 800714a:	f000 8403 	beq.w	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800714e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007152:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007156:	42a0      	cmp	r0, r4
 8007158:	f171 0100 	sbcs.w	r1, r1, #0
 800715c:	f081 81c4 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007164:	2821      	cmp	r0, #33	@ 0x21
 8007166:	f171 0100 	sbcs.w	r1, r1, #0
 800716a:	d255      	bcs.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800716c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007170:	4301      	orrs	r1, r0
 8007172:	f001 81b9 	beq.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800717a:	1e42      	subs	r2, r0, #1
 800717c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007180:	2a20      	cmp	r2, #32
 8007182:	f173 0100 	sbcs.w	r1, r3, #0
 8007186:	f081 81af 	bcs.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800718a:	2a1f      	cmp	r2, #31
 800718c:	f201 81ac 	bhi.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007190:	a101      	add	r1, pc, #4	@ (adr r1, 8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007192:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007196:	bf00      	nop
 8007198:	0800726f 	.word	0x0800726f
 800719c:	0800736d 	.word	0x0800736d
 80071a0:	080084e9 	.word	0x080084e9
 80071a4:	0800742d 	.word	0x0800742d
 80071a8:	080084e9 	.word	0x080084e9
 80071ac:	080084e9 	.word	0x080084e9
 80071b0:	080084e9 	.word	0x080084e9
 80071b4:	080074fd 	.word	0x080074fd
 80071b8:	080084e9 	.word	0x080084e9
 80071bc:	080084e9 	.word	0x080084e9
 80071c0:	080084e9 	.word	0x080084e9
 80071c4:	080084e9 	.word	0x080084e9
 80071c8:	080084e9 	.word	0x080084e9
 80071cc:	080084e9 	.word	0x080084e9
 80071d0:	080084e9 	.word	0x080084e9
 80071d4:	080075e1 	.word	0x080075e1
 80071d8:	080084e9 	.word	0x080084e9
 80071dc:	080084e9 	.word	0x080084e9
 80071e0:	080084e9 	.word	0x080084e9
 80071e4:	080084e9 	.word	0x080084e9
 80071e8:	080084e9 	.word	0x080084e9
 80071ec:	080084e9 	.word	0x080084e9
 80071f0:	080084e9 	.word	0x080084e9
 80071f4:	080084e9 	.word	0x080084e9
 80071f8:	080084e9 	.word	0x080084e9
 80071fc:	080084e9 	.word	0x080084e9
 8007200:	080084e9 	.word	0x080084e9
 8007204:	080084e9 	.word	0x080084e9
 8007208:	080084e9 	.word	0x080084e9
 800720c:	080084e9 	.word	0x080084e9
 8007210:	080084e9 	.word	0x080084e9
 8007214:	080076b7 	.word	0x080076b7
 8007218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800721c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007220:	430b      	orrs	r3, r1
 8007222:	f000 82b3 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8007226:	f001 b95f 	b.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800722a:	4b43      	ldr	r3, [pc, #268]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800722c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007234:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d108      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723c:	f107 0320 	add.w	r3, r7, #32
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff f9d5 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800724a:	f001 b950 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	2b40      	cmp	r3, #64	@ 0x40
 8007252:	d108      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007254:	f107 0314 	add.w	r3, r7, #20
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fb33 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007262:	f001 b944 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800726a:	f001 b940 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800726e:	4b32      	ldr	r3, [pc, #200]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fd ffca 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 8007284:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007286:	f001 b932 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800728a:	4b2b      	ldr	r3, [pc, #172]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007296:	d10a      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	2b01      	cmp	r3, #1
 800729c:	d107      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729e:	f107 0314 	add.w	r3, r7, #20
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fb0e 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ac:	e05c      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80072ae:	4b22      	ldr	r3, [pc, #136]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ba:	d10a      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fc66 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d0:	e04a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80072d2:	4b19      	ldr	r3, [pc, #100]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d10c      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d109      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072e4:	4b14      	ldr	r3, [pc, #80]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	08db      	lsrs	r3, r3, #3
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	4a13      	ldr	r2, [pc, #76]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e037      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80072f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007304:	d11e      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	2b04      	cmp	r3, #4
 800730a:	d11b      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800730c:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800730e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007310:	e02a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8007312:	bf00      	nop
 8007314:	40000001 	.word	0x40000001
 8007318:	20000001 	.word	0x20000001
 800731c:	10000001 	.word	0x10000001
 8007320:	08000001 	.word	0x08000001
 8007324:	04000001 	.word	0x04000001
 8007328:	00400001 	.word	0x00400001
 800732c:	00200001 	.word	0x00200001
 8007330:	00040001 	.word	0x00040001
 8007334:	00020001 	.word	0x00020001
 8007338:	44020c00 	.word	0x44020c00
 800733c:	03d09000 	.word	0x03d09000
 8007340:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007344:	4ba3      	ldr	r3, [pc, #652]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d106      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	2b05      	cmp	r3, #5
 8007356:	d103      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8007358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
 800735e:	e003      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007364:	f001 b8c3 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007368:	f001 b8c1 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800736c:	4b99      	ldr	r3, [pc, #612]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800736e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007376:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800737e:	f7fd ff35 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007382:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007384:	f001 b8b3 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007388:	4b92      	ldr	r3, [pc, #584]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007394:	d10a      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	2b08      	cmp	r3, #8
 800739a:	d107      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739c:	f107 0314 	add.w	r3, r7, #20
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fa8f 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	e03d      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d108      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fbee 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c0:	f001 b895 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80073c4:	4b83      	ldr	r3, [pc, #524]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	2b18      	cmp	r3, #24
 80073d4:	d109      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073d6:	4b7f      	ldr	r3, [pc, #508]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	08db      	lsrs	r3, r3, #3
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	4a7d      	ldr	r2, [pc, #500]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	e01e      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80073ea:	4b7a      	ldr	r3, [pc, #488]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f6:	d105      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d102      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80073fe:	4b77      	ldr	r3, [pc, #476]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
 8007402:	e011      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007404:	4b73      	ldr	r3, [pc, #460]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b02      	cmp	r3, #2
 8007410:	d106      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	2b28      	cmp	r3, #40	@ 0x28
 8007416:	d103      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8007418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007424:	f001 b863 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007428:	f001 b861 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800742c:	4b69      	ldr	r3, [pc, #420]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800742e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007432:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007436:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800743e:	f7fd fed5 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007442:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007444:	f001 b853 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007448:	4b62      	ldr	r3, [pc, #392]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007454:	d10a      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b40      	cmp	r3, #64	@ 0x40
 800745a:	d107      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fa2f 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
 800746a:	e045      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800746c:	4b59      	ldr	r3, [pc, #356]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007478:	d10a      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2b80      	cmp	r3, #128	@ 0x80
 800747e:	d107      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fb87 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
 800748e:	e033      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007490:	4b50      	ldr	r3, [pc, #320]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d10c      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	2bc0      	cmp	r3, #192	@ 0xc0
 80074a0:	d109      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074a2:	4b4c      	ldr	r3, [pc, #304]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	4a4a      	ldr	r2, [pc, #296]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b4:	e020      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80074b6:	4b47      	ldr	r3, [pc, #284]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c2:	d106      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ca:	d102      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80074cc:	4b43      	ldr	r3, [pc, #268]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d0:	e012      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80074d2:	4b40      	ldr	r3, [pc, #256]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80074d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d107      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074e6:	d103      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80074e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ee:	e003      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f4:	f000 bffb 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074f8:	f000 bff9 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80074fc:	4b35      	ldr	r3, [pc, #212]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80074fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007502:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fd fe6d 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007512:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007514:	f000 bfeb 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007518:	4b2e      	ldr	r3, [pc, #184]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007524:	d10b      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0314 	add.w	r3, r7, #20
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff f9c6 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
 800753c:	e047      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800753e:	4b25      	ldr	r3, [pc, #148]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800754a:	d10b      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007552:	d107      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fb1d 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
 8007562:	e034      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007564:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b02      	cmp	r3, #2
 800756e:	d10d      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007576:	d109      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007578:	4b16      	ldr	r3, [pc, #88]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	08db      	lsrs	r3, r3, #3
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	4a15      	ldr	r2, [pc, #84]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
 800758a:	e020      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800758c:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007598:	d106      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a0:	d102      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80075a2:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a6:	e012      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80075a8:	4b0a      	ldr	r3, [pc, #40]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80075aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d107      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80075bc:	d103      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	e003      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ca:	f000 bf90 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80075ce:	f000 bf8e 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80075d2:	bf00      	nop
 80075d4:	44020c00 	.word	0x44020c00
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80075e0:	4ba5      	ldr	r3, [pc, #660]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80075e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075e6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80075ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075f2:	f7fd fdfb 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80075f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80075f8:	f000 bf79 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80075fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007608:	d10b      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007610:	d107      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007612:	f107 0314 	add.w	r3, r7, #20
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff f954 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007620:	e047      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007622:	4b95      	ldr	r3, [pc, #596]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d10b      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007636:	d107      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff faab 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
 8007646:	e034      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007648:	4b8b      	ldr	r3, [pc, #556]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b02      	cmp	r3, #2
 8007652:	d10d      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800765a:	d109      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800765c:	4b86      	ldr	r3, [pc, #536]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	4a85      	ldr	r2, [pc, #532]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
 800766e:	e020      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007670:	4b81      	ldr	r3, [pc, #516]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767c:	d106      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007684:	d102      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8007686:	4b7e      	ldr	r3, [pc, #504]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	e012      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800768c:	4b7a      	ldr	r3, [pc, #488]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800768e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b02      	cmp	r3, #2
 8007698:	d107      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076a0:	d103      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80076a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a8:	e003      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ae:	f000 bf1e 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80076b2:	f000 bf1c 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80076b6:	4b70      	ldr	r3, [pc, #448]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80076b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076bc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80076c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076c8:	f7fd fd90 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80076cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80076ce:	f000 bf0e 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80076d2:	4b69      	ldr	r3, [pc, #420]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076de:	d10b      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e8:	f107 0314 	add.w	r3, r7, #20
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff f8e9 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f6:	e047      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80076f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007704:	d10b      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800770c:	d107      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fa40 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
 800771c:	e034      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800771e:	4b56      	ldr	r3, [pc, #344]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d10d      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007730:	d109      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007732:	4b51      	ldr	r3, [pc, #324]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	4a4f      	ldr	r2, [pc, #316]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
 8007744:	e020      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007746:	4b4c      	ldr	r3, [pc, #304]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800774e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007752:	d106      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800775a:	d102      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 800775c:	4b48      	ldr	r3, [pc, #288]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800775e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007760:	e012      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007762:	4b45      	ldr	r3, [pc, #276]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d107      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007776:	d103      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007784:	f000 beb3 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007788:	f000 beb1 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800778c:	4b3a      	ldr	r3, [pc, #232]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800778e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007792:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800779e:	f7fd fd51 	bl	8005244 <HAL_RCC_GetPCLK3Freq>
 80077a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80077a4:	f000 bea3 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ae:	d108      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff f885 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077be:	f000 be96 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077c8:	d108      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff f9e2 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077d8:	f000 be89 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80077dc:	4b26      	ldr	r3, [pc, #152]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077ee:	d109      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f0:	4b21      	ldr	r3, [pc, #132]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a20      	ldr	r2, [pc, #128]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
 8007802:	e020      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007804:	4b1c      	ldr	r3, [pc, #112]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800780c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800781a:	4b19      	ldr	r3, [pc, #100]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e012      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007820:	4b15      	ldr	r3, [pc, #84]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007834:	d103      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007842:	f000 be54 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007846:	f000 be52 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800784a:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800784c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800785c:	f7fd fcaa 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8007860:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007862:	f000 be44 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10b      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 800786c:	f7fd fb76 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8007870:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007872:	f000 be3c 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007876:	bf00      	nop
 8007878:	44020c00 	.word	0x44020c00
 800787c:	03d09000 	.word	0x03d09000
 8007880:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	2b02      	cmp	r3, #2
 8007888:	d108      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0314 	add.w	r3, r7, #20
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff f818 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007898:	f000 be29 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800789c:	4b9f      	ldr	r3, [pc, #636]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a8:	d105      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d102      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80078b0:	4b9b      	ldr	r3, [pc, #620]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b4:	e023      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80078b6:	4b99      	ldr	r3, [pc, #612]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d10c      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d109      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078c8:	4b94      	ldr	r3, [pc, #592]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	08db      	lsrs	r3, r3, #3
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	4a94      	ldr	r2, [pc, #592]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80078d4:	fa22 f303 	lsr.w	r3, r2, r3
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078da:	e010      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80078dc:	4b8f      	ldr	r3, [pc, #572]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e8:	d105      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	2b05      	cmp	r3, #5
 80078ee:	d102      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80078f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f4:	e003      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078fa:	f000 bdf8 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80078fe:	f000 bdf6 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007902:	4b86      	ldr	r3, [pc, #536]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800790e:	4b83      	ldr	r3, [pc, #524]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d106      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
 8007928:	e012      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800792a:	4b7c      	ldr	r3, [pc, #496]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800792c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007938:	d106      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	2b08      	cmp	r3, #8
 800793e:	d103      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8007940:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800794c:	f000 bdcf 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007950:	f000 bdcd 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007954:	4b71      	ldr	r3, [pc, #452]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800795a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800795e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	2b00      	cmp	r3, #0
 8007964:	d104      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007966:	f7fd fc41 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 800796a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800796c:	f000 bdbf 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007976:	d108      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff f90b 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007986:	f000 bdb2 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800798a:	4b64      	ldr	r3, [pc, #400]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d10d      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800799c:	d109      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800799e:	4b5f      	ldr	r3, [pc, #380]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	08db      	lsrs	r3, r3, #3
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80079aa:	fa22 f303 	lsr.w	r3, r2, r3
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b0:	e011      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80079b2:	4b5a      	ldr	r3, [pc, #360]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079be:	d106      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079c6:	d102      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80079c8:	4b57      	ldr	r3, [pc, #348]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80079cc:	e003      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079d2:	f000 bd8c 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80079d6:	f000 bd8a 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80079da:	4b50      	ldr	r3, [pc, #320]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80079dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80079e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80079ec:	f7fd fbfe 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80079f0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80079f2:	f000 bd7c 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079fc:	d108      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f8c8 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a0c:	f000 bd6f 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007a10:	4b42      	ldr	r3, [pc, #264]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d10d      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007a22:	d109      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a24:	4b3d      	ldr	r3, [pc, #244]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	08db      	lsrs	r3, r3, #3
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007a30:	fa22 f303 	lsr.w	r3, r2, r3
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a36:	e011      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007a38:	4b38      	ldr	r3, [pc, #224]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a44:	d106      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007a4c:	d102      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8007a4e:	4b36      	ldr	r3, [pc, #216]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a52:	e003      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a58:	f000 bd49 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007a5c:	f000 bd47 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007a60:	4b2e      	ldr	r3, [pc, #184]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007a62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a66:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007a6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007a72:	f7fd fbe7 	bl	8005244 <HAL_RCC_GetPCLK3Freq>
 8007a76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a78:	f000 bd39 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a82:	d108      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a84:	f107 0308 	add.w	r3, r7, #8
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff f885 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a92:	f000 bd2c 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007a96:	4b21      	ldr	r3, [pc, #132]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d10d      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aa8:	d109      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	08db      	lsrs	r3, r3, #3
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007abc:	e011      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007abe:	4b17      	ldr	r3, [pc, #92]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aca:	d106      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ad2:	d102      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8007ad4:	4b14      	ldr	r3, [pc, #80]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad8:	e003      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ade:	f000 bd06 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ae2:	f000 bd04 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aec:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007af0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007af8:	f7fd fb78 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007afc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007afe:	f000 bcf6 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b08:	d110      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff f842 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b18:	f000 bce9 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007b1c:	44020c00 	.word	0x44020c00
 8007b20:	016e3600 	.word	0x016e3600
 8007b24:	03d09000 	.word	0x03d09000
 8007b28:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007b2c:	4ba4      	ldr	r3, [pc, #656]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d10e      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b3e:	d10a      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b40:	4b9f      	ldr	r3, [pc, #636]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	08db      	lsrs	r3, r3, #3
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	4a9e      	ldr	r2, [pc, #632]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b52:	f000 bccc 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b5a:	f000 bcc8 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007b5e:	4b98      	ldr	r3, [pc, #608]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b64:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007b70:	f7fd fb68 	bl	8005244 <HAL_RCC_GetPCLK3Freq>
 8007b74:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b76:	f000 bcba 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b80:	d108      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff f806 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b90:	f000 bcad 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8007b94:	4b8a      	ldr	r3, [pc, #552]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d10e      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ba6:	d10a      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ba8:	4b85      	ldr	r3, [pc, #532]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	4a84      	ldr	r2, [pc, #528]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bba:	f000 bc98 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc2:	f000 bc94 	b.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007bc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007bd8:	d056      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007be0:	f200 808b 	bhi.w	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bea:	d03e      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf2:	f200 8082 	bhi.w	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfc:	d027      	beq.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c04:	d879      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0c:	d017      	beq.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c14:	d871      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c22:	d004      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8007c24:	e069      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007c26:	f7fd fb0d 	bl	8005244 <HAL_RCC_GetPCLK3Freq>
 8007c2a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007c2c:	e068      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2e:	f107 0314 	add.w	r3, r7, #20
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fe46 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c3c:	e060      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe ffa8 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c4c:	e058      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d103      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8007c5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c62:	e04d      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c68:	e04a      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007c6a:	4b55      	ldr	r3, [pc, #340]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c78:	d103      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8007c7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c80:	e03e      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c86:	e03b      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c88:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c94:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d10c      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8007ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ca6:	4b46      	ldr	r3, [pc, #280]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	4a44      	ldr	r2, [pc, #272]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb8:	e01e      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cba:	4b41      	ldr	r3, [pc, #260]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd4:	e010      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8007ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007cec:	4b37      	ldr	r3, [pc, #220]	@ (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	e002      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007cf6:	e003      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007cf8:	e002      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cfe:	bf00      	nop
          }
        }
        break;
 8007d00:	e3f5      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007d02:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007d04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d08:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d14:	d05f      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d1c:	f200 8094 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d26:	d03f      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d2e:	f200 808b 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d38:	d028      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d40:	f200 8082 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d4a:	d017      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d52:	d879      	bhi.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d60:	d004      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8007d62:	e071      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007d64:	f7fd fa42 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007d68:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007d6a:	e070      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fda7 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d7a:	e068      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d7c:	f107 0308 	add.w	r3, r7, #8
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe ff09 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d8a:	e060      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d103      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8007d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007da0:	e055      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007da6:	e052      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db6:	d10b      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007db8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dbe:	e046      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007dc0:	44020c00 	.word	0x44020c00
 8007dc4:	03d09000 	.word	0x03d09000
 8007dc8:	003d0900 	.word	0x003d0900
 8007dcc:	016e3600 	.word	0x016e3600
              frequency = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dd4:	e03b      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dd6:	4bae      	ldr	r3, [pc, #696]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ddc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007de2:	4bab      	ldr	r3, [pc, #684]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10c      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df4:	4ba6      	ldr	r3, [pc, #664]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	4aa5      	ldr	r2, [pc, #660]	@ (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	e01e      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e08:	4ba1      	ldr	r3, [pc, #644]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e14:	d106      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1c:	d102      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	e010      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e24:	4b9a      	ldr	r3, [pc, #616]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e30:	d106      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e3a:	4b98      	ldr	r3, [pc, #608]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e002      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007e46:	e002      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e4c:	bf00      	nop
          }
        }
        break;
 8007e4e:	e34e      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e50:	4b8f      	ldr	r3, [pc, #572]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e5a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e68:	d105      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007e70:	4b8a      	ldr	r3, [pc, #552]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007e74:	e33b      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e7c:	d107      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7e:	f107 0320 	add.w	r3, r7, #32
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fbb4 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e8c:	e32f      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e96:	f107 0314 	add.w	r3, r7, #20
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd12 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ea4:	e323      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eaa:	e320      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007eac:	4b78      	ldr	r3, [pc, #480]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d860      	bhi.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8007ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007ee9 	.word	0x08007ee9
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f0f 	.word	0x08007f0f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed8:	f107 0320 	add.w	r3, r7, #32
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fb87 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ee6:	e04e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fce9 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ef6:	e046      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef8:	f107 0308 	add.w	r3, r7, #8
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fe4b 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f06:	e03e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007f08:	4b65      	ldr	r3, [pc, #404]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f0c:	e03b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f0e:	4b60      	ldr	r3, [pc, #384]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d10c      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f2c:	4b58      	ldr	r3, [pc, #352]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	4a57      	ldr	r2, [pc, #348]	@ (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3e:	e01e      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f40:	4b53      	ldr	r3, [pc, #332]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4c:	d106      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f54:	d102      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f56:	4b50      	ldr	r3, [pc, #320]	@ (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5a:	e010      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f68:	d106      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f72:	4b4a      	ldr	r3, [pc, #296]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f76:	e002      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f84:	bf00      	nop
          }
        }
        break;
 8007f86:	e2b2      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007f88:	4b41      	ldr	r3, [pc, #260]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	f200 80a4 	bhi.w	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08008029 	.word	0x08008029
 8007fa8:	080080e5 	.word	0x080080e5
 8007fac:	080080e5 	.word	0x080080e5
 8007fb0:	080080e5 	.word	0x080080e5
 8007fb4:	080080e5 	.word	0x080080e5
 8007fb8:	080080e5 	.word	0x080080e5
 8007fbc:	080080e5 	.word	0x080080e5
 8007fc0:	080080e5 	.word	0x080080e5
 8007fc4:	08008039 	.word	0x08008039
 8007fc8:	080080e5 	.word	0x080080e5
 8007fcc:	080080e5 	.word	0x080080e5
 8007fd0:	080080e5 	.word	0x080080e5
 8007fd4:	080080e5 	.word	0x080080e5
 8007fd8:	080080e5 	.word	0x080080e5
 8007fdc:	080080e5 	.word	0x080080e5
 8007fe0:	080080e5 	.word	0x080080e5
 8007fe4:	08008049 	.word	0x08008049
 8007fe8:	080080e5 	.word	0x080080e5
 8007fec:	080080e5 	.word	0x080080e5
 8007ff0:	080080e5 	.word	0x080080e5
 8007ff4:	080080e5 	.word	0x080080e5
 8007ff8:	080080e5 	.word	0x080080e5
 8007ffc:	080080e5 	.word	0x080080e5
 8008000:	080080e5 	.word	0x080080e5
 8008004:	08008059 	.word	0x08008059
 8008008:	080080e5 	.word	0x080080e5
 800800c:	080080e5 	.word	0x080080e5
 8008010:	080080e5 	.word	0x080080e5
 8008014:	080080e5 	.word	0x080080e5
 8008018:	080080e5 	.word	0x080080e5
 800801c:	080080e5 	.word	0x080080e5
 8008020:	080080e5 	.word	0x080080e5
 8008024:	0800805f 	.word	0x0800805f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008028:	f107 0320 	add.w	r3, r7, #32
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fadf 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008036:	e058      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fc41 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008046:	e050      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008048:	f107 0308 	add.w	r3, r7, #8
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fda3 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008056:	e048      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008058:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800805c:	e045      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008064:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008068:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800806a:	4b09      	ldr	r3, [pc, #36]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b02      	cmp	r3, #2
 8008074:	d116      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d113      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	08db      	lsrs	r3, r3, #3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	4a03      	ldr	r2, [pc, #12]	@ (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
 800808e:	e028      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008090:	44020c00 	.word	0x44020c00
 8008094:	03d09000 	.word	0x03d09000
 8008098:	003d0900 	.word	0x003d0900
 800809c:	016e3600 	.word	0x016e3600
 80080a0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080a4:	4b95      	ldr	r3, [pc, #596]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b0:	d106      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b8:	d102      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080ba:	4b91      	ldr	r3, [pc, #580]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e010      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080c0:	4b8e      	ldr	r3, [pc, #568]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080cc:	d106      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80080ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080d4:	d102      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80080d6:	4b8b      	ldr	r3, [pc, #556]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80080d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080da:	e002      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80080e0:	e003      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80080e2:	e002      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080e8:	bf00      	nop
          }
        }
        break;
 80080ea:	e200      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80080ec:	4b83      	ldr	r3, [pc, #524]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80080ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080fe:	d031      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008106:	d866      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	2bc0      	cmp	r3, #192	@ 0xc0
 800810c:	d027      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	2bc0      	cmp	r3, #192	@ 0xc0
 8008112:	d860      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	2b80      	cmp	r3, #128	@ 0x80
 8008118:	d019      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	2b80      	cmp	r3, #128	@ 0x80
 800811e:	d85a      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	2b40      	cmp	r3, #64	@ 0x40
 800812a:	d008      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 800812c:	e053      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800812e:	f107 0320 	add.w	r3, r7, #32
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fa5c 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800813c:	e04e      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0314 	add.w	r3, r7, #20
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fbbe 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800814c:	e046      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fd20 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800815c:	e03e      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800815e:	4b6a      	ldr	r3, [pc, #424]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8008160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008162:	e03b      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008164:	4b65      	ldr	r3, [pc, #404]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800816a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800816e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008170:	4b62      	ldr	r3, [pc, #392]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b02      	cmp	r3, #2
 800817a:	d10c      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008182:	4b5e      	ldr	r3, [pc, #376]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	08db      	lsrs	r3, r3, #3
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	4a5f      	ldr	r2, [pc, #380]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	637b      	str	r3, [r7, #52]	@ 0x34
 8008194:	e01e      	b.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008196:	4b59      	ldr	r3, [pc, #356]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800819e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a2:	d106      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081aa:	d102      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80081ac:	4b54      	ldr	r3, [pc, #336]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b0:	e010      	b.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081b2:	4b52      	ldr	r3, [pc, #328]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081be:	d106      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081c6:	d102      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80081c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80081cc:	e002      	b.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80081d2:	e003      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80081d4:	e002      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081da:	bf00      	nop
          }
        }
        break;
 80081dc:	e187      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80081de:	4b47      	ldr	r3, [pc, #284]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80081e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081e4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80081e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d103      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80081f0:	f7fd f812 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 80081f4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80081f6:	e17a      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80081f8:	4b40      	ldr	r3, [pc, #256]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008204:	d10b      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820c:	d107      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fb56 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
 800821c:	e045      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800821e:	4b37      	ldr	r3, [pc, #220]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822a:	d10b      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008232:	d107      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008234:	f107 0308 	add.w	r3, r7, #8
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe fcad 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
 8008242:	e032      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008244:	4b2d      	ldr	r3, [pc, #180]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b02      	cmp	r3, #2
 800824e:	d10d      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008256:	d109      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008258:	4b28      	ldr	r3, [pc, #160]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	08db      	lsrs	r3, r3, #3
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	4a2a      	ldr	r2, [pc, #168]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8008264:	fa22 f303 	lsr.w	r3, r2, r3
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
 800826a:	e01e      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800826c:	4b23      	ldr	r3, [pc, #140]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008278:	d106      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800827a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008280:	d102      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8008282:	4b1f      	ldr	r3, [pc, #124]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
 8008286:	e010      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008288:	4b1c      	ldr	r3, [pc, #112]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008294:	d106      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800829c:	d102      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800829e:	4b19      	ldr	r3, [pc, #100]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a2:	e002      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082a8:	e121      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80082aa:	e120      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80082ac:	4b13      	ldr	r3, [pc, #76]	@ (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80082ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d861      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082ed 	.word	0x080082ed
 80082d0:	08008311 	.word	0x08008311

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80082d4:	f7fc ff6e 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 80082d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80082da:	e055      	b.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082dc:	f107 0320 	add.w	r3, r7, #32
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe f985 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082ea:	e04d      	b.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fae7 	bl	80068c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082fa:	e045      	b.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80082fc:	44020c00 	.word	0x44020c00
 8008300:	003d0900 	.word	0x003d0900
 8008304:	016e3600 	.word	0x016e3600
 8008308:	00bb8000 	.word	0x00bb8000
 800830c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008310:	4b79      	ldr	r3, [pc, #484]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008316:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800831c:	4b76      	ldr	r3, [pc, #472]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d10c      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8008328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800832e:	4b72      	ldr	r3, [pc, #456]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	4a70      	ldr	r2, [pc, #448]	@ (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	e01e      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008342:	4b6d      	ldr	r3, [pc, #436]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800834a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008358:	4b69      	ldr	r3, [pc, #420]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e010      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800835e:	4b66      	ldr	r3, [pc, #408]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800836a:	d106      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008372:	d102      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008374:	4b63      	ldr	r3, [pc, #396]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8008376:	637b      	str	r3, [r7, #52]	@ 0x34
 8008378:	e002      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800837e:	e003      	b.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008380:	e002      	b.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008386:	bf00      	nop
          }
        }
        break;
 8008388:	e0b1      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800838a:	4b5b      	ldr	r3, [pc, #364]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800838c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008390:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008394:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008396:	4b58      	ldr	r3, [pc, #352]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d106      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80083aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b0:	e01f      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80083b2:	4b51      	ldr	r3, [pc, #324]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80083b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083c0:	d106      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	2b40      	cmp	r3, #64	@ 0x40
 80083c6:	d103      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80083c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ce:	e010      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80083d0:	4b49      	ldr	r3, [pc, #292]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083dc:	d106      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	2b80      	cmp	r3, #128	@ 0x80
 80083e2:	d103      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80083e4:	f248 0312 	movw	r3, #32786	@ 0x8012
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ea:	e002      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80083f0:	e07d      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80083f2:	e07c      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80083f4:	4b40      	ldr	r3, [pc, #256]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80083f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008400:	4b3d      	ldr	r3, [pc, #244]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800840c:	d105      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8008414:	4b3c      	ldr	r3, [pc, #240]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34
 8008418:	e031      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800841a:	4b37      	ldr	r3, [pc, #220]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008426:	d10a      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	2b10      	cmp	r3, #16
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800842e:	f107 0320 	add.w	r3, r7, #32
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe f8dc 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	637b      	str	r3, [r7, #52]	@ 0x34
 800843c:	e01f      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800843e:	4b2e      	ldr	r3, [pc, #184]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b02      	cmp	r3, #2
 800844a:	d106      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	2b20      	cmp	r3, #32
 8008450:	d103      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8008452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
 8008458:	e011      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800845a:	4b27      	ldr	r3, [pc, #156]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800845c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008468:	d106      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d103      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8008470:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
 8008476:	e002      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800847c:	e037      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800847e:	e036      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008480:	4b1d      	ldr	r3, [pc, #116]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008486:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800848a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	2b10      	cmp	r3, #16
 8008490:	d107      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008492:	f107 0320 	add.w	r3, r7, #32
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe f8aa 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80084a0:	e025      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80084a2:	4b15      	ldr	r3, [pc, #84]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ae:	d10a      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d107      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b6:	f107 0308 	add.w	r3, r7, #8
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fb6c 	bl	8006b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c4:	e00f      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d2:	d105      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	2b30      	cmp	r3, #48	@ 0x30
 80084d8:	d102      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80084da:	4b0b      	ldr	r3, [pc, #44]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80084dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084de:	e002      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80084e4:	e003      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80084e6:	e002      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ec:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80084ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	373c      	adds	r7, #60	@ 0x3c
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd90      	pop	{r4, r7, pc}
 80084f8:	44020c00 	.word	0x44020c00
 80084fc:	03d09000 	.word	0x03d09000
 8008500:	003d0900 	.word	0x003d0900
 8008504:	016e3600 	.word	0x016e3600
 8008508:	02dc6c00 	.word	0x02dc6c00

0800850c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008514:	4b48      	ldr	r3, [pc, #288]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a47      	ldr	r2, [pc, #284]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 800851a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800851e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008520:	f7fb f9a4 	bl	800386c <HAL_GetTick>
 8008524:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008526:	e008      	b.n	800853a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008528:	f7fb f9a0 	bl	800386c <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e07a      	b.n	8008630 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800853a:	4b3f      	ldr	r3, [pc, #252]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008546:	4b3c      	ldr	r3, [pc, #240]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800854e:	f023 0303 	bic.w	r3, r3, #3
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6811      	ldr	r1, [r2, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6852      	ldr	r2, [r2, #4]
 800855a:	0212      	lsls	r2, r2, #8
 800855c:	430a      	orrs	r2, r1
 800855e:	4936      	ldr	r1, [pc, #216]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008560:	4313      	orrs	r3, r2
 8008562:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	3b01      	subs	r3, #1
 800856a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	3b01      	subs	r3, #1
 8008574:	025b      	lsls	r3, r3, #9
 8008576:	b29b      	uxth	r3, r3
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	3b01      	subs	r3, #1
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	3b01      	subs	r3, #1
 800858e:	061b      	lsls	r3, r3, #24
 8008590:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008594:	4928      	ldr	r1, [pc, #160]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008596:	4313      	orrs	r3, r2
 8008598:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800859a:	4b27      	ldr	r3, [pc, #156]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 800859c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859e:	f023 020c 	bic.w	r2, r3, #12
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4924      	ldr	r1, [pc, #144]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80085ac:	4b22      	ldr	r3, [pc, #136]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b0:	f023 0220 	bic.w	r2, r3, #32
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	491f      	ldr	r1, [pc, #124]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80085be:	4b1e      	ldr	r3, [pc, #120]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	491c      	ldr	r1, [pc, #112]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80085cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d0:	4a19      	ldr	r2, [pc, #100]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085d2:	f023 0310 	bic.w	r3, r3, #16
 80085d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80085d8:	4b17      	ldr	r3, [pc, #92]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6a12      	ldr	r2, [r2, #32]
 80085e8:	00d2      	lsls	r2, r2, #3
 80085ea:	4913      	ldr	r1, [pc, #76]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80085f0:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	4a10      	ldr	r2, [pc, #64]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085f6:	f043 0310 	orr.w	r3, r3, #16
 80085fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80085fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a0d      	ldr	r2, [pc, #52]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008606:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008608:	f7fb f930 	bl	800386c <HAL_GetTick>
 800860c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800860e:	e008      	b.n	8008622 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008610:	f7fb f92c 	bl	800386c <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e006      	b.n	8008630 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008622:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <RCCEx_PLL2_Config+0x12c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f0      	beq.n	8008610 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800862e:	2300      	movs	r3, #0

}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	44020c00 	.word	0x44020c00

0800863c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008644:	4b48      	ldr	r3, [pc, #288]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a47      	ldr	r2, [pc, #284]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 800864a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800864e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008650:	f7fb f90c 	bl	800386c <HAL_GetTick>
 8008654:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008656:	e008      	b.n	800866a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008658:	f7fb f908 	bl	800386c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e07a      	b.n	8008760 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800866a:	4b3f      	ldr	r3, [pc, #252]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008676:	4b3c      	ldr	r3, [pc, #240]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6852      	ldr	r2, [r2, #4]
 800868a:	0212      	lsls	r2, r2, #8
 800868c:	430a      	orrs	r2, r1
 800868e:	4936      	ldr	r1, [pc, #216]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	630b      	str	r3, [r1, #48]	@ 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	3b01      	subs	r3, #1
 800869a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	025b      	lsls	r3, r3, #9
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	3b01      	subs	r3, #1
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086c4:	4928      	ldr	r1, [pc, #160]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086ca:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	f023 020c 	bic.w	r2, r3, #12
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	4924      	ldr	r1, [pc, #144]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80086dc:	4b22      	ldr	r3, [pc, #136]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e0:	f023 0220 	bic.w	r2, r3, #32
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	491f      	ldr	r1, [pc, #124]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80086ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f6:	491c      	ldr	r1, [pc, #112]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80086fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 80086fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008700:	4a19      	ldr	r2, [pc, #100]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008702:	f023 0310 	bic.w	r3, r3, #16
 8008706:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008708:	4b17      	ldr	r3, [pc, #92]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 800870a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800870c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008710:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6a12      	ldr	r2, [r2, #32]
 8008718:	00d2      	lsls	r2, r2, #3
 800871a:	4913      	ldr	r1, [pc, #76]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 800871c:	4313      	orrs	r3, r2
 800871e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008720:	4b11      	ldr	r3, [pc, #68]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008724:	4a10      	ldr	r2, [pc, #64]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008726:	f043 0310 	orr.w	r3, r3, #16
 800872a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800872c:	4b0e      	ldr	r3, [pc, #56]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0d      	ldr	r2, [pc, #52]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008736:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008738:	f7fb f898 	bl	800386c <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800873e:	e008      	b.n	8008752 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008740:	f7fb f894 	bl	800386c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e006      	b.n	8008760 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008752:	4b05      	ldr	r3, [pc, #20]	@ (8008768 <RCCEx_PLL3_Config+0x12c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	44020c00 	.word	0x44020c00

0800876c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e10d      	b.n	800899a <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a88      	ldr	r2, [pc, #544]	@ (80089a4 <HAL_SPI_Init+0x238>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_SPI_Init+0x26>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a86      	ldr	r2, [pc, #536]	@ (80089a8 <HAL_SPI_Init+0x23c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	e000      	b.n	8008794 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008792:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a81      	ldr	r2, [pc, #516]	@ (80089a4 <HAL_SPI_Init+0x238>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d004      	beq.n	80087ae <HAL_SPI_Init+0x42>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a7f      	ldr	r2, [pc, #508]	@ (80089a8 <HAL_SPI_Init+0x23c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d105      	bne.n	80087ba <HAL_SPI_Init+0x4e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	d901      	bls.n	80087ba <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e0ef      	b.n	800899a <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc3a 	bl	8009034 <SPI_GetPacketSize>
 80087c0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a77      	ldr	r2, [pc, #476]	@ (80089a4 <HAL_SPI_Init+0x238>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_SPI_Init+0x6a>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a75      	ldr	r2, [pc, #468]	@ (80089a8 <HAL_SPI_Init+0x23c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d102      	bne.n	80087dc <HAL_SPI_Init+0x70>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d820      	bhi.n	800881e <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087e0:	4a72      	ldr	r2, [pc, #456]	@ (80089ac <HAL_SPI_Init+0x240>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a71      	ldr	r2, [pc, #452]	@ (80089b0 <HAL_SPI_Init+0x244>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <HAL_SPI_Init+0xac>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a6f      	ldr	r2, [pc, #444]	@ (80089b4 <HAL_SPI_Init+0x248>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_SPI_Init+0xac>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a6e      	ldr	r2, [pc, #440]	@ (80089b8 <HAL_SPI_Init+0x24c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_SPI_Init+0xac>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a6c      	ldr	r2, [pc, #432]	@ (80089bc <HAL_SPI_Init+0x250>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_SPI_Init+0xac>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a6b      	ldr	r2, [pc, #428]	@ (80089c0 <HAL_SPI_Init+0x254>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d104      	bne.n	8008822 <HAL_SPI_Init+0xb6>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b10      	cmp	r3, #16
 800881c:	d901      	bls.n	8008822 <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e0bb      	b.n	800899a <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fa fa5e 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800885e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008868:	d119      	bne.n	800889e <HAL_SPI_Init+0x132>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008872:	d103      	bne.n	800887c <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10c      	bne.n	800889e <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800888c:	d107      	bne.n	800889e <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00f      	beq.n	80088ca <HAL_SPI_Init+0x15e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	2b06      	cmp	r3, #6
 80088b0:	d90b      	bls.n	80088ca <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e007      	b.n	80088da <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69da      	ldr	r2, [r3, #28]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	431a      	orrs	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	ea42 0103 	orr.w	r1, r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	431a      	orrs	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	431a      	orrs	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008946:	ea42 0103 	orr.w	r1, r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40014c00 	.word	0x40014c00
 80089a8:	50014c00 	.word	0x50014c00
 80089ac:	40013000 	.word	0x40013000
 80089b0:	50013000 	.word	0x50013000
 80089b4:	40003800 	.word	0x40003800
 80089b8:	50003800 	.word	0x50003800
 80089bc:	40003c00 	.word	0x40003c00
 80089c0:	50003c00 	.word	0x50003c00

080089c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08c      	sub	sp, #48	@ 0x30
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3320      	adds	r3, #32
 80089d8:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3330      	adds	r3, #48	@ 0x30
 80089e0:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089e2:	f7fa ff43 	bl	800386c <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80089e8:	887b      	ldrh	r3, [r7, #2]
 80089ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 80089ec:	887b      	ldrh	r3, [r7, #2]
 80089ee:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d001      	beq.n	8008a00 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
 80089fe:	e247      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <HAL_SPI_TransmitReceive+0x4e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <HAL_SPI_TransmitReceive+0x4e>
 8008a0c:	887b      	ldrh	r3, [r7, #2]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e23c      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x60>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e235      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2205      	movs	r2, #5
 8008a30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	887a      	ldrh	r2, [r7, #2]
 8008a46:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	887a      	ldrh	r2, [r7, #2]
 8008a4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	887a      	ldrh	r2, [r7, #2]
 8008a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	887a      	ldrh	r2, [r7, #2]
 8008a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008a82:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a72      	ldr	r2, [pc, #456]	@ (8008c54 <HAL_SPI_TransmitReceive+0x290>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d018      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0xfc>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a71      	ldr	r2, [pc, #452]	@ (8008c58 <HAL_SPI_TransmitReceive+0x294>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d013      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0xfc>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a6f      	ldr	r2, [pc, #444]	@ (8008c5c <HAL_SPI_TransmitReceive+0x298>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00e      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0xfc>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8008c60 <HAL_SPI_TransmitReceive+0x29c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d009      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0xfc>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a6c      	ldr	r2, [pc, #432]	@ (8008c64 <HAL_SPI_TransmitReceive+0x2a0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d004      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0xfc>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a6b      	ldr	r2, [pc, #428]	@ (8008c68 <HAL_SPI_TransmitReceive+0x2a4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d102      	bne.n	8008ac6 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac4:	e001      	b.n	8008aca <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	0c1b      	lsrs	r3, r3, #16
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	8879      	ldrh	r1, [r7, #2]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	430b      	orrs	r3, r1
 8008adc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f042 0201 	orr.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008af6:	d107      	bne.n	8008b08 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	2b0f      	cmp	r3, #15
 8008b0e:	f240 8098 	bls.w	8008c42 <HAL_SPI_TransmitReceive+0x27e>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a4f      	ldr	r2, [pc, #316]	@ (8008c54 <HAL_SPI_TransmitReceive+0x290>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d018      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x18a>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a4d      	ldr	r2, [pc, #308]	@ (8008c58 <HAL_SPI_TransmitReceive+0x294>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x18a>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8008c5c <HAL_SPI_TransmitReceive+0x298>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00e      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x18a>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a4a      	ldr	r2, [pc, #296]	@ (8008c60 <HAL_SPI_TransmitReceive+0x29c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d009      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x18a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a49      	ldr	r2, [pc, #292]	@ (8008c64 <HAL_SPI_TransmitReceive+0x2a0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d004      	beq.n	8008b4e <HAL_SPI_TransmitReceive+0x18a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a47      	ldr	r2, [pc, #284]	@ (8008c68 <HAL_SPI_TransmitReceive+0x2a4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d179      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	089b      	lsrs	r3, r3, #2
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b54:	e06e      	b.n	8008c34 <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d120      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x1e2>
 8008b64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d01d      	beq.n	8008ba6 <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008b6a:	8c3a      	ldrh	r2, [r7, #32]
 8008b6c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d217      	bcs.n	8008ba6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ba4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695a      	ldr	r2, [r3, #20]
 8008bac:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01a      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x228>
 8008bb6:	8c3b      	ldrh	r3, [r7, #32]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d017      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bc6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008bea:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bec:	f7fa fe3e 	bl	800386c <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d803      	bhi.n	8008c04 <HAL_SPI_TransmitReceive+0x240>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x246>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d114      	bne.n	8008c34 <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f944 	bl	8008e98 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e12d      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d18d      	bne.n	8008b56 <HAL_SPI_TransmitReceive+0x192>
 8008c3a:	8c3b      	ldrh	r3, [r7, #32]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d18a      	bne.n	8008b56 <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008c40:	e100      	b.n	8008e44 <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	2b07      	cmp	r3, #7
 8008c48:	f240 80f6 	bls.w	8008e38 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c52:	e078      	b.n	8008d46 <HAL_SPI_TransmitReceive+0x382>
 8008c54:	40013000 	.word	0x40013000
 8008c58:	50013000 	.word	0x50013000
 8008c5c:	40003800 	.word	0x40003800
 8008c60:	50003800 	.word	0x50003800
 8008c64:	40003c00 	.word	0x40003c00
 8008c68:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d11f      	bne.n	8008cba <HAL_SPI_TransmitReceive+0x2f6>
 8008c7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01c      	beq.n	8008cba <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008c80:	8c3a      	ldrh	r2, [r7, #32]
 8008c82:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d216      	bcs.n	8008cba <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c90:	881a      	ldrh	r2, [r3, #0]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c9a:	1c9a      	adds	r2, r3, #2
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cb8:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d11a      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x33a>
 8008cc8:	8c3b      	ldrh	r3, [r7, #32]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d017      	beq.n	8008cfe <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	8812      	ldrh	r2, [r2, #0]
 8008cd6:	b292      	uxth	r2, r2
 8008cd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cde:	1c9a      	adds	r2, r3, #2
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008cfc:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cfe:	f7fa fdb5 	bl	800386c <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d803      	bhi.n	8008d16 <HAL_SPI_TransmitReceive+0x352>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d102      	bne.n	8008d1c <HAL_SPI_TransmitReceive+0x358>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d114      	bne.n	8008d46 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f8bb 	bl	8008e98 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e0a4      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d18f      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x2a8>
 8008d4c:	8c3b      	ldrh	r3, [r7, #32]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d18c      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x2a8>
 8008d52:	e077      	b.n	8008e44 <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d121      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x3e2>
 8008d62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01e      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008d68:	8c3a      	ldrh	r2, [r7, #32]
 8008d6a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d218      	bcs.n	8008da6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3320      	adds	r3, #32
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008da4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d11d      	bne.n	8008df0 <HAL_SPI_TransmitReceive+0x42c>
 8008db4:	8c3b      	ldrh	r3, [r7, #32]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01a      	beq.n	8008df0 <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008dee:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df0:	f7fa fd3c 	bl	800386c <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d803      	bhi.n	8008e08 <HAL_SPI_TransmitReceive+0x444>
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d102      	bne.n	8008e0e <HAL_SPI_TransmitReceive+0x44a>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d114      	bne.n	8008e38 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 f842 	bl	8008e98 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e02b      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d18a      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x390>
 8008e3e:	8c3b      	ldrh	r3, [r7, #32]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d187      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2108      	movs	r1, #8
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f8c2 	bl	8008fd8 <SPI_WaitOnFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d007      	beq.n	8008e6a <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e60:	f043 0220 	orr.w	r2, r3, #32
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f814 	bl	8008e98 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3728      	adds	r7, #40	@ 0x28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0208 	orr.w	r2, r2, #8
 8008eb6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0210 	orr.w	r2, r2, #16
 8008ec6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008efa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d014      	beq.n	8008f32 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00f      	beq.n	8008f32 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0220 	orr.w	r2, r2, #32
 8008f30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d014      	beq.n	8008f68 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00f      	beq.n	8008f68 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f4e:	f043 0204 	orr.w	r2, r3, #4
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00f      	beq.n	8008f92 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f78:	f043 0201 	orr.w	r2, r3, #1
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699a      	ldr	r2, [r3, #24]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00f      	beq.n	8008fbc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fa2:	f043 0208 	orr.w	r2, r3, #8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fe8:	e010      	b.n	800900c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fea:	f7fa fc3f 	bl	800386c <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d803      	bhi.n	8009002 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d102      	bne.n	8009008 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e00f      	b.n	800902c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4013      	ands	r3, r2
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	429a      	cmp	r2, r3
 800901a:	bf0c      	ite	eq
 800901c:	2301      	moveq	r3, #1
 800901e:	2300      	movne	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	429a      	cmp	r2, r3
 8009028:	d0df      	beq.n	8008fea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009040:	095b      	lsrs	r3, r3, #5
 8009042:	3301      	adds	r3, #1
 8009044:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	3307      	adds	r3, #7
 8009052:	08db      	lsrs	r3, r3, #3
 8009054:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	fb02 f303 	mul.w	r3, r2, r3
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e049      	b.n	8009110 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7f9 feaf 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f000 ff09 	bl	8009ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b01      	cmp	r3, #1
 800912a:	d001      	beq.n	8009130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e07c      	b.n	800922a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a3a      	ldr	r2, [pc, #232]	@ (8009238 <HAL_TIM_Base_Start_IT+0x120>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d04a      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a39      	ldr	r2, [pc, #228]	@ (800923c <HAL_TIM_Base_Start_IT+0x124>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d045      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009164:	d040      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800916e:	d03b      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a32      	ldr	r2, [pc, #200]	@ (8009240 <HAL_TIM_Base_Start_IT+0x128>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d036      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a31      	ldr	r2, [pc, #196]	@ (8009244 <HAL_TIM_Base_Start_IT+0x12c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d031      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a2f      	ldr	r2, [pc, #188]	@ (8009248 <HAL_TIM_Base_Start_IT+0x130>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d02c      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a2e      	ldr	r2, [pc, #184]	@ (800924c <HAL_TIM_Base_Start_IT+0x134>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d027      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2c      	ldr	r2, [pc, #176]	@ (8009250 <HAL_TIM_Base_Start_IT+0x138>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d022      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009254 <HAL_TIM_Base_Start_IT+0x13c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01d      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a29      	ldr	r2, [pc, #164]	@ (8009258 <HAL_TIM_Base_Start_IT+0x140>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d018      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a28      	ldr	r2, [pc, #160]	@ (800925c <HAL_TIM_Base_Start_IT+0x144>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a26      	ldr	r2, [pc, #152]	@ (8009260 <HAL_TIM_Base_Start_IT+0x148>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00e      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a25      	ldr	r2, [pc, #148]	@ (8009264 <HAL_TIM_Base_Start_IT+0x14c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d009      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a23      	ldr	r2, [pc, #140]	@ (8009268 <HAL_TIM_Base_Start_IT+0x150>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d004      	beq.n	80091e8 <HAL_TIM_Base_Start_IT+0xd0>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a22      	ldr	r2, [pc, #136]	@ (800926c <HAL_TIM_Base_Start_IT+0x154>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d115      	bne.n	8009214 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	4b20      	ldr	r3, [pc, #128]	@ (8009270 <HAL_TIM_Base_Start_IT+0x158>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b06      	cmp	r3, #6
 80091f8:	d015      	beq.n	8009226 <HAL_TIM_Base_Start_IT+0x10e>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009200:	d011      	beq.n	8009226 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009212:	e008      	b.n	8009226 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0201 	orr.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e000      	b.n	8009228 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40012c00 	.word	0x40012c00
 800923c:	50012c00 	.word	0x50012c00
 8009240:	40000400 	.word	0x40000400
 8009244:	50000400 	.word	0x50000400
 8009248:	40000800 	.word	0x40000800
 800924c:	50000800 	.word	0x50000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	50000c00 	.word	0x50000c00
 8009258:	40013400 	.word	0x40013400
 800925c:	50013400 	.word	0x50013400
 8009260:	40001800 	.word	0x40001800
 8009264:	50001800 	.word	0x50001800
 8009268:	40014000 	.word	0x40014000
 800926c:	50014000 	.word	0x50014000
 8009270:	00010007 	.word	0x00010007

08009274 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0201 	bic.w	r2, r2, #1
 800928a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6a1a      	ldr	r2, [r3, #32]
 8009292:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009296:	4013      	ands	r3, r2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10f      	bne.n	80092bc <HAL_TIM_Base_Stop_IT+0x48>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a1a      	ldr	r2, [r3, #32]
 80092a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80092a6:	4013      	ands	r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d107      	bne.n	80092bc <HAL_TIM_Base_Stop_IT+0x48>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0201 	bic.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e049      	b.n	8009378 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f841 	bl	8009380 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f000 fdd5 	bl	8009ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d109      	bne.n	80093bc <HAL_TIM_OC_Start_IT+0x28>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	e03c      	b.n	8009436 <HAL_TIM_OC_Start_IT+0xa2>
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d109      	bne.n	80093d6 <HAL_TIM_OC_Start_IT+0x42>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	bf14      	ite	ne
 80093ce:	2301      	movne	r3, #1
 80093d0:	2300      	moveq	r3, #0
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	e02f      	b.n	8009436 <HAL_TIM_OC_Start_IT+0xa2>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d109      	bne.n	80093f0 <HAL_TIM_OC_Start_IT+0x5c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	bf14      	ite	ne
 80093e8:	2301      	movne	r3, #1
 80093ea:	2300      	moveq	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	e022      	b.n	8009436 <HAL_TIM_OC_Start_IT+0xa2>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b0c      	cmp	r3, #12
 80093f4:	d109      	bne.n	800940a <HAL_TIM_OC_Start_IT+0x76>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b01      	cmp	r3, #1
 8009400:	bf14      	ite	ne
 8009402:	2301      	movne	r3, #1
 8009404:	2300      	moveq	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	e015      	b.n	8009436 <HAL_TIM_OC_Start_IT+0xa2>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b10      	cmp	r3, #16
 800940e:	d109      	bne.n	8009424 <HAL_TIM_OC_Start_IT+0x90>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	e008      	b.n	8009436 <HAL_TIM_OC_Start_IT+0xa2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	bf14      	ite	ne
 8009430:	2301      	movne	r3, #1
 8009432:	2300      	moveq	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e11a      	b.n	8009674 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_TIM_OC_Start_IT+0xba>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800944c:	e023      	b.n	8009496 <HAL_TIM_OC_Start_IT+0x102>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b04      	cmp	r3, #4
 8009452:	d104      	bne.n	800945e <HAL_TIM_OC_Start_IT+0xca>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800945c:	e01b      	b.n	8009496 <HAL_TIM_OC_Start_IT+0x102>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b08      	cmp	r3, #8
 8009462:	d104      	bne.n	800946e <HAL_TIM_OC_Start_IT+0xda>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800946c:	e013      	b.n	8009496 <HAL_TIM_OC_Start_IT+0x102>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b0c      	cmp	r3, #12
 8009472:	d104      	bne.n	800947e <HAL_TIM_OC_Start_IT+0xea>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800947c:	e00b      	b.n	8009496 <HAL_TIM_OC_Start_IT+0x102>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b10      	cmp	r3, #16
 8009482:	d104      	bne.n	800948e <HAL_TIM_OC_Start_IT+0xfa>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800948c:	e003      	b.n	8009496 <HAL_TIM_OC_Start_IT+0x102>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2202      	movs	r2, #2
 8009492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b0c      	cmp	r3, #12
 800949a:	d841      	bhi.n	8009520 <HAL_TIM_OC_Start_IT+0x18c>
 800949c:	a201      	add	r2, pc, #4	@ (adr r2, 80094a4 <HAL_TIM_OC_Start_IT+0x110>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094d9 	.word	0x080094d9
 80094a8:	08009521 	.word	0x08009521
 80094ac:	08009521 	.word	0x08009521
 80094b0:	08009521 	.word	0x08009521
 80094b4:	080094eb 	.word	0x080094eb
 80094b8:	08009521 	.word	0x08009521
 80094bc:	08009521 	.word	0x08009521
 80094c0:	08009521 	.word	0x08009521
 80094c4:	080094fd 	.word	0x080094fd
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009521 	.word	0x08009521
 80094d0:	08009521 	.word	0x08009521
 80094d4:	0800950f 	.word	0x0800950f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0202 	orr.w	r2, r2, #2
 80094e6:	60da      	str	r2, [r3, #12]
      break;
 80094e8:	e01d      	b.n	8009526 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f042 0204 	orr.w	r2, r2, #4
 80094f8:	60da      	str	r2, [r3, #12]
      break;
 80094fa:	e014      	b.n	8009526 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68da      	ldr	r2, [r3, #12]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f042 0208 	orr.w	r2, r2, #8
 800950a:	60da      	str	r2, [r3, #12]
      break;
 800950c:	e00b      	b.n	8009526 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0210 	orr.w	r2, r2, #16
 800951c:	60da      	str	r2, [r3, #12]
      break;
 800951e:	e002      	b.n	8009526 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
      break;
 8009524:	bf00      	nop
  }

  if (status == HAL_OK)
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 80a2 	bne.w	8009672 <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2201      	movs	r2, #1
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 f97e 	bl	800a838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a4e      	ldr	r2, [pc, #312]	@ (800967c <HAL_TIM_OC_Start_IT+0x2e8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d018      	beq.n	8009578 <HAL_TIM_OC_Start_IT+0x1e4>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a4d      	ldr	r2, [pc, #308]	@ (8009680 <HAL_TIM_OC_Start_IT+0x2ec>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <HAL_TIM_OC_Start_IT+0x1e4>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a4b      	ldr	r2, [pc, #300]	@ (8009684 <HAL_TIM_OC_Start_IT+0x2f0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00e      	beq.n	8009578 <HAL_TIM_OC_Start_IT+0x1e4>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a4a      	ldr	r2, [pc, #296]	@ (8009688 <HAL_TIM_OC_Start_IT+0x2f4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d009      	beq.n	8009578 <HAL_TIM_OC_Start_IT+0x1e4>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a48      	ldr	r2, [pc, #288]	@ (800968c <HAL_TIM_OC_Start_IT+0x2f8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d004      	beq.n	8009578 <HAL_TIM_OC_Start_IT+0x1e4>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a47      	ldr	r2, [pc, #284]	@ (8009690 <HAL_TIM_OC_Start_IT+0x2fc>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d101      	bne.n	800957c <HAL_TIM_OC_Start_IT+0x1e8>
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <HAL_TIM_OC_Start_IT+0x1ea>
 800957c:	2300      	movs	r3, #0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d007      	beq.n	8009592 <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a39      	ldr	r2, [pc, #228]	@ (800967c <HAL_TIM_OC_Start_IT+0x2e8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d04a      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a37      	ldr	r2, [pc, #220]	@ (8009680 <HAL_TIM_OC_Start_IT+0x2ec>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d045      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ae:	d040      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095b8:	d03b      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a35      	ldr	r2, [pc, #212]	@ (8009694 <HAL_TIM_OC_Start_IT+0x300>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d036      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a33      	ldr	r2, [pc, #204]	@ (8009698 <HAL_TIM_OC_Start_IT+0x304>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d031      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a32      	ldr	r2, [pc, #200]	@ (800969c <HAL_TIM_OC_Start_IT+0x308>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d02c      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a30      	ldr	r2, [pc, #192]	@ (80096a0 <HAL_TIM_OC_Start_IT+0x30c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d027      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a2f      	ldr	r2, [pc, #188]	@ (80096a4 <HAL_TIM_OC_Start_IT+0x310>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d022      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a2d      	ldr	r2, [pc, #180]	@ (80096a8 <HAL_TIM_OC_Start_IT+0x314>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d01d      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a22      	ldr	r2, [pc, #136]	@ (8009684 <HAL_TIM_OC_Start_IT+0x2f0>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d018      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a20      	ldr	r2, [pc, #128]	@ (8009688 <HAL_TIM_OC_Start_IT+0x2f4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d013      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a27      	ldr	r2, [pc, #156]	@ (80096ac <HAL_TIM_OC_Start_IT+0x318>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00e      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a25      	ldr	r2, [pc, #148]	@ (80096b0 <HAL_TIM_OC_Start_IT+0x31c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d009      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1a      	ldr	r2, [pc, #104]	@ (800968c <HAL_TIM_OC_Start_IT+0x2f8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_TIM_OC_Start_IT+0x29e>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a18      	ldr	r2, [pc, #96]	@ (8009690 <HAL_TIM_OC_Start_IT+0x2fc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d115      	bne.n	800965e <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	4b1e      	ldr	r3, [pc, #120]	@ (80096b4 <HAL_TIM_OC_Start_IT+0x320>)
 800963a:	4013      	ands	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b06      	cmp	r3, #6
 8009642:	d015      	beq.n	8009670 <HAL_TIM_OC_Start_IT+0x2dc>
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800964a:	d011      	beq.n	8009670 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	e008      	b.n	8009670 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f042 0201 	orr.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e000      	b.n	8009672 <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009670:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	40012c00 	.word	0x40012c00
 8009680:	50012c00 	.word	0x50012c00
 8009684:	40013400 	.word	0x40013400
 8009688:	50013400 	.word	0x50013400
 800968c:	40014000 	.word	0x40014000
 8009690:	50014000 	.word	0x50014000
 8009694:	40000400 	.word	0x40000400
 8009698:	50000400 	.word	0x50000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	50000800 	.word	0x50000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	50000c00 	.word	0x50000c00
 80096ac:	40001800 	.word	0x40001800
 80096b0:	50001800 	.word	0x50001800
 80096b4:	00010007 	.word	0x00010007

080096b8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b0c      	cmp	r3, #12
 80096ca:	d841      	bhi.n	8009750 <HAL_TIM_OC_Stop_IT+0x98>
 80096cc:	a201      	add	r2, pc, #4	@ (adr r2, 80096d4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	08009709 	.word	0x08009709
 80096d8:	08009751 	.word	0x08009751
 80096dc:	08009751 	.word	0x08009751
 80096e0:	08009751 	.word	0x08009751
 80096e4:	0800971b 	.word	0x0800971b
 80096e8:	08009751 	.word	0x08009751
 80096ec:	08009751 	.word	0x08009751
 80096f0:	08009751 	.word	0x08009751
 80096f4:	0800972d 	.word	0x0800972d
 80096f8:	08009751 	.word	0x08009751
 80096fc:	08009751 	.word	0x08009751
 8009700:	08009751 	.word	0x08009751
 8009704:	0800973f 	.word	0x0800973f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0202 	bic.w	r2, r2, #2
 8009716:	60da      	str	r2, [r3, #12]
      break;
 8009718:	e01d      	b.n	8009756 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0204 	bic.w	r2, r2, #4
 8009728:	60da      	str	r2, [r3, #12]
      break;
 800972a:	e014      	b.n	8009756 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 0208 	bic.w	r2, r2, #8
 800973a:	60da      	str	r2, [r3, #12]
      break;
 800973c:	e00b      	b.n	8009756 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0210 	bic.w	r2, r2, #16
 800974c:	60da      	str	r2, [r3, #12]
      break;
 800974e:	e002      	b.n	8009756 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]
      break;
 8009754:	bf00      	nop
  }

  if (status == HAL_OK)
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	f040 8086 	bne.w	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2200      	movs	r2, #0
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f001 f866 	bl	800a838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a40      	ldr	r2, [pc, #256]	@ (8009874 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d018      	beq.n	80097a8 <HAL_TIM_OC_Stop_IT+0xf0>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a3f      	ldr	r2, [pc, #252]	@ (8009878 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d013      	beq.n	80097a8 <HAL_TIM_OC_Stop_IT+0xf0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a3d      	ldr	r2, [pc, #244]	@ (800987c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00e      	beq.n	80097a8 <HAL_TIM_OC_Stop_IT+0xf0>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a3c      	ldr	r2, [pc, #240]	@ (8009880 <HAL_TIM_OC_Stop_IT+0x1c8>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d009      	beq.n	80097a8 <HAL_TIM_OC_Stop_IT+0xf0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a3a      	ldr	r2, [pc, #232]	@ (8009884 <HAL_TIM_OC_Stop_IT+0x1cc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d004      	beq.n	80097a8 <HAL_TIM_OC_Stop_IT+0xf0>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a39      	ldr	r2, [pc, #228]	@ (8009888 <HAL_TIM_OC_Stop_IT+0x1d0>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d101      	bne.n	80097ac <HAL_TIM_OC_Stop_IT+0xf4>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <HAL_TIM_OC_Stop_IT+0xf6>
 80097ac:	2300      	movs	r3, #0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d017      	beq.n	80097e2 <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6a1a      	ldr	r2, [r3, #32]
 80097b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097bc:	4013      	ands	r3, r2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10f      	bne.n	80097e2 <HAL_TIM_OC_Stop_IT+0x12a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80097cc:	4013      	ands	r3, r2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d107      	bne.n	80097e2 <HAL_TIM_OC_Stop_IT+0x12a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a1a      	ldr	r2, [r3, #32]
 80097e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10f      	bne.n	8009812 <HAL_TIM_OC_Stop_IT+0x15a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80097fc:	4013      	ands	r3, r2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <HAL_TIM_OC_Stop_IT+0x15a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <HAL_TIM_OC_Stop_IT+0x16a>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009820:	e023      	b.n	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d104      	bne.n	8009832 <HAL_TIM_OC_Stop_IT+0x17a>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009830:	e01b      	b.n	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b08      	cmp	r3, #8
 8009836:	d104      	bne.n	8009842 <HAL_TIM_OC_Stop_IT+0x18a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009840:	e013      	b.n	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b0c      	cmp	r3, #12
 8009846:	d104      	bne.n	8009852 <HAL_TIM_OC_Stop_IT+0x19a>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009850:	e00b      	b.n	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b10      	cmp	r3, #16
 8009856:	d104      	bne.n	8009862 <HAL_TIM_OC_Stop_IT+0x1aa>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009860:	e003      	b.n	800986a <HAL_TIM_OC_Stop_IT+0x1b2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40012c00 	.word	0x40012c00
 8009878:	50012c00 	.word	0x50012c00
 800987c:	40013400 	.word	0x40013400
 8009880:	50013400 	.word	0x50013400
 8009884:	40014000 	.word	0x40014000
 8009888:	50014000 	.word	0x50014000

0800988c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d020      	beq.n	80098f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01b      	beq.n	80098f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f06f 0202 	mvn.w	r2, #2
 80098c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fad4 	bl	8009e84 <HAL_TIM_IC_CaptureCallback>
 80098dc:	e005      	b.n	80098ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fac6 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fad7 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d020      	beq.n	800993c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b00      	cmp	r3, #0
 8009902:	d01b      	beq.n	800993c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0204 	mvn.w	r2, #4
 800990c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2202      	movs	r2, #2
 8009912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 faae 	bl	8009e84 <HAL_TIM_IC_CaptureCallback>
 8009928:	e005      	b.n	8009936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 faa0 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fab1 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d020      	beq.n	8009988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f003 0308 	and.w	r3, r3, #8
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01b      	beq.n	8009988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0208 	mvn.w	r2, #8
 8009958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2204      	movs	r2, #4
 800995e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fa88 	bl	8009e84 <HAL_TIM_IC_CaptureCallback>
 8009974:	e005      	b.n	8009982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa7a 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa8b 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b00      	cmp	r3, #0
 8009990:	d020      	beq.n	80099d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01b      	beq.n	80099d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f06f 0210 	mvn.w	r2, #16
 80099a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2208      	movs	r2, #8
 80099aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa62 	bl	8009e84 <HAL_TIM_IC_CaptureCallback>
 80099c0:	e005      	b.n	80099ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa54 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa65 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00c      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0201 	mvn.w	r2, #1
 80099f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa32 	bl	8009e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00c      	beq.n	8009a26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d007      	beq.n	8009a26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f809 	bl	800aa38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00c      	beq.n	8009a4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d007      	beq.n	8009a4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 f801 	bl	800aa4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa1f 	bl	8009eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00c      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f06f 0220 	mvn.w	r2, #32
 8009a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 ffc9 	bl	800aa24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 ffd5 	bl	800aa60 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 ffcd 	bl	800aa74 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00c      	beq.n	8009afe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 ffc5 	bl	800aa88 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ffbd 	bl	800aa9c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e066      	b.n	8009c18 <HAL_TIM_OC_ConfigChannel+0xec>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b14      	cmp	r3, #20
 8009b56:	d857      	bhi.n	8009c08 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009b58:	a201      	add	r2, pc, #4	@ (adr r2, 8009b60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	08009bb5 	.word	0x08009bb5
 8009b64:	08009c09 	.word	0x08009c09
 8009b68:	08009c09 	.word	0x08009c09
 8009b6c:	08009c09 	.word	0x08009c09
 8009b70:	08009bc3 	.word	0x08009bc3
 8009b74:	08009c09 	.word	0x08009c09
 8009b78:	08009c09 	.word	0x08009c09
 8009b7c:	08009c09 	.word	0x08009c09
 8009b80:	08009bd1 	.word	0x08009bd1
 8009b84:	08009c09 	.word	0x08009c09
 8009b88:	08009c09 	.word	0x08009c09
 8009b8c:	08009c09 	.word	0x08009c09
 8009b90:	08009bdf 	.word	0x08009bdf
 8009b94:	08009c09 	.word	0x08009c09
 8009b98:	08009c09 	.word	0x08009c09
 8009b9c:	08009c09 	.word	0x08009c09
 8009ba0:	08009bed 	.word	0x08009bed
 8009ba4:	08009c09 	.word	0x08009c09
 8009ba8:	08009c09 	.word	0x08009c09
 8009bac:	08009c09 	.word	0x08009c09
 8009bb0:	08009bfb 	.word	0x08009bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fa6a 	bl	800a094 <TIM_OC1_SetConfig>
      break;
 8009bc0:	e025      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fafd 	bl	800a1c8 <TIM_OC2_SetConfig>
      break;
 8009bce:	e01e      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fb8e 	bl	800a2f8 <TIM_OC3_SetConfig>
      break;
 8009bdc:	e017      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fc1d 	bl	800a424 <TIM_OC4_SetConfig>
      break;
 8009bea:	e010      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fcae 	bl	800a554 <TIM_OC5_SetConfig>
      break;
 8009bf8:	e009      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fd11 	bl	800a628 <TIM_OC6_SetConfig>
      break;
 8009c06:	e002      	b.n	8009c0e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIM_ConfigClockSource+0x1c>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e0fe      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x21a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009c5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c78:	f000 80c9 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c80:	f200 80ce 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009c84:	4a6f      	ldr	r2, [pc, #444]	@ (8009e44 <HAL_TIM_ConfigClockSource+0x224>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	f000 80c1 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009c8c:	4a6d      	ldr	r2, [pc, #436]	@ (8009e44 <HAL_TIM_ConfigClockSource+0x224>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	f200 80c6 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009c94:	4a6c      	ldr	r2, [pc, #432]	@ (8009e48 <HAL_TIM_ConfigClockSource+0x228>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	f000 80b9 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8009e48 <HAL_TIM_ConfigClockSource+0x228>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	f200 80be 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009ca4:	4a69      	ldr	r2, [pc, #420]	@ (8009e4c <HAL_TIM_ConfigClockSource+0x22c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	f000 80b1 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009cac:	4a67      	ldr	r2, [pc, #412]	@ (8009e4c <HAL_TIM_ConfigClockSource+0x22c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	f200 80b6 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009cb4:	4a66      	ldr	r2, [pc, #408]	@ (8009e50 <HAL_TIM_ConfigClockSource+0x230>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	f000 80a9 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009cbc:	4a64      	ldr	r2, [pc, #400]	@ (8009e50 <HAL_TIM_ConfigClockSource+0x230>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	f200 80ae 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009cc4:	4a63      	ldr	r2, [pc, #396]	@ (8009e54 <HAL_TIM_ConfigClockSource+0x234>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	f000 80a1 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009ccc:	4a61      	ldr	r2, [pc, #388]	@ (8009e54 <HAL_TIM_ConfigClockSource+0x234>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	f200 80a6 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009cd4:	4a60      	ldr	r2, [pc, #384]	@ (8009e58 <HAL_TIM_ConfigClockSource+0x238>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	f000 8099 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8009e58 <HAL_TIM_ConfigClockSource+0x238>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	f200 809e 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009ce4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ce8:	f000 8091 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009cec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009cf0:	f200 8096 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cf8:	f000 8089 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009cfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d00:	f200 808e 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d08:	d03e      	beq.n	8009d88 <HAL_TIM_ConfigClockSource+0x168>
 8009d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d0e:	f200 8087 	bhi.w	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d16:	f000 8086 	beq.w	8009e26 <HAL_TIM_ConfigClockSource+0x206>
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d1e:	d87f      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d20:	2b70      	cmp	r3, #112	@ 0x70
 8009d22:	d01a      	beq.n	8009d5a <HAL_TIM_ConfigClockSource+0x13a>
 8009d24:	2b70      	cmp	r3, #112	@ 0x70
 8009d26:	d87b      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d28:	2b60      	cmp	r3, #96	@ 0x60
 8009d2a:	d050      	beq.n	8009dce <HAL_TIM_ConfigClockSource+0x1ae>
 8009d2c:	2b60      	cmp	r3, #96	@ 0x60
 8009d2e:	d877      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d30:	2b50      	cmp	r3, #80	@ 0x50
 8009d32:	d03c      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0x18e>
 8009d34:	2b50      	cmp	r3, #80	@ 0x50
 8009d36:	d873      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d38:	2b40      	cmp	r3, #64	@ 0x40
 8009d3a:	d058      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x1ce>
 8009d3c:	2b40      	cmp	r3, #64	@ 0x40
 8009d3e:	d86f      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d40:	2b30      	cmp	r3, #48	@ 0x30
 8009d42:	d064      	beq.n	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d44:	2b30      	cmp	r3, #48	@ 0x30
 8009d46:	d86b      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d060      	beq.n	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d867      	bhi.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d05c      	beq.n	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d54:	2b10      	cmp	r3, #16
 8009d56:	d05a      	beq.n	8009e0e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d58:	e062      	b.n	8009e20 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d6a:	f000 fd45 	bl	800a7f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	609a      	str	r2, [r3, #8]
      break;
 8009d86:	e04f      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d98:	f000 fd2e 	bl	800a7f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009daa:	609a      	str	r2, [r3, #8]
      break;
 8009dac:	e03c      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f000 fca0 	bl	800a700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2150      	movs	r1, #80	@ 0x50
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fcf9 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009dcc:	e02c      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f000 fcbf 	bl	800a75e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2160      	movs	r1, #96	@ 0x60
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fce9 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009dec:	e01c      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f000 fc80 	bl	800a700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2140      	movs	r1, #64	@ 0x40
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fcd9 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009e0c:	e00c      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f000 fcd0 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009e1e:	e003      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
      break;
 8009e24:	e000      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	00100070 	.word	0x00100070
 8009e48:	00100060 	.word	0x00100060
 8009e4c:	00100050 	.word	0x00100050
 8009e50:	00100040 	.word	0x00100040
 8009e54:	00100030 	.word	0x00100030
 8009e58:	00100020 	.word	0x00100020

08009e5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a62      	ldr	r2, [pc, #392]	@ (800a05c <TIM_Base_SetConfig+0x19c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d02b      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a61      	ldr	r2, [pc, #388]	@ (800a060 <TIM_Base_SetConfig+0x1a0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d027      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d023      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eee:	d01f      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a5c      	ldr	r2, [pc, #368]	@ (800a064 <TIM_Base_SetConfig+0x1a4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d01b      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a5b      	ldr	r2, [pc, #364]	@ (800a068 <TIM_Base_SetConfig+0x1a8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d017      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a5a      	ldr	r2, [pc, #360]	@ (800a06c <TIM_Base_SetConfig+0x1ac>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d013      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a59      	ldr	r2, [pc, #356]	@ (800a070 <TIM_Base_SetConfig+0x1b0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00f      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a58      	ldr	r2, [pc, #352]	@ (800a074 <TIM_Base_SetConfig+0x1b4>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00b      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a57      	ldr	r2, [pc, #348]	@ (800a078 <TIM_Base_SetConfig+0x1b8>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d007      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a56      	ldr	r2, [pc, #344]	@ (800a07c <TIM_Base_SetConfig+0x1bc>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_Base_SetConfig+0x70>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a55      	ldr	r2, [pc, #340]	@ (800a080 <TIM_Base_SetConfig+0x1c0>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d108      	bne.n	8009f42 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a45      	ldr	r2, [pc, #276]	@ (800a05c <TIM_Base_SetConfig+0x19c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d03b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a44      	ldr	r2, [pc, #272]	@ (800a060 <TIM_Base_SetConfig+0x1a0>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d037      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f58:	d033      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f60:	d02f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a3f      	ldr	r2, [pc, #252]	@ (800a064 <TIM_Base_SetConfig+0x1a4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d02b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a3e      	ldr	r2, [pc, #248]	@ (800a068 <TIM_Base_SetConfig+0x1a8>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d027      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a3d      	ldr	r2, [pc, #244]	@ (800a06c <TIM_Base_SetConfig+0x1ac>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d023      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a3c      	ldr	r2, [pc, #240]	@ (800a070 <TIM_Base_SetConfig+0x1b0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a3b      	ldr	r2, [pc, #236]	@ (800a074 <TIM_Base_SetConfig+0x1b4>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d01b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a3a      	ldr	r2, [pc, #232]	@ (800a078 <TIM_Base_SetConfig+0x1b8>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d017      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a39      	ldr	r2, [pc, #228]	@ (800a07c <TIM_Base_SetConfig+0x1bc>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a38      	ldr	r2, [pc, #224]	@ (800a080 <TIM_Base_SetConfig+0x1c0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a37      	ldr	r2, [pc, #220]	@ (800a084 <TIM_Base_SetConfig+0x1c4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a36      	ldr	r2, [pc, #216]	@ (800a088 <TIM_Base_SetConfig+0x1c8>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a35      	ldr	r2, [pc, #212]	@ (800a08c <TIM_Base_SetConfig+0x1cc>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0x102>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a34      	ldr	r2, [pc, #208]	@ (800a090 <TIM_Base_SetConfig+0x1d0>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <TIM_Base_SetConfig+0x19c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d013      	beq.n	800a028 <TIM_Base_SetConfig+0x168>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a17      	ldr	r2, [pc, #92]	@ (800a060 <TIM_Base_SetConfig+0x1a0>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00f      	beq.n	800a028 <TIM_Base_SetConfig+0x168>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a1c      	ldr	r2, [pc, #112]	@ (800a07c <TIM_Base_SetConfig+0x1bc>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00b      	beq.n	800a028 <TIM_Base_SetConfig+0x168>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a1b      	ldr	r2, [pc, #108]	@ (800a080 <TIM_Base_SetConfig+0x1c0>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d007      	beq.n	800a028 <TIM_Base_SetConfig+0x168>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a1c      	ldr	r2, [pc, #112]	@ (800a08c <TIM_Base_SetConfig+0x1cc>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d003      	beq.n	800a028 <TIM_Base_SetConfig+0x168>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a1b      	ldr	r2, [pc, #108]	@ (800a090 <TIM_Base_SetConfig+0x1d0>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d103      	bne.n	800a030 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d105      	bne.n	800a04e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f023 0201 	bic.w	r2, r3, #1
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	611a      	str	r2, [r3, #16]
  }
}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40012c00 	.word	0x40012c00
 800a060:	50012c00 	.word	0x50012c00
 800a064:	40000400 	.word	0x40000400
 800a068:	50000400 	.word	0x50000400
 800a06c:	40000800 	.word	0x40000800
 800a070:	50000800 	.word	0x50000800
 800a074:	40000c00 	.word	0x40000c00
 800a078:	50000c00 	.word	0x50000c00
 800a07c:	40013400 	.word	0x40013400
 800a080:	50013400 	.word	0x50013400
 800a084:	40001800 	.word	0x40001800
 800a088:	50001800 	.word	0x50001800
 800a08c:	40014000 	.word	0x40014000
 800a090:	50014000 	.word	0x50014000

0800a094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	f023 0201 	bic.w	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f023 0302 	bic.w	r3, r3, #2
 800a0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a30      	ldr	r2, [pc, #192]	@ (800a1b0 <TIM_OC1_SetConfig+0x11c>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d013      	beq.n	800a11c <TIM_OC1_SetConfig+0x88>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a2f      	ldr	r2, [pc, #188]	@ (800a1b4 <TIM_OC1_SetConfig+0x120>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00f      	beq.n	800a11c <TIM_OC1_SetConfig+0x88>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a2e      	ldr	r2, [pc, #184]	@ (800a1b8 <TIM_OC1_SetConfig+0x124>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00b      	beq.n	800a11c <TIM_OC1_SetConfig+0x88>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a2d      	ldr	r2, [pc, #180]	@ (800a1bc <TIM_OC1_SetConfig+0x128>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d007      	beq.n	800a11c <TIM_OC1_SetConfig+0x88>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a2c      	ldr	r2, [pc, #176]	@ (800a1c0 <TIM_OC1_SetConfig+0x12c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC1_SetConfig+0x88>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a2b      	ldr	r2, [pc, #172]	@ (800a1c4 <TIM_OC1_SetConfig+0x130>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d10c      	bne.n	800a136 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0308 	bic.w	r3, r3, #8
 800a122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f023 0304 	bic.w	r3, r3, #4
 800a134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a1d      	ldr	r2, [pc, #116]	@ (800a1b0 <TIM_OC1_SetConfig+0x11c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d013      	beq.n	800a166 <TIM_OC1_SetConfig+0xd2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b4 <TIM_OC1_SetConfig+0x120>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <TIM_OC1_SetConfig+0xd2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b8 <TIM_OC1_SetConfig+0x124>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00b      	beq.n	800a166 <TIM_OC1_SetConfig+0xd2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a1a      	ldr	r2, [pc, #104]	@ (800a1bc <TIM_OC1_SetConfig+0x128>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d007      	beq.n	800a166 <TIM_OC1_SetConfig+0xd2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a19      	ldr	r2, [pc, #100]	@ (800a1c0 <TIM_OC1_SetConfig+0x12c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_OC1_SetConfig+0xd2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a18      	ldr	r2, [pc, #96]	@ (800a1c4 <TIM_OC1_SetConfig+0x130>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d111      	bne.n	800a18a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	621a      	str	r2, [r3, #32]
}
 800a1a4:	bf00      	nop
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	40012c00 	.word	0x40012c00
 800a1b4:	50012c00 	.word	0x50012c00
 800a1b8:	40013400 	.word	0x40013400
 800a1bc:	50013400 	.word	0x50013400
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	50014000 	.word	0x50014000

0800a1c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	f023 0210 	bic.w	r2, r3, #16
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f023 0320 	bic.w	r3, r3, #32
 800a216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	011b      	lsls	r3, r3, #4
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a2e      	ldr	r2, [pc, #184]	@ (800a2e0 <TIM_OC2_SetConfig+0x118>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_OC2_SetConfig+0x7c>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a2d      	ldr	r2, [pc, #180]	@ (800a2e4 <TIM_OC2_SetConfig+0x11c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_OC2_SetConfig+0x7c>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a2c      	ldr	r2, [pc, #176]	@ (800a2e8 <TIM_OC2_SetConfig+0x120>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC2_SetConfig+0x7c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a2b      	ldr	r2, [pc, #172]	@ (800a2ec <TIM_OC2_SetConfig+0x124>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10d      	bne.n	800a260 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a25e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e0 <TIM_OC2_SetConfig+0x118>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <TIM_OC2_SetConfig+0xc8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e4 <TIM_OC2_SetConfig+0x11c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00f      	beq.n	800a290 <TIM_OC2_SetConfig+0xc8>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a1d      	ldr	r2, [pc, #116]	@ (800a2e8 <TIM_OC2_SetConfig+0x120>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00b      	beq.n	800a290 <TIM_OC2_SetConfig+0xc8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2ec <TIM_OC2_SetConfig+0x124>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d007      	beq.n	800a290 <TIM_OC2_SetConfig+0xc8>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f0 <TIM_OC2_SetConfig+0x128>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d003      	beq.n	800a290 <TIM_OC2_SetConfig+0xc8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f4 <TIM_OC2_SetConfig+0x12c>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d113      	bne.n	800a2b8 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a29e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	50012c00 	.word	0x50012c00
 800a2e8:	40013400 	.word	0x40013400
 800a2ec:	50013400 	.word	0x50013400
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	50014000 	.word	0x50014000

0800a2f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a2d      	ldr	r2, [pc, #180]	@ (800a40c <TIM_OC3_SetConfig+0x114>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00b      	beq.n	800a372 <TIM_OC3_SetConfig+0x7a>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a2c      	ldr	r2, [pc, #176]	@ (800a410 <TIM_OC3_SetConfig+0x118>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d007      	beq.n	800a372 <TIM_OC3_SetConfig+0x7a>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a2b      	ldr	r2, [pc, #172]	@ (800a414 <TIM_OC3_SetConfig+0x11c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d003      	beq.n	800a372 <TIM_OC3_SetConfig+0x7a>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a2a      	ldr	r2, [pc, #168]	@ (800a418 <TIM_OC3_SetConfig+0x120>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10d      	bne.n	800a38e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a1e      	ldr	r2, [pc, #120]	@ (800a40c <TIM_OC3_SetConfig+0x114>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d013      	beq.n	800a3be <TIM_OC3_SetConfig+0xc6>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a1d      	ldr	r2, [pc, #116]	@ (800a410 <TIM_OC3_SetConfig+0x118>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00f      	beq.n	800a3be <TIM_OC3_SetConfig+0xc6>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a414 <TIM_OC3_SetConfig+0x11c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00b      	beq.n	800a3be <TIM_OC3_SetConfig+0xc6>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a418 <TIM_OC3_SetConfig+0x120>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d007      	beq.n	800a3be <TIM_OC3_SetConfig+0xc6>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a41c <TIM_OC3_SetConfig+0x124>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d003      	beq.n	800a3be <TIM_OC3_SetConfig+0xc6>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a19      	ldr	r2, [pc, #100]	@ (800a420 <TIM_OC3_SetConfig+0x128>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d113      	bne.n	800a3e6 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	621a      	str	r2, [r3, #32]
}
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	40012c00 	.word	0x40012c00
 800a410:	50012c00 	.word	0x50012c00
 800a414:	40013400 	.word	0x40013400
 800a418:	50013400 	.word	0x50013400
 800a41c:	40014000 	.word	0x40014000
 800a420:	50014000 	.word	0x50014000

0800a424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	031b      	lsls	r3, r3, #12
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a2e      	ldr	r2, [pc, #184]	@ (800a53c <TIM_OC4_SetConfig+0x118>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00b      	beq.n	800a4a0 <TIM_OC4_SetConfig+0x7c>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a2d      	ldr	r2, [pc, #180]	@ (800a540 <TIM_OC4_SetConfig+0x11c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d007      	beq.n	800a4a0 <TIM_OC4_SetConfig+0x7c>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a2c      	ldr	r2, [pc, #176]	@ (800a544 <TIM_OC4_SetConfig+0x120>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_OC4_SetConfig+0x7c>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a2b      	ldr	r2, [pc, #172]	@ (800a548 <TIM_OC4_SetConfig+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d10d      	bne.n	800a4bc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	031b      	lsls	r3, r3, #12
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a1f      	ldr	r2, [pc, #124]	@ (800a53c <TIM_OC4_SetConfig+0x118>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d013      	beq.n	800a4ec <TIM_OC4_SetConfig+0xc8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a540 <TIM_OC4_SetConfig+0x11c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00f      	beq.n	800a4ec <TIM_OC4_SetConfig+0xc8>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a544 <TIM_OC4_SetConfig+0x120>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00b      	beq.n	800a4ec <TIM_OC4_SetConfig+0xc8>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a548 <TIM_OC4_SetConfig+0x124>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d007      	beq.n	800a4ec <TIM_OC4_SetConfig+0xc8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <TIM_OC4_SetConfig+0x128>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d003      	beq.n	800a4ec <TIM_OC4_SetConfig+0xc8>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a550 <TIM_OC4_SetConfig+0x12c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d113      	bne.n	800a514 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	019b      	lsls	r3, r3, #6
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	019b      	lsls	r3, r3, #6
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	4313      	orrs	r3, r2
 800a512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	40012c00 	.word	0x40012c00
 800a540:	50012c00 	.word	0x50012c00
 800a544:	40013400 	.word	0x40013400
 800a548:	50013400 	.word	0x50013400
 800a54c:	40014000 	.word	0x40014000
 800a550:	50014000 	.word	0x50014000

0800a554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a598:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	041b      	lsls	r3, r3, #16
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a19      	ldr	r2, [pc, #100]	@ (800a610 <TIM_OC5_SetConfig+0xbc>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d013      	beq.n	800a5d6 <TIM_OC5_SetConfig+0x82>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a18      	ldr	r2, [pc, #96]	@ (800a614 <TIM_OC5_SetConfig+0xc0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d00f      	beq.n	800a5d6 <TIM_OC5_SetConfig+0x82>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a17      	ldr	r2, [pc, #92]	@ (800a618 <TIM_OC5_SetConfig+0xc4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00b      	beq.n	800a5d6 <TIM_OC5_SetConfig+0x82>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <TIM_OC5_SetConfig+0xc8>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d007      	beq.n	800a5d6 <TIM_OC5_SetConfig+0x82>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a15      	ldr	r2, [pc, #84]	@ (800a620 <TIM_OC5_SetConfig+0xcc>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d003      	beq.n	800a5d6 <TIM_OC5_SetConfig+0x82>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a14      	ldr	r2, [pc, #80]	@ (800a624 <TIM_OC5_SetConfig+0xd0>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d109      	bne.n	800a5ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	621a      	str	r2, [r3, #32]
}
 800a604:	bf00      	nop
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	40012c00 	.word	0x40012c00
 800a614:	50012c00 	.word	0x50012c00
 800a618:	40013400 	.word	0x40013400
 800a61c:	50013400 	.word	0x50013400
 800a620:	40014000 	.word	0x40014000
 800a624:	50014000 	.word	0x50014000

0800a628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	051b      	lsls	r3, r3, #20
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6e8 <TIM_OC6_SetConfig+0xc0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <TIM_OC6_SetConfig+0x84>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a19      	ldr	r2, [pc, #100]	@ (800a6ec <TIM_OC6_SetConfig+0xc4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00f      	beq.n	800a6ac <TIM_OC6_SetConfig+0x84>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <TIM_OC6_SetConfig+0xc8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00b      	beq.n	800a6ac <TIM_OC6_SetConfig+0x84>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a17      	ldr	r2, [pc, #92]	@ (800a6f4 <TIM_OC6_SetConfig+0xcc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d007      	beq.n	800a6ac <TIM_OC6_SetConfig+0x84>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a16      	ldr	r2, [pc, #88]	@ (800a6f8 <TIM_OC6_SetConfig+0xd0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d003      	beq.n	800a6ac <TIM_OC6_SetConfig+0x84>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a15      	ldr	r2, [pc, #84]	@ (800a6fc <TIM_OC6_SetConfig+0xd4>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d109      	bne.n	800a6c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	029b      	lsls	r3, r3, #10
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	50012c00 	.word	0x50012c00
 800a6f0:	40013400 	.word	0x40013400
 800a6f4:	50013400 	.word	0x50013400
 800a6f8:	40014000 	.word	0x40014000
 800a6fc:	50014000 	.word	0x50014000

0800a700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	f023 0201 	bic.w	r2, r3, #1
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a72a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4313      	orrs	r3, r2
 800a734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f023 030a 	bic.w	r3, r3, #10
 800a73c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4313      	orrs	r3, r2
 800a744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	621a      	str	r2, [r3, #32]
}
 800a752:	bf00      	nop
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75e:	b480      	push	{r7}
 800a760:	b087      	sub	sp, #28
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	f023 0210 	bic.w	r2, r3, #16
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	031b      	lsls	r3, r3, #12
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	4313      	orrs	r3, r2
 800a792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a79a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	621a      	str	r2, [r3, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a7d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	f043 0307 	orr.w	r3, r3, #7
 800a7e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	609a      	str	r2, [r3, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	021a      	lsls	r2, r3, #8
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	431a      	orrs	r2, r3
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	4313      	orrs	r3, r2
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	609a      	str	r2, [r3, #8]
}
 800a82c:	bf00      	nop
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f003 031f 	and.w	r3, r3, #31
 800a84a:	2201      	movs	r2, #1
 800a84c:	fa02 f303 	lsl.w	r3, r2, r3
 800a850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	43db      	mvns	r3, r3
 800a85a:	401a      	ands	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1a      	ldr	r2, [r3, #32]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 031f 	and.w	r3, r3, #31
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	fa01 f303 	lsl.w	r3, r1, r3
 800a870:	431a      	orrs	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	621a      	str	r2, [r3, #32]
}
 800a876:	bf00      	nop
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
	...

0800a884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a898:	2302      	movs	r3, #2
 800a89a:	e0a1      	b.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a4a      	ldr	r2, [pc, #296]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a49      	ldr	r2, [pc, #292]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a47      	ldr	r2, [pc, #284]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a46      	ldr	r2, [pc, #280]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d108      	bne.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4313      	orrs	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a34      	ldr	r2, [pc, #208]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d04a      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a33      	ldr	r2, [pc, #204]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d045      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a930:	d040      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a93a:	d03b      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a2e      	ldr	r2, [pc, #184]	@ (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d036      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a2d      	ldr	r2, [pc, #180]	@ (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d031      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a2b      	ldr	r2, [pc, #172]	@ (800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d02c      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a2a      	ldr	r2, [pc, #168]	@ (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d027      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a28      	ldr	r2, [pc, #160]	@ (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d022      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a27      	ldr	r2, [pc, #156]	@ (800aa10 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d01d      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d018      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d013      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a20      	ldr	r2, [pc, #128]	@ (800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d00e      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a1f      	ldr	r2, [pc, #124]	@ (800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d009      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d004      	beq.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a1c      	ldr	r2, [pc, #112]	@ (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d10c      	bne.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	40012c00 	.word	0x40012c00
 800a9f0:	50012c00 	.word	0x50012c00
 800a9f4:	40013400 	.word	0x40013400
 800a9f8:	50013400 	.word	0x50013400
 800a9fc:	40000400 	.word	0x40000400
 800aa00:	50000400 	.word	0x50000400
 800aa04:	40000800 	.word	0x40000800
 800aa08:	50000800 	.word	0x50000800
 800aa0c:	40000c00 	.word	0x40000c00
 800aa10:	50000c00 	.word	0x50000c00
 800aa14:	40001800 	.word	0x40001800
 800aa18:	50001800 	.word	0x50001800
 800aa1c:	40014000 	.word	0x40014000
 800aa20:	50014000 	.word	0x50014000

0800aa24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e042      	b.n	800ab48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7f8 fa99 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2224      	movs	r2, #36	@ 0x24
 800aade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0201 	bic.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb4c 	bl	800b198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f99b 	bl	800ae3c <UART_SetConfig>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e01b      	b.n	800ab48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689a      	ldr	r2, [r3, #8]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fbcb 	bl	800b2dc <UART_CheckIdleState>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	@ 0x28
 800ab54:	af02      	add	r7, sp, #8
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	f040 808b 	bne.w	800ac82 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <HAL_UART_Transmit+0x28>
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e083      	b.n	800ac84 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab86:	2b80      	cmp	r3, #128	@ 0x80
 800ab88:	d107      	bne.n	800ab9a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab98:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2221      	movs	r2, #33	@ 0x21
 800aba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abaa:	f7f8 fe5f 	bl	800386c <HAL_GetTick>
 800abae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	88fa      	ldrh	r2, [r7, #6]
 800abb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc8:	d108      	bne.n	800abdc <HAL_UART_Transmit+0x8c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d104      	bne.n	800abdc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e003      	b.n	800abe4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abe4:	e030      	b.n	800ac48 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	@ 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fc1d 	bl	800b430 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e03d      	b.n	800ac84 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	3302      	adds	r3, #2
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	e007      	b.n	800ac36 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	3301      	adds	r3, #1
 800ac34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1c8      	bne.n	800abe6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2140      	movs	r1, #64	@ 0x40
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fbe6 	bl	800b430 <UART_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e006      	b.n	800ac84 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	e000      	b.n	800ac84 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ac82:	2302      	movs	r3, #2
  }
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3720      	adds	r7, #32
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	@ 0x28
 800ac90:	af02      	add	r7, sp, #8
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	f040 80c4 	bne.w	800ae30 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <HAL_UART_Receive+0x28>
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0bc      	b.n	800ae32 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc2:	2b40      	cmp	r3, #64	@ 0x40
 800acc4:	d107      	bne.n	800acd6 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acd4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2222      	movs	r2, #34	@ 0x22
 800ace2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acec:	f7f8 fdbe 	bl	800386c <HAL_GetTick>
 800acf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	88fa      	ldrh	r2, [r7, #6]
 800acf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	88fa      	ldrh	r2, [r7, #6]
 800acfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad0a:	d10e      	bne.n	800ad2a <HAL_UART_Receive+0x9e>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d105      	bne.n	800ad20 <HAL_UART_Receive+0x94>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ad1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad1e:	e02d      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	22ff      	movs	r2, #255	@ 0xff
 800ad24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad28:	e028      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10d      	bne.n	800ad4e <HAL_UART_Receive+0xc2>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d104      	bne.n	800ad44 <HAL_UART_Receive+0xb8>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	22ff      	movs	r2, #255	@ 0xff
 800ad3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad42:	e01b      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	227f      	movs	r2, #127	@ 0x7f
 800ad48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad4c:	e016      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad56:	d10d      	bne.n	800ad74 <HAL_UART_Receive+0xe8>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <HAL_UART_Receive+0xde>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	227f      	movs	r2, #127	@ 0x7f
 800ad64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad68:	e008      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	223f      	movs	r2, #63	@ 0x3f
 800ad6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad72:	e003      	b.n	800ad7c <HAL_UART_Receive+0xf0>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad8c:	d108      	bne.n	800ada0 <HAL_UART_Receive+0x114>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d104      	bne.n	800ada0 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	61bb      	str	r3, [r7, #24]
 800ad9e:	e003      	b.n	800ada8 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ada8:	e036      	b.n	800ae18 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2200      	movs	r2, #0
 800adb2:	2120      	movs	r1, #32
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 fb3b 	bl	800b430 <UART_WaitOnFlagUntilTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e032      	b.n	800ae32 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10c      	bne.n	800adec <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add8:	b29a      	uxth	r2, r3
 800adda:	8a7b      	ldrh	r3, [r7, #18]
 800addc:	4013      	ands	r3, r2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	3302      	adds	r3, #2
 800ade8:	61bb      	str	r3, [r7, #24]
 800adea:	e00c      	b.n	800ae06 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	8a7b      	ldrh	r3, [r7, #18]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	4013      	ands	r3, r2
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	3301      	adds	r3, #1
 800ae04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1c2      	bne.n	800adaa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e000      	b.n	800ae32 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800ae30:	2302      	movs	r3, #2
  }
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae40:	b094      	sub	sp, #80	@ 0x50
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	4b83      	ldr	r3, [pc, #524]	@ (800b060 <UART_SetConfig+0x224>)
 800ae52:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	431a      	orrs	r2, r3
 800ae64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	497c      	ldr	r1, [pc, #496]	@ (800b064 <UART_SetConfig+0x228>)
 800ae74:	4019      	ands	r1, r3
 800ae76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8c:	68d9      	ldr	r1, [r3, #12]
 800ae8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	ea40 0301 	orr.w	r3, r0, r1
 800ae96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b6f      	ldr	r3, [pc, #444]	@ (800b060 <UART_SetConfig+0x224>)
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d009      	beq.n	800aebc <UART_SetConfig+0x80>
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	4b6e      	ldr	r3, [pc, #440]	@ (800b068 <UART_SetConfig+0x22c>)
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d004      	beq.n	800aebc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800aec6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800aeca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeda:	f023 000f 	bic.w	r0, r3, #15
 800aede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800aee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	ea40 0301 	orr.w	r3, r0, r1
 800aeea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4b5e      	ldr	r3, [pc, #376]	@ (800b06c <UART_SetConfig+0x230>)
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d102      	bne.n	800aefc <UART_SetConfig+0xc0>
 800aef6:	2301      	movs	r3, #1
 800aef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aefa:	e032      	b.n	800af62 <UART_SetConfig+0x126>
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4b5b      	ldr	r3, [pc, #364]	@ (800b070 <UART_SetConfig+0x234>)
 800af02:	429a      	cmp	r2, r3
 800af04:	d102      	bne.n	800af0c <UART_SetConfig+0xd0>
 800af06:	2302      	movs	r3, #2
 800af08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af0a:	e02a      	b.n	800af62 <UART_SetConfig+0x126>
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	4b58      	ldr	r3, [pc, #352]	@ (800b074 <UART_SetConfig+0x238>)
 800af12:	429a      	cmp	r2, r3
 800af14:	d102      	bne.n	800af1c <UART_SetConfig+0xe0>
 800af16:	2304      	movs	r3, #4
 800af18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af1a:	e022      	b.n	800af62 <UART_SetConfig+0x126>
 800af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	4b55      	ldr	r3, [pc, #340]	@ (800b078 <UART_SetConfig+0x23c>)
 800af22:	429a      	cmp	r2, r3
 800af24:	d102      	bne.n	800af2c <UART_SetConfig+0xf0>
 800af26:	2308      	movs	r3, #8
 800af28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af2a:	e01a      	b.n	800af62 <UART_SetConfig+0x126>
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	4b52      	ldr	r3, [pc, #328]	@ (800b07c <UART_SetConfig+0x240>)
 800af32:	429a      	cmp	r2, r3
 800af34:	d102      	bne.n	800af3c <UART_SetConfig+0x100>
 800af36:	2310      	movs	r3, #16
 800af38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af3a:	e012      	b.n	800af62 <UART_SetConfig+0x126>
 800af3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	4b4f      	ldr	r3, [pc, #316]	@ (800b080 <UART_SetConfig+0x244>)
 800af42:	429a      	cmp	r2, r3
 800af44:	d102      	bne.n	800af4c <UART_SetConfig+0x110>
 800af46:	2320      	movs	r3, #32
 800af48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af4a:	e00a      	b.n	800af62 <UART_SetConfig+0x126>
 800af4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	4b43      	ldr	r3, [pc, #268]	@ (800b060 <UART_SetConfig+0x224>)
 800af52:	429a      	cmp	r2, r3
 800af54:	d103      	bne.n	800af5e <UART_SetConfig+0x122>
 800af56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5c:	e001      	b.n	800af62 <UART_SetConfig+0x126>
 800af5e:	2300      	movs	r3, #0
 800af60:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	4b3e      	ldr	r3, [pc, #248]	@ (800b060 <UART_SetConfig+0x224>)
 800af68:	429a      	cmp	r2, r3
 800af6a:	d005      	beq.n	800af78 <UART_SetConfig+0x13c>
 800af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	4b3d      	ldr	r3, [pc, #244]	@ (800b068 <UART_SetConfig+0x22c>)
 800af72:	429a      	cmp	r2, r3
 800af74:	f040 8088 	bne.w	800b088 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af7a:	2200      	movs	r2, #0
 800af7c:	623b      	str	r3, [r7, #32]
 800af7e:	627a      	str	r2, [r7, #36]	@ 0x24
 800af80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800af84:	f7fb ff72 	bl	8006e6c <HAL_RCCEx_GetPeriphCLKFreq>
 800af88:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800af8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 80eb 	beq.w	800b168 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	4a3b      	ldr	r2, [pc, #236]	@ (800b084 <UART_SetConfig+0x248>)
 800af98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afa4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	4413      	add	r3, r2
 800afb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d305      	bcc.n	800afc2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d903      	bls.n	800afca <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800afc8:	e048      	b.n	800b05c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afcc:	2200      	movs	r2, #0
 800afce:	61bb      	str	r3, [r7, #24]
 800afd0:	61fa      	str	r2, [r7, #28]
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd6:	4a2b      	ldr	r2, [pc, #172]	@ (800b084 <UART_SetConfig+0x248>)
 800afd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2200      	movs	r2, #0
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	617a      	str	r2, [r7, #20]
 800afe4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800afe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800afec:	f7f5 fe60 	bl	8000cb0 <__aeabi_uldivmod>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4610      	mov	r0, r2
 800aff6:	4619      	mov	r1, r3
 800aff8:	f04f 0200 	mov.w	r2, #0
 800affc:	f04f 0300 	mov.w	r3, #0
 800b000:	020b      	lsls	r3, r1, #8
 800b002:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b006:	0202      	lsls	r2, r0, #8
 800b008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b00a:	6849      	ldr	r1, [r1, #4]
 800b00c:	0849      	lsrs	r1, r1, #1
 800b00e:	2000      	movs	r0, #0
 800b010:	460c      	mov	r4, r1
 800b012:	4605      	mov	r5, r0
 800b014:	eb12 0804 	adds.w	r8, r2, r4
 800b018:	eb43 0905 	adc.w	r9, r3, r5
 800b01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	60bb      	str	r3, [r7, #8]
 800b024:	60fa      	str	r2, [r7, #12]
 800b026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 fe3f 	bl	8000cb0 <__aeabi_uldivmod>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4613      	mov	r3, r2
 800b038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b040:	d308      	bcc.n	800b054 <UART_SetConfig+0x218>
 800b042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b044:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b048:	d204      	bcs.n	800b054 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	e003      	b.n	800b05c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b05a:	e085      	b.n	800b168 <UART_SetConfig+0x32c>
 800b05c:	e084      	b.n	800b168 <UART_SetConfig+0x32c>
 800b05e:	bf00      	nop
 800b060:	44002400 	.word	0x44002400
 800b064:	cfff69f3 	.word	0xcfff69f3
 800b068:	54002400 	.word	0x54002400
 800b06c:	40013800 	.word	0x40013800
 800b070:	40004400 	.word	0x40004400
 800b074:	40004800 	.word	0x40004800
 800b078:	40004c00 	.word	0x40004c00
 800b07c:	40005000 	.word	0x40005000
 800b080:	40006400 	.word	0x40006400
 800b084:	08010834 	.word	0x08010834
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08a:	69db      	ldr	r3, [r3, #28]
 800b08c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b090:	d13c      	bne.n	800b10c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b094:	2200      	movs	r2, #0
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09e:	f7fb fee5 	bl	8006e6c <HAL_RCCEx_GetPeriphCLKFreq>
 800b0a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d05e      	beq.n	800b168 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	4a39      	ldr	r2, [pc, #228]	@ (800b194 <UART_SetConfig+0x358>)
 800b0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0bc:	005a      	lsls	r2, r3, #1
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	441a      	add	r2, r3
 800b0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d2:	2b0f      	cmp	r3, #15
 800b0d4:	d916      	bls.n	800b104 <UART_SetConfig+0x2c8>
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0dc:	d212      	bcs.n	800b104 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f023 030f 	bic.w	r3, r3, #15
 800b0e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ea:	085b      	lsrs	r3, r3, #1
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	e031      	b.n	800b168 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b10a:	e02d      	b.n	800b168 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b10c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10e:	2200      	movs	r2, #0
 800b110:	469a      	mov	sl, r3
 800b112:	4693      	mov	fp, r2
 800b114:	4650      	mov	r0, sl
 800b116:	4659      	mov	r1, fp
 800b118:	f7fb fea8 	bl	8006e6c <HAL_RCCEx_GetPeriphCLKFreq>
 800b11c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	d021      	beq.n	800b168 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b128:	4a1a      	ldr	r2, [pc, #104]	@ (800b194 <UART_SetConfig+0x358>)
 800b12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b12e:	461a      	mov	r2, r3
 800b130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b132:	fbb3 f2f2 	udiv	r2, r3, r2
 800b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	085b      	lsrs	r3, r3, #1
 800b13c:	441a      	add	r2, r3
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	fbb2 f3f3 	udiv	r3, r2, r3
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14a:	2b0f      	cmp	r3, #15
 800b14c:	d909      	bls.n	800b162 <UART_SetConfig+0x326>
 800b14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b154:	d205      	bcs.n	800b162 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b158:	b29a      	uxth	r2, r3
 800b15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60da      	str	r2, [r3, #12]
 800b160:	e002      	b.n	800b168 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16a:	2201      	movs	r2, #1
 800b16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b172:	2201      	movs	r2, #1
 800b174:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	2200      	movs	r2, #0
 800b17c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b180:	2200      	movs	r2, #0
 800b182:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b184:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3750      	adds	r7, #80	@ 0x50
 800b18c:	46bd      	mov	sp, r7
 800b18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b192:	bf00      	nop
 800b194:	08010834 	.word	0x08010834

0800b198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00a      	beq.n	800b1c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00a      	beq.n	800b206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20a:	f003 0304 	and.w	r3, r3, #4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22c:	f003 0310 	and.w	r3, r3, #16
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00a      	beq.n	800b24a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b274:	2b00      	cmp	r3, #0
 800b276:	d01a      	beq.n	800b2ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b296:	d10a      	bne.n	800b2ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	605a      	str	r2, [r3, #4]
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b098      	sub	sp, #96	@ 0x60
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2ec:	f7f8 fabe 	bl	800386c <HAL_GetTick>
 800b2f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0308 	and.w	r3, r3, #8
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d12f      	bne.n	800b360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b300:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b308:	2200      	movs	r2, #0
 800b30a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f88e 	bl	800b430 <UART_WaitOnFlagUntilTimeout>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d022      	beq.n	800b360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b32e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b338:	647b      	str	r3, [r7, #68]	@ 0x44
 800b33a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b33e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e6      	bne.n	800b31a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e063      	b.n	800b428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b04      	cmp	r3, #4
 800b36c:	d149      	bne.n	800b402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b36e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b376:	2200      	movs	r2, #0
 800b378:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f857 	bl	800b430 <UART_WaitOnFlagUntilTimeout>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d03c      	beq.n	800b402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	623b      	str	r3, [r7, #32]
   return(result);
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b39c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ae:	e841 2300 	strex	r3, r2, [r1]
 800b3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1e6      	bne.n	800b388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	e853 3f00 	ldrex	r3, [r3]
 800b3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f023 0301 	bic.w	r3, r3, #1
 800b3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3da:	61fa      	str	r2, [r7, #28]
 800b3dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	69b9      	ldr	r1, [r7, #24]
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e5      	bne.n	800b3ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e012      	b.n	800b428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3758      	adds	r7, #88	@ 0x58
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4613      	mov	r3, r2
 800b43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b440:	e04f      	b.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d04b      	beq.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b44a:	f7f8 fa0f 	bl	800386c <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	429a      	cmp	r2, r3
 800b458:	d302      	bcc.n	800b460 <UART_WaitOnFlagUntilTimeout+0x30>
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e04e      	b.n	800b502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0304 	and.w	r3, r3, #4
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d037      	beq.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b80      	cmp	r3, #128	@ 0x80
 800b476:	d034      	beq.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b40      	cmp	r3, #64	@ 0x40
 800b47c:	d031      	beq.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d110      	bne.n	800b4ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2208      	movs	r2, #8
 800b492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 f838 	bl	800b50a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2208      	movs	r2, #8
 800b49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e029      	b.n	800b502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4bc:	d111      	bne.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f81e 	bl	800b50a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e00f      	b.n	800b502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69da      	ldr	r2, [r3, #28]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	bf0c      	ite	eq
 800b4f2:	2301      	moveq	r3, #1
 800b4f4:	2300      	movne	r3, #0
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d0a0      	beq.n	800b442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b095      	sub	sp, #84	@ 0x54
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51a:	e853 3f00 	ldrex	r3, [r3]
 800b51e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b530:	643b      	str	r3, [r7, #64]	@ 0x40
 800b532:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b534:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b536:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b538:	e841 2300 	strex	r3, r2, [r1]
 800b53c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e6      	bne.n	800b512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	61fb      	str	r3, [r7, #28]
   return(result);
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e3      	bne.n	800b544 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b580:	2b01      	cmp	r3, #1
 800b582:	d118      	bne.n	800b5b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	60bb      	str	r3, [r7, #8]
   return(result);
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f023 0310 	bic.w	r3, r3, #16
 800b598:	647b      	str	r3, [r7, #68]	@ 0x44
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5a2:	61bb      	str	r3, [r7, #24]
 800b5a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6979      	ldr	r1, [r7, #20]
 800b5a8:	69ba      	ldr	r2, [r7, #24]
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e6      	bne.n	800b584 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5ca:	bf00      	nop
 800b5cc:	3754      	adds	r7, #84	@ 0x54
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b085      	sub	sp, #20
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <HAL_UARTEx_DisableFifoMode+0x16>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e027      	b.n	800b63c <HAL_UARTEx_DisableFifoMode+0x66>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2224      	movs	r2, #36	@ 0x24
 800b5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0201 	bic.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b61a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d101      	bne.n	800b660 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b65c:	2302      	movs	r3, #2
 800b65e:	e02d      	b.n	800b6bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2224      	movs	r2, #36	@ 0x24
 800b66c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0201 	bic.w	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f84f 	bl	800b740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d101      	bne.n	800b6dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e02d      	b.n	800b738 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2224      	movs	r2, #36	@ 0x24
 800b6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	430a      	orrs	r2, r1
 800b716:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f811 	bl	800b740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2220      	movs	r2, #32
 800b72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d108      	bne.n	800b762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b760:	e031      	b.n	800b7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b762:	2308      	movs	r3, #8
 800b764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b766:	2308      	movs	r3, #8
 800b768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	0e5b      	lsrs	r3, r3, #25
 800b772:	b2db      	uxtb	r3, r3
 800b774:	f003 0307 	and.w	r3, r3, #7
 800b778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	0f5b      	lsrs	r3, r3, #29
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	7b3a      	ldrb	r2, [r7, #12]
 800b78e:	4911      	ldr	r1, [pc, #68]	@ (800b7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b790:	5c8a      	ldrb	r2, [r1, r2]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b796:	7b3a      	ldrb	r2, [r7, #12]
 800b798:	490f      	ldr	r1, [pc, #60]	@ (800b7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	7b7a      	ldrb	r2, [r7, #13]
 800b7ac:	4909      	ldr	r1, [pc, #36]	@ (800b7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ae:	5c8a      	ldrb	r2, [r1, r2]
 800b7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7b4:	7b7a      	ldrb	r2, [r7, #13]
 800b7b6:	4908      	ldr	r1, [pc, #32]	@ (800b7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b7c6:	bf00      	nop
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	0801084c 	.word	0x0801084c
 800b7d8:	08010854 	.word	0x08010854

0800b7dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b7e4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b7e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	401a      	ands	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d106      	bne.n	800b826 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	641a      	str	r2, [r3, #64]	@ 0x40
 800b824:	e00b      	b.n	800b83e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b826:	78fb      	ldrb	r3, [r7, #3]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d106      	bne.n	800b83a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	641a      	str	r2, [r3, #64]	@ 0x40
 800b838:	e001      	b.n	800b83e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b84c:	b084      	sub	sp, #16
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	f107 001c 	add.w	r0, r7, #28
 800b85a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b868:	f023 0201 	bic.w	r2, r3, #1
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff ffc7 	bl	800b806 <USB_SetCurrentMode>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b882:	7bfb      	ldrb	r3, [r7, #15]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b88e:	b004      	add	sp, #16
 800b890:	4770      	bx	lr

0800b892 <atoi>:
 800b892:	220a      	movs	r2, #10
 800b894:	2100      	movs	r1, #0
 800b896:	f000 b87d 	b.w	800b994 <strtol>
	...

0800b89c <_strtol_l.constprop.0>:
 800b89c:	2b24      	cmp	r3, #36	@ 0x24
 800b89e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a2:	4686      	mov	lr, r0
 800b8a4:	4690      	mov	r8, r2
 800b8a6:	d801      	bhi.n	800b8ac <_strtol_l.constprop.0+0x10>
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d106      	bne.n	800b8ba <_strtol_l.constprop.0+0x1e>
 800b8ac:	f001 f860 	bl	800c970 <__errno>
 800b8b0:	2316      	movs	r3, #22
 800b8b2:	6003      	str	r3, [r0, #0]
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	4833      	ldr	r0, [pc, #204]	@ (800b98c <_strtol_l.constprop.0+0xf0>)
 800b8be:	462a      	mov	r2, r5
 800b8c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8c4:	5d06      	ldrb	r6, [r0, r4]
 800b8c6:	f016 0608 	ands.w	r6, r6, #8
 800b8ca:	d1f8      	bne.n	800b8be <_strtol_l.constprop.0+0x22>
 800b8cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b8ce:	d12d      	bne.n	800b92c <_strtol_l.constprop.0+0x90>
 800b8d0:	782c      	ldrb	r4, [r5, #0]
 800b8d2:	2601      	movs	r6, #1
 800b8d4:	1c95      	adds	r5, r2, #2
 800b8d6:	f033 0210 	bics.w	r2, r3, #16
 800b8da:	d109      	bne.n	800b8f0 <_strtol_l.constprop.0+0x54>
 800b8dc:	2c30      	cmp	r4, #48	@ 0x30
 800b8de:	d12a      	bne.n	800b936 <_strtol_l.constprop.0+0x9a>
 800b8e0:	782a      	ldrb	r2, [r5, #0]
 800b8e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8e6:	2a58      	cmp	r2, #88	@ 0x58
 800b8e8:	d125      	bne.n	800b936 <_strtol_l.constprop.0+0x9a>
 800b8ea:	786c      	ldrb	r4, [r5, #1]
 800b8ec:	2310      	movs	r3, #16
 800b8ee:	3502      	adds	r5, #2
 800b8f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	fbbc f9f3 	udiv	r9, ip, r3
 800b900:	fb03 ca19 	mls	sl, r3, r9, ip
 800b904:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b908:	2f09      	cmp	r7, #9
 800b90a:	d81b      	bhi.n	800b944 <_strtol_l.constprop.0+0xa8>
 800b90c:	463c      	mov	r4, r7
 800b90e:	42a3      	cmp	r3, r4
 800b910:	dd27      	ble.n	800b962 <_strtol_l.constprop.0+0xc6>
 800b912:	1c57      	adds	r7, r2, #1
 800b914:	d007      	beq.n	800b926 <_strtol_l.constprop.0+0x8a>
 800b916:	4581      	cmp	r9, r0
 800b918:	d320      	bcc.n	800b95c <_strtol_l.constprop.0+0xc0>
 800b91a:	d101      	bne.n	800b920 <_strtol_l.constprop.0+0x84>
 800b91c:	45a2      	cmp	sl, r4
 800b91e:	db1d      	blt.n	800b95c <_strtol_l.constprop.0+0xc0>
 800b920:	fb00 4003 	mla	r0, r0, r3, r4
 800b924:	2201      	movs	r2, #1
 800b926:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b92a:	e7eb      	b.n	800b904 <_strtol_l.constprop.0+0x68>
 800b92c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b92e:	bf04      	itt	eq
 800b930:	782c      	ldrbeq	r4, [r5, #0]
 800b932:	1c95      	addeq	r5, r2, #2
 800b934:	e7cf      	b.n	800b8d6 <_strtol_l.constprop.0+0x3a>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1da      	bne.n	800b8f0 <_strtol_l.constprop.0+0x54>
 800b93a:	2c30      	cmp	r4, #48	@ 0x30
 800b93c:	bf0c      	ite	eq
 800b93e:	2308      	moveq	r3, #8
 800b940:	230a      	movne	r3, #10
 800b942:	e7d5      	b.n	800b8f0 <_strtol_l.constprop.0+0x54>
 800b944:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b948:	2f19      	cmp	r7, #25
 800b94a:	d801      	bhi.n	800b950 <_strtol_l.constprop.0+0xb4>
 800b94c:	3c37      	subs	r4, #55	@ 0x37
 800b94e:	e7de      	b.n	800b90e <_strtol_l.constprop.0+0x72>
 800b950:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b954:	2f19      	cmp	r7, #25
 800b956:	d804      	bhi.n	800b962 <_strtol_l.constprop.0+0xc6>
 800b958:	3c57      	subs	r4, #87	@ 0x57
 800b95a:	e7d8      	b.n	800b90e <_strtol_l.constprop.0+0x72>
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295
 800b960:	e7e1      	b.n	800b926 <_strtol_l.constprop.0+0x8a>
 800b962:	1c53      	adds	r3, r2, #1
 800b964:	d108      	bne.n	800b978 <_strtol_l.constprop.0+0xdc>
 800b966:	2322      	movs	r3, #34	@ 0x22
 800b968:	4660      	mov	r0, ip
 800b96a:	f8ce 3000 	str.w	r3, [lr]
 800b96e:	f1b8 0f00 	cmp.w	r8, #0
 800b972:	d0a0      	beq.n	800b8b6 <_strtol_l.constprop.0+0x1a>
 800b974:	1e69      	subs	r1, r5, #1
 800b976:	e006      	b.n	800b986 <_strtol_l.constprop.0+0xea>
 800b978:	b106      	cbz	r6, 800b97c <_strtol_l.constprop.0+0xe0>
 800b97a:	4240      	negs	r0, r0
 800b97c:	f1b8 0f00 	cmp.w	r8, #0
 800b980:	d099      	beq.n	800b8b6 <_strtol_l.constprop.0+0x1a>
 800b982:	2a00      	cmp	r2, #0
 800b984:	d1f6      	bne.n	800b974 <_strtol_l.constprop.0+0xd8>
 800b986:	f8c8 1000 	str.w	r1, [r8]
 800b98a:	e794      	b.n	800b8b6 <_strtol_l.constprop.0+0x1a>
 800b98c:	0801085d 	.word	0x0801085d

0800b990 <_strtol_r>:
 800b990:	f7ff bf84 	b.w	800b89c <_strtol_l.constprop.0>

0800b994 <strtol>:
 800b994:	4613      	mov	r3, r2
 800b996:	460a      	mov	r2, r1
 800b998:	4601      	mov	r1, r0
 800b99a:	4802      	ldr	r0, [pc, #8]	@ (800b9a4 <strtol+0x10>)
 800b99c:	6800      	ldr	r0, [r0, #0]
 800b99e:	f7ff bf7d 	b.w	800b89c <_strtol_l.constprop.0>
 800b9a2:	bf00      	nop
 800b9a4:	20000034 	.word	0x20000034

0800b9a8 <__cvt>:
 800b9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ac:	ec57 6b10 	vmov	r6, r7, d0
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	bfb4      	ite	lt
 800b9ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b9be:	2300      	movge	r3, #0
 800b9c0:	4691      	mov	r9, r2
 800b9c2:	bfbf      	itttt	lt
 800b9c4:	4632      	movlt	r2, r6
 800b9c6:	461f      	movlt	r7, r3
 800b9c8:	232d      	movlt	r3, #45	@ 0x2d
 800b9ca:	4616      	movlt	r6, r2
 800b9cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b9d0:	700b      	strb	r3, [r1, #0]
 800b9d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9d4:	f023 0820 	bic.w	r8, r3, #32
 800b9d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9dc:	d005      	beq.n	800b9ea <__cvt+0x42>
 800b9de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9e2:	d100      	bne.n	800b9e6 <__cvt+0x3e>
 800b9e4:	3401      	adds	r4, #1
 800b9e6:	2102      	movs	r1, #2
 800b9e8:	e000      	b.n	800b9ec <__cvt+0x44>
 800b9ea:	2103      	movs	r1, #3
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	ab02      	add	r3, sp, #8
 800b9f4:	ec47 6b10 	vmov	d0, r6, r7
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4653      	mov	r3, sl
 800b9fc:	f001 f894 	bl	800cb28 <_dtoa_r>
 800ba00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba04:	4605      	mov	r5, r0
 800ba06:	d119      	bne.n	800ba3c <__cvt+0x94>
 800ba08:	f019 0f01 	tst.w	r9, #1
 800ba0c:	d00e      	beq.n	800ba2c <__cvt+0x84>
 800ba0e:	eb00 0904 	add.w	r9, r0, r4
 800ba12:	2200      	movs	r2, #0
 800ba14:	2300      	movs	r3, #0
 800ba16:	4630      	mov	r0, r6
 800ba18:	4639      	mov	r1, r7
 800ba1a:	f7f5 f869 	bl	8000af0 <__aeabi_dcmpeq>
 800ba1e:	b108      	cbz	r0, 800ba24 <__cvt+0x7c>
 800ba20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba24:	2230      	movs	r2, #48	@ 0x30
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	454b      	cmp	r3, r9
 800ba2a:	d31e      	bcc.n	800ba6a <__cvt+0xc2>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	4628      	mov	r0, r5
 800ba30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba32:	1b5b      	subs	r3, r3, r5
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	b004      	add	sp, #16
 800ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba40:	eb00 0904 	add.w	r9, r0, r4
 800ba44:	d1e5      	bne.n	800ba12 <__cvt+0x6a>
 800ba46:	7803      	ldrb	r3, [r0, #0]
 800ba48:	2b30      	cmp	r3, #48	@ 0x30
 800ba4a:	d10a      	bne.n	800ba62 <__cvt+0xba>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f5 f84c 	bl	8000af0 <__aeabi_dcmpeq>
 800ba58:	b918      	cbnz	r0, 800ba62 <__cvt+0xba>
 800ba5a:	f1c4 0401 	rsb	r4, r4, #1
 800ba5e:	f8ca 4000 	str.w	r4, [sl]
 800ba62:	f8da 3000 	ldr.w	r3, [sl]
 800ba66:	4499      	add	r9, r3
 800ba68:	e7d3      	b.n	800ba12 <__cvt+0x6a>
 800ba6a:	1c59      	adds	r1, r3, #1
 800ba6c:	9103      	str	r1, [sp, #12]
 800ba6e:	701a      	strb	r2, [r3, #0]
 800ba70:	e7d9      	b.n	800ba26 <__cvt+0x7e>

0800ba72 <__exponent>:
 800ba72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba74:	2900      	cmp	r1, #0
 800ba76:	7002      	strb	r2, [r0, #0]
 800ba78:	bfba      	itte	lt
 800ba7a:	4249      	neglt	r1, r1
 800ba7c:	232d      	movlt	r3, #45	@ 0x2d
 800ba7e:	232b      	movge	r3, #43	@ 0x2b
 800ba80:	2909      	cmp	r1, #9
 800ba82:	7043      	strb	r3, [r0, #1]
 800ba84:	dd28      	ble.n	800bad8 <__exponent+0x66>
 800ba86:	f10d 0307 	add.w	r3, sp, #7
 800ba8a:	270a      	movs	r7, #10
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	461a      	mov	r2, r3
 800ba90:	3b01      	subs	r3, #1
 800ba92:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba96:	fb07 1416 	mls	r4, r7, r6, r1
 800ba9a:	3430      	adds	r4, #48	@ 0x30
 800ba9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800baa0:	460c      	mov	r4, r1
 800baa2:	4631      	mov	r1, r6
 800baa4:	2c63      	cmp	r4, #99	@ 0x63
 800baa6:	dcf2      	bgt.n	800ba8e <__exponent+0x1c>
 800baa8:	3130      	adds	r1, #48	@ 0x30
 800baaa:	1e94      	subs	r4, r2, #2
 800baac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bab0:	1c41      	adds	r1, r0, #1
 800bab2:	4623      	mov	r3, r4
 800bab4:	42ab      	cmp	r3, r5
 800bab6:	d30a      	bcc.n	800bace <__exponent+0x5c>
 800bab8:	f10d 0309 	add.w	r3, sp, #9
 800babc:	1a9b      	subs	r3, r3, r2
 800babe:	42ac      	cmp	r4, r5
 800bac0:	bf88      	it	hi
 800bac2:	2300      	movhi	r3, #0
 800bac4:	3302      	adds	r3, #2
 800bac6:	4403      	add	r3, r0
 800bac8:	1a18      	subs	r0, r3, r0
 800baca:	b003      	add	sp, #12
 800bacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bace:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bad2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bad6:	e7ed      	b.n	800bab4 <__exponent+0x42>
 800bad8:	2330      	movs	r3, #48	@ 0x30
 800bada:	3130      	adds	r1, #48	@ 0x30
 800badc:	7083      	strb	r3, [r0, #2]
 800bade:	1d03      	adds	r3, r0, #4
 800bae0:	70c1      	strb	r1, [r0, #3]
 800bae2:	e7f1      	b.n	800bac8 <__exponent+0x56>

0800bae4 <_printf_float>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	b08d      	sub	sp, #52	@ 0x34
 800baea:	460c      	mov	r4, r1
 800baec:	4616      	mov	r6, r2
 800baee:	461f      	mov	r7, r3
 800baf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800baf4:	4605      	mov	r5, r0
 800baf6:	f000 fef1 	bl	800c8dc <_localeconv_r>
 800bafa:	6803      	ldr	r3, [r0, #0]
 800bafc:	4618      	mov	r0, r3
 800bafe:	9304      	str	r3, [sp, #16]
 800bb00:	f7f4 fbca 	bl	8000298 <strlen>
 800bb04:	2300      	movs	r3, #0
 800bb06:	9005      	str	r0, [sp, #20]
 800bb08:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb0e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb12:	3307      	adds	r3, #7
 800bb14:	f8d4 b000 	ldr.w	fp, [r4]
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	f103 0208 	add.w	r2, r3, #8
 800bb20:	f8c8 2000 	str.w	r2, [r8]
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb30:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb34:	9307      	str	r3, [sp, #28]
 800bb36:	4b9d      	ldr	r3, [pc, #628]	@ (800bdac <_printf_float+0x2c8>)
 800bb38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb40:	f7f5 f808 	bl	8000b54 <__aeabi_dcmpun>
 800bb44:	bb70      	cbnz	r0, 800bba4 <_printf_float+0xc0>
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	4b98      	ldr	r3, [pc, #608]	@ (800bdac <_printf_float+0x2c8>)
 800bb4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb50:	f7f4 ffe2 	bl	8000b18 <__aeabi_dcmple>
 800bb54:	bb30      	cbnz	r0, 800bba4 <_printf_float+0xc0>
 800bb56:	2200      	movs	r2, #0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	f7f4 ffd1 	bl	8000b04 <__aeabi_dcmplt>
 800bb62:	b110      	cbz	r0, 800bb6a <_printf_float+0x86>
 800bb64:	232d      	movs	r3, #45	@ 0x2d
 800bb66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb6a:	4a91      	ldr	r2, [pc, #580]	@ (800bdb0 <_printf_float+0x2cc>)
 800bb6c:	4b91      	ldr	r3, [pc, #580]	@ (800bdb4 <_printf_float+0x2d0>)
 800bb6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb72:	bf94      	ite	ls
 800bb74:	4690      	movls	r8, r2
 800bb76:	4698      	movhi	r8, r3
 800bb78:	2303      	movs	r3, #3
 800bb7a:	f04f 0900 	mov.w	r9, #0
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	f02b 0304 	bic.w	r3, fp, #4
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	4633      	mov	r3, r6
 800bb88:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	9700      	str	r7, [sp, #0]
 800bb90:	f000 f9d2 	bl	800bf38 <_printf_common>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f040 808d 	bne.w	800bcb4 <_printf_float+0x1d0>
 800bb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9e:	b00d      	add	sp, #52	@ 0x34
 800bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba4:	4642      	mov	r2, r8
 800bba6:	464b      	mov	r3, r9
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4649      	mov	r1, r9
 800bbac:	f7f4 ffd2 	bl	8000b54 <__aeabi_dcmpun>
 800bbb0:	b140      	cbz	r0, 800bbc4 <_printf_float+0xe0>
 800bbb2:	464b      	mov	r3, r9
 800bbb4:	4a80      	ldr	r2, [pc, #512]	@ (800bdb8 <_printf_float+0x2d4>)
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	bfbc      	itt	lt
 800bbba:	232d      	movlt	r3, #45	@ 0x2d
 800bbbc:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbc0:	4b7e      	ldr	r3, [pc, #504]	@ (800bdbc <_printf_float+0x2d8>)
 800bbc2:	e7d4      	b.n	800bb6e <_printf_float+0x8a>
 800bbc4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bbc8:	6863      	ldr	r3, [r4, #4]
 800bbca:	9206      	str	r2, [sp, #24]
 800bbcc:	1c5a      	adds	r2, r3, #1
 800bbce:	d13b      	bne.n	800bc48 <_printf_float+0x164>
 800bbd0:	2306      	movs	r3, #6
 800bbd2:	6063      	str	r3, [r4, #4]
 800bbd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4628      	mov	r0, r5
 800bbdc:	6022      	str	r2, [r4, #0]
 800bbde:	9303      	str	r3, [sp, #12]
 800bbe0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbe2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbe6:	ab09      	add	r3, sp, #36	@ 0x24
 800bbe8:	ec49 8b10 	vmov	d0, r8, r9
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbf2:	6861      	ldr	r1, [r4, #4]
 800bbf4:	f7ff fed8 	bl	800b9a8 <__cvt>
 800bbf8:	9b06      	ldr	r3, [sp, #24]
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbfe:	2b47      	cmp	r3, #71	@ 0x47
 800bc00:	d129      	bne.n	800bc56 <_printf_float+0x172>
 800bc02:	1cc8      	adds	r0, r1, #3
 800bc04:	db02      	blt.n	800bc0c <_printf_float+0x128>
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	dd41      	ble.n	800bc90 <_printf_float+0x1ac>
 800bc0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc10:	fa5f fa8a 	uxtb.w	sl, sl
 800bc14:	3901      	subs	r1, #1
 800bc16:	4652      	mov	r2, sl
 800bc18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc1e:	f7ff ff28 	bl	800ba72 <__exponent>
 800bc22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc24:	4681      	mov	r9, r0
 800bc26:	1813      	adds	r3, r2, r0
 800bc28:	2a01      	cmp	r2, #1
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	dc02      	bgt.n	800bc34 <_printf_float+0x150>
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	07d2      	lsls	r2, r2, #31
 800bc32:	d501      	bpl.n	800bc38 <_printf_float+0x154>
 800bc34:	3301      	adds	r3, #1
 800bc36:	6123      	str	r3, [r4, #16]
 800bc38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0a2      	beq.n	800bb86 <_printf_float+0xa2>
 800bc40:	232d      	movs	r3, #45	@ 0x2d
 800bc42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc46:	e79e      	b.n	800bb86 <_printf_float+0xa2>
 800bc48:	9a06      	ldr	r2, [sp, #24]
 800bc4a:	2a47      	cmp	r2, #71	@ 0x47
 800bc4c:	d1c2      	bne.n	800bbd4 <_printf_float+0xf0>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1c0      	bne.n	800bbd4 <_printf_float+0xf0>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e7bd      	b.n	800bbd2 <_printf_float+0xee>
 800bc56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc5a:	d9db      	bls.n	800bc14 <_printf_float+0x130>
 800bc5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc60:	d118      	bne.n	800bc94 <_printf_float+0x1b0>
 800bc62:	2900      	cmp	r1, #0
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	dd0b      	ble.n	800bc80 <_printf_float+0x19c>
 800bc68:	6121      	str	r1, [r4, #16]
 800bc6a:	b913      	cbnz	r3, 800bc72 <_printf_float+0x18e>
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	07d0      	lsls	r0, r2, #31
 800bc70:	d502      	bpl.n	800bc78 <_printf_float+0x194>
 800bc72:	3301      	adds	r3, #1
 800bc74:	440b      	add	r3, r1
 800bc76:	6123      	str	r3, [r4, #16]
 800bc78:	f04f 0900 	mov.w	r9, #0
 800bc7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc7e:	e7db      	b.n	800bc38 <_printf_float+0x154>
 800bc80:	b913      	cbnz	r3, 800bc88 <_printf_float+0x1a4>
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	07d2      	lsls	r2, r2, #31
 800bc86:	d501      	bpl.n	800bc8c <_printf_float+0x1a8>
 800bc88:	3302      	adds	r3, #2
 800bc8a:	e7f4      	b.n	800bc76 <_printf_float+0x192>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e7f2      	b.n	800bc76 <_printf_float+0x192>
 800bc90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc96:	4299      	cmp	r1, r3
 800bc98:	db05      	blt.n	800bca6 <_printf_float+0x1c2>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	6121      	str	r1, [r4, #16]
 800bc9e:	07d8      	lsls	r0, r3, #31
 800bca0:	d5ea      	bpl.n	800bc78 <_printf_float+0x194>
 800bca2:	1c4b      	adds	r3, r1, #1
 800bca4:	e7e7      	b.n	800bc76 <_printf_float+0x192>
 800bca6:	2900      	cmp	r1, #0
 800bca8:	bfd4      	ite	le
 800bcaa:	f1c1 0202 	rsble	r2, r1, #2
 800bcae:	2201      	movgt	r2, #1
 800bcb0:	4413      	add	r3, r2
 800bcb2:	e7e0      	b.n	800bc76 <_printf_float+0x192>
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	055a      	lsls	r2, r3, #21
 800bcb8:	d407      	bmi.n	800bcca <_printf_float+0x1e6>
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d12b      	bne.n	800bd20 <_printf_float+0x23c>
 800bcc8:	e767      	b.n	800bb9a <_printf_float+0xb6>
 800bcca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcce:	f240 80dd 	bls.w	800be8c <_printf_float+0x3a8>
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcda:	f7f4 ff09 	bl	8000af0 <__aeabi_dcmpeq>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d033      	beq.n	800bd4a <_printf_float+0x266>
 800bce2:	2301      	movs	r3, #1
 800bce4:	4a36      	ldr	r2, [pc, #216]	@ (800bdc0 <_printf_float+0x2dc>)
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	f43f af54 	beq.w	800bb9a <_printf_float+0xb6>
 800bcf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcf6:	4543      	cmp	r3, r8
 800bcf8:	db02      	blt.n	800bd00 <_printf_float+0x21c>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	07d8      	lsls	r0, r3, #31
 800bcfe:	d50f      	bpl.n	800bd20 <_printf_float+0x23c>
 800bd00:	4631      	mov	r1, r6
 800bd02:	4628      	mov	r0, r5
 800bd04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f af45 	beq.w	800bb9a <_printf_float+0xb6>
 800bd10:	f04f 0900 	mov.w	r9, #0
 800bd14:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd18:	f104 0a1a 	add.w	sl, r4, #26
 800bd1c:	45c8      	cmp	r8, r9
 800bd1e:	dc09      	bgt.n	800bd34 <_printf_float+0x250>
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	079b      	lsls	r3, r3, #30
 800bd24:	f100 8103 	bmi.w	800bf2e <_printf_float+0x44a>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e734      	b.n	800bb9e <_printf_float+0xba>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4652      	mov	r2, sl
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f43f af2b 	beq.w	800bb9a <_printf_float+0xb6>
 800bd44:	f109 0901 	add.w	r9, r9, #1
 800bd48:	e7e8      	b.n	800bd1c <_printf_float+0x238>
 800bd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dc39      	bgt.n	800bdc4 <_printf_float+0x2e0>
 800bd50:	2301      	movs	r3, #1
 800bd52:	4a1b      	ldr	r2, [pc, #108]	@ (800bdc0 <_printf_float+0x2dc>)
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f af1d 	beq.w	800bb9a <_printf_float+0xb6>
 800bd60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd64:	ea59 0303 	orrs.w	r3, r9, r3
 800bd68:	d102      	bne.n	800bd70 <_printf_float+0x28c>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	07d9      	lsls	r1, r3, #31
 800bd6e:	d5d7      	bpl.n	800bd20 <_printf_float+0x23c>
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd78:	47b8      	blx	r7
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	f43f af0d 	beq.w	800bb9a <_printf_float+0xb6>
 800bd80:	f04f 0a00 	mov.w	sl, #0
 800bd84:	f104 0b1a 	add.w	fp, r4, #26
 800bd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd8a:	425b      	negs	r3, r3
 800bd8c:	4553      	cmp	r3, sl
 800bd8e:	dc01      	bgt.n	800bd94 <_printf_float+0x2b0>
 800bd90:	464b      	mov	r3, r9
 800bd92:	e793      	b.n	800bcbc <_printf_float+0x1d8>
 800bd94:	2301      	movs	r3, #1
 800bd96:	465a      	mov	r2, fp
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	47b8      	blx	r7
 800bd9e:	3001      	adds	r0, #1
 800bda0:	f43f aefb 	beq.w	800bb9a <_printf_float+0xb6>
 800bda4:	f10a 0a01 	add.w	sl, sl, #1
 800bda8:	e7ee      	b.n	800bd88 <_printf_float+0x2a4>
 800bdaa:	bf00      	nop
 800bdac:	7fefffff 	.word	0x7fefffff
 800bdb0:	0801095d 	.word	0x0801095d
 800bdb4:	08010961 	.word	0x08010961
 800bdb8:	08010965 	.word	0x08010965
 800bdbc:	08010969 	.word	0x08010969
 800bdc0:	0801096d 	.word	0x0801096d
 800bdc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdca:	4553      	cmp	r3, sl
 800bdcc:	bfa8      	it	ge
 800bdce:	4653      	movge	r3, sl
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	4699      	mov	r9, r3
 800bdd4:	dc36      	bgt.n	800be44 <_printf_float+0x360>
 800bdd6:	f04f 0b00 	mov.w	fp, #0
 800bdda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdde:	f104 021a 	add.w	r2, r4, #26
 800bde2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bde4:	9306      	str	r3, [sp, #24]
 800bde6:	eba3 0309 	sub.w	r3, r3, r9
 800bdea:	455b      	cmp	r3, fp
 800bdec:	dc31      	bgt.n	800be52 <_printf_float+0x36e>
 800bdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf0:	459a      	cmp	sl, r3
 800bdf2:	dc3a      	bgt.n	800be6a <_printf_float+0x386>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	07da      	lsls	r2, r3, #31
 800bdf8:	d437      	bmi.n	800be6a <_printf_float+0x386>
 800bdfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdfc:	ebaa 0903 	sub.w	r9, sl, r3
 800be00:	9b06      	ldr	r3, [sp, #24]
 800be02:	ebaa 0303 	sub.w	r3, sl, r3
 800be06:	4599      	cmp	r9, r3
 800be08:	bfa8      	it	ge
 800be0a:	4699      	movge	r9, r3
 800be0c:	f1b9 0f00 	cmp.w	r9, #0
 800be10:	dc33      	bgt.n	800be7a <_printf_float+0x396>
 800be12:	f04f 0800 	mov.w	r8, #0
 800be16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be1a:	f104 0b1a 	add.w	fp, r4, #26
 800be1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be20:	ebaa 0303 	sub.w	r3, sl, r3
 800be24:	eba3 0309 	sub.w	r3, r3, r9
 800be28:	4543      	cmp	r3, r8
 800be2a:	f77f af79 	ble.w	800bd20 <_printf_float+0x23c>
 800be2e:	2301      	movs	r3, #1
 800be30:	465a      	mov	r2, fp
 800be32:	4631      	mov	r1, r6
 800be34:	4628      	mov	r0, r5
 800be36:	47b8      	blx	r7
 800be38:	3001      	adds	r0, #1
 800be3a:	f43f aeae 	beq.w	800bb9a <_printf_float+0xb6>
 800be3e:	f108 0801 	add.w	r8, r8, #1
 800be42:	e7ec      	b.n	800be1e <_printf_float+0x33a>
 800be44:	4642      	mov	r2, r8
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	d1c2      	bne.n	800bdd6 <_printf_float+0x2f2>
 800be50:	e6a3      	b.n	800bb9a <_printf_float+0xb6>
 800be52:	2301      	movs	r3, #1
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	9206      	str	r2, [sp, #24]
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae9c 	beq.w	800bb9a <_printf_float+0xb6>
 800be62:	f10b 0b01 	add.w	fp, fp, #1
 800be66:	9a06      	ldr	r2, [sp, #24]
 800be68:	e7bb      	b.n	800bde2 <_printf_float+0x2fe>
 800be6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	d1c0      	bne.n	800bdfa <_printf_float+0x316>
 800be78:	e68f      	b.n	800bb9a <_printf_float+0xb6>
 800be7a:	9a06      	ldr	r2, [sp, #24]
 800be7c:	464b      	mov	r3, r9
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	4442      	add	r2, r8
 800be84:	47b8      	blx	r7
 800be86:	3001      	adds	r0, #1
 800be88:	d1c3      	bne.n	800be12 <_printf_float+0x32e>
 800be8a:	e686      	b.n	800bb9a <_printf_float+0xb6>
 800be8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be90:	f1ba 0f01 	cmp.w	sl, #1
 800be94:	dc01      	bgt.n	800be9a <_printf_float+0x3b6>
 800be96:	07db      	lsls	r3, r3, #31
 800be98:	d536      	bpl.n	800bf08 <_printf_float+0x424>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4642      	mov	r2, r8
 800be9e:	4631      	mov	r1, r6
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b8      	blx	r7
 800bea4:	3001      	adds	r0, #1
 800bea6:	f43f ae78 	beq.w	800bb9a <_printf_float+0xb6>
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb2:	47b8      	blx	r7
 800beb4:	3001      	adds	r0, #1
 800beb6:	f43f ae70 	beq.w	800bb9a <_printf_float+0xb6>
 800beba:	2200      	movs	r2, #0
 800bebc:	2300      	movs	r3, #0
 800bebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bec6:	f7f4 fe13 	bl	8000af0 <__aeabi_dcmpeq>
 800beca:	b9c0      	cbnz	r0, 800befe <_printf_float+0x41a>
 800becc:	4653      	mov	r3, sl
 800bece:	f108 0201 	add.w	r2, r8, #1
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	d10c      	bne.n	800bef6 <_printf_float+0x412>
 800bedc:	e65d      	b.n	800bb9a <_printf_float+0xb6>
 800bede:	2301      	movs	r3, #1
 800bee0:	465a      	mov	r2, fp
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	f43f ae56 	beq.w	800bb9a <_printf_float+0xb6>
 800beee:	f108 0801 	add.w	r8, r8, #1
 800bef2:	45d0      	cmp	r8, sl
 800bef4:	dbf3      	blt.n	800bede <_printf_float+0x3fa>
 800bef6:	464b      	mov	r3, r9
 800bef8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800befc:	e6df      	b.n	800bcbe <_printf_float+0x1da>
 800befe:	f04f 0800 	mov.w	r8, #0
 800bf02:	f104 0b1a 	add.w	fp, r4, #26
 800bf06:	e7f4      	b.n	800bef2 <_printf_float+0x40e>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	e7e1      	b.n	800bed2 <_printf_float+0x3ee>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	464a      	mov	r2, r9
 800bf12:	4631      	mov	r1, r6
 800bf14:	4628      	mov	r0, r5
 800bf16:	47b8      	blx	r7
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f43f ae3e 	beq.w	800bb9a <_printf_float+0xb6>
 800bf1e:	f108 0801 	add.w	r8, r8, #1
 800bf22:	68e3      	ldr	r3, [r4, #12]
 800bf24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf26:	1a5b      	subs	r3, r3, r1
 800bf28:	4543      	cmp	r3, r8
 800bf2a:	dcf0      	bgt.n	800bf0e <_printf_float+0x42a>
 800bf2c:	e6fc      	b.n	800bd28 <_printf_float+0x244>
 800bf2e:	f04f 0800 	mov.w	r8, #0
 800bf32:	f104 0919 	add.w	r9, r4, #25
 800bf36:	e7f4      	b.n	800bf22 <_printf_float+0x43e>

0800bf38 <_printf_common>:
 800bf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	4616      	mov	r6, r2
 800bf3e:	4698      	mov	r8, r3
 800bf40:	688a      	ldr	r2, [r1, #8]
 800bf42:	4607      	mov	r7, r0
 800bf44:	690b      	ldr	r3, [r1, #16]
 800bf46:	460c      	mov	r4, r1
 800bf48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	bfb8      	it	lt
 800bf50:	4613      	movlt	r3, r2
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf58:	b10a      	cbz	r2, 800bf5e <_printf_common+0x26>
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	6033      	str	r3, [r6, #0]
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	0699      	lsls	r1, r3, #26
 800bf62:	bf42      	ittt	mi
 800bf64:	6833      	ldrmi	r3, [r6, #0]
 800bf66:	3302      	addmi	r3, #2
 800bf68:	6033      	strmi	r3, [r6, #0]
 800bf6a:	6825      	ldr	r5, [r4, #0]
 800bf6c:	f015 0506 	ands.w	r5, r5, #6
 800bf70:	d106      	bne.n	800bf80 <_printf_common+0x48>
 800bf72:	f104 0a19 	add.w	sl, r4, #25
 800bf76:	68e3      	ldr	r3, [r4, #12]
 800bf78:	6832      	ldr	r2, [r6, #0]
 800bf7a:	1a9b      	subs	r3, r3, r2
 800bf7c:	42ab      	cmp	r3, r5
 800bf7e:	dc2b      	bgt.n	800bfd8 <_printf_common+0xa0>
 800bf80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	3b00      	subs	r3, #0
 800bf88:	bf18      	it	ne
 800bf8a:	2301      	movne	r3, #1
 800bf8c:	0692      	lsls	r2, r2, #26
 800bf8e:	d430      	bmi.n	800bff2 <_printf_common+0xba>
 800bf90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf94:	4641      	mov	r1, r8
 800bf96:	4638      	mov	r0, r7
 800bf98:	47c8      	blx	r9
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d023      	beq.n	800bfe6 <_printf_common+0xae>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	341a      	adds	r4, #26
 800bfa2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bfa6:	f003 0306 	and.w	r3, r3, #6
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	bf0a      	itet	eq
 800bfae:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bfb2:	2500      	movne	r5, #0
 800bfb4:	6833      	ldreq	r3, [r6, #0]
 800bfb6:	f04f 0600 	mov.w	r6, #0
 800bfba:	bf08      	it	eq
 800bfbc:	1aed      	subeq	r5, r5, r3
 800bfbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bfc2:	bf08      	it	eq
 800bfc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	bfc4      	itt	gt
 800bfcc:	1a9b      	subgt	r3, r3, r2
 800bfce:	18ed      	addgt	r5, r5, r3
 800bfd0:	42b5      	cmp	r5, r6
 800bfd2:	d11a      	bne.n	800c00a <_printf_common+0xd2>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	e008      	b.n	800bfea <_printf_common+0xb2>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4652      	mov	r2, sl
 800bfdc:	4641      	mov	r1, r8
 800bfde:	4638      	mov	r0, r7
 800bfe0:	47c8      	blx	r9
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d103      	bne.n	800bfee <_printf_common+0xb6>
 800bfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfee:	3501      	adds	r5, #1
 800bff0:	e7c1      	b.n	800bf76 <_printf_common+0x3e>
 800bff2:	18e1      	adds	r1, r4, r3
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	2030      	movs	r0, #48	@ 0x30
 800bff8:	3302      	adds	r3, #2
 800bffa:	4422      	add	r2, r4
 800bffc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c008:	e7c2      	b.n	800bf90 <_printf_common+0x58>
 800c00a:	2301      	movs	r3, #1
 800c00c:	4622      	mov	r2, r4
 800c00e:	4641      	mov	r1, r8
 800c010:	4638      	mov	r0, r7
 800c012:	47c8      	blx	r9
 800c014:	3001      	adds	r0, #1
 800c016:	d0e6      	beq.n	800bfe6 <_printf_common+0xae>
 800c018:	3601      	adds	r6, #1
 800c01a:	e7d9      	b.n	800bfd0 <_printf_common+0x98>

0800c01c <_printf_i>:
 800c01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	7e0f      	ldrb	r7, [r1, #24]
 800c022:	4691      	mov	r9, r2
 800c024:	4680      	mov	r8, r0
 800c026:	460c      	mov	r4, r1
 800c028:	2f78      	cmp	r7, #120	@ 0x78
 800c02a:	469a      	mov	sl, r3
 800c02c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c02e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c032:	d807      	bhi.n	800c044 <_printf_i+0x28>
 800c034:	2f62      	cmp	r7, #98	@ 0x62
 800c036:	d80a      	bhi.n	800c04e <_printf_i+0x32>
 800c038:	2f00      	cmp	r7, #0
 800c03a:	f000 80d2 	beq.w	800c1e2 <_printf_i+0x1c6>
 800c03e:	2f58      	cmp	r7, #88	@ 0x58
 800c040:	f000 80b9 	beq.w	800c1b6 <_printf_i+0x19a>
 800c044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c04c:	e03a      	b.n	800c0c4 <_printf_i+0xa8>
 800c04e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c052:	2b15      	cmp	r3, #21
 800c054:	d8f6      	bhi.n	800c044 <_printf_i+0x28>
 800c056:	a101      	add	r1, pc, #4	@ (adr r1, 800c05c <_printf_i+0x40>)
 800c058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c05c:	0800c0b5 	.word	0x0800c0b5
 800c060:	0800c0c9 	.word	0x0800c0c9
 800c064:	0800c045 	.word	0x0800c045
 800c068:	0800c045 	.word	0x0800c045
 800c06c:	0800c045 	.word	0x0800c045
 800c070:	0800c045 	.word	0x0800c045
 800c074:	0800c0c9 	.word	0x0800c0c9
 800c078:	0800c045 	.word	0x0800c045
 800c07c:	0800c045 	.word	0x0800c045
 800c080:	0800c045 	.word	0x0800c045
 800c084:	0800c045 	.word	0x0800c045
 800c088:	0800c1c9 	.word	0x0800c1c9
 800c08c:	0800c0f3 	.word	0x0800c0f3
 800c090:	0800c183 	.word	0x0800c183
 800c094:	0800c045 	.word	0x0800c045
 800c098:	0800c045 	.word	0x0800c045
 800c09c:	0800c1eb 	.word	0x0800c1eb
 800c0a0:	0800c045 	.word	0x0800c045
 800c0a4:	0800c0f3 	.word	0x0800c0f3
 800c0a8:	0800c045 	.word	0x0800c045
 800c0ac:	0800c045 	.word	0x0800c045
 800c0b0:	0800c18b 	.word	0x0800c18b
 800c0b4:	6833      	ldr	r3, [r6, #0]
 800c0b6:	1d1a      	adds	r2, r3, #4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6032      	str	r2, [r6, #0]
 800c0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e09d      	b.n	800c204 <_printf_i+0x1e8>
 800c0c8:	6833      	ldr	r3, [r6, #0]
 800c0ca:	6820      	ldr	r0, [r4, #0]
 800c0cc:	1d19      	adds	r1, r3, #4
 800c0ce:	6031      	str	r1, [r6, #0]
 800c0d0:	0606      	lsls	r6, r0, #24
 800c0d2:	d501      	bpl.n	800c0d8 <_printf_i+0xbc>
 800c0d4:	681d      	ldr	r5, [r3, #0]
 800c0d6:	e003      	b.n	800c0e0 <_printf_i+0xc4>
 800c0d8:	0645      	lsls	r5, r0, #25
 800c0da:	d5fb      	bpl.n	800c0d4 <_printf_i+0xb8>
 800c0dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0e0:	2d00      	cmp	r5, #0
 800c0e2:	da03      	bge.n	800c0ec <_printf_i+0xd0>
 800c0e4:	232d      	movs	r3, #45	@ 0x2d
 800c0e6:	426d      	negs	r5, r5
 800c0e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0ec:	4859      	ldr	r0, [pc, #356]	@ (800c254 <_printf_i+0x238>)
 800c0ee:	230a      	movs	r3, #10
 800c0f0:	e011      	b.n	800c116 <_printf_i+0xfa>
 800c0f2:	6821      	ldr	r1, [r4, #0]
 800c0f4:	6833      	ldr	r3, [r6, #0]
 800c0f6:	0608      	lsls	r0, r1, #24
 800c0f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0fc:	d402      	bmi.n	800c104 <_printf_i+0xe8>
 800c0fe:	0649      	lsls	r1, r1, #25
 800c100:	bf48      	it	mi
 800c102:	b2ad      	uxthmi	r5, r5
 800c104:	2f6f      	cmp	r7, #111	@ 0x6f
 800c106:	6033      	str	r3, [r6, #0]
 800c108:	4852      	ldr	r0, [pc, #328]	@ (800c254 <_printf_i+0x238>)
 800c10a:	bf14      	ite	ne
 800c10c:	230a      	movne	r3, #10
 800c10e:	2308      	moveq	r3, #8
 800c110:	2100      	movs	r1, #0
 800c112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c116:	6866      	ldr	r6, [r4, #4]
 800c118:	2e00      	cmp	r6, #0
 800c11a:	60a6      	str	r6, [r4, #8]
 800c11c:	bfa2      	ittt	ge
 800c11e:	6821      	ldrge	r1, [r4, #0]
 800c120:	f021 0104 	bicge.w	r1, r1, #4
 800c124:	6021      	strge	r1, [r4, #0]
 800c126:	b90d      	cbnz	r5, 800c12c <_printf_i+0x110>
 800c128:	2e00      	cmp	r6, #0
 800c12a:	d04b      	beq.n	800c1c4 <_printf_i+0x1a8>
 800c12c:	4616      	mov	r6, r2
 800c12e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c132:	fb03 5711 	mls	r7, r3, r1, r5
 800c136:	5dc7      	ldrb	r7, [r0, r7]
 800c138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c13c:	462f      	mov	r7, r5
 800c13e:	460d      	mov	r5, r1
 800c140:	42bb      	cmp	r3, r7
 800c142:	d9f4      	bls.n	800c12e <_printf_i+0x112>
 800c144:	2b08      	cmp	r3, #8
 800c146:	d10b      	bne.n	800c160 <_printf_i+0x144>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	07df      	lsls	r7, r3, #31
 800c14c:	d508      	bpl.n	800c160 <_printf_i+0x144>
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	6861      	ldr	r1, [r4, #4]
 800c152:	4299      	cmp	r1, r3
 800c154:	bfde      	ittt	le
 800c156:	2330      	movle	r3, #48	@ 0x30
 800c158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c15c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c160:	1b92      	subs	r2, r2, r6
 800c162:	6122      	str	r2, [r4, #16]
 800c164:	464b      	mov	r3, r9
 800c166:	aa03      	add	r2, sp, #12
 800c168:	4621      	mov	r1, r4
 800c16a:	4640      	mov	r0, r8
 800c16c:	f8cd a000 	str.w	sl, [sp]
 800c170:	f7ff fee2 	bl	800bf38 <_printf_common>
 800c174:	3001      	adds	r0, #1
 800c176:	d14a      	bne.n	800c20e <_printf_i+0x1f2>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	b004      	add	sp, #16
 800c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	f043 0320 	orr.w	r3, r3, #32
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	2778      	movs	r7, #120	@ 0x78
 800c18c:	4832      	ldr	r0, [pc, #200]	@ (800c258 <_printf_i+0x23c>)
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c194:	061f      	lsls	r7, r3, #24
 800c196:	6831      	ldr	r1, [r6, #0]
 800c198:	f851 5b04 	ldr.w	r5, [r1], #4
 800c19c:	d402      	bmi.n	800c1a4 <_printf_i+0x188>
 800c19e:	065f      	lsls	r7, r3, #25
 800c1a0:	bf48      	it	mi
 800c1a2:	b2ad      	uxthmi	r5, r5
 800c1a4:	6031      	str	r1, [r6, #0]
 800c1a6:	07d9      	lsls	r1, r3, #31
 800c1a8:	bf44      	itt	mi
 800c1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c1ae:	6023      	strmi	r3, [r4, #0]
 800c1b0:	b11d      	cbz	r5, 800c1ba <_printf_i+0x19e>
 800c1b2:	2310      	movs	r3, #16
 800c1b4:	e7ac      	b.n	800c110 <_printf_i+0xf4>
 800c1b6:	4827      	ldr	r0, [pc, #156]	@ (800c254 <_printf_i+0x238>)
 800c1b8:	e7e9      	b.n	800c18e <_printf_i+0x172>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	f023 0320 	bic.w	r3, r3, #32
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	e7f6      	b.n	800c1b2 <_printf_i+0x196>
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	e7bd      	b.n	800c144 <_printf_i+0x128>
 800c1c8:	6833      	ldr	r3, [r6, #0]
 800c1ca:	6825      	ldr	r5, [r4, #0]
 800c1cc:	1d18      	adds	r0, r3, #4
 800c1ce:	6961      	ldr	r1, [r4, #20]
 800c1d0:	6030      	str	r0, [r6, #0]
 800c1d2:	062e      	lsls	r6, r5, #24
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	d501      	bpl.n	800c1dc <_printf_i+0x1c0>
 800c1d8:	6019      	str	r1, [r3, #0]
 800c1da:	e002      	b.n	800c1e2 <_printf_i+0x1c6>
 800c1dc:	0668      	lsls	r0, r5, #25
 800c1de:	d5fb      	bpl.n	800c1d8 <_printf_i+0x1bc>
 800c1e0:	8019      	strh	r1, [r3, #0]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	6123      	str	r3, [r4, #16]
 800c1e8:	e7bc      	b.n	800c164 <_printf_i+0x148>
 800c1ea:	6833      	ldr	r3, [r6, #0]
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	6032      	str	r2, [r6, #0]
 800c1f2:	681e      	ldr	r6, [r3, #0]
 800c1f4:	6862      	ldr	r2, [r4, #4]
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 fbe7 	bl	800c9ca <memchr>
 800c1fc:	b108      	cbz	r0, 800c202 <_printf_i+0x1e6>
 800c1fe:	1b80      	subs	r0, r0, r6
 800c200:	6060      	str	r0, [r4, #4]
 800c202:	6863      	ldr	r3, [r4, #4]
 800c204:	6123      	str	r3, [r4, #16]
 800c206:	2300      	movs	r3, #0
 800c208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c20c:	e7aa      	b.n	800c164 <_printf_i+0x148>
 800c20e:	6923      	ldr	r3, [r4, #16]
 800c210:	4632      	mov	r2, r6
 800c212:	4649      	mov	r1, r9
 800c214:	4640      	mov	r0, r8
 800c216:	47d0      	blx	sl
 800c218:	3001      	adds	r0, #1
 800c21a:	d0ad      	beq.n	800c178 <_printf_i+0x15c>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	079b      	lsls	r3, r3, #30
 800c220:	d413      	bmi.n	800c24a <_printf_i+0x22e>
 800c222:	68e0      	ldr	r0, [r4, #12]
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	4298      	cmp	r0, r3
 800c228:	bfb8      	it	lt
 800c22a:	4618      	movlt	r0, r3
 800c22c:	e7a6      	b.n	800c17c <_printf_i+0x160>
 800c22e:	2301      	movs	r3, #1
 800c230:	4632      	mov	r2, r6
 800c232:	4649      	mov	r1, r9
 800c234:	4640      	mov	r0, r8
 800c236:	47d0      	blx	sl
 800c238:	3001      	adds	r0, #1
 800c23a:	d09d      	beq.n	800c178 <_printf_i+0x15c>
 800c23c:	3501      	adds	r5, #1
 800c23e:	68e3      	ldr	r3, [r4, #12]
 800c240:	9903      	ldr	r1, [sp, #12]
 800c242:	1a5b      	subs	r3, r3, r1
 800c244:	42ab      	cmp	r3, r5
 800c246:	dcf2      	bgt.n	800c22e <_printf_i+0x212>
 800c248:	e7eb      	b.n	800c222 <_printf_i+0x206>
 800c24a:	2500      	movs	r5, #0
 800c24c:	f104 0619 	add.w	r6, r4, #25
 800c250:	e7f5      	b.n	800c23e <_printf_i+0x222>
 800c252:	bf00      	nop
 800c254:	0801096f 	.word	0x0801096f
 800c258:	08010980 	.word	0x08010980

0800c25c <_scanf_float>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	b087      	sub	sp, #28
 800c262:	4617      	mov	r7, r2
 800c264:	4680      	mov	r8, r0
 800c266:	460c      	mov	r4, r1
 800c268:	9303      	str	r3, [sp, #12]
 800c26a:	688b      	ldr	r3, [r1, #8]
 800c26c:	1e5a      	subs	r2, r3, #1
 800c26e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c272:	460a      	mov	r2, r1
 800c274:	bf89      	itett	hi
 800c276:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c27a:	f04f 0b00 	movls.w	fp, #0
 800c27e:	eb03 0b05 	addhi.w	fp, r3, r5
 800c282:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c286:	f04f 0500 	mov.w	r5, #0
 800c28a:	bf88      	it	hi
 800c28c:	608b      	strhi	r3, [r1, #8]
 800c28e:	680b      	ldr	r3, [r1, #0]
 800c290:	46aa      	mov	sl, r5
 800c292:	46a9      	mov	r9, r5
 800c294:	9502      	str	r5, [sp, #8]
 800c296:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c29a:	f842 3b1c 	str.w	r3, [r2], #28
 800c29e:	4616      	mov	r6, r2
 800c2a0:	9201      	str	r2, [sp, #4]
 800c2a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c2a6:	68a2      	ldr	r2, [r4, #8]
 800c2a8:	b152      	cbz	r2, 800c2c0 <_scanf_float+0x64>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b4e      	cmp	r3, #78	@ 0x4e
 800c2b0:	d864      	bhi.n	800c37c <_scanf_float+0x120>
 800c2b2:	2b40      	cmp	r3, #64	@ 0x40
 800c2b4:	d83c      	bhi.n	800c330 <_scanf_float+0xd4>
 800c2b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c2ba:	b2c8      	uxtb	r0, r1
 800c2bc:	280e      	cmp	r0, #14
 800c2be:	d93a      	bls.n	800c336 <_scanf_float+0xda>
 800c2c0:	f1b9 0f00 	cmp.w	r9, #0
 800c2c4:	d003      	beq.n	800c2ce <_scanf_float+0x72>
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2d2:	f1ba 0f01 	cmp.w	sl, #1
 800c2d6:	f200 8117 	bhi.w	800c508 <_scanf_float+0x2ac>
 800c2da:	9b01      	ldr	r3, [sp, #4]
 800c2dc:	429e      	cmp	r6, r3
 800c2de:	f200 8108 	bhi.w	800c4f2 <_scanf_float+0x296>
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	b007      	add	sp, #28
 800c2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c2ee:	2a0d      	cmp	r2, #13
 800c2f0:	d8e6      	bhi.n	800c2c0 <_scanf_float+0x64>
 800c2f2:	a101      	add	r1, pc, #4	@ (adr r1, 800c2f8 <_scanf_float+0x9c>)
 800c2f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2f8:	0800c43f 	.word	0x0800c43f
 800c2fc:	0800c2c1 	.word	0x0800c2c1
 800c300:	0800c2c1 	.word	0x0800c2c1
 800c304:	0800c2c1 	.word	0x0800c2c1
 800c308:	0800c49f 	.word	0x0800c49f
 800c30c:	0800c477 	.word	0x0800c477
 800c310:	0800c2c1 	.word	0x0800c2c1
 800c314:	0800c2c1 	.word	0x0800c2c1
 800c318:	0800c44d 	.word	0x0800c44d
 800c31c:	0800c2c1 	.word	0x0800c2c1
 800c320:	0800c2c1 	.word	0x0800c2c1
 800c324:	0800c2c1 	.word	0x0800c2c1
 800c328:	0800c2c1 	.word	0x0800c2c1
 800c32c:	0800c405 	.word	0x0800c405
 800c330:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c334:	e7db      	b.n	800c2ee <_scanf_float+0x92>
 800c336:	290e      	cmp	r1, #14
 800c338:	d8c2      	bhi.n	800c2c0 <_scanf_float+0x64>
 800c33a:	a001      	add	r0, pc, #4	@ (adr r0, 800c340 <_scanf_float+0xe4>)
 800c33c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c340:	0800c3f5 	.word	0x0800c3f5
 800c344:	0800c2c1 	.word	0x0800c2c1
 800c348:	0800c3f5 	.word	0x0800c3f5
 800c34c:	0800c48b 	.word	0x0800c48b
 800c350:	0800c2c1 	.word	0x0800c2c1
 800c354:	0800c39d 	.word	0x0800c39d
 800c358:	0800c3db 	.word	0x0800c3db
 800c35c:	0800c3db 	.word	0x0800c3db
 800c360:	0800c3db 	.word	0x0800c3db
 800c364:	0800c3db 	.word	0x0800c3db
 800c368:	0800c3db 	.word	0x0800c3db
 800c36c:	0800c3db 	.word	0x0800c3db
 800c370:	0800c3db 	.word	0x0800c3db
 800c374:	0800c3db 	.word	0x0800c3db
 800c378:	0800c3db 	.word	0x0800c3db
 800c37c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c37e:	d809      	bhi.n	800c394 <_scanf_float+0x138>
 800c380:	2b60      	cmp	r3, #96	@ 0x60
 800c382:	d8b2      	bhi.n	800c2ea <_scanf_float+0x8e>
 800c384:	2b54      	cmp	r3, #84	@ 0x54
 800c386:	d07b      	beq.n	800c480 <_scanf_float+0x224>
 800c388:	2b59      	cmp	r3, #89	@ 0x59
 800c38a:	d199      	bne.n	800c2c0 <_scanf_float+0x64>
 800c38c:	2d07      	cmp	r5, #7
 800c38e:	d197      	bne.n	800c2c0 <_scanf_float+0x64>
 800c390:	2508      	movs	r5, #8
 800c392:	e02c      	b.n	800c3ee <_scanf_float+0x192>
 800c394:	2b74      	cmp	r3, #116	@ 0x74
 800c396:	d073      	beq.n	800c480 <_scanf_float+0x224>
 800c398:	2b79      	cmp	r3, #121	@ 0x79
 800c39a:	e7f6      	b.n	800c38a <_scanf_float+0x12e>
 800c39c:	6821      	ldr	r1, [r4, #0]
 800c39e:	05c8      	lsls	r0, r1, #23
 800c3a0:	d51b      	bpl.n	800c3da <_scanf_float+0x17e>
 800c3a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c3a6:	f109 0901 	add.w	r9, r9, #1
 800c3aa:	6021      	str	r1, [r4, #0]
 800c3ac:	f1bb 0f00 	cmp.w	fp, #0
 800c3b0:	d003      	beq.n	800c3ba <_scanf_float+0x15e>
 800c3b2:	3201      	adds	r2, #1
 800c3b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3b8:	60a2      	str	r2, [r4, #8]
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	6923      	ldr	r3, [r4, #16]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	6123      	str	r3, [r4, #16]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	607b      	str	r3, [r7, #4]
 800c3ce:	f340 8087 	ble.w	800c4e0 <_scanf_float+0x284>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	e765      	b.n	800c2a6 <_scanf_float+0x4a>
 800c3da:	eb1a 0105 	adds.w	r1, sl, r5
 800c3de:	f47f af6f 	bne.w	800c2c0 <_scanf_float+0x64>
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	468a      	mov	sl, r1
 800c3e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	f806 3b01 	strb.w	r3, [r6], #1
 800c3f2:	e7e2      	b.n	800c3ba <_scanf_float+0x15e>
 800c3f4:	6822      	ldr	r2, [r4, #0]
 800c3f6:	0610      	lsls	r0, r2, #24
 800c3f8:	f57f af62 	bpl.w	800c2c0 <_scanf_float+0x64>
 800c3fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c400:	6022      	str	r2, [r4, #0]
 800c402:	e7f4      	b.n	800c3ee <_scanf_float+0x192>
 800c404:	f1ba 0f00 	cmp.w	sl, #0
 800c408:	d10e      	bne.n	800c428 <_scanf_float+0x1cc>
 800c40a:	f1b9 0f00 	cmp.w	r9, #0
 800c40e:	d10e      	bne.n	800c42e <_scanf_float+0x1d2>
 800c410:	6822      	ldr	r2, [r4, #0]
 800c412:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c416:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c41a:	d108      	bne.n	800c42e <_scanf_float+0x1d2>
 800c41c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c420:	f04f 0a01 	mov.w	sl, #1
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	e7e2      	b.n	800c3ee <_scanf_float+0x192>
 800c428:	f1ba 0f02 	cmp.w	sl, #2
 800c42c:	d055      	beq.n	800c4da <_scanf_float+0x27e>
 800c42e:	2d01      	cmp	r5, #1
 800c430:	d002      	beq.n	800c438 <_scanf_float+0x1dc>
 800c432:	2d04      	cmp	r5, #4
 800c434:	f47f af44 	bne.w	800c2c0 <_scanf_float+0x64>
 800c438:	3501      	adds	r5, #1
 800c43a:	b2ed      	uxtb	r5, r5
 800c43c:	e7d7      	b.n	800c3ee <_scanf_float+0x192>
 800c43e:	f1ba 0f01 	cmp.w	sl, #1
 800c442:	f47f af3d 	bne.w	800c2c0 <_scanf_float+0x64>
 800c446:	f04f 0a02 	mov.w	sl, #2
 800c44a:	e7d0      	b.n	800c3ee <_scanf_float+0x192>
 800c44c:	b97d      	cbnz	r5, 800c46e <_scanf_float+0x212>
 800c44e:	f1b9 0f00 	cmp.w	r9, #0
 800c452:	f47f af38 	bne.w	800c2c6 <_scanf_float+0x6a>
 800c456:	6822      	ldr	r2, [r4, #0]
 800c458:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c45c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c460:	f040 8107 	bne.w	800c672 <_scanf_float+0x416>
 800c464:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c468:	2501      	movs	r5, #1
 800c46a:	6022      	str	r2, [r4, #0]
 800c46c:	e7bf      	b.n	800c3ee <_scanf_float+0x192>
 800c46e:	2d03      	cmp	r5, #3
 800c470:	d0e2      	beq.n	800c438 <_scanf_float+0x1dc>
 800c472:	2d05      	cmp	r5, #5
 800c474:	e7de      	b.n	800c434 <_scanf_float+0x1d8>
 800c476:	2d02      	cmp	r5, #2
 800c478:	f47f af22 	bne.w	800c2c0 <_scanf_float+0x64>
 800c47c:	2503      	movs	r5, #3
 800c47e:	e7b6      	b.n	800c3ee <_scanf_float+0x192>
 800c480:	2d06      	cmp	r5, #6
 800c482:	f47f af1d 	bne.w	800c2c0 <_scanf_float+0x64>
 800c486:	2507      	movs	r5, #7
 800c488:	e7b1      	b.n	800c3ee <_scanf_float+0x192>
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	0591      	lsls	r1, r2, #22
 800c48e:	f57f af17 	bpl.w	800c2c0 <_scanf_float+0x64>
 800c492:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c496:	f8cd 9008 	str.w	r9, [sp, #8]
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	e7a7      	b.n	800c3ee <_scanf_float+0x192>
 800c49e:	6822      	ldr	r2, [r4, #0]
 800c4a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c4a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c4a8:	d006      	beq.n	800c4b8 <_scanf_float+0x25c>
 800c4aa:	0550      	lsls	r0, r2, #21
 800c4ac:	f57f af08 	bpl.w	800c2c0 <_scanf_float+0x64>
 800c4b0:	f1b9 0f00 	cmp.w	r9, #0
 800c4b4:	f000 80dd 	beq.w	800c672 <_scanf_float+0x416>
 800c4b8:	0591      	lsls	r1, r2, #22
 800c4ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4be:	bf58      	it	pl
 800c4c0:	9902      	ldrpl	r1, [sp, #8]
 800c4c2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c4c6:	bf58      	it	pl
 800c4c8:	eba9 0101 	subpl.w	r1, r9, r1
 800c4cc:	6022      	str	r2, [r4, #0]
 800c4ce:	f04f 0900 	mov.w	r9, #0
 800c4d2:	bf58      	it	pl
 800c4d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c4d8:	e789      	b.n	800c3ee <_scanf_float+0x192>
 800c4da:	f04f 0a03 	mov.w	sl, #3
 800c4de:	e786      	b.n	800c3ee <_scanf_float+0x192>
 800c4e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	4798      	blx	r3
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f43f aedb 	beq.w	800c2a6 <_scanf_float+0x4a>
 800c4f0:	e6e6      	b.n	800c2c0 <_scanf_float+0x64>
 800c4f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4f6:	463a      	mov	r2, r7
 800c4f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	4798      	blx	r3
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	3b01      	subs	r3, #1
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	e6e8      	b.n	800c2da <_scanf_float+0x7e>
 800c508:	1e6b      	subs	r3, r5, #1
 800c50a:	2b06      	cmp	r3, #6
 800c50c:	d824      	bhi.n	800c558 <_scanf_float+0x2fc>
 800c50e:	2d02      	cmp	r5, #2
 800c510:	d836      	bhi.n	800c580 <_scanf_float+0x324>
 800c512:	9b01      	ldr	r3, [sp, #4]
 800c514:	429e      	cmp	r6, r3
 800c516:	f67f aee4 	bls.w	800c2e2 <_scanf_float+0x86>
 800c51a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c51e:	463a      	mov	r2, r7
 800c520:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c524:	4640      	mov	r0, r8
 800c526:	4798      	blx	r3
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	6123      	str	r3, [r4, #16]
 800c52e:	e7f0      	b.n	800c512 <_scanf_float+0x2b6>
 800c530:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c534:	463a      	mov	r2, r7
 800c536:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c53a:	4640      	mov	r0, r8
 800c53c:	4798      	blx	r3
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	3b01      	subs	r3, #1
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c548:	fa5f fa8a 	uxtb.w	sl, sl
 800c54c:	f1ba 0f02 	cmp.w	sl, #2
 800c550:	d1ee      	bne.n	800c530 <_scanf_float+0x2d4>
 800c552:	3d03      	subs	r5, #3
 800c554:	b2ed      	uxtb	r5, r5
 800c556:	1b76      	subs	r6, r6, r5
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	05da      	lsls	r2, r3, #23
 800c55c:	d52f      	bpl.n	800c5be <_scanf_float+0x362>
 800c55e:	055b      	lsls	r3, r3, #21
 800c560:	d511      	bpl.n	800c586 <_scanf_float+0x32a>
 800c562:	9b01      	ldr	r3, [sp, #4]
 800c564:	429e      	cmp	r6, r3
 800c566:	f67f aebc 	bls.w	800c2e2 <_scanf_float+0x86>
 800c56a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c56e:	463a      	mov	r2, r7
 800c570:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c574:	4640      	mov	r0, r8
 800c576:	4798      	blx	r3
 800c578:	6923      	ldr	r3, [r4, #16]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	6123      	str	r3, [r4, #16]
 800c57e:	e7f0      	b.n	800c562 <_scanf_float+0x306>
 800c580:	46aa      	mov	sl, r5
 800c582:	46b3      	mov	fp, r6
 800c584:	e7de      	b.n	800c544 <_scanf_float+0x2e8>
 800c586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c58a:	1e75      	subs	r5, r6, #1
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	2965      	cmp	r1, #101	@ 0x65
 800c590:	f103 33ff 	add.w	r3, r3, #4294967295
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	d00c      	beq.n	800c5b2 <_scanf_float+0x356>
 800c598:	2945      	cmp	r1, #69	@ 0x45
 800c59a:	d00a      	beq.n	800c5b2 <_scanf_float+0x356>
 800c59c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5a0:	463a      	mov	r2, r7
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	1eb5      	subs	r5, r6, #2
 800c5a6:	4798      	blx	r3
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	6123      	str	r3, [r4, #16]
 800c5b2:	462e      	mov	r6, r5
 800c5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4798      	blx	r3
 800c5be:	6822      	ldr	r2, [r4, #0]
 800c5c0:	f012 0210 	ands.w	r2, r2, #16
 800c5c4:	d001      	beq.n	800c5ca <_scanf_float+0x36e>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e68c      	b.n	800c2e4 <_scanf_float+0x88>
 800c5ca:	7032      	strb	r2, [r6, #0]
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c5d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5d6:	d11c      	bne.n	800c612 <_scanf_float+0x3b6>
 800c5d8:	9b02      	ldr	r3, [sp, #8]
 800c5da:	454b      	cmp	r3, r9
 800c5dc:	eba3 0209 	sub.w	r2, r3, r9
 800c5e0:	d123      	bne.n	800c62a <_scanf_float+0x3ce>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	9901      	ldr	r1, [sp, #4]
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	f002 fc22 	bl	800ee30 <_strtod_r>
 800c5ec:	6821      	ldr	r1, [r4, #0]
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	f011 0f02 	tst.w	r1, #2
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	ec57 6b10 	vmov	r6, r7, d0
 800c5fa:	f103 0204 	add.w	r2, r3, #4
 800c5fe:	d01f      	beq.n	800c640 <_scanf_float+0x3e4>
 800c600:	9903      	ldr	r1, [sp, #12]
 800c602:	600a      	str	r2, [r1, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	e9c3 6700 	strd	r6, r7, [r3]
 800c60a:	68e3      	ldr	r3, [r4, #12]
 800c60c:	3301      	adds	r3, #1
 800c60e:	60e3      	str	r3, [r4, #12]
 800c610:	e7d9      	b.n	800c5c6 <_scanf_float+0x36a>
 800c612:	9b04      	ldr	r3, [sp, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0e4      	beq.n	800c5e2 <_scanf_float+0x386>
 800c618:	9905      	ldr	r1, [sp, #20]
 800c61a:	230a      	movs	r3, #10
 800c61c:	4640      	mov	r0, r8
 800c61e:	3101      	adds	r1, #1
 800c620:	f7ff f9b6 	bl	800b990 <_strtol_r>
 800c624:	9b04      	ldr	r3, [sp, #16]
 800c626:	9e05      	ldr	r6, [sp, #20]
 800c628:	1ac2      	subs	r2, r0, r3
 800c62a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c62e:	4912      	ldr	r1, [pc, #72]	@ (800c678 <_scanf_float+0x41c>)
 800c630:	429e      	cmp	r6, r3
 800c632:	bf28      	it	cs
 800c634:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c638:	4630      	mov	r0, r6
 800c63a:	f000 f8e3 	bl	800c804 <siprintf>
 800c63e:	e7d0      	b.n	800c5e2 <_scanf_float+0x386>
 800c640:	f011 0f04 	tst.w	r1, #4
 800c644:	9903      	ldr	r1, [sp, #12]
 800c646:	600a      	str	r2, [r1, #0]
 800c648:	d1dc      	bne.n	800c604 <_scanf_float+0x3a8>
 800c64a:	681d      	ldr	r5, [r3, #0]
 800c64c:	4632      	mov	r2, r6
 800c64e:	463b      	mov	r3, r7
 800c650:	4630      	mov	r0, r6
 800c652:	4639      	mov	r1, r7
 800c654:	f7f4 fa7e 	bl	8000b54 <__aeabi_dcmpun>
 800c658:	b128      	cbz	r0, 800c666 <_scanf_float+0x40a>
 800c65a:	4808      	ldr	r0, [pc, #32]	@ (800c67c <_scanf_float+0x420>)
 800c65c:	f000 f9d0 	bl	800ca00 <nanf>
 800c660:	ed85 0a00 	vstr	s0, [r5]
 800c664:	e7d1      	b.n	800c60a <_scanf_float+0x3ae>
 800c666:	4630      	mov	r0, r6
 800c668:	4639      	mov	r1, r7
 800c66a:	f7f4 fad1 	bl	8000c10 <__aeabi_d2f>
 800c66e:	6028      	str	r0, [r5, #0]
 800c670:	e7cb      	b.n	800c60a <_scanf_float+0x3ae>
 800c672:	f04f 0900 	mov.w	r9, #0
 800c676:	e62a      	b.n	800c2ce <_scanf_float+0x72>
 800c678:	08010991 	.word	0x08010991
 800c67c:	08010c24 	.word	0x08010c24

0800c680 <std>:
 800c680:	2300      	movs	r3, #0
 800c682:	b510      	push	{r4, lr}
 800c684:	4604      	mov	r4, r0
 800c686:	6083      	str	r3, [r0, #8]
 800c688:	8181      	strh	r1, [r0, #12]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6643      	str	r3, [r0, #100]	@ 0x64
 800c68e:	81c2      	strh	r2, [r0, #14]
 800c690:	2208      	movs	r2, #8
 800c692:	6183      	str	r3, [r0, #24]
 800c694:	e9c0 3300 	strd	r3, r3, [r0]
 800c698:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c69c:	305c      	adds	r0, #92	@ 0x5c
 800c69e:	f000 f914 	bl	800c8ca <memset>
 800c6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d8 <std+0x58>)
 800c6a4:	6224      	str	r4, [r4, #32]
 800c6a6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c6dc <std+0x5c>)
 800c6aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e0 <std+0x60>)
 800c6ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e4 <std+0x64>)
 800c6b2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e8 <std+0x68>)
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d006      	beq.n	800c6c8 <std+0x48>
 800c6ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6be:	4294      	cmp	r4, r2
 800c6c0:	d002      	beq.n	800c6c8 <std+0x48>
 800c6c2:	33d0      	adds	r3, #208	@ 0xd0
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	d105      	bne.n	800c6d4 <std+0x54>
 800c6c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d0:	f000 b978 	b.w	800c9c4 <__retarget_lock_init_recursive>
 800c6d4:	bd10      	pop	{r4, pc}
 800c6d6:	bf00      	nop
 800c6d8:	0800c845 	.word	0x0800c845
 800c6dc:	0800c867 	.word	0x0800c867
 800c6e0:	0800c89f 	.word	0x0800c89f
 800c6e4:	0800c8c3 	.word	0x0800c8c3
 800c6e8:	2003b278 	.word	0x2003b278

0800c6ec <stdio_exit_handler>:
 800c6ec:	4a02      	ldr	r2, [pc, #8]	@ (800c6f8 <stdio_exit_handler+0xc>)
 800c6ee:	4903      	ldr	r1, [pc, #12]	@ (800c6fc <stdio_exit_handler+0x10>)
 800c6f0:	4803      	ldr	r0, [pc, #12]	@ (800c700 <stdio_exit_handler+0x14>)
 800c6f2:	f000 b869 	b.w	800c7c8 <_fwalk_sglue>
 800c6f6:	bf00      	nop
 800c6f8:	20000028 	.word	0x20000028
 800c6fc:	0800f1f5 	.word	0x0800f1f5
 800c700:	20000038 	.word	0x20000038

0800c704 <cleanup_stdio>:
 800c704:	6841      	ldr	r1, [r0, #4]
 800c706:	4b0c      	ldr	r3, [pc, #48]	@ (800c738 <cleanup_stdio+0x34>)
 800c708:	4299      	cmp	r1, r3
 800c70a:	b510      	push	{r4, lr}
 800c70c:	4604      	mov	r4, r0
 800c70e:	d001      	beq.n	800c714 <cleanup_stdio+0x10>
 800c710:	f002 fd70 	bl	800f1f4 <_fflush_r>
 800c714:	68a1      	ldr	r1, [r4, #8]
 800c716:	4b09      	ldr	r3, [pc, #36]	@ (800c73c <cleanup_stdio+0x38>)
 800c718:	4299      	cmp	r1, r3
 800c71a:	d002      	beq.n	800c722 <cleanup_stdio+0x1e>
 800c71c:	4620      	mov	r0, r4
 800c71e:	f002 fd69 	bl	800f1f4 <_fflush_r>
 800c722:	68e1      	ldr	r1, [r4, #12]
 800c724:	4b06      	ldr	r3, [pc, #24]	@ (800c740 <cleanup_stdio+0x3c>)
 800c726:	4299      	cmp	r1, r3
 800c728:	d004      	beq.n	800c734 <cleanup_stdio+0x30>
 800c72a:	4620      	mov	r0, r4
 800c72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c730:	f002 bd60 	b.w	800f1f4 <_fflush_r>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	bf00      	nop
 800c738:	2003b278 	.word	0x2003b278
 800c73c:	2003b2e0 	.word	0x2003b2e0
 800c740:	2003b348 	.word	0x2003b348

0800c744 <global_stdio_init.part.0>:
 800c744:	b510      	push	{r4, lr}
 800c746:	4b0b      	ldr	r3, [pc, #44]	@ (800c774 <global_stdio_init.part.0+0x30>)
 800c748:	2104      	movs	r1, #4
 800c74a:	4c0b      	ldr	r4, [pc, #44]	@ (800c778 <global_stdio_init.part.0+0x34>)
 800c74c:	4a0b      	ldr	r2, [pc, #44]	@ (800c77c <global_stdio_init.part.0+0x38>)
 800c74e:	4620      	mov	r0, r4
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	f7ff ff94 	bl	800c680 <std>
 800c758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c75c:	2201      	movs	r2, #1
 800c75e:	2109      	movs	r1, #9
 800c760:	f7ff ff8e 	bl	800c680 <std>
 800c764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c768:	2202      	movs	r2, #2
 800c76a:	2112      	movs	r1, #18
 800c76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c770:	f7ff bf86 	b.w	800c680 <std>
 800c774:	2003b3b0 	.word	0x2003b3b0
 800c778:	2003b278 	.word	0x2003b278
 800c77c:	0800c6ed 	.word	0x0800c6ed

0800c780 <__sfp_lock_acquire>:
 800c780:	4801      	ldr	r0, [pc, #4]	@ (800c788 <__sfp_lock_acquire+0x8>)
 800c782:	f000 b920 	b.w	800c9c6 <__retarget_lock_acquire_recursive>
 800c786:	bf00      	nop
 800c788:	2003b3b9 	.word	0x2003b3b9

0800c78c <__sfp_lock_release>:
 800c78c:	4801      	ldr	r0, [pc, #4]	@ (800c794 <__sfp_lock_release+0x8>)
 800c78e:	f000 b91b 	b.w	800c9c8 <__retarget_lock_release_recursive>
 800c792:	bf00      	nop
 800c794:	2003b3b9 	.word	0x2003b3b9

0800c798 <__sinit>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	4604      	mov	r4, r0
 800c79c:	f7ff fff0 	bl	800c780 <__sfp_lock_acquire>
 800c7a0:	6a23      	ldr	r3, [r4, #32]
 800c7a2:	b11b      	cbz	r3, 800c7ac <__sinit+0x14>
 800c7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a8:	f7ff bff0 	b.w	800c78c <__sfp_lock_release>
 800c7ac:	4b04      	ldr	r3, [pc, #16]	@ (800c7c0 <__sinit+0x28>)
 800c7ae:	6223      	str	r3, [r4, #32]
 800c7b0:	4b04      	ldr	r3, [pc, #16]	@ (800c7c4 <__sinit+0x2c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f5      	bne.n	800c7a4 <__sinit+0xc>
 800c7b8:	f7ff ffc4 	bl	800c744 <global_stdio_init.part.0>
 800c7bc:	e7f2      	b.n	800c7a4 <__sinit+0xc>
 800c7be:	bf00      	nop
 800c7c0:	0800c705 	.word	0x0800c705
 800c7c4:	2003b3b0 	.word	0x2003b3b0

0800c7c8 <_fwalk_sglue>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	4688      	mov	r8, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	2600      	movs	r6, #0
 800c7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c7dc:	d505      	bpl.n	800c7ea <_fwalk_sglue+0x22>
 800c7de:	6824      	ldr	r4, [r4, #0]
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	d1f7      	bne.n	800c7d4 <_fwalk_sglue+0xc>
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d907      	bls.n	800c800 <_fwalk_sglue+0x38>
 800c7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	d003      	beq.n	800c800 <_fwalk_sglue+0x38>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c0      	blx	r8
 800c7fe:	4306      	orrs	r6, r0
 800c800:	3568      	adds	r5, #104	@ 0x68
 800c802:	e7e9      	b.n	800c7d8 <_fwalk_sglue+0x10>

0800c804 <siprintf>:
 800c804:	b40e      	push	{r1, r2, r3}
 800c806:	b500      	push	{lr}
 800c808:	b09c      	sub	sp, #112	@ 0x70
 800c80a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c80e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c810:	9002      	str	r0, [sp, #8]
 800c812:	9006      	str	r0, [sp, #24]
 800c814:	9107      	str	r1, [sp, #28]
 800c816:	9104      	str	r1, [sp, #16]
 800c818:	4808      	ldr	r0, [pc, #32]	@ (800c83c <siprintf+0x38>)
 800c81a:	4909      	ldr	r1, [pc, #36]	@ (800c840 <siprintf+0x3c>)
 800c81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c820:	9105      	str	r1, [sp, #20]
 800c822:	a902      	add	r1, sp, #8
 800c824:	6800      	ldr	r0, [r0, #0]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	f002 fb64 	bl	800eef4 <_svfiprintf_r>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	b01c      	add	sp, #112	@ 0x70
 800c834:	f85d eb04 	ldr.w	lr, [sp], #4
 800c838:	b003      	add	sp, #12
 800c83a:	4770      	bx	lr
 800c83c:	20000034 	.word	0x20000034
 800c840:	ffff0208 	.word	0xffff0208

0800c844 <__sread>:
 800c844:	b510      	push	{r4, lr}
 800c846:	460c      	mov	r4, r1
 800c848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84c:	f000 f86c 	bl	800c928 <_read_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	bfab      	itete	ge
 800c854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c856:	89a3      	ldrhlt	r3, [r4, #12]
 800c858:	181b      	addge	r3, r3, r0
 800c85a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c85e:	bfac      	ite	ge
 800c860:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c862:	81a3      	strhlt	r3, [r4, #12]
 800c864:	bd10      	pop	{r4, pc}

0800c866 <__swrite>:
 800c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	461f      	mov	r7, r3
 800c86c:	898b      	ldrh	r3, [r1, #12]
 800c86e:	4605      	mov	r5, r0
 800c870:	460c      	mov	r4, r1
 800c872:	05db      	lsls	r3, r3, #23
 800c874:	4616      	mov	r6, r2
 800c876:	d505      	bpl.n	800c884 <__swrite+0x1e>
 800c878:	2302      	movs	r3, #2
 800c87a:	2200      	movs	r2, #0
 800c87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c880:	f000 f840 	bl	800c904 <_lseek_r>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	4632      	mov	r2, r6
 800c888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c88c:	4628      	mov	r0, r5
 800c88e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c892:	81a3      	strh	r3, [r4, #12]
 800c894:	463b      	mov	r3, r7
 800c896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	f000 b857 	b.w	800c94c <_write_r>

0800c89e <__sseek>:
 800c89e:	b510      	push	{r4, lr}
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a6:	f000 f82d 	bl	800c904 <_lseek_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	bf15      	itete	ne
 800c8b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8ba:	81a3      	strheq	r3, [r4, #12]
 800c8bc:	bf18      	it	ne
 800c8be:	81a3      	strhne	r3, [r4, #12]
 800c8c0:	bd10      	pop	{r4, pc}

0800c8c2 <__sclose>:
 800c8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c6:	f000 b80d 	b.w	800c8e4 <_close_r>

0800c8ca <memset>:
 800c8ca:	4402      	add	r2, r0
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d100      	bne.n	800c8d4 <memset+0xa>
 800c8d2:	4770      	bx	lr
 800c8d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c8d8:	e7f9      	b.n	800c8ce <memset+0x4>
	...

0800c8dc <_localeconv_r>:
 800c8dc:	4800      	ldr	r0, [pc, #0]	@ (800c8e0 <_localeconv_r+0x4>)
 800c8de:	4770      	bx	lr
 800c8e0:	20000174 	.word	0x20000174

0800c8e4 <_close_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4d05      	ldr	r5, [pc, #20]	@ (800c900 <_close_r+0x1c>)
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f6 fdfa 	bl	80034e8 <_close>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_close_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_close_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	2003b3b4 	.word	0x2003b3b4

0800c904 <_lseek_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4604      	mov	r4, r0
 800c908:	4d06      	ldr	r5, [pc, #24]	@ (800c924 <_lseek_r+0x20>)
 800c90a:	4608      	mov	r0, r1
 800c90c:	4611      	mov	r1, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	602a      	str	r2, [r5, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	f7f6 fe0f 	bl	8003536 <_lseek>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d102      	bne.n	800c922 <_lseek_r+0x1e>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b103      	cbz	r3, 800c922 <_lseek_r+0x1e>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	2003b3b4 	.word	0x2003b3b4

0800c928 <_read_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4604      	mov	r4, r0
 800c92c:	4d06      	ldr	r5, [pc, #24]	@ (800c948 <_read_r+0x20>)
 800c92e:	4608      	mov	r0, r1
 800c930:	4611      	mov	r1, r2
 800c932:	2200      	movs	r2, #0
 800c934:	602a      	str	r2, [r5, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	f7f6 fd9d 	bl	8003476 <_read>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d102      	bne.n	800c946 <_read_r+0x1e>
 800c940:	682b      	ldr	r3, [r5, #0]
 800c942:	b103      	cbz	r3, 800c946 <_read_r+0x1e>
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	2003b3b4 	.word	0x2003b3b4

0800c94c <_write_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4604      	mov	r4, r0
 800c950:	4d06      	ldr	r5, [pc, #24]	@ (800c96c <_write_r+0x20>)
 800c952:	4608      	mov	r0, r1
 800c954:	4611      	mov	r1, r2
 800c956:	2200      	movs	r2, #0
 800c958:	602a      	str	r2, [r5, #0]
 800c95a:	461a      	mov	r2, r3
 800c95c:	f7f6 fda8 	bl	80034b0 <_write>
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	d102      	bne.n	800c96a <_write_r+0x1e>
 800c964:	682b      	ldr	r3, [r5, #0]
 800c966:	b103      	cbz	r3, 800c96a <_write_r+0x1e>
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	bd38      	pop	{r3, r4, r5, pc}
 800c96c:	2003b3b4 	.word	0x2003b3b4

0800c970 <__errno>:
 800c970:	4b01      	ldr	r3, [pc, #4]	@ (800c978 <__errno+0x8>)
 800c972:	6818      	ldr	r0, [r3, #0]
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	20000034 	.word	0x20000034

0800c97c <__libc_init_array>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4d0d      	ldr	r5, [pc, #52]	@ (800c9b4 <__libc_init_array+0x38>)
 800c980:	2600      	movs	r6, #0
 800c982:	4c0d      	ldr	r4, [pc, #52]	@ (800c9b8 <__libc_init_array+0x3c>)
 800c984:	1b64      	subs	r4, r4, r5
 800c986:	10a4      	asrs	r4, r4, #2
 800c988:	42a6      	cmp	r6, r4
 800c98a:	d109      	bne.n	800c9a0 <__libc_init_array+0x24>
 800c98c:	4d0b      	ldr	r5, [pc, #44]	@ (800c9bc <__libc_init_array+0x40>)
 800c98e:	2600      	movs	r6, #0
 800c990:	4c0b      	ldr	r4, [pc, #44]	@ (800c9c0 <__libc_init_array+0x44>)
 800c992:	f003 fc19 	bl	80101c8 <_init>
 800c996:	1b64      	subs	r4, r4, r5
 800c998:	10a4      	asrs	r4, r4, #2
 800c99a:	42a6      	cmp	r6, r4
 800c99c:	d105      	bne.n	800c9aa <__libc_init_array+0x2e>
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	4798      	blx	r3
 800c9a8:	e7ee      	b.n	800c988 <__libc_init_array+0xc>
 800c9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ae:	3601      	adds	r6, #1
 800c9b0:	4798      	blx	r3
 800c9b2:	e7f2      	b.n	800c99a <__libc_init_array+0x1e>
 800c9b4:	08010c90 	.word	0x08010c90
 800c9b8:	08010c90 	.word	0x08010c90
 800c9bc:	08010c90 	.word	0x08010c90
 800c9c0:	08010c94 	.word	0x08010c94

0800c9c4 <__retarget_lock_init_recursive>:
 800c9c4:	4770      	bx	lr

0800c9c6 <__retarget_lock_acquire_recursive>:
 800c9c6:	4770      	bx	lr

0800c9c8 <__retarget_lock_release_recursive>:
 800c9c8:	4770      	bx	lr

0800c9ca <memchr>:
 800c9ca:	b2c9      	uxtb	r1, r1
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	4402      	add	r2, r0
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	d101      	bne.n	800c9dc <memchr+0x12>
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e003      	b.n	800c9e4 <memchr+0x1a>
 800c9dc:	7804      	ldrb	r4, [r0, #0]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	428c      	cmp	r4, r1
 800c9e2:	d1f6      	bne.n	800c9d2 <memchr+0x8>
 800c9e4:	bd10      	pop	{r4, pc}

0800c9e6 <memcpy>:
 800c9e6:	440a      	add	r2, r1
 800c9e8:	1e43      	subs	r3, r0, #1
 800c9ea:	4291      	cmp	r1, r2
 800c9ec:	d100      	bne.n	800c9f0 <memcpy+0xa>
 800c9ee:	4770      	bx	lr
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f6:	4291      	cmp	r1, r2
 800c9f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9fc:	d1f9      	bne.n	800c9f2 <memcpy+0xc>
 800c9fe:	bd10      	pop	{r4, pc}

0800ca00 <nanf>:
 800ca00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca08 <nanf+0x8>
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	7fc00000 	.word	0x7fc00000

0800ca0c <quorem>:
 800ca0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	6903      	ldr	r3, [r0, #16]
 800ca12:	4607      	mov	r7, r0
 800ca14:	690c      	ldr	r4, [r1, #16]
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	f2c0 8083 	blt.w	800cb22 <quorem+0x116>
 800ca1c:	3c01      	subs	r4, #1
 800ca1e:	f100 0514 	add.w	r5, r0, #20
 800ca22:	f101 0814 	add.w	r8, r1, #20
 800ca26:	00a3      	lsls	r3, r4, #2
 800ca28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca44:	d331      	bcc.n	800caaa <quorem+0x9e>
 800ca46:	f04f 0a00 	mov.w	sl, #0
 800ca4a:	46c4      	mov	ip, r8
 800ca4c:	46ae      	mov	lr, r5
 800ca4e:	46d3      	mov	fp, sl
 800ca50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca54:	b298      	uxth	r0, r3
 800ca56:	45e1      	cmp	r9, ip
 800ca58:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ca5c:	fb06 a000 	mla	r0, r6, r0, sl
 800ca60:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ca64:	b280      	uxth	r0, r0
 800ca66:	fb06 2303 	mla	r3, r6, r3, r2
 800ca6a:	f8de 2000 	ldr.w	r2, [lr]
 800ca6e:	b292      	uxth	r2, r2
 800ca70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca74:	eba2 0200 	sub.w	r2, r2, r0
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	f8de 0000 	ldr.w	r0, [lr]
 800ca7e:	445a      	add	r2, fp
 800ca80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca84:	b292      	uxth	r2, r2
 800ca86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca92:	f84e 2b04 	str.w	r2, [lr], #4
 800ca96:	d2db      	bcs.n	800ca50 <quorem+0x44>
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	58eb      	ldr	r3, [r5, r3]
 800ca9c:	b92b      	cbnz	r3, 800caaa <quorem+0x9e>
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	3b04      	subs	r3, #4
 800caa2:	429d      	cmp	r5, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	d330      	bcc.n	800cb0a <quorem+0xfe>
 800caa8:	613c      	str	r4, [r7, #16]
 800caaa:	4638      	mov	r0, r7
 800caac:	f001 f9c6 	bl	800de3c <__mcmp>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	db26      	blt.n	800cb02 <quorem+0xf6>
 800cab4:	4629      	mov	r1, r5
 800cab6:	2000      	movs	r0, #0
 800cab8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cabc:	f8d1 c000 	ldr.w	ip, [r1]
 800cac0:	fa1f fe82 	uxth.w	lr, r2
 800cac4:	45c1      	cmp	r9, r8
 800cac6:	fa1f f38c 	uxth.w	r3, ip
 800caca:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800cace:	eba3 030e 	sub.w	r3, r3, lr
 800cad2:	4403      	add	r3, r0
 800cad4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cad8:	b29b      	uxth	r3, r3
 800cada:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cae6:	f841 3b04 	str.w	r3, [r1], #4
 800caea:	d2e5      	bcs.n	800cab8 <quorem+0xac>
 800caec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caf4:	b922      	cbnz	r2, 800cb00 <quorem+0xf4>
 800caf6:	3b04      	subs	r3, #4
 800caf8:	429d      	cmp	r5, r3
 800cafa:	461a      	mov	r2, r3
 800cafc:	d30b      	bcc.n	800cb16 <quorem+0x10a>
 800cafe:	613c      	str	r4, [r7, #16]
 800cb00:	3601      	adds	r6, #1
 800cb02:	4630      	mov	r0, r6
 800cb04:	b003      	add	sp, #12
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	6812      	ldr	r2, [r2, #0]
 800cb0c:	3b04      	subs	r3, #4
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d1ca      	bne.n	800caa8 <quorem+0x9c>
 800cb12:	3c01      	subs	r4, #1
 800cb14:	e7c5      	b.n	800caa2 <quorem+0x96>
 800cb16:	6812      	ldr	r2, [r2, #0]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	d1ef      	bne.n	800cafe <quorem+0xf2>
 800cb1e:	3c01      	subs	r4, #1
 800cb20:	e7ea      	b.n	800caf8 <quorem+0xec>
 800cb22:	2000      	movs	r0, #0
 800cb24:	e7ee      	b.n	800cb04 <quorem+0xf8>
	...

0800cb28 <_dtoa_r>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	69c7      	ldr	r7, [r0, #28]
 800cb2e:	b099      	sub	sp, #100	@ 0x64
 800cb30:	4683      	mov	fp, r0
 800cb32:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cb34:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb36:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb3a:	ec55 4b10 	vmov	r4, r5, d0
 800cb3e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb42:	b97f      	cbnz	r7, 800cb64 <_dtoa_r+0x3c>
 800cb44:	2010      	movs	r0, #16
 800cb46:	f000 fdfd 	bl	800d744 <malloc>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cb50:	b920      	cbnz	r0, 800cb5c <_dtoa_r+0x34>
 800cb52:	4ba7      	ldr	r3, [pc, #668]	@ (800cdf0 <_dtoa_r+0x2c8>)
 800cb54:	21ef      	movs	r1, #239	@ 0xef
 800cb56:	48a7      	ldr	r0, [pc, #668]	@ (800cdf4 <_dtoa_r+0x2cc>)
 800cb58:	f002 fbba 	bl	800f2d0 <__assert_func>
 800cb5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb60:	6007      	str	r7, [r0, #0]
 800cb62:	60c7      	str	r7, [r0, #12]
 800cb64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb68:	6819      	ldr	r1, [r3, #0]
 800cb6a:	b159      	cbz	r1, 800cb84 <_dtoa_r+0x5c>
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	4658      	mov	r0, fp
 800cb72:	4093      	lsls	r3, r2
 800cb74:	604a      	str	r2, [r1, #4]
 800cb76:	608b      	str	r3, [r1, #8]
 800cb78:	f000 feda 	bl	800d930 <_Bfree>
 800cb7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	1e2b      	subs	r3, r5, #0
 800cb86:	bfb7      	itett	lt
 800cb88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb8c:	2300      	movge	r3, #0
 800cb8e:	2201      	movlt	r2, #1
 800cb90:	9303      	strlt	r3, [sp, #12]
 800cb92:	bfa8      	it	ge
 800cb94:	6033      	strge	r3, [r6, #0]
 800cb96:	9f03      	ldr	r7, [sp, #12]
 800cb98:	4b97      	ldr	r3, [pc, #604]	@ (800cdf8 <_dtoa_r+0x2d0>)
 800cb9a:	bfb8      	it	lt
 800cb9c:	6032      	strlt	r2, [r6, #0]
 800cb9e:	43bb      	bics	r3, r7
 800cba0:	d112      	bne.n	800cbc8 <_dtoa_r+0xa0>
 800cba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cba6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbae:	4323      	orrs	r3, r4
 800cbb0:	f000 854c 	beq.w	800d64c <_dtoa_r+0xb24>
 800cbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbb6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ce0c <_dtoa_r+0x2e4>
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 854e 	beq.w	800d65c <_dtoa_r+0xb34>
 800cbc0:	f10a 0303 	add.w	r3, sl, #3
 800cbc4:	f000 bd48 	b.w	800d658 <_dtoa_r+0xb30>
 800cbc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	ec51 0b17 	vmov	r0, r1, d7
 800cbd4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cbd8:	f7f3 ff8a 	bl	8000af0 <__aeabi_dcmpeq>
 800cbdc:	4680      	mov	r8, r0
 800cbde:	b158      	cbz	r0, 800cbf8 <_dtoa_r+0xd0>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbe8:	b113      	cbz	r3, 800cbf0 <_dtoa_r+0xc8>
 800cbea:	4b84      	ldr	r3, [pc, #528]	@ (800cdfc <_dtoa_r+0x2d4>)
 800cbec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ce10 <_dtoa_r+0x2e8>
 800cbf4:	f000 bd32 	b.w	800d65c <_dtoa_r+0xb34>
 800cbf8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cbfc:	aa16      	add	r2, sp, #88	@ 0x58
 800cbfe:	a917      	add	r1, sp, #92	@ 0x5c
 800cc00:	4658      	mov	r0, fp
 800cc02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc06:	f001 fa41 	bl	800e08c <__d2b>
 800cc0a:	4681      	mov	r9, r0
 800cc0c:	2e00      	cmp	r6, #0
 800cc0e:	d075      	beq.n	800ccfc <_dtoa_r+0x1d4>
 800cc10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc12:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc16:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cc1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc1e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc26:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4b74      	ldr	r3, [pc, #464]	@ (800ce00 <_dtoa_r+0x2d8>)
 800cc30:	f7f3 fb3e 	bl	80002b0 <__aeabi_dsub>
 800cc34:	a368      	add	r3, pc, #416	@ (adr r3, 800cdd8 <_dtoa_r+0x2b0>)
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	f7f3 fcf1 	bl	8000620 <__aeabi_dmul>
 800cc3e:	a368      	add	r3, pc, #416	@ (adr r3, 800cde0 <_dtoa_r+0x2b8>)
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	f7f3 fb36 	bl	80002b4 <__adddf3>
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	f7f3 fc7d 	bl	800054c <__aeabi_i2d>
 800cc52:	a365      	add	r3, pc, #404	@ (adr r3, 800cde8 <_dtoa_r+0x2c0>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	f7f3 fce2 	bl	8000620 <__aeabi_dmul>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4620      	mov	r0, r4
 800cc62:	4629      	mov	r1, r5
 800cc64:	f7f3 fb26 	bl	80002b4 <__adddf3>
 800cc68:	4604      	mov	r4, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	f7f3 ff88 	bl	8000b80 <__aeabi_d2iz>
 800cc70:	2200      	movs	r2, #0
 800cc72:	4607      	mov	r7, r0
 800cc74:	2300      	movs	r3, #0
 800cc76:	4620      	mov	r0, r4
 800cc78:	4629      	mov	r1, r5
 800cc7a:	f7f3 ff43 	bl	8000b04 <__aeabi_dcmplt>
 800cc7e:	b140      	cbz	r0, 800cc92 <_dtoa_r+0x16a>
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7f3 fc63 	bl	800054c <__aeabi_i2d>
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	f7f3 ff31 	bl	8000af0 <__aeabi_dcmpeq>
 800cc8e:	b900      	cbnz	r0, 800cc92 <_dtoa_r+0x16a>
 800cc90:	3f01      	subs	r7, #1
 800cc92:	2f16      	cmp	r7, #22
 800cc94:	d851      	bhi.n	800cd3a <_dtoa_r+0x212>
 800cc96:	4b5b      	ldr	r3, [pc, #364]	@ (800ce04 <_dtoa_r+0x2dc>)
 800cc98:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 ff2e 	bl	8000b04 <__aeabi_dcmplt>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d048      	beq.n	800cd3e <_dtoa_r+0x216>
 800ccac:	3f01      	subs	r7, #1
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800ccb2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ccb4:	1b9b      	subs	r3, r3, r6
 800ccb6:	1e5a      	subs	r2, r3, #1
 800ccb8:	bf46      	itte	mi
 800ccba:	f1c3 0801 	rsbmi	r8, r3, #1
 800ccbe:	2300      	movmi	r3, #0
 800ccc0:	f04f 0800 	movpl.w	r8, #0
 800ccc4:	9208      	str	r2, [sp, #32]
 800ccc6:	bf48      	it	mi
 800ccc8:	9308      	strmi	r3, [sp, #32]
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	db39      	blt.n	800cd42 <_dtoa_r+0x21a>
 800ccce:	9b08      	ldr	r3, [sp, #32]
 800ccd0:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ccd2:	443b      	add	r3, r7
 800ccd4:	9308      	str	r3, [sp, #32]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccdc:	2b09      	cmp	r3, #9
 800ccde:	d864      	bhi.n	800cdaa <_dtoa_r+0x282>
 800cce0:	2b05      	cmp	r3, #5
 800cce2:	bfc5      	ittet	gt
 800cce4:	3b04      	subgt	r3, #4
 800cce6:	2400      	movgt	r4, #0
 800cce8:	2401      	movle	r4, #1
 800ccea:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ccec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccee:	3b02      	subs	r3, #2
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d865      	bhi.n	800cdc0 <_dtoa_r+0x298>
 800ccf4:	e8df f003 	tbb	[pc, r3]
 800ccf8:	5737392c 	.word	0x5737392c
 800ccfc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cd00:	441e      	add	r6, r3
 800cd02:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd06:	2b20      	cmp	r3, #32
 800cd08:	bfc9      	itett	gt
 800cd0a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd0e:	f1c3 0320 	rsble	r3, r3, #32
 800cd12:	409f      	lslgt	r7, r3
 800cd14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd18:	bfd8      	it	le
 800cd1a:	fa04 f003 	lslle.w	r0, r4, r3
 800cd1e:	f106 36ff 	add.w	r6, r6, #4294967295
 800cd22:	bfc4      	itt	gt
 800cd24:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd28:	ea47 0003 	orrgt.w	r0, r7, r3
 800cd2c:	f7f3 fbfe 	bl	800052c <__aeabi_ui2d>
 800cd30:	2201      	movs	r2, #1
 800cd32:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd36:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd38:	e777      	b.n	800cc2a <_dtoa_r+0x102>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7b8      	b.n	800ccb0 <_dtoa_r+0x188>
 800cd3e:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd40:	e7b7      	b.n	800ccb2 <_dtoa_r+0x18a>
 800cd42:	427b      	negs	r3, r7
 800cd44:	eba8 0807 	sub.w	r8, r8, r7
 800cd48:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd4e:	e7c4      	b.n	800ccda <_dtoa_r+0x1b2>
 800cd50:	2300      	movs	r3, #0
 800cd52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	dc35      	bgt.n	800cdc6 <_dtoa_r+0x29e>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	9307      	str	r3, [sp, #28]
 800cd62:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd64:	e00b      	b.n	800cd7e <_dtoa_r+0x256>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e7f3      	b.n	800cd52 <_dtoa_r+0x22a>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd70:	18fb      	adds	r3, r7, r3
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	bfb8      	it	lt
 800cd7c:	2301      	movlt	r3, #1
 800cd7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd82:	2100      	movs	r1, #0
 800cd84:	2204      	movs	r2, #4
 800cd86:	f102 0514 	add.w	r5, r2, #20
 800cd8a:	429d      	cmp	r5, r3
 800cd8c:	d91f      	bls.n	800cdce <_dtoa_r+0x2a6>
 800cd8e:	6041      	str	r1, [r0, #4]
 800cd90:	4658      	mov	r0, fp
 800cd92:	f000 fd8d 	bl	800d8b0 <_Balloc>
 800cd96:	4682      	mov	sl, r0
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d13b      	bne.n	800ce14 <_dtoa_r+0x2ec>
 800cd9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ce08 <_dtoa_r+0x2e0>)
 800cd9e:	4602      	mov	r2, r0
 800cda0:	f240 11af 	movw	r1, #431	@ 0x1af
 800cda4:	e6d7      	b.n	800cb56 <_dtoa_r+0x2e>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e7e0      	b.n	800cd6c <_dtoa_r+0x244>
 800cdaa:	2401      	movs	r4, #1
 800cdac:	2300      	movs	r3, #0
 800cdae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cdb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	9307      	str	r3, [sp, #28]
 800cdbc:	2312      	movs	r3, #18
 800cdbe:	e7d0      	b.n	800cd62 <_dtoa_r+0x23a>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdc4:	e7f5      	b.n	800cdb2 <_dtoa_r+0x28a>
 800cdc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	9307      	str	r3, [sp, #28]
 800cdcc:	e7d7      	b.n	800cd7e <_dtoa_r+0x256>
 800cdce:	3101      	adds	r1, #1
 800cdd0:	0052      	lsls	r2, r2, #1
 800cdd2:	e7d8      	b.n	800cd86 <_dtoa_r+0x25e>
 800cdd4:	f3af 8000 	nop.w
 800cdd8:	636f4361 	.word	0x636f4361
 800cddc:	3fd287a7 	.word	0x3fd287a7
 800cde0:	8b60c8b3 	.word	0x8b60c8b3
 800cde4:	3fc68a28 	.word	0x3fc68a28
 800cde8:	509f79fb 	.word	0x509f79fb
 800cdec:	3fd34413 	.word	0x3fd34413
 800cdf0:	080109a3 	.word	0x080109a3
 800cdf4:	080109ba 	.word	0x080109ba
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	0801096e 	.word	0x0801096e
 800ce00:	3ff80000 	.word	0x3ff80000
 800ce04:	08010ab0 	.word	0x08010ab0
 800ce08:	08010a12 	.word	0x08010a12
 800ce0c:	0801099f 	.word	0x0801099f
 800ce10:	0801096d 	.word	0x0801096d
 800ce14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce18:	6018      	str	r0, [r3, #0]
 800ce1a:	9b07      	ldr	r3, [sp, #28]
 800ce1c:	2b0e      	cmp	r3, #14
 800ce1e:	f200 80a4 	bhi.w	800cf6a <_dtoa_r+0x442>
 800ce22:	2c00      	cmp	r4, #0
 800ce24:	f000 80a1 	beq.w	800cf6a <_dtoa_r+0x442>
 800ce28:	2f00      	cmp	r7, #0
 800ce2a:	dd33      	ble.n	800ce94 <_dtoa_r+0x36c>
 800ce2c:	f007 020f 	and.w	r2, r7, #15
 800ce30:	4bac      	ldr	r3, [pc, #688]	@ (800d0e4 <_dtoa_r+0x5bc>)
 800ce32:	05f8      	lsls	r0, r7, #23
 800ce34:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ce38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3c:	ed93 7b00 	vldr	d7, [r3]
 800ce40:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce44:	d516      	bpl.n	800ce74 <_dtoa_r+0x34c>
 800ce46:	4ba8      	ldr	r3, [pc, #672]	@ (800d0e8 <_dtoa_r+0x5c0>)
 800ce48:	f004 040f 	and.w	r4, r4, #15
 800ce4c:	2603      	movs	r6, #3
 800ce4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce56:	f7f3 fd0d 	bl	8000874 <__aeabi_ddiv>
 800ce5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5e:	4da2      	ldr	r5, [pc, #648]	@ (800d0e8 <_dtoa_r+0x5c0>)
 800ce60:	b954      	cbnz	r4, 800ce78 <_dtoa_r+0x350>
 800ce62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce6a:	f7f3 fd03 	bl	8000874 <__aeabi_ddiv>
 800ce6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce72:	e028      	b.n	800cec6 <_dtoa_r+0x39e>
 800ce74:	2602      	movs	r6, #2
 800ce76:	e7f2      	b.n	800ce5e <_dtoa_r+0x336>
 800ce78:	07e1      	lsls	r1, r4, #31
 800ce7a:	d508      	bpl.n	800ce8e <_dtoa_r+0x366>
 800ce7c:	3601      	adds	r6, #1
 800ce7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce86:	f7f3 fbcb 	bl	8000620 <__aeabi_dmul>
 800ce8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce8e:	1064      	asrs	r4, r4, #1
 800ce90:	3508      	adds	r5, #8
 800ce92:	e7e5      	b.n	800ce60 <_dtoa_r+0x338>
 800ce94:	f000 80d2 	beq.w	800d03c <_dtoa_r+0x514>
 800ce98:	427c      	negs	r4, r7
 800ce9a:	4b92      	ldr	r3, [pc, #584]	@ (800d0e4 <_dtoa_r+0x5bc>)
 800ce9c:	4d92      	ldr	r5, [pc, #584]	@ (800d0e8 <_dtoa_r+0x5c0>)
 800ce9e:	2602      	movs	r6, #2
 800cea0:	f004 020f 	and.w	r2, r4, #15
 800cea4:	1124      	asrs	r4, r4, #4
 800cea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 fbb5 	bl	8000620 <__aeabi_dmul>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cebc:	2c00      	cmp	r4, #0
 800cebe:	f040 80b2 	bne.w	800d026 <_dtoa_r+0x4fe>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1d3      	bne.n	800ce6e <_dtoa_r+0x346>
 800cec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 80b7 	beq.w	800d040 <_dtoa_r+0x518>
 800ced2:	2200      	movs	r2, #0
 800ced4:	4b85      	ldr	r3, [pc, #532]	@ (800d0ec <_dtoa_r+0x5c4>)
 800ced6:	4620      	mov	r0, r4
 800ced8:	4629      	mov	r1, r5
 800ceda:	f7f3 fe13 	bl	8000b04 <__aeabi_dcmplt>
 800cede:	2800      	cmp	r0, #0
 800cee0:	f000 80ae 	beq.w	800d040 <_dtoa_r+0x518>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80aa 	beq.w	800d040 <_dtoa_r+0x518>
 800ceec:	9b00      	ldr	r3, [sp, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	dd37      	ble.n	800cf62 <_dtoa_r+0x43a>
 800cef2:	1e7b      	subs	r3, r7, #1
 800cef4:	4620      	mov	r0, r4
 800cef6:	2200      	movs	r2, #0
 800cef8:	4629      	mov	r1, r5
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	3601      	adds	r6, #1
 800cefe:	4b7c      	ldr	r3, [pc, #496]	@ (800d0f0 <_dtoa_r+0x5c8>)
 800cf00:	f7f3 fb8e 	bl	8000620 <__aeabi_dmul>
 800cf04:	9c00      	ldr	r4, [sp, #0]
 800cf06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f7f3 fb1e 	bl	800054c <__aeabi_i2d>
 800cf10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf14:	f7f3 fb84 	bl	8000620 <__aeabi_dmul>
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4b76      	ldr	r3, [pc, #472]	@ (800d0f4 <_dtoa_r+0x5cc>)
 800cf1c:	f7f3 f9ca 	bl	80002b4 <__adddf3>
 800cf20:	4605      	mov	r5, r0
 800cf22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	f040 808d 	bne.w	800d046 <_dtoa_r+0x51e>
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	4b72      	ldr	r3, [pc, #456]	@ (800d0f8 <_dtoa_r+0x5d0>)
 800cf30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf34:	f7f3 f9bc 	bl	80002b0 <__aeabi_dsub>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf40:	462a      	mov	r2, r5
 800cf42:	4633      	mov	r3, r6
 800cf44:	f7f3 fdfc 	bl	8000b40 <__aeabi_dcmpgt>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	f040 828b 	bne.w	800d464 <_dtoa_r+0x93c>
 800cf4e:	462a      	mov	r2, r5
 800cf50:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf58:	f7f3 fdd4 	bl	8000b04 <__aeabi_dcmplt>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	f040 8128 	bne.w	800d1b2 <_dtoa_r+0x68a>
 800cf62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f2c0 815a 	blt.w	800d226 <_dtoa_r+0x6fe>
 800cf72:	2f0e      	cmp	r7, #14
 800cf74:	f300 8157 	bgt.w	800d226 <_dtoa_r+0x6fe>
 800cf78:	4b5a      	ldr	r3, [pc, #360]	@ (800d0e4 <_dtoa_r+0x5bc>)
 800cf7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf7e:	ed93 7b00 	vldr	d7, [r3]
 800cf82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	ed8d 7b00 	vstr	d7, [sp]
 800cf8a:	da03      	bge.n	800cf94 <_dtoa_r+0x46c>
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f340 8101 	ble.w	800d196 <_dtoa_r+0x66e>
 800cf94:	4656      	mov	r6, sl
 800cf96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fc67 	bl	8000874 <__aeabi_ddiv>
 800cfa6:	f7f3 fdeb 	bl	8000b80 <__aeabi_d2iz>
 800cfaa:	4680      	mov	r8, r0
 800cfac:	f7f3 face 	bl	800054c <__aeabi_i2d>
 800cfb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfb4:	f7f3 fb34 	bl	8000620 <__aeabi_dmul>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f7f3 f974 	bl	80002b0 <__aeabi_dsub>
 800cfc8:	9d07      	ldr	r5, [sp, #28]
 800cfca:	f806 4b01 	strb.w	r4, [r6], #1
 800cfce:	eba6 040a 	sub.w	r4, r6, sl
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	42a5      	cmp	r5, r4
 800cfd8:	f040 8117 	bne.w	800d20a <_dtoa_r+0x6e2>
 800cfdc:	f7f3 f96a 	bl	80002b4 <__adddf3>
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	460d      	mov	r5, r1
 800cfe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfe8:	f7f3 fdaa 	bl	8000b40 <__aeabi_dcmpgt>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	f040 80f9 	bne.w	800d1e4 <_dtoa_r+0x6bc>
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cffa:	f7f3 fd79 	bl	8000af0 <__aeabi_dcmpeq>
 800cffe:	b118      	cbz	r0, 800d008 <_dtoa_r+0x4e0>
 800d000:	f018 0f01 	tst.w	r8, #1
 800d004:	f040 80ee 	bne.w	800d1e4 <_dtoa_r+0x6bc>
 800d008:	4649      	mov	r1, r9
 800d00a:	4658      	mov	r0, fp
 800d00c:	f000 fc90 	bl	800d930 <_Bfree>
 800d010:	2300      	movs	r3, #0
 800d012:	3701      	adds	r7, #1
 800d014:	7033      	strb	r3, [r6, #0]
 800d016:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d018:	601f      	str	r7, [r3, #0]
 800d01a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 831d 	beq.w	800d65c <_dtoa_r+0xb34>
 800d022:	601e      	str	r6, [r3, #0]
 800d024:	e31a      	b.n	800d65c <_dtoa_r+0xb34>
 800d026:	07e2      	lsls	r2, r4, #31
 800d028:	d505      	bpl.n	800d036 <_dtoa_r+0x50e>
 800d02a:	3601      	adds	r6, #1
 800d02c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d030:	f7f3 faf6 	bl	8000620 <__aeabi_dmul>
 800d034:	2301      	movs	r3, #1
 800d036:	1064      	asrs	r4, r4, #1
 800d038:	3508      	adds	r5, #8
 800d03a:	e73f      	b.n	800cebc <_dtoa_r+0x394>
 800d03c:	2602      	movs	r6, #2
 800d03e:	e742      	b.n	800cec6 <_dtoa_r+0x39e>
 800d040:	9c07      	ldr	r4, [sp, #28]
 800d042:	9704      	str	r7, [sp, #16]
 800d044:	e761      	b.n	800cf0a <_dtoa_r+0x3e2>
 800d046:	4b27      	ldr	r3, [pc, #156]	@ (800d0e4 <_dtoa_r+0x5bc>)
 800d048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d04a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d04e:	4454      	add	r4, sl
 800d050:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d054:	2900      	cmp	r1, #0
 800d056:	d053      	beq.n	800d100 <_dtoa_r+0x5d8>
 800d058:	2000      	movs	r0, #0
 800d05a:	4928      	ldr	r1, [pc, #160]	@ (800d0fc <_dtoa_r+0x5d4>)
 800d05c:	f7f3 fc0a 	bl	8000874 <__aeabi_ddiv>
 800d060:	4633      	mov	r3, r6
 800d062:	4656      	mov	r6, sl
 800d064:	462a      	mov	r2, r5
 800d066:	f7f3 f923 	bl	80002b0 <__aeabi_dsub>
 800d06a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d072:	f7f3 fd85 	bl	8000b80 <__aeabi_d2iz>
 800d076:	4605      	mov	r5, r0
 800d078:	f7f3 fa68 	bl	800054c <__aeabi_i2d>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	3530      	adds	r5, #48	@ 0x30
 800d082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d086:	f7f3 f913 	bl	80002b0 <__aeabi_dsub>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	f806 5b01 	strb.w	r5, [r6], #1
 800d092:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d09a:	f7f3 fd33 	bl	8000b04 <__aeabi_dcmplt>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d171      	bne.n	800d186 <_dtoa_r+0x65e>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	4911      	ldr	r1, [pc, #68]	@ (800d0ec <_dtoa_r+0x5c4>)
 800d0a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0aa:	f7f3 f901 	bl	80002b0 <__aeabi_dsub>
 800d0ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0b2:	f7f3 fd27 	bl	8000b04 <__aeabi_dcmplt>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f040 8095 	bne.w	800d1e6 <_dtoa_r+0x6be>
 800d0bc:	42a6      	cmp	r6, r4
 800d0be:	f43f af50 	beq.w	800cf62 <_dtoa_r+0x43a>
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f0 <_dtoa_r+0x5c8>)
 800d0c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0ca:	f7f3 faa9 	bl	8000620 <__aeabi_dmul>
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <_dtoa_r+0x5c8>)
 800d0d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0da:	f7f3 faa1 	bl	8000620 <__aeabi_dmul>
 800d0de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0e2:	e7c4      	b.n	800d06e <_dtoa_r+0x546>
 800d0e4:	08010ab0 	.word	0x08010ab0
 800d0e8:	08010a88 	.word	0x08010a88
 800d0ec:	3ff00000 	.word	0x3ff00000
 800d0f0:	40240000 	.word	0x40240000
 800d0f4:	401c0000 	.word	0x401c0000
 800d0f8:	40140000 	.word	0x40140000
 800d0fc:	3fe00000 	.word	0x3fe00000
 800d100:	4631      	mov	r1, r6
 800d102:	4656      	mov	r6, sl
 800d104:	4628      	mov	r0, r5
 800d106:	f7f3 fa8b 	bl	8000620 <__aeabi_dmul>
 800d10a:	9415      	str	r4, [sp, #84]	@ 0x54
 800d10c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d114:	f7f3 fd34 	bl	8000b80 <__aeabi_d2iz>
 800d118:	4605      	mov	r5, r0
 800d11a:	f7f3 fa17 	bl	800054c <__aeabi_i2d>
 800d11e:	4602      	mov	r2, r0
 800d120:	3530      	adds	r5, #48	@ 0x30
 800d122:	460b      	mov	r3, r1
 800d124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d128:	f7f3 f8c2 	bl	80002b0 <__aeabi_dsub>
 800d12c:	f806 5b01 	strb.w	r5, [r6], #1
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	42a6      	cmp	r6, r4
 800d136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d13a:	f04f 0200 	mov.w	r2, #0
 800d13e:	d124      	bne.n	800d18a <_dtoa_r+0x662>
 800d140:	4bac      	ldr	r3, [pc, #688]	@ (800d3f4 <_dtoa_r+0x8cc>)
 800d142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d146:	f7f3 f8b5 	bl	80002b4 <__adddf3>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d152:	f7f3 fcf5 	bl	8000b40 <__aeabi_dcmpgt>
 800d156:	2800      	cmp	r0, #0
 800d158:	d145      	bne.n	800d1e6 <_dtoa_r+0x6be>
 800d15a:	2000      	movs	r0, #0
 800d15c:	49a5      	ldr	r1, [pc, #660]	@ (800d3f4 <_dtoa_r+0x8cc>)
 800d15e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d162:	f7f3 f8a5 	bl	80002b0 <__aeabi_dsub>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d16e:	f7f3 fcc9 	bl	8000b04 <__aeabi_dcmplt>
 800d172:	2800      	cmp	r0, #0
 800d174:	f43f aef5 	beq.w	800cf62 <_dtoa_r+0x43a>
 800d178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d17a:	1e73      	subs	r3, r6, #1
 800d17c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d17e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d182:	2b30      	cmp	r3, #48	@ 0x30
 800d184:	d0f8      	beq.n	800d178 <_dtoa_r+0x650>
 800d186:	9f04      	ldr	r7, [sp, #16]
 800d188:	e73e      	b.n	800d008 <_dtoa_r+0x4e0>
 800d18a:	4b9b      	ldr	r3, [pc, #620]	@ (800d3f8 <_dtoa_r+0x8d0>)
 800d18c:	f7f3 fa48 	bl	8000620 <__aeabi_dmul>
 800d190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d194:	e7bc      	b.n	800d110 <_dtoa_r+0x5e8>
 800d196:	d10c      	bne.n	800d1b2 <_dtoa_r+0x68a>
 800d198:	2200      	movs	r2, #0
 800d19a:	4b98      	ldr	r3, [pc, #608]	@ (800d3fc <_dtoa_r+0x8d4>)
 800d19c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1a0:	f7f3 fa3e 	bl	8000620 <__aeabi_dmul>
 800d1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1a8:	f7f3 fcc0 	bl	8000b2c <__aeabi_dcmpge>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	f000 8157 	beq.w	800d460 <_dtoa_r+0x938>
 800d1b2:	2400      	movs	r4, #0
 800d1b4:	4625      	mov	r5, r4
 800d1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1b8:	4656      	mov	r6, sl
 800d1ba:	43db      	mvns	r3, r3
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	2700      	movs	r7, #0
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	4658      	mov	r0, fp
 800d1c4:	f000 fbb4 	bl	800d930 <_Bfree>
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	d0dc      	beq.n	800d186 <_dtoa_r+0x65e>
 800d1cc:	b12f      	cbz	r7, 800d1da <_dtoa_r+0x6b2>
 800d1ce:	42af      	cmp	r7, r5
 800d1d0:	d003      	beq.n	800d1da <_dtoa_r+0x6b2>
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	4658      	mov	r0, fp
 800d1d6:	f000 fbab 	bl	800d930 <_Bfree>
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f000 fba7 	bl	800d930 <_Bfree>
 800d1e2:	e7d0      	b.n	800d186 <_dtoa_r+0x65e>
 800d1e4:	9704      	str	r7, [sp, #16]
 800d1e6:	4633      	mov	r3, r6
 800d1e8:	461e      	mov	r6, r3
 800d1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ee:	2a39      	cmp	r2, #57	@ 0x39
 800d1f0:	d107      	bne.n	800d202 <_dtoa_r+0x6da>
 800d1f2:	459a      	cmp	sl, r3
 800d1f4:	d1f8      	bne.n	800d1e8 <_dtoa_r+0x6c0>
 800d1f6:	9a04      	ldr	r2, [sp, #16]
 800d1f8:	3201      	adds	r2, #1
 800d1fa:	9204      	str	r2, [sp, #16]
 800d1fc:	2230      	movs	r2, #48	@ 0x30
 800d1fe:	f88a 2000 	strb.w	r2, [sl]
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	3201      	adds	r2, #1
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	e7bd      	b.n	800d186 <_dtoa_r+0x65e>
 800d20a:	2200      	movs	r2, #0
 800d20c:	4b7a      	ldr	r3, [pc, #488]	@ (800d3f8 <_dtoa_r+0x8d0>)
 800d20e:	f7f3 fa07 	bl	8000620 <__aeabi_dmul>
 800d212:	2200      	movs	r2, #0
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	460d      	mov	r5, r1
 800d21a:	f7f3 fc69 	bl	8000af0 <__aeabi_dcmpeq>
 800d21e:	2800      	cmp	r0, #0
 800d220:	f43f aebb 	beq.w	800cf9a <_dtoa_r+0x472>
 800d224:	e6f0      	b.n	800d008 <_dtoa_r+0x4e0>
 800d226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d228:	2a00      	cmp	r2, #0
 800d22a:	f000 80db 	beq.w	800d3e4 <_dtoa_r+0x8bc>
 800d22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d230:	2a01      	cmp	r2, #1
 800d232:	f300 80bf 	bgt.w	800d3b4 <_dtoa_r+0x88c>
 800d236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d238:	2a00      	cmp	r2, #0
 800d23a:	f000 80b7 	beq.w	800d3ac <_dtoa_r+0x884>
 800d23e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d244:	4646      	mov	r6, r8
 800d246:	9a08      	ldr	r2, [sp, #32]
 800d248:	2101      	movs	r1, #1
 800d24a:	4658      	mov	r0, fp
 800d24c:	4498      	add	r8, r3
 800d24e:	441a      	add	r2, r3
 800d250:	9208      	str	r2, [sp, #32]
 800d252:	f000 fc6d 	bl	800db30 <__i2b>
 800d256:	4605      	mov	r5, r0
 800d258:	b15e      	cbz	r6, 800d272 <_dtoa_r+0x74a>
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd08      	ble.n	800d272 <_dtoa_r+0x74a>
 800d260:	42b3      	cmp	r3, r6
 800d262:	9a08      	ldr	r2, [sp, #32]
 800d264:	bfa8      	it	ge
 800d266:	4633      	movge	r3, r6
 800d268:	eba8 0803 	sub.w	r8, r8, r3
 800d26c:	1af6      	subs	r6, r6, r3
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	9308      	str	r3, [sp, #32]
 800d272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d274:	b1f3      	cbz	r3, 800d2b4 <_dtoa_r+0x78c>
 800d276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80b7 	beq.w	800d3ec <_dtoa_r+0x8c4>
 800d27e:	b18c      	cbz	r4, 800d2a4 <_dtoa_r+0x77c>
 800d280:	4629      	mov	r1, r5
 800d282:	4622      	mov	r2, r4
 800d284:	4658      	mov	r0, fp
 800d286:	f000 fd13 	bl	800dcb0 <__pow5mult>
 800d28a:	464a      	mov	r2, r9
 800d28c:	4601      	mov	r1, r0
 800d28e:	4605      	mov	r5, r0
 800d290:	4658      	mov	r0, fp
 800d292:	f000 fc63 	bl	800db5c <__multiply>
 800d296:	4649      	mov	r1, r9
 800d298:	9004      	str	r0, [sp, #16]
 800d29a:	4658      	mov	r0, fp
 800d29c:	f000 fb48 	bl	800d930 <_Bfree>
 800d2a0:	9b04      	ldr	r3, [sp, #16]
 800d2a2:	4699      	mov	r9, r3
 800d2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2a6:	1b1a      	subs	r2, r3, r4
 800d2a8:	d004      	beq.n	800d2b4 <_dtoa_r+0x78c>
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4658      	mov	r0, fp
 800d2ae:	f000 fcff 	bl	800dcb0 <__pow5mult>
 800d2b2:	4681      	mov	r9, r0
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	f000 fc3a 	bl	800db30 <__i2b>
 800d2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2be:	4604      	mov	r4, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 81cf 	beq.w	800d664 <_dtoa_r+0xb3c>
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4601      	mov	r1, r0
 800d2ca:	4658      	mov	r0, fp
 800d2cc:	f000 fcf0 	bl	800dcb0 <__pow5mult>
 800d2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	f300 8095 	bgt.w	800d404 <_dtoa_r+0x8dc>
 800d2da:	9b02      	ldr	r3, [sp, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f040 8087 	bne.w	800d3f0 <_dtoa_r+0x8c8>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 8089 	bne.w	800d400 <_dtoa_r+0x8d8>
 800d2ee:	9b03      	ldr	r3, [sp, #12]
 800d2f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2f4:	0d1b      	lsrs	r3, r3, #20
 800d2f6:	051b      	lsls	r3, r3, #20
 800d2f8:	b12b      	cbz	r3, 800d306 <_dtoa_r+0x7de>
 800d2fa:	9b08      	ldr	r3, [sp, #32]
 800d2fc:	f108 0801 	add.w	r8, r8, #1
 800d300:	3301      	adds	r3, #1
 800d302:	9308      	str	r3, [sp, #32]
 800d304:	2301      	movs	r3, #1
 800d306:	930a      	str	r3, [sp, #40]	@ 0x28
 800d308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 81b0 	beq.w	800d670 <_dtoa_r+0xb48>
 800d310:	6923      	ldr	r3, [r4, #16]
 800d312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d316:	6918      	ldr	r0, [r3, #16]
 800d318:	f000 fbbe 	bl	800da98 <__hi0bits>
 800d31c:	f1c0 0020 	rsb	r0, r0, #32
 800d320:	9b08      	ldr	r3, [sp, #32]
 800d322:	4418      	add	r0, r3
 800d324:	f010 001f 	ands.w	r0, r0, #31
 800d328:	d077      	beq.n	800d41a <_dtoa_r+0x8f2>
 800d32a:	f1c0 0320 	rsb	r3, r0, #32
 800d32e:	2b04      	cmp	r3, #4
 800d330:	dd6b      	ble.n	800d40a <_dtoa_r+0x8e2>
 800d332:	f1c0 001c 	rsb	r0, r0, #28
 800d336:	9b08      	ldr	r3, [sp, #32]
 800d338:	4480      	add	r8, r0
 800d33a:	4403      	add	r3, r0
 800d33c:	4406      	add	r6, r0
 800d33e:	9308      	str	r3, [sp, #32]
 800d340:	f1b8 0f00 	cmp.w	r8, #0
 800d344:	dd05      	ble.n	800d352 <_dtoa_r+0x82a>
 800d346:	4649      	mov	r1, r9
 800d348:	4642      	mov	r2, r8
 800d34a:	4658      	mov	r0, fp
 800d34c:	f000 fd0a 	bl	800dd64 <__lshift>
 800d350:	4681      	mov	r9, r0
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	2b00      	cmp	r3, #0
 800d356:	dd05      	ble.n	800d364 <_dtoa_r+0x83c>
 800d358:	4621      	mov	r1, r4
 800d35a:	461a      	mov	r2, r3
 800d35c:	4658      	mov	r0, fp
 800d35e:	f000 fd01 	bl	800dd64 <__lshift>
 800d362:	4604      	mov	r4, r0
 800d364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d366:	2b00      	cmp	r3, #0
 800d368:	d059      	beq.n	800d41e <_dtoa_r+0x8f6>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4648      	mov	r0, r9
 800d36e:	f000 fd65 	bl	800de3c <__mcmp>
 800d372:	2800      	cmp	r0, #0
 800d374:	da53      	bge.n	800d41e <_dtoa_r+0x8f6>
 800d376:	1e7b      	subs	r3, r7, #1
 800d378:	4649      	mov	r1, r9
 800d37a:	220a      	movs	r2, #10
 800d37c:	4658      	mov	r0, fp
 800d37e:	9304      	str	r3, [sp, #16]
 800d380:	2300      	movs	r3, #0
 800d382:	f000 faf7 	bl	800d974 <__multadd>
 800d386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d388:	4681      	mov	r9, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 8172 	beq.w	800d674 <_dtoa_r+0xb4c>
 800d390:	2300      	movs	r3, #0
 800d392:	4629      	mov	r1, r5
 800d394:	220a      	movs	r2, #10
 800d396:	4658      	mov	r0, fp
 800d398:	f000 faec 	bl	800d974 <__multadd>
 800d39c:	9b00      	ldr	r3, [sp, #0]
 800d39e:	4605      	mov	r5, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dc67      	bgt.n	800d474 <_dtoa_r+0x94c>
 800d3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	dc41      	bgt.n	800d42e <_dtoa_r+0x906>
 800d3aa:	e063      	b.n	800d474 <_dtoa_r+0x94c>
 800d3ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d3b2:	e746      	b.n	800d242 <_dtoa_r+0x71a>
 800d3b4:	9b07      	ldr	r3, [sp, #28]
 800d3b6:	1e5c      	subs	r4, r3, #1
 800d3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ba:	42a3      	cmp	r3, r4
 800d3bc:	bfb7      	itett	lt
 800d3be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d3c0:	1b1c      	subge	r4, r3, r4
 800d3c2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d3c4:	1ae3      	sublt	r3, r4, r3
 800d3c6:	bfbe      	ittt	lt
 800d3c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d3ca:	2400      	movlt	r4, #0
 800d3cc:	18d2      	addlt	r2, r2, r3
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	bfb8      	it	lt
 800d3d2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bfb5      	itete	lt
 800d3d8:	eba8 0603 	sublt.w	r6, r8, r3
 800d3dc:	4646      	movge	r6, r8
 800d3de:	2300      	movlt	r3, #0
 800d3e0:	9b07      	ldrge	r3, [sp, #28]
 800d3e2:	e730      	b.n	800d246 <_dtoa_r+0x71e>
 800d3e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3e6:	4646      	mov	r6, r8
 800d3e8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d3ea:	e735      	b.n	800d258 <_dtoa_r+0x730>
 800d3ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ee:	e75c      	b.n	800d2aa <_dtoa_r+0x782>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e788      	b.n	800d306 <_dtoa_r+0x7de>
 800d3f4:	3fe00000 	.word	0x3fe00000
 800d3f8:	40240000 	.word	0x40240000
 800d3fc:	40140000 	.word	0x40140000
 800d400:	9b02      	ldr	r3, [sp, #8]
 800d402:	e780      	b.n	800d306 <_dtoa_r+0x7de>
 800d404:	2300      	movs	r3, #0
 800d406:	930a      	str	r3, [sp, #40]	@ 0x28
 800d408:	e782      	b.n	800d310 <_dtoa_r+0x7e8>
 800d40a:	d099      	beq.n	800d340 <_dtoa_r+0x818>
 800d40c:	331c      	adds	r3, #28
 800d40e:	9a08      	ldr	r2, [sp, #32]
 800d410:	441a      	add	r2, r3
 800d412:	4498      	add	r8, r3
 800d414:	441e      	add	r6, r3
 800d416:	9208      	str	r2, [sp, #32]
 800d418:	e792      	b.n	800d340 <_dtoa_r+0x818>
 800d41a:	4603      	mov	r3, r0
 800d41c:	e7f6      	b.n	800d40c <_dtoa_r+0x8e4>
 800d41e:	9b07      	ldr	r3, [sp, #28]
 800d420:	9704      	str	r7, [sp, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	dc20      	bgt.n	800d468 <_dtoa_r+0x940>
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	dd1e      	ble.n	800d46c <_dtoa_r+0x944>
 800d42e:	9b00      	ldr	r3, [sp, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	f47f aec0 	bne.w	800d1b6 <_dtoa_r+0x68e>
 800d436:	4621      	mov	r1, r4
 800d438:	2205      	movs	r2, #5
 800d43a:	4658      	mov	r0, fp
 800d43c:	f000 fa9a 	bl	800d974 <__multadd>
 800d440:	4601      	mov	r1, r0
 800d442:	4604      	mov	r4, r0
 800d444:	4648      	mov	r0, r9
 800d446:	f000 fcf9 	bl	800de3c <__mcmp>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f77f aeb3 	ble.w	800d1b6 <_dtoa_r+0x68e>
 800d450:	2331      	movs	r3, #49	@ 0x31
 800d452:	4656      	mov	r6, sl
 800d454:	f806 3b01 	strb.w	r3, [r6], #1
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	3301      	adds	r3, #1
 800d45c:	9304      	str	r3, [sp, #16]
 800d45e:	e6ae      	b.n	800d1be <_dtoa_r+0x696>
 800d460:	9c07      	ldr	r4, [sp, #28]
 800d462:	9704      	str	r7, [sp, #16]
 800d464:	4625      	mov	r5, r4
 800d466:	e7f3      	b.n	800d450 <_dtoa_r+0x928>
 800d468:	9b07      	ldr	r3, [sp, #28]
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 8104 	beq.w	800d67c <_dtoa_r+0xb54>
 800d474:	2e00      	cmp	r6, #0
 800d476:	dd05      	ble.n	800d484 <_dtoa_r+0x95c>
 800d478:	4629      	mov	r1, r5
 800d47a:	4632      	mov	r2, r6
 800d47c:	4658      	mov	r0, fp
 800d47e:	f000 fc71 	bl	800dd64 <__lshift>
 800d482:	4605      	mov	r5, r0
 800d484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d486:	2b00      	cmp	r3, #0
 800d488:	d05a      	beq.n	800d540 <_dtoa_r+0xa18>
 800d48a:	6869      	ldr	r1, [r5, #4]
 800d48c:	4658      	mov	r0, fp
 800d48e:	f000 fa0f 	bl	800d8b0 <_Balloc>
 800d492:	4606      	mov	r6, r0
 800d494:	b928      	cbnz	r0, 800d4a2 <_dtoa_r+0x97a>
 800d496:	4b84      	ldr	r3, [pc, #528]	@ (800d6a8 <_dtoa_r+0xb80>)
 800d498:	4602      	mov	r2, r0
 800d49a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d49e:	f7ff bb5a 	b.w	800cb56 <_dtoa_r+0x2e>
 800d4a2:	692a      	ldr	r2, [r5, #16]
 800d4a4:	f105 010c 	add.w	r1, r5, #12
 800d4a8:	300c      	adds	r0, #12
 800d4aa:	3202      	adds	r2, #2
 800d4ac:	0092      	lsls	r2, r2, #2
 800d4ae:	f7ff fa9a 	bl	800c9e6 <memcpy>
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f000 fc54 	bl	800dd64 <__lshift>
 800d4bc:	f10a 0301 	add.w	r3, sl, #1
 800d4c0:	462f      	mov	r7, r5
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	9307      	str	r3, [sp, #28]
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	4453      	add	r3, sl
 800d4ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4cc:	9b02      	ldr	r3, [sp, #8]
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4d4:	9b07      	ldr	r3, [sp, #28]
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4648      	mov	r0, r9
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	f7ff fa95 	bl	800ca0c <quorem>
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	9002      	str	r0, [sp, #8]
 800d4e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4ea:	4648      	mov	r0, r9
 800d4ec:	f000 fca6 	bl	800de3c <__mcmp>
 800d4f0:	462a      	mov	r2, r5
 800d4f2:	9008      	str	r0, [sp, #32]
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4658      	mov	r0, fp
 800d4f8:	f000 fcbc 	bl	800de74 <__mdiff>
 800d4fc:	68c2      	ldr	r2, [r0, #12]
 800d4fe:	4606      	mov	r6, r0
 800d500:	bb02      	cbnz	r2, 800d544 <_dtoa_r+0xa1c>
 800d502:	4601      	mov	r1, r0
 800d504:	4648      	mov	r0, r9
 800d506:	f000 fc99 	bl	800de3c <__mcmp>
 800d50a:	4602      	mov	r2, r0
 800d50c:	4631      	mov	r1, r6
 800d50e:	4658      	mov	r0, fp
 800d510:	920e      	str	r2, [sp, #56]	@ 0x38
 800d512:	f000 fa0d 	bl	800d930 <_Bfree>
 800d516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d51a:	9e07      	ldr	r6, [sp, #28]
 800d51c:	ea43 0102 	orr.w	r1, r3, r2
 800d520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d522:	4319      	orrs	r1, r3
 800d524:	d110      	bne.n	800d548 <_dtoa_r+0xa20>
 800d526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d52a:	d029      	beq.n	800d580 <_dtoa_r+0xa58>
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	dd02      	ble.n	800d538 <_dtoa_r+0xa10>
 800d532:	9b02      	ldr	r3, [sp, #8]
 800d534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d538:	9b00      	ldr	r3, [sp, #0]
 800d53a:	f883 8000 	strb.w	r8, [r3]
 800d53e:	e63f      	b.n	800d1c0 <_dtoa_r+0x698>
 800d540:	4628      	mov	r0, r5
 800d542:	e7bb      	b.n	800d4bc <_dtoa_r+0x994>
 800d544:	2201      	movs	r2, #1
 800d546:	e7e1      	b.n	800d50c <_dtoa_r+0x9e4>
 800d548:	9b08      	ldr	r3, [sp, #32]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	db04      	blt.n	800d558 <_dtoa_r+0xa30>
 800d54e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d550:	430b      	orrs	r3, r1
 800d552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d554:	430b      	orrs	r3, r1
 800d556:	d120      	bne.n	800d59a <_dtoa_r+0xa72>
 800d558:	2a00      	cmp	r2, #0
 800d55a:	dded      	ble.n	800d538 <_dtoa_r+0xa10>
 800d55c:	4649      	mov	r1, r9
 800d55e:	2201      	movs	r2, #1
 800d560:	4658      	mov	r0, fp
 800d562:	f000 fbff 	bl	800dd64 <__lshift>
 800d566:	4621      	mov	r1, r4
 800d568:	4681      	mov	r9, r0
 800d56a:	f000 fc67 	bl	800de3c <__mcmp>
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc03      	bgt.n	800d57a <_dtoa_r+0xa52>
 800d572:	d1e1      	bne.n	800d538 <_dtoa_r+0xa10>
 800d574:	f018 0f01 	tst.w	r8, #1
 800d578:	d0de      	beq.n	800d538 <_dtoa_r+0xa10>
 800d57a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d57e:	d1d8      	bne.n	800d532 <_dtoa_r+0xa0a>
 800d580:	2339      	movs	r3, #57	@ 0x39
 800d582:	9a00      	ldr	r2, [sp, #0]
 800d584:	7013      	strb	r3, [r2, #0]
 800d586:	4633      	mov	r3, r6
 800d588:	461e      	mov	r6, r3
 800d58a:	3b01      	subs	r3, #1
 800d58c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d590:	2a39      	cmp	r2, #57	@ 0x39
 800d592:	d052      	beq.n	800d63a <_dtoa_r+0xb12>
 800d594:	3201      	adds	r2, #1
 800d596:	701a      	strb	r2, [r3, #0]
 800d598:	e612      	b.n	800d1c0 <_dtoa_r+0x698>
 800d59a:	2a00      	cmp	r2, #0
 800d59c:	dd07      	ble.n	800d5ae <_dtoa_r+0xa86>
 800d59e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d5a2:	d0ed      	beq.n	800d580 <_dtoa_r+0xa58>
 800d5a4:	f108 0301 	add.w	r3, r8, #1
 800d5a8:	9a00      	ldr	r2, [sp, #0]
 800d5aa:	7013      	strb	r3, [r2, #0]
 800d5ac:	e608      	b.n	800d1c0 <_dtoa_r+0x698>
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	9a07      	ldr	r2, [sp, #28]
 800d5b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d028      	beq.n	800d60e <_dtoa_r+0xae6>
 800d5bc:	4649      	mov	r1, r9
 800d5be:	2300      	movs	r3, #0
 800d5c0:	220a      	movs	r2, #10
 800d5c2:	4658      	mov	r0, fp
 800d5c4:	f000 f9d6 	bl	800d974 <__multadd>
 800d5c8:	42af      	cmp	r7, r5
 800d5ca:	4681      	mov	r9, r0
 800d5cc:	f04f 0300 	mov.w	r3, #0
 800d5d0:	f04f 020a 	mov.w	r2, #10
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	4658      	mov	r0, fp
 800d5d8:	d107      	bne.n	800d5ea <_dtoa_r+0xac2>
 800d5da:	f000 f9cb 	bl	800d974 <__multadd>
 800d5de:	4607      	mov	r7, r0
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	9b07      	ldr	r3, [sp, #28]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	e774      	b.n	800d4d4 <_dtoa_r+0x9ac>
 800d5ea:	f000 f9c3 	bl	800d974 <__multadd>
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4607      	mov	r7, r0
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	4658      	mov	r0, fp
 800d5f8:	f000 f9bc 	bl	800d974 <__multadd>
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	e7f0      	b.n	800d5e2 <_dtoa_r+0xaba>
 800d600:	9b00      	ldr	r3, [sp, #0]
 800d602:	2700      	movs	r7, #0
 800d604:	2b00      	cmp	r3, #0
 800d606:	bfcc      	ite	gt
 800d608:	461e      	movgt	r6, r3
 800d60a:	2601      	movle	r6, #1
 800d60c:	4456      	add	r6, sl
 800d60e:	4649      	mov	r1, r9
 800d610:	2201      	movs	r2, #1
 800d612:	4658      	mov	r0, fp
 800d614:	f000 fba6 	bl	800dd64 <__lshift>
 800d618:	4621      	mov	r1, r4
 800d61a:	4681      	mov	r9, r0
 800d61c:	f000 fc0e 	bl	800de3c <__mcmp>
 800d620:	2800      	cmp	r0, #0
 800d622:	dcb0      	bgt.n	800d586 <_dtoa_r+0xa5e>
 800d624:	d102      	bne.n	800d62c <_dtoa_r+0xb04>
 800d626:	f018 0f01 	tst.w	r8, #1
 800d62a:	d1ac      	bne.n	800d586 <_dtoa_r+0xa5e>
 800d62c:	4633      	mov	r3, r6
 800d62e:	461e      	mov	r6, r3
 800d630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d634:	2a30      	cmp	r2, #48	@ 0x30
 800d636:	d0fa      	beq.n	800d62e <_dtoa_r+0xb06>
 800d638:	e5c2      	b.n	800d1c0 <_dtoa_r+0x698>
 800d63a:	459a      	cmp	sl, r3
 800d63c:	d1a4      	bne.n	800d588 <_dtoa_r+0xa60>
 800d63e:	9b04      	ldr	r3, [sp, #16]
 800d640:	3301      	adds	r3, #1
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	2331      	movs	r3, #49	@ 0x31
 800d646:	f88a 3000 	strb.w	r3, [sl]
 800d64a:	e5b9      	b.n	800d1c0 <_dtoa_r+0x698>
 800d64c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d64e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d6ac <_dtoa_r+0xb84>
 800d652:	b11b      	cbz	r3, 800d65c <_dtoa_r+0xb34>
 800d654:	f10a 0308 	add.w	r3, sl, #8
 800d658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	4650      	mov	r0, sl
 800d65e:	b019      	add	sp, #100	@ 0x64
 800d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d666:	2b01      	cmp	r3, #1
 800d668:	f77f ae37 	ble.w	800d2da <_dtoa_r+0x7b2>
 800d66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d66e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d670:	2001      	movs	r0, #1
 800d672:	e655      	b.n	800d320 <_dtoa_r+0x7f8>
 800d674:	9b00      	ldr	r3, [sp, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	f77f aed6 	ble.w	800d428 <_dtoa_r+0x900>
 800d67c:	4656      	mov	r6, sl
 800d67e:	4621      	mov	r1, r4
 800d680:	4648      	mov	r0, r9
 800d682:	f7ff f9c3 	bl	800ca0c <quorem>
 800d686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d68a:	9b00      	ldr	r3, [sp, #0]
 800d68c:	f806 8b01 	strb.w	r8, [r6], #1
 800d690:	eba6 020a 	sub.w	r2, r6, sl
 800d694:	4293      	cmp	r3, r2
 800d696:	ddb3      	ble.n	800d600 <_dtoa_r+0xad8>
 800d698:	4649      	mov	r1, r9
 800d69a:	2300      	movs	r3, #0
 800d69c:	220a      	movs	r2, #10
 800d69e:	4658      	mov	r0, fp
 800d6a0:	f000 f968 	bl	800d974 <__multadd>
 800d6a4:	4681      	mov	r9, r0
 800d6a6:	e7ea      	b.n	800d67e <_dtoa_r+0xb56>
 800d6a8:	08010a12 	.word	0x08010a12
 800d6ac:	08010996 	.word	0x08010996

0800d6b0 <_free_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d041      	beq.n	800d73c <_free_r+0x8c>
 800d6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6bc:	1f0c      	subs	r4, r1, #4
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfb8      	it	lt
 800d6c2:	18e4      	addlt	r4, r4, r3
 800d6c4:	f000 f8e8 	bl	800d898 <__malloc_lock>
 800d6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d740 <_free_r+0x90>)
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	b933      	cbnz	r3, 800d6dc <_free_r+0x2c>
 800d6ce:	6063      	str	r3, [r4, #4]
 800d6d0:	6014      	str	r4, [r2, #0]
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d8:	f000 b8e4 	b.w	800d8a4 <__malloc_unlock>
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	d908      	bls.n	800d6f2 <_free_r+0x42>
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	1821      	adds	r1, r4, r0
 800d6e4:	428b      	cmp	r3, r1
 800d6e6:	bf01      	itttt	eq
 800d6e8:	6819      	ldreq	r1, [r3, #0]
 800d6ea:	685b      	ldreq	r3, [r3, #4]
 800d6ec:	1809      	addeq	r1, r1, r0
 800d6ee:	6021      	streq	r1, [r4, #0]
 800d6f0:	e7ed      	b.n	800d6ce <_free_r+0x1e>
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b10b      	cbz	r3, 800d6fc <_free_r+0x4c>
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d9fa      	bls.n	800d6f2 <_free_r+0x42>
 800d6fc:	6811      	ldr	r1, [r2, #0]
 800d6fe:	1850      	adds	r0, r2, r1
 800d700:	42a0      	cmp	r0, r4
 800d702:	d10b      	bne.n	800d71c <_free_r+0x6c>
 800d704:	6820      	ldr	r0, [r4, #0]
 800d706:	4401      	add	r1, r0
 800d708:	1850      	adds	r0, r2, r1
 800d70a:	6011      	str	r1, [r2, #0]
 800d70c:	4283      	cmp	r3, r0
 800d70e:	d1e0      	bne.n	800d6d2 <_free_r+0x22>
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	4408      	add	r0, r1
 800d716:	6053      	str	r3, [r2, #4]
 800d718:	6010      	str	r0, [r2, #0]
 800d71a:	e7da      	b.n	800d6d2 <_free_r+0x22>
 800d71c:	d902      	bls.n	800d724 <_free_r+0x74>
 800d71e:	230c      	movs	r3, #12
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	e7d6      	b.n	800d6d2 <_free_r+0x22>
 800d724:	6820      	ldr	r0, [r4, #0]
 800d726:	1821      	adds	r1, r4, r0
 800d728:	428b      	cmp	r3, r1
 800d72a:	bf02      	ittt	eq
 800d72c:	6819      	ldreq	r1, [r3, #0]
 800d72e:	685b      	ldreq	r3, [r3, #4]
 800d730:	1809      	addeq	r1, r1, r0
 800d732:	6063      	str	r3, [r4, #4]
 800d734:	bf08      	it	eq
 800d736:	6021      	streq	r1, [r4, #0]
 800d738:	6054      	str	r4, [r2, #4]
 800d73a:	e7ca      	b.n	800d6d2 <_free_r+0x22>
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
 800d73e:	bf00      	nop
 800d740:	2003b3c0 	.word	0x2003b3c0

0800d744 <malloc>:
 800d744:	4b02      	ldr	r3, [pc, #8]	@ (800d750 <malloc+0xc>)
 800d746:	4601      	mov	r1, r0
 800d748:	6818      	ldr	r0, [r3, #0]
 800d74a:	f000 b825 	b.w	800d798 <_malloc_r>
 800d74e:	bf00      	nop
 800d750:	20000034 	.word	0x20000034

0800d754 <sbrk_aligned>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	4e0f      	ldr	r6, [pc, #60]	@ (800d794 <sbrk_aligned+0x40>)
 800d758:	460c      	mov	r4, r1
 800d75a:	4605      	mov	r5, r0
 800d75c:	6831      	ldr	r1, [r6, #0]
 800d75e:	b911      	cbnz	r1, 800d766 <sbrk_aligned+0x12>
 800d760:	f001 fd9c 	bl	800f29c <_sbrk_r>
 800d764:	6030      	str	r0, [r6, #0]
 800d766:	4621      	mov	r1, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	f001 fd97 	bl	800f29c <_sbrk_r>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d103      	bne.n	800d77a <sbrk_aligned+0x26>
 800d772:	f04f 34ff 	mov.w	r4, #4294967295
 800d776:	4620      	mov	r0, r4
 800d778:	bd70      	pop	{r4, r5, r6, pc}
 800d77a:	1cc4      	adds	r4, r0, #3
 800d77c:	f024 0403 	bic.w	r4, r4, #3
 800d780:	42a0      	cmp	r0, r4
 800d782:	d0f8      	beq.n	800d776 <sbrk_aligned+0x22>
 800d784:	1a21      	subs	r1, r4, r0
 800d786:	4628      	mov	r0, r5
 800d788:	f001 fd88 	bl	800f29c <_sbrk_r>
 800d78c:	3001      	adds	r0, #1
 800d78e:	d1f2      	bne.n	800d776 <sbrk_aligned+0x22>
 800d790:	e7ef      	b.n	800d772 <sbrk_aligned+0x1e>
 800d792:	bf00      	nop
 800d794:	2003b3bc 	.word	0x2003b3bc

0800d798 <_malloc_r>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	1ccd      	adds	r5, r1, #3
 800d79e:	4606      	mov	r6, r0
 800d7a0:	f025 0503 	bic.w	r5, r5, #3
 800d7a4:	3508      	adds	r5, #8
 800d7a6:	2d0c      	cmp	r5, #12
 800d7a8:	bf38      	it	cc
 800d7aa:	250c      	movcc	r5, #12
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	db01      	blt.n	800d7b4 <_malloc_r+0x1c>
 800d7b0:	42a9      	cmp	r1, r5
 800d7b2:	d904      	bls.n	800d7be <_malloc_r+0x26>
 800d7b4:	230c      	movs	r3, #12
 800d7b6:	6033      	str	r3, [r6, #0]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d894 <_malloc_r+0xfc>
 800d7c2:	f000 f869 	bl	800d898 <__malloc_lock>
 800d7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ca:	461c      	mov	r4, r3
 800d7cc:	bb44      	cbnz	r4, 800d820 <_malloc_r+0x88>
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f7ff ffbf 	bl	800d754 <sbrk_aligned>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	4604      	mov	r4, r0
 800d7da:	d158      	bne.n	800d88e <_malloc_r+0xf6>
 800d7dc:	f8d8 4000 	ldr.w	r4, [r8]
 800d7e0:	4627      	mov	r7, r4
 800d7e2:	2f00      	cmp	r7, #0
 800d7e4:	d143      	bne.n	800d86e <_malloc_r+0xd6>
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	d04b      	beq.n	800d882 <_malloc_r+0xea>
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	eb04 0903 	add.w	r9, r4, r3
 800d7f4:	f001 fd52 	bl	800f29c <_sbrk_r>
 800d7f8:	4581      	cmp	r9, r0
 800d7fa:	d142      	bne.n	800d882 <_malloc_r+0xea>
 800d7fc:	6821      	ldr	r1, [r4, #0]
 800d7fe:	4630      	mov	r0, r6
 800d800:	1a6d      	subs	r5, r5, r1
 800d802:	4629      	mov	r1, r5
 800d804:	f7ff ffa6 	bl	800d754 <sbrk_aligned>
 800d808:	3001      	adds	r0, #1
 800d80a:	d03a      	beq.n	800d882 <_malloc_r+0xea>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	442b      	add	r3, r5
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	f8d8 3000 	ldr.w	r3, [r8]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	bb62      	cbnz	r2, 800d874 <_malloc_r+0xdc>
 800d81a:	f8c8 7000 	str.w	r7, [r8]
 800d81e:	e00f      	b.n	800d840 <_malloc_r+0xa8>
 800d820:	6822      	ldr	r2, [r4, #0]
 800d822:	1b52      	subs	r2, r2, r5
 800d824:	d420      	bmi.n	800d868 <_malloc_r+0xd0>
 800d826:	2a0b      	cmp	r2, #11
 800d828:	d917      	bls.n	800d85a <_malloc_r+0xc2>
 800d82a:	1961      	adds	r1, r4, r5
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	6025      	str	r5, [r4, #0]
 800d830:	bf18      	it	ne
 800d832:	6059      	strne	r1, [r3, #4]
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	bf08      	it	eq
 800d838:	f8c8 1000 	streq.w	r1, [r8]
 800d83c:	5162      	str	r2, [r4, r5]
 800d83e:	604b      	str	r3, [r1, #4]
 800d840:	4630      	mov	r0, r6
 800d842:	f000 f82f 	bl	800d8a4 <__malloc_unlock>
 800d846:	f104 000b 	add.w	r0, r4, #11
 800d84a:	1d23      	adds	r3, r4, #4
 800d84c:	f020 0007 	bic.w	r0, r0, #7
 800d850:	1ac2      	subs	r2, r0, r3
 800d852:	bf1c      	itt	ne
 800d854:	1a1b      	subne	r3, r3, r0
 800d856:	50a3      	strne	r3, [r4, r2]
 800d858:	e7af      	b.n	800d7ba <_malloc_r+0x22>
 800d85a:	6862      	ldr	r2, [r4, #4]
 800d85c:	42a3      	cmp	r3, r4
 800d85e:	bf0c      	ite	eq
 800d860:	f8c8 2000 	streq.w	r2, [r8]
 800d864:	605a      	strne	r2, [r3, #4]
 800d866:	e7eb      	b.n	800d840 <_malloc_r+0xa8>
 800d868:	4623      	mov	r3, r4
 800d86a:	6864      	ldr	r4, [r4, #4]
 800d86c:	e7ae      	b.n	800d7cc <_malloc_r+0x34>
 800d86e:	463c      	mov	r4, r7
 800d870:	687f      	ldr	r7, [r7, #4]
 800d872:	e7b6      	b.n	800d7e2 <_malloc_r+0x4a>
 800d874:	461a      	mov	r2, r3
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	42a3      	cmp	r3, r4
 800d87a:	d1fb      	bne.n	800d874 <_malloc_r+0xdc>
 800d87c:	2300      	movs	r3, #0
 800d87e:	6053      	str	r3, [r2, #4]
 800d880:	e7de      	b.n	800d840 <_malloc_r+0xa8>
 800d882:	230c      	movs	r3, #12
 800d884:	4630      	mov	r0, r6
 800d886:	6033      	str	r3, [r6, #0]
 800d888:	f000 f80c 	bl	800d8a4 <__malloc_unlock>
 800d88c:	e794      	b.n	800d7b8 <_malloc_r+0x20>
 800d88e:	6005      	str	r5, [r0, #0]
 800d890:	e7d6      	b.n	800d840 <_malloc_r+0xa8>
 800d892:	bf00      	nop
 800d894:	2003b3c0 	.word	0x2003b3c0

0800d898 <__malloc_lock>:
 800d898:	4801      	ldr	r0, [pc, #4]	@ (800d8a0 <__malloc_lock+0x8>)
 800d89a:	f7ff b894 	b.w	800c9c6 <__retarget_lock_acquire_recursive>
 800d89e:	bf00      	nop
 800d8a0:	2003b3b8 	.word	0x2003b3b8

0800d8a4 <__malloc_unlock>:
 800d8a4:	4801      	ldr	r0, [pc, #4]	@ (800d8ac <__malloc_unlock+0x8>)
 800d8a6:	f7ff b88f 	b.w	800c9c8 <__retarget_lock_release_recursive>
 800d8aa:	bf00      	nop
 800d8ac:	2003b3b8 	.word	0x2003b3b8

0800d8b0 <_Balloc>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	69c6      	ldr	r6, [r0, #28]
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	b976      	cbnz	r6, 800d8d8 <_Balloc+0x28>
 800d8ba:	2010      	movs	r0, #16
 800d8bc:	f7ff ff42 	bl	800d744 <malloc>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	61e0      	str	r0, [r4, #28]
 800d8c4:	b920      	cbnz	r0, 800d8d0 <_Balloc+0x20>
 800d8c6:	4b18      	ldr	r3, [pc, #96]	@ (800d928 <_Balloc+0x78>)
 800d8c8:	216b      	movs	r1, #107	@ 0x6b
 800d8ca:	4818      	ldr	r0, [pc, #96]	@ (800d92c <_Balloc+0x7c>)
 800d8cc:	f001 fd00 	bl	800f2d0 <__assert_func>
 800d8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d4:	6006      	str	r6, [r0, #0]
 800d8d6:	60c6      	str	r6, [r0, #12]
 800d8d8:	69e6      	ldr	r6, [r4, #28]
 800d8da:	68f3      	ldr	r3, [r6, #12]
 800d8dc:	b183      	cbz	r3, 800d900 <_Balloc+0x50>
 800d8de:	69e3      	ldr	r3, [r4, #28]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8e6:	b9b8      	cbnz	r0, 800d918 <_Balloc+0x68>
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	fa01 f605 	lsl.w	r6, r1, r5
 800d8f0:	1d72      	adds	r2, r6, #5
 800d8f2:	0092      	lsls	r2, r2, #2
 800d8f4:	f001 fd0a 	bl	800f30c <_calloc_r>
 800d8f8:	b160      	cbz	r0, 800d914 <_Balloc+0x64>
 800d8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8fe:	e00e      	b.n	800d91e <_Balloc+0x6e>
 800d900:	2221      	movs	r2, #33	@ 0x21
 800d902:	2104      	movs	r1, #4
 800d904:	4620      	mov	r0, r4
 800d906:	f001 fd01 	bl	800f30c <_calloc_r>
 800d90a:	69e3      	ldr	r3, [r4, #28]
 800d90c:	60f0      	str	r0, [r6, #12]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e4      	bne.n	800d8de <_Balloc+0x2e>
 800d914:	2000      	movs	r0, #0
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	6802      	ldr	r2, [r0, #0]
 800d91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d91e:	2300      	movs	r3, #0
 800d920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d924:	e7f7      	b.n	800d916 <_Balloc+0x66>
 800d926:	bf00      	nop
 800d928:	080109a3 	.word	0x080109a3
 800d92c:	08010a23 	.word	0x08010a23

0800d930 <_Bfree>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	69c6      	ldr	r6, [r0, #28]
 800d934:	4605      	mov	r5, r0
 800d936:	460c      	mov	r4, r1
 800d938:	b976      	cbnz	r6, 800d958 <_Bfree+0x28>
 800d93a:	2010      	movs	r0, #16
 800d93c:	f7ff ff02 	bl	800d744 <malloc>
 800d940:	4602      	mov	r2, r0
 800d942:	61e8      	str	r0, [r5, #28]
 800d944:	b920      	cbnz	r0, 800d950 <_Bfree+0x20>
 800d946:	4b09      	ldr	r3, [pc, #36]	@ (800d96c <_Bfree+0x3c>)
 800d948:	218f      	movs	r1, #143	@ 0x8f
 800d94a:	4809      	ldr	r0, [pc, #36]	@ (800d970 <_Bfree+0x40>)
 800d94c:	f001 fcc0 	bl	800f2d0 <__assert_func>
 800d950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d954:	6006      	str	r6, [r0, #0]
 800d956:	60c6      	str	r6, [r0, #12]
 800d958:	b13c      	cbz	r4, 800d96a <_Bfree+0x3a>
 800d95a:	69eb      	ldr	r3, [r5, #28]
 800d95c:	6862      	ldr	r2, [r4, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d964:	6021      	str	r1, [r4, #0]
 800d966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d96a:	bd70      	pop	{r4, r5, r6, pc}
 800d96c:	080109a3 	.word	0x080109a3
 800d970:	08010a23 	.word	0x08010a23

0800d974 <__multadd>:
 800d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d978:	f101 0c14 	add.w	ip, r1, #20
 800d97c:	4607      	mov	r7, r0
 800d97e:	460c      	mov	r4, r1
 800d980:	461e      	mov	r6, r3
 800d982:	690d      	ldr	r5, [r1, #16]
 800d984:	2000      	movs	r0, #0
 800d986:	f8dc 3000 	ldr.w	r3, [ip]
 800d98a:	3001      	adds	r0, #1
 800d98c:	b299      	uxth	r1, r3
 800d98e:	4285      	cmp	r5, r0
 800d990:	fb02 6101 	mla	r1, r2, r1, r6
 800d994:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d998:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d99c:	b289      	uxth	r1, r1
 800d99e:	fb02 3306 	mla	r3, r2, r6, r3
 800d9a2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d9ae:	dcea      	bgt.n	800d986 <__multadd+0x12>
 800d9b0:	b30e      	cbz	r6, 800d9f6 <__multadd+0x82>
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	42ab      	cmp	r3, r5
 800d9b6:	dc19      	bgt.n	800d9ec <__multadd+0x78>
 800d9b8:	6861      	ldr	r1, [r4, #4]
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	3101      	adds	r1, #1
 800d9be:	f7ff ff77 	bl	800d8b0 <_Balloc>
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	b928      	cbnz	r0, 800d9d2 <__multadd+0x5e>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d9fc <__multadd+0x88>)
 800d9ca:	21ba      	movs	r1, #186	@ 0xba
 800d9cc:	480c      	ldr	r0, [pc, #48]	@ (800da00 <__multadd+0x8c>)
 800d9ce:	f001 fc7f 	bl	800f2d0 <__assert_func>
 800d9d2:	6922      	ldr	r2, [r4, #16]
 800d9d4:	f104 010c 	add.w	r1, r4, #12
 800d9d8:	300c      	adds	r0, #12
 800d9da:	3202      	adds	r2, #2
 800d9dc:	0092      	lsls	r2, r2, #2
 800d9de:	f7ff f802 	bl	800c9e6 <memcpy>
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	4644      	mov	r4, r8
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f7ff ffa2 	bl	800d930 <_Bfree>
 800d9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9f0:	3501      	adds	r5, #1
 800d9f2:	615e      	str	r6, [r3, #20]
 800d9f4:	6125      	str	r5, [r4, #16]
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fc:	08010a12 	.word	0x08010a12
 800da00:	08010a23 	.word	0x08010a23

0800da04 <__s2b>:
 800da04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da08:	4615      	mov	r5, r2
 800da0a:	461f      	mov	r7, r3
 800da0c:	2209      	movs	r2, #9
 800da0e:	3308      	adds	r3, #8
 800da10:	460c      	mov	r4, r1
 800da12:	4606      	mov	r6, r0
 800da14:	2100      	movs	r1, #0
 800da16:	fb93 f3f2 	sdiv	r3, r3, r2
 800da1a:	2201      	movs	r2, #1
 800da1c:	429a      	cmp	r2, r3
 800da1e:	db09      	blt.n	800da34 <__s2b+0x30>
 800da20:	4630      	mov	r0, r6
 800da22:	f7ff ff45 	bl	800d8b0 <_Balloc>
 800da26:	b940      	cbnz	r0, 800da3a <__s2b+0x36>
 800da28:	4602      	mov	r2, r0
 800da2a:	4b19      	ldr	r3, [pc, #100]	@ (800da90 <__s2b+0x8c>)
 800da2c:	21d3      	movs	r1, #211	@ 0xd3
 800da2e:	4819      	ldr	r0, [pc, #100]	@ (800da94 <__s2b+0x90>)
 800da30:	f001 fc4e 	bl	800f2d0 <__assert_func>
 800da34:	0052      	lsls	r2, r2, #1
 800da36:	3101      	adds	r1, #1
 800da38:	e7f0      	b.n	800da1c <__s2b+0x18>
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	2d09      	cmp	r5, #9
 800da3e:	6143      	str	r3, [r0, #20]
 800da40:	f04f 0301 	mov.w	r3, #1
 800da44:	6103      	str	r3, [r0, #16]
 800da46:	dd16      	ble.n	800da76 <__s2b+0x72>
 800da48:	f104 0909 	add.w	r9, r4, #9
 800da4c:	442c      	add	r4, r5
 800da4e:	46c8      	mov	r8, r9
 800da50:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da54:	4601      	mov	r1, r0
 800da56:	220a      	movs	r2, #10
 800da58:	4630      	mov	r0, r6
 800da5a:	3b30      	subs	r3, #48	@ 0x30
 800da5c:	f7ff ff8a 	bl	800d974 <__multadd>
 800da60:	45a0      	cmp	r8, r4
 800da62:	d1f5      	bne.n	800da50 <__s2b+0x4c>
 800da64:	f1a5 0408 	sub.w	r4, r5, #8
 800da68:	444c      	add	r4, r9
 800da6a:	1b2d      	subs	r5, r5, r4
 800da6c:	1963      	adds	r3, r4, r5
 800da6e:	42bb      	cmp	r3, r7
 800da70:	db04      	blt.n	800da7c <__s2b+0x78>
 800da72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da76:	340a      	adds	r4, #10
 800da78:	2509      	movs	r5, #9
 800da7a:	e7f6      	b.n	800da6a <__s2b+0x66>
 800da7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da80:	4601      	mov	r1, r0
 800da82:	220a      	movs	r2, #10
 800da84:	4630      	mov	r0, r6
 800da86:	3b30      	subs	r3, #48	@ 0x30
 800da88:	f7ff ff74 	bl	800d974 <__multadd>
 800da8c:	e7ee      	b.n	800da6c <__s2b+0x68>
 800da8e:	bf00      	nop
 800da90:	08010a12 	.word	0x08010a12
 800da94:	08010a23 	.word	0x08010a23

0800da98 <__hi0bits>:
 800da98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800da9c:	4603      	mov	r3, r0
 800da9e:	bf36      	itet	cc
 800daa0:	0403      	lslcc	r3, r0, #16
 800daa2:	2000      	movcs	r0, #0
 800daa4:	2010      	movcc	r0, #16
 800daa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800daaa:	bf3c      	itt	cc
 800daac:	021b      	lslcc	r3, r3, #8
 800daae:	3008      	addcc	r0, #8
 800dab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dab4:	bf3c      	itt	cc
 800dab6:	011b      	lslcc	r3, r3, #4
 800dab8:	3004      	addcc	r0, #4
 800daba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dabe:	bf3c      	itt	cc
 800dac0:	009b      	lslcc	r3, r3, #2
 800dac2:	3002      	addcc	r0, #2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	db05      	blt.n	800dad4 <__hi0bits+0x3c>
 800dac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dacc:	f100 0001 	add.w	r0, r0, #1
 800dad0:	bf08      	it	eq
 800dad2:	2020      	moveq	r0, #32
 800dad4:	4770      	bx	lr

0800dad6 <__lo0bits>:
 800dad6:	6803      	ldr	r3, [r0, #0]
 800dad8:	4602      	mov	r2, r0
 800dada:	f013 0007 	ands.w	r0, r3, #7
 800dade:	d00b      	beq.n	800daf8 <__lo0bits+0x22>
 800dae0:	07d9      	lsls	r1, r3, #31
 800dae2:	d421      	bmi.n	800db28 <__lo0bits+0x52>
 800dae4:	0798      	lsls	r0, r3, #30
 800dae6:	bf47      	ittee	mi
 800dae8:	085b      	lsrmi	r3, r3, #1
 800daea:	2001      	movmi	r0, #1
 800daec:	089b      	lsrpl	r3, r3, #2
 800daee:	2002      	movpl	r0, #2
 800daf0:	bf4c      	ite	mi
 800daf2:	6013      	strmi	r3, [r2, #0]
 800daf4:	6013      	strpl	r3, [r2, #0]
 800daf6:	4770      	bx	lr
 800daf8:	b299      	uxth	r1, r3
 800dafa:	b909      	cbnz	r1, 800db00 <__lo0bits+0x2a>
 800dafc:	0c1b      	lsrs	r3, r3, #16
 800dafe:	2010      	movs	r0, #16
 800db00:	b2d9      	uxtb	r1, r3
 800db02:	b909      	cbnz	r1, 800db08 <__lo0bits+0x32>
 800db04:	3008      	adds	r0, #8
 800db06:	0a1b      	lsrs	r3, r3, #8
 800db08:	0719      	lsls	r1, r3, #28
 800db0a:	bf04      	itt	eq
 800db0c:	091b      	lsreq	r3, r3, #4
 800db0e:	3004      	addeq	r0, #4
 800db10:	0799      	lsls	r1, r3, #30
 800db12:	bf04      	itt	eq
 800db14:	089b      	lsreq	r3, r3, #2
 800db16:	3002      	addeq	r0, #2
 800db18:	07d9      	lsls	r1, r3, #31
 800db1a:	d403      	bmi.n	800db24 <__lo0bits+0x4e>
 800db1c:	085b      	lsrs	r3, r3, #1
 800db1e:	f100 0001 	add.w	r0, r0, #1
 800db22:	d003      	beq.n	800db2c <__lo0bits+0x56>
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	4770      	bx	lr
 800db28:	2000      	movs	r0, #0
 800db2a:	4770      	bx	lr
 800db2c:	2020      	movs	r0, #32
 800db2e:	4770      	bx	lr

0800db30 <__i2b>:
 800db30:	b510      	push	{r4, lr}
 800db32:	460c      	mov	r4, r1
 800db34:	2101      	movs	r1, #1
 800db36:	f7ff febb 	bl	800d8b0 <_Balloc>
 800db3a:	4602      	mov	r2, r0
 800db3c:	b928      	cbnz	r0, 800db4a <__i2b+0x1a>
 800db3e:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <__i2b+0x24>)
 800db40:	f240 1145 	movw	r1, #325	@ 0x145
 800db44:	4804      	ldr	r0, [pc, #16]	@ (800db58 <__i2b+0x28>)
 800db46:	f001 fbc3 	bl	800f2d0 <__assert_func>
 800db4a:	2301      	movs	r3, #1
 800db4c:	6144      	str	r4, [r0, #20]
 800db4e:	6103      	str	r3, [r0, #16]
 800db50:	bd10      	pop	{r4, pc}
 800db52:	bf00      	nop
 800db54:	08010a12 	.word	0x08010a12
 800db58:	08010a23 	.word	0x08010a23

0800db5c <__multiply>:
 800db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	4614      	mov	r4, r2
 800db62:	690a      	ldr	r2, [r1, #16]
 800db64:	460f      	mov	r7, r1
 800db66:	b085      	sub	sp, #20
 800db68:	6923      	ldr	r3, [r4, #16]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	bfa2      	ittt	ge
 800db6e:	4623      	movge	r3, r4
 800db70:	460c      	movge	r4, r1
 800db72:	461f      	movge	r7, r3
 800db74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800db78:	68a3      	ldr	r3, [r4, #8]
 800db7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800db7e:	6861      	ldr	r1, [r4, #4]
 800db80:	eb0a 0609 	add.w	r6, sl, r9
 800db84:	42b3      	cmp	r3, r6
 800db86:	bfb8      	it	lt
 800db88:	3101      	addlt	r1, #1
 800db8a:	f7ff fe91 	bl	800d8b0 <_Balloc>
 800db8e:	b930      	cbnz	r0, 800db9e <__multiply+0x42>
 800db90:	4602      	mov	r2, r0
 800db92:	4b45      	ldr	r3, [pc, #276]	@ (800dca8 <__multiply+0x14c>)
 800db94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800db98:	4844      	ldr	r0, [pc, #272]	@ (800dcac <__multiply+0x150>)
 800db9a:	f001 fb99 	bl	800f2d0 <__assert_func>
 800db9e:	f100 0514 	add.w	r5, r0, #20
 800dba2:	2200      	movs	r2, #0
 800dba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dba8:	462b      	mov	r3, r5
 800dbaa:	4543      	cmp	r3, r8
 800dbac:	d321      	bcc.n	800dbf2 <__multiply+0x96>
 800dbae:	f107 0114 	add.w	r1, r7, #20
 800dbb2:	f104 0214 	add.w	r2, r4, #20
 800dbb6:	f104 0715 	add.w	r7, r4, #21
 800dbba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dbbe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dbc2:	9302      	str	r3, [sp, #8]
 800dbc4:	1b13      	subs	r3, r2, r4
 800dbc6:	3b15      	subs	r3, #21
 800dbc8:	f023 0303 	bic.w	r3, r3, #3
 800dbcc:	3304      	adds	r3, #4
 800dbce:	42ba      	cmp	r2, r7
 800dbd0:	bf38      	it	cc
 800dbd2:	2304      	movcc	r3, #4
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	9b02      	ldr	r3, [sp, #8]
 800dbd8:	9103      	str	r1, [sp, #12]
 800dbda:	428b      	cmp	r3, r1
 800dbdc:	d80c      	bhi.n	800dbf8 <__multiply+0x9c>
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	dd03      	ble.n	800dbea <__multiply+0x8e>
 800dbe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d05b      	beq.n	800dca2 <__multiply+0x146>
 800dbea:	6106      	str	r6, [r0, #16]
 800dbec:	b005      	add	sp, #20
 800dbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf2:	f843 2b04 	str.w	r2, [r3], #4
 800dbf6:	e7d8      	b.n	800dbaa <__multiply+0x4e>
 800dbf8:	f8b1 a000 	ldrh.w	sl, [r1]
 800dbfc:	f1ba 0f00 	cmp.w	sl, #0
 800dc00:	d024      	beq.n	800dc4c <__multiply+0xf0>
 800dc02:	f104 0e14 	add.w	lr, r4, #20
 800dc06:	46a9      	mov	r9, r5
 800dc08:	f04f 0c00 	mov.w	ip, #0
 800dc0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc10:	f8d9 3000 	ldr.w	r3, [r9]
 800dc14:	fa1f fb87 	uxth.w	fp, r7
 800dc18:	4572      	cmp	r2, lr
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dc24:	f8d9 7000 	ldr.w	r7, [r9]
 800dc28:	4463      	add	r3, ip
 800dc2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc2e:	fb0a c70b 	mla	r7, sl, fp, ip
 800dc32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc40:	f849 3b04 	str.w	r3, [r9], #4
 800dc44:	d8e2      	bhi.n	800dc0c <__multiply+0xb0>
 800dc46:	9b01      	ldr	r3, [sp, #4]
 800dc48:	f845 c003 	str.w	ip, [r5, r3]
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	3104      	adds	r1, #4
 800dc50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dc54:	f1b9 0f00 	cmp.w	r9, #0
 800dc58:	d021      	beq.n	800dc9e <__multiply+0x142>
 800dc5a:	682b      	ldr	r3, [r5, #0]
 800dc5c:	f104 0c14 	add.w	ip, r4, #20
 800dc60:	46ae      	mov	lr, r5
 800dc62:	f04f 0a00 	mov.w	sl, #0
 800dc66:	f8bc b000 	ldrh.w	fp, [ip]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dc70:	fb09 770b 	mla	r7, r9, fp, r7
 800dc74:	4457      	add	r7, sl
 800dc76:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc7a:	f84e 3b04 	str.w	r3, [lr], #4
 800dc7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc86:	f8be 3000 	ldrh.w	r3, [lr]
 800dc8a:	4562      	cmp	r2, ip
 800dc8c:	fb09 330a 	mla	r3, r9, sl, r3
 800dc90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dc94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc98:	d8e5      	bhi.n	800dc66 <__multiply+0x10a>
 800dc9a:	9f01      	ldr	r7, [sp, #4]
 800dc9c:	51eb      	str	r3, [r5, r7]
 800dc9e:	3504      	adds	r5, #4
 800dca0:	e799      	b.n	800dbd6 <__multiply+0x7a>
 800dca2:	3e01      	subs	r6, #1
 800dca4:	e79b      	b.n	800dbde <__multiply+0x82>
 800dca6:	bf00      	nop
 800dca8:	08010a12 	.word	0x08010a12
 800dcac:	08010a23 	.word	0x08010a23

0800dcb0 <__pow5mult>:
 800dcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb4:	4615      	mov	r5, r2
 800dcb6:	f012 0203 	ands.w	r2, r2, #3
 800dcba:	4607      	mov	r7, r0
 800dcbc:	460e      	mov	r6, r1
 800dcbe:	d007      	beq.n	800dcd0 <__pow5mult+0x20>
 800dcc0:	3a01      	subs	r2, #1
 800dcc2:	4c25      	ldr	r4, [pc, #148]	@ (800dd58 <__pow5mult+0xa8>)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcca:	f7ff fe53 	bl	800d974 <__multadd>
 800dcce:	4606      	mov	r6, r0
 800dcd0:	10ad      	asrs	r5, r5, #2
 800dcd2:	d03d      	beq.n	800dd50 <__pow5mult+0xa0>
 800dcd4:	69fc      	ldr	r4, [r7, #28]
 800dcd6:	b97c      	cbnz	r4, 800dcf8 <__pow5mult+0x48>
 800dcd8:	2010      	movs	r0, #16
 800dcda:	f7ff fd33 	bl	800d744 <malloc>
 800dcde:	4602      	mov	r2, r0
 800dce0:	61f8      	str	r0, [r7, #28]
 800dce2:	b928      	cbnz	r0, 800dcf0 <__pow5mult+0x40>
 800dce4:	4b1d      	ldr	r3, [pc, #116]	@ (800dd5c <__pow5mult+0xac>)
 800dce6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dcea:	481d      	ldr	r0, [pc, #116]	@ (800dd60 <__pow5mult+0xb0>)
 800dcec:	f001 faf0 	bl	800f2d0 <__assert_func>
 800dcf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcf4:	6004      	str	r4, [r0, #0]
 800dcf6:	60c4      	str	r4, [r0, #12]
 800dcf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dcfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd00:	b94c      	cbnz	r4, 800dd16 <__pow5mult+0x66>
 800dd02:	f240 2171 	movw	r1, #625	@ 0x271
 800dd06:	4638      	mov	r0, r7
 800dd08:	f7ff ff12 	bl	800db30 <__i2b>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4604      	mov	r4, r0
 800dd10:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd14:	6003      	str	r3, [r0, #0]
 800dd16:	f04f 0900 	mov.w	r9, #0
 800dd1a:	07eb      	lsls	r3, r5, #31
 800dd1c:	d50a      	bpl.n	800dd34 <__pow5mult+0x84>
 800dd1e:	4631      	mov	r1, r6
 800dd20:	4622      	mov	r2, r4
 800dd22:	4638      	mov	r0, r7
 800dd24:	f7ff ff1a 	bl	800db5c <__multiply>
 800dd28:	4680      	mov	r8, r0
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	4646      	mov	r6, r8
 800dd30:	f7ff fdfe 	bl	800d930 <_Bfree>
 800dd34:	106d      	asrs	r5, r5, #1
 800dd36:	d00b      	beq.n	800dd50 <__pow5mult+0xa0>
 800dd38:	6820      	ldr	r0, [r4, #0]
 800dd3a:	b938      	cbnz	r0, 800dd4c <__pow5mult+0x9c>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7ff ff0b 	bl	800db5c <__multiply>
 800dd46:	6020      	str	r0, [r4, #0]
 800dd48:	f8c0 9000 	str.w	r9, [r0]
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	e7e4      	b.n	800dd1a <__pow5mult+0x6a>
 800dd50:	4630      	mov	r0, r6
 800dd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd56:	bf00      	nop
 800dd58:	08010a7c 	.word	0x08010a7c
 800dd5c:	080109a3 	.word	0x080109a3
 800dd60:	08010a23 	.word	0x08010a23

0800dd64 <__lshift>:
 800dd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	4607      	mov	r7, r0
 800dd6c:	4691      	mov	r9, r2
 800dd6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	6849      	ldr	r1, [r1, #4]
 800dd76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	f108 0601 	add.w	r6, r8, #1
 800dd80:	42b3      	cmp	r3, r6
 800dd82:	db0b      	blt.n	800dd9c <__lshift+0x38>
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7ff fd93 	bl	800d8b0 <_Balloc>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	b948      	cbnz	r0, 800dda2 <__lshift+0x3e>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	4b28      	ldr	r3, [pc, #160]	@ (800de34 <__lshift+0xd0>)
 800dd92:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dd96:	4828      	ldr	r0, [pc, #160]	@ (800de38 <__lshift+0xd4>)
 800dd98:	f001 fa9a 	bl	800f2d0 <__assert_func>
 800dd9c:	3101      	adds	r1, #1
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	e7ee      	b.n	800dd80 <__lshift+0x1c>
 800dda2:	2300      	movs	r3, #0
 800dda4:	f100 0114 	add.w	r1, r0, #20
 800dda8:	f100 0210 	add.w	r2, r0, #16
 800ddac:	4618      	mov	r0, r3
 800ddae:	4553      	cmp	r3, sl
 800ddb0:	db33      	blt.n	800de1a <__lshift+0xb6>
 800ddb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddb6:	f104 0314 	add.w	r3, r4, #20
 800ddba:	6920      	ldr	r0, [r4, #16]
 800ddbc:	f019 091f 	ands.w	r9, r9, #31
 800ddc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddc8:	d02b      	beq.n	800de22 <__lshift+0xbe>
 800ddca:	f1c9 0e20 	rsb	lr, r9, #32
 800ddce:	468a      	mov	sl, r1
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	6818      	ldr	r0, [r3, #0]
 800ddd4:	fa00 f009 	lsl.w	r0, r0, r9
 800ddd8:	4310      	orrs	r0, r2
 800ddda:	f84a 0b04 	str.w	r0, [sl], #4
 800ddde:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde2:	459c      	cmp	ip, r3
 800dde4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dde8:	d8f3      	bhi.n	800ddd2 <__lshift+0x6e>
 800ddea:	ebac 0304 	sub.w	r3, ip, r4
 800ddee:	f104 0015 	add.w	r0, r4, #21
 800ddf2:	3b15      	subs	r3, #21
 800ddf4:	f023 0303 	bic.w	r3, r3, #3
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	4584      	cmp	ip, r0
 800ddfc:	bf38      	it	cc
 800ddfe:	2304      	movcc	r3, #4
 800de00:	50ca      	str	r2, [r1, r3]
 800de02:	b10a      	cbz	r2, 800de08 <__lshift+0xa4>
 800de04:	f108 0602 	add.w	r6, r8, #2
 800de08:	3e01      	subs	r6, #1
 800de0a:	4638      	mov	r0, r7
 800de0c:	4621      	mov	r1, r4
 800de0e:	612e      	str	r6, [r5, #16]
 800de10:	f7ff fd8e 	bl	800d930 <_Bfree>
 800de14:	4628      	mov	r0, r5
 800de16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de1a:	3301      	adds	r3, #1
 800de1c:	f842 0f04 	str.w	r0, [r2, #4]!
 800de20:	e7c5      	b.n	800ddae <__lshift+0x4a>
 800de22:	3904      	subs	r1, #4
 800de24:	f853 2b04 	ldr.w	r2, [r3], #4
 800de28:	459c      	cmp	ip, r3
 800de2a:	f841 2f04 	str.w	r2, [r1, #4]!
 800de2e:	d8f9      	bhi.n	800de24 <__lshift+0xc0>
 800de30:	e7ea      	b.n	800de08 <__lshift+0xa4>
 800de32:	bf00      	nop
 800de34:	08010a12 	.word	0x08010a12
 800de38:	08010a23 	.word	0x08010a23

0800de3c <__mcmp>:
 800de3c:	4603      	mov	r3, r0
 800de3e:	690a      	ldr	r2, [r1, #16]
 800de40:	6900      	ldr	r0, [r0, #16]
 800de42:	1a80      	subs	r0, r0, r2
 800de44:	b530      	push	{r4, r5, lr}
 800de46:	d10e      	bne.n	800de66 <__mcmp+0x2a>
 800de48:	3314      	adds	r3, #20
 800de4a:	3114      	adds	r1, #20
 800de4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800de50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800de54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de5c:	4295      	cmp	r5, r2
 800de5e:	d003      	beq.n	800de68 <__mcmp+0x2c>
 800de60:	d205      	bcs.n	800de6e <__mcmp+0x32>
 800de62:	f04f 30ff 	mov.w	r0, #4294967295
 800de66:	bd30      	pop	{r4, r5, pc}
 800de68:	42a3      	cmp	r3, r4
 800de6a:	d3f3      	bcc.n	800de54 <__mcmp+0x18>
 800de6c:	e7fb      	b.n	800de66 <__mcmp+0x2a>
 800de6e:	2001      	movs	r0, #1
 800de70:	e7f9      	b.n	800de66 <__mcmp+0x2a>
	...

0800de74 <__mdiff>:
 800de74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de78:	4689      	mov	r9, r1
 800de7a:	4606      	mov	r6, r0
 800de7c:	4611      	mov	r1, r2
 800de7e:	4614      	mov	r4, r2
 800de80:	4648      	mov	r0, r9
 800de82:	f7ff ffdb 	bl	800de3c <__mcmp>
 800de86:	1e05      	subs	r5, r0, #0
 800de88:	d112      	bne.n	800deb0 <__mdiff+0x3c>
 800de8a:	4629      	mov	r1, r5
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7ff fd0f 	bl	800d8b0 <_Balloc>
 800de92:	4602      	mov	r2, r0
 800de94:	b928      	cbnz	r0, 800dea2 <__mdiff+0x2e>
 800de96:	4b41      	ldr	r3, [pc, #260]	@ (800df9c <__mdiff+0x128>)
 800de98:	f240 2137 	movw	r1, #567	@ 0x237
 800de9c:	4840      	ldr	r0, [pc, #256]	@ (800dfa0 <__mdiff+0x12c>)
 800de9e:	f001 fa17 	bl	800f2d0 <__assert_func>
 800dea2:	2301      	movs	r3, #1
 800dea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dea8:	4610      	mov	r0, r2
 800deaa:	b003      	add	sp, #12
 800deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb0:	bfbc      	itt	lt
 800deb2:	464b      	movlt	r3, r9
 800deb4:	46a1      	movlt	r9, r4
 800deb6:	4630      	mov	r0, r6
 800deb8:	bfb8      	it	lt
 800deba:	2501      	movlt	r5, #1
 800debc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dec0:	bfb4      	ite	lt
 800dec2:	461c      	movlt	r4, r3
 800dec4:	2500      	movge	r5, #0
 800dec6:	f7ff fcf3 	bl	800d8b0 <_Balloc>
 800deca:	4602      	mov	r2, r0
 800decc:	b918      	cbnz	r0, 800ded6 <__mdiff+0x62>
 800dece:	4b33      	ldr	r3, [pc, #204]	@ (800df9c <__mdiff+0x128>)
 800ded0:	f240 2145 	movw	r1, #581	@ 0x245
 800ded4:	e7e2      	b.n	800de9c <__mdiff+0x28>
 800ded6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800deda:	f104 0e14 	add.w	lr, r4, #20
 800dede:	6926      	ldr	r6, [r4, #16]
 800dee0:	f100 0b14 	add.w	fp, r0, #20
 800dee4:	60c5      	str	r5, [r0, #12]
 800dee6:	f109 0514 	add.w	r5, r9, #20
 800deea:	f109 0310 	add.w	r3, r9, #16
 800deee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800def2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800def6:	46d9      	mov	r9, fp
 800def8:	f04f 0c00 	mov.w	ip, #0
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df04:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df08:	4576      	cmp	r6, lr
 800df0a:	9301      	str	r3, [sp, #4]
 800df0c:	fa1f f38a 	uxth.w	r3, sl
 800df10:	4619      	mov	r1, r3
 800df12:	b283      	uxth	r3, r0
 800df14:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800df18:	eba1 0303 	sub.w	r3, r1, r3
 800df1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df20:	4463      	add	r3, ip
 800df22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df26:	b29b      	uxth	r3, r3
 800df28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df30:	f849 3b04 	str.w	r3, [r9], #4
 800df34:	d8e3      	bhi.n	800defe <__mdiff+0x8a>
 800df36:	1b33      	subs	r3, r6, r4
 800df38:	3415      	adds	r4, #21
 800df3a:	3b15      	subs	r3, #21
 800df3c:	f023 0303 	bic.w	r3, r3, #3
 800df40:	3304      	adds	r3, #4
 800df42:	42a6      	cmp	r6, r4
 800df44:	bf38      	it	cc
 800df46:	2304      	movcc	r3, #4
 800df48:	441d      	add	r5, r3
 800df4a:	445b      	add	r3, fp
 800df4c:	462c      	mov	r4, r5
 800df4e:	461e      	mov	r6, r3
 800df50:	4544      	cmp	r4, r8
 800df52:	d30e      	bcc.n	800df72 <__mdiff+0xfe>
 800df54:	f108 0103 	add.w	r1, r8, #3
 800df58:	1b49      	subs	r1, r1, r5
 800df5a:	3d03      	subs	r5, #3
 800df5c:	f021 0103 	bic.w	r1, r1, #3
 800df60:	45a8      	cmp	r8, r5
 800df62:	bf38      	it	cc
 800df64:	2100      	movcc	r1, #0
 800df66:	440b      	add	r3, r1
 800df68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df6c:	b199      	cbz	r1, 800df96 <__mdiff+0x122>
 800df6e:	6117      	str	r7, [r2, #16]
 800df70:	e79a      	b.n	800dea8 <__mdiff+0x34>
 800df72:	f854 1b04 	ldr.w	r1, [r4], #4
 800df76:	46e6      	mov	lr, ip
 800df78:	fa1f fc81 	uxth.w	ip, r1
 800df7c:	0c08      	lsrs	r0, r1, #16
 800df7e:	4471      	add	r1, lr
 800df80:	44f4      	add	ip, lr
 800df82:	b289      	uxth	r1, r1
 800df84:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800df88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800df8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df90:	f846 1b04 	str.w	r1, [r6], #4
 800df94:	e7dc      	b.n	800df50 <__mdiff+0xdc>
 800df96:	3f01      	subs	r7, #1
 800df98:	e7e6      	b.n	800df68 <__mdiff+0xf4>
 800df9a:	bf00      	nop
 800df9c:	08010a12 	.word	0x08010a12
 800dfa0:	08010a23 	.word	0x08010a23

0800dfa4 <__ulp>:
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	4b11      	ldr	r3, [pc, #68]	@ (800dfec <__ulp+0x48>)
 800dfa8:	ed8d 0b00 	vstr	d0, [sp]
 800dfac:	9a01      	ldr	r2, [sp, #4]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	dc08      	bgt.n	800dfca <__ulp+0x26>
 800dfb8:	425b      	negs	r3, r3
 800dfba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dfbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfc2:	da04      	bge.n	800dfce <__ulp+0x2a>
 800dfc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dfc8:	4113      	asrs	r3, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	e008      	b.n	800dfe0 <__ulp+0x3c>
 800dfce:	f1a2 0314 	sub.w	r3, r2, #20
 800dfd2:	2b1e      	cmp	r3, #30
 800dfd4:	bfd6      	itet	le
 800dfd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dfda:	2201      	movgt	r2, #1
 800dfdc:	40da      	lsrle	r2, r3
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	ec41 0b10 	vmov	d0, r0, r1
 800dfe8:	b002      	add	sp, #8
 800dfea:	4770      	bx	lr
 800dfec:	7ff00000 	.word	0x7ff00000

0800dff0 <__b2d>:
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	6906      	ldr	r6, [r0, #16]
 800dff6:	f100 0814 	add.w	r8, r0, #20
 800dffa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dffe:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e002:	1f37      	subs	r7, r6, #4
 800e004:	4610      	mov	r0, r2
 800e006:	f7ff fd47 	bl	800da98 <__hi0bits>
 800e00a:	f1c0 0320 	rsb	r3, r0, #32
 800e00e:	280a      	cmp	r0, #10
 800e010:	600b      	str	r3, [r1, #0]
 800e012:	491d      	ldr	r1, [pc, #116]	@ (800e088 <__b2d+0x98>)
 800e014:	dc16      	bgt.n	800e044 <__b2d+0x54>
 800e016:	f1c0 0c0b 	rsb	ip, r0, #11
 800e01a:	45b8      	cmp	r8, r7
 800e01c:	f100 0015 	add.w	r0, r0, #21
 800e020:	fa22 f30c 	lsr.w	r3, r2, ip
 800e024:	fa02 f000 	lsl.w	r0, r2, r0
 800e028:	ea43 0501 	orr.w	r5, r3, r1
 800e02c:	bf34      	ite	cc
 800e02e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e032:	2300      	movcs	r3, #0
 800e034:	fa23 f30c 	lsr.w	r3, r3, ip
 800e038:	4303      	orrs	r3, r0
 800e03a:	461c      	mov	r4, r3
 800e03c:	ec45 4b10 	vmov	d0, r4, r5
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	45b8      	cmp	r8, r7
 800e046:	bf3a      	itte	cc
 800e048:	f1a6 0708 	subcc.w	r7, r6, #8
 800e04c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e050:	2300      	movcs	r3, #0
 800e052:	380b      	subs	r0, #11
 800e054:	d014      	beq.n	800e080 <__b2d+0x90>
 800e056:	f1c0 0120 	rsb	r1, r0, #32
 800e05a:	4082      	lsls	r2, r0
 800e05c:	4547      	cmp	r7, r8
 800e05e:	fa23 f401 	lsr.w	r4, r3, r1
 800e062:	fa03 f300 	lsl.w	r3, r3, r0
 800e066:	ea42 0204 	orr.w	r2, r2, r4
 800e06a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e06e:	bf8c      	ite	hi
 800e070:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e074:	2200      	movls	r2, #0
 800e076:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e07a:	40ca      	lsrs	r2, r1
 800e07c:	4313      	orrs	r3, r2
 800e07e:	e7dc      	b.n	800e03a <__b2d+0x4a>
 800e080:	ea42 0501 	orr.w	r5, r2, r1
 800e084:	e7d9      	b.n	800e03a <__b2d+0x4a>
 800e086:	bf00      	nop
 800e088:	3ff00000 	.word	0x3ff00000

0800e08c <__d2b>:
 800e08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e090:	460f      	mov	r7, r1
 800e092:	2101      	movs	r1, #1
 800e094:	4616      	mov	r6, r2
 800e096:	ec59 8b10 	vmov	r8, r9, d0
 800e09a:	f7ff fc09 	bl	800d8b0 <_Balloc>
 800e09e:	4604      	mov	r4, r0
 800e0a0:	b930      	cbnz	r0, 800e0b0 <__d2b+0x24>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	4b23      	ldr	r3, [pc, #140]	@ (800e134 <__d2b+0xa8>)
 800e0a6:	f240 310f 	movw	r1, #783	@ 0x30f
 800e0aa:	4823      	ldr	r0, [pc, #140]	@ (800e138 <__d2b+0xac>)
 800e0ac:	f001 f910 	bl	800f2d0 <__assert_func>
 800e0b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0b8:	b10d      	cbz	r5, 800e0be <__d2b+0x32>
 800e0ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0c4:	d023      	beq.n	800e10e <__d2b+0x82>
 800e0c6:	4668      	mov	r0, sp
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	f7ff fd04 	bl	800dad6 <__lo0bits>
 800e0ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0d2:	b1d0      	cbz	r0, 800e10a <__d2b+0x7e>
 800e0d4:	f1c0 0320 	rsb	r3, r0, #32
 800e0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0dc:	40c2      	lsrs	r2, r0
 800e0de:	430b      	orrs	r3, r1
 800e0e0:	9201      	str	r2, [sp, #4]
 800e0e2:	6163      	str	r3, [r4, #20]
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	61a3      	str	r3, [r4, #24]
 800e0ea:	bf0c      	ite	eq
 800e0ec:	2201      	moveq	r2, #1
 800e0ee:	2202      	movne	r2, #2
 800e0f0:	6122      	str	r2, [r4, #16]
 800e0f2:	b1a5      	cbz	r5, 800e11e <__d2b+0x92>
 800e0f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0f8:	4405      	add	r5, r0
 800e0fa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0fe:	603d      	str	r5, [r7, #0]
 800e100:	6030      	str	r0, [r6, #0]
 800e102:	4620      	mov	r0, r4
 800e104:	b003      	add	sp, #12
 800e106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e10a:	6161      	str	r1, [r4, #20]
 800e10c:	e7ea      	b.n	800e0e4 <__d2b+0x58>
 800e10e:	a801      	add	r0, sp, #4
 800e110:	f7ff fce1 	bl	800dad6 <__lo0bits>
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	3020      	adds	r0, #32
 800e118:	2201      	movs	r2, #1
 800e11a:	6163      	str	r3, [r4, #20]
 800e11c:	e7e8      	b.n	800e0f0 <__d2b+0x64>
 800e11e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e122:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e126:	6038      	str	r0, [r7, #0]
 800e128:	6918      	ldr	r0, [r3, #16]
 800e12a:	f7ff fcb5 	bl	800da98 <__hi0bits>
 800e12e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e132:	e7e5      	b.n	800e100 <__d2b+0x74>
 800e134:	08010a12 	.word	0x08010a12
 800e138:	08010a23 	.word	0x08010a23

0800e13c <__ratio>:
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	b085      	sub	sp, #20
 800e142:	e9cd 1000 	strd	r1, r0, [sp]
 800e146:	a902      	add	r1, sp, #8
 800e148:	f7ff ff52 	bl	800dff0 <__b2d>
 800e14c:	a903      	add	r1, sp, #12
 800e14e:	9800      	ldr	r0, [sp, #0]
 800e150:	ec55 4b10 	vmov	r4, r5, d0
 800e154:	f7ff ff4c 	bl	800dff0 <__b2d>
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	462f      	mov	r7, r5
 800e15c:	4620      	mov	r0, r4
 800e15e:	6919      	ldr	r1, [r3, #16]
 800e160:	9b00      	ldr	r3, [sp, #0]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	1ac9      	subs	r1, r1, r3
 800e166:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e16a:	ec5b ab10 	vmov	sl, fp, d0
 800e16e:	1a9b      	subs	r3, r3, r2
 800e170:	46d9      	mov	r9, fp
 800e172:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e176:	2b00      	cmp	r3, #0
 800e178:	bfcd      	iteet	gt
 800e17a:	462a      	movgt	r2, r5
 800e17c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e180:	465a      	movle	r2, fp
 800e182:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e186:	bfd8      	it	le
 800e188:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e18c:	4652      	mov	r2, sl
 800e18e:	4639      	mov	r1, r7
 800e190:	464b      	mov	r3, r9
 800e192:	f7f2 fb6f 	bl	8000874 <__aeabi_ddiv>
 800e196:	ec41 0b10 	vmov	d0, r0, r1
 800e19a:	b005      	add	sp, #20
 800e19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1a0 <__copybits>:
 800e1a0:	3901      	subs	r1, #1
 800e1a2:	f102 0314 	add.w	r3, r2, #20
 800e1a6:	1149      	asrs	r1, r1, #5
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	3101      	adds	r1, #1
 800e1ac:	6914      	ldr	r4, [r2, #16]
 800e1ae:	1f05      	subs	r5, r0, #4
 800e1b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d30c      	bcc.n	800e1d6 <__copybits+0x36>
 800e1bc:	1aa3      	subs	r3, r4, r2
 800e1be:	3211      	adds	r2, #17
 800e1c0:	3b11      	subs	r3, #17
 800e1c2:	f023 0303 	bic.w	r3, r3, #3
 800e1c6:	42a2      	cmp	r2, r4
 800e1c8:	bf88      	it	hi
 800e1ca:	2300      	movhi	r3, #0
 800e1cc:	4418      	add	r0, r3
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	4288      	cmp	r0, r1
 800e1d2:	d305      	bcc.n	800e1e0 <__copybits+0x40>
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}
 800e1d6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1da:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1de:	e7eb      	b.n	800e1b8 <__copybits+0x18>
 800e1e0:	f840 3b04 	str.w	r3, [r0], #4
 800e1e4:	e7f4      	b.n	800e1d0 <__copybits+0x30>

0800e1e6 <__any_on>:
 800e1e6:	f100 0214 	add.w	r2, r0, #20
 800e1ea:	114b      	asrs	r3, r1, #5
 800e1ec:	6900      	ldr	r0, [r0, #16]
 800e1ee:	4298      	cmp	r0, r3
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	db11      	blt.n	800e218 <__any_on+0x32>
 800e1f4:	dd0a      	ble.n	800e20c <__any_on+0x26>
 800e1f6:	f011 011f 	ands.w	r1, r1, #31
 800e1fa:	d007      	beq.n	800e20c <__any_on+0x26>
 800e1fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e200:	fa24 f001 	lsr.w	r0, r4, r1
 800e204:	fa00 f101 	lsl.w	r1, r0, r1
 800e208:	428c      	cmp	r4, r1
 800e20a:	d10b      	bne.n	800e224 <__any_on+0x3e>
 800e20c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e210:	4293      	cmp	r3, r2
 800e212:	d803      	bhi.n	800e21c <__any_on+0x36>
 800e214:	2000      	movs	r0, #0
 800e216:	bd10      	pop	{r4, pc}
 800e218:	4603      	mov	r3, r0
 800e21a:	e7f7      	b.n	800e20c <__any_on+0x26>
 800e21c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e220:	2900      	cmp	r1, #0
 800e222:	d0f5      	beq.n	800e210 <__any_on+0x2a>
 800e224:	2001      	movs	r0, #1
 800e226:	e7f6      	b.n	800e216 <__any_on+0x30>

0800e228 <sulp>:
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	4604      	mov	r4, r0
 800e22c:	460d      	mov	r5, r1
 800e22e:	4616      	mov	r6, r2
 800e230:	ec45 4b10 	vmov	d0, r4, r5
 800e234:	f7ff feb6 	bl	800dfa4 <__ulp>
 800e238:	ec51 0b10 	vmov	r0, r1, d0
 800e23c:	b17e      	cbz	r6, 800e25e <sulp+0x36>
 800e23e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e242:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e246:	2b00      	cmp	r3, #0
 800e248:	dd09      	ble.n	800e25e <sulp+0x36>
 800e24a:	051b      	lsls	r3, r3, #20
 800e24c:	2400      	movs	r4, #0
 800e24e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e252:	4622      	mov	r2, r4
 800e254:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e258:	462b      	mov	r3, r5
 800e25a:	f7f2 f9e1 	bl	8000620 <__aeabi_dmul>
 800e25e:	ec41 0b10 	vmov	d0, r0, r1
 800e262:	bd70      	pop	{r4, r5, r6, pc}
 800e264:	0000      	movs	r0, r0
	...

0800e268 <_strtod_l>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	b09f      	sub	sp, #124	@ 0x7c
 800e26e:	460c      	mov	r4, r1
 800e270:	f04f 0a00 	mov.w	sl, #0
 800e274:	f04f 0b00 	mov.w	fp, #0
 800e278:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e27a:	2200      	movs	r2, #0
 800e27c:	9005      	str	r0, [sp, #20]
 800e27e:	921a      	str	r2, [sp, #104]	@ 0x68
 800e280:	460a      	mov	r2, r1
 800e282:	9219      	str	r2, [sp, #100]	@ 0x64
 800e284:	7811      	ldrb	r1, [r2, #0]
 800e286:	292b      	cmp	r1, #43	@ 0x2b
 800e288:	d04a      	beq.n	800e320 <_strtod_l+0xb8>
 800e28a:	d838      	bhi.n	800e2fe <_strtod_l+0x96>
 800e28c:	290d      	cmp	r1, #13
 800e28e:	d832      	bhi.n	800e2f6 <_strtod_l+0x8e>
 800e290:	2908      	cmp	r1, #8
 800e292:	d832      	bhi.n	800e2fa <_strtod_l+0x92>
 800e294:	2900      	cmp	r1, #0
 800e296:	d03b      	beq.n	800e310 <_strtod_l+0xa8>
 800e298:	2200      	movs	r2, #0
 800e29a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e29c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e29e:	782a      	ldrb	r2, [r5, #0]
 800e2a0:	2a30      	cmp	r2, #48	@ 0x30
 800e2a2:	f040 80b3 	bne.w	800e40c <_strtod_l+0x1a4>
 800e2a6:	786a      	ldrb	r2, [r5, #1]
 800e2a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2ac:	2a58      	cmp	r2, #88	@ 0x58
 800e2ae:	d16e      	bne.n	800e38e <_strtod_l+0x126>
 800e2b0:	9302      	str	r3, [sp, #8]
 800e2b2:	a919      	add	r1, sp, #100	@ 0x64
 800e2b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2b6:	4a90      	ldr	r2, [pc, #576]	@ (800e4f8 <_strtod_l+0x290>)
 800e2b8:	9301      	str	r3, [sp, #4]
 800e2ba:	ab1a      	add	r3, sp, #104	@ 0x68
 800e2bc:	9805      	ldr	r0, [sp, #20]
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e2c2:	f001 f89d 	bl	800f400 <__gethex>
 800e2c6:	f010 060f 	ands.w	r6, r0, #15
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	d005      	beq.n	800e2da <_strtod_l+0x72>
 800e2ce:	2e06      	cmp	r6, #6
 800e2d0:	d128      	bne.n	800e324 <_strtod_l+0xbc>
 800e2d2:	3501      	adds	r5, #1
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f040 858e 	bne.w	800edfe <_strtod_l+0xb96>
 800e2e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2e4:	b1cb      	cbz	r3, 800e31a <_strtod_l+0xb2>
 800e2e6:	4652      	mov	r2, sl
 800e2e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e2ec:	ec43 2b10 	vmov	d0, r2, r3
 800e2f0:	b01f      	add	sp, #124	@ 0x7c
 800e2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f6:	2920      	cmp	r1, #32
 800e2f8:	d1ce      	bne.n	800e298 <_strtod_l+0x30>
 800e2fa:	3201      	adds	r2, #1
 800e2fc:	e7c1      	b.n	800e282 <_strtod_l+0x1a>
 800e2fe:	292d      	cmp	r1, #45	@ 0x2d
 800e300:	d1ca      	bne.n	800e298 <_strtod_l+0x30>
 800e302:	2101      	movs	r1, #1
 800e304:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e306:	1c51      	adds	r1, r2, #1
 800e308:	9119      	str	r1, [sp, #100]	@ 0x64
 800e30a:	7852      	ldrb	r2, [r2, #1]
 800e30c:	2a00      	cmp	r2, #0
 800e30e:	d1c5      	bne.n	800e29c <_strtod_l+0x34>
 800e310:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e312:	9419      	str	r4, [sp, #100]	@ 0x64
 800e314:	2b00      	cmp	r3, #0
 800e316:	f040 8570 	bne.w	800edfa <_strtod_l+0xb92>
 800e31a:	4652      	mov	r2, sl
 800e31c:	465b      	mov	r3, fp
 800e31e:	e7e5      	b.n	800e2ec <_strtod_l+0x84>
 800e320:	2100      	movs	r1, #0
 800e322:	e7ef      	b.n	800e304 <_strtod_l+0x9c>
 800e324:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e326:	b13a      	cbz	r2, 800e338 <_strtod_l+0xd0>
 800e328:	2135      	movs	r1, #53	@ 0x35
 800e32a:	a81c      	add	r0, sp, #112	@ 0x70
 800e32c:	f7ff ff38 	bl	800e1a0 <__copybits>
 800e330:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e332:	9805      	ldr	r0, [sp, #20]
 800e334:	f7ff fafc 	bl	800d930 <_Bfree>
 800e338:	3e01      	subs	r6, #1
 800e33a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e33c:	2e04      	cmp	r6, #4
 800e33e:	d806      	bhi.n	800e34e <_strtod_l+0xe6>
 800e340:	e8df f006 	tbb	[pc, r6]
 800e344:	201d0314 	.word	0x201d0314
 800e348:	14          	.byte	0x14
 800e349:	00          	.byte	0x00
 800e34a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e34e:	05e1      	lsls	r1, r4, #23
 800e350:	bf48      	it	mi
 800e352:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e356:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e35a:	0d1b      	lsrs	r3, r3, #20
 800e35c:	051b      	lsls	r3, r3, #20
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1bb      	bne.n	800e2da <_strtod_l+0x72>
 800e362:	f7fe fb05 	bl	800c970 <__errno>
 800e366:	2322      	movs	r3, #34	@ 0x22
 800e368:	6003      	str	r3, [r0, #0]
 800e36a:	e7b6      	b.n	800e2da <_strtod_l+0x72>
 800e36c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e370:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e374:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e378:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e37c:	e7e7      	b.n	800e34e <_strtod_l+0xe6>
 800e37e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e500 <_strtod_l+0x298>
 800e382:	e7e4      	b.n	800e34e <_strtod_l+0xe6>
 800e384:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e388:	f04f 3aff 	mov.w	sl, #4294967295
 800e38c:	e7df      	b.n	800e34e <_strtod_l+0xe6>
 800e38e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	9219      	str	r2, [sp, #100]	@ 0x64
 800e394:	785b      	ldrb	r3, [r3, #1]
 800e396:	2b30      	cmp	r3, #48	@ 0x30
 800e398:	d0f9      	beq.n	800e38e <_strtod_l+0x126>
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d09d      	beq.n	800e2da <_strtod_l+0x72>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a2:	220a      	movs	r2, #10
 800e3a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	461f      	mov	r7, r3
 800e3ac:	9308      	str	r3, [sp, #32]
 800e3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e3b2:	7805      	ldrb	r5, [r0, #0]
 800e3b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e3b8:	b2d9      	uxtb	r1, r3
 800e3ba:	2909      	cmp	r1, #9
 800e3bc:	d928      	bls.n	800e410 <_strtod_l+0x1a8>
 800e3be:	2201      	movs	r2, #1
 800e3c0:	494e      	ldr	r1, [pc, #312]	@ (800e4fc <_strtod_l+0x294>)
 800e3c2:	f000 ff59 	bl	800f278 <strncmp>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d033      	beq.n	800e432 <_strtod_l+0x1ca>
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	462a      	mov	r2, r5
 800e3ce:	463d      	mov	r5, r7
 800e3d0:	4681      	mov	r9, r0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2a65      	cmp	r2, #101	@ 0x65
 800e3d6:	d001      	beq.n	800e3dc <_strtod_l+0x174>
 800e3d8:	2a45      	cmp	r2, #69	@ 0x45
 800e3da:	d114      	bne.n	800e406 <_strtod_l+0x19e>
 800e3dc:	b91d      	cbnz	r5, 800e3e6 <_strtod_l+0x17e>
 800e3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3e0:	4302      	orrs	r2, r0
 800e3e2:	d095      	beq.n	800e310 <_strtod_l+0xa8>
 800e3e4:	2500      	movs	r5, #0
 800e3e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e3e8:	1c62      	adds	r2, r4, #1
 800e3ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3ec:	7862      	ldrb	r2, [r4, #1]
 800e3ee:	2a2b      	cmp	r2, #43	@ 0x2b
 800e3f0:	d078      	beq.n	800e4e4 <_strtod_l+0x27c>
 800e3f2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e3f4:	d07c      	beq.n	800e4f0 <_strtod_l+0x288>
 800e3f6:	f04f 0c00 	mov.w	ip, #0
 800e3fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e3fe:	2909      	cmp	r1, #9
 800e400:	f240 8084 	bls.w	800e50c <_strtod_l+0x2a4>
 800e404:	9419      	str	r4, [sp, #100]	@ 0x64
 800e406:	f04f 0800 	mov.w	r8, #0
 800e40a:	e0a4      	b.n	800e556 <_strtod_l+0x2ee>
 800e40c:	2300      	movs	r3, #0
 800e40e:	e7c7      	b.n	800e3a0 <_strtod_l+0x138>
 800e410:	2f08      	cmp	r7, #8
 800e412:	f100 0001 	add.w	r0, r0, #1
 800e416:	f107 0701 	add.w	r7, r7, #1
 800e41a:	bfd5      	itete	le
 800e41c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e41e:	9908      	ldrgt	r1, [sp, #32]
 800e420:	fb02 3301 	mlale	r3, r2, r1, r3
 800e424:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e428:	bfd4      	ite	le
 800e42a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e42c:	9308      	strgt	r3, [sp, #32]
 800e42e:	9019      	str	r0, [sp, #100]	@ 0x64
 800e430:	e7be      	b.n	800e3b0 <_strtod_l+0x148>
 800e432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	9219      	str	r2, [sp, #100]	@ 0x64
 800e438:	785a      	ldrb	r2, [r3, #1]
 800e43a:	b37f      	cbz	r7, 800e49c <_strtod_l+0x234>
 800e43c:	4681      	mov	r9, r0
 800e43e:	463d      	mov	r5, r7
 800e440:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e444:	2b09      	cmp	r3, #9
 800e446:	d912      	bls.n	800e46e <_strtod_l+0x206>
 800e448:	2301      	movs	r3, #1
 800e44a:	e7c3      	b.n	800e3d4 <_strtod_l+0x16c>
 800e44c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e44e:	3001      	adds	r0, #1
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	9219      	str	r2, [sp, #100]	@ 0x64
 800e454:	785a      	ldrb	r2, [r3, #1]
 800e456:	2a30      	cmp	r2, #48	@ 0x30
 800e458:	d0f8      	beq.n	800e44c <_strtod_l+0x1e4>
 800e45a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e45e:	2b08      	cmp	r3, #8
 800e460:	f200 84d2 	bhi.w	800ee08 <_strtod_l+0xba0>
 800e464:	4681      	mov	r9, r0
 800e466:	2000      	movs	r0, #0
 800e468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e46a:	4605      	mov	r5, r0
 800e46c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e46e:	3a30      	subs	r2, #48	@ 0x30
 800e470:	f100 0301 	add.w	r3, r0, #1
 800e474:	d02a      	beq.n	800e4cc <_strtod_l+0x264>
 800e476:	4499      	add	r9, r3
 800e478:	eb00 0c05 	add.w	ip, r0, r5
 800e47c:	462b      	mov	r3, r5
 800e47e:	210a      	movs	r1, #10
 800e480:	4563      	cmp	r3, ip
 800e482:	d10d      	bne.n	800e4a0 <_strtod_l+0x238>
 800e484:	1c69      	adds	r1, r5, #1
 800e486:	4401      	add	r1, r0
 800e488:	4428      	add	r0, r5
 800e48a:	2808      	cmp	r0, #8
 800e48c:	dc16      	bgt.n	800e4bc <_strtod_l+0x254>
 800e48e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e490:	230a      	movs	r3, #10
 800e492:	fb03 2300 	mla	r3, r3, r0, r2
 800e496:	930a      	str	r3, [sp, #40]	@ 0x28
 800e498:	2300      	movs	r3, #0
 800e49a:	e018      	b.n	800e4ce <_strtod_l+0x266>
 800e49c:	4638      	mov	r0, r7
 800e49e:	e7da      	b.n	800e456 <_strtod_l+0x1ee>
 800e4a0:	2b08      	cmp	r3, #8
 800e4a2:	f103 0301 	add.w	r3, r3, #1
 800e4a6:	dc03      	bgt.n	800e4b0 <_strtod_l+0x248>
 800e4a8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e4aa:	434e      	muls	r6, r1
 800e4ac:	960a      	str	r6, [sp, #40]	@ 0x28
 800e4ae:	e7e7      	b.n	800e480 <_strtod_l+0x218>
 800e4b0:	2b10      	cmp	r3, #16
 800e4b2:	bfde      	ittt	le
 800e4b4:	9e08      	ldrle	r6, [sp, #32]
 800e4b6:	434e      	mulle	r6, r1
 800e4b8:	9608      	strle	r6, [sp, #32]
 800e4ba:	e7e1      	b.n	800e480 <_strtod_l+0x218>
 800e4bc:	280f      	cmp	r0, #15
 800e4be:	dceb      	bgt.n	800e498 <_strtod_l+0x230>
 800e4c0:	9808      	ldr	r0, [sp, #32]
 800e4c2:	230a      	movs	r3, #10
 800e4c4:	fb03 2300 	mla	r3, r3, r0, r2
 800e4c8:	9308      	str	r3, [sp, #32]
 800e4ca:	e7e5      	b.n	800e498 <_strtod_l+0x230>
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e4d0:	460d      	mov	r5, r1
 800e4d2:	1c50      	adds	r0, r2, #1
 800e4d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	7852      	ldrb	r2, [r2, #1]
 800e4da:	e7b1      	b.n	800e440 <_strtod_l+0x1d8>
 800e4dc:	f04f 0900 	mov.w	r9, #0
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e77c      	b.n	800e3de <_strtod_l+0x176>
 800e4e4:	f04f 0c00 	mov.w	ip, #0
 800e4e8:	1ca2      	adds	r2, r4, #2
 800e4ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4ec:	78a2      	ldrb	r2, [r4, #2]
 800e4ee:	e784      	b.n	800e3fa <_strtod_l+0x192>
 800e4f0:	f04f 0c01 	mov.w	ip, #1
 800e4f4:	e7f8      	b.n	800e4e8 <_strtod_l+0x280>
 800e4f6:	bf00      	nop
 800e4f8:	08010b90 	.word	0x08010b90
 800e4fc:	08010b78 	.word	0x08010b78
 800e500:	7ff00000 	.word	0x7ff00000
 800e504:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e506:	1c51      	adds	r1, r2, #1
 800e508:	9119      	str	r1, [sp, #100]	@ 0x64
 800e50a:	7852      	ldrb	r2, [r2, #1]
 800e50c:	2a30      	cmp	r2, #48	@ 0x30
 800e50e:	d0f9      	beq.n	800e504 <_strtod_l+0x29c>
 800e510:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e514:	2908      	cmp	r1, #8
 800e516:	f63f af76 	bhi.w	800e406 <_strtod_l+0x19e>
 800e51a:	3a30      	subs	r2, #48	@ 0x30
 800e51c:	f04f 080a 	mov.w	r8, #10
 800e520:	920e      	str	r2, [sp, #56]	@ 0x38
 800e522:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e524:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e526:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e528:	1c56      	adds	r6, r2, #1
 800e52a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e52c:	7852      	ldrb	r2, [r2, #1]
 800e52e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e532:	f1be 0f09 	cmp.w	lr, #9
 800e536:	d939      	bls.n	800e5ac <_strtod_l+0x344>
 800e538:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e53a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e53e:	1a76      	subs	r6, r6, r1
 800e540:	2e08      	cmp	r6, #8
 800e542:	dc03      	bgt.n	800e54c <_strtod_l+0x2e4>
 800e544:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e546:	4588      	cmp	r8, r1
 800e548:	bfa8      	it	ge
 800e54a:	4688      	movge	r8, r1
 800e54c:	f1bc 0f00 	cmp.w	ip, #0
 800e550:	d001      	beq.n	800e556 <_strtod_l+0x2ee>
 800e552:	f1c8 0800 	rsb	r8, r8, #0
 800e556:	2d00      	cmp	r5, #0
 800e558:	d14e      	bne.n	800e5f8 <_strtod_l+0x390>
 800e55a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e55c:	4308      	orrs	r0, r1
 800e55e:	f47f aebc 	bne.w	800e2da <_strtod_l+0x72>
 800e562:	2b00      	cmp	r3, #0
 800e564:	f47f aed4 	bne.w	800e310 <_strtod_l+0xa8>
 800e568:	2a69      	cmp	r2, #105	@ 0x69
 800e56a:	d028      	beq.n	800e5be <_strtod_l+0x356>
 800e56c:	dc25      	bgt.n	800e5ba <_strtod_l+0x352>
 800e56e:	2a49      	cmp	r2, #73	@ 0x49
 800e570:	d025      	beq.n	800e5be <_strtod_l+0x356>
 800e572:	2a4e      	cmp	r2, #78	@ 0x4e
 800e574:	f47f aecc 	bne.w	800e310 <_strtod_l+0xa8>
 800e578:	499b      	ldr	r1, [pc, #620]	@ (800e7e8 <_strtod_l+0x580>)
 800e57a:	a819      	add	r0, sp, #100	@ 0x64
 800e57c:	f001 f960 	bl	800f840 <__match>
 800e580:	2800      	cmp	r0, #0
 800e582:	f43f aec5 	beq.w	800e310 <_strtod_l+0xa8>
 800e586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	2b28      	cmp	r3, #40	@ 0x28
 800e58c:	d12e      	bne.n	800e5ec <_strtod_l+0x384>
 800e58e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e590:	4996      	ldr	r1, [pc, #600]	@ (800e7ec <_strtod_l+0x584>)
 800e592:	a819      	add	r0, sp, #100	@ 0x64
 800e594:	f001 f968 	bl	800f868 <__hexnan>
 800e598:	2805      	cmp	r0, #5
 800e59a:	d127      	bne.n	800e5ec <_strtod_l+0x384>
 800e59c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e59e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e5a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e5a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e5aa:	e696      	b.n	800e2da <_strtod_l+0x72>
 800e5ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e5ae:	fb08 2101 	mla	r1, r8, r1, r2
 800e5b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e5b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5b8:	e7b5      	b.n	800e526 <_strtod_l+0x2be>
 800e5ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800e5bc:	e7da      	b.n	800e574 <_strtod_l+0x30c>
 800e5be:	498c      	ldr	r1, [pc, #560]	@ (800e7f0 <_strtod_l+0x588>)
 800e5c0:	a819      	add	r0, sp, #100	@ 0x64
 800e5c2:	f001 f93d 	bl	800f840 <__match>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f43f aea2 	beq.w	800e310 <_strtod_l+0xa8>
 800e5cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5ce:	a819      	add	r0, sp, #100	@ 0x64
 800e5d0:	4988      	ldr	r1, [pc, #544]	@ (800e7f4 <_strtod_l+0x58c>)
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e5d6:	f001 f933 	bl	800f840 <__match>
 800e5da:	b910      	cbnz	r0, 800e5e2 <_strtod_l+0x37a>
 800e5dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5de:	3301      	adds	r3, #1
 800e5e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e5e2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e804 <_strtod_l+0x59c>
 800e5e6:	f04f 0a00 	mov.w	sl, #0
 800e5ea:	e676      	b.n	800e2da <_strtod_l+0x72>
 800e5ec:	4882      	ldr	r0, [pc, #520]	@ (800e7f8 <_strtod_l+0x590>)
 800e5ee:	f000 fe67 	bl	800f2c0 <nan>
 800e5f2:	ec5b ab10 	vmov	sl, fp, d0
 800e5f6:	e670      	b.n	800e2da <_strtod_l+0x72>
 800e5f8:	eba8 0309 	sub.w	r3, r8, r9
 800e5fc:	2f00      	cmp	r7, #0
 800e5fe:	bf08      	it	eq
 800e600:	462f      	moveq	r7, r5
 800e602:	2d10      	cmp	r5, #16
 800e604:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e606:	462c      	mov	r4, r5
 800e608:	9309      	str	r3, [sp, #36]	@ 0x24
 800e60a:	bfa8      	it	ge
 800e60c:	2410      	movge	r4, #16
 800e60e:	f7f1 ff8d 	bl	800052c <__aeabi_ui2d>
 800e612:	2d09      	cmp	r5, #9
 800e614:	4682      	mov	sl, r0
 800e616:	468b      	mov	fp, r1
 800e618:	dc13      	bgt.n	800e642 <_strtod_l+0x3da>
 800e61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f43f ae5c 	beq.w	800e2da <_strtod_l+0x72>
 800e622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e624:	dd78      	ble.n	800e718 <_strtod_l+0x4b0>
 800e626:	2b16      	cmp	r3, #22
 800e628:	dc5f      	bgt.n	800e6ea <_strtod_l+0x482>
 800e62a:	4974      	ldr	r1, [pc, #464]	@ (800e7fc <_strtod_l+0x594>)
 800e62c:	4652      	mov	r2, sl
 800e62e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e632:	465b      	mov	r3, fp
 800e634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e638:	f7f1 fff2 	bl	8000620 <__aeabi_dmul>
 800e63c:	4682      	mov	sl, r0
 800e63e:	468b      	mov	fp, r1
 800e640:	e64b      	b.n	800e2da <_strtod_l+0x72>
 800e642:	4b6e      	ldr	r3, [pc, #440]	@ (800e7fc <_strtod_l+0x594>)
 800e644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e648:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e64c:	f7f1 ffe8 	bl	8000620 <__aeabi_dmul>
 800e650:	4682      	mov	sl, r0
 800e652:	468b      	mov	fp, r1
 800e654:	9808      	ldr	r0, [sp, #32]
 800e656:	f7f1 ff69 	bl	800052c <__aeabi_ui2d>
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	4650      	mov	r0, sl
 800e660:	4659      	mov	r1, fp
 800e662:	f7f1 fe27 	bl	80002b4 <__adddf3>
 800e666:	2d0f      	cmp	r5, #15
 800e668:	4682      	mov	sl, r0
 800e66a:	468b      	mov	fp, r1
 800e66c:	ddd5      	ble.n	800e61a <_strtod_l+0x3b2>
 800e66e:	1b2c      	subs	r4, r5, r4
 800e670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e672:	441c      	add	r4, r3
 800e674:	2c00      	cmp	r4, #0
 800e676:	f340 8096 	ble.w	800e7a6 <_strtod_l+0x53e>
 800e67a:	f014 030f 	ands.w	r3, r4, #15
 800e67e:	d00a      	beq.n	800e696 <_strtod_l+0x42e>
 800e680:	495e      	ldr	r1, [pc, #376]	@ (800e7fc <_strtod_l+0x594>)
 800e682:	4652      	mov	r2, sl
 800e684:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e688:	465b      	mov	r3, fp
 800e68a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e68e:	f7f1 ffc7 	bl	8000620 <__aeabi_dmul>
 800e692:	4682      	mov	sl, r0
 800e694:	468b      	mov	fp, r1
 800e696:	f034 040f 	bics.w	r4, r4, #15
 800e69a:	d073      	beq.n	800e784 <_strtod_l+0x51c>
 800e69c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e6a0:	dd48      	ble.n	800e734 <_strtod_l+0x4cc>
 800e6a2:	2400      	movs	r4, #0
 800e6a4:	46a0      	mov	r8, r4
 800e6a6:	46a1      	mov	r9, r4
 800e6a8:	940a      	str	r4, [sp, #40]	@ 0x28
 800e6aa:	2322      	movs	r3, #34	@ 0x22
 800e6ac:	9a05      	ldr	r2, [sp, #20]
 800e6ae:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e804 <_strtod_l+0x59c>
 800e6b2:	f04f 0a00 	mov.w	sl, #0
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f43f ae0d 	beq.w	800e2da <_strtod_l+0x72>
 800e6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6c2:	9805      	ldr	r0, [sp, #20]
 800e6c4:	f7ff f934 	bl	800d930 <_Bfree>
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	9805      	ldr	r0, [sp, #20]
 800e6cc:	f7ff f930 	bl	800d930 <_Bfree>
 800e6d0:	4641      	mov	r1, r8
 800e6d2:	9805      	ldr	r0, [sp, #20]
 800e6d4:	f7ff f92c 	bl	800d930 <_Bfree>
 800e6d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e6da:	9805      	ldr	r0, [sp, #20]
 800e6dc:	f7ff f928 	bl	800d930 <_Bfree>
 800e6e0:	4621      	mov	r1, r4
 800e6e2:	9805      	ldr	r0, [sp, #20]
 800e6e4:	f7ff f924 	bl	800d930 <_Bfree>
 800e6e8:	e5f7      	b.n	800e2da <_strtod_l+0x72>
 800e6ea:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	dbbc      	blt.n	800e66e <_strtod_l+0x406>
 800e6f4:	f1c5 050f 	rsb	r5, r5, #15
 800e6f8:	4c40      	ldr	r4, [pc, #256]	@ (800e7fc <_strtod_l+0x594>)
 800e6fa:	4652      	mov	r2, sl
 800e6fc:	465b      	mov	r3, fp
 800e6fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e702:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e706:	f7f1 ff8b 	bl	8000620 <__aeabi_dmul>
 800e70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e70c:	1b5d      	subs	r5, r3, r5
 800e70e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e712:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e716:	e78f      	b.n	800e638 <_strtod_l+0x3d0>
 800e718:	3316      	adds	r3, #22
 800e71a:	dba8      	blt.n	800e66e <_strtod_l+0x406>
 800e71c:	eba9 0808 	sub.w	r8, r9, r8
 800e720:	4b36      	ldr	r3, [pc, #216]	@ (800e7fc <_strtod_l+0x594>)
 800e722:	4650      	mov	r0, sl
 800e724:	4659      	mov	r1, fp
 800e726:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e72a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e72e:	f7f2 f8a1 	bl	8000874 <__aeabi_ddiv>
 800e732:	e783      	b.n	800e63c <_strtod_l+0x3d4>
 800e734:	4b32      	ldr	r3, [pc, #200]	@ (800e800 <_strtod_l+0x598>)
 800e736:	1124      	asrs	r4, r4, #4
 800e738:	4650      	mov	r0, sl
 800e73a:	4659      	mov	r1, fp
 800e73c:	9308      	str	r3, [sp, #32]
 800e73e:	2300      	movs	r3, #0
 800e740:	461e      	mov	r6, r3
 800e742:	2c01      	cmp	r4, #1
 800e744:	dc21      	bgt.n	800e78a <_strtod_l+0x522>
 800e746:	b10b      	cbz	r3, 800e74c <_strtod_l+0x4e4>
 800e748:	4682      	mov	sl, r0
 800e74a:	468b      	mov	fp, r1
 800e74c:	492c      	ldr	r1, [pc, #176]	@ (800e800 <_strtod_l+0x598>)
 800e74e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e752:	4652      	mov	r2, sl
 800e754:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e758:	465b      	mov	r3, fp
 800e75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e75e:	f7f1 ff5f 	bl	8000620 <__aeabi_dmul>
 800e762:	4b28      	ldr	r3, [pc, #160]	@ (800e804 <_strtod_l+0x59c>)
 800e764:	460a      	mov	r2, r1
 800e766:	4682      	mov	sl, r0
 800e768:	400b      	ands	r3, r1
 800e76a:	4927      	ldr	r1, [pc, #156]	@ (800e808 <_strtod_l+0x5a0>)
 800e76c:	428b      	cmp	r3, r1
 800e76e:	d898      	bhi.n	800e6a2 <_strtod_l+0x43a>
 800e770:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e774:	428b      	cmp	r3, r1
 800e776:	bf86      	itte	hi
 800e778:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e80c <_strtod_l+0x5a4>
 800e77c:	f04f 3aff 	movhi.w	sl, #4294967295
 800e780:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e784:	2300      	movs	r3, #0
 800e786:	9308      	str	r3, [sp, #32]
 800e788:	e07a      	b.n	800e880 <_strtod_l+0x618>
 800e78a:	07e2      	lsls	r2, r4, #31
 800e78c:	d505      	bpl.n	800e79a <_strtod_l+0x532>
 800e78e:	9b08      	ldr	r3, [sp, #32]
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 ff44 	bl	8000620 <__aeabi_dmul>
 800e798:	2301      	movs	r3, #1
 800e79a:	9a08      	ldr	r2, [sp, #32]
 800e79c:	3601      	adds	r6, #1
 800e79e:	1064      	asrs	r4, r4, #1
 800e7a0:	3208      	adds	r2, #8
 800e7a2:	9208      	str	r2, [sp, #32]
 800e7a4:	e7cd      	b.n	800e742 <_strtod_l+0x4da>
 800e7a6:	d0ed      	beq.n	800e784 <_strtod_l+0x51c>
 800e7a8:	4264      	negs	r4, r4
 800e7aa:	f014 020f 	ands.w	r2, r4, #15
 800e7ae:	d00a      	beq.n	800e7c6 <_strtod_l+0x55e>
 800e7b0:	4b12      	ldr	r3, [pc, #72]	@ (800e7fc <_strtod_l+0x594>)
 800e7b2:	4650      	mov	r0, sl
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7be:	f7f2 f859 	bl	8000874 <__aeabi_ddiv>
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	468b      	mov	fp, r1
 800e7c6:	1124      	asrs	r4, r4, #4
 800e7c8:	d0dc      	beq.n	800e784 <_strtod_l+0x51c>
 800e7ca:	2c1f      	cmp	r4, #31
 800e7cc:	dd20      	ble.n	800e810 <_strtod_l+0x5a8>
 800e7ce:	2400      	movs	r4, #0
 800e7d0:	46a0      	mov	r8, r4
 800e7d2:	46a1      	mov	r9, r4
 800e7d4:	940a      	str	r4, [sp, #40]	@ 0x28
 800e7d6:	2322      	movs	r3, #34	@ 0x22
 800e7d8:	9a05      	ldr	r2, [sp, #20]
 800e7da:	f04f 0a00 	mov.w	sl, #0
 800e7de:	f04f 0b00 	mov.w	fp, #0
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	e768      	b.n	800e6b8 <_strtod_l+0x450>
 800e7e6:	bf00      	nop
 800e7e8:	0801096a 	.word	0x0801096a
 800e7ec:	08010b7c 	.word	0x08010b7c
 800e7f0:	08010962 	.word	0x08010962
 800e7f4:	08010999 	.word	0x08010999
 800e7f8:	08010c24 	.word	0x08010c24
 800e7fc:	08010ab0 	.word	0x08010ab0
 800e800:	08010a88 	.word	0x08010a88
 800e804:	7ff00000 	.word	0x7ff00000
 800e808:	7ca00000 	.word	0x7ca00000
 800e80c:	7fefffff 	.word	0x7fefffff
 800e810:	f014 0310 	ands.w	r3, r4, #16
 800e814:	4650      	mov	r0, sl
 800e816:	4659      	mov	r1, fp
 800e818:	4ea9      	ldr	r6, [pc, #676]	@ (800eac0 <_strtod_l+0x858>)
 800e81a:	bf18      	it	ne
 800e81c:	236a      	movne	r3, #106	@ 0x6a
 800e81e:	9308      	str	r3, [sp, #32]
 800e820:	2300      	movs	r3, #0
 800e822:	07e2      	lsls	r2, r4, #31
 800e824:	d504      	bpl.n	800e830 <_strtod_l+0x5c8>
 800e826:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e82a:	f7f1 fef9 	bl	8000620 <__aeabi_dmul>
 800e82e:	2301      	movs	r3, #1
 800e830:	1064      	asrs	r4, r4, #1
 800e832:	f106 0608 	add.w	r6, r6, #8
 800e836:	d1f4      	bne.n	800e822 <_strtod_l+0x5ba>
 800e838:	b10b      	cbz	r3, 800e83e <_strtod_l+0x5d6>
 800e83a:	4682      	mov	sl, r0
 800e83c:	468b      	mov	fp, r1
 800e83e:	9b08      	ldr	r3, [sp, #32]
 800e840:	b1b3      	cbz	r3, 800e870 <_strtod_l+0x608>
 800e842:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e846:	4659      	mov	r1, fp
 800e848:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	dd0f      	ble.n	800e870 <_strtod_l+0x608>
 800e850:	2b1f      	cmp	r3, #31
 800e852:	dd55      	ble.n	800e900 <_strtod_l+0x698>
 800e854:	2b34      	cmp	r3, #52	@ 0x34
 800e856:	f04f 0a00 	mov.w	sl, #0
 800e85a:	bfdb      	ittet	le
 800e85c:	f04f 33ff 	movle.w	r3, #4294967295
 800e860:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e864:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e868:	4093      	lslle	r3, r2
 800e86a:	bfd8      	it	le
 800e86c:	ea03 0b01 	andle.w	fp, r3, r1
 800e870:	2200      	movs	r2, #0
 800e872:	2300      	movs	r3, #0
 800e874:	4650      	mov	r0, sl
 800e876:	4659      	mov	r1, fp
 800e878:	f7f2 f93a 	bl	8000af0 <__aeabi_dcmpeq>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d1a6      	bne.n	800e7ce <_strtod_l+0x566>
 800e880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e882:	463a      	mov	r2, r7
 800e884:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	462b      	mov	r3, r5
 800e88a:	9805      	ldr	r0, [sp, #20]
 800e88c:	f7ff f8ba 	bl	800da04 <__s2b>
 800e890:	900a      	str	r0, [sp, #40]	@ 0x28
 800e892:	2800      	cmp	r0, #0
 800e894:	f43f af05 	beq.w	800e6a2 <_strtod_l+0x43a>
 800e898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e89a:	eba9 0308 	sub.w	r3, r9, r8
 800e89e:	2400      	movs	r4, #0
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	46a0      	mov	r8, r4
 800e8a4:	bfa8      	it	ge
 800e8a6:	2300      	movge	r3, #0
 800e8a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e8aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e8ae:	9316      	str	r3, [sp, #88]	@ 0x58
 800e8b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8b2:	9805      	ldr	r0, [sp, #20]
 800e8b4:	6859      	ldr	r1, [r3, #4]
 800e8b6:	f7fe fffb 	bl	800d8b0 <_Balloc>
 800e8ba:	4681      	mov	r9, r0
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	f43f aef4 	beq.w	800e6aa <_strtod_l+0x442>
 800e8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8c4:	300c      	adds	r0, #12
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	f103 010c 	add.w	r1, r3, #12
 800e8cc:	3202      	adds	r2, #2
 800e8ce:	0092      	lsls	r2, r2, #2
 800e8d0:	f7fe f889 	bl	800c9e6 <memcpy>
 800e8d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e8d6:	a91b      	add	r1, sp, #108	@ 0x6c
 800e8d8:	9805      	ldr	r0, [sp, #20]
 800e8da:	ec4b ab10 	vmov	d0, sl, fp
 800e8de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e8e2:	f7ff fbd3 	bl	800e08c <__d2b>
 800e8e6:	901a      	str	r0, [sp, #104]	@ 0x68
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	f43f aede 	beq.w	800e6aa <_strtod_l+0x442>
 800e8ee:	2101      	movs	r1, #1
 800e8f0:	9805      	ldr	r0, [sp, #20]
 800e8f2:	f7ff f91d 	bl	800db30 <__i2b>
 800e8f6:	4680      	mov	r8, r0
 800e8f8:	b948      	cbnz	r0, 800e90e <_strtod_l+0x6a6>
 800e8fa:	f04f 0800 	mov.w	r8, #0
 800e8fe:	e6d4      	b.n	800e6aa <_strtod_l+0x442>
 800e900:	f04f 32ff 	mov.w	r2, #4294967295
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	ea03 0a0a 	and.w	sl, r3, sl
 800e90c:	e7b0      	b.n	800e870 <_strtod_l+0x608>
 800e90e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e910:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e912:	2d00      	cmp	r5, #0
 800e914:	bfa9      	itett	ge
 800e916:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e918:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e91a:	18ef      	addge	r7, r5, r3
 800e91c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e91e:	bfb8      	it	lt
 800e920:	1b5e      	sublt	r6, r3, r5
 800e922:	9b08      	ldr	r3, [sp, #32]
 800e924:	bfb8      	it	lt
 800e926:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e928:	1aed      	subs	r5, r5, r3
 800e92a:	4b66      	ldr	r3, [pc, #408]	@ (800eac4 <_strtod_l+0x85c>)
 800e92c:	4415      	add	r5, r2
 800e92e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e932:	3d01      	subs	r5, #1
 800e934:	429d      	cmp	r5, r3
 800e936:	da4f      	bge.n	800e9d8 <_strtod_l+0x770>
 800e938:	1b5b      	subs	r3, r3, r5
 800e93a:	2101      	movs	r1, #1
 800e93c:	2b1f      	cmp	r3, #31
 800e93e:	eba2 0203 	sub.w	r2, r2, r3
 800e942:	dc3d      	bgt.n	800e9c0 <_strtod_l+0x758>
 800e944:	fa01 f303 	lsl.w	r3, r1, r3
 800e948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e94a:	2300      	movs	r3, #0
 800e94c:	9310      	str	r3, [sp, #64]	@ 0x40
 800e94e:	18bd      	adds	r5, r7, r2
 800e950:	9b08      	ldr	r3, [sp, #32]
 800e952:	4416      	add	r6, r2
 800e954:	42af      	cmp	r7, r5
 800e956:	441e      	add	r6, r3
 800e958:	463b      	mov	r3, r7
 800e95a:	bfa8      	it	ge
 800e95c:	462b      	movge	r3, r5
 800e95e:	42b3      	cmp	r3, r6
 800e960:	bfa8      	it	ge
 800e962:	4633      	movge	r3, r6
 800e964:	2b00      	cmp	r3, #0
 800e966:	bfc2      	ittt	gt
 800e968:	1aed      	subgt	r5, r5, r3
 800e96a:	1af6      	subgt	r6, r6, r3
 800e96c:	1aff      	subgt	r7, r7, r3
 800e96e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e970:	2b00      	cmp	r3, #0
 800e972:	dd16      	ble.n	800e9a2 <_strtod_l+0x73a>
 800e974:	4641      	mov	r1, r8
 800e976:	461a      	mov	r2, r3
 800e978:	9805      	ldr	r0, [sp, #20]
 800e97a:	f7ff f999 	bl	800dcb0 <__pow5mult>
 800e97e:	4680      	mov	r8, r0
 800e980:	2800      	cmp	r0, #0
 800e982:	d0ba      	beq.n	800e8fa <_strtod_l+0x692>
 800e984:	4601      	mov	r1, r0
 800e986:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e988:	9805      	ldr	r0, [sp, #20]
 800e98a:	f7ff f8e7 	bl	800db5c <__multiply>
 800e98e:	900e      	str	r0, [sp, #56]	@ 0x38
 800e990:	2800      	cmp	r0, #0
 800e992:	f43f ae8a 	beq.w	800e6aa <_strtod_l+0x442>
 800e996:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e998:	9805      	ldr	r0, [sp, #20]
 800e99a:	f7fe ffc9 	bl	800d930 <_Bfree>
 800e99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9a2:	2d00      	cmp	r5, #0
 800e9a4:	dc1d      	bgt.n	800e9e2 <_strtod_l+0x77a>
 800e9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	dd23      	ble.n	800e9f4 <_strtod_l+0x78c>
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e9b0:	9805      	ldr	r0, [sp, #20]
 800e9b2:	f7ff f97d 	bl	800dcb0 <__pow5mult>
 800e9b6:	4681      	mov	r9, r0
 800e9b8:	b9e0      	cbnz	r0, 800e9f4 <_strtod_l+0x78c>
 800e9ba:	f04f 0900 	mov.w	r9, #0
 800e9be:	e674      	b.n	800e6aa <_strtod_l+0x442>
 800e9c0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e9c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e9c6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e9ca:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e9ce:	35e2      	adds	r5, #226	@ 0xe2
 800e9d0:	fa01 f305 	lsl.w	r3, r1, r5
 800e9d4:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9d6:	e7ba      	b.n	800e94e <_strtod_l+0x6e6>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9dc:	2301      	movs	r3, #1
 800e9de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e9e0:	e7b5      	b.n	800e94e <_strtod_l+0x6e6>
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9e6:	9805      	ldr	r0, [sp, #20]
 800e9e8:	f7ff f9bc 	bl	800dd64 <__lshift>
 800e9ec:	901a      	str	r0, [sp, #104]	@ 0x68
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d1d9      	bne.n	800e9a6 <_strtod_l+0x73e>
 800e9f2:	e65a      	b.n	800e6aa <_strtod_l+0x442>
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	dd07      	ble.n	800ea08 <_strtod_l+0x7a0>
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	9805      	ldr	r0, [sp, #20]
 800e9fe:	f7ff f9b1 	bl	800dd64 <__lshift>
 800ea02:	4681      	mov	r9, r0
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d0d8      	beq.n	800e9ba <_strtod_l+0x752>
 800ea08:	2f00      	cmp	r7, #0
 800ea0a:	dd08      	ble.n	800ea1e <_strtod_l+0x7b6>
 800ea0c:	4641      	mov	r1, r8
 800ea0e:	463a      	mov	r2, r7
 800ea10:	9805      	ldr	r0, [sp, #20]
 800ea12:	f7ff f9a7 	bl	800dd64 <__lshift>
 800ea16:	4680      	mov	r8, r0
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f43f ae46 	beq.w	800e6aa <_strtod_l+0x442>
 800ea1e:	464a      	mov	r2, r9
 800ea20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea22:	9805      	ldr	r0, [sp, #20]
 800ea24:	f7ff fa26 	bl	800de74 <__mdiff>
 800ea28:	4604      	mov	r4, r0
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f43f ae3d 	beq.w	800e6aa <_strtod_l+0x442>
 800ea30:	68c3      	ldr	r3, [r0, #12]
 800ea32:	4641      	mov	r1, r8
 800ea34:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea36:	2300      	movs	r3, #0
 800ea38:	60c3      	str	r3, [r0, #12]
 800ea3a:	f7ff f9ff 	bl	800de3c <__mcmp>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	da46      	bge.n	800ead0 <_strtod_l+0x868>
 800ea42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea44:	ea53 030a 	orrs.w	r3, r3, sl
 800ea48:	d16c      	bne.n	800eb24 <_strtod_l+0x8bc>
 800ea4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d168      	bne.n	800eb24 <_strtod_l+0x8bc>
 800ea52:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea56:	0d1b      	lsrs	r3, r3, #20
 800ea58:	051b      	lsls	r3, r3, #20
 800ea5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ea5e:	d961      	bls.n	800eb24 <_strtod_l+0x8bc>
 800ea60:	6963      	ldr	r3, [r4, #20]
 800ea62:	b913      	cbnz	r3, 800ea6a <_strtod_l+0x802>
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	dd5c      	ble.n	800eb24 <_strtod_l+0x8bc>
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	9805      	ldr	r0, [sp, #20]
 800ea70:	f7ff f978 	bl	800dd64 <__lshift>
 800ea74:	4641      	mov	r1, r8
 800ea76:	4604      	mov	r4, r0
 800ea78:	f7ff f9e0 	bl	800de3c <__mcmp>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	dd51      	ble.n	800eb24 <_strtod_l+0x8bc>
 800ea80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea84:	9a08      	ldr	r2, [sp, #32]
 800ea86:	0d1b      	lsrs	r3, r3, #20
 800ea88:	051b      	lsls	r3, r3, #20
 800ea8a:	2a00      	cmp	r2, #0
 800ea8c:	d06b      	beq.n	800eb66 <_strtod_l+0x8fe>
 800ea8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ea92:	d868      	bhi.n	800eb66 <_strtod_l+0x8fe>
 800ea94:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ea98:	f67f ae9d 	bls.w	800e7d6 <_strtod_l+0x56e>
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	@ (800eac8 <_strtod_l+0x860>)
 800ea9e:	4650      	mov	r0, sl
 800eaa0:	4659      	mov	r1, fp
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f7f1 fdbc 	bl	8000620 <__aeabi_dmul>
 800eaa8:	4b08      	ldr	r3, [pc, #32]	@ (800eacc <_strtod_l+0x864>)
 800eaaa:	4682      	mov	sl, r0
 800eaac:	468b      	mov	fp, r1
 800eaae:	400b      	ands	r3, r1
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f47f ae05 	bne.w	800e6c0 <_strtod_l+0x458>
 800eab6:	2322      	movs	r3, #34	@ 0x22
 800eab8:	9a05      	ldr	r2, [sp, #20]
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	e600      	b.n	800e6c0 <_strtod_l+0x458>
 800eabe:	bf00      	nop
 800eac0:	08010ba8 	.word	0x08010ba8
 800eac4:	fffffc02 	.word	0xfffffc02
 800eac8:	39500000 	.word	0x39500000
 800eacc:	7ff00000 	.word	0x7ff00000
 800ead0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ead4:	d165      	bne.n	800eba2 <_strtod_l+0x93a>
 800ead6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ead8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eadc:	b35a      	cbz	r2, 800eb36 <_strtod_l+0x8ce>
 800eade:	4a9e      	ldr	r2, [pc, #632]	@ (800ed58 <_strtod_l+0xaf0>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d12b      	bne.n	800eb3c <_strtod_l+0x8d4>
 800eae4:	9b08      	ldr	r3, [sp, #32]
 800eae6:	4651      	mov	r1, sl
 800eae8:	b303      	cbz	r3, 800eb2c <_strtod_l+0x8c4>
 800eaea:	465a      	mov	r2, fp
 800eaec:	4b9b      	ldr	r3, [pc, #620]	@ (800ed5c <_strtod_l+0xaf4>)
 800eaee:	4013      	ands	r3, r2
 800eaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eaf8:	d81b      	bhi.n	800eb32 <_strtod_l+0x8ca>
 800eafa:	0d1b      	lsrs	r3, r3, #20
 800eafc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb00:	fa02 f303 	lsl.w	r3, r2, r3
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d119      	bne.n	800eb3c <_strtod_l+0x8d4>
 800eb08:	4b95      	ldr	r3, [pc, #596]	@ (800ed60 <_strtod_l+0xaf8>)
 800eb0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d102      	bne.n	800eb16 <_strtod_l+0x8ae>
 800eb10:	3101      	adds	r1, #1
 800eb12:	f43f adca 	beq.w	800e6aa <_strtod_l+0x442>
 800eb16:	4b91      	ldr	r3, [pc, #580]	@ (800ed5c <_strtod_l+0xaf4>)
 800eb18:	f04f 0a00 	mov.w	sl, #0
 800eb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb1e:	401a      	ands	r2, r3
 800eb20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800eb24:	9b08      	ldr	r3, [sp, #32]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1b8      	bne.n	800ea9c <_strtod_l+0x834>
 800eb2a:	e5c9      	b.n	800e6c0 <_strtod_l+0x458>
 800eb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb30:	e7e8      	b.n	800eb04 <_strtod_l+0x89c>
 800eb32:	4613      	mov	r3, r2
 800eb34:	e7e6      	b.n	800eb04 <_strtod_l+0x89c>
 800eb36:	ea53 030a 	orrs.w	r3, r3, sl
 800eb3a:	d0a1      	beq.n	800ea80 <_strtod_l+0x818>
 800eb3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb3e:	b1db      	cbz	r3, 800eb78 <_strtod_l+0x910>
 800eb40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb42:	4213      	tst	r3, r2
 800eb44:	d0ee      	beq.n	800eb24 <_strtod_l+0x8bc>
 800eb46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb48:	4650      	mov	r0, sl
 800eb4a:	9a08      	ldr	r2, [sp, #32]
 800eb4c:	4659      	mov	r1, fp
 800eb4e:	b1bb      	cbz	r3, 800eb80 <_strtod_l+0x918>
 800eb50:	f7ff fb6a 	bl	800e228 <sulp>
 800eb54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb58:	ec53 2b10 	vmov	r2, r3, d0
 800eb5c:	f7f1 fbaa 	bl	80002b4 <__adddf3>
 800eb60:	4682      	mov	sl, r0
 800eb62:	468b      	mov	fp, r1
 800eb64:	e7de      	b.n	800eb24 <_strtod_l+0x8bc>
 800eb66:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eb6a:	f04f 3aff 	mov.w	sl, #4294967295
 800eb6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb76:	e7d5      	b.n	800eb24 <_strtod_l+0x8bc>
 800eb78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb7a:	ea13 0f0a 	tst.w	r3, sl
 800eb7e:	e7e1      	b.n	800eb44 <_strtod_l+0x8dc>
 800eb80:	f7ff fb52 	bl	800e228 <sulp>
 800eb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb88:	ec53 2b10 	vmov	r2, r3, d0
 800eb8c:	f7f1 fb90 	bl	80002b0 <__aeabi_dsub>
 800eb90:	2200      	movs	r2, #0
 800eb92:	2300      	movs	r3, #0
 800eb94:	4682      	mov	sl, r0
 800eb96:	468b      	mov	fp, r1
 800eb98:	f7f1 ffaa 	bl	8000af0 <__aeabi_dcmpeq>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d0c1      	beq.n	800eb24 <_strtod_l+0x8bc>
 800eba0:	e619      	b.n	800e7d6 <_strtod_l+0x56e>
 800eba2:	4641      	mov	r1, r8
 800eba4:	4620      	mov	r0, r4
 800eba6:	f7ff fac9 	bl	800e13c <__ratio>
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ebb0:	ec57 6b10 	vmov	r6, r7, d0
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	f7f1 ffae 	bl	8000b18 <__aeabi_dcmple>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d06f      	beq.n	800eca0 <_strtod_l+0xa38>
 800ebc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d17a      	bne.n	800ecbc <_strtod_l+0xa54>
 800ebc6:	f1ba 0f00 	cmp.w	sl, #0
 800ebca:	d158      	bne.n	800ec7e <_strtod_l+0xa16>
 800ebcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d15a      	bne.n	800ec8c <_strtod_l+0xa24>
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4b62      	ldr	r3, [pc, #392]	@ (800ed64 <_strtod_l+0xafc>)
 800ebda:	4630      	mov	r0, r6
 800ebdc:	4639      	mov	r1, r7
 800ebde:	f7f1 ff91 	bl	8000b04 <__aeabi_dcmplt>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d159      	bne.n	800ec9a <_strtod_l+0xa32>
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	4639      	mov	r1, r7
 800ebea:	2200      	movs	r2, #0
 800ebec:	4b5e      	ldr	r3, [pc, #376]	@ (800ed68 <_strtod_l+0xb00>)
 800ebee:	f7f1 fd17 	bl	8000620 <__aeabi_dmul>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ebfa:	9606      	str	r6, [sp, #24]
 800ebfc:	9307      	str	r3, [sp, #28]
 800ebfe:	4d57      	ldr	r5, [pc, #348]	@ (800ed5c <_strtod_l+0xaf4>)
 800ec00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec0a:	401d      	ands	r5, r3
 800ec0c:	4b57      	ldr	r3, [pc, #348]	@ (800ed6c <_strtod_l+0xb04>)
 800ec0e:	429d      	cmp	r5, r3
 800ec10:	f040 80b0 	bne.w	800ed74 <_strtod_l+0xb0c>
 800ec14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec16:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ec1a:	ec4b ab10 	vmov	d0, sl, fp
 800ec1e:	f7ff f9c1 	bl	800dfa4 <__ulp>
 800ec22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec26:	ec51 0b10 	vmov	r0, r1, d0
 800ec2a:	f7f1 fcf9 	bl	8000620 <__aeabi_dmul>
 800ec2e:	4652      	mov	r2, sl
 800ec30:	465b      	mov	r3, fp
 800ec32:	f7f1 fb3f 	bl	80002b4 <__adddf3>
 800ec36:	460b      	mov	r3, r1
 800ec38:	4948      	ldr	r1, [pc, #288]	@ (800ed5c <_strtod_l+0xaf4>)
 800ec3a:	4682      	mov	sl, r0
 800ec3c:	4a4c      	ldr	r2, [pc, #304]	@ (800ed70 <_strtod_l+0xb08>)
 800ec3e:	4019      	ands	r1, r3
 800ec40:	4291      	cmp	r1, r2
 800ec42:	d942      	bls.n	800ecca <_strtod_l+0xa62>
 800ec44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec46:	4b46      	ldr	r3, [pc, #280]	@ (800ed60 <_strtod_l+0xaf8>)
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d103      	bne.n	800ec54 <_strtod_l+0x9ec>
 800ec4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec4e:	3301      	adds	r3, #1
 800ec50:	f43f ad2b 	beq.w	800e6aa <_strtod_l+0x442>
 800ec54:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800ed60 <_strtod_l+0xaf8>
 800ec58:	f04f 3aff 	mov.w	sl, #4294967295
 800ec5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec5e:	9805      	ldr	r0, [sp, #20]
 800ec60:	f7fe fe66 	bl	800d930 <_Bfree>
 800ec64:	4649      	mov	r1, r9
 800ec66:	9805      	ldr	r0, [sp, #20]
 800ec68:	f7fe fe62 	bl	800d930 <_Bfree>
 800ec6c:	4641      	mov	r1, r8
 800ec6e:	9805      	ldr	r0, [sp, #20]
 800ec70:	f7fe fe5e 	bl	800d930 <_Bfree>
 800ec74:	4621      	mov	r1, r4
 800ec76:	9805      	ldr	r0, [sp, #20]
 800ec78:	f7fe fe5a 	bl	800d930 <_Bfree>
 800ec7c:	e618      	b.n	800e8b0 <_strtod_l+0x648>
 800ec7e:	f1ba 0f01 	cmp.w	sl, #1
 800ec82:	d103      	bne.n	800ec8c <_strtod_l+0xa24>
 800ec84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f43f ada5 	beq.w	800e7d6 <_strtod_l+0x56e>
 800ec8c:	2600      	movs	r6, #0
 800ec8e:	4f35      	ldr	r7, [pc, #212]	@ (800ed64 <_strtod_l+0xafc>)
 800ec90:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800ed38 <_strtod_l+0xad0>
 800ec94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec98:	e7b1      	b.n	800ebfe <_strtod_l+0x996>
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	4f32      	ldr	r7, [pc, #200]	@ (800ed68 <_strtod_l+0xb00>)
 800ec9e:	e7aa      	b.n	800ebf6 <_strtod_l+0x98e>
 800eca0:	4b31      	ldr	r3, [pc, #196]	@ (800ed68 <_strtod_l+0xb00>)
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	2200      	movs	r2, #0
 800eca8:	f7f1 fcba 	bl	8000620 <__aeabi_dmul>
 800ecac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460f      	mov	r7, r1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d09f      	beq.n	800ebf6 <_strtod_l+0x98e>
 800ecb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ecba:	e7a0      	b.n	800ebfe <_strtod_l+0x996>
 800ecbc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800ed40 <_strtod_l+0xad8>
 800ecc0:	ec57 6b17 	vmov	r6, r7, d7
 800ecc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecc8:	e799      	b.n	800ebfe <_strtod_l+0x996>
 800ecca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ecce:	9b08      	ldr	r3, [sp, #32]
 800ecd0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1c1      	bne.n	800ec5c <_strtod_l+0x9f4>
 800ecd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ecdc:	0d1b      	lsrs	r3, r3, #20
 800ecde:	051b      	lsls	r3, r3, #20
 800ece0:	429d      	cmp	r5, r3
 800ece2:	d1bb      	bne.n	800ec5c <_strtod_l+0x9f4>
 800ece4:	4630      	mov	r0, r6
 800ece6:	4639      	mov	r1, r7
 800ece8:	f7f1 fffa 	bl	8000ce0 <__aeabi_d2lz>
 800ecec:	f7f1 fc6a 	bl	80005c4 <__aeabi_l2d>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ecfc:	f7f1 fad8 	bl	80002b0 <__aeabi_dsub>
 800ed00:	460b      	mov	r3, r1
 800ed02:	4602      	mov	r2, r0
 800ed04:	ea46 060a 	orr.w	r6, r6, sl
 800ed08:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	431e      	orrs	r6, r3
 800ed10:	d06d      	beq.n	800edee <_strtod_l+0xb86>
 800ed12:	a30d      	add	r3, pc, #52	@ (adr r3, 800ed48 <_strtod_l+0xae0>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 fef4 	bl	8000b04 <__aeabi_dcmplt>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	f47f accf 	bne.w	800e6c0 <_strtod_l+0x458>
 800ed22:	a30b      	add	r3, pc, #44	@ (adr r3, 800ed50 <_strtod_l+0xae8>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed2c:	f7f1 ff08 	bl	8000b40 <__aeabi_dcmpgt>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d093      	beq.n	800ec5c <_strtod_l+0x9f4>
 800ed34:	e4c4      	b.n	800e6c0 <_strtod_l+0x458>
 800ed36:	bf00      	nop
 800ed38:	00000000 	.word	0x00000000
 800ed3c:	bff00000 	.word	0xbff00000
 800ed40:	00000000 	.word	0x00000000
 800ed44:	3ff00000 	.word	0x3ff00000
 800ed48:	94a03595 	.word	0x94a03595
 800ed4c:	3fdfffff 	.word	0x3fdfffff
 800ed50:	35afe535 	.word	0x35afe535
 800ed54:	3fe00000 	.word	0x3fe00000
 800ed58:	000fffff 	.word	0x000fffff
 800ed5c:	7ff00000 	.word	0x7ff00000
 800ed60:	7fefffff 	.word	0x7fefffff
 800ed64:	3ff00000 	.word	0x3ff00000
 800ed68:	3fe00000 	.word	0x3fe00000
 800ed6c:	7fe00000 	.word	0x7fe00000
 800ed70:	7c9fffff 	.word	0x7c9fffff
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	b323      	cbz	r3, 800edc2 <_strtod_l+0xb5a>
 800ed78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ed7c:	d821      	bhi.n	800edc2 <_strtod_l+0xb5a>
 800ed7e:	4630      	mov	r0, r6
 800ed80:	4639      	mov	r1, r7
 800ed82:	a327      	add	r3, pc, #156	@ (adr r3, 800ee20 <_strtod_l+0xbb8>)
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	f7f1 fec6 	bl	8000b18 <__aeabi_dcmple>
 800ed8c:	b1a0      	cbz	r0, 800edb8 <_strtod_l+0xb50>
 800ed8e:	4639      	mov	r1, r7
 800ed90:	4630      	mov	r0, r6
 800ed92:	f7f1 ff1d 	bl	8000bd0 <__aeabi_d2uiz>
 800ed96:	2801      	cmp	r0, #1
 800ed98:	bf38      	it	cc
 800ed9a:	2001      	movcc	r0, #1
 800ed9c:	f7f1 fbc6 	bl	800052c <__aeabi_ui2d>
 800eda0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eda2:	4606      	mov	r6, r0
 800eda4:	460f      	mov	r7, r1
 800eda6:	b9fb      	cbnz	r3, 800ede8 <_strtod_l+0xb80>
 800eda8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800edac:	9014      	str	r0, [sp, #80]	@ 0x50
 800edae:	9315      	str	r3, [sp, #84]	@ 0x54
 800edb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800edb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800edb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800edba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800edbe:	1b5b      	subs	r3, r3, r5
 800edc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800edc2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800edc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800edca:	f7ff f8eb 	bl	800dfa4 <__ulp>
 800edce:	4650      	mov	r0, sl
 800edd0:	4659      	mov	r1, fp
 800edd2:	ec53 2b10 	vmov	r2, r3, d0
 800edd6:	f7f1 fc23 	bl	8000620 <__aeabi_dmul>
 800edda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800edde:	f7f1 fa69 	bl	80002b4 <__adddf3>
 800ede2:	4682      	mov	sl, r0
 800ede4:	468b      	mov	fp, r1
 800ede6:	e772      	b.n	800ecce <_strtod_l+0xa66>
 800ede8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800edec:	e7e0      	b.n	800edb0 <_strtod_l+0xb48>
 800edee:	a30e      	add	r3, pc, #56	@ (adr r3, 800ee28 <_strtod_l+0xbc0>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 fe86 	bl	8000b04 <__aeabi_dcmplt>
 800edf8:	e79a      	b.n	800ed30 <_strtod_l+0xac8>
 800edfa:	2300      	movs	r3, #0
 800edfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800edfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee00:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ee02:	6013      	str	r3, [r2, #0]
 800ee04:	f7ff ba6d 	b.w	800e2e2 <_strtod_l+0x7a>
 800ee08:	2a65      	cmp	r2, #101	@ 0x65
 800ee0a:	f43f ab67 	beq.w	800e4dc <_strtod_l+0x274>
 800ee0e:	2a45      	cmp	r2, #69	@ 0x45
 800ee10:	f43f ab64 	beq.w	800e4dc <_strtod_l+0x274>
 800ee14:	2301      	movs	r3, #1
 800ee16:	f7ff bba0 	b.w	800e55a <_strtod_l+0x2f2>
 800ee1a:	bf00      	nop
 800ee1c:	f3af 8000 	nop.w
 800ee20:	ffc00000 	.word	0xffc00000
 800ee24:	41dfffff 	.word	0x41dfffff
 800ee28:	94a03595 	.word	0x94a03595
 800ee2c:	3fcfffff 	.word	0x3fcfffff

0800ee30 <_strtod_r>:
 800ee30:	4b01      	ldr	r3, [pc, #4]	@ (800ee38 <_strtod_r+0x8>)
 800ee32:	f7ff ba19 	b.w	800e268 <_strtod_l>
 800ee36:	bf00      	nop
 800ee38:	20000084 	.word	0x20000084

0800ee3c <__ssputs_r>:
 800ee3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	461f      	mov	r7, r3
 800ee42:	688e      	ldr	r6, [r1, #8]
 800ee44:	4682      	mov	sl, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	42be      	cmp	r6, r7
 800ee4a:	4690      	mov	r8, r2
 800ee4c:	680b      	ldr	r3, [r1, #0]
 800ee4e:	d82d      	bhi.n	800eeac <__ssputs_r+0x70>
 800ee50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee58:	d026      	beq.n	800eea8 <__ssputs_r+0x6c>
 800ee5a:	6965      	ldr	r5, [r4, #20]
 800ee5c:	6909      	ldr	r1, [r1, #16]
 800ee5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee62:	eba3 0901 	sub.w	r9, r3, r1
 800ee66:	1c7b      	adds	r3, r7, #1
 800ee68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee6c:	444b      	add	r3, r9
 800ee6e:	106d      	asrs	r5, r5, #1
 800ee70:	429d      	cmp	r5, r3
 800ee72:	bf38      	it	cc
 800ee74:	461d      	movcc	r5, r3
 800ee76:	0553      	lsls	r3, r2, #21
 800ee78:	d527      	bpl.n	800eeca <__ssputs_r+0x8e>
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	f7fe fc8c 	bl	800d798 <_malloc_r>
 800ee80:	4606      	mov	r6, r0
 800ee82:	b360      	cbz	r0, 800eede <__ssputs_r+0xa2>
 800ee84:	464a      	mov	r2, r9
 800ee86:	6921      	ldr	r1, [r4, #16]
 800ee88:	f7fd fdad 	bl	800c9e6 <memcpy>
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ee92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee96:	81a3      	strh	r3, [r4, #12]
 800ee98:	6126      	str	r6, [r4, #16]
 800ee9a:	444e      	add	r6, r9
 800ee9c:	6165      	str	r5, [r4, #20]
 800ee9e:	eba5 0509 	sub.w	r5, r5, r9
 800eea2:	6026      	str	r6, [r4, #0]
 800eea4:	463e      	mov	r6, r7
 800eea6:	60a5      	str	r5, [r4, #8]
 800eea8:	42be      	cmp	r6, r7
 800eeaa:	d900      	bls.n	800eeae <__ssputs_r+0x72>
 800eeac:	463e      	mov	r6, r7
 800eeae:	4632      	mov	r2, r6
 800eeb0:	4641      	mov	r1, r8
 800eeb2:	6820      	ldr	r0, [r4, #0]
 800eeb4:	f000 f9c6 	bl	800f244 <memmove>
 800eeb8:	68a3      	ldr	r3, [r4, #8]
 800eeba:	2000      	movs	r0, #0
 800eebc:	1b9b      	subs	r3, r3, r6
 800eebe:	60a3      	str	r3, [r4, #8]
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	4433      	add	r3, r6
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeca:	462a      	mov	r2, r5
 800eecc:	f000 fd79 	bl	800f9c2 <_realloc_r>
 800eed0:	4606      	mov	r6, r0
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d1e0      	bne.n	800ee98 <__ssputs_r+0x5c>
 800eed6:	6921      	ldr	r1, [r4, #16]
 800eed8:	4650      	mov	r0, sl
 800eeda:	f7fe fbe9 	bl	800d6b0 <_free_r>
 800eede:	230c      	movs	r3, #12
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	f8ca 3000 	str.w	r3, [sl]
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeee:	81a3      	strh	r3, [r4, #12]
 800eef0:	e7e9      	b.n	800eec6 <__ssputs_r+0x8a>
	...

0800eef4 <_svfiprintf_r>:
 800eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef8:	4698      	mov	r8, r3
 800eefa:	898b      	ldrh	r3, [r1, #12]
 800eefc:	b09d      	sub	sp, #116	@ 0x74
 800eefe:	4607      	mov	r7, r0
 800ef00:	061b      	lsls	r3, r3, #24
 800ef02:	460d      	mov	r5, r1
 800ef04:	4614      	mov	r4, r2
 800ef06:	d510      	bpl.n	800ef2a <_svfiprintf_r+0x36>
 800ef08:	690b      	ldr	r3, [r1, #16]
 800ef0a:	b973      	cbnz	r3, 800ef2a <_svfiprintf_r+0x36>
 800ef0c:	2140      	movs	r1, #64	@ 0x40
 800ef0e:	f7fe fc43 	bl	800d798 <_malloc_r>
 800ef12:	6028      	str	r0, [r5, #0]
 800ef14:	6128      	str	r0, [r5, #16]
 800ef16:	b930      	cbnz	r0, 800ef26 <_svfiprintf_r+0x32>
 800ef18:	230c      	movs	r3, #12
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	b01d      	add	sp, #116	@ 0x74
 800ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef26:	2340      	movs	r3, #64	@ 0x40
 800ef28:	616b      	str	r3, [r5, #20]
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef30:	f04f 0901 	mov.w	r9, #1
 800ef34:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f0d8 <_svfiprintf_r+0x1e4>
 800ef38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef3a:	2320      	movs	r3, #32
 800ef3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef40:	2330      	movs	r3, #48	@ 0x30
 800ef42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef46:	4623      	mov	r3, r4
 800ef48:	469a      	mov	sl, r3
 800ef4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4e:	b10a      	cbz	r2, 800ef54 <_svfiprintf_r+0x60>
 800ef50:	2a25      	cmp	r2, #37	@ 0x25
 800ef52:	d1f9      	bne.n	800ef48 <_svfiprintf_r+0x54>
 800ef54:	ebba 0b04 	subs.w	fp, sl, r4
 800ef58:	d00b      	beq.n	800ef72 <_svfiprintf_r+0x7e>
 800ef5a:	465b      	mov	r3, fp
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff ff6b 	bl	800ee3c <__ssputs_r>
 800ef66:	3001      	adds	r0, #1
 800ef68:	f000 80a7 	beq.w	800f0ba <_svfiprintf_r+0x1c6>
 800ef6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef6e:	445a      	add	r2, fp
 800ef70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef72:	f89a 3000 	ldrb.w	r3, [sl]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f000 809f 	beq.w	800f0ba <_svfiprintf_r+0x1c6>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef82:	f10a 0a01 	add.w	sl, sl, #1
 800ef86:	9304      	str	r3, [sp, #16]
 800ef88:	9307      	str	r3, [sp, #28]
 800ef8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef94:	4654      	mov	r4, sl
 800ef96:	2205      	movs	r2, #5
 800ef98:	484f      	ldr	r0, [pc, #316]	@ (800f0d8 <_svfiprintf_r+0x1e4>)
 800ef9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9e:	f7fd fd14 	bl	800c9ca <memchr>
 800efa2:	9a04      	ldr	r2, [sp, #16]
 800efa4:	b9d8      	cbnz	r0, 800efde <_svfiprintf_r+0xea>
 800efa6:	06d0      	lsls	r0, r2, #27
 800efa8:	bf44      	itt	mi
 800efaa:	2320      	movmi	r3, #32
 800efac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efb0:	0711      	lsls	r1, r2, #28
 800efb2:	bf44      	itt	mi
 800efb4:	232b      	movmi	r3, #43	@ 0x2b
 800efb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efba:	f89a 3000 	ldrb.w	r3, [sl]
 800efbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800efc0:	d015      	beq.n	800efee <_svfiprintf_r+0xfa>
 800efc2:	9a07      	ldr	r2, [sp, #28]
 800efc4:	4654      	mov	r4, sl
 800efc6:	2000      	movs	r0, #0
 800efc8:	f04f 0c0a 	mov.w	ip, #10
 800efcc:	4621      	mov	r1, r4
 800efce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efd2:	3b30      	subs	r3, #48	@ 0x30
 800efd4:	2b09      	cmp	r3, #9
 800efd6:	d94b      	bls.n	800f070 <_svfiprintf_r+0x17c>
 800efd8:	b1b0      	cbz	r0, 800f008 <_svfiprintf_r+0x114>
 800efda:	9207      	str	r2, [sp, #28]
 800efdc:	e014      	b.n	800f008 <_svfiprintf_r+0x114>
 800efde:	eba0 0308 	sub.w	r3, r0, r8
 800efe2:	46a2      	mov	sl, r4
 800efe4:	fa09 f303 	lsl.w	r3, r9, r3
 800efe8:	4313      	orrs	r3, r2
 800efea:	9304      	str	r3, [sp, #16]
 800efec:	e7d2      	b.n	800ef94 <_svfiprintf_r+0xa0>
 800efee:	9b03      	ldr	r3, [sp, #12]
 800eff0:	1d19      	adds	r1, r3, #4
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	9103      	str	r1, [sp, #12]
 800eff8:	bfbb      	ittet	lt
 800effa:	425b      	neglt	r3, r3
 800effc:	f042 0202 	orrlt.w	r2, r2, #2
 800f000:	9307      	strge	r3, [sp, #28]
 800f002:	9307      	strlt	r3, [sp, #28]
 800f004:	bfb8      	it	lt
 800f006:	9204      	strlt	r2, [sp, #16]
 800f008:	7823      	ldrb	r3, [r4, #0]
 800f00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f00c:	d10a      	bne.n	800f024 <_svfiprintf_r+0x130>
 800f00e:	7863      	ldrb	r3, [r4, #1]
 800f010:	2b2a      	cmp	r3, #42	@ 0x2a
 800f012:	d132      	bne.n	800f07a <_svfiprintf_r+0x186>
 800f014:	9b03      	ldr	r3, [sp, #12]
 800f016:	3402      	adds	r4, #2
 800f018:	1d1a      	adds	r2, r3, #4
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f020:	9203      	str	r2, [sp, #12]
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f0e8 <_svfiprintf_r+0x1f4>
 800f028:	2203      	movs	r2, #3
 800f02a:	7821      	ldrb	r1, [r4, #0]
 800f02c:	4650      	mov	r0, sl
 800f02e:	f7fd fccc 	bl	800c9ca <memchr>
 800f032:	b138      	cbz	r0, 800f044 <_svfiprintf_r+0x150>
 800f034:	eba0 000a 	sub.w	r0, r0, sl
 800f038:	2240      	movs	r2, #64	@ 0x40
 800f03a:	9b04      	ldr	r3, [sp, #16]
 800f03c:	3401      	adds	r4, #1
 800f03e:	4082      	lsls	r2, r0
 800f040:	4313      	orrs	r3, r2
 800f042:	9304      	str	r3, [sp, #16]
 800f044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f048:	2206      	movs	r2, #6
 800f04a:	4824      	ldr	r0, [pc, #144]	@ (800f0dc <_svfiprintf_r+0x1e8>)
 800f04c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f050:	f7fd fcbb 	bl	800c9ca <memchr>
 800f054:	2800      	cmp	r0, #0
 800f056:	d036      	beq.n	800f0c6 <_svfiprintf_r+0x1d2>
 800f058:	4b21      	ldr	r3, [pc, #132]	@ (800f0e0 <_svfiprintf_r+0x1ec>)
 800f05a:	bb1b      	cbnz	r3, 800f0a4 <_svfiprintf_r+0x1b0>
 800f05c:	9b03      	ldr	r3, [sp, #12]
 800f05e:	3307      	adds	r3, #7
 800f060:	f023 0307 	bic.w	r3, r3, #7
 800f064:	3308      	adds	r3, #8
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f06a:	4433      	add	r3, r6
 800f06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f06e:	e76a      	b.n	800ef46 <_svfiprintf_r+0x52>
 800f070:	fb0c 3202 	mla	r2, ip, r2, r3
 800f074:	460c      	mov	r4, r1
 800f076:	2001      	movs	r0, #1
 800f078:	e7a8      	b.n	800efcc <_svfiprintf_r+0xd8>
 800f07a:	2300      	movs	r3, #0
 800f07c:	3401      	adds	r4, #1
 800f07e:	f04f 0c0a 	mov.w	ip, #10
 800f082:	4619      	mov	r1, r3
 800f084:	9305      	str	r3, [sp, #20]
 800f086:	4620      	mov	r0, r4
 800f088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08c:	3a30      	subs	r2, #48	@ 0x30
 800f08e:	2a09      	cmp	r2, #9
 800f090:	d903      	bls.n	800f09a <_svfiprintf_r+0x1a6>
 800f092:	2b00      	cmp	r3, #0
 800f094:	d0c6      	beq.n	800f024 <_svfiprintf_r+0x130>
 800f096:	9105      	str	r1, [sp, #20]
 800f098:	e7c4      	b.n	800f024 <_svfiprintf_r+0x130>
 800f09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f09e:	4604      	mov	r4, r0
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e7f0      	b.n	800f086 <_svfiprintf_r+0x192>
 800f0a4:	ab03      	add	r3, sp, #12
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	a904      	add	r1, sp, #16
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e4 <_svfiprintf_r+0x1f0>)
 800f0b0:	f7fc fd18 	bl	800bae4 <_printf_float>
 800f0b4:	1c42      	adds	r2, r0, #1
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	d1d6      	bne.n	800f068 <_svfiprintf_r+0x174>
 800f0ba:	89ab      	ldrh	r3, [r5, #12]
 800f0bc:	065b      	lsls	r3, r3, #25
 800f0be:	f53f af2d 	bmi.w	800ef1c <_svfiprintf_r+0x28>
 800f0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0c4:	e72c      	b.n	800ef20 <_svfiprintf_r+0x2c>
 800f0c6:	ab03      	add	r3, sp, #12
 800f0c8:	462a      	mov	r2, r5
 800f0ca:	a904      	add	r1, sp, #16
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	4b04      	ldr	r3, [pc, #16]	@ (800f0e4 <_svfiprintf_r+0x1f0>)
 800f0d2:	f7fc ffa3 	bl	800c01c <_printf_i>
 800f0d6:	e7ed      	b.n	800f0b4 <_svfiprintf_r+0x1c0>
 800f0d8:	08010bd0 	.word	0x08010bd0
 800f0dc:	08010bda 	.word	0x08010bda
 800f0e0:	0800bae5 	.word	0x0800bae5
 800f0e4:	0800ee3d 	.word	0x0800ee3d
 800f0e8:	08010bd6 	.word	0x08010bd6

0800f0ec <__sflush_r>:
 800f0ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	0716      	lsls	r6, r2, #28
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	d454      	bmi.n	800f1a6 <__sflush_r+0xba>
 800f0fc:	684b      	ldr	r3, [r1, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	dc02      	bgt.n	800f108 <__sflush_r+0x1c>
 800f102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	dd48      	ble.n	800f19a <__sflush_r+0xae>
 800f108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f10a:	2e00      	cmp	r6, #0
 800f10c:	d045      	beq.n	800f19a <__sflush_r+0xae>
 800f10e:	2300      	movs	r3, #0
 800f110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f114:	682f      	ldr	r7, [r5, #0]
 800f116:	6a21      	ldr	r1, [r4, #32]
 800f118:	602b      	str	r3, [r5, #0]
 800f11a:	d030      	beq.n	800f17e <__sflush_r+0x92>
 800f11c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	0759      	lsls	r1, r3, #29
 800f122:	d505      	bpl.n	800f130 <__sflush_r+0x44>
 800f124:	6863      	ldr	r3, [r4, #4]
 800f126:	1ad2      	subs	r2, r2, r3
 800f128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f12a:	b10b      	cbz	r3, 800f130 <__sflush_r+0x44>
 800f12c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f12e:	1ad2      	subs	r2, r2, r3
 800f130:	2300      	movs	r3, #0
 800f132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f134:	6a21      	ldr	r1, [r4, #32]
 800f136:	4628      	mov	r0, r5
 800f138:	47b0      	blx	r6
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	d106      	bne.n	800f14e <__sflush_r+0x62>
 800f140:	6829      	ldr	r1, [r5, #0]
 800f142:	291d      	cmp	r1, #29
 800f144:	d82b      	bhi.n	800f19e <__sflush_r+0xb2>
 800f146:	4a2a      	ldr	r2, [pc, #168]	@ (800f1f0 <__sflush_r+0x104>)
 800f148:	410a      	asrs	r2, r1
 800f14a:	07d6      	lsls	r6, r2, #31
 800f14c:	d427      	bmi.n	800f19e <__sflush_r+0xb2>
 800f14e:	2200      	movs	r2, #0
 800f150:	04d9      	lsls	r1, r3, #19
 800f152:	6062      	str	r2, [r4, #4]
 800f154:	6922      	ldr	r2, [r4, #16]
 800f156:	6022      	str	r2, [r4, #0]
 800f158:	d504      	bpl.n	800f164 <__sflush_r+0x78>
 800f15a:	1c42      	adds	r2, r0, #1
 800f15c:	d101      	bne.n	800f162 <__sflush_r+0x76>
 800f15e:	682b      	ldr	r3, [r5, #0]
 800f160:	b903      	cbnz	r3, 800f164 <__sflush_r+0x78>
 800f162:	6560      	str	r0, [r4, #84]	@ 0x54
 800f164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f166:	602f      	str	r7, [r5, #0]
 800f168:	b1b9      	cbz	r1, 800f19a <__sflush_r+0xae>
 800f16a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f16e:	4299      	cmp	r1, r3
 800f170:	d002      	beq.n	800f178 <__sflush_r+0x8c>
 800f172:	4628      	mov	r0, r5
 800f174:	f7fe fa9c 	bl	800d6b0 <_free_r>
 800f178:	2300      	movs	r3, #0
 800f17a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f17c:	e00d      	b.n	800f19a <__sflush_r+0xae>
 800f17e:	2301      	movs	r3, #1
 800f180:	4628      	mov	r0, r5
 800f182:	47b0      	blx	r6
 800f184:	4602      	mov	r2, r0
 800f186:	1c50      	adds	r0, r2, #1
 800f188:	d1c9      	bne.n	800f11e <__sflush_r+0x32>
 800f18a:	682b      	ldr	r3, [r5, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d0c6      	beq.n	800f11e <__sflush_r+0x32>
 800f190:	2b1d      	cmp	r3, #29
 800f192:	d001      	beq.n	800f198 <__sflush_r+0xac>
 800f194:	2b16      	cmp	r3, #22
 800f196:	d11d      	bne.n	800f1d4 <__sflush_r+0xe8>
 800f198:	602f      	str	r7, [r5, #0]
 800f19a:	2000      	movs	r0, #0
 800f19c:	e021      	b.n	800f1e2 <__sflush_r+0xf6>
 800f19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	e01a      	b.n	800f1dc <__sflush_r+0xf0>
 800f1a6:	690f      	ldr	r7, [r1, #16]
 800f1a8:	2f00      	cmp	r7, #0
 800f1aa:	d0f6      	beq.n	800f19a <__sflush_r+0xae>
 800f1ac:	0793      	lsls	r3, r2, #30
 800f1ae:	680e      	ldr	r6, [r1, #0]
 800f1b0:	600f      	str	r7, [r1, #0]
 800f1b2:	bf0c      	ite	eq
 800f1b4:	694b      	ldreq	r3, [r1, #20]
 800f1b6:	2300      	movne	r3, #0
 800f1b8:	eba6 0807 	sub.w	r8, r6, r7
 800f1bc:	608b      	str	r3, [r1, #8]
 800f1be:	f1b8 0f00 	cmp.w	r8, #0
 800f1c2:	ddea      	ble.n	800f19a <__sflush_r+0xae>
 800f1c4:	4643      	mov	r3, r8
 800f1c6:	463a      	mov	r2, r7
 800f1c8:	6a21      	ldr	r1, [r4, #32]
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f1ce:	47b0      	blx	r6
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	dc08      	bgt.n	800f1e6 <__sflush_r+0xfa>
 800f1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e6:	4407      	add	r7, r0
 800f1e8:	eba8 0800 	sub.w	r8, r8, r0
 800f1ec:	e7e7      	b.n	800f1be <__sflush_r+0xd2>
 800f1ee:	bf00      	nop
 800f1f0:	dfbffffe 	.word	0xdfbffffe

0800f1f4 <_fflush_r>:
 800f1f4:	b538      	push	{r3, r4, r5, lr}
 800f1f6:	690b      	ldr	r3, [r1, #16]
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	b913      	cbnz	r3, 800f204 <_fflush_r+0x10>
 800f1fe:	2500      	movs	r5, #0
 800f200:	4628      	mov	r0, r5
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	b118      	cbz	r0, 800f20e <_fflush_r+0x1a>
 800f206:	6a03      	ldr	r3, [r0, #32]
 800f208:	b90b      	cbnz	r3, 800f20e <_fflush_r+0x1a>
 800f20a:	f7fd fac5 	bl	800c798 <__sinit>
 800f20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d0f3      	beq.n	800f1fe <_fflush_r+0xa>
 800f216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f218:	07d0      	lsls	r0, r2, #31
 800f21a:	d404      	bmi.n	800f226 <_fflush_r+0x32>
 800f21c:	0599      	lsls	r1, r3, #22
 800f21e:	d402      	bmi.n	800f226 <_fflush_r+0x32>
 800f220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f222:	f7fd fbd0 	bl	800c9c6 <__retarget_lock_acquire_recursive>
 800f226:	4628      	mov	r0, r5
 800f228:	4621      	mov	r1, r4
 800f22a:	f7ff ff5f 	bl	800f0ec <__sflush_r>
 800f22e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f230:	4605      	mov	r5, r0
 800f232:	07da      	lsls	r2, r3, #31
 800f234:	d4e4      	bmi.n	800f200 <_fflush_r+0xc>
 800f236:	89a3      	ldrh	r3, [r4, #12]
 800f238:	059b      	lsls	r3, r3, #22
 800f23a:	d4e1      	bmi.n	800f200 <_fflush_r+0xc>
 800f23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f23e:	f7fd fbc3 	bl	800c9c8 <__retarget_lock_release_recursive>
 800f242:	e7dd      	b.n	800f200 <_fflush_r+0xc>

0800f244 <memmove>:
 800f244:	4288      	cmp	r0, r1
 800f246:	b510      	push	{r4, lr}
 800f248:	eb01 0402 	add.w	r4, r1, r2
 800f24c:	d902      	bls.n	800f254 <memmove+0x10>
 800f24e:	4284      	cmp	r4, r0
 800f250:	4623      	mov	r3, r4
 800f252:	d807      	bhi.n	800f264 <memmove+0x20>
 800f254:	1e43      	subs	r3, r0, #1
 800f256:	42a1      	cmp	r1, r4
 800f258:	d008      	beq.n	800f26c <memmove+0x28>
 800f25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f262:	e7f8      	b.n	800f256 <memmove+0x12>
 800f264:	4402      	add	r2, r0
 800f266:	4601      	mov	r1, r0
 800f268:	428a      	cmp	r2, r1
 800f26a:	d100      	bne.n	800f26e <memmove+0x2a>
 800f26c:	bd10      	pop	{r4, pc}
 800f26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f276:	e7f7      	b.n	800f268 <memmove+0x24>

0800f278 <strncmp>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	b16a      	cbz	r2, 800f298 <strncmp+0x20>
 800f27c:	3901      	subs	r1, #1
 800f27e:	1884      	adds	r4, r0, r2
 800f280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f284:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f288:	429a      	cmp	r2, r3
 800f28a:	d103      	bne.n	800f294 <strncmp+0x1c>
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d001      	beq.n	800f294 <strncmp+0x1c>
 800f290:	2a00      	cmp	r2, #0
 800f292:	d1f5      	bne.n	800f280 <strncmp+0x8>
 800f294:	1ad0      	subs	r0, r2, r3
 800f296:	bd10      	pop	{r4, pc}
 800f298:	4610      	mov	r0, r2
 800f29a:	e7fc      	b.n	800f296 <strncmp+0x1e>

0800f29c <_sbrk_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	2300      	movs	r3, #0
 800f2a0:	4d05      	ldr	r5, [pc, #20]	@ (800f2b8 <_sbrk_r+0x1c>)
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	f7f4 f952 	bl	8003550 <_sbrk>
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	d102      	bne.n	800f2b6 <_sbrk_r+0x1a>
 800f2b0:	682b      	ldr	r3, [r5, #0]
 800f2b2:	b103      	cbz	r3, 800f2b6 <_sbrk_r+0x1a>
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
 800f2b8:	2003b3b4 	.word	0x2003b3b4
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <nan>:
 800f2c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f2c8 <nan+0x8>
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	00000000 	.word	0x00000000
 800f2cc:	7ff80000 	.word	0x7ff80000

0800f2d0 <__assert_func>:
 800f2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2d2:	4614      	mov	r4, r2
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	4b09      	ldr	r3, [pc, #36]	@ (800f2fc <__assert_func+0x2c>)
 800f2d8:	4605      	mov	r5, r0
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68d8      	ldr	r0, [r3, #12]
 800f2de:	b954      	cbnz	r4, 800f2f6 <__assert_func+0x26>
 800f2e0:	4b07      	ldr	r3, [pc, #28]	@ (800f300 <__assert_func+0x30>)
 800f2e2:	461c      	mov	r4, r3
 800f2e4:	9100      	str	r1, [sp, #0]
 800f2e6:	4907      	ldr	r1, [pc, #28]	@ (800f304 <__assert_func+0x34>)
 800f2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2ec:	462b      	mov	r3, r5
 800f2ee:	f000 fba3 	bl	800fa38 <fiprintf>
 800f2f2:	f000 fbb3 	bl	800fa5c <abort>
 800f2f6:	4b04      	ldr	r3, [pc, #16]	@ (800f308 <__assert_func+0x38>)
 800f2f8:	e7f4      	b.n	800f2e4 <__assert_func+0x14>
 800f2fa:	bf00      	nop
 800f2fc:	20000034 	.word	0x20000034
 800f300:	08010c24 	.word	0x08010c24
 800f304:	08010bf6 	.word	0x08010bf6
 800f308:	08010be9 	.word	0x08010be9

0800f30c <_calloc_r>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	fba1 5402 	umull	r5, r4, r1, r2
 800f312:	b93c      	cbnz	r4, 800f324 <_calloc_r+0x18>
 800f314:	4629      	mov	r1, r5
 800f316:	f7fe fa3f 	bl	800d798 <_malloc_r>
 800f31a:	4606      	mov	r6, r0
 800f31c:	b928      	cbnz	r0, 800f32a <_calloc_r+0x1e>
 800f31e:	2600      	movs	r6, #0
 800f320:	4630      	mov	r0, r6
 800f322:	bd70      	pop	{r4, r5, r6, pc}
 800f324:	220c      	movs	r2, #12
 800f326:	6002      	str	r2, [r0, #0]
 800f328:	e7f9      	b.n	800f31e <_calloc_r+0x12>
 800f32a:	462a      	mov	r2, r5
 800f32c:	4621      	mov	r1, r4
 800f32e:	f7fd facc 	bl	800c8ca <memset>
 800f332:	e7f5      	b.n	800f320 <_calloc_r+0x14>

0800f334 <rshift>:
 800f334:	6903      	ldr	r3, [r0, #16]
 800f336:	114a      	asrs	r2, r1, #5
 800f338:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f340:	f100 0414 	add.w	r4, r0, #20
 800f344:	dd45      	ble.n	800f3d2 <rshift+0x9e>
 800f346:	f011 011f 	ands.w	r1, r1, #31
 800f34a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f34e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f352:	d10c      	bne.n	800f36e <rshift+0x3a>
 800f354:	f100 0710 	add.w	r7, r0, #16
 800f358:	4629      	mov	r1, r5
 800f35a:	42b1      	cmp	r1, r6
 800f35c:	d334      	bcc.n	800f3c8 <rshift+0x94>
 800f35e:	1a9b      	subs	r3, r3, r2
 800f360:	1eea      	subs	r2, r5, #3
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4296      	cmp	r6, r2
 800f366:	bf38      	it	cc
 800f368:	2300      	movcc	r3, #0
 800f36a:	4423      	add	r3, r4
 800f36c:	e015      	b.n	800f39a <rshift+0x66>
 800f36e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f372:	f1c1 0820 	rsb	r8, r1, #32
 800f376:	f105 0e04 	add.w	lr, r5, #4
 800f37a:	46a1      	mov	r9, r4
 800f37c:	40cf      	lsrs	r7, r1
 800f37e:	4576      	cmp	r6, lr
 800f380:	46f4      	mov	ip, lr
 800f382:	d815      	bhi.n	800f3b0 <rshift+0x7c>
 800f384:	1a9a      	subs	r2, r3, r2
 800f386:	3501      	adds	r5, #1
 800f388:	0092      	lsls	r2, r2, #2
 800f38a:	3a04      	subs	r2, #4
 800f38c:	42ae      	cmp	r6, r5
 800f38e:	bf38      	it	cc
 800f390:	2200      	movcc	r2, #0
 800f392:	18a3      	adds	r3, r4, r2
 800f394:	50a7      	str	r7, [r4, r2]
 800f396:	b107      	cbz	r7, 800f39a <rshift+0x66>
 800f398:	3304      	adds	r3, #4
 800f39a:	1b1a      	subs	r2, r3, r4
 800f39c:	42a3      	cmp	r3, r4
 800f39e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3a2:	bf08      	it	eq
 800f3a4:	2300      	moveq	r3, #0
 800f3a6:	6102      	str	r2, [r0, #16]
 800f3a8:	bf08      	it	eq
 800f3aa:	6143      	streq	r3, [r0, #20]
 800f3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3b0:	f8dc c000 	ldr.w	ip, [ip]
 800f3b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800f3b8:	ea4c 0707 	orr.w	r7, ip, r7
 800f3bc:	f849 7b04 	str.w	r7, [r9], #4
 800f3c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3c4:	40cf      	lsrs	r7, r1
 800f3c6:	e7da      	b.n	800f37e <rshift+0x4a>
 800f3c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800f3cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3d0:	e7c3      	b.n	800f35a <rshift+0x26>
 800f3d2:	4623      	mov	r3, r4
 800f3d4:	e7e1      	b.n	800f39a <rshift+0x66>

0800f3d6 <__hexdig_fun>:
 800f3d6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d802      	bhi.n	800f3e4 <__hexdig_fun+0xe>
 800f3de:	3820      	subs	r0, #32
 800f3e0:	b2c0      	uxtb	r0, r0
 800f3e2:	4770      	bx	lr
 800f3e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f3e8:	2b05      	cmp	r3, #5
 800f3ea:	d801      	bhi.n	800f3f0 <__hexdig_fun+0x1a>
 800f3ec:	3847      	subs	r0, #71	@ 0x47
 800f3ee:	e7f7      	b.n	800f3e0 <__hexdig_fun+0xa>
 800f3f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f3f4:	2b05      	cmp	r3, #5
 800f3f6:	d801      	bhi.n	800f3fc <__hexdig_fun+0x26>
 800f3f8:	3827      	subs	r0, #39	@ 0x27
 800f3fa:	e7f1      	b.n	800f3e0 <__hexdig_fun+0xa>
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	4770      	bx	lr

0800f400 <__gethex>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	b085      	sub	sp, #20
 800f406:	468a      	mov	sl, r1
 800f408:	4690      	mov	r8, r2
 800f40a:	9302      	str	r3, [sp, #8]
 800f40c:	680b      	ldr	r3, [r1, #0]
 800f40e:	9001      	str	r0, [sp, #4]
 800f410:	1c9c      	adds	r4, r3, #2
 800f412:	46a1      	mov	r9, r4
 800f414:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f418:	2830      	cmp	r0, #48	@ 0x30
 800f41a:	d0fa      	beq.n	800f412 <__gethex+0x12>
 800f41c:	eba9 0303 	sub.w	r3, r9, r3
 800f420:	f1a3 0b02 	sub.w	fp, r3, #2
 800f424:	f7ff ffd7 	bl	800f3d6 <__hexdig_fun>
 800f428:	4605      	mov	r5, r0
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d166      	bne.n	800f4fc <__gethex+0xfc>
 800f42e:	2201      	movs	r2, #1
 800f430:	499e      	ldr	r1, [pc, #632]	@ (800f6ac <__gethex+0x2ac>)
 800f432:	4648      	mov	r0, r9
 800f434:	f7ff ff20 	bl	800f278 <strncmp>
 800f438:	4607      	mov	r7, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d165      	bne.n	800f50a <__gethex+0x10a>
 800f43e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f442:	4626      	mov	r6, r4
 800f444:	f7ff ffc7 	bl	800f3d6 <__hexdig_fun>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d060      	beq.n	800f50e <__gethex+0x10e>
 800f44c:	4623      	mov	r3, r4
 800f44e:	7818      	ldrb	r0, [r3, #0]
 800f450:	4699      	mov	r9, r3
 800f452:	3301      	adds	r3, #1
 800f454:	2830      	cmp	r0, #48	@ 0x30
 800f456:	d0fa      	beq.n	800f44e <__gethex+0x4e>
 800f458:	f7ff ffbd 	bl	800f3d6 <__hexdig_fun>
 800f45c:	fab0 f580 	clz	r5, r0
 800f460:	f04f 0b01 	mov.w	fp, #1
 800f464:	096d      	lsrs	r5, r5, #5
 800f466:	464a      	mov	r2, r9
 800f468:	4616      	mov	r6, r2
 800f46a:	3201      	adds	r2, #1
 800f46c:	7830      	ldrb	r0, [r6, #0]
 800f46e:	f7ff ffb2 	bl	800f3d6 <__hexdig_fun>
 800f472:	2800      	cmp	r0, #0
 800f474:	d1f8      	bne.n	800f468 <__gethex+0x68>
 800f476:	2201      	movs	r2, #1
 800f478:	498c      	ldr	r1, [pc, #560]	@ (800f6ac <__gethex+0x2ac>)
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7ff fefc 	bl	800f278 <strncmp>
 800f480:	2800      	cmp	r0, #0
 800f482:	d13e      	bne.n	800f502 <__gethex+0x102>
 800f484:	b944      	cbnz	r4, 800f498 <__gethex+0x98>
 800f486:	1c74      	adds	r4, r6, #1
 800f488:	4622      	mov	r2, r4
 800f48a:	4616      	mov	r6, r2
 800f48c:	3201      	adds	r2, #1
 800f48e:	7830      	ldrb	r0, [r6, #0]
 800f490:	f7ff ffa1 	bl	800f3d6 <__hexdig_fun>
 800f494:	2800      	cmp	r0, #0
 800f496:	d1f8      	bne.n	800f48a <__gethex+0x8a>
 800f498:	1ba4      	subs	r4, r4, r6
 800f49a:	00a7      	lsls	r7, r4, #2
 800f49c:	7833      	ldrb	r3, [r6, #0]
 800f49e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f4a2:	2b50      	cmp	r3, #80	@ 0x50
 800f4a4:	d13d      	bne.n	800f522 <__gethex+0x122>
 800f4a6:	7873      	ldrb	r3, [r6, #1]
 800f4a8:	2b2b      	cmp	r3, #43	@ 0x2b
 800f4aa:	d032      	beq.n	800f512 <__gethex+0x112>
 800f4ac:	2b2d      	cmp	r3, #45	@ 0x2d
 800f4ae:	d033      	beq.n	800f518 <__gethex+0x118>
 800f4b0:	1c71      	adds	r1, r6, #1
 800f4b2:	2400      	movs	r4, #0
 800f4b4:	7808      	ldrb	r0, [r1, #0]
 800f4b6:	f7ff ff8e 	bl	800f3d6 <__hexdig_fun>
 800f4ba:	1e43      	subs	r3, r0, #1
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b18      	cmp	r3, #24
 800f4c0:	d82f      	bhi.n	800f522 <__gethex+0x122>
 800f4c2:	f1a0 0210 	sub.w	r2, r0, #16
 800f4c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4ca:	f7ff ff84 	bl	800f3d6 <__hexdig_fun>
 800f4ce:	f100 3cff 	add.w	ip, r0, #4294967295
 800f4d2:	230a      	movs	r3, #10
 800f4d4:	fa5f fc8c 	uxtb.w	ip, ip
 800f4d8:	f1bc 0f18 	cmp.w	ip, #24
 800f4dc:	d91e      	bls.n	800f51c <__gethex+0x11c>
 800f4de:	b104      	cbz	r4, 800f4e2 <__gethex+0xe2>
 800f4e0:	4252      	negs	r2, r2
 800f4e2:	4417      	add	r7, r2
 800f4e4:	f8ca 1000 	str.w	r1, [sl]
 800f4e8:	b1ed      	cbz	r5, 800f526 <__gethex+0x126>
 800f4ea:	f1bb 0f00 	cmp.w	fp, #0
 800f4ee:	bf0c      	ite	eq
 800f4f0:	2506      	moveq	r5, #6
 800f4f2:	2500      	movne	r5, #0
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	b005      	add	sp, #20
 800f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fc:	2500      	movs	r5, #0
 800f4fe:	462c      	mov	r4, r5
 800f500:	e7b1      	b.n	800f466 <__gethex+0x66>
 800f502:	2c00      	cmp	r4, #0
 800f504:	d1c8      	bne.n	800f498 <__gethex+0x98>
 800f506:	4627      	mov	r7, r4
 800f508:	e7c8      	b.n	800f49c <__gethex+0x9c>
 800f50a:	464e      	mov	r6, r9
 800f50c:	462f      	mov	r7, r5
 800f50e:	2501      	movs	r5, #1
 800f510:	e7c4      	b.n	800f49c <__gethex+0x9c>
 800f512:	2400      	movs	r4, #0
 800f514:	1cb1      	adds	r1, r6, #2
 800f516:	e7cd      	b.n	800f4b4 <__gethex+0xb4>
 800f518:	2401      	movs	r4, #1
 800f51a:	e7fb      	b.n	800f514 <__gethex+0x114>
 800f51c:	fb03 0002 	mla	r0, r3, r2, r0
 800f520:	e7cf      	b.n	800f4c2 <__gethex+0xc2>
 800f522:	4631      	mov	r1, r6
 800f524:	e7de      	b.n	800f4e4 <__gethex+0xe4>
 800f526:	eba6 0309 	sub.w	r3, r6, r9
 800f52a:	4629      	mov	r1, r5
 800f52c:	3b01      	subs	r3, #1
 800f52e:	2b07      	cmp	r3, #7
 800f530:	dc0a      	bgt.n	800f548 <__gethex+0x148>
 800f532:	9801      	ldr	r0, [sp, #4]
 800f534:	f7fe f9bc 	bl	800d8b0 <_Balloc>
 800f538:	4604      	mov	r4, r0
 800f53a:	b940      	cbnz	r0, 800f54e <__gethex+0x14e>
 800f53c:	4b5c      	ldr	r3, [pc, #368]	@ (800f6b0 <__gethex+0x2b0>)
 800f53e:	4602      	mov	r2, r0
 800f540:	21e4      	movs	r1, #228	@ 0xe4
 800f542:	485c      	ldr	r0, [pc, #368]	@ (800f6b4 <__gethex+0x2b4>)
 800f544:	f7ff fec4 	bl	800f2d0 <__assert_func>
 800f548:	3101      	adds	r1, #1
 800f54a:	105b      	asrs	r3, r3, #1
 800f54c:	e7ef      	b.n	800f52e <__gethex+0x12e>
 800f54e:	f100 0a14 	add.w	sl, r0, #20
 800f552:	2300      	movs	r3, #0
 800f554:	4655      	mov	r5, sl
 800f556:	469b      	mov	fp, r3
 800f558:	45b1      	cmp	r9, r6
 800f55a:	d337      	bcc.n	800f5cc <__gethex+0x1cc>
 800f55c:	f845 bb04 	str.w	fp, [r5], #4
 800f560:	eba5 050a 	sub.w	r5, r5, sl
 800f564:	4658      	mov	r0, fp
 800f566:	10ad      	asrs	r5, r5, #2
 800f568:	6125      	str	r5, [r4, #16]
 800f56a:	016d      	lsls	r5, r5, #5
 800f56c:	f7fe fa94 	bl	800da98 <__hi0bits>
 800f570:	f8d8 6000 	ldr.w	r6, [r8]
 800f574:	1a2d      	subs	r5, r5, r0
 800f576:	42b5      	cmp	r5, r6
 800f578:	dd54      	ble.n	800f624 <__gethex+0x224>
 800f57a:	1bad      	subs	r5, r5, r6
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	f7fe fe31 	bl	800e1e6 <__any_on>
 800f584:	4681      	mov	r9, r0
 800f586:	b178      	cbz	r0, 800f5a8 <__gethex+0x1a8>
 800f588:	1e6b      	subs	r3, r5, #1
 800f58a:	f04f 0901 	mov.w	r9, #1
 800f58e:	1159      	asrs	r1, r3, #5
 800f590:	f003 021f 	and.w	r2, r3, #31
 800f594:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f598:	fa09 f202 	lsl.w	r2, r9, r2
 800f59c:	420a      	tst	r2, r1
 800f59e:	d003      	beq.n	800f5a8 <__gethex+0x1a8>
 800f5a0:	454b      	cmp	r3, r9
 800f5a2:	dc36      	bgt.n	800f612 <__gethex+0x212>
 800f5a4:	f04f 0902 	mov.w	r9, #2
 800f5a8:	442f      	add	r7, r5
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7ff fec1 	bl	800f334 <rshift>
 800f5b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5b6:	42bb      	cmp	r3, r7
 800f5b8:	da42      	bge.n	800f640 <__gethex+0x240>
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	9801      	ldr	r0, [sp, #4]
 800f5be:	f7fe f9b7 	bl	800d930 <_Bfree>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5c6:	25a3      	movs	r5, #163	@ 0xa3
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	e793      	b.n	800f4f4 <__gethex+0xf4>
 800f5cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f5d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f5d2:	d012      	beq.n	800f5fa <__gethex+0x1fa>
 800f5d4:	2b20      	cmp	r3, #32
 800f5d6:	d104      	bne.n	800f5e2 <__gethex+0x1e2>
 800f5d8:	f845 bb04 	str.w	fp, [r5], #4
 800f5dc:	f04f 0b00 	mov.w	fp, #0
 800f5e0:	465b      	mov	r3, fp
 800f5e2:	7830      	ldrb	r0, [r6, #0]
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	f7ff fef6 	bl	800f3d6 <__hexdig_fun>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	f000 000f 	and.w	r0, r0, #15
 800f5f0:	4098      	lsls	r0, r3
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	ea4b 0b00 	orr.w	fp, fp, r0
 800f5f8:	e7ae      	b.n	800f558 <__gethex+0x158>
 800f5fa:	45b1      	cmp	r9, r6
 800f5fc:	d8ea      	bhi.n	800f5d4 <__gethex+0x1d4>
 800f5fe:	2201      	movs	r2, #1
 800f600:	492a      	ldr	r1, [pc, #168]	@ (800f6ac <__gethex+0x2ac>)
 800f602:	4630      	mov	r0, r6
 800f604:	9303      	str	r3, [sp, #12]
 800f606:	f7ff fe37 	bl	800f278 <strncmp>
 800f60a:	9b03      	ldr	r3, [sp, #12]
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d1e1      	bne.n	800f5d4 <__gethex+0x1d4>
 800f610:	e7a2      	b.n	800f558 <__gethex+0x158>
 800f612:	1ea9      	subs	r1, r5, #2
 800f614:	4620      	mov	r0, r4
 800f616:	f7fe fde6 	bl	800e1e6 <__any_on>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d0c2      	beq.n	800f5a4 <__gethex+0x1a4>
 800f61e:	f04f 0903 	mov.w	r9, #3
 800f622:	e7c1      	b.n	800f5a8 <__gethex+0x1a8>
 800f624:	da09      	bge.n	800f63a <__gethex+0x23a>
 800f626:	1b75      	subs	r5, r6, r5
 800f628:	4621      	mov	r1, r4
 800f62a:	9801      	ldr	r0, [sp, #4]
 800f62c:	462a      	mov	r2, r5
 800f62e:	1b7f      	subs	r7, r7, r5
 800f630:	f7fe fb98 	bl	800dd64 <__lshift>
 800f634:	4604      	mov	r4, r0
 800f636:	f100 0a14 	add.w	sl, r0, #20
 800f63a:	f04f 0900 	mov.w	r9, #0
 800f63e:	e7b8      	b.n	800f5b2 <__gethex+0x1b2>
 800f640:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f644:	42bd      	cmp	r5, r7
 800f646:	dd6f      	ble.n	800f728 <__gethex+0x328>
 800f648:	1bed      	subs	r5, r5, r7
 800f64a:	42ae      	cmp	r6, r5
 800f64c:	dc34      	bgt.n	800f6b8 <__gethex+0x2b8>
 800f64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f652:	2b02      	cmp	r3, #2
 800f654:	d022      	beq.n	800f69c <__gethex+0x29c>
 800f656:	2b03      	cmp	r3, #3
 800f658:	d024      	beq.n	800f6a4 <__gethex+0x2a4>
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d115      	bne.n	800f68a <__gethex+0x28a>
 800f65e:	42ae      	cmp	r6, r5
 800f660:	d113      	bne.n	800f68a <__gethex+0x28a>
 800f662:	2e01      	cmp	r6, #1
 800f664:	d10b      	bne.n	800f67e <__gethex+0x27e>
 800f666:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f66a:	2562      	movs	r5, #98	@ 0x62
 800f66c:	9a02      	ldr	r2, [sp, #8]
 800f66e:	6013      	str	r3, [r2, #0]
 800f670:	2301      	movs	r3, #1
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	f8ca 3000 	str.w	r3, [sl]
 800f678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f67a:	601c      	str	r4, [r3, #0]
 800f67c:	e73a      	b.n	800f4f4 <__gethex+0xf4>
 800f67e:	1e71      	subs	r1, r6, #1
 800f680:	4620      	mov	r0, r4
 800f682:	f7fe fdb0 	bl	800e1e6 <__any_on>
 800f686:	2800      	cmp	r0, #0
 800f688:	d1ed      	bne.n	800f666 <__gethex+0x266>
 800f68a:	4621      	mov	r1, r4
 800f68c:	9801      	ldr	r0, [sp, #4]
 800f68e:	f7fe f94f 	bl	800d930 <_Bfree>
 800f692:	2300      	movs	r3, #0
 800f694:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f696:	2550      	movs	r5, #80	@ 0x50
 800f698:	6013      	str	r3, [r2, #0]
 800f69a:	e72b      	b.n	800f4f4 <__gethex+0xf4>
 800f69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1f3      	bne.n	800f68a <__gethex+0x28a>
 800f6a2:	e7e0      	b.n	800f666 <__gethex+0x266>
 800f6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1dd      	bne.n	800f666 <__gethex+0x266>
 800f6aa:	e7ee      	b.n	800f68a <__gethex+0x28a>
 800f6ac:	08010b78 	.word	0x08010b78
 800f6b0:	08010a12 	.word	0x08010a12
 800f6b4:	08010c25 	.word	0x08010c25
 800f6b8:	1e6f      	subs	r7, r5, #1
 800f6ba:	f1b9 0f00 	cmp.w	r9, #0
 800f6be:	d130      	bne.n	800f722 <__gethex+0x322>
 800f6c0:	b127      	cbz	r7, 800f6cc <__gethex+0x2cc>
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f7fe fd8e 	bl	800e1e6 <__any_on>
 800f6ca:	4681      	mov	r9, r0
 800f6cc:	117a      	asrs	r2, r7, #5
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f007 071f 	and.w	r7, r7, #31
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f6da:	4620      	mov	r0, r4
 800f6dc:	40bb      	lsls	r3, r7
 800f6de:	1b76      	subs	r6, r6, r5
 800f6e0:	2502      	movs	r5, #2
 800f6e2:	4213      	tst	r3, r2
 800f6e4:	bf18      	it	ne
 800f6e6:	f049 0902 	orrne.w	r9, r9, #2
 800f6ea:	f7ff fe23 	bl	800f334 <rshift>
 800f6ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f6f2:	f1b9 0f00 	cmp.w	r9, #0
 800f6f6:	d047      	beq.n	800f788 <__gethex+0x388>
 800f6f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d015      	beq.n	800f72c <__gethex+0x32c>
 800f700:	2b03      	cmp	r3, #3
 800f702:	d017      	beq.n	800f734 <__gethex+0x334>
 800f704:	2b01      	cmp	r3, #1
 800f706:	d109      	bne.n	800f71c <__gethex+0x31c>
 800f708:	f019 0f02 	tst.w	r9, #2
 800f70c:	d006      	beq.n	800f71c <__gethex+0x31c>
 800f70e:	f8da 3000 	ldr.w	r3, [sl]
 800f712:	ea49 0903 	orr.w	r9, r9, r3
 800f716:	f019 0f01 	tst.w	r9, #1
 800f71a:	d10e      	bne.n	800f73a <__gethex+0x33a>
 800f71c:	f045 0510 	orr.w	r5, r5, #16
 800f720:	e032      	b.n	800f788 <__gethex+0x388>
 800f722:	f04f 0901 	mov.w	r9, #1
 800f726:	e7d1      	b.n	800f6cc <__gethex+0x2cc>
 800f728:	2501      	movs	r5, #1
 800f72a:	e7e2      	b.n	800f6f2 <__gethex+0x2f2>
 800f72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f72e:	f1c3 0301 	rsb	r3, r3, #1
 800f732:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0f0      	beq.n	800f71c <__gethex+0x31c>
 800f73a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f73e:	f104 0314 	add.w	r3, r4, #20
 800f742:	f04f 0c00 	mov.w	ip, #0
 800f746:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f74a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f74e:	4618      	mov	r0, r3
 800f750:	f853 2b04 	ldr.w	r2, [r3], #4
 800f754:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f758:	d01b      	beq.n	800f792 <__gethex+0x392>
 800f75a:	3201      	adds	r2, #1
 800f75c:	6002      	str	r2, [r0, #0]
 800f75e:	2d02      	cmp	r5, #2
 800f760:	f104 0314 	add.w	r3, r4, #20
 800f764:	d13c      	bne.n	800f7e0 <__gethex+0x3e0>
 800f766:	f8d8 2000 	ldr.w	r2, [r8]
 800f76a:	3a01      	subs	r2, #1
 800f76c:	42b2      	cmp	r2, r6
 800f76e:	d109      	bne.n	800f784 <__gethex+0x384>
 800f770:	1171      	asrs	r1, r6, #5
 800f772:	2201      	movs	r2, #1
 800f774:	f006 061f 	and.w	r6, r6, #31
 800f778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f77c:	fa02 f606 	lsl.w	r6, r2, r6
 800f780:	421e      	tst	r6, r3
 800f782:	d13a      	bne.n	800f7fa <__gethex+0x3fa>
 800f784:	f045 0520 	orr.w	r5, r5, #32
 800f788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f78a:	601c      	str	r4, [r3, #0]
 800f78c:	9b02      	ldr	r3, [sp, #8]
 800f78e:	601f      	str	r7, [r3, #0]
 800f790:	e6b0      	b.n	800f4f4 <__gethex+0xf4>
 800f792:	4299      	cmp	r1, r3
 800f794:	f843 cc04 	str.w	ip, [r3, #-4]
 800f798:	d8d9      	bhi.n	800f74e <__gethex+0x34e>
 800f79a:	68a3      	ldr	r3, [r4, #8]
 800f79c:	459b      	cmp	fp, r3
 800f79e:	db17      	blt.n	800f7d0 <__gethex+0x3d0>
 800f7a0:	6861      	ldr	r1, [r4, #4]
 800f7a2:	9801      	ldr	r0, [sp, #4]
 800f7a4:	3101      	adds	r1, #1
 800f7a6:	f7fe f883 	bl	800d8b0 <_Balloc>
 800f7aa:	4681      	mov	r9, r0
 800f7ac:	b918      	cbnz	r0, 800f7b6 <__gethex+0x3b6>
 800f7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f818 <__gethex+0x418>)
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	2184      	movs	r1, #132	@ 0x84
 800f7b4:	e6c5      	b.n	800f542 <__gethex+0x142>
 800f7b6:	6922      	ldr	r2, [r4, #16]
 800f7b8:	f104 010c 	add.w	r1, r4, #12
 800f7bc:	300c      	adds	r0, #12
 800f7be:	3202      	adds	r2, #2
 800f7c0:	0092      	lsls	r2, r2, #2
 800f7c2:	f7fd f910 	bl	800c9e6 <memcpy>
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	464c      	mov	r4, r9
 800f7ca:	9801      	ldr	r0, [sp, #4]
 800f7cc:	f7fe f8b0 	bl	800d930 <_Bfree>
 800f7d0:	6923      	ldr	r3, [r4, #16]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7d8:	6122      	str	r2, [r4, #16]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	615a      	str	r2, [r3, #20]
 800f7de:	e7be      	b.n	800f75e <__gethex+0x35e>
 800f7e0:	6922      	ldr	r2, [r4, #16]
 800f7e2:	455a      	cmp	r2, fp
 800f7e4:	dd0b      	ble.n	800f7fe <__gethex+0x3fe>
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f7ff fda3 	bl	800f334 <rshift>
 800f7ee:	3701      	adds	r7, #1
 800f7f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7f4:	42bb      	cmp	r3, r7
 800f7f6:	f6ff aee0 	blt.w	800f5ba <__gethex+0x1ba>
 800f7fa:	2501      	movs	r5, #1
 800f7fc:	e7c2      	b.n	800f784 <__gethex+0x384>
 800f7fe:	f016 061f 	ands.w	r6, r6, #31
 800f802:	d0fa      	beq.n	800f7fa <__gethex+0x3fa>
 800f804:	4453      	add	r3, sl
 800f806:	f1c6 0620 	rsb	r6, r6, #32
 800f80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f80e:	f7fe f943 	bl	800da98 <__hi0bits>
 800f812:	42b0      	cmp	r0, r6
 800f814:	dbe7      	blt.n	800f7e6 <__gethex+0x3e6>
 800f816:	e7f0      	b.n	800f7fa <__gethex+0x3fa>
 800f818:	08010a12 	.word	0x08010a12

0800f81c <L_shift>:
 800f81c:	f1c2 0208 	rsb	r2, r2, #8
 800f820:	0092      	lsls	r2, r2, #2
 800f822:	b570      	push	{r4, r5, r6, lr}
 800f824:	f1c2 0620 	rsb	r6, r2, #32
 800f828:	6843      	ldr	r3, [r0, #4]
 800f82a:	6804      	ldr	r4, [r0, #0]
 800f82c:	fa03 f506 	lsl.w	r5, r3, r6
 800f830:	40d3      	lsrs	r3, r2
 800f832:	432c      	orrs	r4, r5
 800f834:	6004      	str	r4, [r0, #0]
 800f836:	f840 3f04 	str.w	r3, [r0, #4]!
 800f83a:	4288      	cmp	r0, r1
 800f83c:	d3f4      	bcc.n	800f828 <L_shift+0xc>
 800f83e:	bd70      	pop	{r4, r5, r6, pc}

0800f840 <__match>:
 800f840:	6803      	ldr	r3, [r0, #0]
 800f842:	3301      	adds	r3, #1
 800f844:	b530      	push	{r4, r5, lr}
 800f846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f84a:	b914      	cbnz	r4, 800f852 <__match+0x12>
 800f84c:	6003      	str	r3, [r0, #0]
 800f84e:	2001      	movs	r0, #1
 800f850:	bd30      	pop	{r4, r5, pc}
 800f852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f856:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f85a:	2d19      	cmp	r5, #25
 800f85c:	bf98      	it	ls
 800f85e:	3220      	addls	r2, #32
 800f860:	42a2      	cmp	r2, r4
 800f862:	d0f0      	beq.n	800f846 <__match+0x6>
 800f864:	2000      	movs	r0, #0
 800f866:	e7f3      	b.n	800f850 <__match+0x10>

0800f868 <__hexnan>:
 800f868:	680b      	ldr	r3, [r1, #0]
 800f86a:	6801      	ldr	r1, [r0, #0]
 800f86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f870:	115e      	asrs	r6, r3, #5
 800f872:	f013 031f 	ands.w	r3, r3, #31
 800f876:	f04f 0500 	mov.w	r5, #0
 800f87a:	b087      	sub	sp, #28
 800f87c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f880:	4682      	mov	sl, r0
 800f882:	4690      	mov	r8, r2
 800f884:	46ab      	mov	fp, r5
 800f886:	bf18      	it	ne
 800f888:	3604      	addne	r6, #4
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	9502      	str	r5, [sp, #8]
 800f88e:	1f37      	subs	r7, r6, #4
 800f890:	f846 5c04 	str.w	r5, [r6, #-4]
 800f894:	46b9      	mov	r9, r7
 800f896:	463c      	mov	r4, r7
 800f898:	1c4b      	adds	r3, r1, #1
 800f89a:	784a      	ldrb	r2, [r1, #1]
 800f89c:	9303      	str	r3, [sp, #12]
 800f89e:	b342      	cbz	r2, 800f8f2 <__hexnan+0x8a>
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	9105      	str	r1, [sp, #20]
 800f8a4:	9204      	str	r2, [sp, #16]
 800f8a6:	f7ff fd96 	bl	800f3d6 <__hexdig_fun>
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d151      	bne.n	800f952 <__hexnan+0xea>
 800f8ae:	9a04      	ldr	r2, [sp, #16]
 800f8b0:	9905      	ldr	r1, [sp, #20]
 800f8b2:	2a20      	cmp	r2, #32
 800f8b4:	d818      	bhi.n	800f8e8 <__hexnan+0x80>
 800f8b6:	9b02      	ldr	r3, [sp, #8]
 800f8b8:	459b      	cmp	fp, r3
 800f8ba:	dd13      	ble.n	800f8e4 <__hexnan+0x7c>
 800f8bc:	454c      	cmp	r4, r9
 800f8be:	d206      	bcs.n	800f8ce <__hexnan+0x66>
 800f8c0:	2d07      	cmp	r5, #7
 800f8c2:	dc04      	bgt.n	800f8ce <__hexnan+0x66>
 800f8c4:	462a      	mov	r2, r5
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f7ff ffa7 	bl	800f81c <L_shift>
 800f8ce:	4544      	cmp	r4, r8
 800f8d0:	d951      	bls.n	800f976 <__hexnan+0x10e>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f1a4 0904 	sub.w	r9, r4, #4
 800f8d8:	f8cd b008 	str.w	fp, [sp, #8]
 800f8dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f8e0:	461d      	mov	r5, r3
 800f8e2:	464c      	mov	r4, r9
 800f8e4:	9903      	ldr	r1, [sp, #12]
 800f8e6:	e7d7      	b.n	800f898 <__hexnan+0x30>
 800f8e8:	2a29      	cmp	r2, #41	@ 0x29
 800f8ea:	d156      	bne.n	800f99a <__hexnan+0x132>
 800f8ec:	3102      	adds	r1, #2
 800f8ee:	f8ca 1000 	str.w	r1, [sl]
 800f8f2:	f1bb 0f00 	cmp.w	fp, #0
 800f8f6:	d050      	beq.n	800f99a <__hexnan+0x132>
 800f8f8:	454c      	cmp	r4, r9
 800f8fa:	d206      	bcs.n	800f90a <__hexnan+0xa2>
 800f8fc:	2d07      	cmp	r5, #7
 800f8fe:	dc04      	bgt.n	800f90a <__hexnan+0xa2>
 800f900:	462a      	mov	r2, r5
 800f902:	4649      	mov	r1, r9
 800f904:	4620      	mov	r0, r4
 800f906:	f7ff ff89 	bl	800f81c <L_shift>
 800f90a:	4544      	cmp	r4, r8
 800f90c:	d935      	bls.n	800f97a <__hexnan+0x112>
 800f90e:	f1a8 0204 	sub.w	r2, r8, #4
 800f912:	4623      	mov	r3, r4
 800f914:	f853 1b04 	ldr.w	r1, [r3], #4
 800f918:	429f      	cmp	r7, r3
 800f91a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f91e:	d2f9      	bcs.n	800f914 <__hexnan+0xac>
 800f920:	1b3b      	subs	r3, r7, r4
 800f922:	3e03      	subs	r6, #3
 800f924:	3401      	adds	r4, #1
 800f926:	2200      	movs	r2, #0
 800f928:	f023 0303 	bic.w	r3, r3, #3
 800f92c:	3304      	adds	r3, #4
 800f92e:	42b4      	cmp	r4, r6
 800f930:	bf88      	it	hi
 800f932:	2304      	movhi	r3, #4
 800f934:	4443      	add	r3, r8
 800f936:	f843 2b04 	str.w	r2, [r3], #4
 800f93a:	429f      	cmp	r7, r3
 800f93c:	d2fb      	bcs.n	800f936 <__hexnan+0xce>
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	b91b      	cbnz	r3, 800f94a <__hexnan+0xe2>
 800f942:	4547      	cmp	r7, r8
 800f944:	d127      	bne.n	800f996 <__hexnan+0x12e>
 800f946:	2301      	movs	r3, #1
 800f948:	603b      	str	r3, [r7, #0]
 800f94a:	2005      	movs	r0, #5
 800f94c:	b007      	add	sp, #28
 800f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f952:	3501      	adds	r5, #1
 800f954:	f10b 0b01 	add.w	fp, fp, #1
 800f958:	2d08      	cmp	r5, #8
 800f95a:	dd05      	ble.n	800f968 <__hexnan+0x100>
 800f95c:	4544      	cmp	r4, r8
 800f95e:	d9c1      	bls.n	800f8e4 <__hexnan+0x7c>
 800f960:	2300      	movs	r3, #0
 800f962:	3c04      	subs	r4, #4
 800f964:	2501      	movs	r5, #1
 800f966:	6023      	str	r3, [r4, #0]
 800f968:	6822      	ldr	r2, [r4, #0]
 800f96a:	f000 000f 	and.w	r0, r0, #15
 800f96e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f972:	6020      	str	r0, [r4, #0]
 800f974:	e7b6      	b.n	800f8e4 <__hexnan+0x7c>
 800f976:	2508      	movs	r5, #8
 800f978:	e7b4      	b.n	800f8e4 <__hexnan+0x7c>
 800f97a:	9b01      	ldr	r3, [sp, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d0de      	beq.n	800f93e <__hexnan+0xd6>
 800f980:	f1c3 0320 	rsb	r3, r3, #32
 800f984:	f04f 32ff 	mov.w	r2, #4294967295
 800f988:	40da      	lsrs	r2, r3
 800f98a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f98e:	4013      	ands	r3, r2
 800f990:	f846 3c04 	str.w	r3, [r6, #-4]
 800f994:	e7d3      	b.n	800f93e <__hexnan+0xd6>
 800f996:	3f04      	subs	r7, #4
 800f998:	e7d1      	b.n	800f93e <__hexnan+0xd6>
 800f99a:	2004      	movs	r0, #4
 800f99c:	e7d6      	b.n	800f94c <__hexnan+0xe4>

0800f99e <__ascii_mbtowc>:
 800f99e:	b082      	sub	sp, #8
 800f9a0:	b901      	cbnz	r1, 800f9a4 <__ascii_mbtowc+0x6>
 800f9a2:	a901      	add	r1, sp, #4
 800f9a4:	b142      	cbz	r2, 800f9b8 <__ascii_mbtowc+0x1a>
 800f9a6:	b14b      	cbz	r3, 800f9bc <__ascii_mbtowc+0x1e>
 800f9a8:	7813      	ldrb	r3, [r2, #0]
 800f9aa:	600b      	str	r3, [r1, #0]
 800f9ac:	7812      	ldrb	r2, [r2, #0]
 800f9ae:	1e10      	subs	r0, r2, #0
 800f9b0:	bf18      	it	ne
 800f9b2:	2001      	movne	r0, #1
 800f9b4:	b002      	add	sp, #8
 800f9b6:	4770      	bx	lr
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	e7fb      	b.n	800f9b4 <__ascii_mbtowc+0x16>
 800f9bc:	f06f 0001 	mvn.w	r0, #1
 800f9c0:	e7f8      	b.n	800f9b4 <__ascii_mbtowc+0x16>

0800f9c2 <_realloc_r>:
 800f9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c6:	4680      	mov	r8, r0
 800f9c8:	4615      	mov	r5, r2
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	b921      	cbnz	r1, 800f9d8 <_realloc_r+0x16>
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d4:	f7fd bee0 	b.w	800d798 <_malloc_r>
 800f9d8:	b92a      	cbnz	r2, 800f9e6 <_realloc_r+0x24>
 800f9da:	f7fd fe69 	bl	800d6b0 <_free_r>
 800f9de:	2400      	movs	r4, #0
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e6:	f000 f840 	bl	800fa6a <_malloc_usable_size_r>
 800f9ea:	4285      	cmp	r5, r0
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	d802      	bhi.n	800f9f6 <_realloc_r+0x34>
 800f9f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9f4:	d8f4      	bhi.n	800f9e0 <_realloc_r+0x1e>
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	4640      	mov	r0, r8
 800f9fa:	f7fd fecd 	bl	800d798 <_malloc_r>
 800f9fe:	4607      	mov	r7, r0
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d0ec      	beq.n	800f9de <_realloc_r+0x1c>
 800fa04:	42b5      	cmp	r5, r6
 800fa06:	462a      	mov	r2, r5
 800fa08:	4621      	mov	r1, r4
 800fa0a:	bf28      	it	cs
 800fa0c:	4632      	movcs	r2, r6
 800fa0e:	f7fc ffea 	bl	800c9e6 <memcpy>
 800fa12:	4621      	mov	r1, r4
 800fa14:	4640      	mov	r0, r8
 800fa16:	463c      	mov	r4, r7
 800fa18:	f7fd fe4a 	bl	800d6b0 <_free_r>
 800fa1c:	e7e0      	b.n	800f9e0 <_realloc_r+0x1e>

0800fa1e <__ascii_wctomb>:
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	b141      	cbz	r1, 800fa36 <__ascii_wctomb+0x18>
 800fa24:	2aff      	cmp	r2, #255	@ 0xff
 800fa26:	d904      	bls.n	800fa32 <__ascii_wctomb+0x14>
 800fa28:	228a      	movs	r2, #138	@ 0x8a
 800fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2e:	601a      	str	r2, [r3, #0]
 800fa30:	4770      	bx	lr
 800fa32:	2001      	movs	r0, #1
 800fa34:	700a      	strb	r2, [r1, #0]
 800fa36:	4770      	bx	lr

0800fa38 <fiprintf>:
 800fa38:	b40e      	push	{r1, r2, r3}
 800fa3a:	b503      	push	{r0, r1, lr}
 800fa3c:	ab03      	add	r3, sp, #12
 800fa3e:	4601      	mov	r1, r0
 800fa40:	4805      	ldr	r0, [pc, #20]	@ (800fa58 <fiprintf+0x20>)
 800fa42:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa46:	6800      	ldr	r0, [r0, #0]
 800fa48:	9301      	str	r3, [sp, #4]
 800fa4a:	f000 f83f 	bl	800facc <_vfiprintf_r>
 800fa4e:	b002      	add	sp, #8
 800fa50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa54:	b003      	add	sp, #12
 800fa56:	4770      	bx	lr
 800fa58:	20000034 	.word	0x20000034

0800fa5c <abort>:
 800fa5c:	2006      	movs	r0, #6
 800fa5e:	b508      	push	{r3, lr}
 800fa60:	f000 fa08 	bl	800fe74 <raise>
 800fa64:	2001      	movs	r0, #1
 800fa66:	f7f3 fcfb 	bl	8003460 <_exit>

0800fa6a <_malloc_usable_size_r>:
 800fa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa6e:	1f18      	subs	r0, r3, #4
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	bfbc      	itt	lt
 800fa74:	580b      	ldrlt	r3, [r1, r0]
 800fa76:	18c0      	addlt	r0, r0, r3
 800fa78:	4770      	bx	lr

0800fa7a <__sfputc_r>:
 800fa7a:	6893      	ldr	r3, [r2, #8]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	6093      	str	r3, [r2, #8]
 800fa82:	b410      	push	{r4}
 800fa84:	da08      	bge.n	800fa98 <__sfputc_r+0x1e>
 800fa86:	6994      	ldr	r4, [r2, #24]
 800fa88:	42a3      	cmp	r3, r4
 800fa8a:	db01      	blt.n	800fa90 <__sfputc_r+0x16>
 800fa8c:	290a      	cmp	r1, #10
 800fa8e:	d103      	bne.n	800fa98 <__sfputc_r+0x1e>
 800fa90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa94:	f000 b932 	b.w	800fcfc <__swbuf_r>
 800fa98:	6813      	ldr	r3, [r2, #0]
 800fa9a:	1c58      	adds	r0, r3, #1
 800fa9c:	6010      	str	r0, [r2, #0]
 800fa9e:	4608      	mov	r0, r1
 800faa0:	7019      	strb	r1, [r3, #0]
 800faa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <__sfputs_r>:
 800faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faaa:	4606      	mov	r6, r0
 800faac:	460f      	mov	r7, r1
 800faae:	4614      	mov	r4, r2
 800fab0:	18d5      	adds	r5, r2, r3
 800fab2:	42ac      	cmp	r4, r5
 800fab4:	d101      	bne.n	800faba <__sfputs_r+0x12>
 800fab6:	2000      	movs	r0, #0
 800fab8:	e007      	b.n	800faca <__sfputs_r+0x22>
 800faba:	463a      	mov	r2, r7
 800fabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7ff ffda 	bl	800fa7a <__sfputc_r>
 800fac6:	1c43      	adds	r3, r0, #1
 800fac8:	d1f3      	bne.n	800fab2 <__sfputs_r+0xa>
 800faca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800facc <_vfiprintf_r>:
 800facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad0:	460d      	mov	r5, r1
 800fad2:	b09d      	sub	sp, #116	@ 0x74
 800fad4:	4614      	mov	r4, r2
 800fad6:	4698      	mov	r8, r3
 800fad8:	4606      	mov	r6, r0
 800fada:	b118      	cbz	r0, 800fae4 <_vfiprintf_r+0x18>
 800fadc:	6a03      	ldr	r3, [r0, #32]
 800fade:	b90b      	cbnz	r3, 800fae4 <_vfiprintf_r+0x18>
 800fae0:	f7fc fe5a 	bl	800c798 <__sinit>
 800fae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fae6:	07d9      	lsls	r1, r3, #31
 800fae8:	d405      	bmi.n	800faf6 <_vfiprintf_r+0x2a>
 800faea:	89ab      	ldrh	r3, [r5, #12]
 800faec:	059a      	lsls	r2, r3, #22
 800faee:	d402      	bmi.n	800faf6 <_vfiprintf_r+0x2a>
 800faf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faf2:	f7fc ff68 	bl	800c9c6 <__retarget_lock_acquire_recursive>
 800faf6:	89ab      	ldrh	r3, [r5, #12]
 800faf8:	071b      	lsls	r3, r3, #28
 800fafa:	d501      	bpl.n	800fb00 <_vfiprintf_r+0x34>
 800fafc:	692b      	ldr	r3, [r5, #16]
 800fafe:	b99b      	cbnz	r3, 800fb28 <_vfiprintf_r+0x5c>
 800fb00:	4629      	mov	r1, r5
 800fb02:	4630      	mov	r0, r6
 800fb04:	f000 f938 	bl	800fd78 <__swsetup_r>
 800fb08:	b170      	cbz	r0, 800fb28 <_vfiprintf_r+0x5c>
 800fb0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb0c:	07dc      	lsls	r4, r3, #31
 800fb0e:	d504      	bpl.n	800fb1a <_vfiprintf_r+0x4e>
 800fb10:	f04f 30ff 	mov.w	r0, #4294967295
 800fb14:	b01d      	add	sp, #116	@ 0x74
 800fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1a:	89ab      	ldrh	r3, [r5, #12]
 800fb1c:	0598      	lsls	r0, r3, #22
 800fb1e:	d4f7      	bmi.n	800fb10 <_vfiprintf_r+0x44>
 800fb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb22:	f7fc ff51 	bl	800c9c8 <__retarget_lock_release_recursive>
 800fb26:	e7f3      	b.n	800fb10 <_vfiprintf_r+0x44>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb2e:	f04f 0901 	mov.w	r9, #1
 800fb32:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800fce8 <_vfiprintf_r+0x21c>
 800fb36:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb38:	2320      	movs	r3, #32
 800fb3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb3e:	2330      	movs	r3, #48	@ 0x30
 800fb40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb44:	4623      	mov	r3, r4
 800fb46:	469a      	mov	sl, r3
 800fb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb4c:	b10a      	cbz	r2, 800fb52 <_vfiprintf_r+0x86>
 800fb4e:	2a25      	cmp	r2, #37	@ 0x25
 800fb50:	d1f9      	bne.n	800fb46 <_vfiprintf_r+0x7a>
 800fb52:	ebba 0b04 	subs.w	fp, sl, r4
 800fb56:	d00b      	beq.n	800fb70 <_vfiprintf_r+0xa4>
 800fb58:	465b      	mov	r3, fp
 800fb5a:	4622      	mov	r2, r4
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	4630      	mov	r0, r6
 800fb60:	f7ff ffa2 	bl	800faa8 <__sfputs_r>
 800fb64:	3001      	adds	r0, #1
 800fb66:	f000 80a7 	beq.w	800fcb8 <_vfiprintf_r+0x1ec>
 800fb6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb6c:	445a      	add	r2, fp
 800fb6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb70:	f89a 3000 	ldrb.w	r3, [sl]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f000 809f 	beq.w	800fcb8 <_vfiprintf_r+0x1ec>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb80:	f10a 0a01 	add.w	sl, sl, #1
 800fb84:	9304      	str	r3, [sp, #16]
 800fb86:	9307      	str	r3, [sp, #28]
 800fb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb92:	4654      	mov	r4, sl
 800fb94:	2205      	movs	r2, #5
 800fb96:	4854      	ldr	r0, [pc, #336]	@ (800fce8 <_vfiprintf_r+0x21c>)
 800fb98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb9c:	f7fc ff15 	bl	800c9ca <memchr>
 800fba0:	9a04      	ldr	r2, [sp, #16]
 800fba2:	b9d8      	cbnz	r0, 800fbdc <_vfiprintf_r+0x110>
 800fba4:	06d1      	lsls	r1, r2, #27
 800fba6:	bf44      	itt	mi
 800fba8:	2320      	movmi	r3, #32
 800fbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbae:	0713      	lsls	r3, r2, #28
 800fbb0:	bf44      	itt	mi
 800fbb2:	232b      	movmi	r3, #43	@ 0x2b
 800fbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbbe:	d015      	beq.n	800fbec <_vfiprintf_r+0x120>
 800fbc0:	9a07      	ldr	r2, [sp, #28]
 800fbc2:	4654      	mov	r4, sl
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	f04f 0c0a 	mov.w	ip, #10
 800fbca:	4621      	mov	r1, r4
 800fbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbd0:	3b30      	subs	r3, #48	@ 0x30
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	d94b      	bls.n	800fc6e <_vfiprintf_r+0x1a2>
 800fbd6:	b1b0      	cbz	r0, 800fc06 <_vfiprintf_r+0x13a>
 800fbd8:	9207      	str	r2, [sp, #28]
 800fbda:	e014      	b.n	800fc06 <_vfiprintf_r+0x13a>
 800fbdc:	eba0 0308 	sub.w	r3, r0, r8
 800fbe0:	46a2      	mov	sl, r4
 800fbe2:	fa09 f303 	lsl.w	r3, r9, r3
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	9304      	str	r3, [sp, #16]
 800fbea:	e7d2      	b.n	800fb92 <_vfiprintf_r+0xc6>
 800fbec:	9b03      	ldr	r3, [sp, #12]
 800fbee:	1d19      	adds	r1, r3, #4
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	9103      	str	r1, [sp, #12]
 800fbf6:	bfbb      	ittet	lt
 800fbf8:	425b      	neglt	r3, r3
 800fbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800fbfe:	9307      	strge	r3, [sp, #28]
 800fc00:	9307      	strlt	r3, [sp, #28]
 800fc02:	bfb8      	it	lt
 800fc04:	9204      	strlt	r2, [sp, #16]
 800fc06:	7823      	ldrb	r3, [r4, #0]
 800fc08:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc0a:	d10a      	bne.n	800fc22 <_vfiprintf_r+0x156>
 800fc0c:	7863      	ldrb	r3, [r4, #1]
 800fc0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc10:	d132      	bne.n	800fc78 <_vfiprintf_r+0x1ac>
 800fc12:	9b03      	ldr	r3, [sp, #12]
 800fc14:	3402      	adds	r4, #2
 800fc16:	1d1a      	adds	r2, r3, #4
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc1e:	9203      	str	r2, [sp, #12]
 800fc20:	9305      	str	r3, [sp, #20]
 800fc22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fcf8 <_vfiprintf_r+0x22c>
 800fc26:	2203      	movs	r2, #3
 800fc28:	7821      	ldrb	r1, [r4, #0]
 800fc2a:	4650      	mov	r0, sl
 800fc2c:	f7fc fecd 	bl	800c9ca <memchr>
 800fc30:	b138      	cbz	r0, 800fc42 <_vfiprintf_r+0x176>
 800fc32:	eba0 000a 	sub.w	r0, r0, sl
 800fc36:	2240      	movs	r2, #64	@ 0x40
 800fc38:	9b04      	ldr	r3, [sp, #16]
 800fc3a:	3401      	adds	r4, #1
 800fc3c:	4082      	lsls	r2, r0
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	9304      	str	r3, [sp, #16]
 800fc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc46:	2206      	movs	r2, #6
 800fc48:	4828      	ldr	r0, [pc, #160]	@ (800fcec <_vfiprintf_r+0x220>)
 800fc4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc4e:	f7fc febc 	bl	800c9ca <memchr>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d03f      	beq.n	800fcd6 <_vfiprintf_r+0x20a>
 800fc56:	4b26      	ldr	r3, [pc, #152]	@ (800fcf0 <_vfiprintf_r+0x224>)
 800fc58:	bb1b      	cbnz	r3, 800fca2 <_vfiprintf_r+0x1d6>
 800fc5a:	9b03      	ldr	r3, [sp, #12]
 800fc5c:	3307      	adds	r3, #7
 800fc5e:	f023 0307 	bic.w	r3, r3, #7
 800fc62:	3308      	adds	r3, #8
 800fc64:	9303      	str	r3, [sp, #12]
 800fc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc68:	443b      	add	r3, r7
 800fc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc6c:	e76a      	b.n	800fb44 <_vfiprintf_r+0x78>
 800fc6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc72:	460c      	mov	r4, r1
 800fc74:	2001      	movs	r0, #1
 800fc76:	e7a8      	b.n	800fbca <_vfiprintf_r+0xfe>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	3401      	adds	r4, #1
 800fc7c:	f04f 0c0a 	mov.w	ip, #10
 800fc80:	4619      	mov	r1, r3
 800fc82:	9305      	str	r3, [sp, #20]
 800fc84:	4620      	mov	r0, r4
 800fc86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc8a:	3a30      	subs	r2, #48	@ 0x30
 800fc8c:	2a09      	cmp	r2, #9
 800fc8e:	d903      	bls.n	800fc98 <_vfiprintf_r+0x1cc>
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d0c6      	beq.n	800fc22 <_vfiprintf_r+0x156>
 800fc94:	9105      	str	r1, [sp, #20]
 800fc96:	e7c4      	b.n	800fc22 <_vfiprintf_r+0x156>
 800fc98:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e7f0      	b.n	800fc84 <_vfiprintf_r+0x1b8>
 800fca2:	ab03      	add	r3, sp, #12
 800fca4:	462a      	mov	r2, r5
 800fca6:	a904      	add	r1, sp, #16
 800fca8:	4630      	mov	r0, r6
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	4b11      	ldr	r3, [pc, #68]	@ (800fcf4 <_vfiprintf_r+0x228>)
 800fcae:	f7fb ff19 	bl	800bae4 <_printf_float>
 800fcb2:	4607      	mov	r7, r0
 800fcb4:	1c78      	adds	r0, r7, #1
 800fcb6:	d1d6      	bne.n	800fc66 <_vfiprintf_r+0x19a>
 800fcb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcba:	07d9      	lsls	r1, r3, #31
 800fcbc:	d405      	bmi.n	800fcca <_vfiprintf_r+0x1fe>
 800fcbe:	89ab      	ldrh	r3, [r5, #12]
 800fcc0:	059a      	lsls	r2, r3, #22
 800fcc2:	d402      	bmi.n	800fcca <_vfiprintf_r+0x1fe>
 800fcc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcc6:	f7fc fe7f 	bl	800c9c8 <__retarget_lock_release_recursive>
 800fcca:	89ab      	ldrh	r3, [r5, #12]
 800fccc:	065b      	lsls	r3, r3, #25
 800fcce:	f53f af1f 	bmi.w	800fb10 <_vfiprintf_r+0x44>
 800fcd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcd4:	e71e      	b.n	800fb14 <_vfiprintf_r+0x48>
 800fcd6:	ab03      	add	r3, sp, #12
 800fcd8:	462a      	mov	r2, r5
 800fcda:	a904      	add	r1, sp, #16
 800fcdc:	4630      	mov	r0, r6
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	4b04      	ldr	r3, [pc, #16]	@ (800fcf4 <_vfiprintf_r+0x228>)
 800fce2:	f7fc f99b 	bl	800c01c <_printf_i>
 800fce6:	e7e4      	b.n	800fcb2 <_vfiprintf_r+0x1e6>
 800fce8:	08010bd0 	.word	0x08010bd0
 800fcec:	08010bda 	.word	0x08010bda
 800fcf0:	0800bae5 	.word	0x0800bae5
 800fcf4:	0800faa9 	.word	0x0800faa9
 800fcf8:	08010bd6 	.word	0x08010bd6

0800fcfc <__swbuf_r>:
 800fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfe:	460e      	mov	r6, r1
 800fd00:	4614      	mov	r4, r2
 800fd02:	4605      	mov	r5, r0
 800fd04:	b118      	cbz	r0, 800fd0e <__swbuf_r+0x12>
 800fd06:	6a03      	ldr	r3, [r0, #32]
 800fd08:	b90b      	cbnz	r3, 800fd0e <__swbuf_r+0x12>
 800fd0a:	f7fc fd45 	bl	800c798 <__sinit>
 800fd0e:	69a3      	ldr	r3, [r4, #24]
 800fd10:	60a3      	str	r3, [r4, #8]
 800fd12:	89a3      	ldrh	r3, [r4, #12]
 800fd14:	071a      	lsls	r2, r3, #28
 800fd16:	d501      	bpl.n	800fd1c <__swbuf_r+0x20>
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	b943      	cbnz	r3, 800fd2e <__swbuf_r+0x32>
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	4628      	mov	r0, r5
 800fd20:	f000 f82a 	bl	800fd78 <__swsetup_r>
 800fd24:	b118      	cbz	r0, 800fd2e <__swbuf_r+0x32>
 800fd26:	f04f 37ff 	mov.w	r7, #4294967295
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	b2f6      	uxtb	r6, r6
 800fd32:	6922      	ldr	r2, [r4, #16]
 800fd34:	4637      	mov	r7, r6
 800fd36:	1a98      	subs	r0, r3, r2
 800fd38:	6963      	ldr	r3, [r4, #20]
 800fd3a:	4283      	cmp	r3, r0
 800fd3c:	dc05      	bgt.n	800fd4a <__swbuf_r+0x4e>
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4628      	mov	r0, r5
 800fd42:	f7ff fa57 	bl	800f1f4 <_fflush_r>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d1ed      	bne.n	800fd26 <__swbuf_r+0x2a>
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	60a3      	str	r3, [r4, #8]
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	1c5a      	adds	r2, r3, #1
 800fd54:	6022      	str	r2, [r4, #0]
 800fd56:	701e      	strb	r6, [r3, #0]
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	6962      	ldr	r2, [r4, #20]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d004      	beq.n	800fd6a <__swbuf_r+0x6e>
 800fd60:	89a3      	ldrh	r3, [r4, #12]
 800fd62:	07db      	lsls	r3, r3, #31
 800fd64:	d5e1      	bpl.n	800fd2a <__swbuf_r+0x2e>
 800fd66:	2e0a      	cmp	r6, #10
 800fd68:	d1df      	bne.n	800fd2a <__swbuf_r+0x2e>
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f7ff fa41 	bl	800f1f4 <_fflush_r>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d0d9      	beq.n	800fd2a <__swbuf_r+0x2e>
 800fd76:	e7d6      	b.n	800fd26 <__swbuf_r+0x2a>

0800fd78 <__swsetup_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4b29      	ldr	r3, [pc, #164]	@ (800fe20 <__swsetup_r+0xa8>)
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	460c      	mov	r4, r1
 800fd80:	6818      	ldr	r0, [r3, #0]
 800fd82:	b118      	cbz	r0, 800fd8c <__swsetup_r+0x14>
 800fd84:	6a03      	ldr	r3, [r0, #32]
 800fd86:	b90b      	cbnz	r3, 800fd8c <__swsetup_r+0x14>
 800fd88:	f7fc fd06 	bl	800c798 <__sinit>
 800fd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd90:	0719      	lsls	r1, r3, #28
 800fd92:	d422      	bmi.n	800fdda <__swsetup_r+0x62>
 800fd94:	06da      	lsls	r2, r3, #27
 800fd96:	d407      	bmi.n	800fda8 <__swsetup_r+0x30>
 800fd98:	2209      	movs	r2, #9
 800fd9a:	602a      	str	r2, [r5, #0]
 800fd9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	81a3      	strh	r3, [r4, #12]
 800fda6:	e033      	b.n	800fe10 <__swsetup_r+0x98>
 800fda8:	0758      	lsls	r0, r3, #29
 800fdaa:	d512      	bpl.n	800fdd2 <__swsetup_r+0x5a>
 800fdac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdae:	b141      	cbz	r1, 800fdc2 <__swsetup_r+0x4a>
 800fdb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdb4:	4299      	cmp	r1, r3
 800fdb6:	d002      	beq.n	800fdbe <__swsetup_r+0x46>
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7fd fc79 	bl	800d6b0 <_free_r>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdc2:	89a3      	ldrh	r3, [r4, #12]
 800fdc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fdc8:	81a3      	strh	r3, [r4, #12]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6063      	str	r3, [r4, #4]
 800fdce:	6923      	ldr	r3, [r4, #16]
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	89a3      	ldrh	r3, [r4, #12]
 800fdd4:	f043 0308 	orr.w	r3, r3, #8
 800fdd8:	81a3      	strh	r3, [r4, #12]
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	b94b      	cbnz	r3, 800fdf2 <__swsetup_r+0x7a>
 800fdde:	89a3      	ldrh	r3, [r4, #12]
 800fde0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fde8:	d003      	beq.n	800fdf2 <__swsetup_r+0x7a>
 800fdea:	4621      	mov	r1, r4
 800fdec:	4628      	mov	r0, r5
 800fdee:	f000 f882 	bl	800fef6 <__smakebuf_r>
 800fdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf6:	f013 0201 	ands.w	r2, r3, #1
 800fdfa:	d00a      	beq.n	800fe12 <__swsetup_r+0x9a>
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	60a2      	str	r2, [r4, #8]
 800fe00:	6962      	ldr	r2, [r4, #20]
 800fe02:	4252      	negs	r2, r2
 800fe04:	61a2      	str	r2, [r4, #24]
 800fe06:	6922      	ldr	r2, [r4, #16]
 800fe08:	b942      	cbnz	r2, 800fe1c <__swsetup_r+0xa4>
 800fe0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe0e:	d1c5      	bne.n	800fd9c <__swsetup_r+0x24>
 800fe10:	bd38      	pop	{r3, r4, r5, pc}
 800fe12:	0799      	lsls	r1, r3, #30
 800fe14:	bf58      	it	pl
 800fe16:	6962      	ldrpl	r2, [r4, #20]
 800fe18:	60a2      	str	r2, [r4, #8]
 800fe1a:	e7f4      	b.n	800fe06 <__swsetup_r+0x8e>
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	e7f7      	b.n	800fe10 <__swsetup_r+0x98>
 800fe20:	20000034 	.word	0x20000034

0800fe24 <_raise_r>:
 800fe24:	291f      	cmp	r1, #31
 800fe26:	b538      	push	{r3, r4, r5, lr}
 800fe28:	4605      	mov	r5, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	d904      	bls.n	800fe38 <_raise_r+0x14>
 800fe2e:	2316      	movs	r3, #22
 800fe30:	6003      	str	r3, [r0, #0]
 800fe32:	f04f 30ff 	mov.w	r0, #4294967295
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe3a:	b112      	cbz	r2, 800fe42 <_raise_r+0x1e>
 800fe3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe40:	b94b      	cbnz	r3, 800fe56 <_raise_r+0x32>
 800fe42:	4628      	mov	r0, r5
 800fe44:	f000 f830 	bl	800fea8 <_getpid_r>
 800fe48:	4622      	mov	r2, r4
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe52:	f000 b817 	b.w	800fe84 <_kill_r>
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d00a      	beq.n	800fe70 <_raise_r+0x4c>
 800fe5a:	1c59      	adds	r1, r3, #1
 800fe5c:	d103      	bne.n	800fe66 <_raise_r+0x42>
 800fe5e:	2316      	movs	r3, #22
 800fe60:	6003      	str	r3, [r0, #0]
 800fe62:	2001      	movs	r0, #1
 800fe64:	e7e7      	b.n	800fe36 <_raise_r+0x12>
 800fe66:	2100      	movs	r1, #0
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe6e:	4798      	blx	r3
 800fe70:	2000      	movs	r0, #0
 800fe72:	e7e0      	b.n	800fe36 <_raise_r+0x12>

0800fe74 <raise>:
 800fe74:	4b02      	ldr	r3, [pc, #8]	@ (800fe80 <raise+0xc>)
 800fe76:	4601      	mov	r1, r0
 800fe78:	6818      	ldr	r0, [r3, #0]
 800fe7a:	f7ff bfd3 	b.w	800fe24 <_raise_r>
 800fe7e:	bf00      	nop
 800fe80:	20000034 	.word	0x20000034

0800fe84 <_kill_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	2300      	movs	r3, #0
 800fe88:	4d06      	ldr	r5, [pc, #24]	@ (800fea4 <_kill_r+0x20>)
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	4611      	mov	r1, r2
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	f7f3 fad5 	bl	8003440 <_kill>
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	d102      	bne.n	800fea0 <_kill_r+0x1c>
 800fe9a:	682b      	ldr	r3, [r5, #0]
 800fe9c:	b103      	cbz	r3, 800fea0 <_kill_r+0x1c>
 800fe9e:	6023      	str	r3, [r4, #0]
 800fea0:	bd38      	pop	{r3, r4, r5, pc}
 800fea2:	bf00      	nop
 800fea4:	2003b3b4 	.word	0x2003b3b4

0800fea8 <_getpid_r>:
 800fea8:	f7f3 bac2 	b.w	8003430 <_getpid>

0800feac <__swhatbuf_r>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	460c      	mov	r4, r1
 800feb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb4:	b096      	sub	sp, #88	@ 0x58
 800feb6:	4615      	mov	r5, r2
 800feb8:	2900      	cmp	r1, #0
 800feba:	461e      	mov	r6, r3
 800febc:	da0c      	bge.n	800fed8 <__swhatbuf_r+0x2c>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	2100      	movs	r1, #0
 800fec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fec6:	bf14      	ite	ne
 800fec8:	2340      	movne	r3, #64	@ 0x40
 800feca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fece:	2000      	movs	r0, #0
 800fed0:	6031      	str	r1, [r6, #0]
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	b016      	add	sp, #88	@ 0x58
 800fed6:	bd70      	pop	{r4, r5, r6, pc}
 800fed8:	466a      	mov	r2, sp
 800feda:	f000 f849 	bl	800ff70 <_fstat_r>
 800fede:	2800      	cmp	r0, #0
 800fee0:	dbed      	blt.n	800febe <__swhatbuf_r+0x12>
 800fee2:	9901      	ldr	r1, [sp, #4]
 800fee4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fee8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800feec:	4259      	negs	r1, r3
 800feee:	4159      	adcs	r1, r3
 800fef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fef4:	e7eb      	b.n	800fece <__swhatbuf_r+0x22>

0800fef6 <__smakebuf_r>:
 800fef6:	898b      	ldrh	r3, [r1, #12]
 800fef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fefa:	079d      	lsls	r5, r3, #30
 800fefc:	4606      	mov	r6, r0
 800fefe:	460c      	mov	r4, r1
 800ff00:	d507      	bpl.n	800ff12 <__smakebuf_r+0x1c>
 800ff02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff06:	6023      	str	r3, [r4, #0]
 800ff08:	6123      	str	r3, [r4, #16]
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	6163      	str	r3, [r4, #20]
 800ff0e:	b003      	add	sp, #12
 800ff10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff12:	ab01      	add	r3, sp, #4
 800ff14:	466a      	mov	r2, sp
 800ff16:	f7ff ffc9 	bl	800feac <__swhatbuf_r>
 800ff1a:	9f00      	ldr	r7, [sp, #0]
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	4630      	mov	r0, r6
 800ff20:	4639      	mov	r1, r7
 800ff22:	f7fd fc39 	bl	800d798 <_malloc_r>
 800ff26:	b948      	cbnz	r0, 800ff3c <__smakebuf_r+0x46>
 800ff28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff2c:	059a      	lsls	r2, r3, #22
 800ff2e:	d4ee      	bmi.n	800ff0e <__smakebuf_r+0x18>
 800ff30:	f023 0303 	bic.w	r3, r3, #3
 800ff34:	f043 0302 	orr.w	r3, r3, #2
 800ff38:	81a3      	strh	r3, [r4, #12]
 800ff3a:	e7e2      	b.n	800ff02 <__smakebuf_r+0xc>
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff44:	81a3      	strh	r3, [r4, #12]
 800ff46:	9b01      	ldr	r3, [sp, #4]
 800ff48:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff4c:	b15b      	cbz	r3, 800ff66 <__smakebuf_r+0x70>
 800ff4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff52:	4630      	mov	r0, r6
 800ff54:	f000 f81e 	bl	800ff94 <_isatty_r>
 800ff58:	b128      	cbz	r0, 800ff66 <__smakebuf_r+0x70>
 800ff5a:	89a3      	ldrh	r3, [r4, #12]
 800ff5c:	f023 0303 	bic.w	r3, r3, #3
 800ff60:	f043 0301 	orr.w	r3, r3, #1
 800ff64:	81a3      	strh	r3, [r4, #12]
 800ff66:	89a3      	ldrh	r3, [r4, #12]
 800ff68:	431d      	orrs	r5, r3
 800ff6a:	81a5      	strh	r5, [r4, #12]
 800ff6c:	e7cf      	b.n	800ff0e <__smakebuf_r+0x18>
	...

0800ff70 <_fstat_r>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	2300      	movs	r3, #0
 800ff74:	4d06      	ldr	r5, [pc, #24]	@ (800ff90 <_fstat_r+0x20>)
 800ff76:	4604      	mov	r4, r0
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	602b      	str	r3, [r5, #0]
 800ff7e:	f7f3 fabf 	bl	8003500 <_fstat>
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	d102      	bne.n	800ff8c <_fstat_r+0x1c>
 800ff86:	682b      	ldr	r3, [r5, #0]
 800ff88:	b103      	cbz	r3, 800ff8c <_fstat_r+0x1c>
 800ff8a:	6023      	str	r3, [r4, #0]
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	bf00      	nop
 800ff90:	2003b3b4 	.word	0x2003b3b4

0800ff94 <_isatty_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	2300      	movs	r3, #0
 800ff98:	4d05      	ldr	r5, [pc, #20]	@ (800ffb0 <_isatty_r+0x1c>)
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	602b      	str	r3, [r5, #0]
 800ffa0:	f7f3 fabe 	bl	8003520 <_isatty>
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	d102      	bne.n	800ffae <_isatty_r+0x1a>
 800ffa8:	682b      	ldr	r3, [r5, #0]
 800ffaa:	b103      	cbz	r3, 800ffae <_isatty_r+0x1a>
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	bd38      	pop	{r3, r4, r5, pc}
 800ffb0:	2003b3b4 	.word	0x2003b3b4

0800ffb4 <sqrt>:
 800ffb4:	b538      	push	{r3, r4, r5, lr}
 800ffb6:	ec55 4b10 	vmov	r4, r5, d0
 800ffba:	ed2d 8b02 	vpush	{d8}
 800ffbe:	f000 f825 	bl	801000c <__ieee754_sqrt>
 800ffc2:	4622      	mov	r2, r4
 800ffc4:	462b      	mov	r3, r5
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4629      	mov	r1, r5
 800ffca:	eeb0 8a40 	vmov.f32	s16, s0
 800ffce:	eef0 8a60 	vmov.f32	s17, s1
 800ffd2:	f7f0 fdbf 	bl	8000b54 <__aeabi_dcmpun>
 800ffd6:	b990      	cbnz	r0, 800fffe <sqrt+0x4a>
 800ffd8:	2200      	movs	r2, #0
 800ffda:	2300      	movs	r3, #0
 800ffdc:	4620      	mov	r0, r4
 800ffde:	4629      	mov	r1, r5
 800ffe0:	f7f0 fd90 	bl	8000b04 <__aeabi_dcmplt>
 800ffe4:	b158      	cbz	r0, 800fffe <sqrt+0x4a>
 800ffe6:	f7fc fcc3 	bl	800c970 <__errno>
 800ffea:	2321      	movs	r3, #33	@ 0x21
 800ffec:	2200      	movs	r2, #0
 800ffee:	6003      	str	r3, [r0, #0]
 800fff0:	2300      	movs	r3, #0
 800fff2:	4610      	mov	r0, r2
 800fff4:	4619      	mov	r1, r3
 800fff6:	f7f0 fc3d 	bl	8000874 <__aeabi_ddiv>
 800fffa:	ec41 0b18 	vmov	d8, r0, r1
 800fffe:	eeb0 0a48 	vmov.f32	s0, s16
 8010002:	eef0 0a68 	vmov.f32	s1, s17
 8010006:	ecbd 8b02 	vpop	{d8}
 801000a:	bd38      	pop	{r3, r4, r5, pc}

0801000c <__ieee754_sqrt>:
 801000c:	4a6b      	ldr	r2, [pc, #428]	@ (80101bc <__ieee754_sqrt+0x1b0>)
 801000e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010012:	ec55 4b10 	vmov	r4, r5, d0
 8010016:	43aa      	bics	r2, r5
 8010018:	462b      	mov	r3, r5
 801001a:	4621      	mov	r1, r4
 801001c:	d110      	bne.n	8010040 <__ieee754_sqrt+0x34>
 801001e:	4622      	mov	r2, r4
 8010020:	4620      	mov	r0, r4
 8010022:	4629      	mov	r1, r5
 8010024:	f7f0 fafc 	bl	8000620 <__aeabi_dmul>
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 f940 	bl	80002b4 <__adddf3>
 8010034:	4604      	mov	r4, r0
 8010036:	460d      	mov	r5, r1
 8010038:	ec45 4b10 	vmov	d0, r4, r5
 801003c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010040:	2d00      	cmp	r5, #0
 8010042:	dc0e      	bgt.n	8010062 <__ieee754_sqrt+0x56>
 8010044:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010048:	4322      	orrs	r2, r4
 801004a:	d0f5      	beq.n	8010038 <__ieee754_sqrt+0x2c>
 801004c:	b19d      	cbz	r5, 8010076 <__ieee754_sqrt+0x6a>
 801004e:	4622      	mov	r2, r4
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 f92c 	bl	80002b0 <__aeabi_dsub>
 8010058:	4602      	mov	r2, r0
 801005a:	460b      	mov	r3, r1
 801005c:	f7f0 fc0a 	bl	8000874 <__aeabi_ddiv>
 8010060:	e7e8      	b.n	8010034 <__ieee754_sqrt+0x28>
 8010062:	152a      	asrs	r2, r5, #20
 8010064:	d115      	bne.n	8010092 <__ieee754_sqrt+0x86>
 8010066:	2000      	movs	r0, #0
 8010068:	e009      	b.n	801007e <__ieee754_sqrt+0x72>
 801006a:	0acb      	lsrs	r3, r1, #11
 801006c:	3a15      	subs	r2, #21
 801006e:	0549      	lsls	r1, r1, #21
 8010070:	2b00      	cmp	r3, #0
 8010072:	d0fa      	beq.n	801006a <__ieee754_sqrt+0x5e>
 8010074:	e7f7      	b.n	8010066 <__ieee754_sqrt+0x5a>
 8010076:	462a      	mov	r2, r5
 8010078:	e7fa      	b.n	8010070 <__ieee754_sqrt+0x64>
 801007a:	005b      	lsls	r3, r3, #1
 801007c:	3001      	adds	r0, #1
 801007e:	02dc      	lsls	r4, r3, #11
 8010080:	d5fb      	bpl.n	801007a <__ieee754_sqrt+0x6e>
 8010082:	1e44      	subs	r4, r0, #1
 8010084:	1b12      	subs	r2, r2, r4
 8010086:	f1c0 0420 	rsb	r4, r0, #32
 801008a:	fa21 f404 	lsr.w	r4, r1, r4
 801008e:	4081      	lsls	r1, r0
 8010090:	4323      	orrs	r3, r4
 8010092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010096:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801009a:	07d2      	lsls	r2, r2, #31
 801009c:	f04f 0600 	mov.w	r6, #0
 80100a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100a4:	ea4f 0565 	mov.w	r5, r5, asr #1
 80100a8:	f04f 0016 	mov.w	r0, #22
 80100ac:	4632      	mov	r2, r6
 80100ae:	bf58      	it	pl
 80100b0:	005b      	lslpl	r3, r3, #1
 80100b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80100b6:	bf5c      	itt	pl
 80100b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80100bc:	0049      	lslpl	r1, r1, #1
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80100c4:	0049      	lsls	r1, r1, #1
 80100c6:	1917      	adds	r7, r2, r4
 80100c8:	429f      	cmp	r7, r3
 80100ca:	bfde      	ittt	le
 80100cc:	193a      	addle	r2, r7, r4
 80100ce:	1bdb      	suble	r3, r3, r7
 80100d0:	1936      	addle	r6, r6, r4
 80100d2:	0fcf      	lsrs	r7, r1, #31
 80100d4:	3801      	subs	r0, #1
 80100d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80100da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80100de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80100e2:	d1f0      	bne.n	80100c6 <__ieee754_sqrt+0xba>
 80100e4:	4604      	mov	r4, r0
 80100e6:	2720      	movs	r7, #32
 80100e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80100ec:	429a      	cmp	r2, r3
 80100ee:	eb00 0e0c 	add.w	lr, r0, ip
 80100f2:	db02      	blt.n	80100fa <__ieee754_sqrt+0xee>
 80100f4:	d113      	bne.n	801011e <__ieee754_sqrt+0x112>
 80100f6:	458e      	cmp	lr, r1
 80100f8:	d811      	bhi.n	801011e <__ieee754_sqrt+0x112>
 80100fa:	f1be 0f00 	cmp.w	lr, #0
 80100fe:	eb0e 000c 	add.w	r0, lr, ip
 8010102:	da43      	bge.n	801018c <__ieee754_sqrt+0x180>
 8010104:	2800      	cmp	r0, #0
 8010106:	db41      	blt.n	801018c <__ieee754_sqrt+0x180>
 8010108:	f102 0801 	add.w	r8, r2, #1
 801010c:	1a9b      	subs	r3, r3, r2
 801010e:	458e      	cmp	lr, r1
 8010110:	4464      	add	r4, ip
 8010112:	eba1 010e 	sub.w	r1, r1, lr
 8010116:	bf88      	it	hi
 8010118:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801011c:	4642      	mov	r2, r8
 801011e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010122:	3f01      	subs	r7, #1
 8010124:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010128:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801012c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010130:	d1dc      	bne.n	80100ec <__ieee754_sqrt+0xe0>
 8010132:	4319      	orrs	r1, r3
 8010134:	d01b      	beq.n	801016e <__ieee754_sqrt+0x162>
 8010136:	f8df a088 	ldr.w	sl, [pc, #136]	@ 80101c0 <__ieee754_sqrt+0x1b4>
 801013a:	f8df b088 	ldr.w	fp, [pc, #136]	@ 80101c4 <__ieee754_sqrt+0x1b8>
 801013e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010142:	e9db 2300 	ldrd	r2, r3, [fp]
 8010146:	e9da 8900 	ldrd	r8, r9, [sl]
 801014a:	f7f0 f8b1 	bl	80002b0 <__aeabi_dsub>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4640      	mov	r0, r8
 8010154:	4649      	mov	r1, r9
 8010156:	f7f0 fcdf 	bl	8000b18 <__aeabi_dcmple>
 801015a:	b140      	cbz	r0, 801016e <__ieee754_sqrt+0x162>
 801015c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010160:	e9da 0100 	ldrd	r0, r1, [sl]
 8010164:	e9db 2300 	ldrd	r2, r3, [fp]
 8010168:	d112      	bne.n	8010190 <__ieee754_sqrt+0x184>
 801016a:	3601      	adds	r6, #1
 801016c:	463c      	mov	r4, r7
 801016e:	1072      	asrs	r2, r6, #1
 8010170:	07f1      	lsls	r1, r6, #31
 8010172:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8010176:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801017a:	bf48      	it	mi
 801017c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010180:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010184:	4618      	mov	r0, r3
 8010186:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801018a:	e753      	b.n	8010034 <__ieee754_sqrt+0x28>
 801018c:	4690      	mov	r8, r2
 801018e:	e7bd      	b.n	801010c <__ieee754_sqrt+0x100>
 8010190:	e9da 8900 	ldrd	r8, r9, [sl]
 8010194:	f7f0 f88e 	bl	80002b4 <__adddf3>
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 fcb0 	bl	8000b04 <__aeabi_dcmplt>
 80101a4:	b128      	cbz	r0, 80101b2 <__ieee754_sqrt+0x1a6>
 80101a6:	1ca0      	adds	r0, r4, #2
 80101a8:	f104 0402 	add.w	r4, r4, #2
 80101ac:	bf08      	it	eq
 80101ae:	3601      	addeq	r6, #1
 80101b0:	e7dd      	b.n	801016e <__ieee754_sqrt+0x162>
 80101b2:	1c63      	adds	r3, r4, #1
 80101b4:	f023 0401 	bic.w	r4, r3, #1
 80101b8:	e7d9      	b.n	801016e <__ieee754_sqrt+0x162>
 80101ba:	bf00      	nop
 80101bc:	7ff00000 	.word	0x7ff00000
 80101c0:	200001f8 	.word	0x200001f8
 80101c4:	200001f0 	.word	0x200001f0

080101c8 <_init>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	bf00      	nop
 80101cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ce:	bc08      	pop	{r3}
 80101d0:	469e      	mov	lr, r3
 80101d2:	4770      	bx	lr

080101d4 <_fini>:
 80101d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d6:	bf00      	nop
 80101d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101da:	bc08      	pop	{r3}
 80101dc:	469e      	mov	lr, r3
 80101de:	4770      	bx	lr
