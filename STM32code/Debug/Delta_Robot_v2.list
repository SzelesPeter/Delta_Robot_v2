
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ba0  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  08013df8  08013df8  00014df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ba8  08014ba8  00016200  2**0
                  CONTENTS
  4 .ARM          00000008  08014ba8  08014ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bb0  08014bb0  00016200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bb0  08014bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014bb4  08014bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08014bb8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  20000200  08014db8  00016200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b3c4  08014db8  000163c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002268e  00000000  00000000  00016236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004232  00000000  00000000  000388c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  0003e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fdbd  00000000  00000000  0003fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002564f  00000000  00000000  0006fa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001271ad  00000000  00000000  000950e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009340  00000000  00000000  001bc2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001c5614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000200 	.word	0x20000200
 8000274:	00000000 	.word	0x00000000
 8000278:	08013de0 	.word	0x08013de0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000204 	.word	0x20000204
 8000294:	08013de0 	.word	0x08013de0

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Hall_Sensor_Read_Magnitude>:
 */

#include "AS5048A_P.h"

uint16_t Hall_Sensor_Read_Magnitude(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af02      	add	r7, sp, #8
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = magnitude_adress;
 8001042:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001046:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f004 fc5e 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001054:	f107 0216 	add.w	r2, r7, #22
 8001058:	f107 0116 	add.w	r1, r7, #22
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f009 f9d6 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f004 fc4e 	bl	8005910 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f004 fc46 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001084:	f107 0216 	add.w	r2, r7, #22
 8001088:	f107 0116 	add.w	r1, r7, #22
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f009 f9be 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f004 fc36 	bl	8005910 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 80010a4:	2300      	movs	r3, #0
 80010a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f004 fc2e 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010b4:	f107 0216 	add.w	r2, r7, #22
 80010b8:	f107 0116 	add.w	r1, r7, #22
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f009 f9a6 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f004 fc1e 	bl	8005910 <HAL_GPIO_WritePin>
	return tmp;
 80010d4:	8afb      	ldrh	r3, [r7, #22]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <Hall_Sensor_Read_Angle>:



uint16_t Hall_Sensor_Read_Angle(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = angle_adress;
 80010ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f0:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f004 fc09 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010fe:	f107 0216 	add.w	r2, r7, #22
 8001102:	f107 0116 	add.w	r1, r7, #22
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f009 f981 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f004 fbf9 	bl	8005910 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800111e:	2300      	movs	r3, #0
 8001120:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f004 fbf1 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800112e:	f107 0216 	add.w	r2, r7, #22
 8001132:	f107 0116 	add.w	r1, r7, #22
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f009 f969 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f004 fbe1 	bl	8005910 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f004 fbd9 	bl	8005910 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800115e:	f107 0216 	add.w	r2, r7, #22
 8001162:	f107 0116 	add.w	r1, r7, #22
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f009 f951 	bl	800a414 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f004 fbc9 	bl	8005910 <HAL_GPIO_WritePin>
	return tmp;
 800117e:	8afb      	ldrh	r3, [r7, #22]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <Relay_0_Set+0x14>)
 8001192:	f004 fbbd 	bl	8005910 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42020800 	.word	0x42020800

080011a0 <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <Relay_0_Reset+0x14>)
 80011aa:	f004 fbb1 	bl	8005910 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	42020800 	.word	0x42020800

080011b8 <Relay_0_Read>:

uint8_t Relay_0_Read(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RELAY0_PORT, RELAY0_PIN);
 80011bc:	2110      	movs	r1, #16
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Relay_0_Read+0x14>)
 80011c0:	f004 fb8e 	bl	80058e0 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	42020800 	.word	0x42020800

080011d0 <Relay_1_Set>:

void Relay_1_Set(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <Relay_1_Set+0x14>)
 80011dc:	f004 fb98 	bl	8005910 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	42020400 	.word	0x42020400

080011e8 <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	4802      	ldr	r0, [pc, #8]	@ (80011fc <Relay_1_Reset+0x14>)
 80011f4:	f004 fb8c 	bl	8005910 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	42020400 	.word	0x42020400

08001200 <Move_to_XYZ>:
 *      Author: win10
 */

#include "Inverz_Kinematika_P.h"
void  Move_to_XYZ(double X_target, double Y_target, double Z_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b0ac      	sub	sp, #176	@ 0xb0
 8001208:	af06      	add	r7, sp, #24
 800120a:	ed87 0b08 	vstr	d0, [r7, #32]
 800120e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001212:	ed87 2b04 	vstr	d2, [r7, #16]
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 800121e:	a3ee      	add	r3, pc, #952	@ (adr r3, 80015d8 <Move_to_XYZ+0x3d8>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	//-----------------------------Motor 0
	X_target_forgatott = X_target;
 8001228:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800122c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	Y_target_forgatott = Y_target;
 8001230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001234:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001238:	ed9f 1bdd 	vldr	d1, [pc, #884]	@ 80015b0 <Move_to_XYZ+0x3b0>
 800123c:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001240:	f010 fbe2 	bl	8011a08 <pow>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	a1e5      	add	r1, pc, #916	@ (adr r1, 80015e0 <Move_to_XYZ+0x3e0>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff f82f 	bl	80002b0 <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	ec43 2b17 	vmov	d7, r2, r3
 800125a:	eeb0 0a47 	vmov.f32	s0, s14
 800125e:	eef0 0a67 	vmov.f32	s1, s15
 8001262:	f010 fc41 	bl	8011ae8 <sqrt>
 8001266:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4bd6      	ldr	r3, [pc, #856]	@ (80015c8 <Move_to_XYZ+0x3c8>)
 8001270:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001274:	f7ff f81e 	bl	80002b4 <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	f04f 0000 	mov.w	r0, #0
 8001280:	49d2      	ldr	r1, [pc, #840]	@ (80015cc <Move_to_XYZ+0x3cc>)
 8001282:	f7ff f815 	bl	80002b0 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ec43 2b17 	vmov	d7, r2, r3
 800128e:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001292:	eeb0 0a47 	vmov.f32	s0, s14
 8001296:	eef0 0a67 	vmov.f32	s1, s15
 800129a:	f010 fbb5 	bl	8011a08 <pow>
 800129e:	ec55 4b10 	vmov	r4, r5, d0
 80012a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	49c9      	ldr	r1, [pc, #804]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 80012ac:	f7ff f800 	bl	80002b0 <__aeabi_dsub>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	ed9f 1bbd 	vldr	d1, [pc, #756]	@ 80015b0 <Move_to_XYZ+0x3b0>
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	f010 fba0 	bl	8011a08 <pow>
 80012c8:	ec53 2b10 	vmov	r2, r3, d0
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe fff0 	bl	80002b4 <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b17 	vmov	d7, r2, r3
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	f010 fc00 	bl	8011ae8 <sqrt>
 80012e8:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 80012ec:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 80015b0 <Move_to_XYZ+0x3b0>
 80012f0:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80012f4:	f010 fb88 	bl	8011a08 <pow>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	a1ae      	add	r1, pc, #696	@ (adr r1, 80015b8 <Move_to_XYZ+0x3b8>)
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7fe ffd5 	bl	80002b0 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001312:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001316:	f010 fb77 	bl	8011a08 <pow>
 800131a:	ec53 2b10 	vmov	r2, r3, d0
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ffc7 	bl	80002b4 <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
 800132e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	f7fe ffbd 	bl	80002b4 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	f7ff fa97 	bl	8000874 <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 800134e:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001352:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001356:	f010 fb57 	bl	8011a08 <pow>
 800135a:	ec53 2b10 	vmov	r2, r3, d0
 800135e:	a196      	add	r1, pc, #600	@ (adr r1, 80015b8 <Move_to_XYZ+0x3b8>)
 8001360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001364:	f7fe ffa4 	bl	80002b0 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	ec43 2b17 	vmov	d7, r2, r3
 8001370:	eeb0 0a47 	vmov.f32	s0, s14
 8001374:	eef0 0a67 	vmov.f32	s1, s15
 8001378:	f010 fbb6 	bl	8011ae8 <sqrt>
 800137c:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b90      	ldr	r3, [pc, #576]	@ (80015c8 <Move_to_XYZ+0x3c8>)
 8001386:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800138a:	f7fe ff93 	bl	80002b4 <__adddf3>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b8c      	ldr	r3, [pc, #560]	@ (80015cc <Move_to_XYZ+0x3cc>)
 800139c:	f7fe ff88 	bl	80002b0 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013ac:	f7ff f938 	bl	8000620 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013bc:	f7ff fa5a 	bl	8000874 <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b80      	ldr	r3, [pc, #512]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 80013ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d2:	f7fe ff6d 	bl	80002b0 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80013e2:	f7ff f91d 	bl	8000620 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013f2:	f7ff fa3f 	bl	8000874 <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe ff59 	bl	80002b4 <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <Move_to_XYZ+0x3cc>)
 8001410:	f7fe ff50 	bl	80002b4 <__adddf3>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b6b      	ldr	r3, [pc, #428]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 8001422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001426:	f7fe ff43 	bl	80002b0 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001436:	f7ff fa1d 	bl	8000874 <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b60      	ldr	r3, [pc, #384]	@ (80015c8 <Move_to_XYZ+0x3c8>)
 8001448:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800144c:	f7fe ff32 	bl	80002b4 <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800145c:	f7ff f8e0 	bl	8000620 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7fe ff24 	bl	80002b4 <__adddf3>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <Move_to_XYZ+0x3cc>)
 800147a:	f7fe ff19 	bl	80002b0 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800148a:	f7ff f8c9 	bl	8000620 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800149a:	f7ff f9eb 	bl	8000874 <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b49      	ldr	r3, [pc, #292]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 80014ac:	f7fe ff02 	bl	80002b4 <__adddf3>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 80014be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80014c2:	f7fe fef5 	bl	80002b0 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ec43 2b18 	vmov	d8, r2, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b3e      	ldr	r3, [pc, #248]	@ (80015cc <Move_to_XYZ+0x3cc>)
 80014d4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80014d8:	f7fe feea 	bl	80002b0 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b17 	vmov	d7, r2, r3
 80014e4:	eeb0 1a47 	vmov.f32	s2, s14
 80014e8:	eef0 1a67 	vmov.f32	s3, s15
 80014ec:	eeb0 0a48 	vmov.f32	s0, s16
 80014f0:	eef0 0a68 	vmov.f32	s1, s17
 80014f4:	f010 fa86 	bl	8011a04 <atan2>
 80014f8:	ec51 0b10 	vmov	r0, r1, d0
 80014fc:	a330      	add	r3, pc, #192	@ (adr r3, 80015c0 <Move_to_XYZ+0x3c0>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f88d 	bl	8000620 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4614      	mov	r4, r2
 800150c:	461d      	mov	r5, r3
 800150e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	f7fe fecd 	bl	80002b4 <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff f9a7 	bl	8000874 <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	//-----------------------------Motor 1
	alpha = atan2(Y_target,X_target);
 800152e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001532:	ed97 0b06 	vldr	d0, [r7, #24]
 8001536:	f010 fa65 	bl	8011a04 <atan2>
 800153a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 800153e:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001542:	ed97 0b08 	vldr	d0, [r7, #32]
 8001546:	f010 fa5f 	bl	8011a08 <pow>
 800154a:	ec55 4b10 	vmov	r4, r5, d0
 800154e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001552:	ed97 0b06 	vldr	d0, [r7, #24]
 8001556:	f010 fa57 	bl	8011a08 <pow>
 800155a:	ec53 2b10 	vmov	r2, r3, d0
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe fea7 	bl	80002b4 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b17 	vmov	d7, r2, r3
 800156e:	eeb0 0a47 	vmov.f32	s0, s14
 8001572:	eef0 0a67 	vmov.f32	s1, s15
 8001576:	f010 fab7 	bl	8011ae8 <sqrt>
 800157a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	X_target_forgatott = r*sin(alpha + 2*PI/3);
 800157e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	f7fe fe95 	bl	80002b4 <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 8001598:	f7ff f96c 	bl	8000874 <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015a8:	e01e      	b.n	80015e8 <Move_to_XYZ+0x3e8>
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40000000 	.word	0x40000000
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40d5f900 	.word	0x40d5f900
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40e38800 	.word	0x40e38800
 80015c8:	40490000 	.word	0x40490000
 80015cc:	40590000 	.word	0x40590000
 80015d0:	40790000 	.word	0x40790000
 80015d4:	40080000 	.word	0x40080000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40fde840 	.word	0x40fde840
 80015e8:	f7fe fe64 	bl	80002b4 <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	ec43 2b17 	vmov	d7, r2, r3
 80015f4:	eeb0 0a47 	vmov.f32	s0, s14
 80015f8:	eef0 0a67 	vmov.f32	s1, s15
 80015fc:	f010 faf4 	bl	8011be8 <sin>
 8001600:	ec53 2b10 	vmov	r2, r3, d0
 8001604:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001608:	f7ff f80a 	bl	8000620 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	Y_target_forgatott = r*cos(alpha + 2*PI/3);
 8001614:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	f7fe fe4a 	bl	80002b4 <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4bda      	ldr	r3, [pc, #872]	@ (8001998 <Move_to_XYZ+0x798>)
 800162e:	f7ff f921 	bl	8000874 <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800163e:	f7fe fe39 	bl	80002b4 <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	f010 fa75 	bl	8011b40 <cos>
 8001656:	ec53 2b10 	vmov	r2, r3, d0
 800165a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800165e:	f7fe ffdf 	bl	8000620 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 800166a:	ed9f 1bc3 	vldr	d1, [pc, #780]	@ 8001978 <Move_to_XYZ+0x778>
 800166e:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001672:	f010 f9c9 	bl	8011a08 <pow>
 8001676:	ec53 2b10 	vmov	r2, r3, d0
 800167a:	a1c1      	add	r1, pc, #772	@ (adr r1, 8001980 <Move_to_XYZ+0x780>)
 800167c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001680:	f7fe fe16 	bl	80002b0 <__aeabi_dsub>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	ec43 2b17 	vmov	d7, r2, r3
 800168c:	eeb0 0a47 	vmov.f32	s0, s14
 8001690:	eef0 0a67 	vmov.f32	s1, s15
 8001694:	f010 fa28 	bl	8011ae8 <sqrt>
 8001698:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	d = sqrt(pow(motor_offset-(X_target+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4bbe      	ldr	r3, [pc, #760]	@ (800199c <Move_to_XYZ+0x79c>)
 80016a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016a6:	f7fe fe05 	bl	80002b4 <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	49bb      	ldr	r1, [pc, #748]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 80016b4:	f7fe fdfc 	bl	80002b0 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	ec43 2b17 	vmov	d7, r2, r3
 80016c0:	ed9f 1bad 	vldr	d1, [pc, #692]	@ 8001978 <Move_to_XYZ+0x778>
 80016c4:	eeb0 0a47 	vmov.f32	s0, s14
 80016c8:	eef0 0a67 	vmov.f32	s1, s15
 80016cc:	f010 f99c 	bl	8011a08 <pow>
 80016d0:	ec55 4b10 	vmov	r4, r5, d0
 80016d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	49b1      	ldr	r1, [pc, #708]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 80016de:	f7fe fde7 	bl	80002b0 <__aeabi_dsub>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ec43 2b17 	vmov	d7, r2, r3
 80016ea:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 8001978 <Move_to_XYZ+0x778>
 80016ee:	eeb0 0a47 	vmov.f32	s0, s14
 80016f2:	eef0 0a67 	vmov.f32	s1, s15
 80016f6:	f010 f987 	bl	8011a08 <pow>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fdd7 	bl	80002b4 <__adddf3>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f010 f9e7 	bl	8011ae8 <sqrt>
 800171a:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 800171e:	ed9f 1b96 	vldr	d1, [pc, #600]	@ 8001978 <Move_to_XYZ+0x778>
 8001722:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8001726:	f010 f96f 	bl	8011a08 <pow>
 800172a:	ec53 2b10 	vmov	r2, r3, d0
 800172e:	a196      	add	r1, pc, #600	@ (adr r1, 8001988 <Move_to_XYZ+0x788>)
 8001730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001734:	f7fe fdbc 	bl	80002b0 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4614      	mov	r4, r2
 800173e:	461d      	mov	r5, r3
 8001740:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8001978 <Move_to_XYZ+0x778>
 8001744:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001748:	f010 f95e 	bl	8011a08 <pow>
 800174c:	ec53 2b10 	vmov	r2, r3, d0
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fdae 	bl	80002b4 <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4614      	mov	r4, r2
 800175e:	461d      	mov	r5, r3
 8001760:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	f7fe fda4 	bl	80002b4 <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7ff f87e 	bl	8000874 <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001780:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8001978 <Move_to_XYZ+0x778>
 8001784:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001788:	f010 f93e 	bl	8011a08 <pow>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	a17d      	add	r1, pc, #500	@ (adr r1, 8001988 <Move_to_XYZ+0x788>)
 8001792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001796:	f7fe fd8b 	bl	80002b0 <__aeabi_dsub>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b17 	vmov	d7, r2, r3
 80017a2:	eeb0 0a47 	vmov.f32	s0, s14
 80017a6:	eef0 0a67 	vmov.f32	s1, s15
 80017aa:	f010 f99d 	bl	8011ae8 <sqrt>
 80017ae:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

	Arm_joint_X = l*((X_target+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b79      	ldr	r3, [pc, #484]	@ (800199c <Move_to_XYZ+0x79c>)
 80017b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017bc:	f7fe fd7a 	bl	80002b4 <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b74      	ldr	r3, [pc, #464]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 80017ce:	f7fe fd6f 	bl	80002b0 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80017de:	f7fe ff1f 	bl	8000620 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017ee:	f7ff f841 	bl	8000874 <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 8001800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001804:	f7fe fd54 	bl	80002b0 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001814:	f7fe ff04 	bl	8000620 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001824:	f7ff f826 	bl	8000874 <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4620      	mov	r0, r4
 800182e:	4629      	mov	r1, r5
 8001830:	f7fe fd40 	bl	80002b4 <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b57      	ldr	r3, [pc, #348]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 8001842:	f7fe fd37 	bl	80002b4 <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target+effektor_offset) - motor_offset)/d + motor_height;
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b54      	ldr	r3, [pc, #336]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 8001854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001858:	f7fe fd2a 	bl	80002b0 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001868:	f7ff f804 	bl	8000874 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b48      	ldr	r3, [pc, #288]	@ (800199c <Move_to_XYZ+0x79c>)
 800187a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800187e:	f7fe fd19 	bl	80002b4 <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800188e:	f7fe fec7 	bl	8000620 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fd0b 	bl	80002b4 <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 80018ac:	f7fe fd00 	bl	80002b0 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80018bc:	f7fe feb0 	bl	8000620 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018cc:	f7fe ffd2 	bl	8000874 <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 80018de:	f7fe fce9 	bl	80002b4 <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 80018f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80018f4:	f7fe fcdc 	bl	80002b0 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	ec43 2b18 	vmov	d8, r2, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 8001906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800190a:	f7fe fcd1 	bl	80002b0 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b17 	vmov	d7, r2, r3
 8001916:	eeb0 1a47 	vmov.f32	s2, s14
 800191a:	eef0 1a67 	vmov.f32	s3, s15
 800191e:	eeb0 0a48 	vmov.f32	s0, s16
 8001922:	eef0 0a68 	vmov.f32	s1, s17
 8001926:	f010 f86d 	bl	8011a04 <atan2>
 800192a:	ec51 0b10 	vmov	r0, r1, d0
 800192e:	a318      	add	r3, pc, #96	@ (adr r3, 8001990 <Move_to_XYZ+0x790>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe74 	bl	8000620 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	f7fe fcb4 	bl	80002b4 <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe ff8e 	bl	8000874 <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	//-----------------------------Motor 2
		alpha = atan2(Y_target,X_target);
 8001960:	ed97 1b08 	vldr	d1, [r7, #32]
 8001964:	ed97 0b06 	vldr	d0, [r7, #24]
 8001968:	f010 f84c 	bl	8011a04 <atan2>
 800196c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 8001970:	e01a      	b.n	80019a8 <Move_to_XYZ+0x7a8>
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	00000000 	.word	0x00000000
 800197c:	40000000 	.word	0x40000000
 8001980:	00000000 	.word	0x00000000
 8001984:	40fde840 	.word	0x40fde840
 8001988:	00000000 	.word	0x00000000
 800198c:	40d5f900 	.word	0x40d5f900
 8001990:	00000000 	.word	0x00000000
 8001994:	40e38800 	.word	0x40e38800
 8001998:	40080000 	.word	0x40080000
 800199c:	40490000 	.word	0x40490000
 80019a0:	40590000 	.word	0x40590000
 80019a4:	40790000 	.word	0x40790000
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 80019a8:	ed9f 1bdb 	vldr	d1, [pc, #876]	@ 8001d18 <Move_to_XYZ+0xb18>
 80019ac:	ed97 0b08 	vldr	d0, [r7, #32]
 80019b0:	f010 f82a 	bl	8011a08 <pow>
 80019b4:	ec55 4b10 	vmov	r4, r5, d0
 80019b8:	ed9f 1bd7 	vldr	d1, [pc, #860]	@ 8001d18 <Move_to_XYZ+0xb18>
 80019bc:	ed97 0b06 	vldr	d0, [r7, #24]
 80019c0:	f010 f822 	bl	8011a08 <pow>
 80019c4:	ec53 2b10 	vmov	r2, r3, d0
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fc72 	bl	80002b4 <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b17 	vmov	d7, r2, r3
 80019d8:	eeb0 0a47 	vmov.f32	s0, s14
 80019dc:	eef0 0a67 	vmov.f32	s1, s15
 80019e0:	f010 f882 	bl	8011ae8 <sqrt>
 80019e4:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
		X_target_forgatott = r*sin(alpha - 2*PI/3);
 80019e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	f7fe fc60 	bl	80002b4 <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4bcb      	ldr	r3, [pc, #812]	@ (8001d30 <Move_to_XYZ+0xb30>)
 8001a02:	f7fe ff37 	bl	8000874 <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a0e:	f7fe fc4f 	bl	80002b0 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	f010 f8e1 	bl	8011be8 <sin>
 8001a26:	ec53 2b10 	vmov	r2, r3, d0
 8001a2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a2e:	f7fe fdf7 	bl	8000620 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		Y_target_forgatott = r*cos(alpha - 2*PI/3);
 8001a3a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	f7fe fc37 	bl	80002b4 <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4bb7      	ldr	r3, [pc, #732]	@ (8001d30 <Move_to_XYZ+0xb30>)
 8001a54:	f7fe ff0e 	bl	8000874 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a60:	f7fe fc26 	bl	80002b0 <__aeabi_dsub>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	ec43 2b17 	vmov	d7, r2, r3
 8001a6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a70:	eef0 0a67 	vmov.f32	s1, s15
 8001a74:	f010 f864 	bl	8011b40 <cos>
 8001a78:	ec53 2b10 	vmov	r2, r3, d0
 8001a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a80:	f7fe fdce 	bl	8000620 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001a8c:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001a90:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001a94:	f00f ffb8 	bl	8011a08 <pow>
 8001a98:	ec53 2b10 	vmov	r2, r3, d0
 8001a9c:	a1a0      	add	r1, pc, #640	@ (adr r1, 8001d20 <Move_to_XYZ+0xb20>)
 8001a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa2:	f7fe fc05 	bl	80002b0 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	ec43 2b17 	vmov	d7, r2, r3
 8001aae:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab2:	eef0 0a67 	vmov.f32	s1, s15
 8001ab6:	f010 f817 	bl	8011ae8 <sqrt>
 8001aba:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
		d = sqrt(pow(motor_offset-(X_target+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8001d34 <Move_to_XYZ+0xb34>)
 8001ac4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ac8:	f7fe fbf4 	bl	80002b4 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	4998      	ldr	r1, [pc, #608]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001ad6:	f7fe fbeb 	bl	80002b0 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b17 	vmov	d7, r2, r3
 8001ae2:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aea:	eef0 0a67 	vmov.f32	s1, s15
 8001aee:	f00f ff8b 	bl	8011a08 <pow>
 8001af2:	ec55 4b10 	vmov	r4, r5, d0
 8001af6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	498f      	ldr	r1, [pc, #572]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001b00:	f7fe fbd6 	bl	80002b0 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	ec43 2b17 	vmov	d7, r2, r3
 8001b0c:	ed9f 1b82 	vldr	d1, [pc, #520]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b10:	eeb0 0a47 	vmov.f32	s0, s14
 8001b14:	eef0 0a67 	vmov.f32	s1, s15
 8001b18:	f00f ff76 	bl	8011a08 <pow>
 8001b1c:	ec53 2b10 	vmov	r2, r3, d0
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fbc6 	bl	80002b4 <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	ec43 2b17 	vmov	d7, r2, r3
 8001b30:	eeb0 0a47 	vmov.f32	s0, s14
 8001b34:	eef0 0a67 	vmov.f32	s1, s15
 8001b38:	f00f ffd6 	bl	8011ae8 <sqrt>
 8001b3c:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001b40:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b44:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8001b48:	f00f ff5e 	bl	8011a08 <pow>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	a175      	add	r1, pc, #468	@ (adr r1, 8001d28 <Move_to_XYZ+0xb28>)
 8001b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b56:	f7fe fbab 	bl	80002b0 <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b66:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001b6a:	f00f ff4d 	bl	8011a08 <pow>
 8001b6e:	ec53 2b10 	vmov	r2, r3, d0
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fb9d 	bl	80002b4 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	f7fe fb93 	bl	80002b4 <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fe6d 	bl	8000874 <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001ba2:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001ba6:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001baa:	f00f ff2d 	bl	8011a08 <pow>
 8001bae:	ec53 2b10 	vmov	r2, r3, d0
 8001bb2:	a15d      	add	r1, pc, #372	@ (adr r1, 8001d28 <Move_to_XYZ+0xb28>)
 8001bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb8:	f7fe fb7a 	bl	80002b0 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ec43 2b17 	vmov	d7, r2, r3
 8001bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc8:	eef0 0a67 	vmov.f32	s1, s15
 8001bcc:	f00f ff8c 	bl	8011ae8 <sqrt>
 8001bd0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

		Arm_joint_X = l*((X_target+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b56      	ldr	r3, [pc, #344]	@ (8001d34 <Move_to_XYZ+0xb34>)
 8001bda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bde:	f7fe fb69 	bl	80002b4 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b52      	ldr	r3, [pc, #328]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001bf0:	f7fe fb5e 	bl	80002b0 <__aeabi_dsub>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001c00:	f7fe fd0e 	bl	8000620 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c10:	f7fe fe30 	bl	8000874 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4614      	mov	r4, r2
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c26:	f7fe fb43 	bl	80002b0 <__aeabi_dsub>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c36:	f7fe fcf3 	bl	8000620 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c46:	f7fe fe15 	bl	8000874 <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fb2f 	bl	80002b4 <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b35      	ldr	r3, [pc, #212]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001c64:	f7fe fb26 	bl	80002b4 <__adddf3>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target+effektor_offset) - motor_offset)/d + motor_height;
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7a:	f7fe fb19 	bl	80002b0 <__aeabi_dsub>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c8a:	f7fe fdf3 	bl	8000874 <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <Move_to_XYZ+0xb34>)
 8001c9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ca0:	f7fe fb08 	bl	80002b4 <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001cb0:	f7fe fcb6 	bl	8000620 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fafa 	bl	80002b4 <__adddf3>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001cce:	f7fe faef 	bl	80002b0 <__aeabi_dsub>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001cde:	f7fe fc9f 	bl	8000620 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cee:	f7fe fdc1 	bl	8000874 <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001d00:	f7fe fad8 	bl	80002b4 <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	e016      	b.n	8001d40 <Move_to_XYZ+0xb40>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40000000 	.word	0x40000000
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40fde840 	.word	0x40fde840
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40d5f900 	.word	0x40d5f900
 8001d30:	40080000 	.word	0x40080000
 8001d34:	40490000 	.word	0x40490000
 8001d38:	40590000 	.word	0x40590000
 8001d3c:	40790000 	.word	0x40790000
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <Move_to_XYZ+0xc08>)
 8001d42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001d46:	f7fe fab3 	bl	80002b0 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ec43 2b18 	vmov	d8, r2, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <Move_to_XYZ+0xc0c>)
 8001d58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d5c:	f7fe faa8 	bl	80002b0 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b17 	vmov	d7, r2, r3
 8001d68:	eeb0 1a47 	vmov.f32	s2, s14
 8001d6c:	eef0 1a67 	vmov.f32	s3, s15
 8001d70:	eeb0 0a48 	vmov.f32	s0, s16
 8001d74:	eef0 0a68 	vmov.f32	s1, s17
 8001d78:	f00f fe44 	bl	8011a04 <atan2>
 8001d7c:	ec51 0b10 	vmov	r0, r1, d0
 8001d80:	a31f      	add	r3, pc, #124	@ (adr r3, 8001e00 <Move_to_XYZ+0xc00>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fc4b 	bl	8000620 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461d      	mov	r5, r3
 8001d92:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	f7fe fa8b 	bl	80002b4 <__adddf3>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fd65 	bl	8000874 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	move (Theta0,Theta1,Theta2,tim1, Channel1, tim2, Channel2, tim3, Channel3);
 8001db2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001db6:	f7fe fee3 	bl	8000b80 <__aeabi_d2iz>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dc0:	f7fe fede 	bl	8000b80 <__aeabi_d2iz>
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dca:	f7fe fed9 	bl	8000b80 <__aeabi_d2iz>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dd4:	9304      	str	r3, [sp, #16]
 8001dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dda:	9303      	str	r3, [sp, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4629      	mov	r1, r5
 8001dec:	4620      	mov	r0, r4
 8001dee:	f001 fd9f 	bl	8003930 <move>
}
 8001df2:	bf00      	nop
 8001df4:	3798      	adds	r7, #152	@ 0x98
 8001df6:	46bd      	mov	sp, r7
 8001df8:	ecbd 8b02 	vpop	{d8}
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40e38800 	.word	0x40e38800
 8001e08:	40790000 	.word	0x40790000
 8001e0c:	40590000 	.word	0x40590000

08001e10 <Zero_XYZ>:

void  Zero_XYZ(double X_target, double Y_target, double Z_target)
{
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	ed2d 8b02 	vpush	{d8}
 8001e16:	b0a2      	sub	sp, #136	@ 0x88
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e1e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e22:	ed87 2b00 	vstr	d2, [r7]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 8001e26:	a3ee      	add	r3, pc, #952	@ (adr r3, 80021e0 <Zero_XYZ+0x3d0>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	//-----------------------------Motor 0
	X_target_forgatott = X_target;
 8001e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e34:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = Y_target;
 8001e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e3c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001e40:	ed9f 1bdd 	vldr	d1, [pc, #884]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001e44:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001e48:	f00f fdde 	bl	8011a08 <pow>
 8001e4c:	ec53 2b10 	vmov	r2, r3, d0
 8001e50:	a1e5      	add	r1, pc, #916	@ (adr r1, 80021e8 <Zero_XYZ+0x3d8>)
 8001e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e56:	f7fe fa2b 	bl	80002b0 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	f00f fe3d 	bl	8011ae8 <sqrt>
 8001e6e:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4bd6      	ldr	r3, [pc, #856]	@ (80021d0 <Zero_XYZ+0x3c0>)
 8001e78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e7c:	f7fe fa1a 	bl	80002b4 <__adddf3>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	49d2      	ldr	r1, [pc, #840]	@ (80021d4 <Zero_XYZ+0x3c4>)
 8001e8a:	f7fe fa11 	bl	80002b0 <__aeabi_dsub>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b17 	vmov	d7, r2, r3
 8001e96:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	f00f fdb1 	bl	8011a08 <pow>
 8001ea6:	ec55 4b10 	vmov	r4, r5, d0
 8001eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eae:	f04f 0000 	mov.w	r0, #0
 8001eb2:	49c9      	ldr	r1, [pc, #804]	@ (80021d8 <Zero_XYZ+0x3c8>)
 8001eb4:	f7fe f9fc 	bl	80002b0 <__aeabi_dsub>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	ec43 2b17 	vmov	d7, r2, r3
 8001ec0:	ed9f 1bbd 	vldr	d1, [pc, #756]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec8:	eef0 0a67 	vmov.f32	s1, s15
 8001ecc:	f00f fd9c 	bl	8011a08 <pow>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe f9ec 	bl	80002b4 <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b17 	vmov	d7, r2, r3
 8001ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee8:	eef0 0a67 	vmov.f32	s1, s15
 8001eec:	f00f fdfc 	bl	8011ae8 <sqrt>
 8001ef0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001ef4:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001ef8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001efc:	f00f fd84 	bl	8011a08 <pow>
 8001f00:	ec53 2b10 	vmov	r2, r3, d0
 8001f04:	a1ae      	add	r1, pc, #696	@ (adr r1, 80021c0 <Zero_XYZ+0x3b0>)
 8001f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f0a:	f7fe f9d1 	bl	80002b0 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001f1a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f1e:	f00f fd73 	bl	8011a08 <pow>
 8001f22:	ec53 2b10 	vmov	r2, r3, d0
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f9c3 	bl	80002b4 <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f7fe f9b9 	bl	80002b4 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe fc93 	bl	8000874 <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001f56:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80021b8 <Zero_XYZ+0x3a8>
 8001f5a:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8001f5e:	f00f fd53 	bl	8011a08 <pow>
 8001f62:	ec53 2b10 	vmov	r2, r3, d0
 8001f66:	a196      	add	r1, pc, #600	@ (adr r1, 80021c0 <Zero_XYZ+0x3b0>)
 8001f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f6c:	f7fe f9a0 	bl	80002b0 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b17 	vmov	d7, r2, r3
 8001f78:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7c:	eef0 0a67 	vmov.f32	s1, s15
 8001f80:	f00f fdb2 	bl	8011ae8 <sqrt>
 8001f84:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b90      	ldr	r3, [pc, #576]	@ (80021d0 <Zero_XYZ+0x3c0>)
 8001f8e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001f92:	f7fe f98f 	bl	80002b4 <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <Zero_XYZ+0x3c4>)
 8001fa4:	f7fe f984 	bl	80002b0 <__aeabi_dsub>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fb4:	f7fe fb34 	bl	8000620 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001fc4:	f7fe fc56 	bl	8000874 <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <Zero_XYZ+0x3c8>)
 8001fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fda:	f7fe f969 	bl	80002b0 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fea:	f7fe fb19 	bl	8000620 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001ffa:	f7fe fc3b 	bl	8000874 <__aeabi_ddiv>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe f955 	bl	80002b4 <__adddf3>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b6f      	ldr	r3, [pc, #444]	@ (80021d4 <Zero_XYZ+0x3c4>)
 8002018:	f7fe f94c 	bl	80002b4 <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <Zero_XYZ+0x3c8>)
 800202a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202e:	f7fe f93f 	bl	80002b0 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800203e:	f7fe fc19 	bl	8000874 <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	461d      	mov	r5, r3
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b60      	ldr	r3, [pc, #384]	@ (80021d0 <Zero_XYZ+0x3c0>)
 8002050:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002054:	f7fe f92e 	bl	80002b4 <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002064:	f7fe fadc 	bl	8000620 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe f920 	bl	80002b4 <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <Zero_XYZ+0x3c4>)
 8002082:	f7fe f915 	bl	80002b0 <__aeabi_dsub>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002092:	f7fe fac5 	bl	8000620 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020a2:	f7fe fbe7 	bl	8000874 <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <Zero_XYZ+0x3c8>)
 80020b4:	f7fe f8fe 	bl	80002b4 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b44      	ldr	r3, [pc, #272]	@ (80021d8 <Zero_XYZ+0x3c8>)
 80020c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020ca:	f7fe f8f1 	bl	80002b0 <__aeabi_dsub>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	ec43 2b18 	vmov	d8, r2, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <Zero_XYZ+0x3c4>)
 80020dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80020e0:	f7fe f8e6 	bl	80002b0 <__aeabi_dsub>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	ec43 2b17 	vmov	d7, r2, r3
 80020ec:	eeb0 1a47 	vmov.f32	s2, s14
 80020f0:	eef0 1a67 	vmov.f32	s3, s15
 80020f4:	eeb0 0a48 	vmov.f32	s0, s16
 80020f8:	eef0 0a68 	vmov.f32	s1, s17
 80020fc:	f00f fc82 	bl	8011a04 <atan2>
 8002100:	ec51 0b10 	vmov	r0, r1, d0
 8002104:	a330      	add	r3, pc, #192	@ (adr r3, 80021c8 <Zero_XYZ+0x3b8>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fa89 	bl	8000620 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	461d      	mov	r5, r3
 8002116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	f7fe f8c9 	bl	80002b4 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fba3 	bl	8000874 <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	//-----------------------------Motor 1
	alpha = atan2(Y_target,X_target);
 8002136:	ed97 1b04 	vldr	d1, [r7, #16]
 800213a:	ed97 0b02 	vldr	d0, [r7, #8]
 800213e:	f00f fc61 	bl	8011a04 <atan2>
 8002142:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 8002146:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80021b8 <Zero_XYZ+0x3a8>
 800214a:	ed97 0b04 	vldr	d0, [r7, #16]
 800214e:	f00f fc5b 	bl	8011a08 <pow>
 8002152:	ec55 4b10 	vmov	r4, r5, d0
 8002156:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80021b8 <Zero_XYZ+0x3a8>
 800215a:	ed97 0b02 	vldr	d0, [r7, #8]
 800215e:	f00f fc53 	bl	8011a08 <pow>
 8002162:	ec53 2b10 	vmov	r2, r3, d0
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe f8a3 	bl	80002b4 <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	ec43 2b17 	vmov	d7, r2, r3
 8002176:	eeb0 0a47 	vmov.f32	s0, s14
 800217a:	eef0 0a67 	vmov.f32	s1, s15
 800217e:	f00f fcb3 	bl	8011ae8 <sqrt>
 8002182:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	X_target_forgatott = r*sin(alpha + 2*PI/3);
 8002186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	f7fe f891 	bl	80002b4 <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <Zero_XYZ+0x3cc>)
 80021a0:	f7fe fb68 	bl	8000874 <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021b0:	e01e      	b.n	80021f0 <Zero_XYZ+0x3e0>
 80021b2:	bf00      	nop
 80021b4:	f3af 8000 	nop.w
 80021b8:	00000000 	.word	0x00000000
 80021bc:	40000000 	.word	0x40000000
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40d5f900 	.word	0x40d5f900
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40e38800 	.word	0x40e38800
 80021d0:	40490000 	.word	0x40490000
 80021d4:	40590000 	.word	0x40590000
 80021d8:	40790000 	.word	0x40790000
 80021dc:	40080000 	.word	0x40080000
 80021e0:	54442d18 	.word	0x54442d18
 80021e4:	400921fb 	.word	0x400921fb
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40fde840 	.word	0x40fde840
 80021f0:	f7fe f860 	bl	80002b4 <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	ec43 2b17 	vmov	d7, r2, r3
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	f00f fcf0 	bl	8011be8 <sin>
 8002208:	ec53 2b10 	vmov	r2, r3, d0
 800220c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002210:	f7fe fa06 	bl	8000620 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = r*cos(alpha + 2*PI/3);
 800221c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	f7fe f846 	bl	80002b4 <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4bda      	ldr	r3, [pc, #872]	@ (80025a0 <Zero_XYZ+0x790>)
 8002236:	f7fe fb1d 	bl	8000874 <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002246:	f7fe f835 	bl	80002b4 <__adddf3>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	ec43 2b17 	vmov	d7, r2, r3
 8002252:	eeb0 0a47 	vmov.f32	s0, s14
 8002256:	eef0 0a67 	vmov.f32	s1, s15
 800225a:	f00f fc71 	bl	8011b40 <cos>
 800225e:	ec53 2b10 	vmov	r2, r3, d0
 8002262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002266:	f7fe f9db 	bl	8000620 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002272:	ed9f 1bc3 	vldr	d1, [pc, #780]	@ 8002580 <Zero_XYZ+0x770>
 8002276:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800227a:	f00f fbc5 	bl	8011a08 <pow>
 800227e:	ec53 2b10 	vmov	r2, r3, d0
 8002282:	a1c1      	add	r1, pc, #772	@ (adr r1, 8002588 <Zero_XYZ+0x778>)
 8002284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002288:	f7fe f812 	bl	80002b0 <__aeabi_dsub>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	ec43 2b17 	vmov	d7, r2, r3
 8002294:	eeb0 0a47 	vmov.f32	s0, s14
 8002298:	eef0 0a67 	vmov.f32	s1, s15
 800229c:	f00f fc24 	bl	8011ae8 <sqrt>
 80022a0:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4bbe      	ldr	r3, [pc, #760]	@ (80025a4 <Zero_XYZ+0x794>)
 80022aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ae:	f7fe f801 	bl	80002b4 <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	49bb      	ldr	r1, [pc, #748]	@ (80025a8 <Zero_XYZ+0x798>)
 80022bc:	f7fd fff8 	bl	80002b0 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	ec43 2b17 	vmov	d7, r2, r3
 80022c8:	ed9f 1bad 	vldr	d1, [pc, #692]	@ 8002580 <Zero_XYZ+0x770>
 80022cc:	eeb0 0a47 	vmov.f32	s0, s14
 80022d0:	eef0 0a67 	vmov.f32	s1, s15
 80022d4:	f00f fb98 	bl	8011a08 <pow>
 80022d8:	ec55 4b10 	vmov	r4, r5, d0
 80022dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	49b1      	ldr	r1, [pc, #708]	@ (80025ac <Zero_XYZ+0x79c>)
 80022e6:	f7fd ffe3 	bl	80002b0 <__aeabi_dsub>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	ec43 2b17 	vmov	d7, r2, r3
 80022f2:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 8002580 <Zero_XYZ+0x770>
 80022f6:	eeb0 0a47 	vmov.f32	s0, s14
 80022fa:	eef0 0a67 	vmov.f32	s1, s15
 80022fe:	f00f fb83 	bl	8011a08 <pow>
 8002302:	ec53 2b10 	vmov	r2, r3, d0
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fd ffd3 	bl	80002b4 <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	ec43 2b17 	vmov	d7, r2, r3
 8002316:	eeb0 0a47 	vmov.f32	s0, s14
 800231a:	eef0 0a67 	vmov.f32	s1, s15
 800231e:	f00f fbe3 	bl	8011ae8 <sqrt>
 8002322:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8002326:	ed9f 1b96 	vldr	d1, [pc, #600]	@ 8002580 <Zero_XYZ+0x770>
 800232a:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800232e:	f00f fb6b 	bl	8011a08 <pow>
 8002332:	ec53 2b10 	vmov	r2, r3, d0
 8002336:	a196      	add	r1, pc, #600	@ (adr r1, 8002590 <Zero_XYZ+0x780>)
 8002338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800233c:	f7fd ffb8 	bl	80002b0 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002580 <Zero_XYZ+0x770>
 800234c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002350:	f00f fb5a 	bl	8011a08 <pow>
 8002354:	ec53 2b10 	vmov	r2, r3, d0
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fd ffaa 	bl	80002b4 <__adddf3>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4614      	mov	r4, r2
 8002366:	461d      	mov	r5, r3
 8002368:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	f7fd ffa0 	bl	80002b4 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fe fa7a 	bl	8000874 <__aeabi_ddiv>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8002388:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8002580 <Zero_XYZ+0x770>
 800238c:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8002390:	f00f fb3a 	bl	8011a08 <pow>
 8002394:	ec53 2b10 	vmov	r2, r3, d0
 8002398:	a17d      	add	r1, pc, #500	@ (adr r1, 8002590 <Zero_XYZ+0x780>)
 800239a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800239e:	f7fd ff87 	bl	80002b0 <__aeabi_dsub>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	ec43 2b17 	vmov	d7, r2, r3
 80023aa:	eeb0 0a47 	vmov.f32	s0, s14
 80023ae:	eef0 0a67 	vmov.f32	s1, s15
 80023b2:	f00f fb99 	bl	8011ae8 <sqrt>
 80023b6:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	4b79      	ldr	r3, [pc, #484]	@ (80025a4 <Zero_XYZ+0x794>)
 80023c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c4:	f7fd ff76 	bl	80002b4 <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	4b74      	ldr	r3, [pc, #464]	@ (80025a8 <Zero_XYZ+0x798>)
 80023d6:	f7fd ff6b 	bl	80002b0 <__aeabi_dsub>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023e6:	f7fe f91b 	bl	8000620 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80023f6:	f7fe fa3d 	bl	8000874 <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4614      	mov	r4, r2
 8002400:	461d      	mov	r5, r3
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b69      	ldr	r3, [pc, #420]	@ (80025ac <Zero_XYZ+0x79c>)
 8002408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800240c:	f7fd ff50 	bl	80002b0 <__aeabi_dsub>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800241c:	f7fe f900 	bl	8000620 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800242c:	f7fe fa22 	bl	8000874 <__aeabi_ddiv>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd ff3c 	bl	80002b4 <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b57      	ldr	r3, [pc, #348]	@ (80025a8 <Zero_XYZ+0x798>)
 800244a:	f7fd ff33 	bl	80002b4 <__adddf3>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target+effektor_offset) - motor_offset)/d + motor_height;
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b54      	ldr	r3, [pc, #336]	@ (80025ac <Zero_XYZ+0x79c>)
 800245c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002460:	f7fd ff26 	bl	80002b0 <__aeabi_dsub>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002470:	f7fe fa00 	bl	8000874 <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <Zero_XYZ+0x794>)
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7fd ff15 	bl	80002b4 <__adddf3>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002496:	f7fe f8c3 	bl	8000620 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd ff07 	bl	80002b4 <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <Zero_XYZ+0x798>)
 80024b4:	f7fd fefc 	bl	80002b0 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024c4:	f7fe f8ac 	bl	8000620 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024d4:	f7fe f9ce 	bl	8000874 <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <Zero_XYZ+0x79c>)
 80024e6:	f7fd fee5 	bl	80002b4 <__adddf3>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <Zero_XYZ+0x79c>)
 80024f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80024fc:	f7fd fed8 	bl	80002b0 <__aeabi_dsub>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	ec43 2b18 	vmov	d8, r2, r3
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <Zero_XYZ+0x798>)
 800250e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002512:	f7fd fecd 	bl	80002b0 <__aeabi_dsub>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	ec43 2b17 	vmov	d7, r2, r3
 800251e:	eeb0 1a47 	vmov.f32	s2, s14
 8002522:	eef0 1a67 	vmov.f32	s3, s15
 8002526:	eeb0 0a48 	vmov.f32	s0, s16
 800252a:	eef0 0a68 	vmov.f32	s1, s17
 800252e:	f00f fa69 	bl	8011a04 <atan2>
 8002532:	ec51 0b10 	vmov	r0, r1, d0
 8002536:	a318      	add	r3, pc, #96	@ (adr r3, 8002598 <Zero_XYZ+0x788>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f870 	bl	8000620 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	f7fd feb0 	bl	80002b4 <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4620      	mov	r0, r4
 800255a:	4629      	mov	r1, r5
 800255c:	f7fe f98a 	bl	8000874 <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//-----------------------------Motor 2
		alpha = atan2(Y_target,X_target);
 8002568:	ed97 1b04 	vldr	d1, [r7, #16]
 800256c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002570:	f00f fa48 	bl	8011a04 <atan2>
 8002574:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002578:	e01a      	b.n	80025b0 <Zero_XYZ+0x7a0>
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	00000000 	.word	0x00000000
 8002584:	40000000 	.word	0x40000000
 8002588:	00000000 	.word	0x00000000
 800258c:	40fde840 	.word	0x40fde840
 8002590:	00000000 	.word	0x00000000
 8002594:	40d5f900 	.word	0x40d5f900
 8002598:	00000000 	.word	0x00000000
 800259c:	40e38800 	.word	0x40e38800
 80025a0:	40080000 	.word	0x40080000
 80025a4:	40490000 	.word	0x40490000
 80025a8:	40590000 	.word	0x40590000
 80025ac:	40790000 	.word	0x40790000
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 80025b0:	ed9f 1bdb 	vldr	d1, [pc, #876]	@ 8002920 <Zero_XYZ+0xb10>
 80025b4:	ed97 0b04 	vldr	d0, [r7, #16]
 80025b8:	f00f fa26 	bl	8011a08 <pow>
 80025bc:	ec55 4b10 	vmov	r4, r5, d0
 80025c0:	ed9f 1bd7 	vldr	d1, [pc, #860]	@ 8002920 <Zero_XYZ+0xb10>
 80025c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80025c8:	f00f fa1e 	bl	8011a08 <pow>
 80025cc:	ec53 2b10 	vmov	r2, r3, d0
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe6e 	bl	80002b4 <__adddf3>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	ec43 2b17 	vmov	d7, r2, r3
 80025e0:	eeb0 0a47 	vmov.f32	s0, s14
 80025e4:	eef0 0a67 	vmov.f32	s1, s15
 80025e8:	f00f fa7e 	bl	8011ae8 <sqrt>
 80025ec:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
		X_target_forgatott = r*sin(alpha - 2*PI/3);
 80025f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	f7fd fe5c 	bl	80002b4 <__adddf3>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4bcb      	ldr	r3, [pc, #812]	@ (8002938 <Zero_XYZ+0xb28>)
 800260a:	f7fe f933 	bl	8000874 <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002616:	f7fd fe4b 	bl	80002b0 <__aeabi_dsub>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b17 	vmov	d7, r2, r3
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	f00f fadd 	bl	8011be8 <sin>
 800262e:	ec53 2b10 	vmov	r2, r3, d0
 8002632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002636:	f7fd fff3 	bl	8000620 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		Y_target_forgatott = r*cos(alpha - 2*PI/3);
 8002642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	f7fd fe33 	bl	80002b4 <__adddf3>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4bb7      	ldr	r3, [pc, #732]	@ (8002938 <Zero_XYZ+0xb28>)
 800265c:	f7fe f90a 	bl	8000874 <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002668:	f7fd fe22 	bl	80002b0 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	ec43 2b17 	vmov	d7, r2, r3
 8002674:	eeb0 0a47 	vmov.f32	s0, s14
 8002678:	eef0 0a67 	vmov.f32	s1, s15
 800267c:	f00f fa60 	bl	8011b40 <cos>
 8002680:	ec53 2b10 	vmov	r2, r3, d0
 8002684:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002688:	f7fd ffca 	bl	8000620 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002694:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 8002920 <Zero_XYZ+0xb10>
 8002698:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800269c:	f00f f9b4 	bl	8011a08 <pow>
 80026a0:	ec53 2b10 	vmov	r2, r3, d0
 80026a4:	a1a0      	add	r1, pc, #640	@ (adr r1, 8002928 <Zero_XYZ+0xb18>)
 80026a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026aa:	f7fd fe01 	bl	80002b0 <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ec43 2b17 	vmov	d7, r2, r3
 80026b6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ba:	eef0 0a67 	vmov.f32	s1, s15
 80026be:	f00f fa13 	bl	8011ae8 <sqrt>
 80026c2:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
		d = sqrt(pow(motor_offset-(X_target+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b9c      	ldr	r3, [pc, #624]	@ (800293c <Zero_XYZ+0xb2c>)
 80026cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026d0:	f7fd fdf0 	bl	80002b4 <__adddf3>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	4998      	ldr	r1, [pc, #608]	@ (8002940 <Zero_XYZ+0xb30>)
 80026de:	f7fd fde7 	bl	80002b0 <__aeabi_dsub>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ec43 2b17 	vmov	d7, r2, r3
 80026ea:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002920 <Zero_XYZ+0xb10>
 80026ee:	eeb0 0a47 	vmov.f32	s0, s14
 80026f2:	eef0 0a67 	vmov.f32	s1, s15
 80026f6:	f00f f987 	bl	8011a08 <pow>
 80026fa:	ec55 4b10 	vmov	r4, r5, d0
 80026fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	498f      	ldr	r1, [pc, #572]	@ (8002944 <Zero_XYZ+0xb34>)
 8002708:	f7fd fdd2 	bl	80002b0 <__aeabi_dsub>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	ec43 2b17 	vmov	d7, r2, r3
 8002714:	ed9f 1b82 	vldr	d1, [pc, #520]	@ 8002920 <Zero_XYZ+0xb10>
 8002718:	eeb0 0a47 	vmov.f32	s0, s14
 800271c:	eef0 0a67 	vmov.f32	s1, s15
 8002720:	f00f f972 	bl	8011a08 <pow>
 8002724:	ec53 2b10 	vmov	r2, r3, d0
 8002728:	4620      	mov	r0, r4
 800272a:	4629      	mov	r1, r5
 800272c:	f7fd fdc2 	bl	80002b4 <__adddf3>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	ec43 2b17 	vmov	d7, r2, r3
 8002738:	eeb0 0a47 	vmov.f32	s0, s14
 800273c:	eef0 0a67 	vmov.f32	s1, s15
 8002740:	f00f f9d2 	bl	8011ae8 <sqrt>
 8002744:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8002748:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8002920 <Zero_XYZ+0xb10>
 800274c:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8002750:	f00f f95a 	bl	8011a08 <pow>
 8002754:	ec53 2b10 	vmov	r2, r3, d0
 8002758:	a175      	add	r1, pc, #468	@ (adr r1, 8002930 <Zero_XYZ+0xb20>)
 800275a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800275e:	f7fd fda7 	bl	80002b0 <__aeabi_dsub>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	461d      	mov	r5, r3
 800276a:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8002920 <Zero_XYZ+0xb10>
 800276e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002772:	f00f f949 	bl	8011a08 <pow>
 8002776:	ec53 2b10 	vmov	r2, r3, d0
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd fd99 	bl	80002b4 <__adddf3>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4614      	mov	r4, r2
 8002788:	461d      	mov	r5, r3
 800278a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	f7fd fd8f 	bl	80002b4 <__adddf3>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fe f869 	bl	8000874 <__aeabi_ddiv>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 80027aa:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8002920 <Zero_XYZ+0xb10>
 80027ae:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80027b2:	f00f f929 	bl	8011a08 <pow>
 80027b6:	ec53 2b10 	vmov	r2, r3, d0
 80027ba:	a15d      	add	r1, pc, #372	@ (adr r1, 8002930 <Zero_XYZ+0xb20>)
 80027bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027c0:	f7fd fd76 	bl	80002b0 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	ec43 2b17 	vmov	d7, r2, r3
 80027cc:	eeb0 0a47 	vmov.f32	s0, s14
 80027d0:	eef0 0a67 	vmov.f32	s1, s15
 80027d4:	f00f f988 	bl	8011ae8 <sqrt>
 80027d8:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

		Arm_joint_X = l*((X_target+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b56      	ldr	r3, [pc, #344]	@ (800293c <Zero_XYZ+0xb2c>)
 80027e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e6:	f7fd fd65 	bl	80002b4 <__adddf3>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <Zero_XYZ+0xb30>)
 80027f8:	f7fd fd5a 	bl	80002b0 <__aeabi_dsub>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002808:	f7fd ff0a 	bl	8000620 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002818:	f7fe f82c 	bl	8000874 <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b46      	ldr	r3, [pc, #280]	@ (8002944 <Zero_XYZ+0xb34>)
 800282a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282e:	f7fd fd3f 	bl	80002b0 <__aeabi_dsub>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800283e:	f7fd feef 	bl	8000620 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800284e:	f7fe f811 	bl	8000874 <__aeabi_ddiv>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fd2b 	bl	80002b4 <__adddf3>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <Zero_XYZ+0xb30>)
 800286c:	f7fd fd22 	bl	80002b4 <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target+effektor_offset) - motor_offset)/d + motor_height;
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b31      	ldr	r3, [pc, #196]	@ (8002944 <Zero_XYZ+0xb34>)
 800287e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002882:	f7fd fd15 	bl	80002b0 <__aeabi_dsub>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002892:	f7fd ffef 	bl	8000874 <__aeabi_ddiv>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b26      	ldr	r3, [pc, #152]	@ (800293c <Zero_XYZ+0xb2c>)
 80028a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a8:	f7fd fd04 	bl	80002b4 <__adddf3>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028b8:	f7fd feb2 	bl	8000620 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fd fcf6 	bl	80002b4 <__adddf3>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <Zero_XYZ+0xb30>)
 80028d6:	f7fd fceb 	bl	80002b0 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028e6:	f7fd fe9b 	bl	8000620 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80028f6:	f7fd ffbd 	bl	8000874 <__aeabi_ddiv>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <Zero_XYZ+0xb34>)
 8002908:	f7fd fcd4 	bl	80002b4 <__adddf3>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	e016      	b.n	8002948 <Zero_XYZ+0xb38>
 800291a:	bf00      	nop
 800291c:	f3af 8000 	nop.w
 8002920:	00000000 	.word	0x00000000
 8002924:	40000000 	.word	0x40000000
 8002928:	00000000 	.word	0x00000000
 800292c:	40fde840 	.word	0x40fde840
 8002930:	00000000 	.word	0x00000000
 8002934:	40d5f900 	.word	0x40d5f900
 8002938:	40080000 	.word	0x40080000
 800293c:	40490000 	.word	0x40490000
 8002940:	40590000 	.word	0x40590000
 8002944:	40790000 	.word	0x40790000
 8002948:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <Zero_XYZ+0xbf0>)
 800294a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800294e:	f7fd fcaf 	bl	80002b0 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	ec43 2b18 	vmov	d8, r2, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <Zero_XYZ+0xbf4>)
 8002960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002964:	f7fd fca4 	bl	80002b0 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	ec43 2b17 	vmov	d7, r2, r3
 8002970:	eeb0 1a47 	vmov.f32	s2, s14
 8002974:	eef0 1a67 	vmov.f32	s3, s15
 8002978:	eeb0 0a48 	vmov.f32	s0, s16
 800297c:	eef0 0a68 	vmov.f32	s1, s17
 8002980:	f00f f840 	bl	8011a04 <atan2>
 8002984:	ec51 0b10 	vmov	r0, r1, d0
 8002988:	a31b      	add	r3, pc, #108	@ (adr r3, 80029f8 <Zero_XYZ+0xbe8>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fe47 	bl	8000620 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4614      	mov	r4, r2
 8002998:	461d      	mov	r5, r3
 800299a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	f7fd fc87 	bl	80002b4 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd ff61 	bl	8000874 <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	Set_M_Poz_0(Theta0);
 80029ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80029be:	f7fe f907 	bl	8000bd0 <__aeabi_d2uiz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f925 	bl	8003c14 <Set_M_Poz_0>
	Set_M_Poz_1(Theta1);
 80029ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ce:	f7fe f8ff 	bl	8000bd0 <__aeabi_d2uiz>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f92d 	bl	8003c34 <Set_M_Poz_1>
	Set_M_Poz_2(Theta2);
 80029da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029de:	f7fe f8f7 	bl	8000bd0 <__aeabi_d2uiz>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f935 	bl	8003c54 <Set_M_Poz_2>
}
 80029ea:	bf00      	nop
 80029ec:	3788      	adds	r7, #136	@ 0x88
 80029ee:	46bd      	mov	sp, r7
 80029f0:	ecbd 8b02 	vpop	{d8}
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40e38800 	.word	0x40e38800
 8002a00:	40790000 	.word	0x40790000
 8002a04:	40590000 	.word	0x40590000

08002a08 <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0f0      	sub	sp, #448	@ 0x1c0
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a16:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 8002a18:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a20:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <Menu_UART_Start+0x84>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	4611      	mov	r1, r2
 8002a26:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f00b fd03 	bl	800e436 <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a36:	e013      	b.n	8002a60 <Menu_UART_Start+0x58>
 8002a38:	f107 020c 	add.w	r2, r7, #12
 8002a3c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a40:	18d1      	adds	r1, r2, r3
 8002a42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a46:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 8002a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a4e:	2201      	movs	r2, #1
 8002a50:	6800      	ldr	r0, [r0, #0]
 8002a52:	f009 fda5 	bl	800c5a0 <HAL_UART_Transmit>
 8002a56:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a64:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 8002a68:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e1      	bne.n	8002a38 <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 8002a74:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f000 f807 	bl	8002a90 <Menu_UART_Update>
}
 8002a82:	bf00      	nop
 8002a84:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	08013df8 	.word	0x08013df8

08002a90 <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <Menu_UART_Update+0x18>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000000 	.word	0x20000000

08002aac <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 8002aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab0:	b09e      	sub	sp, #120	@ 0x78
 8002ab2:	af06      	add	r7, sp, #24
 8002ab4:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8002ab6:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ac0:	2224      	movs	r2, #36	@ 0x24
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00b fc28 	bl	800e31a <memset>
	uint32_t poz0;
	uint32_t poz1;
	uint32_t poz2;

	uint8_t *Menu_Main[] = {
 8002aca:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <Menu_UART_Main+0x1f8>)
 8002acc:	f107 0410 	add.w	r4, r7, #16
 8002ad0:	461d      	mov	r5, r3
 8002ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Move to motor poz",
			"Move to XYZ poz",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	2206      	movs	r2, #6
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fd0a 	bl	8003500 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8002aec:	2300      	movs	r3, #0
 8002aee:	81bb      	strh	r3, [r7, #12]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8002af0:	f107 010c 	add.w	r1, r7, #12
 8002af4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af8:	2201      	movs	r2, #1
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f009 fdee 	bl	800c6dc <HAL_UART_Receive>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 82bb 	bne.w	800307e <Menu_UART_Main+0x5d2>
		{
			switch (rx_buff[0])
 8002b08:	7b3b      	ldrb	r3, [r7, #12]
 8002b0a:	3b30      	subs	r3, #48	@ 0x30
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	f200 82b8 	bhi.w	8003082 <Menu_UART_Main+0x5d6>
 8002b12:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <Menu_UART_Main+0x6c>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b35 	.word	0x08002b35
 8002b1c:	08002baf 	.word	0x08002baf
 8002b20:	08002c29 	.word	0x08002c29
 8002b24:	08002ccd 	.word	0x08002ccd
 8002b28:	08002edd 	.word	0x08002edd
 8002b2c:	0800306d 	.word	0x0800306d
 8002b30:	08003075 	.word	0x08003075
			{
				case '0':
					sprintf(tx_buff, "\r\nf MAX was: %d\r\n",Get_f_MAX());
 8002b34:	f001 f826 	bl	8003b84 <Get_f_MAX>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3e:	495a      	ldr	r1, [pc, #360]	@ (8002ca8 <Menu_UART_Main+0x1fc>)
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00b fb87 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fd21 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input f MAX\r\n");
 8002b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b56:	4a55      	ldr	r2, [pc, #340]	@ (8002cac <Menu_UART_Main+0x200>)
 8002b58:	461c      	mov	r4, r3
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5e:	c407      	stmia	r4!, {r0, r1, r2}
 8002b60:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fd13 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	2214      	movs	r2, #20
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fd2b 	bl	80035d2 <UART_In>
					Set_f_MAX(atoi(tx_buff));
 8002b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00a fbae 	bl	800d2e2 <atoi>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 ffcb 	bl	8003b24 <Set_f_MAX>
					sprintf(tx_buff, "New f MAX is: %d\r\n",Get_f_MAX());
 8002b8e:	f000 fff9 	bl	8003b84 <Get_f_MAX>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b98:	4945      	ldr	r1, [pc, #276]	@ (8002cb0 <Menu_UART_Main+0x204>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00b fb5a 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fcf4 	bl	8003594 <UART_Out>
					break;
 8002bac:	e266      	b.n	800307c <Menu_UART_Main+0x5d0>
				case '1':
					sprintf(tx_buff, "\r\nf MIN was: %d\r\n",Get_f_MIN());
 8002bae:	f000 fff5 	bl	8003b9c <Get_f_MIN>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb8:	493e      	ldr	r1, [pc, #248]	@ (8002cb4 <Menu_UART_Main+0x208>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f00b fb4a 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fce4 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input f MIN\r\n");
 8002bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd0:	4a39      	ldr	r2, [pc, #228]	@ (8002cb8 <Menu_UART_Main+0x20c>)
 8002bd2:	461c      	mov	r4, r3
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd8:	c407      	stmia	r4!, {r0, r1, r2}
 8002bda:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fcd6 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bec:	2214      	movs	r2, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fcee 	bl	80035d2 <UART_In>
					Set_f_MIN(atoi(tx_buff));
 8002bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00a fb71 	bl	800d2e2 <atoi>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ff9e 	bl	8003b44 <Set_f_MIN>
					sprintf(tx_buff, "New f MIN is: %d\r\n",Get_f_MIN());
 8002c08:	f000 ffc8 	bl	8003b9c <Get_f_MIN>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c12:	492a      	ldr	r1, [pc, #168]	@ (8002cbc <Menu_UART_Main+0x210>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00b fb1d 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fcb7 	bl	8003594 <UART_Out>
					break;
 8002c26:	e229      	b.n	800307c <Menu_UART_Main+0x5d0>
				case '2':
					sprintf(tx_buff, "\r\na MAX was: %d\r\n",Get_a_MAX());
 8002c28:	f000 ffc4 	bl	8003bb4 <Get_a_MAX>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c32:	4923      	ldr	r1, [pc, #140]	@ (8002cc0 <Menu_UART_Main+0x214>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00b fb0d 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fca7 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input a MAX\r\n");
 8002c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <Menu_UART_Main+0x218>)
 8002c4c:	461c      	mov	r4, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c52:	c407      	stmia	r4!, {r0, r1, r2}
 8002c54:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fc99 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c66:	2214      	movs	r2, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fcb1 	bl	80035d2 <UART_In>
					Set_a_MAX(atoi(tx_buff));
 8002c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00a fb34 	bl	800d2e2 <atoi>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 ff71 	bl	8003b64 <Set_a_MAX>
					sprintf(tx_buff, "New a MAX is: %d\r\n",Get_a_MAX());
 8002c82:	f000 ff97 	bl	8003bb4 <Get_a_MAX>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c8c:	490e      	ldr	r1, [pc, #56]	@ (8002cc8 <Menu_UART_Main+0x21c>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00b fae0 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fc7a 	bl	8003594 <UART_Out>
					break;
 8002ca0:	e1ec      	b.n	800307c <Menu_UART_Main+0x5d0>
 8002ca2:	bf00      	nop
 8002ca4:	08014258 	.word	0x08014258
 8002ca8:	08013fa8 	.word	0x08013fa8
 8002cac:	08013fbc 	.word	0x08013fbc
 8002cb0:	08013fcc 	.word	0x08013fcc
 8002cb4:	08013fe0 	.word	0x08013fe0
 8002cb8:	08013ff4 	.word	0x08013ff4
 8002cbc:	08014004 	.word	0x08014004
 8002cc0:	08014018 	.word	0x08014018
 8002cc4:	0801402c 	.word	0x0801402c
 8002cc8:	0801403c 	.word	0x0801403c
				case '3':
					sprintf(tx_buff, "\r\nMotor 0 poz was: %d\r\n",M_Poz_0());
 8002ccc:	f000 ff7e 	bl	8003bcc <M_Poz_0>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd6:	4972      	ldr	r1, [pc, #456]	@ (8002ea0 <Menu_UART_Main+0x3f4>)
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00b fabb 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fc55 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input motor 0 poz\r\n");
 8002cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cee:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea4 <Menu_UART_Main+0x3f8>)
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	4615      	mov	r5, r2
 8002cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fc46 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0c:	2214      	movs	r2, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fc5e 	bl	80035d2 <UART_In>
					poz0 = atoi(tx_buff);
 8002d16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fae1 	bl	800d2e2 <atoi>
 8002d20:	4603      	mov	r3, r0
 8002d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New motor 0 poz will be: %d\r\n",poz0);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d2a:	495f      	ldr	r1, [pc, #380]	@ (8002ea8 <Menu_UART_Main+0x3fc>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00b fa91 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fc2b 	bl	8003594 <UART_Out>

					sprintf(tx_buff, "\r\nMotor 1 poz was: %d\r\n",M_Poz_1());
 8002d3e:	f000 ff51 	bl	8003be4 <M_Poz_1>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d48:	4958      	ldr	r1, [pc, #352]	@ (8002eac <Menu_UART_Main+0x400>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f00b fa82 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fc1c 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input motor 1 poz\r\n");
 8002d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d60:	4a53      	ldr	r2, [pc, #332]	@ (8002eb0 <Menu_UART_Main+0x404>)
 8002d62:	461c      	mov	r4, r3
 8002d64:	4615      	mov	r5, r2
 8002d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fc0d 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	2214      	movs	r2, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fc25 	bl	80035d2 <UART_In>
					poz1 = atoi(tx_buff);
 8002d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00a faa8 	bl	800d2e2 <atoi>
 8002d92:	4603      	mov	r3, r0
 8002d94:	65bb      	str	r3, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New motor 1 poz will be: %d\r\n",poz1);
 8002d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d9c:	4945      	ldr	r1, [pc, #276]	@ (8002eb4 <Menu_UART_Main+0x408>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00b fa58 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fbf2 	bl	8003594 <UART_Out>

					sprintf(tx_buff, "\r\nMotor 2 poz was: %d\r\n",M_Poz_2());
 8002db0:	f000 ff24 	bl	8003bfc <M_Poz_2>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	493f      	ldr	r1, [pc, #252]	@ (8002eb8 <Menu_UART_Main+0x40c>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00b fa49 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fbe3 	bl	8003594 <UART_Out>
					strcpy(tx_buff, "Input motor 2 poz\r\n");
 8002dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8002ebc <Menu_UART_Main+0x410>)
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	4615      	mov	r5, r2
 8002dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fbd4 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df0:	2214      	movs	r2, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fbec 	bl	80035d2 <UART_In>
					poz2 = atoi(tx_buff);
 8002dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f00a fa6f 	bl	800d2e2 <atoi>
 8002e04:	4603      	mov	r3, r0
 8002e06:	657b      	str	r3, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New motor 2 poz will be: %d\r\n",poz2);
 8002e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e0e:	492c      	ldr	r1, [pc, #176]	@ (8002ec0 <Menu_UART_Main+0x414>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00b fa1f 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fbb9 	bl	8003594 <UART_Out>

					move(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8002e22:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002e24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e28:	230c      	movs	r3, #12
 8002e2a:	9304      	str	r3, [sp, #16]
 8002e2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <Menu_UART_Main+0x418>)
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	2304      	movs	r3, #4
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <Menu_UART_Main+0x41c>)
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ecc <Menu_UART_Main+0x420>)
 8002e3e:	f000 fd77 	bl	8003930 <move>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 8002e42:	f000 fec3 	bl	8003bcc <M_Poz_0>
 8002e46:	4602      	mov	r2, r0
 8002e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e4c:	4920      	ldr	r1, [pc, #128]	@ (8002ed0 <Menu_UART_Main+0x424>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f00b fa00 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb9a 	bl	8003594 <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 8002e60:	f000 fec0 	bl	8003be4 <M_Poz_1>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e6a:	491a      	ldr	r1, [pc, #104]	@ (8002ed4 <Menu_UART_Main+0x428>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00b f9f1 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb8b 	bl	8003594 <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 8002e7e:	f000 febd 	bl	8003bfc <M_Poz_2>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e88:	4913      	ldr	r1, [pc, #76]	@ (8002ed8 <Menu_UART_Main+0x42c>)
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f00b f9e2 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fb7c 	bl	8003594 <UART_Out>
					break;
 8002e9c:	e0ee      	b.n	800307c <Menu_UART_Main+0x5d0>
 8002e9e:	bf00      	nop
 8002ea0:	08014050 	.word	0x08014050
 8002ea4:	08014068 	.word	0x08014068
 8002ea8:	0801407c 	.word	0x0801407c
 8002eac:	0801409c 	.word	0x0801409c
 8002eb0:	080140b4 	.word	0x080140b4
 8002eb4:	080140c8 	.word	0x080140c8
 8002eb8:	080140e8 	.word	0x080140e8
 8002ebc:	08014100 	.word	0x08014100
 8002ec0:	08014114 	.word	0x08014114
 8002ec4:	2003acf0 	.word	0x2003acf0
 8002ec8:	2003aca4 	.word	0x2003aca4
 8002ecc:	2003ad3c 	.word	0x2003ad3c
 8002ed0:	08014134 	.word	0x08014134
 8002ed4:	0801414c 	.word	0x0801414c
 8002ed8:	08014164 	.word	0x08014164
				case '4':
					strcpy(tx_buff, "Input X poz\r\n");
 8002edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8003090 <Menu_UART_Main+0x5e4>)
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee8:	c407      	stmia	r4!, {r0, r1, r2}
 8002eea:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fb4e 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002efc:	2214      	movs	r2, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb66 	bl	80035d2 <UART_In>
					poz0 = atoi(tx_buff);
 8002f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00a f9e9 	bl	800d2e2 <atoi>
 8002f10:	4603      	mov	r3, r0
 8002f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New X poz will be: %d\r\n",poz0);
 8002f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f1a:	495e      	ldr	r1, [pc, #376]	@ (8003094 <Menu_UART_Main+0x5e8>)
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00b f999 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fb33 	bl	8003594 <UART_Out>

					strcpy(tx_buff, "Input Y poz\r\n");
 8002f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f32:	4a59      	ldr	r2, [pc, #356]	@ (8003098 <Menu_UART_Main+0x5ec>)
 8002f34:	461c      	mov	r4, r3
 8002f36:	4613      	mov	r3, r2
 8002f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f3a:	c407      	stmia	r4!, {r0, r1, r2}
 8002f3c:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb25 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f4e:	2214      	movs	r2, #20
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb3d 	bl	80035d2 <UART_In>
					poz1 = atoi(tx_buff);
 8002f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f00a f9c0 	bl	800d2e2 <atoi>
 8002f62:	4603      	mov	r3, r0
 8002f64:	65bb      	str	r3, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New Y poz will be: %d\r\n",poz1);
 8002f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f6c:	494b      	ldr	r1, [pc, #300]	@ (800309c <Menu_UART_Main+0x5f0>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00b f970 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fb0a 	bl	8003594 <UART_Out>

					strcpy(tx_buff, "Input Z poz\r\n");
 8002f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f84:	4a46      	ldr	r2, [pc, #280]	@ (80030a0 <Menu_UART_Main+0x5f4>)
 8002f86:	461c      	mov	r4, r3
 8002f88:	4613      	mov	r3, r2
 8002f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f8c:	c407      	stmia	r4!, {r0, r1, r2}
 8002f8e:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fafc 	bl	8003594 <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa0:	2214      	movs	r2, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb14 	bl	80035d2 <UART_In>
					poz2 = atoi(tx_buff);
 8002faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00a f997 	bl	800d2e2 <atoi>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	657b      	str	r3, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New Z poz will be: %d\r\n",poz2);
 8002fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fbe:	4939      	ldr	r1, [pc, #228]	@ (80030a4 <Menu_UART_Main+0x5f8>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f00b f947 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fae1 	bl	8003594 <UART_Out>

					Move_to_XYZ(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8002fd2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002fd4:	f7fd faaa 	bl	800052c <__aeabi_ui2d>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	460d      	mov	r5, r1
 8002fdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fde:	f7fd faa5 	bl	800052c <__aeabi_ui2d>
 8002fe2:	4680      	mov	r8, r0
 8002fe4:	4689      	mov	r9, r1
 8002fe6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002fe8:	f7fd faa0 	bl	800052c <__aeabi_ui2d>
 8002fec:	4682      	mov	sl, r0
 8002fee:	468b      	mov	fp, r1
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80030a8 <Menu_UART_Main+0x5fc>)
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <Menu_UART_Main+0x600>)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	482c      	ldr	r0, [pc, #176]	@ (80030b0 <Menu_UART_Main+0x604>)
 8003000:	ec4b ab12 	vmov	d2, sl, fp
 8003004:	ec49 8b11 	vmov	d1, r8, r9
 8003008:	ec45 4b10 	vmov	d0, r4, r5
 800300c:	f7fe f8f8 	bl	8001200 <Move_to_XYZ>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 8003010:	f000 fddc 	bl	8003bcc <M_Poz_0>
 8003014:	4602      	mov	r2, r0
 8003016:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800301a:	4926      	ldr	r1, [pc, #152]	@ (80030b4 <Menu_UART_Main+0x608>)
 800301c:	4618      	mov	r0, r3
 800301e:	f00b f919 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8003022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fab3 	bl	8003594 <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 800302e:	f000 fdd9 	bl	8003be4 <M_Poz_1>
 8003032:	4602      	mov	r2, r0
 8003034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003038:	491f      	ldr	r1, [pc, #124]	@ (80030b8 <Menu_UART_Main+0x60c>)
 800303a:	4618      	mov	r0, r3
 800303c:	f00b f90a 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 8003040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 faa4 	bl	8003594 <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 800304c:	f000 fdd6 	bl	8003bfc <M_Poz_2>
 8003050:	4602      	mov	r2, r0
 8003052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003056:	4919      	ldr	r1, [pc, #100]	@ (80030bc <Menu_UART_Main+0x610>)
 8003058:	4618      	mov	r0, r3
 800305a:	f00b f8fb 	bl	800e254 <siprintf>
					UART_Out(huart, tx_buff);
 800305e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fa95 	bl	8003594 <UART_Out>
					break;
 800306a:	e007      	b.n	800307c <Menu_UART_Main+0x5d0>
				case '5':
					Menu_State = Menu_UART_Relay;
 800306c:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <Menu_UART_Main+0x614>)
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <Menu_UART_Main+0x618>)
 8003070:	601a      	str	r2, [r3, #0]
					break;
 8003072:	e003      	b.n	800307c <Menu_UART_Main+0x5d0>
				case '6':
					Menu_State = Menu_UART_Sensors;
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <Menu_UART_Main+0x614>)
 8003076:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <Menu_UART_Main+0x61c>)
 8003078:	601a      	str	r2, [r3, #0]
					break;
 800307a:	bf00      	nop
			}
			break;
 800307c:	e001      	b.n	8003082 <Menu_UART_Main+0x5d6>
		} else {
			__NOP();
 800307e:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003080:	e536      	b.n	8002af0 <Menu_UART_Main+0x44>
			break;
 8003082:	bf00      	nop
		}
	}
}
 8003084:	bf00      	nop
 8003086:	3760      	adds	r7, #96	@ 0x60
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	0801417c 	.word	0x0801417c
 8003094:	0801418c 	.word	0x0801418c
 8003098:	080141a4 	.word	0x080141a4
 800309c:	080141b4 	.word	0x080141b4
 80030a0:	080141cc 	.word	0x080141cc
 80030a4:	080141dc 	.word	0x080141dc
 80030a8:	2003acf0 	.word	0x2003acf0
 80030ac:	2003aca4 	.word	0x2003aca4
 80030b0:	2003ad3c 	.word	0x2003ad3c
 80030b4:	08014134 	.word	0x08014134
 80030b8:	0801414c 	.word	0x0801414c
 80030bc:	08014164 	.word	0x08014164
 80030c0:	20000000 	.word	0x20000000
 80030c4:	0800331d 	.word	0x0800331d
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	00000000 	.word	0x00000000

080030d0 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b094      	sub	sp, #80	@ 0x50
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80030d8:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030e2:	2224      	movs	r2, #36	@ 0x24
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00b f917 	bl	800e31a <memset>

	uint8_t *Menu_Sensor[] = {
 80030ec:	4b7e      	ldr	r3, [pc, #504]	@ (80032e8 <Menu_UART_Sensors+0x218>)
 80030ee:	f107 040c 	add.w	r4, r7, #12
 80030f2:	461d      	mov	r5, r3
 80030f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	2207      	movs	r2, #7
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f9f9 	bl	8003500 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 800310e:	2300      	movs	r3, #0
 8003110:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003112:	f107 0108 	add.w	r1, r7, #8
 8003116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311a:	2201      	movs	r2, #1
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f009 fadd 	bl	800c6dc <HAL_UART_Receive>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 80d4 	bne.w	80032d2 <Menu_UART_Sensors+0x202>
			{
				switch (rx_buff[0])
 800312a:	7a3b      	ldrb	r3, [r7, #8]
 800312c:	3b30      	subs	r3, #48	@ 0x30
 800312e:	2b06      	cmp	r3, #6
 8003130:	f200 80d1 	bhi.w	80032d6 <Menu_UART_Sensors+0x206>
 8003134:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <Menu_UART_Sensors+0x6c>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003159 	.word	0x08003159
 8003140:	080031a9 	.word	0x080031a9
 8003144:	080031d5 	.word	0x080031d5
 8003148:	08003225 	.word	0x08003225
 800314c:	08003251 	.word	0x08003251
 8003150:	0800329f 	.word	0x0800329f
 8003154:	080032c9 	.word	0x080032c9
				{
					case '0':
						sprintf(tx_buff, "\r\nHALL 0 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF));
 8003158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800315c:	4963      	ldr	r1, [pc, #396]	@ (80032ec <Menu_UART_Sensors+0x21c>)
 800315e:	4864      	ldr	r0, [pc, #400]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 8003160:	f7fd ffbd 	bl	80010de <Hall_Sensor_Read_Angle>
 8003164:	4603      	mov	r3, r0
 8003166:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f9ee 	bl	800054c <__aeabi_i2d>
 8003170:	a35b      	add	r3, pc, #364	@ (adr r3, 80032e0 <Menu_UART_Sensors+0x210>)
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f7fd fb7d 	bl	8000874 <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	4b5b      	ldr	r3, [pc, #364]	@ (80032f4 <Menu_UART_Sensors+0x224>)
 8003188:	f7fd fa4a 	bl	8000620 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003194:	4958      	ldr	r1, [pc, #352]	@ (80032f8 <Menu_UART_Sensors+0x228>)
 8003196:	f00b f85d 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 800319a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9f7 	bl	8003594 <UART_Out>
						break;
 80031a6:	e093      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '1':
						sprintf(tx_buff, "\r\nHALL 0 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS0_PORT, Hall_SS0_PIN));
 80031a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ac:	494f      	ldr	r1, [pc, #316]	@ (80032ec <Menu_UART_Sensors+0x21c>)
 80031ae:	4850      	ldr	r0, [pc, #320]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 80031b0:	f7fd ff40 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031be:	494f      	ldr	r1, [pc, #316]	@ (80032fc <Menu_UART_Sensors+0x22c>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f00b f847 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 80031c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9e1 	bl	8003594 <UART_Out>
						break;
 80031d2:	e07d      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '2':
						sprintf(tx_buff, "\r\nHALL 1 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN))/0x3FFF));
 80031d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d8:	4949      	ldr	r1, [pc, #292]	@ (8003300 <Menu_UART_Sensors+0x230>)
 80031da:	4845      	ldr	r0, [pc, #276]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 80031dc:	f7fd ff7f 	bl	80010de <Hall_Sensor_Read_Angle>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f9b0 	bl	800054c <__aeabi_i2d>
 80031ec:	a33c      	add	r3, pc, #240	@ (adr r3, 80032e0 <Menu_UART_Sensors+0x210>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fb3f 	bl	8000874 <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <Menu_UART_Sensors+0x224>)
 8003204:	f7fd fa0c 	bl	8000620 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003210:	493c      	ldr	r1, [pc, #240]	@ (8003304 <Menu_UART_Sensors+0x234>)
 8003212:	f00b f81f 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 8003216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9b9 	bl	8003594 <UART_Out>
						break;
 8003222:	e055      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '3':
						sprintf(tx_buff, "\r\nHALL 1 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN));
 8003224:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003228:	4935      	ldr	r1, [pc, #212]	@ (8003300 <Menu_UART_Sensors+0x230>)
 800322a:	4831      	ldr	r0, [pc, #196]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 800322c:	f7fd ff02 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 8003230:	4603      	mov	r3, r0
 8003232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800323a:	4933      	ldr	r1, [pc, #204]	@ (8003308 <Menu_UART_Sensors+0x238>)
 800323c:	4618      	mov	r0, r3
 800323e:	f00b f809 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 8003242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9a3 	bl	8003594 <UART_Out>
						break;
 800324e:	e03f      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '4':
						sprintf(tx_buff, "\r\nHALL 2 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS2_PORT, Hall_SS2_PIN))/0x3FFF));
 8003250:	2220      	movs	r2, #32
 8003252:	492b      	ldr	r1, [pc, #172]	@ (8003300 <Menu_UART_Sensors+0x230>)
 8003254:	4826      	ldr	r0, [pc, #152]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 8003256:	f7fd ff42 	bl	80010de <Hall_Sensor_Read_Angle>
 800325a:	4603      	mov	r3, r0
 800325c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f973 	bl	800054c <__aeabi_i2d>
 8003266:	a31e      	add	r3, pc, #120	@ (adr r3, 80032e0 <Menu_UART_Sensors+0x210>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fd fb02 	bl	8000874 <__aeabi_ddiv>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <Menu_UART_Sensors+0x224>)
 800327e:	f7fd f9cf 	bl	8000620 <__aeabi_dmul>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800328a:	4920      	ldr	r1, [pc, #128]	@ (800330c <Menu_UART_Sensors+0x23c>)
 800328c:	f00a ffe2 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 8003290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f97c 	bl	8003594 <UART_Out>
						break;
 800329c:	e018      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '5':
						sprintf(tx_buff, "\r\nHALL 2 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS2_PORT, Hall_SS2_PIN));
 800329e:	2220      	movs	r2, #32
 80032a0:	4917      	ldr	r1, [pc, #92]	@ (8003300 <Menu_UART_Sensors+0x230>)
 80032a2:	4813      	ldr	r0, [pc, #76]	@ (80032f0 <Menu_UART_Sensors+0x220>)
 80032a4:	f7fd fec6 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032b2:	4917      	ldr	r1, [pc, #92]	@ (8003310 <Menu_UART_Sensors+0x240>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f00a ffcd 	bl	800e254 <siprintf>
						UART_Out(huart, tx_buff);
 80032ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f967 	bl	8003594 <UART_Out>
						break;
 80032c6:	e003      	b.n	80032d0 <Menu_UART_Sensors+0x200>
					case '6':
						Menu_State = Menu_UART_Main;
 80032c8:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <Menu_UART_Sensors+0x244>)
 80032ca:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <Menu_UART_Sensors+0x248>)
 80032cc:	601a      	str	r2, [r3, #0]
						break;
 80032ce:	bf00      	nop
				}
				break;
 80032d0:	e001      	b.n	80032d6 <Menu_UART_Sensors+0x206>
			} else {
				__NOP();
 80032d2:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80032d4:	e71d      	b.n	8003112 <Menu_UART_Sensors+0x42>
				break;
 80032d6:	bf00      	nop
			}
		}
}
 80032d8:	bf00      	nop
 80032da:	3750      	adds	r7, #80	@ 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	00000000 	.word	0x00000000
 80032e4:	40cfff80 	.word	0x40cfff80
 80032e8:	08014370 	.word	0x08014370
 80032ec:	42020000 	.word	0x42020000
 80032f0:	2003ac14 	.word	0x2003ac14
 80032f4:	40768000 	.word	0x40768000
 80032f8:	08014274 	.word	0x08014274
 80032fc:	0801428c 	.word	0x0801428c
 8003300:	42020400 	.word	0x42020400
 8003304:	080142a8 	.word	0x080142a8
 8003308:	080142c0 	.word	0x080142c0
 800330c:	080142dc 	.word	0x080142dc
 8003310:	080142f4 	.word	0x080142f4
 8003314:	20000000 	.word	0x20000000
 8003318:	08002aad 	.word	0x08002aad

0800331c <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b092      	sub	sp, #72	@ 0x48
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8003324:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f00a fff1 	bl	800e31a <memset>

	uint8_t *Menu_Relay[] = {
 8003338:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <Menu_UART_Relay+0x1b8>)
 800333a:	f107 040c 	add.w	r4, r7, #12
 800333e:	461d      	mov	r5, r3
 8003340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	2205      	movs	r2, #5
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8d5 	bl	8003500 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 8003356:	2300      	movs	r3, #0
 8003358:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800335a:	f107 0108 	add.w	r1, r7, #8
 800335e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003362:	2201      	movs	r2, #1
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f009 f9b9 	bl	800c6dc <HAL_UART_Receive>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 80aa 	bne.w	80034c6 <Menu_UART_Relay+0x1aa>
			{
				switch (rx_buff[0])
 8003372:	7a3b      	ldrb	r3, [r7, #8]
 8003374:	3b30      	subs	r3, #48	@ 0x30
 8003376:	2b04      	cmp	r3, #4
 8003378:	f200 80a7 	bhi.w	80034ca <Menu_UART_Relay+0x1ae>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <Menu_UART_Relay+0x68>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003399 	.word	0x08003399
 8003388:	080033df 	.word	0x080033df
 800338c:	0800342b 	.word	0x0800342b
 8003390:	08003471 	.word	0x08003471
 8003394:	080034bd 	.word	0x080034bd
				{
					case '0':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was set\r\n");
 8003398:	f7fd ff0e 	bl	80011b8 <Relay_0_Read>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <Menu_UART_Relay+0x9a>
 80033a2:	f107 0320 	add.w	r3, r7, #32
 80033a6:	4a4c      	ldr	r2, [pc, #304]	@ (80034d8 <Menu_UART_Relay+0x1bc>)
 80033a8:	461c      	mov	r4, r3
 80033aa:	4615      	mov	r5, r2
 80033ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	6023      	str	r3, [r4, #0]
 80033b4:	e00a      	b.n	80033cc <Menu_UART_Relay+0xb0>
						else strcpy(tx_buff, "\r\nRelay 0 was already set\r\n");
 80033b6:	f107 0320 	add.w	r3, r7, #32
 80033ba:	4a48      	ldr	r2, [pc, #288]	@ (80034dc <Menu_UART_Relay+0x1c0>)
 80033bc:	461c      	mov	r4, r3
 80033be:	4615      	mov	r5, r2
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 80033cc:	f107 0320 	add.w	r3, r7, #32
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8de 	bl	8003594 <UART_Out>
						Relay_0_Set();
 80033d8:	f7fd fed6 	bl	8001188 <Relay_0_Set>
						break;
 80033dc:	e072      	b.n	80034c4 <Menu_UART_Relay+0x1a8>
					case '1':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was already reset\r\n");
 80033de:	f7fd feeb 	bl	80011b8 <Relay_0_Read>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <Menu_UART_Relay+0xe4>
 80033e8:	f107 0320 	add.w	r3, r7, #32
 80033ec:	4a3c      	ldr	r2, [pc, #240]	@ (80034e0 <Menu_UART_Relay+0x1c4>)
 80033ee:	461c      	mov	r4, r3
 80033f0:	4615      	mov	r5, r2
 80033f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033fa:	c407      	stmia	r4!, {r0, r1, r2}
 80033fc:	8023      	strh	r3, [r4, #0]
 80033fe:	e00b      	b.n	8003418 <Menu_UART_Relay+0xfc>
						else strcpy(tx_buff, "\r\nRelay 0 was reset\r\n");
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	4a37      	ldr	r2, [pc, #220]	@ (80034e4 <Menu_UART_Relay+0x1c8>)
 8003406:	461c      	mov	r4, r3
 8003408:	4615      	mov	r5, r2
 800340a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800340e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003412:	6020      	str	r0, [r4, #0]
 8003414:	3404      	adds	r4, #4
 8003416:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8003418:	f107 0320 	add.w	r3, r7, #32
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8b8 	bl	8003594 <UART_Out>
						Relay_0_Reset();
 8003424:	f7fd febc 	bl	80011a0 <Relay_0_Reset>
						break;
 8003428:	e04c      	b.n	80034c4 <Menu_UART_Relay+0x1a8>
					case '2':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was set\r\n");
 800342a:	f7fd fec5 	bl	80011b8 <Relay_0_Read>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <Menu_UART_Relay+0x12c>
 8003434:	f107 0320 	add.w	r3, r7, #32
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <Menu_UART_Relay+0x1cc>)
 800343a:	461c      	mov	r4, r3
 800343c:	4615      	mov	r5, r2
 800343e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	e00a      	b.n	800345e <Menu_UART_Relay+0x142>
						else strcpy(tx_buff, "\r\nRelay 1 was already set\r\n");
 8003448:	f107 0320 	add.w	r3, r7, #32
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <Menu_UART_Relay+0x1d0>)
 800344e:	461c      	mov	r4, r3
 8003450:	4615      	mov	r5, r2
 8003452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800345a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 800345e:	f107 0320 	add.w	r3, r7, #32
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f895 	bl	8003594 <UART_Out>
						Relay_1_Set();
 800346a:	f7fd feb1 	bl	80011d0 <Relay_1_Set>
						break;
 800346e:	e029      	b.n	80034c4 <Menu_UART_Relay+0x1a8>
					case '3':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was already reset\r\n");
 8003470:	f7fd fea2 	bl	80011b8 <Relay_0_Read>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <Menu_UART_Relay+0x176>
 800347a:	f107 0320 	add.w	r3, r7, #32
 800347e:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <Menu_UART_Relay+0x1d4>)
 8003480:	461c      	mov	r4, r3
 8003482:	4615      	mov	r5, r2
 8003484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800348c:	c407      	stmia	r4!, {r0, r1, r2}
 800348e:	8023      	strh	r3, [r4, #0]
 8003490:	e00b      	b.n	80034aa <Menu_UART_Relay+0x18e>
						else strcpy(tx_buff, "\r\nRelay 1 was reset\r\n");
 8003492:	f107 0320 	add.w	r3, r7, #32
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <Menu_UART_Relay+0x1d8>)
 8003498:	461c      	mov	r4, r3
 800349a:	4615      	mov	r5, r2
 800349c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034a4:	6020      	str	r0, [r4, #0]
 80034a6:	3404      	adds	r4, #4
 80034a8:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 80034aa:	f107 0320 	add.w	r3, r7, #32
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f86f 	bl	8003594 <UART_Out>
						Relay_1_Reset();
 80034b6:	f7fd fe97 	bl	80011e8 <Relay_1_Reset>
						break;
 80034ba:	e003      	b.n	80034c4 <Menu_UART_Relay+0x1a8>
					case '4':
						Menu_State = Menu_UART_Main;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <Menu_UART_Relay+0x1dc>)
 80034be:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <Menu_UART_Relay+0x1e0>)
 80034c0:	601a      	str	r2, [r3, #0]
						break;
 80034c2:	bf00      	nop
				}
				break;
 80034c4:	e001      	b.n	80034ca <Menu_UART_Relay+0x1ae>
			} else {
				__NOP();
 80034c6:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80034c8:	e747      	b.n	800335a <Menu_UART_Relay+0x3e>
				break;
 80034ca:	bf00      	nop
			}
		}
}
 80034cc:	bf00      	nop
 80034ce:	3748      	adds	r7, #72	@ 0x48
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bdb0      	pop	{r4, r5, r7, pc}
 80034d4:	08014494 	.word	0x08014494
 80034d8:	0801438c 	.word	0x0801438c
 80034dc:	080143a0 	.word	0x080143a0
 80034e0:	080143bc 	.word	0x080143bc
 80034e4:	080143dc 	.word	0x080143dc
 80034e8:	080143f4 	.word	0x080143f4
 80034ec:	08014408 	.word	0x08014408
 80034f0:	08014424 	.word	0x08014424
 80034f4:	08014444 	.word	0x08014444
 80034f8:	20000000 	.word	0x20000000
 80034fc:	08002aad 	.word	0x08002aad

08003500 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	@ 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 800350c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	f107 0318 	add.w	r3, r7, #24
 8003516:	2224      	movs	r2, #36	@ 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f00a fefd 	bl	800e31a <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003520:	f107 0114 	add.w	r1, r7, #20
 8003524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003528:	2204      	movs	r2, #4
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f009 f838 	bl	800c5a0 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003530:	f107 0114 	add.w	r1, r7, #20
 8003534:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003538:	2204      	movs	r2, #4
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f009 f830 	bl	800c5a0 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 8003540:	2300      	movs	r3, #0
 8003542:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003546:	e018      	b.n	800357a <Menu_UART_Out+0x7a>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 8003548:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800354c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4413      	add	r3, r2
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f107 0014 	add.w	r0, r7, #20
 800355c:	460a      	mov	r2, r1
 800355e:	490c      	ldr	r1, [pc, #48]	@ (8003590 <Menu_UART_Out+0x90>)
 8003560:	f00a fe78 	bl	800e254 <siprintf>
		UART_Out(huart, tx_buff);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f812 	bl	8003594 <UART_Out>
	for(uint8_t i=0;i<size;i++)
 8003570:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003574:	3301      	adds	r3, #1
 8003576:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800357a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d8e1      	bhi.n	8003548 <Menu_UART_Out+0x48>
	}
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	3740      	adds	r7, #64	@ 0x40
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	080144a8 	.word	0x080144a8

08003594 <UART_Out>:

void UART_Out(UART_HandleTypeDef *huart, uint8_t* p)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	for(uint8_t j=0;p[j];j++) HAL_UART_Transmit(huart, (p+j), 1, 1000);
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e00b      	b.n	80035bc <UART_Out+0x28>
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	18d1      	adds	r1, r2, r3
 80035aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ae:	2201      	movs	r2, #1
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f008 fff5 	bl	800c5a0 <HAL_UART_Transmit>
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	3301      	adds	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ed      	bne.n	80035a4 <UART_Out+0x10>
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <UART_In>:

void UART_In(UART_HandleTypeDef *huart, uint8_t* p, uint8_t len)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b088      	sub	sp, #32
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	4613      	mov	r3, r2
 80035de:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff =0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buff[10]={"\r\n"};
 80035e4:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	f107 0318 	add.w	r3, r7, #24
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	809a      	strh	r2, [r3, #4]
	uint8_t i=0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 80035f8:	e020      	b.n	800363c <UART_In+0x6a>
	{
		while(1)
		{
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80035fa:	f107 011e 	add.w	r1, r7, #30
 80035fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003602:	2201      	movs	r2, #1
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f009 f869 	bl	800c6dc <HAL_UART_Receive>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <UART_In+0x42>
			{
				break;
			} else {
				__NOP();
 8003610:	bf00      	nop
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003612:	e7f2      	b.n	80035fa <UART_In+0x28>
				break;
 8003614:	bf00      	nop
			}
		}
		if(rx_buff=='\r') break;
 8003616:	7fbb      	ldrb	r3, [r7, #30]
 8003618:	2b0d      	cmp	r3, #13
 800361a:	d014      	beq.n	8003646 <UART_In+0x74>
		*(p+i) = rx_buff;
 800361c:	7ffb      	ldrb	r3, [r7, #31]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4413      	add	r3, r2
 8003622:	7fba      	ldrb	r2, [r7, #30]
 8003624:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, &rx_buff, 1, 1000);
 8003626:	f107 011e 	add.w	r1, r7, #30
 800362a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800362e:	2201      	movs	r2, #1
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f008 ffb5 	bl	800c5a0 <HAL_UART_Transmit>
		i++;
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	3301      	adds	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 800363c:	7ffa      	ldrb	r2, [r7, #31]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d3da      	bcc.n	80035fa <UART_In+0x28>
 8003644:	e000      	b.n	8003648 <UART_In+0x76>
		if(rx_buff=='\r') break;
 8003646:	bf00      	nop
	}
	*(p+i) = 0;
 8003648:	7ffb      	ldrb	r3, [r7, #31]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003652:	f107 0114 	add.w	r1, r7, #20
 8003656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800365a:	2204      	movs	r2, #4
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f008 ff9f 	bl	800c5a0 <HAL_UART_Transmit>
}
 8003662:	bf00      	nop
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <Frequency_To_Period+0x28>)
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	3b01      	subs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	07735940 	.word	0x07735940

08003698 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f007 fb0e 	bl	800acc4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f007 fa56 	bl	800ab68 <HAL_TIM_Base_Start_IT>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 80036cc:	4a0f      	ldr	r2, [pc, #60]	@ (800370c <Mototr_Poz_Inc+0x48>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 80036d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <Mototr_Poz_Inc+0x4c>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	490b      	ldr	r1, [pc, #44]	@ (8003710 <Mototr_Poz_Inc+0x4c>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 80036ea:	e008      	b.n	80036fe <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 80036ec:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <Mototr_Poz_Inc+0x4c>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	4906      	ldr	r1, [pc, #24]	@ (8003710 <Mototr_Poz_Inc+0x4c>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000010 	.word	0x20000010
 8003710:	2000021c 	.word	0x2000021c

08003714 <Ramp>:

void Ramp(uint32_t M)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	e0b1      	b.n	8003888 <Ramp+0x174>
	{
		if(i<M_move_l[M]/2)
 8003724:	4a60      	ldr	r2, [pc, #384]	@ (80038a8 <Ramp+0x194>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	0fda      	lsrs	r2, r3, #31
 800372e:	4413      	add	r3, r2
 8003730:	105b      	asrs	r3, r3, #1
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4293      	cmp	r3, r2
 8003738:	d246      	bcs.n	80037c8 <Ramp+0xb4>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 800373a:	4b5c      	ldr	r3, [pc, #368]	@ (80038ac <Ramp+0x198>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fef4 	bl	800052c <__aeabi_ui2d>
 8003744:	4604      	mov	r4, r0
 8003746:	460d      	mov	r5, r1
 8003748:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <Ramp+0x19c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc feed 	bl	800052c <__aeabi_ui2d>
 8003752:	4680      	mov	r8, r0
 8003754:	4689      	mov	r9, r1
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fee6 	bl	800052c <__aeabi_ui2d>
 8003760:	4682      	mov	sl, r0
 8003762:	468b      	mov	fp, r1
 8003764:	4b52      	ldr	r3, [pc, #328]	@ (80038b0 <Ramp+0x19c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fedf 	bl	800052c <__aeabi_ui2d>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4650      	mov	r0, sl
 8003774:	4659      	mov	r1, fp
 8003776:	f7fd f87d 	bl	8000874 <__aeabi_ddiv>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	ec43 2b17 	vmov	d7, r2, r3
 8003782:	eeb0 0a47 	vmov.f32	s0, s14
 8003786:	eef0 0a67 	vmov.f32	s1, s15
 800378a:	f00e f9ad 	bl	8011ae8 <sqrt>
 800378e:	ec53 2b10 	vmov	r2, r3, d0
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fc ff43 	bl	8000620 <__aeabi_dmul>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4620      	mov	r0, r4
 80037a0:	4629      	mov	r1, r5
 80037a2:	f7fc fd87 	bl	80002b4 <__adddf3>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f7fd fa0f 	bl	8000bd0 <__aeabi_d2uiz>
 80037b2:	4603      	mov	r3, r0
 80037b4:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 80037b6:	4b3f      	ldr	r3, [pc, #252]	@ (80038b4 <Ramp+0x1a0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d950      	bls.n	8003862 <Ramp+0x14e>
				tmp = f_MAX;
 80037c0:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <Ramp+0x1a0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e04c      	b.n	8003862 <Ramp+0x14e>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-1-i))/a_MAX);
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <Ramp+0x198>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fead 	bl	800052c <__aeabi_ui2d>
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	4b36      	ldr	r3, [pc, #216]	@ (80038b0 <Ramp+0x19c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc fea6 	bl	800052c <__aeabi_ui2d>
 80037e0:	4680      	mov	r8, r0
 80037e2:	4689      	mov	r9, r1
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <Ramp+0x194>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe98 	bl	800052c <__aeabi_ui2d>
 80037fc:	4682      	mov	sl, r0
 80037fe:	468b      	mov	fp, r1
 8003800:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <Ramp+0x19c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe91 	bl	800052c <__aeabi_ui2d>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4650      	mov	r0, sl
 8003810:	4659      	mov	r1, fp
 8003812:	f7fd f82f 	bl	8000874 <__aeabi_ddiv>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ec43 2b17 	vmov	d7, r2, r3
 800381e:	eeb0 0a47 	vmov.f32	s0, s14
 8003822:	eef0 0a67 	vmov.f32	s1, s15
 8003826:	f00e f95f 	bl	8011ae8 <sqrt>
 800382a:	ec53 2b10 	vmov	r2, r3, d0
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f7fc fef5 	bl	8000620 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fd39 	bl	80002b4 <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fd f9c1 	bl	8000bd0 <__aeabi_d2uiz>
 800384e:	4603      	mov	r3, r0
 8003850:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8003852:	4b18      	ldr	r3, [pc, #96]	@ (80038b4 <Ramp+0x1a0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d902      	bls.n	8003862 <Ramp+0x14e>
				tmp = f_MAX;
 800385c:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <Ramp+0x1a0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff02 	bl	800366c <Frequency_To_Period>
 8003868:	4603      	mov	r3, r0
 800386a:	b298      	uxth	r0, r3
 800386c:	4912      	ldr	r1, [pc, #72]	@ (80038b8 <Ramp+0x1a4>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003874:	fb03 f202 	mul.w	r2, r3, r2
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4413      	add	r3, r2
 800387c:	4602      	mov	r2, r0
 800387e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	4a07      	ldr	r2, [pc, #28]	@ (80038a8 <Ramp+0x194>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4293      	cmp	r3, r2
 8003896:	f4ff af45 	bcc.w	8003724 <Ramp+0x10>
	}
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a6:	bf00      	nop
 80038a8:	2003aba8 	.word	0x2003aba8
 80038ac:	20000008 	.word	0x20000008
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	20000004 	.word	0x20000004
 80038b8:	20000228 	.word	0x20000228

080038bc <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 80038c8:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <Ramp_Out+0x68>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	4915      	ldr	r1, [pc, #84]	@ (8003928 <Ramp_Out+0x6c>)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038d8:	4293      	cmp	r3, r2
 80038da:	d304      	bcc.n	80038e6 <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f007 fc12 	bl	800b108 <HAL_TIM_OC_Stop_IT>
	else
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
		M_move_poz[M]++;
	}
}
 80038e4:	e019      	b.n	800391a <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 80038e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003924 <Ramp_Out+0x68>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	490f      	ldr	r1, [pc, #60]	@ (800392c <Ramp_Out+0x70>)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80038f6:	fb00 f202 	mul.w	r2, r0, r2
 80038fa:	4413      	add	r3, r2
 80038fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003900:	4619      	mov	r1, r3
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fec8 	bl	8003698 <Period_Out>
		M_move_poz[M]++;
 8003908:	4a06      	ldr	r2, [pc, #24]	@ (8003924 <Ramp_Out+0x68>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	4904      	ldr	r1, [pc, #16]	@ (8003924 <Ramp_Out+0x68>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	2003abb4 	.word	0x2003abb4
 8003928:	2003aba8 	.word	0x2003aba8
 800392c:	20000228 	.word	0x20000228

08003930 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 800393e:	4b72      	ldr	r3, [pc, #456]	@ (8003b08 <move+0x1d8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a71      	ldr	r2, [pc, #452]	@ (8003b0c <move+0x1dc>)
 8003948:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 800394a:	4b6f      	ldr	r3, [pc, #444]	@ (8003b08 <move+0x1d8>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	4a6e      	ldr	r2, [pc, #440]	@ (8003b0c <move+0x1dc>)
 8003954:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 8003956:	4b6c      	ldr	r3, [pc, #432]	@ (8003b08 <move+0x1d8>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a6b      	ldr	r2, [pc, #428]	@ (8003b0c <move+0x1dc>)
 8003960:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 8003962:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <move+0x1dc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0d      	bge.n	8003986 <move+0x56>
	{
		M_move_l[0] = ~M_move_l[0]+1;
 800396a:	4b68      	ldr	r3, [pc, #416]	@ (8003b0c <move+0x1dc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	425b      	negs	r3, r3
 8003970:	4a66      	ldr	r2, [pc, #408]	@ (8003b0c <move+0x1dc>)
 8003972:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 8003974:	4b66      	ldr	r3, [pc, #408]	@ (8003b10 <move+0x1e0>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 800397a:	2201      	movs	r2, #1
 800397c:	2101      	movs	r1, #1
 800397e:	4865      	ldr	r0, [pc, #404]	@ (8003b14 <move+0x1e4>)
 8003980:	f001 ffc6 	bl	8005910 <HAL_GPIO_WritePin>
 8003984:	e007      	b.n	8003996 <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 8003986:	4b62      	ldr	r3, [pc, #392]	@ (8003b10 <move+0x1e0>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 800398c:	2200      	movs	r2, #0
 800398e:	2101      	movs	r1, #1
 8003990:	4860      	ldr	r0, [pc, #384]	@ (8003b14 <move+0x1e4>)
 8003992:	f001 ffbd 	bl	8005910 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 8003996:	4b5d      	ldr	r3, [pc, #372]	@ (8003b0c <move+0x1dc>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	da0d      	bge.n	80039ba <move+0x8a>
	{
		M_move_l[1] = ~M_move_l[1]+1;
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <move+0x1dc>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	425b      	negs	r3, r3
 80039a4:	4a59      	ldr	r2, [pc, #356]	@ (8003b0c <move+0x1dc>)
 80039a6:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 80039a8:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <move+0x1e0>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 80039ae:	2201      	movs	r2, #1
 80039b0:	2102      	movs	r1, #2
 80039b2:	4859      	ldr	r0, [pc, #356]	@ (8003b18 <move+0x1e8>)
 80039b4:	f001 ffac 	bl	8005910 <HAL_GPIO_WritePin>
 80039b8:	e007      	b.n	80039ca <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 80039ba:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <move+0x1e0>)
 80039bc:	2201      	movs	r2, #1
 80039be:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2102      	movs	r1, #2
 80039c4:	4854      	ldr	r0, [pc, #336]	@ (8003b18 <move+0x1e8>)
 80039c6:	f001 ffa3 	bl	8005910 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 80039ca:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <move+0x1dc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0d      	bge.n	80039ee <move+0xbe>
	{
		M_move_l[2] = ~M_move_l[2]+1;
 80039d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b0c <move+0x1dc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	425b      	negs	r3, r3
 80039d8:	4a4c      	ldr	r2, [pc, #304]	@ (8003b0c <move+0x1dc>)
 80039da:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 80039dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b10 <move+0x1e0>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 80039e2:	2201      	movs	r2, #1
 80039e4:	2101      	movs	r1, #1
 80039e6:	484c      	ldr	r0, [pc, #304]	@ (8003b18 <move+0x1e8>)
 80039e8:	f001 ff92 	bl	8005910 <HAL_GPIO_WritePin>
 80039ec:	e007      	b.n	80039fe <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 80039ee:	4b48      	ldr	r3, [pc, #288]	@ (8003b10 <move+0x1e0>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2101      	movs	r1, #1
 80039f8:	4847      	ldr	r0, [pc, #284]	@ (8003b18 <move+0x1e8>)
 80039fa:	f001 ff89 	bl	8005910 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7ff fe88 	bl	8003714 <Ramp>
	Ramp(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7ff fe85 	bl	8003714 <Ramp>
	Ramp(2);
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	f7ff fe82 	bl	8003714 <Ramp>

	M_move_poz[0] =0;
 8003a10:	4b42      	ldr	r3, [pc, #264]	@ (8003b1c <move+0x1ec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8003a16:	4b41      	ldr	r3, [pc, #260]	@ (8003b1c <move+0x1ec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b1c <move+0x1ec>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24

	Period_Out(tim1,Period_ramp[0][M_move_poz[0]]);
 8003a3a:	4b38      	ldr	r3, [pc, #224]	@ (8003b1c <move+0x1ec>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	@ (8003b20 <move+0x1f0>)
 8003a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a44:	4619      	mov	r1, r3
 8003a46:	6838      	ldr	r0, [r7, #0]
 8003a48:	f7ff fe26 	bl	8003698 <Period_Out>
	Period_Out(tim2,Period_ramp[1][M_move_poz[1]]);
 8003a4c:	4b33      	ldr	r3, [pc, #204]	@ (8003b1c <move+0x1ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a33      	ldr	r2, [pc, #204]	@ (8003b20 <move+0x1f0>)
 8003a52:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8003a56:	3340      	adds	r3, #64	@ 0x40
 8003a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	69f8      	ldr	r0, [r7, #28]
 8003a60:	f7ff fe1a 	bl	8003698 <Period_Out>
	Period_Out(tim3,Period_ramp[2][M_move_poz[2]]);
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <move+0x1ec>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <move+0x1f0>)
 8003a6a:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003a6e:	3380      	adds	r3, #128	@ 0x80
 8003a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a74:	4619      	mov	r1, r3
 8003a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a78:	f7ff fe0e 	bl	8003698 <Period_Out>

	if(M_move_l[0] >  M_move_poz[0])
 8003a7c:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <move+0x1dc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <move+0x1ec>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d903      	bls.n	8003a92 <move+0x162>
	HAL_TIM_OC_Start_IT(tim1,Channel1);
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f007 f9a9 	bl	800ade4 <HAL_TIM_OC_Start_IT>
	if(M_move_l[1] >  M_move_poz[1])
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <move+0x1dc>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <move+0x1ec>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d903      	bls.n	8003aa8 <move+0x178>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 8003aa0:	6a39      	ldr	r1, [r7, #32]
 8003aa2:	69f8      	ldr	r0, [r7, #28]
 8003aa4:	f007 f99e 	bl	800ade4 <HAL_TIM_OC_Start_IT>
	if(M_move_l[2] >  M_move_poz[2])
 8003aa8:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <move+0x1dc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <move+0x1ec>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <move+0x18e>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 8003ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003aba:	f007 f993 	bl	800ade4 <HAL_TIM_OC_Start_IT>

	M_move_poz[0]++;
 8003abe:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <move+0x1ec>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a15      	ldr	r2, [pc, #84]	@ (8003b1c <move+0x1ec>)
 8003ac6:	6013      	str	r3, [r2, #0]
	M_move_poz[1]++;
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <move+0x1ec>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <move+0x1ec>)
 8003ad0:	6053      	str	r3, [r2, #4]
	M_move_poz[2]++;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <move+0x1ec>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a10      	ldr	r2, [pc, #64]	@ (8003b1c <move+0x1ec>)
 8003ada:	6093      	str	r3, [r2, #8]

	while(!(theta0_target ==  M_poz[0]) || !(theta1_target ==  M_poz[1]) || !(theta2_target ==  M_poz[2]))
 8003adc:	bf00      	nop
 8003ade:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <move+0x1d8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1fa      	bne.n	8003ade <move+0x1ae>
 8003ae8:	4b07      	ldr	r3, [pc, #28]	@ (8003b08 <move+0x1d8>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d1f5      	bne.n	8003ade <move+0x1ae>
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <move+0x1d8>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1f0      	bne.n	8003ade <move+0x1ae>
	{
	}
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2000021c 	.word	0x2000021c
 8003b0c:	2003aba8 	.word	0x2003aba8
 8003b10:	20000010 	.word	0x20000010
 8003b14:	42020400 	.word	0x42020400
 8003b18:	42020800 	.word	0x42020800
 8003b1c:	2003abb4 	.word	0x2003abb4
 8003b20:	20000228 	.word	0x20000228

08003b24 <Set_f_MAX>:

void Set_f_MAX(uint32_t tmp)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	f_MAX = tmp;
 8003b2c:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <Set_f_MAX+0x1c>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6013      	str	r3, [r2, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000004 	.word	0x20000004

08003b44 <Set_f_MIN>:

void Set_f_MIN(uint32_t tmp)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	f_MIN = tmp;
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <Set_f_MIN+0x1c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000008 	.word	0x20000008

08003b64 <Set_a_MAX>:

void Set_a_MAX(uint32_t tmp)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	a_MAX = tmp;
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <Set_a_MAX+0x1c>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000000c 	.word	0x2000000c

08003b84 <Get_f_MAX>:

uint32_t Get_f_MAX(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
	return f_MAX;
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <Get_f_MAX+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000004 	.word	0x20000004

08003b9c <Get_f_MIN>:

uint32_t Get_f_MIN(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	return f_MIN;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <Get_f_MIN+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <Get_a_MAX>:

uint32_t Get_a_MAX(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
	return a_MAX;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <Get_a_MAX+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <M_Poz_0>:

uint32_t M_Poz_0(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
	return M_poz[0];
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <M_Poz_0+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	2000021c 	.word	0x2000021c

08003be4 <M_Poz_1>:

uint32_t M_Poz_1(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	return M_poz[1];
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <M_Poz_1+0x14>)
 8003bea:	685b      	ldr	r3, [r3, #4]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000021c 	.word	0x2000021c

08003bfc <M_Poz_2>:

uint32_t M_Poz_2(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
	return M_poz[2];
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <M_Poz_2+0x14>)
 8003c02:	689b      	ldr	r3, [r3, #8]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	2000021c 	.word	0x2000021c

08003c14 <Set_M_Poz_0>:

void Set_M_Poz_0(uint32_t tmp)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	M_poz[0] = tmp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <Set_M_Poz_0+0x1c>)
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	2000021c 	.word	0x2000021c

08003c34 <Set_M_Poz_1>:
void Set_M_Poz_1(uint32_t tmp)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	M_poz[1] = tmp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a04      	ldr	r2, [pc, #16]	@ (8003c50 <Set_M_Poz_1+0x1c>)
 8003c40:	6053      	str	r3, [r2, #4]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	2000021c 	.word	0x2000021c

08003c54 <Set_M_Poz_2>:
void Set_M_Poz_2(uint32_t tmp)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	M_poz[2] = tmp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a04      	ldr	r2, [pc, #16]	@ (8003c70 <Set_M_Poz_2+0x1c>)
 8003c60:	6093      	str	r3, [r2, #8]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000021c 	.word	0x2000021c
 8003c74:	00000000 	.word	0x00000000

08003c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b090      	sub	sp, #64	@ 0x40
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c7e:	f001 fa6b 	bl	8005158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c82:	f000 f853 	bl	8003d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c86:	f000 fc31 	bl	80044ec <MX_GPIO_Init>
  MX_UART5_Init();
 8003c8a:	f000 fb17 	bl	80042bc <MX_UART5_Init>
  MX_USART1_UART_Init();
 8003c8e:	f000 fb63 	bl	8004358 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8003c92:	f000 fbf9 	bl	8004488 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8003c96:	f000 f8bd 	bl	8003e14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003c9a:	f000 f907 	bl	8003eac <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8003c9e:	f000 fba7 	bl	80043f0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8003ca2:	f000 f959 	bl	8003f58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003ca6:	f000 f9cd 	bl	8004044 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003caa:	f000 fa41 	bl	8004130 <MX_TIM5_Init>
  MX_TIM15_Init();
 8003cae:	f000 fab5 	bl	800421c <MX_TIM15_Init>
  MX_ICACHE_Init();
 8003cb2:	f000 f8ef 	bl	8003e94 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 8003cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d20 <main+0xa8>)
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	6810      	ldr	r0, [r2, #0]
 8003cbc:	6851      	ldr	r1, [r2, #4]
 8003cbe:	c303      	stmia	r3!, {r0, r1}
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	2234      	movs	r2, #52	@ 0x34
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00a fb26 	bl	800e31a <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 8003cce:	f7fd fa5b 	bl	8001188 <Relay_0_Set>
  HAL_Delay(200);
 8003cd2:	20c8      	movs	r0, #200	@ 0xc8
 8003cd4:	f001 fafe 	bl	80052d4 <HAL_Delay>
  Relay_1_Set();
 8003cd8:	f7fd fa7a 	bl	80011d0 <Relay_1_Set>
  HAL_Delay(200);
 8003cdc:	20c8      	movs	r0, #200	@ 0xc8
 8003cde:	f001 faf9 	bl	80052d4 <HAL_Delay>
  Relay_0_Reset();
 8003ce2:	f7fd fa5d 	bl	80011a0 <Relay_0_Reset>
  HAL_Delay(200);
 8003ce6:	20c8      	movs	r0, #200	@ 0xc8
 8003ce8:	f001 faf4 	bl	80052d4 <HAL_Delay>
  Relay_1_Reset();
 8003cec:	f7fd fa7c 	bl	80011e8 <Relay_1_Reset>

  Zero_XYZ(0, 0, 0);
 8003cf0:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 8003d18 <main+0xa0>
 8003cf4:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8003d18 <main+0xa0>
 8003cf8:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8003d18 <main+0xa0>
 8003cfc:	f7fe f888 	bl	8001e10 <Zero_XYZ>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8003d00:	4808      	ldr	r0, [pc, #32]	@ (8003d24 <main+0xac>)
 8003d02:	f006 ff31 	bl	800ab68 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 8003d06:	4808      	ldr	r0, [pc, #32]	@ (8003d28 <main+0xb0>)
 8003d08:	f7fe fe7e 	bl	8002a08 <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 8003d0c:	4806      	ldr	r0, [pc, #24]	@ (8003d28 <main+0xb0>)
 8003d0e:	f7fe febf 	bl	8002a90 <Menu_UART_Update>
 8003d12:	e7fb      	b.n	8003d0c <main+0x94>
 8003d14:	f3af 8000 	nop.w
	...
 8003d20:	080144b8 	.word	0x080144b8
 8003d24:	2003ad88 	.word	0x2003ad88
 8003d28:	2003ae68 	.word	0x2003ae68

08003d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b09c      	sub	sp, #112	@ 0x70
 8003d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d32:	f107 0320 	add.w	r3, r7, #32
 8003d36:	2250      	movs	r2, #80	@ 0x50
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00a faed 	bl	800e31a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
 8003d50:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003d52:	4b2e      	ldr	r3, [pc, #184]	@ (8003e0c <SystemClock_Config+0xe0>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <SystemClock_Config+0xe0>)
 8003d58:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d5c:	6113      	str	r3, [r2, #16]
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <SystemClock_Config+0xe0>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003d6a:	bf00      	nop
 8003d6c:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <SystemClock_Config+0xe0>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d1f9      	bne.n	8003d6c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003d78:	2321      	movs	r3, #33	@ 0x21
 8003d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003d90:	2306      	movs	r3, #6
 8003d92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8003d94:	237d      	movs	r3, #125	@ 0x7d
 8003d96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8003da4:	2308      	movs	r3, #8
 8003da6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db0:	f107 0320 	add.w	r3, r7, #32
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 f809 	bl	8005dcc <HAL_RCC_OscConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003dc0:	f000 fc4c 	bl	800465c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dc4:	231f      	movs	r3, #31
 8003dc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dd0:	2350      	movs	r3, #80	@ 0x50
 8003dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003dd4:	2350      	movs	r3, #80	@ 0x50
 8003dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 8003dd8:	2350      	movs	r3, #80	@ 0x50
 8003dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ddc:	f107 0308 	add.w	r3, r7, #8
 8003de0:	2105      	movs	r1, #5
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 fc2a 	bl	800663c <HAL_RCC_ClockConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003dee:	f000 fc35 	bl	800465c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8003df2:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <SystemClock_Config+0xe4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003dfa:	4a05      	ldr	r2, [pc, #20]	@ (8003e10 <SystemClock_Config+0xe4>)
 8003dfc:	f043 0320 	orr.w	r3, r3, #32
 8003e00:	6013      	str	r3, [r2, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3770      	adds	r7, #112	@ 0x70
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	44020800 	.word	0x44020800
 8003e10:	40022000 	.word	0x40022000

08003e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e8c <MX_I2C1_Init+0x78>)
 8003e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e20:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <MX_I2C1_Init+0x7c>)
 8003e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003e24:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e2a:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e30:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e3c:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e42:	4b11      	ldr	r3, [pc, #68]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e4e:	480e      	ldr	r0, [pc, #56]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e50:	f001 fd76 	bl	8005940 <HAL_I2C_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003e5a:	f000 fbff 	bl	800465c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4809      	ldr	r0, [pc, #36]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e62:	f001 fe08 	bl	8005a76 <HAL_I2CEx_ConfigAnalogFilter>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003e6c:	f000 fbf6 	bl	800465c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e70:	2100      	movs	r1, #0
 8003e72:	4805      	ldr	r0, [pc, #20]	@ (8003e88 <MX_I2C1_Init+0x74>)
 8003e74:	f001 fe4a 	bl	8005b0c <HAL_I2CEx_ConfigDigitalFilter>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003e7e:	f000 fbed 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2003abc0 	.word	0x2003abc0
 8003e8c:	40005400 	.word	0x40005400
 8003e90:	2050517a 	.word	0x2050517a

08003e94 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003e98:	f001 fe84 	bl	8005ba4 <HAL_ICACHE_Enable>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8003ea2:	f000 fbdb 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003eb0:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003eb2:	4a28      	ldr	r2, [pc, #160]	@ (8003f54 <MX_SPI1_Init+0xa8>)
 8003eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eb6:	4b26      	ldr	r3, [pc, #152]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003eb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003ec4:	4b22      	ldr	r3, [pc, #136]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ec6:	220f      	movs	r2, #15
 8003ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eca:	4b21      	ldr	r3, [pc, #132]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ed2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ed6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003eda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ede:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ee2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f18:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003f24:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f3c:	4804      	ldr	r0, [pc, #16]	@ (8003f50 <MX_SPI1_Init+0xa4>)
 8003f3e:	f006 f93d 	bl	800a1bc <HAL_SPI_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003f48:	f000 fb88 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2003ac14 	.word	0x2003ac14
 8003f54:	40013000 	.word	0x40013000

08003f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	@ 0x38
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6c:	f107 031c 	add.w	r3, r7, #28
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f78:	463b      	mov	r3, r7
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	615a      	str	r2, [r3, #20]
 8003f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003f8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 8003f92:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003f94:	22f9      	movs	r2, #249	@ 0xf9
 8003f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f98:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa4:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003faa:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fb0:	4823      	ldr	r0, [pc, #140]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fb2:	f006 fd82 	bl	800aaba <HAL_TIM_Base_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003fbc:	f000 fb4e 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	481c      	ldr	r0, [pc, #112]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fce:	f007 fb4f 	bl	800b670 <HAL_TIM_ConfigClockSource>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003fd8:	f000 fb40 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003fdc:	4818      	ldr	r0, [pc, #96]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003fde:	f006 fea0 	bl	800ad22 <HAL_TIM_OC_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003fe8:	f000 fb38 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4811      	ldr	r0, [pc, #68]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8003ffc:	f008 f96a 	bl	800c2d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004006:	f000 fb29 	bl	800465c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800400a:	2330      	movs	r3, #48	@ 0x30
 800400c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800401a:	463b      	mov	r3, r7
 800401c:	2204      	movs	r2, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4807      	ldr	r0, [pc, #28]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8004022:	f007 faab 	bl	800b57c <HAL_TIM_OC_ConfigChannel>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800402c:	f000 fb16 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004030:	4803      	ldr	r0, [pc, #12]	@ (8004040 <MX_TIM2_Init+0xe8>)
 8004032:	f000 fc8b 	bl	800494c <HAL_TIM_MspPostInit>

}
 8004036:	bf00      	nop
 8004038:	3738      	adds	r7, #56	@ 0x38
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2003aca4 	.word	0x2003aca4

08004044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08e      	sub	sp, #56	@ 0x38
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800404a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004064:	463b      	mov	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	615a      	str	r2, [r3, #20]
 8004074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004076:	4b2c      	ldr	r3, [pc, #176]	@ (8004128 <MX_TIM3_Init+0xe4>)
 8004078:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <MX_TIM3_Init+0xe8>)
 800407a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 800407c:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <MX_TIM3_Init+0xe4>)
 800407e:	22f9      	movs	r2, #249	@ 0xf9
 8004080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004082:	4b29      	ldr	r3, [pc, #164]	@ (8004128 <MX_TIM3_Init+0xe4>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <MX_TIM3_Init+0xe4>)
 800408a:	2201      	movs	r2, #1
 800408c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408e:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <MX_TIM3_Init+0xe4>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <MX_TIM3_Init+0xe4>)
 8004096:	2200      	movs	r2, #0
 8004098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800409a:	4823      	ldr	r0, [pc, #140]	@ (8004128 <MX_TIM3_Init+0xe4>)
 800409c:	f006 fd0d 	bl	800aaba <HAL_TIM_Base_Init>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80040a6:	f000 fad9 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040b4:	4619      	mov	r1, r3
 80040b6:	481c      	ldr	r0, [pc, #112]	@ (8004128 <MX_TIM3_Init+0xe4>)
 80040b8:	f007 fada 	bl	800b670 <HAL_TIM_ConfigClockSource>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80040c2:	f000 facb 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80040c6:	4818      	ldr	r0, [pc, #96]	@ (8004128 <MX_TIM3_Init+0xe4>)
 80040c8:	f006 fe2b 	bl	800ad22 <HAL_TIM_OC_Init>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80040d2:	f000 fac3 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040de:	f107 031c 	add.w	r3, r7, #28
 80040e2:	4619      	mov	r1, r3
 80040e4:	4810      	ldr	r0, [pc, #64]	@ (8004128 <MX_TIM3_Init+0xe4>)
 80040e6:	f008 f8f5 	bl	800c2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80040f0:	f000 fab4 	bl	800465c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80040f4:	2330      	movs	r3, #48	@ 0x30
 80040f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	220c      	movs	r2, #12
 8004108:	4619      	mov	r1, r3
 800410a:	4807      	ldr	r0, [pc, #28]	@ (8004128 <MX_TIM3_Init+0xe4>)
 800410c:	f007 fa36 	bl	800b57c <HAL_TIM_OC_ConfigChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004116:	f000 faa1 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800411a:	4803      	ldr	r0, [pc, #12]	@ (8004128 <MX_TIM3_Init+0xe4>)
 800411c:	f000 fc16 	bl	800494c <HAL_TIM_MspPostInit>

}
 8004120:	bf00      	nop
 8004122:	3738      	adds	r7, #56	@ 0x38
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2003acf0 	.word	0x2003acf0
 800412c:	40000400 	.word	0x40000400

08004130 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	@ 0x38
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004150:	463b      	mov	r3, r7
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	615a      	str	r2, [r3, #20]
 8004160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004162:	4b2c      	ldr	r3, [pc, #176]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004164:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <MX_TIM5_Init+0xe8>)
 8004166:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8004168:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <MX_TIM5_Init+0xe4>)
 800416a:	22f9      	movs	r2, #249	@ 0xf9
 800416c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416e:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 8004174:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004176:	2201      	movs	r2, #1
 8004178:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417a:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <MX_TIM5_Init+0xe4>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004180:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004182:	2200      	movs	r2, #0
 8004184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004186:	4823      	ldr	r0, [pc, #140]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004188:	f006 fc97 	bl	800aaba <HAL_TIM_Base_Init>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8004192:	f000 fa63 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800419c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041a0:	4619      	mov	r1, r3
 80041a2:	481c      	ldr	r0, [pc, #112]	@ (8004214 <MX_TIM5_Init+0xe4>)
 80041a4:	f007 fa64 	bl	800b670 <HAL_TIM_ConfigClockSource>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80041ae:	f000 fa55 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80041b2:	4818      	ldr	r0, [pc, #96]	@ (8004214 <MX_TIM5_Init+0xe4>)
 80041b4:	f006 fdb5 	bl	800ad22 <HAL_TIM_OC_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80041be:	f000 fa4d 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80041ca:	f107 031c 	add.w	r3, r7, #28
 80041ce:	4619      	mov	r1, r3
 80041d0:	4810      	ldr	r0, [pc, #64]	@ (8004214 <MX_TIM5_Init+0xe4>)
 80041d2:	f008 f87f 	bl	800c2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80041dc:	f000 fa3e 	bl	800465c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80041e0:	2330      	movs	r3, #48	@ 0x30
 80041e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041f0:	463b      	mov	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	4619      	mov	r1, r3
 80041f6:	4807      	ldr	r0, [pc, #28]	@ (8004214 <MX_TIM5_Init+0xe4>)
 80041f8:	f007 f9c0 	bl	800b57c <HAL_TIM_OC_ConfigChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8004202:	f000 fa2b 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004206:	4803      	ldr	r0, [pc, #12]	@ (8004214 <MX_TIM5_Init+0xe4>)
 8004208:	f000 fba0 	bl	800494c <HAL_TIM_MspPostInit>

}
 800420c:	bf00      	nop
 800420e:	3738      	adds	r7, #56	@ 0x38
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2003ad3c 	.word	0x2003ad3c
 8004218:	40000c00 	.word	0x40000c00

0800421c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004222:	f107 0310 	add.w	r3, r7, #16
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800423a:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <MX_TIM15_Init+0x98>)
 800423c:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <MX_TIM15_Init+0x9c>)
 800423e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 8004240:	4b1c      	ldr	r3, [pc, #112]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004242:	220a      	movs	r2, #10
 8004244:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004246:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 800424c:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <MX_TIM15_Init+0x98>)
 800424e:	227c      	movs	r2, #124	@ 0x7c
 8004250:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004258:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <MX_TIM15_Init+0x98>)
 800425a:	2200      	movs	r2, #0
 800425c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004264:	4813      	ldr	r0, [pc, #76]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004266:	f006 fc28 	bl	800aaba <HAL_TIM_Base_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8004270:	f000 f9f4 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800427a:	f107 0310 	add.w	r3, r7, #16
 800427e:	4619      	mov	r1, r3
 8004280:	480c      	ldr	r0, [pc, #48]	@ (80042b4 <MX_TIM15_Init+0x98>)
 8004282:	f007 f9f5 	bl	800b670 <HAL_TIM_ConfigClockSource>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800428c:	f000 f9e6 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4805      	ldr	r0, [pc, #20]	@ (80042b4 <MX_TIM15_Init+0x98>)
 800429e:	f008 f819 	bl	800c2d4 <HAL_TIMEx_MasterConfigSynchronization>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80042a8:	f000 f9d8 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80042ac:	bf00      	nop
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2003ad88 	.word	0x2003ad88
 80042b8:	40014000 	.word	0x40014000

080042bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <MX_UART5_Init+0x94>)
 80042c2:	4a24      	ldr	r2, [pc, #144]	@ (8004354 <MX_UART5_Init+0x98>)
 80042c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042c6:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <MX_UART5_Init+0x94>)
 80042c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <MX_UART5_Init+0x94>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <MX_UART5_Init+0x94>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80042da:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <MX_UART5_Init+0x94>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <MX_UART5_Init+0x94>)
 80042e2:	220c      	movs	r2, #12
 80042e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <MX_UART5_Init+0x94>)
 80042e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80042ec:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ee:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <MX_UART5_Init+0x94>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f4:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <MX_UART5_Init+0x94>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <MX_UART5_Init+0x94>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <MX_UART5_Init+0x94>)
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004306:	4812      	ldr	r0, [pc, #72]	@ (8004350 <MX_UART5_Init+0x94>)
 8004308:	f008 f8fa 	bl	800c500 <HAL_UART_Init>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8004312:	f000 f9a3 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004316:	2100      	movs	r1, #0
 8004318:	480d      	ldr	r0, [pc, #52]	@ (8004350 <MX_UART5_Init+0x94>)
 800431a:	f008 febd 	bl	800d098 <HAL_UARTEx_SetTxFifoThreshold>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 8004324:	f000 f99a 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004328:	2100      	movs	r1, #0
 800432a:	4809      	ldr	r0, [pc, #36]	@ (8004350 <MX_UART5_Init+0x94>)
 800432c:	f008 fef2 	bl	800d114 <HAL_UARTEx_SetRxFifoThreshold>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 8004336:	f000 f991 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800433a:	4805      	ldr	r0, [pc, #20]	@ (8004350 <MX_UART5_Init+0x94>)
 800433c:	f008 fe73 	bl	800d026 <HAL_UARTEx_DisableFifoMode>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 8004346:	f000 f989 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2003add4 	.word	0x2003add4
 8004354:	40005000 	.word	0x40005000

08004358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800435c:	4b22      	ldr	r3, [pc, #136]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <MX_USART1_UART_Init+0x94>)
 8004360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800436a:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 800436c:	2200      	movs	r2, #0
 800436e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004372:	2200      	movs	r2, #0
 8004374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004376:	4b1c      	ldr	r3, [pc, #112]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800437c:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 800437e:	220c      	movs	r2, #12
 8004380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004382:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004384:	2200      	movs	r2, #0
 8004386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004388:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 800438a:	2200      	movs	r2, #0
 800438c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800438e:	4b16      	ldr	r3, [pc, #88]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004390:	2200      	movs	r2, #0
 8004392:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 8004396:	2200      	movs	r2, #0
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800439a:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 800439c:	2200      	movs	r2, #0
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043a0:	4811      	ldr	r0, [pc, #68]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 80043a2:	f008 f8ad 	bl	800c500 <HAL_UART_Init>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80043ac:	f000 f956 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043b0:	2100      	movs	r1, #0
 80043b2:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 80043b4:	f008 fe70 	bl	800d098 <HAL_UARTEx_SetTxFifoThreshold>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80043be:	f000 f94d 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043c2:	2100      	movs	r1, #0
 80043c4:	4808      	ldr	r0, [pc, #32]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 80043c6:	f008 fea5 	bl	800d114 <HAL_UARTEx_SetRxFifoThreshold>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80043d0:	f000 f944 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80043d4:	4804      	ldr	r0, [pc, #16]	@ (80043e8 <MX_USART1_UART_Init+0x90>)
 80043d6:	f008 fe26 	bl	800d026 <HAL_UARTEx_DisableFifoMode>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80043e0:	f000 f93c 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	2003ae68 	.word	0x2003ae68
 80043ec:	40013800 	.word	0x40013800

080043f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80043f4:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 80043f6:	4a23      	ldr	r2, [pc, #140]	@ (8004484 <MX_USART6_UART_Init+0x94>)
 80043f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80043fa:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 80043fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004400:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004402:	4b1f      	ldr	r3, [pc, #124]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004408:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800440a:	2200      	movs	r2, #0
 800440c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004414:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004416:	220c      	movs	r2, #12
 8004418:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800441a:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800441c:	2200      	movs	r2, #0
 800441e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004420:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004422:	2200      	movs	r2, #0
 8004424:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004426:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004428:	2200      	movs	r2, #0
 800442a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800442e:	2200      	movs	r2, #0
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004432:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 8004434:	2200      	movs	r2, #0
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004438:	4811      	ldr	r0, [pc, #68]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800443a:	f008 f861 	bl	800c500 <HAL_UART_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004444:	f000 f90a 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004448:	2100      	movs	r1, #0
 800444a:	480d      	ldr	r0, [pc, #52]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800444c:	f008 fe24 	bl	800d098 <HAL_UARTEx_SetTxFifoThreshold>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004456:	f000 f901 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800445a:	2100      	movs	r1, #0
 800445c:	4808      	ldr	r0, [pc, #32]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800445e:	f008 fe59 	bl	800d114 <HAL_UARTEx_SetRxFifoThreshold>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004468:	f000 f8f8 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800446c:	4804      	ldr	r0, [pc, #16]	@ (8004480 <MX_USART6_UART_Init+0x90>)
 800446e:	f008 fdda 	bl	800d026 <HAL_UARTEx_DisableFifoMode>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004478:	f000 f8f0 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2003aefc 	.word	0x2003aefc
 8004484:	40006400 	.word	0x40006400

08004488 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800448c:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <MX_USB_PCD_Init+0x60>)
 8004490:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8004492:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 8004494:	2208      	movs	r2, #8
 8004496:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 800449a:	2202      	movs	r2, #2
 800449c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044a0:	2202      	movs	r2, #2
 80044a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80044b0:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80044bc:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044be:	2200      	movs	r2, #0
 80044c0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80044c2:	4b08      	ldr	r3, [pc, #32]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80044ce:	4805      	ldr	r0, [pc, #20]	@ (80044e4 <MX_USB_PCD_Init+0x5c>)
 80044d0:	f001 fb78 	bl	8005bc4 <HAL_PCD_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80044da:	f000 f8bf 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	2003af90 	.word	0x2003af90
 80044e8:	40016000 	.word	0x40016000

080044ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	@ 0x28
 80044f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004502:	4b51      	ldr	r3, [pc, #324]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004508:	4a4f      	ldr	r2, [pc, #316]	@ (8004648 <MX_GPIO_Init+0x15c>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004512:	4b4d      	ldr	r3, [pc, #308]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004520:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004526:	4a48      	ldr	r2, [pc, #288]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004530:	4b45      	ldr	r3, [pc, #276]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800453e:	4b42      	ldr	r3, [pc, #264]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004544:	4a40      	ldr	r2, [pc, #256]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800454e:	4b3e      	ldr	r3, [pc, #248]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800455c:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <MX_GPIO_Init+0x15c>)
 800455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004562:	4a39      	ldr	r2, [pc, #228]	@ (8004648 <MX_GPIO_Init+0x15c>)
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800456c:	4b36      	ldr	r3, [pc, #216]	@ (8004648 <MX_GPIO_Init+0x15c>)
 800456e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800457a:	2200      	movs	r2, #0
 800457c:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8004580:	4832      	ldr	r0, [pc, #200]	@ (800464c <MX_GPIO_Init+0x160>)
 8004582:	f001 f9c5 	bl	8005910 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8004586:	2200      	movs	r2, #0
 8004588:	f240 1101 	movw	r1, #257	@ 0x101
 800458c:	4830      	ldr	r0, [pc, #192]	@ (8004650 <MX_GPIO_Init+0x164>)
 800458e:	f001 f9bf 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 8004592:	2201      	movs	r2, #1
 8004594:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004598:	482d      	ldr	r0, [pc, #180]	@ (8004650 <MX_GPIO_Init+0x164>)
 800459a:	f001 f9b9 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800459e:	2201      	movs	r2, #1
 80045a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045a4:	482b      	ldr	r0, [pc, #172]	@ (8004654 <MX_GPIO_Init+0x168>)
 80045a6:	f001 f9b3 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80045aa:	f24a 0313 	movw	r3, #40979	@ 0xa013
 80045ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b0:	2301      	movs	r3, #1
 80045b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	2300      	movs	r3, #0
 80045ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	4822      	ldr	r0, [pc, #136]	@ (800464c <MX_GPIO_Init+0x160>)
 80045c4:	f001 f83a 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ce:	4b22      	ldr	r3, [pc, #136]	@ (8004658 <MX_GPIO_Init+0x16c>)
 80045d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d6:	f107 0314 	add.w	r3, r7, #20
 80045da:	4619      	mov	r1, r3
 80045dc:	481b      	ldr	r0, [pc, #108]	@ (800464c <MX_GPIO_Init+0x160>)
 80045de:	f001 f82d 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045e2:	2304      	movs	r3, #4
 80045e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045f2:	2302      	movs	r3, #2
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4813      	ldr	r0, [pc, #76]	@ (800464c <MX_GPIO_Init+0x160>)
 80045fe:	f001 f81d 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 8004602:	f240 5321 	movw	r3, #1313	@ 0x521
 8004606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004608:	2301      	movs	r3, #1
 800460a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004610:	2300      	movs	r3, #0
 8004612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	4619      	mov	r1, r3
 800461a:	480d      	ldr	r0, [pc, #52]	@ (8004650 <MX_GPIO_Init+0x164>)
 800461c:	f001 f80e 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004626:	2301      	movs	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	4619      	mov	r1, r3
 8004638:	4806      	ldr	r0, [pc, #24]	@ (8004654 <MX_GPIO_Init+0x168>)
 800463a:	f000 ffff 	bl	800563c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800463e:	bf00      	nop
 8004640:	3728      	adds	r7, #40	@ 0x28
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	44020c00 	.word	0x44020c00
 800464c:	42020800 	.word	0x42020800
 8004650:	42020400 	.word	0x42020400
 8004654:	42020000 	.word	0x42020000
 8004658:	10110000 	.word	0x10110000

0800465c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004660:	b672      	cpsid	i
}
 8004662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <Error_Handler+0x8>

08004668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0be      	sub	sp, #248	@ 0xf8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	22d0      	movs	r2, #208	@ 0xd0
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f009 fe3e 	bl	800e31a <memset>
  if(hi2c->Instance==I2C1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a26      	ldr	r2, [pc, #152]	@ (800473c <HAL_I2C_MspInit+0xc4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d145      	bne.n	8004734 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80046a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046ba:	f107 0310 	add.w	r3, r7, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 fafe 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80046ca:	f7ff ffc7 	bl	800465c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 80046d6:	f043 0302 	orr.w	r3, r3, #2
 80046da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046ec:	23c0      	movs	r3, #192	@ 0xc0
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046f2:	2312      	movs	r3, #18
 80046f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004704:	2304      	movs	r3, #4
 8004706:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800470a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800470e:	4619      	mov	r1, r3
 8004710:	480c      	ldr	r0, [pc, #48]	@ (8004744 <HAL_I2C_MspInit+0xcc>)
 8004712:	f000 ff93 	bl	800563c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 8004718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800471c:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 800471e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004722:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <HAL_I2C_MspInit+0xc8>)
 8004728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800472c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004734:	bf00      	nop
 8004736:	37f8      	adds	r7, #248	@ 0xf8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40005400 	.word	0x40005400
 8004740:	44020c00 	.word	0x44020c00
 8004744:	42020400 	.word	0x42020400

08004748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0be      	sub	sp, #248	@ 0xf8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004760:	f107 0310 	add.w	r3, r7, #16
 8004764:	22d0      	movs	r2, #208	@ 0xd0
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f009 fdd6 	bl	800e31a <memset>
  if(hspi->Instance==SPI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a31      	ldr	r2, [pc, #196]	@ (8004838 <HAL_SPI_MspInit+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d15a      	bne.n	800482e <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004778:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800478a:	f107 0310 	add.w	r3, r7, #16
 800478e:	4618      	mov	r0, r3
 8004790:	f002 fa96 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800479a:	f7ff ff5f 	bl	800465c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800479e:	4b27      	ldr	r3, [pc, #156]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047a4:	4a25      	ldr	r2, [pc, #148]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047aa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047bc:	4b1f      	ldr	r3, [pc, #124]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c2:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047cc:	4b1b      	ldr	r3, [pc, #108]	@ (800483c <HAL_SPI_MspInit+0xf4>)
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80047da:	23a0      	movs	r3, #160	@ 0xa0
 80047dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	2302      	movs	r3, #2
 80047e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047f2:	2305      	movs	r3, #5
 80047f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4810      	ldr	r0, [pc, #64]	@ (8004840 <HAL_SPI_MspInit+0xf8>)
 8004800:	f000 ff1c 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004804:	2340      	movs	r3, #64	@ 0x40
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004810:	2301      	movs	r3, #1
 8004812:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800481c:	2305      	movs	r3, #5
 800481e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004822:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004826:	4619      	mov	r1, r3
 8004828:	4805      	ldr	r0, [pc, #20]	@ (8004840 <HAL_SPI_MspInit+0xf8>)
 800482a:	f000 ff07 	bl	800563c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800482e:	bf00      	nop
 8004830:	37f8      	adds	r7, #248	@ 0xf8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40013000 	.word	0x40013000
 800483c:	44020c00 	.word	0x44020c00
 8004840:	42020000 	.word	0x42020000

08004844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d117      	bne.n	8004886 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004856:	4b39      	ldr	r3, [pc, #228]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800485c:	4a37      	ldr	r2, [pc, #220]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004874:	2200      	movs	r2, #0
 8004876:	2100      	movs	r1, #0
 8004878:	202d      	movs	r0, #45	@ 0x2d
 800487a:	f000 fe07 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800487e:	202d      	movs	r0, #45	@ 0x2d
 8004880:	f000 fe1e 	bl	80054c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004884:	e055      	b.n	8004932 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_TIM_Base_MspInit+0xfc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d117      	bne.n	80048c0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	4a29      	ldr	r2, [pc, #164]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048a0:	4b26      	ldr	r3, [pc, #152]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 80048a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	202e      	movs	r0, #46	@ 0x2e
 80048b4:	f000 fdea 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048b8:	202e      	movs	r0, #46	@ 0x2e
 80048ba:	f000 fe01 	bl	80054c0 <HAL_NVIC_EnableIRQ>
}
 80048be:	e038      	b.n	8004932 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <HAL_TIM_Base_MspInit+0x100>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d117      	bne.n	80048fa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048ca:	4b1c      	ldr	r3, [pc, #112]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 80048cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d0:	4a1a      	ldr	r2, [pc, #104]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 80048d2:	f043 0308 	orr.w	r3, r3, #8
 80048d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048da:	4b18      	ldr	r3, [pc, #96]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 80048dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80048e8:	2200      	movs	r2, #0
 80048ea:	2100      	movs	r1, #0
 80048ec:	2030      	movs	r0, #48	@ 0x30
 80048ee:	f000 fdcd 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80048f2:	2030      	movs	r0, #48	@ 0x30
 80048f4:	f000 fde4 	bl	80054c0 <HAL_NVIC_EnableIRQ>
}
 80048f8:	e01b      	b.n	8004932 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a12      	ldr	r2, [pc, #72]	@ (8004948 <HAL_TIM_Base_MspInit+0x104>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d116      	bne.n	8004932 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004904:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800490a:	4a0c      	ldr	r2, [pc, #48]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_TIM_Base_MspInit+0xf8>)
 8004916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800491a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004922:	2200      	movs	r2, #0
 8004924:	2100      	movs	r1, #0
 8004926:	2047      	movs	r0, #71	@ 0x47
 8004928:	f000 fdb0 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800492c:	2047      	movs	r0, #71	@ 0x47
 800492e:	f000 fdc7 	bl	80054c0 <HAL_NVIC_EnableIRQ>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	44020c00 	.word	0x44020c00
 8004940:	40000400 	.word	0x40000400
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40014000 	.word	0x40014000

0800494c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496c:	d11f      	bne.n	80049ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b36      	ldr	r3, [pc, #216]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004974:	4a34      	ldr	r2, [pc, #208]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800497e:	4b32      	ldr	r3, [pc, #200]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800498c:	2302      	movs	r3, #2
 800498e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	4829      	ldr	r0, [pc, #164]	@ (8004a4c <HAL_TIM_MspPostInit+0x100>)
 80049a8:	f000 fe48 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80049ac:	e048      	b.n	8004a40 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a27      	ldr	r2, [pc, #156]	@ (8004a50 <HAL_TIM_MspPostInit+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d11f      	bne.n	80049f8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b8:	4b23      	ldr	r3, [pc, #140]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049be:	4a22      	ldr	r2, [pc, #136]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80049d6:	2302      	movs	r3, #2
 80049d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e2:	2300      	movs	r3, #0
 80049e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049e6:	2302      	movs	r3, #2
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4619      	mov	r1, r3
 80049f0:	4818      	ldr	r0, [pc, #96]	@ (8004a54 <HAL_TIM_MspPostInit+0x108>)
 80049f2:	f000 fe23 	bl	800563c <HAL_GPIO_Init>
}
 80049f6:	e023      	b.n	8004a40 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <HAL_TIM_MspPostInit+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d11e      	bne.n	8004a40 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a02:	4b11      	ldr	r3, [pc, #68]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a08:	4a0f      	ldr	r2, [pc, #60]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <HAL_TIM_MspPostInit+0xfc>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a24:	2302      	movs	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a30:	2302      	movs	r3, #2
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4804      	ldr	r0, [pc, #16]	@ (8004a4c <HAL_TIM_MspPostInit+0x100>)
 8004a3c:	f000 fdfe 	bl	800563c <HAL_GPIO_Init>
}
 8004a40:	bf00      	nop
 8004a42:	3728      	adds	r7, #40	@ 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	44020c00 	.word	0x44020c00
 8004a4c:	42020000 	.word	0x42020000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	42020400 	.word	0x42020400
 8004a58:	40000c00 	.word	0x40000c00

08004a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0c4      	sub	sp, #272	@ 0x110
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a80:	22d0      	movs	r2, #208	@ 0xd0
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f009 fc48 	bl	800e31a <memset>
  if(huart->Instance==UART5)
 8004a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a92      	ldr	r2, [pc, #584]	@ (8004ce0 <HAL_UART_MspInit+0x284>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d16c      	bne.n	8004b76 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004a9c:	f04f 0210 	mov.w	r2, #16
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 f904 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8004abe:	f7ff fdcd 	bl	800465c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004ac2:	4b88      	ldr	r3, [pc, #544]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ac8:	4a86      	ldr	r2, [pc, #536]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ace:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ad2:	4b84      	ldr	r3, [pc, #528]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae0:	4b80      	ldr	r3, [pc, #512]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004af0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afe:	4b79      	ldr	r3, [pc, #484]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b04:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b0e:	4b75      	ldr	r3, [pc, #468]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004b1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004b20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	2302      	movs	r3, #2
 8004b26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004b36:	230e      	movs	r3, #14
 8004b38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b3c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004b40:	4619      	mov	r1, r3
 8004b42:	4869      	ldr	r0, [pc, #420]	@ (8004ce8 <HAL_UART_MspInit+0x28c>)
 8004b44:	f000 fd7a 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b50:	2302      	movs	r3, #2
 8004b52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004b62:	2308      	movs	r3, #8
 8004b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b68:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	485f      	ldr	r0, [pc, #380]	@ (8004cec <HAL_UART_MspInit+0x290>)
 8004b70:	f000 fd64 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004b74:	e0af      	b.n	8004cd6 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8004b76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf0 <HAL_UART_MspInit+0x294>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d147      	bne.n	8004c18 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b88:	f04f 0201 	mov.w	r2, #1
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 f88e 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_UART_MspInit+0x152>
      Error_Handler();
 8004baa:	f7ff fd57 	bl	800465c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bae:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bba:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004bbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bcc:	4b45      	ldr	r3, [pc, #276]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd2:	4a44      	ldr	r2, [pc, #272]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bdc:	4b41      	ldr	r3, [pc, #260]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004bea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004bee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004c04:	2304      	movs	r3, #4
 8004c06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c0a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4835      	ldr	r0, [pc, #212]	@ (8004ce8 <HAL_UART_MspInit+0x28c>)
 8004c12:	f000 fd13 	bl	800563c <HAL_GPIO_Init>
}
 8004c16:	e05e      	b.n	8004cd6 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8004c18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a33      	ldr	r2, [pc, #204]	@ (8004cf4 <HAL_UART_MspInit+0x298>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d155      	bne.n	8004cd6 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004c2a:	f04f 0220 	mov.w	r2, #32
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 f83d 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8004c4c:	f7ff fd06 	bl	800465c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c50:	4b24      	ldr	r3, [pc, #144]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c56:	4a23      	ldr	r2, [pc, #140]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c66:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8004c6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c84:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <HAL_UART_MspInit+0x288>)
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c94:	f003 0204 	and.w	r2, r3, #4
 8004c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004caa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cac:	23c0      	movs	r3, #192	@ 0xc0
 8004cae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004cc4:	2307      	movs	r3, #7
 8004cc6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cca:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4806      	ldr	r0, [pc, #24]	@ (8004cec <HAL_UART_MspInit+0x290>)
 8004cd2:	f000 fcb3 	bl	800563c <HAL_GPIO_Init>
}
 8004cd6:	bf00      	nop
 8004cd8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40005000 	.word	0x40005000
 8004ce4:	44020c00 	.word	0x44020c00
 8004ce8:	42020400 	.word	0x42020400
 8004cec:	42020800 	.word	0x42020800
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40006400 	.word	0x40006400

08004cf8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0b8      	sub	sp, #224	@ 0xe0
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d00:	f107 0310 	add.w	r3, r7, #16
 8004d04:	22d0      	movs	r2, #208	@ 0xd0
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f009 fb06 	bl	800e31a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <HAL_PCD_MspInit+0x70>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d123      	bne.n	8004d60 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0310 	mov.w	r3, #16
 8004d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004d24:	2330      	movs	r3, #48	@ 0x30
 8004d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 ffc6 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8004d3a:	f7ff fc8f 	bl	800465c <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 8004d3e:	f001 f835 	bl	8005dac <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <HAL_PCD_MspInit+0x74>)
 8004d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d48:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_PCD_MspInit+0x74>)
 8004d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d4e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_PCD_MspInit+0x74>)
 8004d54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8004d60:	bf00      	nop
 8004d62:	37e0      	adds	r7, #224	@ 0xe0
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40016000 	.word	0x40016000
 8004d6c:	44020c00 	.word	0x44020c00

08004d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <NMI_Handler+0x4>

08004d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <HardFault_Handler+0x4>

08004d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <MemManage_Handler+0x4>

08004d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <BusFault_Handler+0x4>

08004d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <UsageFault_Handler+0x4>

08004d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc6:	f000 fa65 	bl	8005294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4809      	ldr	r0, [pc, #36]	@ (8004dfc <TIM2_IRQHandler+0x2c>)
 8004dd8:	f000 fd82 	bl	80058e0 <HAL_GPIO_ReadPin>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 8004de2:	2201      	movs	r2, #1
 8004de4:	2104      	movs	r1, #4
 8004de6:	4806      	ldr	r0, [pc, #24]	@ (8004e00 <TIM2_IRQHandler+0x30>)
 8004de8:	f7fe fd68 	bl	80038bc <Ramp_Out>
		Mototr_Poz_Inc(1);
 8004dec:	2001      	movs	r0, #1
 8004dee:	f7fe fc69 	bl	80036c4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004df2:	4803      	ldr	r0, [pc, #12]	@ (8004e00 <TIM2_IRQHandler+0x30>)
 8004df4:	f006 fa72 	bl	800b2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	42020000 	.word	0x42020000
 8004e00:	2003aca4 	.word	0x2003aca4

08004e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4809      	ldr	r0, [pc, #36]	@ (8004e30 <TIM3_IRQHandler+0x2c>)
 8004e0c:	f000 fd68 	bl	80058e0 <HAL_GPIO_ReadPin>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d107      	bne.n	8004e26 <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 8004e16:	2202      	movs	r2, #2
 8004e18:	210c      	movs	r1, #12
 8004e1a:	4806      	ldr	r0, [pc, #24]	@ (8004e34 <TIM3_IRQHandler+0x30>)
 8004e1c:	f7fe fd4e 	bl	80038bc <Ramp_Out>
		Mototr_Poz_Inc(2);
 8004e20:	2002      	movs	r0, #2
 8004e22:	f7fe fc4f 	bl	80036c4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e26:	4803      	ldr	r0, [pc, #12]	@ (8004e34 <TIM3_IRQHandler+0x30>)
 8004e28:	f006 fa58 	bl	800b2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	42020400 	.word	0x42020400
 8004e34:	2003acf0 	.word	0x2003acf0

08004e38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4809      	ldr	r0, [pc, #36]	@ (8004e64 <TIM5_IRQHandler+0x2c>)
 8004e40:	f000 fd4e 	bl	80058e0 <HAL_GPIO_ReadPin>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4806      	ldr	r0, [pc, #24]	@ (8004e68 <TIM5_IRQHandler+0x30>)
 8004e50:	f7fe fd34 	bl	80038bc <Ramp_Out>
		  Mototr_Poz_Inc(0);
 8004e54:	2000      	movs	r0, #0
 8004e56:	f7fe fc35 	bl	80036c4 <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004e5a:	4803      	ldr	r0, [pc, #12]	@ (8004e68 <TIM5_IRQHandler+0x30>)
 8004e5c:	f006 fa3e 	bl	800b2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	42020000 	.word	0x42020000
 8004e68:	2003ad3c 	.word	0x2003ad3c

08004e6c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004e70:	4802      	ldr	r0, [pc, #8]	@ (8004e7c <TIM15_IRQHandler+0x10>)
 8004e72:	f006 fa33 	bl	800b2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2003ad88 	.word	0x2003ad88

08004e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return 1;
 8004e84:	2301      	movs	r3, #1
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_kill>:

int _kill(int pid, int sig)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e9a:	f009 fa91 	bl	800e3c0 <__errno>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2216      	movs	r2, #22
 8004ea2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_exit>:

void _exit (int status)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ffe7 	bl	8004e90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <_exit+0x12>

08004ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e00a      	b.n	8004eee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ed8:	f3af 8000 	nop.w
 8004edc:	4601      	mov	r1, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	60ba      	str	r2, [r7, #8]
 8004ee4:	b2ca      	uxtb	r2, r1
 8004ee6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3301      	adds	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	dbf0      	blt.n	8004ed8 <_read+0x12>
  }

  return len;
 8004ef6:	687b      	ldr	r3, [r7, #4]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e009      	b.n	8004f26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	60ba      	str	r2, [r7, #8]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	3301      	adds	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	dbf1      	blt.n	8004f12 <_write+0x12>
  }
  return len;
 8004f2e:	687b      	ldr	r3, [r7, #4]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_close>:

int _close(int file)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f60:	605a      	str	r2, [r3, #4]
  return 0;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_isatty>:

int _isatty(int file)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f78:	2301      	movs	r3, #1
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fa8:	4a14      	ldr	r2, [pc, #80]	@ (8004ffc <_sbrk+0x5c>)
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <_sbrk+0x60>)
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fb4:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <_sbrk+0x64>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fbc:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <_sbrk+0x64>)
 8004fbe:	4a12      	ldr	r2, [pc, #72]	@ (8005008 <_sbrk+0x68>)
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <_sbrk+0x64>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d207      	bcs.n	8004fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fd0:	f009 f9f6 	bl	800e3c0 <__errno>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	220c      	movs	r2, #12
 8004fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e009      	b.n	8004ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fe0:	4b08      	ldr	r3, [pc, #32]	@ (8005004 <_sbrk+0x64>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fe6:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <_sbrk+0x64>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <_sbrk+0x64>)
 8004ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20044000 	.word	0x20044000
 8005000:	00000400 	.word	0x00000400
 8005004:	2003b270 	.word	0x2003b270
 8005008:	2003b3c8 	.word	0x2003b3c8

0800500c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005012:	4b35      	ldr	r3, [pc, #212]	@ (80050e8 <SystemInit+0xdc>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	4a33      	ldr	r2, [pc, #204]	@ (80050e8 <SystemInit+0xdc>)
 800501a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800501e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8005022:	4b32      	ldr	r3, [pc, #200]	@ (80050ec <SystemInit+0xe0>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005028:	4b30      	ldr	r3, [pc, #192]	@ (80050ec <SystemInit+0xe0>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800502e:	4b2f      	ldr	r3, [pc, #188]	@ (80050ec <SystemInit+0xe0>)
 8005030:	2200      	movs	r2, #0
 8005032:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005034:	4b2d      	ldr	r3, [pc, #180]	@ (80050ec <SystemInit+0xe0>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	492c      	ldr	r1, [pc, #176]	@ (80050ec <SystemInit+0xe0>)
 800503a:	4b2d      	ldr	r3, [pc, #180]	@ (80050f0 <SystemInit+0xe4>)
 800503c:	4013      	ands	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005040:	4b2a      	ldr	r3, [pc, #168]	@ (80050ec <SystemInit+0xe0>)
 8005042:	2200      	movs	r2, #0
 8005044:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <SystemInit+0xe0>)
 8005048:	2200      	movs	r2, #0
 800504a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800504c:	4b27      	ldr	r3, [pc, #156]	@ (80050ec <SystemInit+0xe0>)
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8005052:	4b26      	ldr	r3, [pc, #152]	@ (80050ec <SystemInit+0xe0>)
 8005054:	4a27      	ldr	r2, [pc, #156]	@ (80050f4 <SystemInit+0xe8>)
 8005056:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005058:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <SystemInit+0xe0>)
 800505a:	2200      	movs	r2, #0
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800505e:	4b23      	ldr	r3, [pc, #140]	@ (80050ec <SystemInit+0xe0>)
 8005060:	4a24      	ldr	r2, [pc, #144]	@ (80050f4 <SystemInit+0xe8>)
 8005062:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8005064:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <SystemInit+0xe0>)
 8005066:	2200      	movs	r2, #0
 8005068:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800506a:	4b20      	ldr	r3, [pc, #128]	@ (80050ec <SystemInit+0xe0>)
 800506c:	4a21      	ldr	r2, [pc, #132]	@ (80050f4 <SystemInit+0xe8>)
 800506e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005070:	4b1e      	ldr	r3, [pc, #120]	@ (80050ec <SystemInit+0xe0>)
 8005072:	2200      	movs	r2, #0
 8005074:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005076:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <SystemInit+0xe0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <SystemInit+0xe0>)
 800507c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005080:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005082:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <SystemInit+0xe0>)
 8005084:	2200      	movs	r2, #0
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <SystemInit+0xdc>)
 800508a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800508e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005090:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <SystemInit+0xec>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005098:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80050a0:	d003      	beq.n	80050aa <SystemInit+0x9e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050a8:	d117      	bne.n	80050da <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80050aa:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <SystemInit+0xec>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80050b6:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <SystemInit+0xec>)
 80050b8:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <SystemInit+0xf0>)
 80050ba:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80050bc:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <SystemInit+0xec>)
 80050be:	4a10      	ldr	r2, [pc, #64]	@ (8005100 <SystemInit+0xf4>)
 80050c0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <SystemInit+0xec>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	4a0c      	ldr	r2, [pc, #48]	@ (80050f8 <SystemInit+0xec>)
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <SystemInit+0xec>)
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <SystemInit+0xec>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	61d3      	str	r3, [r2, #28]
  }
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000ed00 	.word	0xe000ed00
 80050ec:	44020c00 	.word	0x44020c00
 80050f0:	eae2eae3 	.word	0xeae2eae3
 80050f4:	01010280 	.word	0x01010280
 80050f8:	40022000 	.word	0x40022000
 80050fc:	08192a3b 	.word	0x08192a3b
 8005100:	4c5d6e7f 	.word	0x4c5d6e7f

08005104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005104:	480d      	ldr	r0, [pc, #52]	@ (800513c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005106:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005108:	f7ff ff80 	bl	800500c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800510c:	480c      	ldr	r0, [pc, #48]	@ (8005140 <LoopForever+0x6>)
  ldr r1, =_edata
 800510e:	490d      	ldr	r1, [pc, #52]	@ (8005144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005110:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <LoopForever+0xe>)
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005114:	e002      	b.n	800511c <LoopCopyDataInit>

08005116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511a:	3304      	adds	r3, #4

0800511c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800511c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800511e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005120:	d3f9      	bcc.n	8005116 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005124:	4c0a      	ldr	r4, [pc, #40]	@ (8005150 <LoopForever+0x16>)
  movs r3, #0
 8005126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005128:	e001      	b.n	800512e <LoopFillZerobss>

0800512a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800512c:	3204      	adds	r2, #4

0800512e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800512e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005130:	d3fb      	bcc.n	800512a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005132:	f009 f94b 	bl	800e3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005136:	f7fe fd9f 	bl	8003c78 <main>

0800513a <LoopForever>:

LoopForever:
    b LoopForever
 800513a:	e7fe      	b.n	800513a <LoopForever>
  ldr   r0, =_estack
 800513c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8005140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005144:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005148:	08014bb8 	.word	0x08014bb8
  ldr r2, =_sbss
 800514c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005150:	2003b3c4 	.word	0x2003b3c4

08005154 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005154:	e7fe      	b.n	8005154 <ADC1_IRQHandler>
	...

08005158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800515c:	2003      	movs	r0, #3
 800515e:	f000 f98a 	bl	8005476 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005162:	f001 fc23 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_Init+0x44>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	490b      	ldr	r1, [pc, #44]	@ (80051a0 <HAL_Init+0x48>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
 8005178:	4a0a      	ldr	r2, [pc, #40]	@ (80051a4 <HAL_Init+0x4c>)
 800517a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800517c:	2004      	movs	r0, #4
 800517e:	f000 f9cf 	bl	8005520 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005182:	200f      	movs	r0, #15
 8005184:	f000 f810 	bl	80051a8 <HAL_InitTick>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e002      	b.n	8005198 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005192:	f7ff fa69 	bl	8004668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	44020c00 	.word	0x44020c00
 80051a0:	080144c0 	.word	0x080144c0
 80051a4:	2000001c 	.word	0x2000001c

080051a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80051b4:	4b33      	ldr	r3, [pc, #204]	@ (8005284 <HAL_InitTick+0xdc>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e05c      	b.n	800527a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80051c0:	4b31      	ldr	r3, [pc, #196]	@ (8005288 <HAL_InitTick+0xe0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d10c      	bne.n	80051e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80051cc:	4b2f      	ldr	r3, [pc, #188]	@ (800528c <HAL_InitTick+0xe4>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005284 <HAL_InitTick+0xdc>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051da:	fbb3 f3f1 	udiv	r3, r3, r1
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e037      	b.n	8005256 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80051e6:	f000 f9f3 	bl	80055d0 <HAL_SYSTICK_GetCLKSourceConfig>
 80051ea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d023      	beq.n	800523a <HAL_InitTick+0x92>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d82d      	bhi.n	8005254 <HAL_InitTick+0xac>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_InitTick+0x5e>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d00d      	beq.n	8005220 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005204:	e026      	b.n	8005254 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005206:	4b21      	ldr	r3, [pc, #132]	@ (800528c <HAL_InitTick+0xe4>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b1e      	ldr	r3, [pc, #120]	@ (8005284 <HAL_InitTick+0xdc>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	4619      	mov	r1, r3
 8005210:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005214:	fbb3 f3f1 	udiv	r3, r3, r1
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	60fb      	str	r3, [r7, #12]
        break;
 800521e:	e01a      	b.n	8005256 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005220:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <HAL_InitTick+0xdc>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800522a:	fbb3 f3f2 	udiv	r3, r3, r2
 800522e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]
        break;
 8005238:	e00d      	b.n	8005256 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800523a:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <HAL_InitTick+0xdc>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005244:	fbb3 f3f2 	udiv	r3, r3, r2
 8005248:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	60fb      	str	r3, [r7, #12]
        break;
 8005252:	e000      	b.n	8005256 <HAL_InitTick+0xae>
        break;
 8005254:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f940 	bl	80054dc <HAL_SYSTICK_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e009      	b.n	800527a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005266:	2200      	movs	r2, #0
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	f04f 30ff 	mov.w	r0, #4294967295
 800526e:	f000 f90d 	bl	800548c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005272:	4a07      	ldr	r2, [pc, #28]	@ (8005290 <HAL_InitTick+0xe8>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000024 	.word	0x20000024
 8005288:	e000e010 	.word	0xe000e010
 800528c:	2000001c 	.word	0x2000001c
 8005290:	20000020 	.word	0x20000020

08005294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_IncTick+0x20>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_IncTick+0x24>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4413      	add	r3, r2
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_IncTick+0x24>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000024 	.word	0x20000024
 80052b8:	2003b274 	.word	0x2003b274

080052bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return uwTick;
 80052c0:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <HAL_GetTick+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	2003b274 	.word	0x2003b274

080052d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052dc:	f7ff ffee 	bl	80052bc <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d005      	beq.n	80052fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <HAL_Delay+0x44>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052fa:	bf00      	nop
 80052fc:	f7ff ffde 	bl	80052bc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d8f7      	bhi.n	80052fc <HAL_Delay+0x28>
  {
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000024 	.word	0x20000024

0800531c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800532c:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005338:	4013      	ands	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534e:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b04      	ldr	r3, [pc, #16]	@ (800537c <__NVIC_GetPriorityGrouping+0x18>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0307 	and.w	r3, r3, #7
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800538a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db0b      	blt.n	80053aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	4907      	ldr	r1, [pc, #28]	@ (80053b8 <__NVIC_EnableIRQ+0x38>)
 800539a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2001      	movs	r0, #1
 80053a2:	fa00 f202 	lsl.w	r2, r0, r2
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	@ (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	@ (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	@ 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf28      	it	cs
 800542e:	2304      	movcs	r3, #4
 8005430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3304      	adds	r3, #4
 8005436:	2b06      	cmp	r3, #6
 8005438:	d902      	bls.n	8005440 <NVIC_EncodePriority+0x30>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3b03      	subs	r3, #3
 800543e:	e000      	b.n	8005442 <NVIC_EncodePriority+0x32>
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005458:	f04f 31ff 	mov.w	r1, #4294967295
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43d9      	mvns	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	4313      	orrs	r3, r2
         );
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	@ 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff4c 	bl	800531c <__NVIC_SetPriorityGrouping>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800549a:	f7ff ff63 	bl	8005364 <__NVIC_GetPriorityGrouping>
 800549e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	6978      	ldr	r0, [r7, #20]
 80054a6:	f7ff ffb3 	bl	8005410 <NVIC_EncodePriority>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054b0:	4611      	mov	r1, r2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff82 	bl	80053bc <__NVIC_SetPriority>
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff56 	bl	8005380 <__NVIC_EnableIRQ>
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054ec:	d301      	bcc.n	80054f2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80054ee:	2301      	movs	r3, #1
 80054f0:	e00d      	b.n	800550e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80054f2:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <HAL_SYSTICK_Config+0x40>)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80054fa:	4b08      	ldr	r3, [pc, #32]	@ (800551c <HAL_SYSTICK_Config+0x40>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_SYSTICK_Config+0x40>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a05      	ldr	r2, [pc, #20]	@ (800551c <HAL_SYSTICK_Config+0x40>)
 8005506:	f043 0303 	orr.w	r3, r3, #3
 800550a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000e010 	.word	0xe000e010

08005520 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d844      	bhi.n	80055b8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800552e:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005557 	.word	0x08005557
 8005538:	08005575 	.word	0x08005575
 800553c:	08005597 	.word	0x08005597
 8005540:	080055b9 	.word	0x080055b9
 8005544:	08005549 	.word	0x08005549
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005548:	4b1f      	ldr	r3, [pc, #124]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800554e:	f043 0304 	orr.w	r3, r3, #4
 8005552:	6013      	str	r3, [r2, #0]
      break;
 8005554:	e031      	b.n	80055ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005556:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8005562:	4b1a      	ldr	r3, [pc, #104]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005568:	4a18      	ldr	r2, [pc, #96]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800556a:	f023 030c 	bic.w	r3, r3, #12
 800556e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005572:	e022      	b.n	80055ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005574:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a13      	ldr	r2, [pc, #76]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005580:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005582:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005586:	f023 030c 	bic.w	r3, r3, #12
 800558a:	4a10      	ldr	r2, [pc, #64]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800558c:	f043 0304 	orr.w	r3, r3, #4
 8005590:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005594:	e011      	b.n	80055ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0b      	ldr	r2, [pc, #44]	@ (80055c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80055a2:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80055a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055a8:	f023 030c 	bic.w	r3, r3, #12
 80055ac:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80055ae:	f043 0308 	orr.w	r3, r3, #8
 80055b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80055b6:	e000      	b.n	80055ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80055b8:	bf00      	nop
  }
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	e000e010 	.word	0xe000e010
 80055cc:	44020c00 	.word	0x44020c00

080055d0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80055d6:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80055e2:	2304      	movs	r3, #4
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	e01e      	b.n	8005626 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80055e8:	4b13      	ldr	r3, [pc, #76]	@ (8005638 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80055ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d00f      	beq.n	800561a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d80f      	bhi.n	8005620 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d003      	beq.n	8005614 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800560c:	e008      	b.n	8005620 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800560e:	2300      	movs	r3, #0
 8005610:	607b      	str	r3, [r7, #4]
        break;
 8005612:	e008      	b.n	8005626 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005614:	2301      	movs	r3, #1
 8005616:	607b      	str	r3, [r7, #4]
        break;
 8005618:	e005      	b.n	8005626 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800561a:	2302      	movs	r3, #2
 800561c:	607b      	str	r3, [r7, #4]
        break;
 800561e:	e002      	b.n	8005626 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005620:	2300      	movs	r3, #0
 8005622:	607b      	str	r3, [r7, #4]
        break;
 8005624:	bf00      	nop
    }
  }
  return systick_source;
 8005626:	687b      	ldr	r3, [r7, #4]
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	e000e010 	.word	0xe000e010
 8005638:	44020c00 	.word	0x44020c00

0800563c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800564a:	e136      	b.n	80058ba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	2101      	movs	r1, #1
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8128 	beq.w	80058b4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d003      	beq.n	8005674 <HAL_GPIO_Init+0x38>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b12      	cmp	r3, #18
 8005672:	d125      	bne.n	80056c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	08da      	lsrs	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3208      	adds	r2, #8
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4013      	ands	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	08da      	lsrs	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3208      	adds	r2, #8
 80056ba:	6979      	ldr	r1, [r7, #20]
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4013      	ands	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d00b      	beq.n	8005714 <HAL_GPIO_Init+0xd8>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d007      	beq.n	8005714 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005708:	2b11      	cmp	r3, #17
 800570a:	d003      	beq.n	8005714 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b12      	cmp	r3, #18
 8005712:	d130      	bne.n	8005776 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4013      	ands	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800574a:	2201      	movs	r2, #1
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43db      	mvns	r3, r3
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4013      	ands	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0201 	and.w	r2, r3, #1
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d017      	beq.n	80057ae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4013      	ands	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d07c      	beq.n	80058b4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80057ba:	4a47      	ldr	r2, [pc, #284]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	3318      	adds	r3, #24
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4013      	ands	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0a9a      	lsrs	r2, r3, #10
 80057e2:	4b3e      	ldr	r3, [pc, #248]	@ (80058dc <HAL_GPIO_Init+0x2a0>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	f002 0203 	and.w	r2, r2, #3
 80057ec:	00d2      	lsls	r2, r2, #3
 80057ee:	4093      	lsls	r3, r2
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057f6:	4938      	ldr	r1, [pc, #224]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	3318      	adds	r3, #24
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005804:	4b34      	ldr	r3, [pc, #208]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	43db      	mvns	r3, r3
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4013      	ands	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005828:	4a2b      	ldr	r2, [pc, #172]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800582e:	4b2a      	ldr	r3, [pc, #168]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	43db      	mvns	r3, r3
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4013      	ands	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005852:	4a21      	ldr	r2, [pc, #132]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005858:	4b1f      	ldr	r3, [pc, #124]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	43db      	mvns	r3, r3
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4013      	ands	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800587e:	4a16      	ldr	r2, [pc, #88]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005886:	4b14      	ldr	r3, [pc, #80]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 8005888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	43db      	mvns	r3, r3
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4013      	ands	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80058ac:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <HAL_GPIO_Init+0x29c>)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3301      	adds	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f aec1 	bne.w	800564c <HAL_GPIO_Init+0x10>
  }
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	44022000 	.word	0x44022000
 80058dc:	002f7f7f 	.word	0x002f7f7f

080058e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e001      	b.n	8005902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
 800591c:	4613      	mov	r3, r2
 800591e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005920:	787b      	ldrb	r3, [r7, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800592c:	e002      	b.n	8005934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e08d      	b.n	8005a6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fe fe86 	bl	8004678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	@ 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e006      	b.n	80059c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d108      	bne.n	80059e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	e007      	b.n	80059f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d138      	bne.n	8005afe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e032      	b.n	8005b00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	@ 0x24
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d139      	bne.n	8005b96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e033      	b.n	8005b98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2224      	movs	r2, #36	@ 0x24
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_ICACHE_Enable+0x1c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <HAL_ICACHE_Enable+0x1c>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40030400 	.word	0x40030400

08005bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0c3      	b.n	8005d5e <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff f884 	bl	8004cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f007 fb15 	bl	800d22c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
 8005c06:	e03f      	b.n	8005c88 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c08:	7bfa      	ldrb	r2, [r7, #15]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	440b      	add	r3, r1
 8005c16:	3315      	adds	r3, #21
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c1c:	7bfa      	ldrb	r2, [r7, #15]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3317      	adds	r3, #23
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3324      	adds	r3, #36	@ 0x24
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c58:	7bfa      	ldrb	r2, [r7, #15]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	3328      	adds	r3, #40	@ 0x28
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	3301      	adds	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	7bfa      	ldrb	r2, [r7, #15]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3ba      	bcc.n	8005c08 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
 8005c96:	e044      	b.n	8005d22 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c98:	7bfa      	ldrb	r2, [r7, #15]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cae:	7bfa      	ldrb	r2, [r7, #15]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	440b      	add	r3, r1
 8005cbc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005cc0:	7bfa      	ldrb	r2, [r7, #15]
 8005cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cc4:	7bfa      	ldrb	r2, [r7, #15]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	440b      	add	r3, r1
 8005cd2:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cf0:	7bfa      	ldrb	r2, [r7, #15]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	440b      	add	r3, r1
 8005cfe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	440b      	add	r3, r1
 8005d14:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d3b5      	bcc.n	8005c98 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7c1a      	ldrb	r2, [r3, #16]
 8005d34:	f88d 2000 	strb.w	r2, [sp]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d3c:	f007 faae 	bl	800d29c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7b1b      	ldrb	r3, [r3, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d102      	bne.n	8005d5c <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f805 	bl	8005d66 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d88:	f043 0201 	orr.w	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d94:	f043 0202 	orr.w	r2, r3, #2
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	44020800 	.word	0x44020800

08005dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f000 bc28 	b.w	8006630 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de0:	4b94      	ldr	r3, [pc, #592]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f003 0318 	and.w	r3, r3, #24
 8005de8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005dea:	4b92      	ldr	r3, [pc, #584]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d05b      	beq.n	8005eb8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d005      	beq.n	8005e12 <HAL_RCC_OscConfig+0x46>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2b18      	cmp	r3, #24
 8005e0a:	d114      	bne.n	8005e36 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d111      	bne.n	8005e36 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f000 bc08 	b.w	8006630 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005e20:	4b84      	ldr	r3, [pc, #528]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	4981      	ldr	r1, [pc, #516]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005e34:	e040      	b.n	8005eb8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d023      	beq.n	8005e86 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a7c      	ldr	r2, [pc, #496]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7ff fa37 	bl	80052bc <HAL_GetTick>
 8005e4e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005e52:	f7ff fa33 	bl	80052bc <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e3e5      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005e64:	4b73      	ldr	r3, [pc, #460]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005e70:	4b70      	ldr	r3, [pc, #448]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	496d      	ldr	r1, [pc, #436]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	618b      	str	r3, [r1, #24]
 8005e84:	e018      	b.n	8005eb8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e86:	4b6b      	ldr	r3, [pc, #428]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7ff fa13 	bl	80052bc <HAL_GetTick>
 8005e96:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005e9a:	f7ff fa0f 	bl	80052bc <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e3c1      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005eac:	4b61      	ldr	r3, [pc, #388]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a0 	beq.w	8006006 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x10c>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b18      	cmp	r3, #24
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8092 	bne.w	8006006 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e3a4      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eee:	d106      	bne.n	8005efe <HAL_RCC_OscConfig+0x132>
 8005ef0:	4b50      	ldr	r3, [pc, #320]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e058      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d112      	bne.n	8005f2c <HAL_RCC_OscConfig+0x160>
 8005f06:	4b4b      	ldr	r3, [pc, #300]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	4b48      	ldr	r3, [pc, #288]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a47      	ldr	r2, [pc, #284]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b45      	ldr	r3, [pc, #276]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a44      	ldr	r2, [pc, #272]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e041      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f34:	d112      	bne.n	8005f5c <HAL_RCC_OscConfig+0x190>
 8005f36:	4b3f      	ldr	r3, [pc, #252]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3e      	ldr	r2, [pc, #248]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4b3c      	ldr	r3, [pc, #240]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a3b      	ldr	r2, [pc, #236]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a38      	ldr	r2, [pc, #224]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e029      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005f64:	d112      	bne.n	8005f8c <HAL_RCC_OscConfig+0x1c0>
 8005f66:	4b33      	ldr	r3, [pc, #204]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a32      	ldr	r2, [pc, #200]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b30      	ldr	r3, [pc, #192]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2f      	ldr	r2, [pc, #188]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e011      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e4>
 8005f8c:	4b29      	ldr	r3, [pc, #164]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a28      	ldr	r2, [pc, #160]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4b26      	ldr	r3, [pc, #152]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a25      	ldr	r2, [pc, #148]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b23      	ldr	r3, [pc, #140]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005faa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7ff f980 	bl	80052bc <HAL_GetTick>
 8005fbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005fc0:	f7ff f97c 	bl	80052bc <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	@ 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e32e      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fd2:	4b18      	ldr	r3, [pc, #96]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x1f4>
 8005fde:	e012      	b.n	8006006 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7ff f96c 	bl	80052bc <HAL_GetTick>
 8005fe4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005fe8:	f7ff f968 	bl	80052bc <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	@ 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e31a      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8006034 <HAL_RCC_OscConfig+0x268>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 809a 	beq.w	8006148 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_RCC_OscConfig+0x25a>
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b18      	cmp	r3, #24
 800601e:	d149      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d146      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e2fe      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
 8006032:	bf00      	nop
 8006034:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11c      	bne.n	8006078 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800603e:	4b9a      	ldr	r3, [pc, #616]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0218 	and.w	r2, r3, #24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d014      	beq.n	8006078 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800604e:	4b96      	ldr	r3, [pc, #600]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 0218 	bic.w	r2, r3, #24
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	4993      	ldr	r1, [pc, #588]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006060:	f000 fdd0 	bl	8006c04 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006064:	4b91      	ldr	r3, [pc, #580]	@ (80062ac <HAL_RCC_OscConfig+0x4e0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff f89d 	bl	80051a8 <HAL_InitTick>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e2db      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7ff f920 	bl	80052bc <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006080:	f7ff f91c 	bl	80052bc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e2ce      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006092:	4b85      	ldr	r3, [pc, #532]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800609e:	4b82      	ldr	r3, [pc, #520]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	497e      	ldr	r1, [pc, #504]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80060b2:	e049      	b.n	8006148 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d02c      	beq.n	8006116 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80060bc:	4b7a      	ldr	r3, [pc, #488]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f023 0218 	bic.w	r2, r3, #24
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	4977      	ldr	r1, [pc, #476]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80060ce:	4b76      	ldr	r3, [pc, #472]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a75      	ldr	r2, [pc, #468]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7ff f8ef 	bl	80052bc <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80060e2:	f7ff f8eb 	bl	80052bc <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e29d      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f4:	4b6c      	ldr	r3, [pc, #432]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006100:	4b69      	ldr	r3, [pc, #420]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	4966      	ldr	r1, [pc, #408]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	610b      	str	r3, [r1, #16]
 8006114:	e018      	b.n	8006148 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006116:	4b64      	ldr	r3, [pc, #400]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a63      	ldr	r2, [pc, #396]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006122:	f7ff f8cb 	bl	80052bc <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800612a:	f7ff f8c7 	bl	80052bc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e279      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800613c:	4b5a      	ldr	r3, [pc, #360]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d03c      	beq.n	80061ce <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01c      	beq.n	8006196 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615c:	4b52      	ldr	r3, [pc, #328]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800615e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006162:	4a51      	ldr	r2, [pc, #324]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006168:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7ff f8a6 	bl	80052bc <HAL_GetTick>
 8006170:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006174:	f7ff f8a2 	bl	80052bc <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e254      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006186:	4b48      	ldr	r3, [pc, #288]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800618c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0ef      	beq.n	8006174 <HAL_RCC_OscConfig+0x3a8>
 8006194:	e01b      	b.n	80061ce <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006196:	4b44      	ldr	r3, [pc, #272]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619c:	4a42      	ldr	r2, [pc, #264]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800619e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7ff f889 	bl	80052bc <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80061ae:	f7ff f885 	bl	80052bc <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e237      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061c0:	4b39      	ldr	r3, [pc, #228]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 80061c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1ef      	bne.n	80061ae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 80d2 	beq.w	8006380 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061dc:	4b34      	ldr	r3, [pc, #208]	@ (80062b0 <HAL_RCC_OscConfig+0x4e4>)
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d118      	bne.n	800621a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80061e8:	4b31      	ldr	r3, [pc, #196]	@ (80062b0 <HAL_RCC_OscConfig+0x4e4>)
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <HAL_RCC_OscConfig+0x4e4>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f4:	f7ff f862 	bl	80052bc <HAL_GetTick>
 80061f8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fc:	f7ff f85e 	bl	80052bc <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e210      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800620e:	4b28      	ldr	r3, [pc, #160]	@ (80062b0 <HAL_RCC_OscConfig+0x4e4>)
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d108      	bne.n	8006234 <HAL_RCC_OscConfig+0x468>
 8006222:	4b21      	ldr	r3, [pc, #132]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006228:	4a1f      	ldr	r2, [pc, #124]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006232:	e074      	b.n	800631e <HAL_RCC_OscConfig+0x552>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d118      	bne.n	800626e <HAL_RCC_OscConfig+0x4a2>
 800623c:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800623e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006242:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800624c:	4b16      	ldr	r3, [pc, #88]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800624e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006252:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800625e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006262:	4a11      	ldr	r2, [pc, #68]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006264:	f023 0304 	bic.w	r3, r3, #4
 8006268:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800626c:	e057      	b.n	800631e <HAL_RCC_OscConfig+0x552>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b05      	cmp	r3, #5
 8006274:	d11e      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4e8>
 8006276:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800627c:	4a0a      	ldr	r2, [pc, #40]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800627e:	f043 0304 	orr.w	r3, r3, #4
 8006282:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006286:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800628c:	4a06      	ldr	r2, [pc, #24]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800628e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006296:	4b04      	ldr	r3, [pc, #16]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 8006298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800629c:	4a02      	ldr	r2, [pc, #8]	@ (80062a8 <HAL_RCC_OscConfig+0x4dc>)
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062a6:	e03a      	b.n	800631e <HAL_RCC_OscConfig+0x552>
 80062a8:	44020c00 	.word	0x44020c00
 80062ac:	20000020 	.word	0x20000020
 80062b0:	44020800 	.word	0x44020800
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b85      	cmp	r3, #133	@ 0x85
 80062ba:	d118      	bne.n	80062ee <HAL_RCC_OscConfig+0x522>
 80062bc:	4ba2      	ldr	r3, [pc, #648]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062c2:	4aa1      	ldr	r2, [pc, #644]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062c4:	f043 0304 	orr.w	r3, r3, #4
 80062c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d2:	4a9d      	ldr	r2, [pc, #628]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062dc:	4b9a      	ldr	r3, [pc, #616]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062e2:	4a99      	ldr	r2, [pc, #612]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062ec:	e017      	b.n	800631e <HAL_RCC_OscConfig+0x552>
 80062ee:	4b96      	ldr	r3, [pc, #600]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f4:	4a94      	ldr	r2, [pc, #592]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062fe:	4b92      	ldr	r3, [pc, #584]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006304:	4a90      	ldr	r2, [pc, #576]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800630e:	4b8e      	ldr	r3, [pc, #568]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006314:	4a8c      	ldr	r2, [pc, #560]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fe ffc9 	bl	80052bc <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fe ffc5 	bl	80052bc <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e175      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006344:	4b80      	ldr	r3, [pc, #512]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0ed      	beq.n	800632e <HAL_RCC_OscConfig+0x562>
 8006352:	e015      	b.n	8006380 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006354:	f7fe ffb2 	bl	80052bc <HAL_GetTick>
 8006358:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800635a:	e00a      	b.n	8006372 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635c:	f7fe ffae 	bl	80052bc <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e15e      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006372:	4b75      	ldr	r3, [pc, #468]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ed      	bne.n	800635c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d036      	beq.n	80063fa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d019      	beq.n	80063c8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006394:	4b6c      	ldr	r3, [pc, #432]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6b      	ldr	r2, [pc, #428]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 800639a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800639e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a0:	f7fe ff8c 	bl	80052bc <HAL_GetTick>
 80063a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80063a8:	f7fe ff88 	bl	80052bc <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e13a      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80063ba:	4b63      	ldr	r3, [pc, #396]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x5dc>
 80063c6:	e018      	b.n	80063fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063c8:	4b5f      	ldr	r3, [pc, #380]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80063ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fe ff72 	bl	80052bc <HAL_GetTick>
 80063d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80063dc:	f7fe ff6e 	bl	80052bc <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e120      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063ee:	4b56      	ldr	r3, [pc, #344]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8115 	beq.w	800662e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	2b18      	cmp	r3, #24
 8006408:	f000 80af 	beq.w	800656a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	2b02      	cmp	r3, #2
 8006412:	f040 8086 	bne.w	8006522 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006416:	4b4c      	ldr	r3, [pc, #304]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a4b      	ldr	r2, [pc, #300]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 800641c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fe ff4b 	bl	80052bc <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800642a:	f7fe ff47 	bl	80052bc <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e0f9      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800643c:	4b42      	ldr	r3, [pc, #264]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f0      	bne.n	800642a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006448:	4b3f      	ldr	r3, [pc, #252]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006450:	f023 0303 	bic.w	r3, r3, #3
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800645c:	0212      	lsls	r2, r2, #8
 800645e:	430a      	orrs	r2, r1
 8006460:	4939      	ldr	r1, [pc, #228]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006462:	4313      	orrs	r3, r2
 8006464:	628b      	str	r3, [r1, #40]	@ 0x28
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646a:	3b01      	subs	r3, #1
 800646c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	3b01      	subs	r3, #1
 8006476:	025b      	lsls	r3, r3, #9
 8006478:	b29b      	uxth	r3, r3
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006480:	3b01      	subs	r3, #1
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648e:	3b01      	subs	r3, #1
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006496:	492c      	ldr	r1, [pc, #176]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800649c:	4b2a      	ldr	r3, [pc, #168]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	4a29      	ldr	r2, [pc, #164]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ac:	4a26      	ldr	r2, [pc, #152]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80064b2:	4b25      	ldr	r3, [pc, #148]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b6:	4a24      	ldr	r2, [pc, #144]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064b8:	f043 0310 	orr.w	r3, r3, #16
 80064bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80064be:	4b22      	ldr	r3, [pc, #136]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	f023 020c 	bic.w	r2, r3, #12
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	491f      	ldr	r1, [pc, #124]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80064d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d4:	f023 0220 	bic.w	r2, r3, #32
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064dc:	491a      	ldr	r1, [pc, #104]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064e2:	4b19      	ldr	r3, [pc, #100]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80064ee:	4b16      	ldr	r3, [pc, #88]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 80064f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fe fedf 	bl	80052bc <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006502:	f7fe fedb 	bl	80052bc <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e08d      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006514:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x736>
 8006520:	e085      	b.n	800662e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006522:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <HAL_RCC_OscConfig+0x77c>)
 8006528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800652c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fe fec5 	bl	80052bc <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006534:	e00a      	b.n	800654c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006536:	f7fe fec1 	bl	80052bc <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d903      	bls.n	800654c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e073      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
 8006548:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800654c:	4b3a      	ldr	r3, [pc, #232]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006558:	4b37      	ldr	r3, [pc, #220]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	4a36      	ldr	r2, [pc, #216]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 800655e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	6293      	str	r3, [r2, #40]	@ 0x28
 8006568:	e061      	b.n	800662e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800656a:	4b33      	ldr	r3, [pc, #204]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006570:	4b31      	ldr	r3, [pc, #196]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 8006572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006574:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	2b01      	cmp	r3, #1
 800657c:	d031      	beq.n	80065e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0203 	and.w	r2, r3, #3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d12a      	bne.n	80065e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d122      	bne.n	80065e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d11a      	bne.n	80065e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	0a5b      	lsrs	r3, r3, #9
 80065b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d111      	bne.n	80065e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d108      	bne.n	80065e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	0e1b      	lsrs	r3, r3, #24
 80065d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e024      	b.n	8006630 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065e6:	4b14      	ldr	r3, [pc, #80]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	08db      	lsrs	r3, r3, #3
 80065ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d01a      	beq.n	800662e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80065f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	4a0e      	ldr	r2, [pc, #56]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fe fe5a 	bl	80052bc <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800660a:	bf00      	nop
 800660c:	f7fe fe56 	bl	80052bc <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4293      	cmp	r3, r2
 8006616:	d0f9      	beq.n	800660c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	4a06      	ldr	r2, [pc, #24]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006622:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <HAL_RCC_OscConfig+0x86c>)
 8006628:	f043 0310 	orr.w	r3, r3, #16
 800662c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	44020c00 	.word	0x44020c00

0800663c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e19e      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006650:	4b83      	ldr	r3, [pc, #524]	@ (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d910      	bls.n	8006680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b80      	ldr	r3, [pc, #512]	@ (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 020f 	bic.w	r2, r3, #15
 8006666:	497e      	ldr	r1, [pc, #504]	@ (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4313      	orrs	r3, r2
 800666c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666e:	4b7c      	ldr	r3, [pc, #496]	@ (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e186      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d012      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695a      	ldr	r2, [r3, #20]
 8006690:	4b74      	ldr	r3, [pc, #464]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800669a:	429a      	cmp	r2, r3
 800669c:	d909      	bls.n	80066b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800669e:	4b71      	ldr	r3, [pc, #452]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	496d      	ldr	r1, [pc, #436]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d012      	beq.n	80066e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	4b68      	ldr	r3, [pc, #416]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d909      	bls.n	80066e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80066d0:	4b64      	ldr	r3, [pc, #400]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4961      	ldr	r1, [pc, #388]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d908      	bls.n	8006712 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006700:	4b58      	ldr	r3, [pc, #352]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4955      	ldr	r1, [pc, #340]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 800670e:	4313      	orrs	r3, r2
 8006710:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d010      	beq.n	8006740 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	4b50      	ldr	r3, [pc, #320]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	429a      	cmp	r2, r3
 800672c:	d908      	bls.n	8006740 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800672e:	4b4d      	ldr	r3, [pc, #308]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 020f 	bic.w	r2, r3, #15
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	494a      	ldr	r1, [pc, #296]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 800673c:	4313      	orrs	r3, r2
 800673e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8093 	beq.w	8006874 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006756:	4b43      	ldr	r3, [pc, #268]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d121      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e113      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d107      	bne.n	800677e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800676e:	4b3d      	ldr	r3, [pc, #244]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d115      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e107      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d107      	bne.n	8006796 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006786:	4b37      	ldr	r3, [pc, #220]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e0fb      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006796:	4b33      	ldr	r3, [pc, #204]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e0f3      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80067a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f023 0203 	bic.w	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	492c      	ldr	r1, [pc, #176]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b8:	f7fe fd80 	bl	80052bc <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d112      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067c6:	e00a      	b.n	80067de <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067c8:	f7fe fd78 	bl	80052bc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e0d7      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067de:	4b21      	ldr	r3, [pc, #132]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f003 0318 	and.w	r3, r3, #24
 80067e6:	2b18      	cmp	r3, #24
 80067e8:	d1ee      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x18c>
 80067ea:	e043      	b.n	8006874 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d112      	bne.n	800681a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067f6:	f7fe fd61 	bl	80052bc <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e0c0      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800680c:	4b15      	ldr	r3, [pc, #84]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f003 0318 	and.w	r3, r3, #24
 8006814:	2b10      	cmp	r3, #16
 8006816:	d1ee      	bne.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
 8006818:	e02c      	b.n	8006874 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d122      	bne.n	8006868 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006822:	e00a      	b.n	800683a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006824:	f7fe fd4a 	bl	80052bc <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0a9      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x228>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f003 0318 	and.w	r3, r3, #24
 8006842:	2b08      	cmp	r3, #8
 8006844:	d1ee      	bne.n	8006824 <HAL_RCC_ClockConfig+0x1e8>
 8006846:	e015      	b.n	8006874 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006848:	f7fe fd38 	bl	80052bc <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006856:	4293      	cmp	r3, r2
 8006858:	d906      	bls.n	8006868 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e097      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
 800685e:	bf00      	nop
 8006860:	40022000 	.word	0x40022000
 8006864:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006868:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f003 0318 	and.w	r3, r3, #24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e9      	bne.n	8006848 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	4b44      	ldr	r3, [pc, #272]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	429a      	cmp	r2, r3
 800688e:	d208      	bcs.n	80068a2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006890:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f023 020f 	bic.w	r2, r3, #15
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	493e      	ldr	r1, [pc, #248]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068a2:	4b3e      	ldr	r3, [pc, #248]	@ (800699c <HAL_RCC_ClockConfig+0x360>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d210      	bcs.n	80068d2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b0:	4b3a      	ldr	r3, [pc, #232]	@ (800699c <HAL_RCC_ClockConfig+0x360>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f023 020f 	bic.w	r2, r3, #15
 80068b8:	4938      	ldr	r1, [pc, #224]	@ (800699c <HAL_RCC_ClockConfig+0x360>)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c0:	4b36      	ldr	r3, [pc, #216]	@ (800699c <HAL_RCC_ClockConfig+0x360>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d001      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e05d      	b.n	800698e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d208      	bcs.n	8006900 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80068ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	4927      	ldr	r1, [pc, #156]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	4b21      	ldr	r3, [pc, #132]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800691a:	429a      	cmp	r2, r3
 800691c:	d209      	bcs.n	8006932 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800691e:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	491a      	ldr	r1, [pc, #104]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800694c:	429a      	cmp	r2, r3
 800694e:	d209      	bcs.n	8006964 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	490e      	ldr	r1, [pc, #56]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 8006960:	4313      	orrs	r3, r2
 8006962:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006964:	f000 f822 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 8006968:	4602      	mov	r2, r0
 800696a:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <HAL_RCC_ClockConfig+0x35c>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	490b      	ldr	r1, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x364>)
 8006974:	5ccb      	ldrb	r3, [r1, r3]
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	4a0a      	ldr	r2, [pc, #40]	@ (80069a4 <HAL_RCC_ClockConfig+0x368>)
 800697c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800697e:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <HAL_RCC_ClockConfig+0x36c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fc10 	bl	80051a8 <HAL_InitTick>
 8006988:	4603      	mov	r3, r0
 800698a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800698c:	7afb      	ldrb	r3, [r7, #11]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	44020c00 	.word	0x44020c00
 800699c:	40022000 	.word	0x40022000
 80069a0:	080144c0 	.word	0x080144c0
 80069a4:	2000001c 	.word	0x2000001c
 80069a8:	20000020 	.word	0x20000020

080069ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b089      	sub	sp, #36	@ 0x24
 80069b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80069b2:	4b8c      	ldr	r3, [pc, #560]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0318 	and.w	r3, r3, #24
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d102      	bne.n	80069c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069be:	4b8a      	ldr	r3, [pc, #552]	@ (8006be8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	e107      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069c4:	4b87      	ldr	r3, [pc, #540]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f003 0318 	and.w	r3, r3, #24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d112      	bne.n	80069f6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80069d0:	4b84      	ldr	r3, [pc, #528]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069dc:	4b81      	ldr	r3, [pc, #516]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	4a81      	ldr	r2, [pc, #516]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x240>)
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	e0f1      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80069f0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x240>)
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e0ee      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069f6:	4b7b      	ldr	r3, [pc, #492]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0318 	and.w	r3, r3, #24
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d102      	bne.n	8006a08 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a02:	4b7b      	ldr	r3, [pc, #492]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0x244>)
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	e0e5      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a08:	4b76      	ldr	r3, [pc, #472]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f003 0318 	and.w	r3, r3, #24
 8006a10:	2b18      	cmp	r3, #24
 8006a12:	f040 80dd 	bne.w	8006bd0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a16:	4b73      	ldr	r3, [pc, #460]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a20:	4b70      	ldr	r3, [pc, #448]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006a38:	4b6a      	ldr	r3, [pc, #424]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	fb02 f303 	mul.w	r3, r2, r3
 8006a48:	ee07 3a90 	vmov	s15, r3
 8006a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a50:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80b7 	beq.w	8006bca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d003      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0xbe>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d056      	beq.n	8006b16 <HAL_RCC_GetSysClockFreq+0x16a>
 8006a68:	e077      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d02d      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a76:	4b5b      	ldr	r3, [pc, #364]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	08db      	lsrs	r3, r3, #3
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	4a5a      	ldr	r2, [pc, #360]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x240>)
 8006a82:	fa22 f303 	lsr.w	r3, r2, r3
 8006a86:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa0:	4b50      	ldr	r3, [pc, #320]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ab4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8006ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006acc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006ad0:	e065      	b.n	8006b9e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006adc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006bf8 <HAL_RCC_GetSysClockFreq+0x24c>
 8006ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8006afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b10:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006b14:	e043      	b.n	8006b9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b20:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x250>
 8006b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b28:	4b2e      	ldr	r3, [pc, #184]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8006b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b54:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006b58:	e021      	b.n	8006b9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b64:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c00 <HAL_RCC_GetSysClockFreq+0x254>
 8006b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b80:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8006b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b98:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006b9c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006b9e:	4b11      	ldr	r3, [pc, #68]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba2:	0a5b      	lsrs	r3, r3, #9
 8006ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba8:	3301      	adds	r3, #1
 8006baa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bb6:	edd7 6a06 	vldr	s13, [r7, #24]
 8006bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bc2:	ee17 3a90 	vmov	r3, s15
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e004      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e001      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006bd0:	4b06      	ldr	r3, [pc, #24]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x240>)
 8006bd2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3724      	adds	r7, #36	@ 0x24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	44020c00 	.word	0x44020c00
 8006be8:	003d0900 	.word	0x003d0900
 8006bec:	03d09000 	.word	0x03d09000
 8006bf0:	016e3600 	.word	0x016e3600
 8006bf4:	46000000 	.word	0x46000000
 8006bf8:	4c742400 	.word	0x4c742400
 8006bfc:	4bb71b00 	.word	0x4bb71b00
 8006c00:	4a742400 	.word	0x4a742400

08006c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c08:	f7ff fed0 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006c12:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c16:	4907      	ldr	r1, [pc, #28]	@ (8006c34 <HAL_RCC_GetHCLKFreq+0x30>)
 8006c18:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006c1a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	4a05      	ldr	r2, [pc, #20]	@ (8006c38 <HAL_RCC_GetHCLKFreq+0x34>)
 8006c24:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006c26:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <HAL_RCC_GetHCLKFreq+0x34>)
 8006c28:	681b      	ldr	r3, [r3, #0]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	44020c00 	.word	0x44020c00
 8006c34:	080144c0 	.word	0x080144c0
 8006c38:	2000001c 	.word	0x2000001c

08006c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006c40:	f7ff ffe0 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	4904      	ldr	r1, [pc, #16]	@ (8006c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c52:	5ccb      	ldrb	r3, [r1, r3]
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	44020c00 	.word	0x44020c00
 8006c64:	080144d0 	.word	0x080144d0

08006c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006c6c:	f7ff ffca 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c70:	4602      	mov	r2, r0
 8006c72:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c7e:	5ccb      	ldrb	r3, [r1, r3]
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	44020c00 	.word	0x44020c00
 8006c90:	080144d0 	.word	0x080144d0

08006c94 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006c98:	f7ff ffb4 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	0b1b      	lsrs	r3, r3, #12
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4904      	ldr	r1, [pc, #16]	@ (8006cbc <HAL_RCC_GetPCLK3Freq+0x28>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	44020c00 	.word	0x44020c00
 8006cbc:	080144d0 	.word	0x080144d0

08006cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc4:	b0ba      	sub	sp, #232	@ 0xe8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	ea54 0305 	orrs.w	r3, r4, r5
 8006cea:	d00b      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006cec:	4bcd      	ldr	r3, [pc, #820]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cf2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfc:	4ac9      	ldr	r2, [pc, #804]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 0801 	and.w	r8, r2, #1
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	ea58 0309 	orrs.w	r3, r8, r9
 8006d18:	d042      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	d823      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006d24:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d75 	.word	0x08006d75
 8006d30:	08006d45 	.word	0x08006d45
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d75 	.word	0x08006d75
 8006d3c:	08006d75 	.word	0x08006d75
 8006d40:	08006d75 	.word	0x08006d75
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d48:	3308      	adds	r3, #8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f003 f906 	bl	8009f5c <RCCEx_PLL2_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006d56:	e00e      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d5c:	3330      	adds	r3, #48	@ 0x30
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 f994 	bl	800a08c <RCCEx_PLL3_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006d6a:	e004      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d72:	e000      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006d7e:	4ba9      	ldr	r3, [pc, #676]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d84:	f023 0107 	bic.w	r1, r3, #7
 8006d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8e:	4aa5      	ldr	r2, [pc, #660]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d90:	430b      	orrs	r3, r1
 8006d92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f002 0a02 	and.w	sl, r2, #2
 8006dac:	f04f 0b00 	mov.w	fp, #0
 8006db0:	ea5a 030b 	orrs.w	r3, sl, fp
 8006db4:	f000 8088 	beq.w	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dbe:	2b28      	cmp	r3, #40	@ 0x28
 8006dc0:	d868      	bhi.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006e9d 	.word	0x08006e9d
 8006dcc:	08006e95 	.word	0x08006e95
 8006dd0:	08006e95 	.word	0x08006e95
 8006dd4:	08006e95 	.word	0x08006e95
 8006dd8:	08006e95 	.word	0x08006e95
 8006ddc:	08006e95 	.word	0x08006e95
 8006de0:	08006e95 	.word	0x08006e95
 8006de4:	08006e95 	.word	0x08006e95
 8006de8:	08006e6d 	.word	0x08006e6d
 8006dec:	08006e95 	.word	0x08006e95
 8006df0:	08006e95 	.word	0x08006e95
 8006df4:	08006e95 	.word	0x08006e95
 8006df8:	08006e95 	.word	0x08006e95
 8006dfc:	08006e95 	.word	0x08006e95
 8006e00:	08006e95 	.word	0x08006e95
 8006e04:	08006e95 	.word	0x08006e95
 8006e08:	08006e81 	.word	0x08006e81
 8006e0c:	08006e95 	.word	0x08006e95
 8006e10:	08006e95 	.word	0x08006e95
 8006e14:	08006e95 	.word	0x08006e95
 8006e18:	08006e95 	.word	0x08006e95
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e95 	.word	0x08006e95
 8006e24:	08006e95 	.word	0x08006e95
 8006e28:	08006e9d 	.word	0x08006e9d
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e95 	.word	0x08006e95
 8006e38:	08006e95 	.word	0x08006e95
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e95 	.word	0x08006e95
 8006e50:	08006e95 	.word	0x08006e95
 8006e54:	08006e95 	.word	0x08006e95
 8006e58:	08006e95 	.word	0x08006e95
 8006e5c:	08006e95 	.word	0x08006e95
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006e95 	.word	0x08006e95
 8006e68:	08006e9d 	.word	0x08006e9d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e70:	3308      	adds	r3, #8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f003 f872 	bl	8009f5c <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006e7e:	e00e      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e84:	3330      	adds	r3, #48	@ 0x30
 8006e86:	4618      	mov	r0, r3
 8006e88:	f003 f900 	bl	800a08c <RCCEx_PLL3_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006e92:	e004      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e9a:	e000      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006eac:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006ebe:	e003      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ec4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f002 0304 	and.w	r3, r2, #4
 8006ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	d04e      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ef2:	d02c      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006ef4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ef8:	d825      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006efe:	d028      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f04:	d81f      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f08:	d025      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f0c:	d81b      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f0e:	2b80      	cmp	r3, #128	@ 0x80
 8006f10:	d00f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006f12:	2b80      	cmp	r3, #128	@ 0x80
 8006f14:	d817      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01f      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d113      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f22:	3308      	adds	r3, #8
 8006f24:	4618      	mov	r0, r3
 8006f26:	f003 f819 	bl	8009f5c <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006f30:	e014      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f36:	3330      	adds	r3, #48	@ 0x30
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f003 f8a7 	bl	800a08c <RCCEx_PLL3_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006f44:	e00a      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f4c:	e006      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f4e:	bf00      	nop
 8006f50:	e004      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f52:	bf00      	nop
 8006f54:	e002      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10c      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006f64:	4b2f      	ldr	r3, [pc, #188]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f6a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f74:	4a2b      	ldr	r2, [pc, #172]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f7c:	e003      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f82:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f002 0308 	and.w	r3, r2, #8
 8006f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d056      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fb0:	d031      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006fb2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fb6:	d82a      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fbc:	d02d      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fc2:	d824      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006fc8:	d029      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006fca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006fce:	d81e      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd4:	d011      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fda:	d818      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d023      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d113      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fea:	3308      	adds	r3, #8
 8006fec:	4618      	mov	r0, r3
 8006fee:	f002 ffb5 	bl	8009f5c <RCCEx_PLL2_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006ff8:	e017      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ffe:	3330      	adds	r3, #48	@ 0x30
 8007000:	4618      	mov	r0, r3
 8007002:	f003 f843 	bl	800a08c <RCCEx_PLL3_Config>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800700c:	e00d      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007014:	e009      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007016:	bf00      	nop
 8007018:	e007      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800701a:	bf00      	nop
 800701c:	e005      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800701e:	bf00      	nop
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007022:	bf00      	nop
 8007024:	44020c00 	.word	0x44020c00
        break;
 8007028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007032:	4bb9      	ldr	r3, [pc, #740]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007038:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800703c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007042:	4ab5      	ldr	r2, [pc, #724]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007044:	430b      	orrs	r3, r1
 8007046:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800704a:	e003      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007050:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f002 0310 	and.w	r3, r2, #16
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007064:	2300      	movs	r3, #0
 8007066:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800706a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800706e:	460b      	mov	r3, r1
 8007070:	4313      	orrs	r3, r2
 8007072:	d053      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800707e:	d031      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007080:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007084:	d82a      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800708a:	d02d      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800708c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007090:	d824      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007096:	d029      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007098:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800709c:	d81e      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a2:	d011      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80070a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a8:	d818      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b2:	d113      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070b8:	3308      	adds	r3, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 ff4e 	bl	8009f5c <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80070c6:	e014      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070cc:	3330      	adds	r3, #48	@ 0x30
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 ffdc 	bl	800a08c <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80070da:	e00a      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80070e2:	e006      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070e4:	bf00      	nop
 80070e6:	e004      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070e8:	bf00      	nop
 80070ea:	e002      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070ec:	bf00      	nop
 80070ee:	e000      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80070fa:	4b87      	ldr	r3, [pc, #540]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007100:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710a:	4a83      	ldr	r2, [pc, #524]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800710c:	430b      	orrs	r3, r1
 800710e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007112:	e003      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007118:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800711c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f002 0320 	and.w	r3, r2, #32
 8007128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007132:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007136:	460b      	mov	r3, r1
 8007138:	4313      	orrs	r3, r2
 800713a:	d053      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800713c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007142:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007146:	d031      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007148:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800714c:	d82a      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800714e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007152:	d02d      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007158:	d824      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800715a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800715e:	d029      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007160:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007164:	d81e      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800716a:	d011      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007170:	d818      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d020      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717a:	d113      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800717c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007180:	3308      	adds	r3, #8
 8007182:	4618      	mov	r0, r3
 8007184:	f002 feea 	bl	8009f5c <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800718e:	e014      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007194:	3330      	adds	r3, #48	@ 0x30
 8007196:	4618      	mov	r0, r3
 8007198:	f002 ff78 	bl	800a08c <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80071a2:	e00a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071aa:	e006      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071ac:	bf00      	nop
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10c      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80071c2:	4b55      	ldr	r3, [pc, #340]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071c8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80071cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d2:	4a51      	ldr	r2, [pc, #324]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071da:	e003      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80071f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071f4:	2300      	movs	r3, #0
 80071f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d053      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800720e:	d031      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007210:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007214:	d82a      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800721a:	d02d      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800721c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007220:	d824      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007222:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007226:	d029      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800722c:	d81e      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800722e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007232:	d011      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007238:	d818      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d020      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800723e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007242:	d113      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007248:	3308      	adds	r3, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f002 fe86 	bl	8009f5c <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007256:	e014      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800725c:	3330      	adds	r3, #48	@ 0x30
 800725e:	4618      	mov	r0, r3
 8007260:	f002 ff14 	bl	800a08c <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800726a:	e00a      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007272:	e006      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007274:	bf00      	nop
 8007276:	e004      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007278:	bf00      	nop
 800727a:	e002      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800727c:	bf00      	nop
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007282:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10c      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800728a:	4b23      	ldr	r3, [pc, #140]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800728c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007290:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729a:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800729c:	430b      	orrs	r3, r1
 800729e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072c2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	d03d      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80072cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072d6:	d01b      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80072d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072dc:	d814      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80072de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e2:	d017      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e8:	d80e      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f2:	d109      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072f8:	3330      	adds	r3, #48	@ 0x30
 80072fa:	4618      	mov	r0, r3
 80072fc:	f002 fec6 	bl	800a08c <RCCEx_PLL3_Config>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007306:	e00a      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800730e:	e006      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8007310:	bf00      	nop
 8007312:	e004      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8007314:	bf00      	nop
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8007318:	44020c00 	.word	0x44020c00
        break;
 800731c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007326:	4b99      	ldr	r3, [pc, #612]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007328:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800732c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007336:	4a95      	ldr	r2, [pc, #596]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007338:	430b      	orrs	r3, r1
 800733a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007344:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800735e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	d03b      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800736c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800736e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007372:	d01b      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8007374:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007378:	d814      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800737a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800737e:	d017      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8007380:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007384:	d80e      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d014      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800738a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800738e:	d109      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007394:	3330      	adds	r3, #48	@ 0x30
 8007396:	4618      	mov	r0, r3
 8007398:	f002 fe78 	bl	800a08c <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80073a2:	e008      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80073be:	4b73      	ldr	r3, [pc, #460]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073c4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80073c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ce:	4a6f      	ldr	r2, [pc, #444]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073f0:	2300      	movs	r3, #0
 80073f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d03d      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800740c:	d01b      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800740e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007412:	d814      	bhi.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8007414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007418:	d017      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800741a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800741e:	d80e      	bhi.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d014      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8007424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007428:	d109      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800742a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800742e:	3330      	adds	r3, #48	@ 0x30
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fe2b 	bl	800a08c <RCCEx_PLL3_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800743c:	e008      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007444:	e004      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007446:	bf00      	nop
 8007448:	e002      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800744e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007450:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10d      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007458:	4b4c      	ldr	r3, [pc, #304]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800745a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800745e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746a:	4a48      	ldr	r2, [pc, #288]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800746c:	430b      	orrs	r3, r1
 800746e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007472:	e003      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007478:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800747c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007492:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d035      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800749c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074a8:	d015      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80074aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ae:	d80e      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80074b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b8:	d109      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074be:	3330      	adds	r3, #48	@ 0x30
 80074c0:	4618      	mov	r0, r3
 80074c2:	f002 fde3 	bl	800a08c <RCCEx_PLL3_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80074d4:	e002      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80074da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10d      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80074e4:	4b29      	ldr	r3, [pc, #164]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074ea:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80074ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f6:	4a25      	ldr	r2, [pc, #148]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007504:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8007508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	2100      	movs	r1, #0
 8007512:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8007516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800751a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800751e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	d037      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8007528:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007534:	d015      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800753a:	d80e      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d012      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007544:	d109      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754a:	3330      	adds	r3, #48	@ 0x30
 800754c:	4618      	mov	r0, r3
 800754e:	f002 fd9d 	bl	800a08c <RCCEx_PLL3_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007560:	e002      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8007566:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007568:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10f      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007576:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007582:	4a02      	ldr	r2, [pc, #8]	@ (800758c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007584:	430b      	orrs	r3, r1
 8007586:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800758a:	e005      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800758c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007594:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	2100      	movs	r1, #0
 80075a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80075a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80075b4:	4bb8      	ldr	r3, [pc, #736]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4ab7      	ldr	r2, [pc, #732]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075be:	61d3      	str	r3, [r2, #28]
 80075c0:	4bb5      	ldr	r3, [pc, #724]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80075cc:	4ab2      	ldr	r2, [pc, #712]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075de:	673b      	str	r3, [r7, #112]	@ 0x70
 80075e0:	2300      	movs	r3, #0
 80075e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80075e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80075e8:	460b      	mov	r3, r1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	d055      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80075ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80075fa:	d031      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80075fc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007600:	d82a      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007606:	d02d      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8007608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760c:	d824      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800760e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007612:	d029      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8007614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007618:	d81e      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800761a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800761e:	d011      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007624:	d818      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d020      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800762a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762e:	d113      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007634:	3308      	adds	r3, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f002 fc90 	bl	8009f5c <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007642:	e014      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007648:	3330      	adds	r3, #48	@ 0x30
 800764a:	4618      	mov	r0, r3
 800764c:	f002 fd1e 	bl	800a08c <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007656:	e00a      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800765e:	e006      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007676:	4b88      	ldr	r3, [pc, #544]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007678:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800767c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007688:	4a83      	ldr	r2, [pc, #524]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800768a:	430b      	orrs	r3, r1
 800768c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007690:	e003      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007696:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800769a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076a8:	2300      	movs	r3, #0
 80076aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d055      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80076b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076c2:	d031      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80076c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076c8:	d82a      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ce:	d02d      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80076d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d4:	d824      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076da:	d029      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80076dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076e0:	d81e      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e6:	d011      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80076e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ec:	d818      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f6:	d113      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076fc:	3308      	adds	r3, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f002 fc2c 	bl	8009f5c <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800770a:	e014      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800770c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007710:	3330      	adds	r3, #48	@ 0x30
 8007712:	4618      	mov	r0, r3
 8007714:	f002 fcba 	bl	800a08c <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800771e:	e00a      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007726:	e006      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007728:	bf00      	nop
 800772a:	e004      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800772c:	bf00      	nop
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007730:	bf00      	nop
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007736:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10d      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800773e:	4b56      	ldr	r3, [pc, #344]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007740:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007744:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007750:	4a51      	ldr	r2, [pc, #324]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007752:	430b      	orrs	r3, r1
 8007754:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007758:	e003      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800775e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800776e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007770:	2300      	movs	r3, #0
 8007772:	667b      	str	r3, [r7, #100]	@ 0x64
 8007774:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007778:	460b      	mov	r3, r1
 800777a:	4313      	orrs	r3, r2
 800777c:	d032      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800777e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007786:	2b05      	cmp	r3, #5
 8007788:	d80f      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d211      	bcs.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d911      	bls.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8007792:	2b02      	cmp	r3, #2
 8007794:	d109      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800779a:	3308      	adds	r3, #8
 800779c:	4618      	mov	r0, r3
 800779e:	f002 fbdd 	bl	8009f5c <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80077b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10d      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80077c0:	4b35      	ldr	r3, [pc, #212]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80077c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077c6:	f023 0107 	bic.w	r1, r3, #7
 80077ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077d2:	4a31      	ldr	r2, [pc, #196]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077da:	e003      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80077e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	2100      	movs	r1, #0
 80077ee:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d024      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800780c:	2b08      	cmp	r3, #8
 800780e:	d005      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007816:	e002      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007818:	bf00      	nop
 800781a:	e000      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800781c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007826:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800782c:	f023 0108 	bic.w	r1, r3, #8
 8007830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800783a:	430b      	orrs	r3, r1
 800783c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007840:	e003      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007842:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007846:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800784a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007856:	653b      	str	r3, [r7, #80]	@ 0x50
 8007858:	2300      	movs	r3, #0
 800785a:	657b      	str	r3, [r7, #84]	@ 0x54
 800785c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007860:	460b      	mov	r3, r1
 8007862:	4313      	orrs	r3, r2
 8007864:	f000 80b9 	beq.w	80079da <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007868:	4b0c      	ldr	r3, [pc, #48]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	4a0b      	ldr	r2, [pc, #44]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007874:	f7fd fd22 	bl	80052bc <HAL_GetTick>
 8007878:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800787c:	e010      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800787e:	f7fd fd1d 	bl	80052bc <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d908      	bls.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007894:	e00a      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007896:	bf00      	nop
 8007898:	44020c00 	.word	0x44020c00
 800789c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80078a0:	4bba      	ldr	r3, [pc, #744]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80078a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0e8      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80078ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f040 808e 	bne.w	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078b6:	4bb6      	ldr	r3, [pc, #728]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d023      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80078cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078d0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01b      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078dc:	4bac      	ldr	r3, [pc, #688]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ea:	4ba9      	ldr	r3, [pc, #676]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078f0:	4aa7      	ldr	r2, [pc, #668]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078fa:	4ba5      	ldr	r3, [pc, #660]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007900:	4aa3      	ldr	r2, [pc, #652]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007906:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800790a:	4aa1      	ldr	r2, [pc, #644]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007910:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d019      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fd fccc 	bl	80052bc <HAL_GetTick>
 8007924:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007928:	e00d      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7fd fcc7 	bl	80052bc <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	f241 3388 	movw	r3, #5000	@ 0x1388
 800793a:	429a      	cmp	r2, r3
 800793c:	d903      	bls.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007944:	e006      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007946:	4b92      	ldr	r3, [pc, #584]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ea      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007954:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d135      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800795c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007960:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796c:	d110      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800796e:	4b88      	ldr	r3, [pc, #544]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800797a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007984:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007988:	4a81      	ldr	r2, [pc, #516]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800798a:	430b      	orrs	r3, r1
 800798c:	61d3      	str	r3, [r2, #28]
 800798e:	e005      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007990:	4b7f      	ldr	r3, [pc, #508]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4a7e      	ldr	r2, [pc, #504]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007996:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800799a:	61d3      	str	r3, [r2, #28]
 800799c:	4b7c      	ldr	r3, [pc, #496]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800799e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079a2:	4a7b      	ldr	r2, [pc, #492]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079ac:	4b78      	ldr	r3, [pc, #480]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079ae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80079b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079be:	4a74      	ldr	r2, [pc, #464]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079c0:	430b      	orrs	r3, r1
 80079c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079c6:	e008      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80079d0:	e003      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80079e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e8:	2300      	movs	r3, #0
 80079ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079f0:	460b      	mov	r3, r1
 80079f2:	4313      	orrs	r3, r2
 80079f4:	d035      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80079f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079fe:	2b30      	cmp	r3, #48	@ 0x30
 8007a00:	d014      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8007a02:	2b30      	cmp	r3, #48	@ 0x30
 8007a04:	d80e      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d012      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d80a      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d010      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d106      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a16:	4b5e      	ldr	r3, [pc, #376]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a22:	e008      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10d      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007a3e:	4b54      	ldr	r3, [pc, #336]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a50:	4a4f      	ldr	r2, [pc, #316]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a52:	430b      	orrs	r3, r1
 8007a54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a58:	e003      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a5e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a70:	2300      	movs	r3, #0
 8007a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d033      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007a8a:	2b40      	cmp	r3, #64	@ 0x40
 8007a8c:	d007      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a8e:	e010      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b3f      	ldr	r3, [pc, #252]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	4a3e      	ldr	r2, [pc, #248]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007a9c:	e00d      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 fa59 	bl	8009f5c <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007ab0:	e003      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007ac2:	4b33      	ldr	r3, [pc, #204]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ac8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ae2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007af4:	2300      	movs	r3, #0
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d04c      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d827      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b29 	.word	0x08007b29
 8007b18:	08007b37 	.word	0x08007b37
 8007b1c:	08007b4b 	.word	0x08007b4b
 8007b20:	08007b67 	.word	0x08007b67
 8007b24:	08007b67 	.word	0x08007b67
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4b19      	ldr	r3, [pc, #100]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	4a18      	ldr	r2, [pc, #96]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b34:	e018      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f002 fa0d 	bl	8009f5c <RCCEx_PLL2_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b48:	e00e      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b4e:	3330      	adds	r3, #48	@ 0x30
 8007b50:	4618      	mov	r0, r3
 8007b52:	f002 fa9b 	bl	800a08c <RCCEx_PLL3_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b5c:	e004      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d111      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b76:	f023 0107 	bic.w	r1, r3, #7
 8007b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b82:	4a03      	ldr	r2, [pc, #12]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b84:	430b      	orrs	r3, r1
 8007b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b8a:	e007      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007b8c:	44020800 	.word	0x44020800
 8007b90:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007baa:	2300      	movs	r3, #0
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f000 8081 	beq.w	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d85f      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c51 	.word	0x08007c51
 8007bd0:	08007c87 	.word	0x08007c87
 8007bd4:	08007c87 	.word	0x08007c87
 8007bd8:	08007c87 	.word	0x08007c87
 8007bdc:	08007c87 	.word	0x08007c87
 8007be0:	08007c87 	.word	0x08007c87
 8007be4:	08007c87 	.word	0x08007c87
 8007be8:	08007c87 	.word	0x08007c87
 8007bec:	08007c5f 	.word	0x08007c5f
 8007bf0:	08007c87 	.word	0x08007c87
 8007bf4:	08007c87 	.word	0x08007c87
 8007bf8:	08007c87 	.word	0x08007c87
 8007bfc:	08007c87 	.word	0x08007c87
 8007c00:	08007c87 	.word	0x08007c87
 8007c04:	08007c87 	.word	0x08007c87
 8007c08:	08007c87 	.word	0x08007c87
 8007c0c:	08007c73 	.word	0x08007c73
 8007c10:	08007c87 	.word	0x08007c87
 8007c14:	08007c87 	.word	0x08007c87
 8007c18:	08007c87 	.word	0x08007c87
 8007c1c:	08007c87 	.word	0x08007c87
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007c87 	.word	0x08007c87
 8007c28:	08007c87 	.word	0x08007c87
 8007c2c:	08007c8f 	.word	0x08007c8f
 8007c30:	08007c87 	.word	0x08007c87
 8007c34:	08007c87 	.word	0x08007c87
 8007c38:	08007c87 	.word	0x08007c87
 8007c3c:	08007c87 	.word	0x08007c87
 8007c40:	08007c87 	.word	0x08007c87
 8007c44:	08007c87 	.word	0x08007c87
 8007c48:	08007c87 	.word	0x08007c87
 8007c4c:	08007c8f 	.word	0x08007c8f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c50:	4bb9      	ldr	r3, [pc, #740]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	4ab8      	ldr	r2, [pc, #736]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c5c:	e018      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c62:	3308      	adds	r3, #8
 8007c64:	4618      	mov	r0, r3
 8007c66:	f002 f979 	bl	8009f5c <RCCEx_PLL2_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c70:	e00e      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c76:	3330      	adds	r3, #48	@ 0x30
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fa07 	bl	800a08c <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c84:	e004      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c8c:	e000      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10d      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007c98:	4ba7      	ldr	r3, [pc, #668]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007caa:	4aa3      	ldr	r2, [pc, #652]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007cac:	430b      	orrs	r3, r1
 8007cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cb2:	e003      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cb8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cca:	2300      	movs	r3, #0
 8007ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d04e      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ce4:	d02e      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cea:	d827      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007cec:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cee:	d02b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007cf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf2:	d823      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007cf4:	2b80      	cmp	r3, #128	@ 0x80
 8007cf6:	d017      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8007cf8:	2b80      	cmp	r3, #128	@ 0x80
 8007cfa:	d81f      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8007d00:	2b40      	cmp	r3, #64	@ 0x40
 8007d02:	d007      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8007d04:	e01a      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d06:	4b8c      	ldr	r3, [pc, #560]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	4a8b      	ldr	r2, [pc, #556]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d12:	e01a      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d18:	3308      	adds	r3, #8
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f002 f91e 	bl	8009f5c <RCCEx_PLL2_Config>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d26:	e010      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d2c:	3330      	adds	r3, #48	@ 0x30
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 f9ac 	bl	800a08c <RCCEx_PLL3_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d3a:	e006      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d42:	e002      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007d44:	bf00      	nop
 8007d46:	e000      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007d52:	4b79      	ldr	r3, [pc, #484]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d58:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d64:	4974      	ldr	r1, [pc, #464]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007d6c:	e003      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d82:	623b      	str	r3, [r7, #32]
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	d055      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d9a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007d9e:	d031      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007da0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007da4:	d82a      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007daa:	d02d      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db0:	d824      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007db2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007db6:	d029      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007db8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007dbc:	d81e      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc2:	d011      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc8:	d818      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd2:	d113      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dd8:	3308      	adds	r3, #8
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f002 f8be 	bl	8009f5c <RCCEx_PLL2_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007de6:	e014      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dec:	3330      	adds	r3, #48	@ 0x30
 8007dee:	4618      	mov	r0, r3
 8007df0:	f002 f94c 	bl	800a08c <RCCEx_PLL3_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007dfa:	e00a      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e02:	e006      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e04:	bf00      	nop
 8007e06:	e004      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007e1a:	4b47      	ldr	r3, [pc, #284]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e20:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e2c:	4942      	ldr	r1, [pc, #264]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e34:	e003      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	2100      	movs	r1, #0
 8007e48:	61b9      	str	r1, [r7, #24]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e54:	460b      	mov	r3, r1
 8007e56:	4313      	orrs	r3, r2
 8007e58:	d03c      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d81b      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007e66:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007ea7 	.word	0x08007ea7
 8007e70:	08007e7d 	.word	0x08007e7d
 8007e74:	08007e8b 	.word	0x08007e8b
 8007e78:	08007ea7 	.word	0x08007ea7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	4a2d      	ldr	r2, [pc, #180]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e86:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e88:	e00e      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e8e:	3308      	adds	r3, #8
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 f863 	bl	8009f5c <RCCEx_PLL2_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007e9c:	e004      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10d      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007eb6:	f023 0203 	bic.w	r2, r3, #3
 8007eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ec2:	491d      	ldr	r1, [pc, #116]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007eca:	e003      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ecc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ed0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	2100      	movs	r1, #0
 8007ede:	6139      	str	r1, [r7, #16]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007eea:	460b      	mov	r3, r1
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d03c      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efc:	d00e      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f02:	d815      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d019      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8007f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f0c:	d110      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f12:	4a09      	ldr	r2, [pc, #36]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f1a:	e010      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f20:	3308      	adds	r3, #8
 8007f22:	4618      	mov	r0, r3
 8007f24:	f002 f81a 	bl	8009f5c <RCCEx_PLL2_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f2e:	e006      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f36:	e002      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8007f38:	44020c00 	.word	0x44020c00
        break;
 8007f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007f46:	4b3d      	ldr	r3, [pc, #244]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f58:	4938      	ldr	r1, [pc, #224]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007f60:	e003      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	2100      	movs	r1, #0
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f80:	460b      	mov	r3, r1
 8007f82:	4313      	orrs	r3, r2
 8007f84:	d038      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007f8e:	2b30      	cmp	r3, #48	@ 0x30
 8007f90:	d01b      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007f92:	2b30      	cmp	r3, #48	@ 0x30
 8007f94:	d815      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d002      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d007      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007f9e:	e010      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa0:	4b26      	ldr	r3, [pc, #152]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	4a25      	ldr	r2, [pc, #148]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007faa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fac:	e00e      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fb2:	3330      	adds	r3, #48	@ 0x30
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f002 f869 	bl	800a08c <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007fc0:	e004      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007fd4:	4b19      	ldr	r3, [pc, #100]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fe2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007fe6:	4915      	ldr	r1, [pc, #84]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ff4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	2100      	movs	r1, #0
 8008002:	6039      	str	r1, [r7, #0]
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	607b      	str	r3, [r7, #4]
 800800a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800800e:	460b      	mov	r3, r1
 8008010:	4313      	orrs	r3, r2
 8008012:	d00c      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800801a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800801e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008022:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008026:	4905      	ldr	r1, [pc, #20]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008028:	4313      	orrs	r3, r2
 800802a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800802e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8008032:	4618      	mov	r0, r3
 8008034:	37e8      	adds	r7, #232	@ 0xe8
 8008036:	46bd      	mov	sp, r7
 8008038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800803c:	44020c00 	.word	0x44020c00

08008040 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008040:	b480      	push	{r7}
 8008042:	b08b      	sub	sp, #44	@ 0x2c
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008048:	4bad      	ldr	r3, [pc, #692]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800804a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008050:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008052:	4bab      	ldr	r3, [pc, #684]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800805c:	4ba8      	ldr	r3, [pc, #672]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	0a1b      	lsrs	r3, r3, #8
 8008062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008066:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008068:	4ba5      	ldr	r3, [pc, #660]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008072:	4ba3      	ldr	r3, [pc, #652]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	fb02 f303 	mul.w	r3, r2, r3
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8126 	beq.w	80082e2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d053      	beq.n	8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d86f      	bhi.n	8008182 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d02b      	beq.n	8008106 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80080ae:	e068      	b.n	8008182 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080b0:	4b93      	ldr	r3, [pc, #588]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	08db      	lsrs	r3, r3, #3
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	4a92      	ldr	r2, [pc, #584]	@ (8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080bc:	fa22 f303 	lsr.w	r3, r2, r3
 80080c0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	ee07 3a90 	vmov	s15, r3
 80080c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80080e8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80080ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008100:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008104:	e068      	b.n	80081d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008110:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800830c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a04 	vldr	s12, [r7, #16]
 8008126:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008142:	e049      	b.n	80081d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008160:	ed97 6a04 	vldr	s12, [r7, #16]
 8008164:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008180:	e02a      	b.n	80081d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008182:	4b5f      	ldr	r3, [pc, #380]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	08db      	lsrs	r3, r3, #3
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	4a5d      	ldr	r2, [pc, #372]	@ (8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	ee07 3a90 	vmov	s15, r3
 80081a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80081ba:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80081d6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d8:	4b49      	ldr	r3, [pc, #292]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081e4:	d121      	bne.n	800822a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80081e6:	4b46      	ldr	r3, [pc, #280]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d017      	beq.n	8008222 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80081f2:	4b43      	ldr	r3, [pc, #268]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	0a5b      	lsrs	r3, r3, #9
 80081f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008208:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800820c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008218:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e006      	b.n	8008230 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008230:	4b33      	ldr	r3, [pc, #204]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800823c:	d121      	bne.n	8008282 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800823e:	4b30      	ldr	r3, [pc, #192]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d017      	beq.n	800827a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800824a:	4b2d      	ldr	r3, [pc, #180]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800824c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824e:	0c1b      	lsrs	r3, r3, #16
 8008250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800825c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008260:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008264:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800826c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008270:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	605a      	str	r2, [r3, #4]
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008288:	4b1d      	ldr	r3, [pc, #116]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008294:	d121      	bne.n	80082da <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008296:	4b1a      	ldr	r3, [pc, #104]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d017      	beq.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082a2:	4b17      	ldr	r3, [pc, #92]	@ (8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	0e1b      	lsrs	r3, r3, #24
 80082a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80082b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80082bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082d0:	e010      	b.n	80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]
}
 80082d8:	e00c      	b.n	80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	609a      	str	r2, [r3, #8]
}
 80082e0:	e008      	b.n	80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	609a      	str	r2, [r3, #8]
}
 80082f4:	bf00      	nop
 80082f6:	372c      	adds	r7, #44	@ 0x2c
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	44020c00 	.word	0x44020c00
 8008304:	03d09000 	.word	0x03d09000
 8008308:	46000000 	.word	0x46000000
 800830c:	4a742400 	.word	0x4a742400
 8008310:	4bb71b00 	.word	0x4bb71b00

08008314 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008314:	b480      	push	{r7}
 8008316:	b08b      	sub	sp, #44	@ 0x2c
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800831c:	4bad      	ldr	r3, [pc, #692]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008324:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008326:	4bab      	ldr	r3, [pc, #684]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008330:	4ba8      	ldr	r3, [pc, #672]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	0a1b      	lsrs	r3, r3, #8
 8008336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800833a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800833c:	4ba5      	ldr	r3, [pc, #660]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	f003 0310 	and.w	r3, r3, #16
 8008344:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008346:	4ba3      	ldr	r3, [pc, #652]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	08db      	lsrs	r3, r3, #3
 800834c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8126 	beq.w	80085b6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d053      	beq.n	8008418 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d86f      	bhi.n	8008456 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d003      	beq.n	8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d02b      	beq.n	80083da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8008382:	e068      	b.n	8008456 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008384:	4b93      	ldr	r3, [pc, #588]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	08db      	lsrs	r3, r3, #3
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	4a92      	ldr	r2, [pc, #584]	@ (80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
 8008394:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80083bc:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80083c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80083d8:	e068      	b.n	80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80083e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80083fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80083fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008412:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008416:	e049      	b.n	80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008434:	ed97 6a04 	vldr	s12, [r7, #16]
 8008438:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800843c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008450:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008454:	e02a      	b.n	80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008456:	4b5f      	ldr	r3, [pc, #380]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	4a5d      	ldr	r2, [pc, #372]	@ (80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008462:	fa22 f303 	lsr.w	r3, r2, r3
 8008466:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a04 	vldr	s12, [r7, #16]
 800848e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80084aa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ac:	4b49      	ldr	r3, [pc, #292]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b8:	d121      	bne.n	80084fe <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80084ba:	4b46      	ldr	r3, [pc, #280]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d017      	beq.n	80084f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80084c6:	4b43      	ldr	r3, [pc, #268]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ca:	0a5b      	lsrs	r3, r3, #9
 80084cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80084d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80084e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80084e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ec:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e006      	b.n	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e002      	b.n	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008504:	4b33      	ldr	r3, [pc, #204]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800850c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008510:	d121      	bne.n	8008556 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008512:	4b30      	ldr	r3, [pc, #192]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d017      	beq.n	800854e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800851e:	4b2d      	ldr	r3, [pc, #180]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008534:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008538:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800853c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008544:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
 800854c:	e006      	b.n	800855c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	605a      	str	r2, [r3, #4]
 8008554:	e002      	b.n	800855c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800855c:	4b1d      	ldr	r3, [pc, #116]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008568:	d121      	bne.n	80085ae <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800856a:	4b1a      	ldr	r3, [pc, #104]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d017      	beq.n	80085a6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008576:	4b17      	ldr	r3, [pc, #92]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857a:	0e1b      	lsrs	r3, r3, #24
 800857c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008588:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800858c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008590:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085a4:	e010      	b.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	609a      	str	r2, [r3, #8]
}
 80085ac:	e00c      	b.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	e008      	b.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	372c      	adds	r7, #44	@ 0x2c
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	44020c00 	.word	0x44020c00
 80085d8:	03d09000 	.word	0x03d09000
 80085dc:	46000000 	.word	0x46000000
 80085e0:	4a742400 	.word	0x4a742400
 80085e4:	4bb71b00 	.word	0x4bb71b00

080085e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b08b      	sub	sp, #44	@ 0x2c
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80085f0:	4bad      	ldr	r3, [pc, #692]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80085f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80085fa:	4bab      	ldr	r3, [pc, #684]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80085fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008604:	4ba8      	ldr	r3, [pc, #672]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008608:	0a1b      	lsrs	r3, r3, #8
 800860a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800860e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008610:	4ba5      	ldr	r3, [pc, #660]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800861a:	4ba3      	ldr	r3, [pc, #652]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800861c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8126 	beq.w	800888a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d053      	beq.n	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d86f      	bhi.n	800872a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d003      	beq.n	8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d02b      	beq.n	80086ae <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8008656:	e068      	b.n	800872a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008658:	4b93      	ldr	r3, [pc, #588]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	4a92      	ldr	r2, [pc, #584]	@ (80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	ee07 3a90 	vmov	s15, r3
 8008670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008690:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80086ac:	e068      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80086bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80086ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80086d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80086ea:	e049      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80086fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008708:	ed97 6a04 	vldr	s12, [r7, #16]
 800870c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008724:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008728:	e02a      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800872a:	4b5f      	ldr	r3, [pc, #380]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a5d      	ldr	r2, [pc, #372]	@ (80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008762:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800877e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008780:	4b49      	ldr	r3, [pc, #292]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878c:	d121      	bne.n	80087d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800878e:	4b46      	ldr	r3, [pc, #280]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800879a:	4b43      	ldr	r3, [pc, #268]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	0a5b      	lsrs	r3, r3, #9
 80087a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80087ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80087b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80087b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e006      	b.n	80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e002      	b.n	80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d8:	4b33      	ldr	r3, [pc, #204]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e4:	d121      	bne.n	800882a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80087e6:	4b30      	ldr	r3, [pc, #192]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d017      	beq.n	8008822 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80087f2:	4b2d      	ldr	r3, [pc, #180]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008804:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008808:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800880c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008818:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]
 8008820:	e006      	b.n	8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]
 8008828:	e002      	b.n	8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008830:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883c:	d121      	bne.n	8008882 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800883e:	4b1a      	ldr	r3, [pc, #104]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d017      	beq.n	800887a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800884a:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800885c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008860:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008864:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008870:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008878:	e010      	b.n	800889c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	e00c      	b.n	800889c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	609a      	str	r2, [r3, #8]
}
 8008888:	e008      	b.n	800889c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	609a      	str	r2, [r3, #8]
}
 800889c:	bf00      	nop
 800889e:	372c      	adds	r7, #44	@ 0x2c
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	44020c00 	.word	0x44020c00
 80088ac:	03d09000 	.word	0x03d09000
 80088b0:	46000000 	.word	0x46000000
 80088b4:	4a742400 	.word	0x4a742400
 80088b8:	4bb71b00 	.word	0x4bb71b00

080088bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b08f      	sub	sp, #60	@ 0x3c
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80088c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ca:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80088ce:	4321      	orrs	r1, r4
 80088d0:	d150      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80088d2:	4b26      	ldr	r3, [pc, #152]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80088de:	4b23      	ldr	r3, [pc, #140]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d108      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f2:	d104      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80088f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fa:	f001 bb20 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80088fe:	4b1b      	ldr	r3, [pc, #108]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890c:	d108      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d104      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008916:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
 800891c:	f001 bb0f 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008920:	4b12      	ldr	r3, [pc, #72]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800892c:	d119      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008934:	d115      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008936:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800893e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008942:	d30a      	bcc.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008944:	4b09      	ldr	r3, [pc, #36]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	0a1b      	lsrs	r3, r3, #8
 800894a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800894e:	4a08      	ldr	r2, [pc, #32]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008950:	fbb2 f3f3 	udiv	r3, r2, r3
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008956:	f001 baf2 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800895e:	f001 baee 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
 8008966:	f001 baea 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800896a:	bf00      	nop
 800896c:	44020c00 	.word	0x44020c00
 8008970:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008978:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 800897c:	ea50 0104 	orrs.w	r1, r0, r4
 8008980:	f000 8615 	beq.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8008984:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008988:	2801      	cmp	r0, #1
 800898a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800898e:	f081 82d3 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008996:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800899a:	ea50 0104 	orrs.w	r1, r0, r4
 800899e:	f000 84d8 	beq.w	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80089a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089a6:	2801      	cmp	r0, #1
 80089a8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80089ac:	f081 82c4 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089b4:	f1a1 0410 	sub.w	r4, r1, #16
 80089b8:	ea50 0104 	orrs.w	r1, r0, r4
 80089bc:	f001 8288 	beq.w	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80089c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c4:	2801      	cmp	r0, #1
 80089c6:	f171 0110 	sbcs.w	r1, r1, #16
 80089ca:	f081 82b5 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089d2:	f1a1 0408 	sub.w	r4, r1, #8
 80089d6:	ea50 0104 	orrs.w	r1, r0, r4
 80089da:	f001 81fe 	beq.w	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80089de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089e2:	2801      	cmp	r0, #1
 80089e4:	f171 0108 	sbcs.w	r1, r1, #8
 80089e8:	f081 82a6 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089f0:	1f0c      	subs	r4, r1, #4
 80089f2:	ea50 0104 	orrs.w	r1, r0, r4
 80089f6:	f000 8753 	beq.w	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80089fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089fe:	2801      	cmp	r0, #1
 8008a00:	f171 0104 	sbcs.w	r1, r1, #4
 8008a04:	f081 8298 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0c:	1e8c      	subs	r4, r1, #2
 8008a0e:	ea50 0104 	orrs.w	r1, r0, r4
 8008a12:	f001 8173 	beq.w	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8008a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a1a:	2801      	cmp	r0, #1
 8008a1c:	f171 0102 	sbcs.w	r1, r1, #2
 8008a20:	f081 828a 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a28:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008a2c:	4321      	orrs	r1, r4
 8008a2e:	f001 80fe 	beq.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a36:	4ccb      	ldr	r4, [pc, #812]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008a38:	42a0      	cmp	r0, r4
 8008a3a:	f171 0100 	sbcs.w	r1, r1, #0
 8008a3e:	f081 827b 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a46:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008a4a:	4321      	orrs	r1, r4
 8008a4c:	f001 8076 	beq.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a54:	4cc4      	ldr	r4, [pc, #784]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008a56:	42a0      	cmp	r0, r4
 8008a58:	f171 0100 	sbcs.w	r1, r1, #0
 8008a5c:	f081 826c 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a64:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008a68:	4321      	orrs	r1, r4
 8008a6a:	f000 87b5 	beq.w	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008a6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a72:	4cbe      	ldr	r4, [pc, #760]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008a74:	42a0      	cmp	r0, r4
 8008a76:	f171 0100 	sbcs.w	r1, r1, #0
 8008a7a:	f081 825d 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a82:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008a86:	4321      	orrs	r1, r4
 8008a88:	f000 8738 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a90:	4cb7      	ldr	r4, [pc, #732]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008a92:	42a0      	cmp	r0, r4
 8008a94:	f171 0100 	sbcs.w	r1, r1, #0
 8008a98:	f081 824e 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa0:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008aa4:	4321      	orrs	r1, r4
 8008aa6:	f001 81cd 	beq.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8008aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aae:	4cb1      	ldr	r4, [pc, #708]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	f171 0100 	sbcs.w	r1, r1, #0
 8008ab6:	f081 823f 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008abe:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008ac2:	4321      	orrs	r1, r4
 8008ac4:	f000 80d9 	beq.w	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008acc:	4caa      	ldr	r4, [pc, #680]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8008ace:	42a0      	cmp	r0, r4
 8008ad0:	f171 0100 	sbcs.w	r1, r1, #0
 8008ad4:	f081 8230 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008adc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008ae0:	4321      	orrs	r1, r4
 8008ae2:	f000 83da 	beq.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aea:	4ca4      	ldr	r4, [pc, #656]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	f171 0100 	sbcs.w	r1, r1, #0
 8008af2:	f081 8221 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008afa:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008afe:	4321      	orrs	r1, r4
 8008b00:	f000 8627 	beq.w	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8008b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b08:	4c9d      	ldr	r4, [pc, #628]	@ (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8008b0a:	42a0      	cmp	r0, r4
 8008b0c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b10:	f081 8212 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b18:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008b1c:	4321      	orrs	r1, r4
 8008b1e:	f000 857a 	beq.w	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b26:	4c97      	ldr	r4, [pc, #604]	@ (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008b28:	42a0      	cmp	r0, r4
 8008b2a:	f171 0100 	sbcs.w	r1, r1, #0
 8008b2e:	f081 8203 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b36:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008b3a:	4321      	orrs	r1, r4
 8008b3c:	f000 84fb 	beq.w	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b44:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008b48:	f171 0100 	sbcs.w	r1, r1, #0
 8008b4c:	f081 81f4 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b54:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008b58:	4321      	orrs	r1, r4
 8008b5a:	f000 84a9 	beq.w	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b62:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008b66:	42a0      	cmp	r0, r4
 8008b68:	f171 0100 	sbcs.w	r1, r1, #0
 8008b6c:	f081 81e4 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b74:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008b78:	4321      	orrs	r1, r4
 8008b7a:	f000 8456 	beq.w	800942a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8008b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b82:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008b86:	42a0      	cmp	r0, r4
 8008b88:	f171 0100 	sbcs.w	r1, r1, #0
 8008b8c:	f081 81d4 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b94:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008b98:	4321      	orrs	r1, r4
 8008b9a:	f000 8403 	beq.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba2:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008ba6:	42a0      	cmp	r0, r4
 8008ba8:	f171 0100 	sbcs.w	r1, r1, #0
 8008bac:	f081 81c4 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bb4:	2821      	cmp	r0, #33	@ 0x21
 8008bb6:	f171 0100 	sbcs.w	r1, r1, #0
 8008bba:	d255      	bcs.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc0:	4301      	orrs	r1, r0
 8008bc2:	f001 81b9 	beq.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bca:	1e42      	subs	r2, r0, #1
 8008bcc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008bd0:	2a20      	cmp	r2, #32
 8008bd2:	f173 0100 	sbcs.w	r1, r3, #0
 8008bd6:	f081 81af 	bcs.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bda:	2a1f      	cmp	r2, #31
 8008bdc:	f201 81ac 	bhi.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008be0:	a101      	add	r1, pc, #4	@ (adr r1, 8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8008be2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008cbf 	.word	0x08008cbf
 8008bec:	08008dbd 	.word	0x08008dbd
 8008bf0:	08009f39 	.word	0x08009f39
 8008bf4:	08008e7d 	.word	0x08008e7d
 8008bf8:	08009f39 	.word	0x08009f39
 8008bfc:	08009f39 	.word	0x08009f39
 8008c00:	08009f39 	.word	0x08009f39
 8008c04:	08008f4d 	.word	0x08008f4d
 8008c08:	08009f39 	.word	0x08009f39
 8008c0c:	08009f39 	.word	0x08009f39
 8008c10:	08009f39 	.word	0x08009f39
 8008c14:	08009f39 	.word	0x08009f39
 8008c18:	08009f39 	.word	0x08009f39
 8008c1c:	08009f39 	.word	0x08009f39
 8008c20:	08009f39 	.word	0x08009f39
 8008c24:	08009031 	.word	0x08009031
 8008c28:	08009f39 	.word	0x08009f39
 8008c2c:	08009f39 	.word	0x08009f39
 8008c30:	08009f39 	.word	0x08009f39
 8008c34:	08009f39 	.word	0x08009f39
 8008c38:	08009f39 	.word	0x08009f39
 8008c3c:	08009f39 	.word	0x08009f39
 8008c40:	08009f39 	.word	0x08009f39
 8008c44:	08009f39 	.word	0x08009f39
 8008c48:	08009f39 	.word	0x08009f39
 8008c4c:	08009f39 	.word	0x08009f39
 8008c50:	08009f39 	.word	0x08009f39
 8008c54:	08009f39 	.word	0x08009f39
 8008c58:	08009f39 	.word	0x08009f39
 8008c5c:	08009f39 	.word	0x08009f39
 8008c60:	08009f39 	.word	0x08009f39
 8008c64:	08009107 	.word	0x08009107
 8008c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c70:	430b      	orrs	r3, r1
 8008c72:	f000 82b3 	beq.w	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008c76:	f001 b95f 	b.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008c7a:	4b43      	ldr	r3, [pc, #268]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d108      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c8c:	f107 0320 	add.w	r3, r7, #32
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f9d5 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c9a:	f001 b950 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	2b40      	cmp	r3, #64	@ 0x40
 8008ca2:	d108      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca4:	f107 0314 	add.w	r3, r7, #20
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fb33 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cb2:	f001 b944 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cba:	f001 b940 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cbe:	4b32      	ldr	r3, [pc, #200]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008cd0:	f7fd ffca 	bl	8006c68 <HAL_RCC_GetPCLK2Freq>
 8008cd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cd6:	f001 b932 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008cda:	4b2b      	ldr	r3, [pc, #172]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ce6:	d10a      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d107      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fb0e 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cfc:	e05c      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008cfe:	4b22      	ldr	r3, [pc, #136]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d0a:	d10a      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d107      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d12:	f107 0308 	add.w	r3, r7, #8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fc66 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d20:	e04a      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d22:	4b19      	ldr	r3, [pc, #100]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10c      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d109      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d34:	4b14      	ldr	r3, [pc, #80]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	08db      	lsrs	r3, r3, #3
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	4a13      	ldr	r2, [pc, #76]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008d40:	fa22 f303 	lsr.w	r3, r2, r3
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d46:	e037      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008d48:	4b0f      	ldr	r3, [pc, #60]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d54:	d11e      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d11b      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d60:	e02a      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008d62:	bf00      	nop
 8008d64:	40000001 	.word	0x40000001
 8008d68:	20000001 	.word	0x20000001
 8008d6c:	10000001 	.word	0x10000001
 8008d70:	08000001 	.word	0x08000001
 8008d74:	04000001 	.word	0x04000001
 8008d78:	00400001 	.word	0x00400001
 8008d7c:	00200001 	.word	0x00200001
 8008d80:	00040001 	.word	0x00040001
 8008d84:	00020001 	.word	0x00020001
 8008d88:	44020c00 	.word	0x44020c00
 8008d8c:	03d09000 	.word	0x03d09000
 8008d90:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d94:	4ba3      	ldr	r3, [pc, #652]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d106      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	d103      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dae:	e003      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008db4:	f001 b8c3 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008db8:	f001 b8c1 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008dbc:	4b99      	ldr	r3, [pc, #612]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dce:	f7fd ff35 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008dd2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dd4:	f001 b8b3 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008dd8:	4b92      	ldr	r3, [pc, #584]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008de4:	d10a      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d107      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fa8f 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfa:	e03d      	b.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d108      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fbee 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e10:	f001 b895 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e14:	4b83      	ldr	r3, [pc, #524]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d10c      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	2b18      	cmp	r3, #24
 8008e24:	d109      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e26:	4b7f      	ldr	r3, [pc, #508]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	4a7d      	ldr	r2, [pc, #500]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008e32:	fa22 f303 	lsr.w	r3, r2, r3
 8008e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e38:	e01e      	b.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e46:	d105      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d102      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8008e4e:	4b77      	ldr	r3, [pc, #476]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e52:	e011      	b.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e54:	4b73      	ldr	r3, [pc, #460]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d106      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	2b28      	cmp	r3, #40	@ 0x28
 8008e66:	d103      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6e:	e003      	b.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e74:	f001 b863 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e78:	f001 b861 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008e7c:	4b69      	ldr	r3, [pc, #420]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e8e:	f7fd fed5 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008e92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e94:	f001 b853 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008e98:	4b62      	ldr	r3, [pc, #392]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ea4:	d10a      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	2b40      	cmp	r3, #64	@ 0x40
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eac:	f107 0314 	add.w	r3, r7, #20
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fa2f 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eba:	e045      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008ebc:	4b59      	ldr	r3, [pc, #356]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ec8:	d10a      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2b80      	cmp	r3, #128	@ 0x80
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed0:	f107 0308 	add.w	r3, r7, #8
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fb87 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ede:	e033      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008ee0:	4b50      	ldr	r3, [pc, #320]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d10c      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ef0:	d109      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	4a4a      	ldr	r2, [pc, #296]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008efe:	fa22 f303 	lsr.w	r3, r2, r3
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f04:	e020      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008f06:	4b47      	ldr	r3, [pc, #284]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f12:	d106      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1a:	d102      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8008f1c:	4b43      	ldr	r3, [pc, #268]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f20:	e012      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008f22:	4b40      	ldr	r3, [pc, #256]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008f36:	d103      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f44:	f000 bffb 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f48:	f000 bff9 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008f4c:	4b35      	ldr	r3, [pc, #212]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f52:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008f56:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f5e:	f7fd fe6d 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008f62:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f64:	f000 bfeb 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008f68:	4b2e      	ldr	r3, [pc, #184]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f74:	d10b      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f7e:	f107 0314 	add.w	r3, r7, #20
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff f9c6 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8c:	e047      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008f8e:	4b25      	ldr	r3, [pc, #148]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f9a:	d10b      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fa2:	d107      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa4:	f107 0308 	add.w	r3, r7, #8
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fb1d 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb2:	e034      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d10d      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008fc6:	d109      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fc8:	4b16      	ldr	r3, [pc, #88]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	4a15      	ldr	r2, [pc, #84]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fda:	e020      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008fdc:	4b11      	ldr	r3, [pc, #68]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe8:	d106      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff0:	d102      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8008ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff6:	e012      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b02      	cmp	r3, #2
 8009004:	d107      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800900c:	d103      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800900e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
 8009014:	e003      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800901a:	f000 bf90 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800901e:	f000 bf8e 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009022:	bf00      	nop
 8009024:	44020c00 	.word	0x44020c00
 8009028:	03d09000 	.word	0x03d09000
 800902c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009030:	4ba5      	ldr	r3, [pc, #660]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009036:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800903a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009042:	f7fd fdfb 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8009046:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009048:	f000 bf79 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800904c:	4b9e      	ldr	r3, [pc, #632]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009058:	d10b      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009060:	d107      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0314 	add.w	r3, r7, #20
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff f954 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009070:	e047      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009072:	4b95      	ldr	r3, [pc, #596]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800907a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800907e:	d10b      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009086:	d107      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009088:	f107 0308 	add.w	r3, r7, #8
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff faab 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
 8009096:	e034      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009098:	4b8b      	ldr	r3, [pc, #556]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d10d      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090aa:	d109      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090ac:	4b86      	ldr	r3, [pc, #536]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	08db      	lsrs	r3, r3, #3
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	4a85      	ldr	r2, [pc, #532]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80090b8:	fa22 f303 	lsr.w	r3, r2, r3
 80090bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090be:	e020      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80090c0:	4b81      	ldr	r3, [pc, #516]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090cc:	d106      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d4:	d102      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80090d6:	4b7e      	ldr	r3, [pc, #504]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090da:	e012      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80090dc:	4b7a      	ldr	r3, [pc, #488]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d107      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090f0:	d103      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80090f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f8:	e003      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090fe:	f000 bf1e 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009102:	f000 bf1c 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009106:	4b70      	ldr	r3, [pc, #448]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800910c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009118:	f7fd fd90 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 800911c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800911e:	f000 bf0e 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009122:	4b69      	ldr	r3, [pc, #420]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800912a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800912e:	d10b      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009136:	d107      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009138:	f107 0314 	add.w	r3, r7, #20
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff f8e9 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
 8009146:	e047      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009148:	4b5f      	ldr	r3, [pc, #380]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009154:	d10b      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800915c:	d107      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800915e:	f107 0308 	add.w	r3, r7, #8
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fa40 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	637b      	str	r3, [r7, #52]	@ 0x34
 800916c:	e034      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800916e:	4b56      	ldr	r3, [pc, #344]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b02      	cmp	r3, #2
 8009178:	d10d      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009180:	d109      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009182:	4b51      	ldr	r3, [pc, #324]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	08db      	lsrs	r3, r3, #3
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	4a4f      	ldr	r2, [pc, #316]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800918e:	fa22 f303 	lsr.w	r3, r2, r3
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
 8009194:	e020      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009196:	4b4c      	ldr	r3, [pc, #304]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800919e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a2:	d106      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091aa:	d102      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80091ac:	4b48      	ldr	r3, [pc, #288]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80091ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b0:	e012      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80091b2:	4b45      	ldr	r3, [pc, #276]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d107      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80091c6:	d103      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80091c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ce:	e003      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091d4:	f000 beb3 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80091d8:	f000 beb1 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80091dc:	4b3a      	ldr	r3, [pc, #232]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091e2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80091e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d104      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091ee:	f7fd fd51 	bl	8006c94 <HAL_RCC_GetPCLK3Freq>
 80091f2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80091f4:	f000 bea3 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091fe:	d108      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff f885 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800920e:	f000 be96 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009218:	d108      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f9e2 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009228:	f000 be89 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800922c:	4b26      	ldr	r3, [pc, #152]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b02      	cmp	r3, #2
 8009236:	d10d      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8009238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800923e:	d109      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009240:	4b21      	ldr	r3, [pc, #132]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	08db      	lsrs	r3, r3, #3
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	4a20      	ldr	r2, [pc, #128]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800924c:	fa22 f303 	lsr.w	r3, r2, r3
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
 8009252:	e020      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009254:	4b1c      	ldr	r3, [pc, #112]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800925c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009260:	d106      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009268:	d102      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800926a:	4b19      	ldr	r3, [pc, #100]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800926c:	637b      	str	r3, [r7, #52]	@ 0x34
 800926e:	e012      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009270:	4b15      	ldr	r3, [pc, #84]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b02      	cmp	r3, #2
 800927c:	d107      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009284:	d103      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8009286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
 800928c:	e003      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009292:	f000 be54 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009296:	f000 be52 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800929a:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800929c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d104      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80092ac:	f7fd fcaa 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 80092b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80092b2:	f000 be44 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10b      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80092bc:	f7fd fb76 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 80092c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092c2:	f000 be3c 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80092c6:	bf00      	nop
 80092c8:	44020c00 	.word	0x44020c00
 80092cc:	03d09000 	.word	0x03d09000
 80092d0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d108      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff f818 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e8:	f000 be29 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80092ec:	4b9f      	ldr	r3, [pc, #636]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f8:	d105      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d102      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8009300:	4b9b      	ldr	r3, [pc, #620]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8009302:	637b      	str	r3, [r7, #52]	@ 0x34
 8009304:	e023      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009306:	4b99      	ldr	r3, [pc, #612]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d10c      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8009312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009314:	2b04      	cmp	r3, #4
 8009316:	d109      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009318:	4b94      	ldr	r3, [pc, #592]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	4a94      	ldr	r2, [pc, #592]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009324:	fa22 f303 	lsr.w	r3, r2, r3
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
 800932a:	e010      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800932c:	4b8f      	ldr	r3, [pc, #572]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009338:	d105      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	2b05      	cmp	r3, #5
 800933e:	d102      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8009340:	4b8d      	ldr	r3, [pc, #564]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009342:	637b      	str	r3, [r7, #52]	@ 0x34
 8009344:	e003      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800934a:	f000 bdf8 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800934e:	f000 bdf6 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009352:	4b86      	ldr	r3, [pc, #536]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800935e:	4b83      	ldr	r3, [pc, #524]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b02      	cmp	r3, #2
 800936a:	d106      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8009372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
 8009378:	e012      	b.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800937a:	4b7c      	ldr	r3, [pc, #496]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800937c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009388:	d106      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	2b08      	cmp	r3, #8
 800938e:	d103      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8009390:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
 8009396:	e003      	b.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800939c:	f000 bdcf 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80093a0:	f000 bdcd 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093a4:	4b71      	ldr	r3, [pc, #452]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093b6:	f7fd fc41 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 80093ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80093bc:	f000 bdbf 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093c6:	d108      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff f90b 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093d6:	f000 bdb2 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093da:	4b64      	ldr	r3, [pc, #400]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d10d      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ec:	d109      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093ee:	4b5f      	ldr	r3, [pc, #380]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	08db      	lsrs	r3, r3, #3
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	4a5e      	ldr	r2, [pc, #376]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80093fa:	fa22 f303 	lsr.w	r3, r2, r3
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009400:	e011      	b.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009402:	4b5a      	ldr	r3, [pc, #360]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800940a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940e:	d106      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009416:	d102      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8009418:	4b57      	ldr	r3, [pc, #348]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
 800941c:	e003      	b.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009422:	f000 bd8c 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009426:	f000 bd8a 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800942a:	4b50      	ldr	r3, [pc, #320]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800942c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009430:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009434:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800943c:	f7fd fbfe 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8009440:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009442:	f000 bd7c 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800944c:	d108      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944e:	f107 0308 	add.w	r3, r7, #8
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff f8c8 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800945c:	f000 bd6f 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009460:	4b42      	ldr	r3, [pc, #264]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b02      	cmp	r3, #2
 800946a:	d10d      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009472:	d109      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009474:	4b3d      	ldr	r3, [pc, #244]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	08db      	lsrs	r3, r3, #3
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	4a3d      	ldr	r2, [pc, #244]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
 8009486:	e011      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009488:	4b38      	ldr	r3, [pc, #224]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009494:	d106      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800949c:	d102      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800949e:	4b36      	ldr	r3, [pc, #216]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a2:	e003      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094a8:	f000 bd49 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094ac:	f000 bd47 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80094b0:	4b2e      	ldr	r3, [pc, #184]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80094ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80094c2:	f7fd fbe7 	bl	8006c94 <HAL_RCC_GetPCLK3Freq>
 80094c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80094c8:	f000 bd39 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094d2:	d108      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff f885 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094e2:	f000 bd2c 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80094e6:	4b21      	ldr	r3, [pc, #132]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d10d      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094f8:	d109      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094fa:	4b1c      	ldr	r3, [pc, #112]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	f003 0303 	and.w	r3, r3, #3
 8009504:	4a1b      	ldr	r2, [pc, #108]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009506:	fa22 f303 	lsr.w	r3, r2, r3
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
 800950c:	e011      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800950e:	4b17      	ldr	r3, [pc, #92]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800951a:	d106      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009522:	d102      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8009524:	4b14      	ldr	r3, [pc, #80]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
 8009528:	e003      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800952e:	f000 bd06 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009532:	f000 bd04 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009536:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800953c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009540:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	2b00      	cmp	r3, #0
 8009546:	d104      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009548:	f7fd fb78 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 800954c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800954e:	f000 bcf6 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009558:	d110      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955a:	f107 0308 	add.w	r3, r7, #8
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff f842 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009568:	f000 bce9 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800956c:	44020c00 	.word	0x44020c00
 8009570:	016e3600 	.word	0x016e3600
 8009574:	03d09000 	.word	0x03d09000
 8009578:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800957c:	4ba4      	ldr	r3, [pc, #656]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b02      	cmp	r3, #2
 8009586:	d10e      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800958e:	d10a      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009590:	4b9f      	ldr	r3, [pc, #636]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	08db      	lsrs	r3, r3, #3
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	4a9e      	ldr	r2, [pc, #632]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800959c:	fa22 f303 	lsr.w	r3, r2, r3
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095a2:	f000 bccc 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095aa:	f000 bcc8 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80095ae:	4b98      	ldr	r3, [pc, #608]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80095b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80095b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095c0:	f7fd fb68 	bl	8006c94 <HAL_RCC_GetPCLK3Freq>
 80095c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80095c6:	f000 bcba 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095d0:	d108      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	f107 0308 	add.w	r3, r7, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff f806 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095e0:	f000 bcad 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80095e4:	4b8a      	ldr	r3, [pc, #552]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d10e      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095f6:	d10a      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095f8:	4b85      	ldr	r3, [pc, #532]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a84      	ldr	r2, [pc, #528]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800960a:	f000 bc98 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009612:	f000 bc94 	b.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009616:	4b7e      	ldr	r3, [pc, #504]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009618:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800961c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009620:	633b      	str	r3, [r7, #48]	@ 0x30
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009628:	d056      	beq.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009630:	f200 808b 	bhi.w	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800963a:	d03e      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009642:	f200 8082 	bhi.w	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800964c:	d027      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009654:	d879      	bhi.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800965c:	d017      	beq.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	d871      	bhi.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8009674:	e069      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009676:	f7fd fb0d 	bl	8006c94 <HAL_RCC_GetPCLK3Freq>
 800967a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800967c:	e068      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fe46 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800968c:	e060      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe ffa8 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800969c:	e058      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800969e:	4b5c      	ldr	r3, [pc, #368]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d103      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80096ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096b2:	e04d      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096b8:	e04a      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80096ba:	4b55      	ldr	r3, [pc, #340]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096c8:	d103      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80096ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096d0:	e03e      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096d6:	e03b      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096d8:	4b4d      	ldr	r3, [pc, #308]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096de:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096e4:	4b4a      	ldr	r3, [pc, #296]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d10c      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80096f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d109      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096f6:	4b46      	ldr	r3, [pc, #280]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	08db      	lsrs	r3, r3, #3
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	4a44      	ldr	r2, [pc, #272]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	637b      	str	r3, [r7, #52]	@ 0x34
 8009708:	e01e      	b.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800970a:	4b41      	ldr	r3, [pc, #260]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009716:	d106      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d102      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009720:	4b3d      	ldr	r3, [pc, #244]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
 8009724:	e010      	b.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009726:	4b3a      	ldr	r3, [pc, #232]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009732:	d106      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8009734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800973a:	d102      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800973c:	4b37      	ldr	r3, [pc, #220]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800973e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009740:	e002      	b.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009746:	e003      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800974e:	bf00      	nop
          }
        }
        break;
 8009750:	e3f5      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009752:	4b2f      	ldr	r3, [pc, #188]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009754:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009758:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800975c:	633b      	str	r3, [r7, #48]	@ 0x30
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009764:	d05f      	beq.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800976c:	f200 8094 	bhi.w	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009776:	d03f      	beq.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8009778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800977e:	f200 808b 	bhi.w	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009788:	d028      	beq.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009790:	f200 8082 	bhi.w	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800979a:	d017      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a2:	d879      	bhi.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b0:	d004      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80097b2:	e071      	b.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80097b4:	f7fd fa42 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 80097b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80097ba:	e070      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fda7 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ca:	e068      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe ff09 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097da:	e060      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80097dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d103      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80097ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097f0:	e055      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097f6:	e052      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80097f8:	4b05      	ldr	r3, [pc, #20]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009806:	d10b      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8009808:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800980e:	e046      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009810:	44020c00 	.word	0x44020c00
 8009814:	03d09000 	.word	0x03d09000
 8009818:	003d0900 	.word	0x003d0900
 800981c:	016e3600 	.word	0x016e3600
              frequency = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009824:	e03b      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009826:	4bae      	ldr	r3, [pc, #696]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800982c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009830:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009832:	4bab      	ldr	r3, [pc, #684]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b02      	cmp	r3, #2
 800983c:	d10c      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009844:	4ba6      	ldr	r3, [pc, #664]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	08db      	lsrs	r3, r3, #3
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	4aa5      	ldr	r2, [pc, #660]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
 8009854:	637b      	str	r3, [r7, #52]	@ 0x34
 8009856:	e01e      	b.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009858:	4ba1      	ldr	r3, [pc, #644]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009864:	d106      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8009866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800986c:	d102      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800986e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
 8009872:	e010      	b.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009874:	4b9a      	ldr	r3, [pc, #616]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800987c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009880:	d106      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8009882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009888:	d102      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800988a:	4b98      	ldr	r3, [pc, #608]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800988c:	637b      	str	r3, [r7, #52]	@ 0x34
 800988e:	e002      	b.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009894:	e003      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009896:	e002      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800989c:	bf00      	nop
          }
        }
        break;
 800989e:	e34e      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098a0:	4b8f      	ldr	r3, [pc, #572]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80098a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80098ac:	4b8c      	ldr	r3, [pc, #560]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098b8:	d105      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80098c0:	4b8a      	ldr	r3, [pc, #552]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80098c4:	e33b      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ce:	f107 0320 	add.w	r3, r7, #32
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fbb4 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098dc:	e32f      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e4:	d107      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0314 	add.w	r3, r7, #20
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fd12 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f4:	e323      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098fa:	e320      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80098fc:	4b78      	ldr	r3, [pc, #480]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80098fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	633b      	str	r3, [r7, #48]	@ 0x30
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	2b04      	cmp	r3, #4
 800990c:	d860      	bhi.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800990e:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	08009929 	.word	0x08009929
 8009918:	08009939 	.word	0x08009939
 800991c:	08009949 	.word	0x08009949
 8009920:	08009959 	.word	0x08009959
 8009924:	0800995f 	.word	0x0800995f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009928:	f107 0320 	add.w	r3, r7, #32
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fb87 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009936:	e04e      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009938:	f107 0314 	add.w	r3, r7, #20
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fce9 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009946:	e046      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009948:	f107 0308 	add.w	r3, r7, #8
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe fe4b 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009956:	e03e      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009958:	4b65      	ldr	r3, [pc, #404]	@ (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800995c:	e03b      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800995e:	4b60      	ldr	r3, [pc, #384]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009964:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009968:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800996a:	4b5d      	ldr	r3, [pc, #372]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b02      	cmp	r3, #2
 8009974:	d10c      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800997c:	4b58      	ldr	r3, [pc, #352]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	08db      	lsrs	r3, r3, #3
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	4a57      	ldr	r2, [pc, #348]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	637b      	str	r3, [r7, #52]	@ 0x34
 800998e:	e01e      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009990:	4b53      	ldr	r3, [pc, #332]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800999c:	d106      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099a4:	d102      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099a6:	4b50      	ldr	r3, [pc, #320]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099aa:	e010      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099ac:	4b4c      	ldr	r3, [pc, #304]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099b8:	d106      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80099ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c0:	d102      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099c2:	4b4a      	ldr	r3, [pc, #296]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c6:	e002      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099cc:	e003      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80099ce:	e002      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099d4:	bf00      	nop
          }
        }
        break;
 80099d6:	e2b2      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80099d8:	4b41      	ldr	r3, [pc, #260]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80099da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	f200 80a4 	bhi.w	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80099ec:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a79 	.word	0x08009a79
 80099f8:	08009b35 	.word	0x08009b35
 80099fc:	08009b35 	.word	0x08009b35
 8009a00:	08009b35 	.word	0x08009b35
 8009a04:	08009b35 	.word	0x08009b35
 8009a08:	08009b35 	.word	0x08009b35
 8009a0c:	08009b35 	.word	0x08009b35
 8009a10:	08009b35 	.word	0x08009b35
 8009a14:	08009a89 	.word	0x08009a89
 8009a18:	08009b35 	.word	0x08009b35
 8009a1c:	08009b35 	.word	0x08009b35
 8009a20:	08009b35 	.word	0x08009b35
 8009a24:	08009b35 	.word	0x08009b35
 8009a28:	08009b35 	.word	0x08009b35
 8009a2c:	08009b35 	.word	0x08009b35
 8009a30:	08009b35 	.word	0x08009b35
 8009a34:	08009a99 	.word	0x08009a99
 8009a38:	08009b35 	.word	0x08009b35
 8009a3c:	08009b35 	.word	0x08009b35
 8009a40:	08009b35 	.word	0x08009b35
 8009a44:	08009b35 	.word	0x08009b35
 8009a48:	08009b35 	.word	0x08009b35
 8009a4c:	08009b35 	.word	0x08009b35
 8009a50:	08009b35 	.word	0x08009b35
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009b35 	.word	0x08009b35
 8009a5c:	08009b35 	.word	0x08009b35
 8009a60:	08009b35 	.word	0x08009b35
 8009a64:	08009b35 	.word	0x08009b35
 8009a68:	08009b35 	.word	0x08009b35
 8009a6c:	08009b35 	.word	0x08009b35
 8009a70:	08009b35 	.word	0x08009b35
 8009a74:	08009aaf 	.word	0x08009aaf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a78:	f107 0320 	add.w	r3, r7, #32
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fadf 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a86:	e058      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a88:	f107 0314 	add.w	r3, r7, #20
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fc41 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a96:	e050      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a98:	f107 0308 	add.w	r3, r7, #8
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fda3 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aa6:	e048      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009aa8:	4b11      	ldr	r3, [pc, #68]	@ (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aac:	e045      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ab4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009aba:	4b09      	ldr	r3, [pc, #36]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d116      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d113      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009acc:	4b04      	ldr	r3, [pc, #16]	@ (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	08db      	lsrs	r3, r3, #3
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	4a03      	ldr	r2, [pc, #12]	@ (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8009adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ade:	e028      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009ae0:	44020c00 	.word	0x44020c00
 8009ae4:	03d09000 	.word	0x03d09000
 8009ae8:	003d0900 	.word	0x003d0900
 8009aec:	016e3600 	.word	0x016e3600
 8009af0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009af4:	4b95      	ldr	r3, [pc, #596]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b00:	d106      	bne.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b08:	d102      	bne.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b0a:	4b91      	ldr	r3, [pc, #580]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0e:	e010      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b10:	4b8e      	ldr	r3, [pc, #568]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b1c:	d106      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8009b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b24:	d102      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b26:	4b8b      	ldr	r3, [pc, #556]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2a:	e002      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b30:	e003      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009b32:	e002      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b38:	bf00      	nop
          }
        }
        break;
 8009b3a:	e200      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009b3c:	4b83      	ldr	r3, [pc, #524]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b42:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b4e:	d031      	beq.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b56:	d866      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b5c:	d027      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b62:	d860      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b66:	2b80      	cmp	r3, #128	@ 0x80
 8009b68:	d019      	beq.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	2b80      	cmp	r3, #128	@ 0x80
 8009b6e:	d85a      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d008      	beq.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009b7c:	e053      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b7e:	f107 0320 	add.w	r3, r7, #32
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fa5c 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b8c:	e04e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b8e:	f107 0314 	add.w	r3, r7, #20
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fbbe 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b9c:	e046      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe fd20 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bac:	e03e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009bae:	4b6a      	ldr	r3, [pc, #424]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bb2:	e03b      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bb4:	4b65      	ldr	r3, [pc, #404]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bc0:	4b62      	ldr	r3, [pc, #392]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d10c      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d109      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be4:	e01e      	b.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009be6:	4b59      	ldr	r3, [pc, #356]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf2:	d106      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfa:	d102      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bfc:	4b54      	ldr	r3, [pc, #336]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c00:	e010      	b.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c02:	4b52      	ldr	r3, [pc, #328]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c0e:	d106      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c16:	d102      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c18:	4b4e      	ldr	r3, [pc, #312]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1c:	e002      	b.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c22:	e003      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c2a:	bf00      	nop
          }
        }
        break;
 8009c2c:	e187      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009c2e:	4b47      	ldr	r3, [pc, #284]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c34:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009c38:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d103      	bne.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009c40:	f7fd f812 	bl	8006c68 <HAL_RCC_GetPCLK2Freq>
 8009c44:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009c46:	e17a      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009c48:	4b40      	ldr	r3, [pc, #256]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c54:	d10b      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c5c:	d107      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c5e:	f107 0314 	add.w	r3, r7, #20
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fb56 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c6c:	e045      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009c6e:	4b37      	ldr	r3, [pc, #220]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c7a:	d10b      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c82:	d107      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fcad 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c92:	e032      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009c94:	4b2d      	ldr	r3, [pc, #180]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d10d      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ca6:	d109      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ca8:	4b28      	ldr	r3, [pc, #160]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	08db      	lsrs	r3, r3, #3
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cba:	e01e      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009cbc:	4b23      	ldr	r3, [pc, #140]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc8:	d106      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd0:	d102      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8009cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd6:	e010      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ce4:	d106      	bne.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009cec:	d102      	bne.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8009cee:	4b19      	ldr	r3, [pc, #100]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf2:	e002      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf8:	e121      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009cfa:	e120      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009cfc:	4b13      	ldr	r3, [pc, #76]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d861      	bhi.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d25 	.word	0x08009d25
 8009d18:	08009d2d 	.word	0x08009d2d
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	08009d61 	.word	0x08009d61

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009d24:	f7fc ff6e 	bl	8006c04 <HAL_RCC_GetHCLKFreq>
 8009d28:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009d2a:	e055      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d2c:	f107 0320 	add.w	r3, r7, #32
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe f985 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d3a:	e04d      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d3c:	f107 0314 	add.w	r3, r7, #20
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fae7 	bl	8008314 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d4a:	e045      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009d4c:	44020c00 	.word	0x44020c00
 8009d50:	003d0900 	.word	0x003d0900
 8009d54:	016e3600 	.word	0x016e3600
 8009d58:	00bb8000 	.word	0x00bb8000
 8009d5c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d60:	4b79      	ldr	r3, [pc, #484]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d6c:	4b76      	ldr	r3, [pc, #472]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d10c      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d7e:	4b72      	ldr	r3, [pc, #456]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	08db      	lsrs	r3, r3, #3
 8009d84:	f003 0303 	and.w	r3, r3, #3
 8009d88:	4a70      	ldr	r2, [pc, #448]	@ (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d90:	e01e      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d92:	4b6d      	ldr	r3, [pc, #436]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d9e:	d106      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da6:	d102      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009da8:	4b69      	ldr	r3, [pc, #420]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dac:	e010      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dae:	4b66      	ldr	r3, [pc, #408]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009db6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dba:	d106      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dc2:	d102      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dc4:	4b63      	ldr	r3, [pc, #396]	@ (8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc8:	e002      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dce:	e003      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dd6:	bf00      	nop
          }
        }
        break;
 8009dd8:	e0b1      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009dda:	4b5b      	ldr	r3, [pc, #364]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009de0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009de4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009de6:	4b58      	ldr	r3, [pc, #352]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d106      	bne.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e00:	e01f      	b.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009e02:	4b51      	ldr	r3, [pc, #324]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e10:	d106      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	2b40      	cmp	r3, #64	@ 0x40
 8009e16:	d103      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8009e18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1e:	e010      	b.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009e20:	4b49      	ldr	r3, [pc, #292]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e2c:	d106      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d103      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009e34:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3a:	e002      	b.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009e40:	e07d      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009e42:	e07c      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009e44:	4b40      	ldr	r3, [pc, #256]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009e50:	4b3d      	ldr	r3, [pc, #244]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e5c:	d105      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009e64:	4b3c      	ldr	r3, [pc, #240]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e68:	e031      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009e6a:	4b37      	ldr	r3, [pc, #220]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e76:	d10a      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d107      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e7e:	f107 0320 	add.w	r3, r7, #32
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe f8dc 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8c:	e01f      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d106      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	d103      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea8:	e011      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009eaa:	4b27      	ldr	r3, [pc, #156]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eb8:	d106      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2b30      	cmp	r3, #48	@ 0x30
 8009ebe:	d103      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009ec0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec6:	e002      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009ecc:	e037      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009ece:	e036      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ed2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ed6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009eda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d107      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ee2:	f107 0320 	add.w	r3, r7, #32
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe f8aa 	bl	8008040 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009ef0:	e025      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009ef2:	4b15      	ldr	r3, [pc, #84]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009efe:	d10a      	bne.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d107      	bne.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fb6c 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f14:	e00f      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009f16:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f22:	d105      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	2b30      	cmp	r3, #48	@ 0x30
 8009f28:	d102      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2e:	e002      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009f36:	e002      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f3c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	373c      	adds	r7, #60	@ 0x3c
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd90      	pop	{r4, r7, pc}
 8009f48:	44020c00 	.word	0x44020c00
 8009f4c:	03d09000 	.word	0x03d09000
 8009f50:	003d0900 	.word	0x003d0900
 8009f54:	016e3600 	.word	0x016e3600
 8009f58:	02dc6c00 	.word	0x02dc6c00

08009f5c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009f64:	4b48      	ldr	r3, [pc, #288]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a47      	ldr	r2, [pc, #284]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f70:	f7fb f9a4 	bl	80052bc <HAL_GetTick>
 8009f74:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f76:	e008      	b.n	8009f8a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f78:	f7fb f9a0 	bl	80052bc <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d901      	bls.n	8009f8a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e07a      	b.n	800a080 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f8a:	4b3f      	ldr	r3, [pc, #252]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1f0      	bne.n	8009f78 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009f96:	4b3c      	ldr	r3, [pc, #240]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6811      	ldr	r1, [r2, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6852      	ldr	r2, [r2, #4]
 8009faa:	0212      	lsls	r2, r2, #8
 8009fac:	430a      	orrs	r2, r1
 8009fae:	4936      	ldr	r1, [pc, #216]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	025b      	lsls	r3, r3, #9
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	041b      	lsls	r3, r3, #16
 8009fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	061b      	lsls	r3, r3, #24
 8009fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009fe4:	4928      	ldr	r1, [pc, #160]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009fea:	4b27      	ldr	r3, [pc, #156]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fee:	f023 020c 	bic.w	r2, r3, #12
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	4924      	ldr	r1, [pc, #144]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009ffc:	4b22      	ldr	r3, [pc, #136]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 8009ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a000:	f023 0220 	bic.w	r2, r3, #32
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	491f      	ldr	r1, [pc, #124]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a00e:	4b1e      	ldr	r3, [pc, #120]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a016:	491c      	ldr	r1, [pc, #112]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a01c:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	4a19      	ldr	r2, [pc, #100]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a022:	f023 0310 	bic.w	r3, r3, #16
 800a026:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a028:	4b17      	ldr	r3, [pc, #92]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a030:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6a12      	ldr	r2, [r2, #32]
 800a038:	00d2      	lsls	r2, r2, #3
 800a03a:	4913      	ldr	r1, [pc, #76]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a040:	4b11      	ldr	r3, [pc, #68]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a044:	4a10      	ldr	r2, [pc, #64]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a046:	f043 0310 	orr.w	r3, r3, #16
 800a04a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a04c:	4b0e      	ldr	r3, [pc, #56]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0d      	ldr	r2, [pc, #52]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a052:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a056:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a058:	f7fb f930 	bl	80052bc <HAL_GetTick>
 800a05c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a05e:	e008      	b.n	800a072 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a060:	f7fb f92c 	bl	80052bc <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d901      	bls.n	800a072 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e006      	b.n	800a080 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a072:	4b05      	ldr	r3, [pc, #20]	@ (800a088 <RCCEx_PLL2_Config+0x12c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f0      	beq.n	800a060 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0

}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	44020c00 	.word	0x44020c00

0800a08c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a094:	4b48      	ldr	r3, [pc, #288]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a47      	ldr	r2, [pc, #284]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a09a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a09e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0a0:	f7fb f90c 	bl	80052bc <HAL_GetTick>
 800a0a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0a6:	e008      	b.n	800a0ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0a8:	f7fb f908 	bl	80052bc <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d901      	bls.n	800a0ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e07a      	b.n	800a1b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1f0      	bne.n	800a0a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a0c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	6811      	ldr	r1, [r2, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6852      	ldr	r2, [r2, #4]
 800a0da:	0212      	lsls	r2, r2, #8
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	4936      	ldr	r1, [pc, #216]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	630b      	str	r3, [r1, #48]	@ 0x30
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	025b      	lsls	r3, r3, #9
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	041b      	lsls	r3, r3, #16
 800a102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	061b      	lsls	r3, r3, #24
 800a110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a114:	4928      	ldr	r1, [pc, #160]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a116:	4313      	orrs	r3, r2
 800a118:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a11a:	4b27      	ldr	r3, [pc, #156]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11e:	f023 020c 	bic.w	r2, r3, #12
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	4924      	ldr	r1, [pc, #144]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a12c:	4b22      	ldr	r3, [pc, #136]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a130:	f023 0220 	bic.w	r2, r3, #32
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	491f      	ldr	r1, [pc, #124]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a13e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	491c      	ldr	r1, [pc, #112]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a14c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a150:	4a19      	ldr	r2, [pc, #100]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a158:	4b17      	ldr	r3, [pc, #92]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a15a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a15c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a160:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6a12      	ldr	r2, [r2, #32]
 800a168:	00d2      	lsls	r2, r2, #3
 800a16a:	4913      	ldr	r1, [pc, #76]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a170:	4b11      	ldr	r3, [pc, #68]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a174:	4a10      	ldr	r2, [pc, #64]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a176:	f043 0310 	orr.w	r3, r3, #16
 800a17a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a17c:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0d      	ldr	r2, [pc, #52]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a186:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a188:	f7fb f898 	bl	80052bc <HAL_GetTick>
 800a18c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a18e:	e008      	b.n	800a1a2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a190:	f7fb f894 	bl	80052bc <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d901      	bls.n	800a1a2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e006      	b.n	800a1b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1a2:	4b05      	ldr	r3, [pc, #20]	@ (800a1b8 <RCCEx_PLL3_Config+0x12c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0f0      	beq.n	800a190 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	44020c00 	.word	0x44020c00

0800a1bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e10d      	b.n	800a3ea <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a88      	ldr	r2, [pc, #544]	@ (800a3f4 <HAL_SPI_Init+0x238>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d004      	beq.n	800a1e2 <HAL_SPI_Init+0x26>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a86      	ldr	r2, [pc, #536]	@ (800a3f8 <HAL_SPI_Init+0x23c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	e000      	b.n	800a1e4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a1e2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a81      	ldr	r2, [pc, #516]	@ (800a3f4 <HAL_SPI_Init+0x238>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d004      	beq.n	800a1fe <HAL_SPI_Init+0x42>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a7f      	ldr	r2, [pc, #508]	@ (800a3f8 <HAL_SPI_Init+0x23c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d105      	bne.n	800a20a <HAL_SPI_Init+0x4e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b0f      	cmp	r3, #15
 800a204:	d901      	bls.n	800a20a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e0ef      	b.n	800a3ea <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fc3a 	bl	800aa84 <SPI_GetPacketSize>
 800a210:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a77      	ldr	r2, [pc, #476]	@ (800a3f4 <HAL_SPI_Init+0x238>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d004      	beq.n	800a226 <HAL_SPI_Init+0x6a>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a75      	ldr	r2, [pc, #468]	@ (800a3f8 <HAL_SPI_Init+0x23c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d102      	bne.n	800a22c <HAL_SPI_Init+0x70>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d820      	bhi.n	800a26e <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a230:	4a72      	ldr	r2, [pc, #456]	@ (800a3fc <HAL_SPI_Init+0x240>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d018      	beq.n	800a268 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a71      	ldr	r2, [pc, #452]	@ (800a400 <HAL_SPI_Init+0x244>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d013      	beq.n	800a268 <HAL_SPI_Init+0xac>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a6f      	ldr	r2, [pc, #444]	@ (800a404 <HAL_SPI_Init+0x248>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00e      	beq.n	800a268 <HAL_SPI_Init+0xac>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a6e      	ldr	r2, [pc, #440]	@ (800a408 <HAL_SPI_Init+0x24c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d009      	beq.n	800a268 <HAL_SPI_Init+0xac>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a6c      	ldr	r2, [pc, #432]	@ (800a40c <HAL_SPI_Init+0x250>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <HAL_SPI_Init+0xac>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a6b      	ldr	r2, [pc, #428]	@ (800a410 <HAL_SPI_Init+0x254>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d104      	bne.n	800a272 <HAL_SPI_Init+0xb6>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b10      	cmp	r3, #16
 800a26c:	d901      	bls.n	800a272 <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e0bb      	b.n	800a3ea <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fa fa5e 	bl	8004748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0201 	bic.w	r2, r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2b8:	d119      	bne.n	800a2ee <HAL_SPI_Init+0x132>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2c2:	d103      	bne.n	800a2cc <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2dc:	d107      	bne.n	800a2ee <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00f      	beq.n	800a31a <HAL_SPI_Init+0x15e>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	2b06      	cmp	r3, #6
 800a300:	d90b      	bls.n	800a31a <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	e007      	b.n	800a32a <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a328:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	69da      	ldr	r2, [r3, #28]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a332:	431a      	orrs	r2, r3
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	431a      	orrs	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33c:	ea42 0103 	orr.w	r1, r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a354:	431a      	orrs	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	431a      	orrs	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	431a      	orrs	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	431a      	orrs	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a390:	431a      	orrs	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a396:	ea42 0103 	orr.w	r1, r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0201 	bic.w	r2, r2, #1
 800a3b4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40014c00 	.word	0x40014c00
 800a3f8:	50014c00 	.word	0x50014c00
 800a3fc:	40013000 	.word	0x40013000
 800a400:	50013000 	.word	0x50013000
 800a404:	40003800 	.word	0x40003800
 800a408:	50003800 	.word	0x50003800
 800a40c:	40003c00 	.word	0x40003c00
 800a410:	50003c00 	.word	0x50003c00

0800a414 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08c      	sub	sp, #48	@ 0x30
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3320      	adds	r3, #32
 800a428:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3330      	adds	r3, #48	@ 0x30
 800a430:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a432:	f7fa ff43 	bl	80052bc <HAL_GetTick>
 800a436:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800a438:	887b      	ldrh	r3, [r7, #2]
 800a43a:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 800a43c:	887b      	ldrh	r3, [r7, #2]
 800a43e:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d001      	beq.n	800a450 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 800a44c:	2302      	movs	r3, #2
 800a44e:	e247      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x4e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x4e>
 800a45c:	887b      	ldrh	r3, [r7, #2]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e23c      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_SPI_TransmitReceive+0x60>
 800a470:	2302      	movs	r3, #2
 800a472:	e235      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2205      	movs	r2, #5
 800a480:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	887a      	ldrh	r2, [r7, #2]
 800a496:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	887a      	ldrh	r2, [r7, #2]
 800a49e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	887a      	ldrh	r2, [r7, #2]
 800a4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	887a      	ldrh	r2, [r7, #2]
 800a4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a4d2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a72      	ldr	r2, [pc, #456]	@ (800a6a4 <HAL_SPI_TransmitReceive+0x290>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d018      	beq.n	800a510 <HAL_SPI_TransmitReceive+0xfc>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a71      	ldr	r2, [pc, #452]	@ (800a6a8 <HAL_SPI_TransmitReceive+0x294>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d013      	beq.n	800a510 <HAL_SPI_TransmitReceive+0xfc>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a6f      	ldr	r2, [pc, #444]	@ (800a6ac <HAL_SPI_TransmitReceive+0x298>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00e      	beq.n	800a510 <HAL_SPI_TransmitReceive+0xfc>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a6e      	ldr	r2, [pc, #440]	@ (800a6b0 <HAL_SPI_TransmitReceive+0x29c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d009      	beq.n	800a510 <HAL_SPI_TransmitReceive+0xfc>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a6c      	ldr	r2, [pc, #432]	@ (800a6b4 <HAL_SPI_TransmitReceive+0x2a0>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d004      	beq.n	800a510 <HAL_SPI_TransmitReceive+0xfc>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a6b      	ldr	r2, [pc, #428]	@ (800a6b8 <HAL_SPI_TransmitReceive+0x2a4>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d102      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a510:	2310      	movs	r3, #16
 800a512:	627b      	str	r3, [r7, #36]	@ 0x24
 800a514:	e001      	b.n	800a51a <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a516:	2308      	movs	r3, #8
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	0c1b      	lsrs	r3, r3, #16
 800a522:	041b      	lsls	r3, r3, #16
 800a524:	8879      	ldrh	r1, [r7, #2]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	6812      	ldr	r2, [r2, #0]
 800a52a:	430b      	orrs	r3, r1
 800a52c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f042 0201 	orr.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a546:	d107      	bne.n	800a558 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b0f      	cmp	r3, #15
 800a55e:	f240 8098 	bls.w	800a692 <HAL_SPI_TransmitReceive+0x27e>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a4f      	ldr	r2, [pc, #316]	@ (800a6a4 <HAL_SPI_TransmitReceive+0x290>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d018      	beq.n	800a59e <HAL_SPI_TransmitReceive+0x18a>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a4d      	ldr	r2, [pc, #308]	@ (800a6a8 <HAL_SPI_TransmitReceive+0x294>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d013      	beq.n	800a59e <HAL_SPI_TransmitReceive+0x18a>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a4c      	ldr	r2, [pc, #304]	@ (800a6ac <HAL_SPI_TransmitReceive+0x298>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d00e      	beq.n	800a59e <HAL_SPI_TransmitReceive+0x18a>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a4a      	ldr	r2, [pc, #296]	@ (800a6b0 <HAL_SPI_TransmitReceive+0x29c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d009      	beq.n	800a59e <HAL_SPI_TransmitReceive+0x18a>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a49      	ldr	r2, [pc, #292]	@ (800a6b4 <HAL_SPI_TransmitReceive+0x2a0>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d004      	beq.n	800a59e <HAL_SPI_TransmitReceive+0x18a>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a47      	ldr	r2, [pc, #284]	@ (800a6b8 <HAL_SPI_TransmitReceive+0x2a4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d179      	bne.n	800a692 <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	089b      	lsrs	r3, r3, #2
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5a4:	e06e      	b.n	800a684 <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d120      	bne.n	800a5f6 <HAL_SPI_TransmitReceive+0x1e2>
 800a5b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a5ba:	8c3a      	ldrh	r2, [r7, #32]
 800a5bc:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d217      	bcs.n	800a5f6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5f4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695a      	ldr	r2, [r3, #20]
 800a5fc:	f248 0308 	movw	r3, #32776	@ 0x8008
 800a600:	4013      	ands	r3, r2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01a      	beq.n	800a63c <HAL_SPI_TransmitReceive+0x228>
 800a606:	8c3b      	ldrh	r3, [r7, #32]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d017      	beq.n	800a63c <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a614:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a616:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61c:	1d1a      	adds	r2, r3, #4
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a63a:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a63c:	f7fa fe3e 	bl	80052bc <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a648:	429a      	cmp	r2, r3
 800a64a:	d803      	bhi.n	800a654 <HAL_SPI_TransmitReceive+0x240>
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d102      	bne.n	800a65a <HAL_SPI_TransmitReceive+0x246>
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	2b00      	cmp	r3, #0
 800a658:	d114      	bne.n	800a684 <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f944 	bl	800a8e8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a666:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e12d      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a684:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a686:	2b00      	cmp	r3, #0
 800a688:	d18d      	bne.n	800a5a6 <HAL_SPI_TransmitReceive+0x192>
 800a68a:	8c3b      	ldrh	r3, [r7, #32]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d18a      	bne.n	800a5a6 <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a690:	e100      	b.n	800a894 <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	2b07      	cmp	r3, #7
 800a698:	f240 80f6 	bls.w	800a888 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	085b      	lsrs	r3, r3, #1
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a6a2:	e078      	b.n	800a796 <HAL_SPI_TransmitReceive+0x382>
 800a6a4:	40013000 	.word	0x40013000
 800a6a8:	50013000 	.word	0x50013000
 800a6ac:	40003800 	.word	0x40003800
 800a6b0:	50003800 	.word	0x50003800
 800a6b4:	40003c00 	.word	0x40003c00
 800a6b8:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d11f      	bne.n	800a70a <HAL_SPI_TransmitReceive+0x2f6>
 800a6ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01c      	beq.n	800a70a <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a6d0:	8c3a      	ldrh	r2, [r7, #32]
 800a6d2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d216      	bcs.n	800a70a <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6e0:	881a      	ldrh	r2, [r3, #0]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ea:	1c9a      	adds	r2, r3, #2
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a708:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b01      	cmp	r3, #1
 800a716:	d11a      	bne.n	800a74e <HAL_SPI_TransmitReceive+0x33a>
 800a718:	8c3b      	ldrh	r3, [r7, #32]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d017      	beq.n	800a74e <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	8812      	ldrh	r2, [r2, #0]
 800a726:	b292      	uxth	r2, r2
 800a728:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a72e:	1c9a      	adds	r2, r3, #2
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a74c:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a74e:	f7fa fdb5 	bl	80052bc <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d803      	bhi.n	800a766 <HAL_SPI_TransmitReceive+0x352>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d102      	bne.n	800a76c <HAL_SPI_TransmitReceive+0x358>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d114      	bne.n	800a796 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f8bb 	bl	800a8e8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e0a4      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d18f      	bne.n	800a6bc <HAL_SPI_TransmitReceive+0x2a8>
 800a79c:	8c3b      	ldrh	r3, [r7, #32]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d18c      	bne.n	800a6bc <HAL_SPI_TransmitReceive+0x2a8>
 800a7a2:	e077      	b.n	800a894 <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d121      	bne.n	800a7f6 <HAL_SPI_TransmitReceive+0x3e2>
 800a7b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01e      	beq.n	800a7f6 <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a7b8:	8c3a      	ldrh	r2, [r7, #32]
 800a7ba:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d218      	bcs.n	800a7f6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3320      	adds	r3, #32
 800a7ce:	7812      	ldrb	r2, [r2, #0]
 800a7d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7f4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b01      	cmp	r3, #1
 800a802:	d11d      	bne.n	800a840 <HAL_SPI_TransmitReceive+0x42c>
 800a804:	8c3b      	ldrh	r3, [r7, #32]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d01a      	beq.n	800a840 <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a816:	7812      	ldrb	r2, [r2, #0]
 800a818:	b2d2      	uxtb	r2, r2
 800a81a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a83e:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a840:	f7fa fd3c 	bl	80052bc <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d803      	bhi.n	800a858 <HAL_SPI_TransmitReceive+0x444>
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a856:	d102      	bne.n	800a85e <HAL_SPI_TransmitReceive+0x44a>
 800a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d114      	bne.n	800a888 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f000 f842 	bl	800a8e8 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a86a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e02b      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a888:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d18a      	bne.n	800a7a4 <HAL_SPI_TransmitReceive+0x390>
 800a88e:	8c3b      	ldrh	r3, [r7, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d187      	bne.n	800a7a4 <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	2200      	movs	r2, #0
 800a89c:	2108      	movs	r1, #8
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 f8c2 	bl	800aa28 <SPI_WaitOnFlagUntilTimeout>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d007      	beq.n	800a8ba <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b0:	f043 0220 	orr.w	r2, r3, #32
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 f814 	bl	800a8e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e000      	b.n	800a8e0 <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 800a8de:	2300      	movs	r3, #0
  }
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3728      	adds	r7, #40	@ 0x28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0208 	orr.w	r2, r2, #8
 800a906:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0210 	orr.w	r2, r2, #16
 800a916:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0201 	bic.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a936:	f023 0303 	bic.w	r3, r3, #3
 800a93a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a94a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b04      	cmp	r3, #4
 800a956:	d014      	beq.n	800a982 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00f      	beq.n	800a982 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a968:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	699a      	ldr	r2, [r3, #24]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0220 	orr.w	r2, r2, #32
 800a980:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d014      	beq.n	800a9b8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00f      	beq.n	800a9b8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a99e:	f043 0204 	orr.w	r2, r3, #4
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699a      	ldr	r2, [r3, #24]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00f      	beq.n	800a9e2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9c8:	f043 0201 	orr.w	r2, r3, #1
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00f      	beq.n	800aa0c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9f2:	f043 0208 	orr.w	r2, r3, #8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa38:	e010      	b.n	800aa5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa3a:	f7fa fc3f 	bl	80052bc <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d803      	bhi.n	800aa52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa50:	d102      	bne.n	800aa58 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e00f      	b.n	800aa7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	695a      	ldr	r2, [r3, #20]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4013      	ands	r3, r2
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2301      	moveq	r3, #1
 800aa6e:	2300      	movne	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d0df      	beq.n	800aa3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	3307      	adds	r3, #7
 800aaa2:	08db      	lsrs	r3, r3, #3
 800aaa4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e049      	b.n	800ab60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f9 feaf 	bl	8004844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4610      	mov	r0, r2
 800aafa:	f000 ff09 	bl	800b910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d001      	beq.n	800ab80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e07c      	b.n	800ac7a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f042 0201 	orr.w	r2, r2, #1
 800ab96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a3a      	ldr	r2, [pc, #232]	@ (800ac88 <HAL_TIM_Base_Start_IT+0x120>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d04a      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a39      	ldr	r2, [pc, #228]	@ (800ac8c <HAL_TIM_Base_Start_IT+0x124>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d045      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abb4:	d040      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abbe:	d03b      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a32      	ldr	r2, [pc, #200]	@ (800ac90 <HAL_TIM_Base_Start_IT+0x128>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d036      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a31      	ldr	r2, [pc, #196]	@ (800ac94 <HAL_TIM_Base_Start_IT+0x12c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d031      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac98 <HAL_TIM_Base_Start_IT+0x130>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d02c      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a2e      	ldr	r2, [pc, #184]	@ (800ac9c <HAL_TIM_Base_Start_IT+0x134>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d027      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a2c      	ldr	r2, [pc, #176]	@ (800aca0 <HAL_TIM_Base_Start_IT+0x138>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d022      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a2b      	ldr	r2, [pc, #172]	@ (800aca4 <HAL_TIM_Base_Start_IT+0x13c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d01d      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a29      	ldr	r2, [pc, #164]	@ (800aca8 <HAL_TIM_Base_Start_IT+0x140>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d018      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a28      	ldr	r2, [pc, #160]	@ (800acac <HAL_TIM_Base_Start_IT+0x144>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d013      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a26      	ldr	r2, [pc, #152]	@ (800acb0 <HAL_TIM_Base_Start_IT+0x148>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00e      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a25      	ldr	r2, [pc, #148]	@ (800acb4 <HAL_TIM_Base_Start_IT+0x14c>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d009      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a23      	ldr	r2, [pc, #140]	@ (800acb8 <HAL_TIM_Base_Start_IT+0x150>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d004      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0xd0>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a22      	ldr	r2, [pc, #136]	@ (800acbc <HAL_TIM_Base_Start_IT+0x154>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d115      	bne.n	800ac64 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	4b20      	ldr	r3, [pc, #128]	@ (800acc0 <HAL_TIM_Base_Start_IT+0x158>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b06      	cmp	r3, #6
 800ac48:	d015      	beq.n	800ac76 <HAL_TIM_Base_Start_IT+0x10e>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac50:	d011      	beq.n	800ac76 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f042 0201 	orr.w	r2, r2, #1
 800ac60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac62:	e008      	b.n	800ac76 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f042 0201 	orr.w	r2, r2, #1
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e000      	b.n	800ac78 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40012c00 	.word	0x40012c00
 800ac8c:	50012c00 	.word	0x50012c00
 800ac90:	40000400 	.word	0x40000400
 800ac94:	50000400 	.word	0x50000400
 800ac98:	40000800 	.word	0x40000800
 800ac9c:	50000800 	.word	0x50000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	50000c00 	.word	0x50000c00
 800aca8:	40013400 	.word	0x40013400
 800acac:	50013400 	.word	0x50013400
 800acb0:	40001800 	.word	0x40001800
 800acb4:	50001800 	.word	0x50001800
 800acb8:	40014000 	.word	0x40014000
 800acbc:	50014000 	.word	0x50014000
 800acc0:	00010007 	.word	0x00010007

0800acc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0201 	bic.w	r2, r2, #1
 800acda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6a1a      	ldr	r2, [r3, #32]
 800ace2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10f      	bne.n	800ad0c <HAL_TIM_Base_Stop_IT+0x48>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6a1a      	ldr	r2, [r3, #32]
 800acf2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d107      	bne.n	800ad0c <HAL_TIM_Base_Stop_IT+0x48>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f022 0201 	bic.w	r2, r2, #1
 800ad0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e049      	b.n	800adc8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f841 	bl	800add0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2202      	movs	r2, #2
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f000 fdd5 	bl	800b910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d109      	bne.n	800ae0c <HAL_TIM_OC_Start_IT+0x28>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	bf14      	ite	ne
 800ae04:	2301      	movne	r3, #1
 800ae06:	2300      	moveq	r3, #0
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	e03c      	b.n	800ae86 <HAL_TIM_OC_Start_IT+0xa2>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d109      	bne.n	800ae26 <HAL_TIM_OC_Start_IT+0x42>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	bf14      	ite	ne
 800ae1e:	2301      	movne	r3, #1
 800ae20:	2300      	moveq	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	e02f      	b.n	800ae86 <HAL_TIM_OC_Start_IT+0xa2>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d109      	bne.n	800ae40 <HAL_TIM_OC_Start_IT+0x5c>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	e022      	b.n	800ae86 <HAL_TIM_OC_Start_IT+0xa2>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b0c      	cmp	r3, #12
 800ae44:	d109      	bne.n	800ae5a <HAL_TIM_OC_Start_IT+0x76>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	bf14      	ite	ne
 800ae52:	2301      	movne	r3, #1
 800ae54:	2300      	moveq	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	e015      	b.n	800ae86 <HAL_TIM_OC_Start_IT+0xa2>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b10      	cmp	r3, #16
 800ae5e:	d109      	bne.n	800ae74 <HAL_TIM_OC_Start_IT+0x90>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	bf14      	ite	ne
 800ae6c:	2301      	movne	r3, #1
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e008      	b.n	800ae86 <HAL_TIM_OC_Start_IT+0xa2>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e11a      	b.n	800b0c4 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d104      	bne.n	800ae9e <HAL_TIM_OC_Start_IT+0xba>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae9c:	e023      	b.n	800aee6 <HAL_TIM_OC_Start_IT+0x102>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d104      	bne.n	800aeae <HAL_TIM_OC_Start_IT+0xca>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aeac:	e01b      	b.n	800aee6 <HAL_TIM_OC_Start_IT+0x102>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d104      	bne.n	800aebe <HAL_TIM_OC_Start_IT+0xda>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aebc:	e013      	b.n	800aee6 <HAL_TIM_OC_Start_IT+0x102>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b0c      	cmp	r3, #12
 800aec2:	d104      	bne.n	800aece <HAL_TIM_OC_Start_IT+0xea>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aecc:	e00b      	b.n	800aee6 <HAL_TIM_OC_Start_IT+0x102>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b10      	cmp	r3, #16
 800aed2:	d104      	bne.n	800aede <HAL_TIM_OC_Start_IT+0xfa>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aedc:	e003      	b.n	800aee6 <HAL_TIM_OC_Start_IT+0x102>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2202      	movs	r2, #2
 800aee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b0c      	cmp	r3, #12
 800aeea:	d841      	bhi.n	800af70 <HAL_TIM_OC_Start_IT+0x18c>
 800aeec:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <HAL_TIM_OC_Start_IT+0x110>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800af29 	.word	0x0800af29
 800aef8:	0800af71 	.word	0x0800af71
 800aefc:	0800af71 	.word	0x0800af71
 800af00:	0800af71 	.word	0x0800af71
 800af04:	0800af3b 	.word	0x0800af3b
 800af08:	0800af71 	.word	0x0800af71
 800af0c:	0800af71 	.word	0x0800af71
 800af10:	0800af71 	.word	0x0800af71
 800af14:	0800af4d 	.word	0x0800af4d
 800af18:	0800af71 	.word	0x0800af71
 800af1c:	0800af71 	.word	0x0800af71
 800af20:	0800af71 	.word	0x0800af71
 800af24:	0800af5f 	.word	0x0800af5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0202 	orr.w	r2, r2, #2
 800af36:	60da      	str	r2, [r3, #12]
      break;
 800af38:	e01d      	b.n	800af76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0204 	orr.w	r2, r2, #4
 800af48:	60da      	str	r2, [r3, #12]
      break;
 800af4a:	e014      	b.n	800af76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0208 	orr.w	r2, r2, #8
 800af5a:	60da      	str	r2, [r3, #12]
      break;
 800af5c:	e00b      	b.n	800af76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68da      	ldr	r2, [r3, #12]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f042 0210 	orr.w	r2, r2, #16
 800af6c:	60da      	str	r2, [r3, #12]
      break;
 800af6e:	e002      	b.n	800af76 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
      break;
 800af74:	bf00      	nop
  }

  if (status == HAL_OK)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f040 80a2 	bne.w	800b0c2 <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2201      	movs	r2, #1
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f001 f97e 	bl	800c288 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a4e      	ldr	r2, [pc, #312]	@ (800b0cc <HAL_TIM_OC_Start_IT+0x2e8>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d018      	beq.n	800afc8 <HAL_TIM_OC_Start_IT+0x1e4>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a4d      	ldr	r2, [pc, #308]	@ (800b0d0 <HAL_TIM_OC_Start_IT+0x2ec>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d013      	beq.n	800afc8 <HAL_TIM_OC_Start_IT+0x1e4>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a4b      	ldr	r2, [pc, #300]	@ (800b0d4 <HAL_TIM_OC_Start_IT+0x2f0>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00e      	beq.n	800afc8 <HAL_TIM_OC_Start_IT+0x1e4>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a4a      	ldr	r2, [pc, #296]	@ (800b0d8 <HAL_TIM_OC_Start_IT+0x2f4>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d009      	beq.n	800afc8 <HAL_TIM_OC_Start_IT+0x1e4>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a48      	ldr	r2, [pc, #288]	@ (800b0dc <HAL_TIM_OC_Start_IT+0x2f8>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d004      	beq.n	800afc8 <HAL_TIM_OC_Start_IT+0x1e4>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a47      	ldr	r2, [pc, #284]	@ (800b0e0 <HAL_TIM_OC_Start_IT+0x2fc>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d101      	bne.n	800afcc <HAL_TIM_OC_Start_IT+0x1e8>
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <HAL_TIM_OC_Start_IT+0x1ea>
 800afcc:	2300      	movs	r3, #0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d007      	beq.n	800afe2 <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a39      	ldr	r2, [pc, #228]	@ (800b0cc <HAL_TIM_OC_Start_IT+0x2e8>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d04a      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a37      	ldr	r2, [pc, #220]	@ (800b0d0 <HAL_TIM_OC_Start_IT+0x2ec>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d045      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affe:	d040      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b008:	d03b      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a35      	ldr	r2, [pc, #212]	@ (800b0e4 <HAL_TIM_OC_Start_IT+0x300>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d036      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a33      	ldr	r2, [pc, #204]	@ (800b0e8 <HAL_TIM_OC_Start_IT+0x304>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d031      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a32      	ldr	r2, [pc, #200]	@ (800b0ec <HAL_TIM_OC_Start_IT+0x308>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d02c      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a30      	ldr	r2, [pc, #192]	@ (800b0f0 <HAL_TIM_OC_Start_IT+0x30c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d027      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a2f      	ldr	r2, [pc, #188]	@ (800b0f4 <HAL_TIM_OC_Start_IT+0x310>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d022      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f8 <HAL_TIM_OC_Start_IT+0x314>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d01d      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a22      	ldr	r2, [pc, #136]	@ (800b0d4 <HAL_TIM_OC_Start_IT+0x2f0>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d018      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a20      	ldr	r2, [pc, #128]	@ (800b0d8 <HAL_TIM_OC_Start_IT+0x2f4>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d013      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a27      	ldr	r2, [pc, #156]	@ (800b0fc <HAL_TIM_OC_Start_IT+0x318>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d00e      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a25      	ldr	r2, [pc, #148]	@ (800b100 <HAL_TIM_OC_Start_IT+0x31c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d009      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a1a      	ldr	r2, [pc, #104]	@ (800b0dc <HAL_TIM_OC_Start_IT+0x2f8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d004      	beq.n	800b082 <HAL_TIM_OC_Start_IT+0x29e>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a18      	ldr	r2, [pc, #96]	@ (800b0e0 <HAL_TIM_OC_Start_IT+0x2fc>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d115      	bne.n	800b0ae <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	4b1e      	ldr	r3, [pc, #120]	@ (800b104 <HAL_TIM_OC_Start_IT+0x320>)
 800b08a:	4013      	ands	r3, r2
 800b08c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b06      	cmp	r3, #6
 800b092:	d015      	beq.n	800b0c0 <HAL_TIM_OC_Start_IT+0x2dc>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b09a:	d011      	beq.n	800b0c0 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f042 0201 	orr.w	r2, r2, #1
 800b0aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ac:	e008      	b.n	800b0c0 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0201 	orr.w	r2, r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	e000      	b.n	800b0c2 <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40012c00 	.word	0x40012c00
 800b0d0:	50012c00 	.word	0x50012c00
 800b0d4:	40013400 	.word	0x40013400
 800b0d8:	50013400 	.word	0x50013400
 800b0dc:	40014000 	.word	0x40014000
 800b0e0:	50014000 	.word	0x50014000
 800b0e4:	40000400 	.word	0x40000400
 800b0e8:	50000400 	.word	0x50000400
 800b0ec:	40000800 	.word	0x40000800
 800b0f0:	50000800 	.word	0x50000800
 800b0f4:	40000c00 	.word	0x40000c00
 800b0f8:	50000c00 	.word	0x50000c00
 800b0fc:	40001800 	.word	0x40001800
 800b100:	50001800 	.word	0x50001800
 800b104:	00010007 	.word	0x00010007

0800b108 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b0c      	cmp	r3, #12
 800b11a:	d841      	bhi.n	800b1a0 <HAL_TIM_OC_Stop_IT+0x98>
 800b11c:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <HAL_TIM_OC_Stop_IT+0x1c>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b159 	.word	0x0800b159
 800b128:	0800b1a1 	.word	0x0800b1a1
 800b12c:	0800b1a1 	.word	0x0800b1a1
 800b130:	0800b1a1 	.word	0x0800b1a1
 800b134:	0800b16b 	.word	0x0800b16b
 800b138:	0800b1a1 	.word	0x0800b1a1
 800b13c:	0800b1a1 	.word	0x0800b1a1
 800b140:	0800b1a1 	.word	0x0800b1a1
 800b144:	0800b17d 	.word	0x0800b17d
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1a1 	.word	0x0800b1a1
 800b150:	0800b1a1 	.word	0x0800b1a1
 800b154:	0800b18f 	.word	0x0800b18f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0202 	bic.w	r2, r2, #2
 800b166:	60da      	str	r2, [r3, #12]
      break;
 800b168:	e01d      	b.n	800b1a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0204 	bic.w	r2, r2, #4
 800b178:	60da      	str	r2, [r3, #12]
      break;
 800b17a:	e014      	b.n	800b1a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0208 	bic.w	r2, r2, #8
 800b18a:	60da      	str	r2, [r3, #12]
      break;
 800b18c:	e00b      	b.n	800b1a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0210 	bic.w	r2, r2, #16
 800b19c:	60da      	str	r2, [r3, #12]
      break;
 800b19e:	e002      	b.n	800b1a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 8086 	bne.w	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 f866 	bl	800c288 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a40      	ldr	r2, [pc, #256]	@ (800b2c4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d018      	beq.n	800b1f8 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a3f      	ldr	r2, [pc, #252]	@ (800b2c8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d013      	beq.n	800b1f8 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a3d      	ldr	r2, [pc, #244]	@ (800b2cc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00e      	beq.n	800b1f8 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a3c      	ldr	r2, [pc, #240]	@ (800b2d0 <HAL_TIM_OC_Stop_IT+0x1c8>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d009      	beq.n	800b1f8 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a3a      	ldr	r2, [pc, #232]	@ (800b2d4 <HAL_TIM_OC_Stop_IT+0x1cc>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d004      	beq.n	800b1f8 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a39      	ldr	r2, [pc, #228]	@ (800b2d8 <HAL_TIM_OC_Stop_IT+0x1d0>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d101      	bne.n	800b1fc <HAL_TIM_OC_Stop_IT+0xf4>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e000      	b.n	800b1fe <HAL_TIM_OC_Stop_IT+0xf6>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d017      	beq.n	800b232 <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6a1a      	ldr	r2, [r3, #32]
 800b208:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b20c:	4013      	ands	r3, r2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10f      	bne.n	800b232 <HAL_TIM_OC_Stop_IT+0x12a>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6a1a      	ldr	r2, [r3, #32]
 800b218:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b21c:	4013      	ands	r3, r2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d107      	bne.n	800b232 <HAL_TIM_OC_Stop_IT+0x12a>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6a1a      	ldr	r2, [r3, #32]
 800b238:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b23c:	4013      	ands	r3, r2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10f      	bne.n	800b262 <HAL_TIM_OC_Stop_IT+0x15a>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6a1a      	ldr	r2, [r3, #32]
 800b248:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b24c:	4013      	ands	r3, r2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d107      	bne.n	800b262 <HAL_TIM_OC_Stop_IT+0x15a>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <HAL_TIM_OC_Stop_IT+0x16a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b270:	e023      	b.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b04      	cmp	r3, #4
 800b276:	d104      	bne.n	800b282 <HAL_TIM_OC_Stop_IT+0x17a>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b280:	e01b      	b.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b08      	cmp	r3, #8
 800b286:	d104      	bne.n	800b292 <HAL_TIM_OC_Stop_IT+0x18a>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b290:	e013      	b.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b0c      	cmp	r3, #12
 800b296:	d104      	bne.n	800b2a2 <HAL_TIM_OC_Stop_IT+0x19a>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2a0:	e00b      	b.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d104      	bne.n	800b2b2 <HAL_TIM_OC_Stop_IT+0x1aa>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2b0:	e003      	b.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1b2>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	40012c00 	.word	0x40012c00
 800b2c8:	50012c00 	.word	0x50012c00
 800b2cc:	40013400 	.word	0x40013400
 800b2d0:	50013400 	.word	0x50013400
 800b2d4:	40014000 	.word	0x40014000
 800b2d8:	50014000 	.word	0x50014000

0800b2dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d020      	beq.n	800b340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01b      	beq.n	800b340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f06f 0202 	mvn.w	r2, #2
 800b310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fad4 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b32c:	e005      	b.n	800b33a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fac6 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fad7 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	d020      	beq.n	800b38c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01b      	beq.n	800b38c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0204 	mvn.w	r2, #4
 800b35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2202      	movs	r2, #2
 800b362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 faae 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b378:	e005      	b.n	800b386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 faa0 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fab1 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d020      	beq.n	800b3d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f003 0308 	and.w	r3, r3, #8
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01b      	beq.n	800b3d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f06f 0208 	mvn.w	r2, #8
 800b3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa88 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b3c4:	e005      	b.n	800b3d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa7a 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fa8b 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 0310 	and.w	r3, r3, #16
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d020      	beq.n	800b424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f003 0310 	and.w	r3, r3, #16
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d01b      	beq.n	800b424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f06f 0210 	mvn.w	r2, #16
 800b3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fa62 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b410:	e005      	b.n	800b41e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa54 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa65 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00c      	beq.n	800b448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d007      	beq.n	800b448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f06f 0201 	mvn.w	r2, #1
 800b440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa32 	bl	800b8ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d104      	bne.n	800b45c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00c      	beq.n	800b476 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f001 f809 	bl	800c488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00c      	beq.n	800b49a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b486:	2b00      	cmp	r3, #0
 800b488:	d007      	beq.n	800b49a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 f801 	bl	800c49c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00c      	beq.n	800b4be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa1f 	bl	800b8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f003 0320 	and.w	r3, r3, #32
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00c      	beq.n	800b4e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f003 0320 	and.w	r3, r3, #32
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f06f 0220 	mvn.w	r2, #32
 800b4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 ffc9 	bl	800c474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00c      	beq.n	800b506 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d007      	beq.n	800b506 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 ffd5 	bl	800c4b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d007      	beq.n	800b52a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 ffcd 	bl	800c4c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00c      	beq.n	800b54e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d007      	beq.n	800b54e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 ffc5 	bl	800c4d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00c      	beq.n	800b572 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d007      	beq.n	800b572 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 ffbd 	bl	800c4ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b592:	2b01      	cmp	r3, #1
 800b594:	d101      	bne.n	800b59a <HAL_TIM_OC_ConfigChannel+0x1e>
 800b596:	2302      	movs	r3, #2
 800b598:	e066      	b.n	800b668 <HAL_TIM_OC_ConfigChannel+0xec>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b14      	cmp	r3, #20
 800b5a6:	d857      	bhi.n	800b658 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b5a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ae:	bf00      	nop
 800b5b0:	0800b605 	.word	0x0800b605
 800b5b4:	0800b659 	.word	0x0800b659
 800b5b8:	0800b659 	.word	0x0800b659
 800b5bc:	0800b659 	.word	0x0800b659
 800b5c0:	0800b613 	.word	0x0800b613
 800b5c4:	0800b659 	.word	0x0800b659
 800b5c8:	0800b659 	.word	0x0800b659
 800b5cc:	0800b659 	.word	0x0800b659
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b659 	.word	0x0800b659
 800b5d8:	0800b659 	.word	0x0800b659
 800b5dc:	0800b659 	.word	0x0800b659
 800b5e0:	0800b62f 	.word	0x0800b62f
 800b5e4:	0800b659 	.word	0x0800b659
 800b5e8:	0800b659 	.word	0x0800b659
 800b5ec:	0800b659 	.word	0x0800b659
 800b5f0:	0800b63d 	.word	0x0800b63d
 800b5f4:	0800b659 	.word	0x0800b659
 800b5f8:	0800b659 	.word	0x0800b659
 800b5fc:	0800b659 	.word	0x0800b659
 800b600:	0800b64b 	.word	0x0800b64b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fa6a 	bl	800bae4 <TIM_OC1_SetConfig>
      break;
 800b610:	e025      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fafd 	bl	800bc18 <TIM_OC2_SetConfig>
      break;
 800b61e:	e01e      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fb8e 	bl	800bd48 <TIM_OC3_SetConfig>
      break;
 800b62c:	e017      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fc1d 	bl	800be74 <TIM_OC4_SetConfig>
      break;
 800b63a:	e010      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68b9      	ldr	r1, [r7, #8]
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fcae 	bl	800bfa4 <TIM_OC5_SetConfig>
      break;
 800b648:	e009      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fd11 	bl	800c078 <TIM_OC6_SetConfig>
      break;
 800b656:	e002      	b.n	800b65e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	75fb      	strb	r3, [r7, #23]
      break;
 800b65c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_TIM_ConfigClockSource+0x1c>
 800b688:	2302      	movs	r3, #2
 800b68a:	e0fe      	b.n	800b88a <HAL_TIM_ConfigClockSource+0x21a>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b6aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b6ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6c8:	f000 80c9 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b6cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d0:	f200 80ce 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b6d4:	4a6f      	ldr	r2, [pc, #444]	@ (800b894 <HAL_TIM_ConfigClockSource+0x224>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	f000 80c1 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b6dc:	4a6d      	ldr	r2, [pc, #436]	@ (800b894 <HAL_TIM_ConfigClockSource+0x224>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	f200 80c6 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b6e4:	4a6c      	ldr	r2, [pc, #432]	@ (800b898 <HAL_TIM_ConfigClockSource+0x228>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	f000 80b9 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b6ec:	4a6a      	ldr	r2, [pc, #424]	@ (800b898 <HAL_TIM_ConfigClockSource+0x228>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	f200 80be 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b6f4:	4a69      	ldr	r2, [pc, #420]	@ (800b89c <HAL_TIM_ConfigClockSource+0x22c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f000 80b1 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b6fc:	4a67      	ldr	r2, [pc, #412]	@ (800b89c <HAL_TIM_ConfigClockSource+0x22c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	f200 80b6 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b704:	4a66      	ldr	r2, [pc, #408]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x230>)
 800b706:	4293      	cmp	r3, r2
 800b708:	f000 80a9 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b70c:	4a64      	ldr	r2, [pc, #400]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x230>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f200 80ae 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b714:	4a63      	ldr	r2, [pc, #396]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x234>)
 800b716:	4293      	cmp	r3, r2
 800b718:	f000 80a1 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b71c:	4a61      	ldr	r2, [pc, #388]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x234>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	f200 80a6 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b724:	4a60      	ldr	r2, [pc, #384]	@ (800b8a8 <HAL_TIM_ConfigClockSource+0x238>)
 800b726:	4293      	cmp	r3, r2
 800b728:	f000 8099 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b72c:	4a5e      	ldr	r2, [pc, #376]	@ (800b8a8 <HAL_TIM_ConfigClockSource+0x238>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	f200 809e 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b734:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b738:	f000 8091 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b73c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b740:	f200 8096 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b748:	f000 8089 	beq.w	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b74c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b750:	f200 808e 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b758:	d03e      	beq.n	800b7d8 <HAL_TIM_ConfigClockSource+0x168>
 800b75a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b75e:	f200 8087 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b766:	f000 8086 	beq.w	800b876 <HAL_TIM_ConfigClockSource+0x206>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b76e:	d87f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b770:	2b70      	cmp	r3, #112	@ 0x70
 800b772:	d01a      	beq.n	800b7aa <HAL_TIM_ConfigClockSource+0x13a>
 800b774:	2b70      	cmp	r3, #112	@ 0x70
 800b776:	d87b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b778:	2b60      	cmp	r3, #96	@ 0x60
 800b77a:	d050      	beq.n	800b81e <HAL_TIM_ConfigClockSource+0x1ae>
 800b77c:	2b60      	cmp	r3, #96	@ 0x60
 800b77e:	d877      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b780:	2b50      	cmp	r3, #80	@ 0x50
 800b782:	d03c      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x18e>
 800b784:	2b50      	cmp	r3, #80	@ 0x50
 800b786:	d873      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b788:	2b40      	cmp	r3, #64	@ 0x40
 800b78a:	d058      	beq.n	800b83e <HAL_TIM_ConfigClockSource+0x1ce>
 800b78c:	2b40      	cmp	r3, #64	@ 0x40
 800b78e:	d86f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b790:	2b30      	cmp	r3, #48	@ 0x30
 800b792:	d064      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b794:	2b30      	cmp	r3, #48	@ 0x30
 800b796:	d86b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b798:	2b20      	cmp	r3, #32
 800b79a:	d060      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d867      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d05c      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b7a4:	2b10      	cmp	r3, #16
 800b7a6:	d05a      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x1ee>
 800b7a8:	e062      	b.n	800b870 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7ba:	f000 fd45 	bl	800c248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	609a      	str	r2, [r3, #8]
      break;
 800b7d6:	e04f      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7e8:	f000 fd2e 	bl	800c248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b7fa:	609a      	str	r2, [r3, #8]
      break;
 800b7fc:	e03c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b80a:	461a      	mov	r2, r3
 800b80c:	f000 fca0 	bl	800c150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2150      	movs	r1, #80	@ 0x50
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fcf9 	bl	800c20e <TIM_ITRx_SetConfig>
      break;
 800b81c:	e02c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b82a:	461a      	mov	r2, r3
 800b82c:	f000 fcbf 	bl	800c1ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2160      	movs	r1, #96	@ 0x60
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fce9 	bl	800c20e <TIM_ITRx_SetConfig>
      break;
 800b83c:	e01c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b84a:	461a      	mov	r2, r3
 800b84c:	f000 fc80 	bl	800c150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2140      	movs	r1, #64	@ 0x40
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fcd9 	bl	800c20e <TIM_ITRx_SetConfig>
      break;
 800b85c:	e00c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f000 fcd0 	bl	800c20e <TIM_ITRx_SetConfig>
      break;
 800b86e:	e003      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e000      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800b876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	00100070 	.word	0x00100070
 800b898:	00100060 	.word	0x00100060
 800b89c:	00100050 	.word	0x00100050
 800b8a0:	00100040 	.word	0x00100040
 800b8a4:	00100030 	.word	0x00100030
 800b8a8:	00100020 	.word	0x00100020

0800b8ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a62      	ldr	r2, [pc, #392]	@ (800baac <TIM_Base_SetConfig+0x19c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d02b      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a61      	ldr	r2, [pc, #388]	@ (800bab0 <TIM_Base_SetConfig+0x1a0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d027      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b936:	d023      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b93e:	d01f      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a5c      	ldr	r2, [pc, #368]	@ (800bab4 <TIM_Base_SetConfig+0x1a4>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d01b      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a5b      	ldr	r2, [pc, #364]	@ (800bab8 <TIM_Base_SetConfig+0x1a8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d017      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a5a      	ldr	r2, [pc, #360]	@ (800babc <TIM_Base_SetConfig+0x1ac>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d013      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a59      	ldr	r2, [pc, #356]	@ (800bac0 <TIM_Base_SetConfig+0x1b0>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d00f      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a58      	ldr	r2, [pc, #352]	@ (800bac4 <TIM_Base_SetConfig+0x1b4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00b      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a57      	ldr	r2, [pc, #348]	@ (800bac8 <TIM_Base_SetConfig+0x1b8>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d007      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a56      	ldr	r2, [pc, #344]	@ (800bacc <TIM_Base_SetConfig+0x1bc>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <TIM_Base_SetConfig+0x70>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a55      	ldr	r2, [pc, #340]	@ (800bad0 <TIM_Base_SetConfig+0x1c0>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d108      	bne.n	800b992 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a45      	ldr	r2, [pc, #276]	@ (800baac <TIM_Base_SetConfig+0x19c>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d03b      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a44      	ldr	r2, [pc, #272]	@ (800bab0 <TIM_Base_SetConfig+0x1a0>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d037      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a8:	d033      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9b0:	d02f      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a3f      	ldr	r2, [pc, #252]	@ (800bab4 <TIM_Base_SetConfig+0x1a4>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d02b      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a3e      	ldr	r2, [pc, #248]	@ (800bab8 <TIM_Base_SetConfig+0x1a8>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d027      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a3d      	ldr	r2, [pc, #244]	@ (800babc <TIM_Base_SetConfig+0x1ac>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d023      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a3c      	ldr	r2, [pc, #240]	@ (800bac0 <TIM_Base_SetConfig+0x1b0>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d01f      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a3b      	ldr	r2, [pc, #236]	@ (800bac4 <TIM_Base_SetConfig+0x1b4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d01b      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a3a      	ldr	r2, [pc, #232]	@ (800bac8 <TIM_Base_SetConfig+0x1b8>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d017      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a39      	ldr	r2, [pc, #228]	@ (800bacc <TIM_Base_SetConfig+0x1bc>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d013      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a38      	ldr	r2, [pc, #224]	@ (800bad0 <TIM_Base_SetConfig+0x1c0>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00f      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a37      	ldr	r2, [pc, #220]	@ (800bad4 <TIM_Base_SetConfig+0x1c4>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00b      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a36      	ldr	r2, [pc, #216]	@ (800bad8 <TIM_Base_SetConfig+0x1c8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d007      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a35      	ldr	r2, [pc, #212]	@ (800badc <TIM_Base_SetConfig+0x1cc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d003      	beq.n	800ba12 <TIM_Base_SetConfig+0x102>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a34      	ldr	r2, [pc, #208]	@ (800bae0 <TIM_Base_SetConfig+0x1d0>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d108      	bne.n	800ba24 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a18      	ldr	r2, [pc, #96]	@ (800baac <TIM_Base_SetConfig+0x19c>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d013      	beq.n	800ba78 <TIM_Base_SetConfig+0x168>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a17      	ldr	r2, [pc, #92]	@ (800bab0 <TIM_Base_SetConfig+0x1a0>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00f      	beq.n	800ba78 <TIM_Base_SetConfig+0x168>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bacc <TIM_Base_SetConfig+0x1bc>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00b      	beq.n	800ba78 <TIM_Base_SetConfig+0x168>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a1b      	ldr	r2, [pc, #108]	@ (800bad0 <TIM_Base_SetConfig+0x1c0>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d007      	beq.n	800ba78 <TIM_Base_SetConfig+0x168>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a1c      	ldr	r2, [pc, #112]	@ (800badc <TIM_Base_SetConfig+0x1cc>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d003      	beq.n	800ba78 <TIM_Base_SetConfig+0x168>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a1b      	ldr	r2, [pc, #108]	@ (800bae0 <TIM_Base_SetConfig+0x1d0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d103      	bne.n	800ba80 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	691a      	ldr	r2, [r3, #16]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d105      	bne.n	800ba9e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	f023 0201 	bic.w	r2, r3, #1
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	611a      	str	r2, [r3, #16]
  }
}
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	40012c00 	.word	0x40012c00
 800bab0:	50012c00 	.word	0x50012c00
 800bab4:	40000400 	.word	0x40000400
 800bab8:	50000400 	.word	0x50000400
 800babc:	40000800 	.word	0x40000800
 800bac0:	50000800 	.word	0x50000800
 800bac4:	40000c00 	.word	0x40000c00
 800bac8:	50000c00 	.word	0x50000c00
 800bacc:	40013400 	.word	0x40013400
 800bad0:	50013400 	.word	0x50013400
 800bad4:	40001800 	.word	0x40001800
 800bad8:	50001800 	.word	0x50001800
 800badc:	40014000 	.word	0x40014000
 800bae0:	50014000 	.word	0x50014000

0800bae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	f023 0201 	bic.w	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0303 	bic.w	r3, r3, #3
 800bb1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f023 0302 	bic.w	r3, r3, #2
 800bb30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a30      	ldr	r2, [pc, #192]	@ (800bc00 <TIM_OC1_SetConfig+0x11c>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d013      	beq.n	800bb6c <TIM_OC1_SetConfig+0x88>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a2f      	ldr	r2, [pc, #188]	@ (800bc04 <TIM_OC1_SetConfig+0x120>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d00f      	beq.n	800bb6c <TIM_OC1_SetConfig+0x88>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a2e      	ldr	r2, [pc, #184]	@ (800bc08 <TIM_OC1_SetConfig+0x124>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d00b      	beq.n	800bb6c <TIM_OC1_SetConfig+0x88>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a2d      	ldr	r2, [pc, #180]	@ (800bc0c <TIM_OC1_SetConfig+0x128>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d007      	beq.n	800bb6c <TIM_OC1_SetConfig+0x88>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a2c      	ldr	r2, [pc, #176]	@ (800bc10 <TIM_OC1_SetConfig+0x12c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d003      	beq.n	800bb6c <TIM_OC1_SetConfig+0x88>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2b      	ldr	r2, [pc, #172]	@ (800bc14 <TIM_OC1_SetConfig+0x130>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d10c      	bne.n	800bb86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f023 0308 	bic.w	r3, r3, #8
 800bb72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f023 0304 	bic.w	r3, r3, #4
 800bb84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a1d      	ldr	r2, [pc, #116]	@ (800bc00 <TIM_OC1_SetConfig+0x11c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d013      	beq.n	800bbb6 <TIM_OC1_SetConfig+0xd2>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a1c      	ldr	r2, [pc, #112]	@ (800bc04 <TIM_OC1_SetConfig+0x120>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00f      	beq.n	800bbb6 <TIM_OC1_SetConfig+0xd2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a1b      	ldr	r2, [pc, #108]	@ (800bc08 <TIM_OC1_SetConfig+0x124>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00b      	beq.n	800bbb6 <TIM_OC1_SetConfig+0xd2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc0c <TIM_OC1_SetConfig+0x128>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d007      	beq.n	800bbb6 <TIM_OC1_SetConfig+0xd2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a19      	ldr	r2, [pc, #100]	@ (800bc10 <TIM_OC1_SetConfig+0x12c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d003      	beq.n	800bbb6 <TIM_OC1_SetConfig+0xd2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a18      	ldr	r2, [pc, #96]	@ (800bc14 <TIM_OC1_SetConfig+0x130>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d111      	bne.n	800bbda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	621a      	str	r2, [r3, #32]
}
 800bbf4:	bf00      	nop
 800bbf6:	371c      	adds	r7, #28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	40012c00 	.word	0x40012c00
 800bc04:	50012c00 	.word	0x50012c00
 800bc08:	40013400 	.word	0x40013400
 800bc0c:	50013400 	.word	0x50013400
 800bc10:	40014000 	.word	0x40014000
 800bc14:	50014000 	.word	0x50014000

0800bc18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	f023 0210 	bic.w	r2, r3, #16
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f023 0320 	bic.w	r3, r3, #32
 800bc66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	011b      	lsls	r3, r3, #4
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a2e      	ldr	r2, [pc, #184]	@ (800bd30 <TIM_OC2_SetConfig+0x118>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00b      	beq.n	800bc94 <TIM_OC2_SetConfig+0x7c>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a2d      	ldr	r2, [pc, #180]	@ (800bd34 <TIM_OC2_SetConfig+0x11c>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d007      	beq.n	800bc94 <TIM_OC2_SetConfig+0x7c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a2c      	ldr	r2, [pc, #176]	@ (800bd38 <TIM_OC2_SetConfig+0x120>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d003      	beq.n	800bc94 <TIM_OC2_SetConfig+0x7c>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a2b      	ldr	r2, [pc, #172]	@ (800bd3c <TIM_OC2_SetConfig+0x124>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d10d      	bne.n	800bcb0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	011b      	lsls	r3, r3, #4
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd30 <TIM_OC2_SetConfig+0x118>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d013      	beq.n	800bce0 <TIM_OC2_SetConfig+0xc8>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a1e      	ldr	r2, [pc, #120]	@ (800bd34 <TIM_OC2_SetConfig+0x11c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00f      	beq.n	800bce0 <TIM_OC2_SetConfig+0xc8>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <TIM_OC2_SetConfig+0x120>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <TIM_OC2_SetConfig+0xc8>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1c      	ldr	r2, [pc, #112]	@ (800bd3c <TIM_OC2_SetConfig+0x124>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d007      	beq.n	800bce0 <TIM_OC2_SetConfig+0xc8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a1b      	ldr	r2, [pc, #108]	@ (800bd40 <TIM_OC2_SetConfig+0x128>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_OC2_SetConfig+0xc8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a1a      	ldr	r2, [pc, #104]	@ (800bd44 <TIM_OC2_SetConfig+0x12c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d113      	bne.n	800bd08 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	621a      	str	r2, [r3, #32]
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	40012c00 	.word	0x40012c00
 800bd34:	50012c00 	.word	0x50012c00
 800bd38:	40013400 	.word	0x40013400
 800bd3c:	50013400 	.word	0x50013400
 800bd40:	40014000 	.word	0x40014000
 800bd44:	50014000 	.word	0x50014000

0800bd48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a2d      	ldr	r2, [pc, #180]	@ (800be5c <TIM_OC3_SetConfig+0x114>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d00b      	beq.n	800bdc2 <TIM_OC3_SetConfig+0x7a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a2c      	ldr	r2, [pc, #176]	@ (800be60 <TIM_OC3_SetConfig+0x118>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d007      	beq.n	800bdc2 <TIM_OC3_SetConfig+0x7a>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a2b      	ldr	r2, [pc, #172]	@ (800be64 <TIM_OC3_SetConfig+0x11c>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d003      	beq.n	800bdc2 <TIM_OC3_SetConfig+0x7a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a2a      	ldr	r2, [pc, #168]	@ (800be68 <TIM_OC3_SetConfig+0x120>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d10d      	bne.n	800bdde <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	021b      	lsls	r3, r3, #8
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a1e      	ldr	r2, [pc, #120]	@ (800be5c <TIM_OC3_SetConfig+0x114>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d013      	beq.n	800be0e <TIM_OC3_SetConfig+0xc6>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a1d      	ldr	r2, [pc, #116]	@ (800be60 <TIM_OC3_SetConfig+0x118>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00f      	beq.n	800be0e <TIM_OC3_SetConfig+0xc6>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a1c      	ldr	r2, [pc, #112]	@ (800be64 <TIM_OC3_SetConfig+0x11c>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00b      	beq.n	800be0e <TIM_OC3_SetConfig+0xc6>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a1b      	ldr	r2, [pc, #108]	@ (800be68 <TIM_OC3_SetConfig+0x120>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d007      	beq.n	800be0e <TIM_OC3_SetConfig+0xc6>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a1a      	ldr	r2, [pc, #104]	@ (800be6c <TIM_OC3_SetConfig+0x124>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d003      	beq.n	800be0e <TIM_OC3_SetConfig+0xc6>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a19      	ldr	r2, [pc, #100]	@ (800be70 <TIM_OC3_SetConfig+0x128>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d113      	bne.n	800be36 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	011b      	lsls	r3, r3, #4
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4313      	orrs	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	4313      	orrs	r3, r2
 800be34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	621a      	str	r2, [r3, #32]
}
 800be50:	bf00      	nop
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	40012c00 	.word	0x40012c00
 800be60:	50012c00 	.word	0x50012c00
 800be64:	40013400 	.word	0x40013400
 800be68:	50013400 	.word	0x50013400
 800be6c:	40014000 	.word	0x40014000
 800be70:	50014000 	.word	0x50014000

0800be74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	021b      	lsls	r3, r3, #8
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	4313      	orrs	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	031b      	lsls	r3, r3, #12
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	4313      	orrs	r3, r2
 800bece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a2e      	ldr	r2, [pc, #184]	@ (800bf8c <TIM_OC4_SetConfig+0x118>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00b      	beq.n	800bef0 <TIM_OC4_SetConfig+0x7c>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a2d      	ldr	r2, [pc, #180]	@ (800bf90 <TIM_OC4_SetConfig+0x11c>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d007      	beq.n	800bef0 <TIM_OC4_SetConfig+0x7c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a2c      	ldr	r2, [pc, #176]	@ (800bf94 <TIM_OC4_SetConfig+0x120>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d003      	beq.n	800bef0 <TIM_OC4_SetConfig+0x7c>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a2b      	ldr	r2, [pc, #172]	@ (800bf98 <TIM_OC4_SetConfig+0x124>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d10d      	bne.n	800bf0c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf8c <TIM_OC4_SetConfig+0x118>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d013      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a1e      	ldr	r2, [pc, #120]	@ (800bf90 <TIM_OC4_SetConfig+0x11c>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d00f      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc8>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a1d      	ldr	r2, [pc, #116]	@ (800bf94 <TIM_OC4_SetConfig+0x120>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d00b      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc8>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a1c      	ldr	r2, [pc, #112]	@ (800bf98 <TIM_OC4_SetConfig+0x124>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d007      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc8>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a1b      	ldr	r2, [pc, #108]	@ (800bf9c <TIM_OC4_SetConfig+0x128>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d003      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc8>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a1a      	ldr	r2, [pc, #104]	@ (800bfa0 <TIM_OC4_SetConfig+0x12c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d113      	bne.n	800bf64 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	019b      	lsls	r3, r3, #6
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	019b      	lsls	r3, r3, #6
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	621a      	str	r2, [r3, #32]
}
 800bf7e:	bf00      	nop
 800bf80:	371c      	adds	r7, #28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	40012c00 	.word	0x40012c00
 800bf90:	50012c00 	.word	0x50012c00
 800bf94:	40013400 	.word	0x40013400
 800bf98:	50013400 	.word	0x50013400
 800bf9c:	40014000 	.word	0x40014000
 800bfa0:	50014000 	.word	0x50014000

0800bfa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bfe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a19      	ldr	r2, [pc, #100]	@ (800c060 <TIM_OC5_SetConfig+0xbc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d013      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a18      	ldr	r2, [pc, #96]	@ (800c064 <TIM_OC5_SetConfig+0xc0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d00f      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a17      	ldr	r2, [pc, #92]	@ (800c068 <TIM_OC5_SetConfig+0xc4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00b      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a16      	ldr	r2, [pc, #88]	@ (800c06c <TIM_OC5_SetConfig+0xc8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d007      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a15      	ldr	r2, [pc, #84]	@ (800c070 <TIM_OC5_SetConfig+0xcc>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d003      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a14      	ldr	r2, [pc, #80]	@ (800c074 <TIM_OC5_SetConfig+0xd0>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d109      	bne.n	800c03a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c02c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	4313      	orrs	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	621a      	str	r2, [r3, #32]
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	40012c00 	.word	0x40012c00
 800c064:	50012c00 	.word	0x50012c00
 800c068:	40013400 	.word	0x40013400
 800c06c:	50013400 	.word	0x50013400
 800c070:	40014000 	.word	0x40014000
 800c074:	50014000 	.word	0x50014000

0800c078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	021b      	lsls	r3, r3, #8
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c138 <TIM_OC6_SetConfig+0xc0>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d013      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a19      	ldr	r2, [pc, #100]	@ (800c13c <TIM_OC6_SetConfig+0xc4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00f      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a18      	ldr	r2, [pc, #96]	@ (800c140 <TIM_OC6_SetConfig+0xc8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00b      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a17      	ldr	r2, [pc, #92]	@ (800c144 <TIM_OC6_SetConfig+0xcc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d007      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a16      	ldr	r2, [pc, #88]	@ (800c148 <TIM_OC6_SetConfig+0xd0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a15      	ldr	r2, [pc, #84]	@ (800c14c <TIM_OC6_SetConfig+0xd4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d109      	bne.n	800c110 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	029b      	lsls	r3, r3, #10
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	40012c00 	.word	0x40012c00
 800c13c:	50012c00 	.word	0x50012c00
 800c140:	40013400 	.word	0x40013400
 800c144:	50013400 	.word	0x50013400
 800c148:	40014000 	.word	0x40014000
 800c14c:	50014000 	.word	0x50014000

0800c150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	f023 0201 	bic.w	r2, r3, #1
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4313      	orrs	r3, r2
 800c184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f023 030a 	bic.w	r3, r3, #10
 800c18c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	4313      	orrs	r3, r2
 800c194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	621a      	str	r2, [r3, #32]
}
 800c1a2:	bf00      	nop
 800c1a4:	371c      	adds	r7, #28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b087      	sub	sp, #28
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	f023 0210 	bic.w	r2, r3, #16
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	031b      	lsls	r3, r3, #12
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	621a      	str	r2, [r3, #32]
}
 800c202:	bf00      	nop
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c20e:	b480      	push	{r7}
 800c210:	b085      	sub	sp, #20
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	f043 0307 	orr.w	r3, r3, #7
 800c234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	609a      	str	r2, [r3, #8]
}
 800c23c:	bf00      	nop
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	021a      	lsls	r2, r3, #8
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4313      	orrs	r3, r2
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	4313      	orrs	r3, r2
 800c274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	609a      	str	r2, [r3, #8]
}
 800c27c:	bf00      	nop
 800c27e:	371c      	adds	r7, #28
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f003 031f 	and.w	r3, r3, #31
 800c29a:	2201      	movs	r2, #1
 800c29c:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6a1a      	ldr	r2, [r3, #32]
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	401a      	ands	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6a1a      	ldr	r2, [r3, #32]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f003 031f 	and.w	r3, r3, #31
 800c2ba:	6879      	ldr	r1, [r7, #4]
 800c2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	621a      	str	r2, [r3, #32]
}
 800c2c6:	bf00      	nop
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e0a1      	b.n	800c430 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a4a      	ldr	r2, [pc, #296]	@ (800c43c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00e      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a49      	ldr	r2, [pc, #292]	@ (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d009      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a47      	ldr	r2, [pc, #284]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d004      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a46      	ldr	r2, [pc, #280]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d108      	bne.n	800c346 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c33a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c34c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4313      	orrs	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a34      	ldr	r2, [pc, #208]	@ (800c43c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d04a      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a33      	ldr	r2, [pc, #204]	@ (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d045      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c380:	d040      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c38a:	d03b      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a2e      	ldr	r2, [pc, #184]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d036      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a2d      	ldr	r2, [pc, #180]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d031      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d02c      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d027      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a28      	ldr	r2, [pc, #160]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d022      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a27      	ldr	r2, [pc, #156]	@ (800c460 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d01d      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d018      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d013      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a20      	ldr	r2, [pc, #128]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00e      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a1f      	ldr	r2, [pc, #124]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d009      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c46c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d004      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a1c      	ldr	r2, [pc, #112]	@ (800c470 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d10c      	bne.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c40a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	4313      	orrs	r3, r2
 800c414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	40012c00 	.word	0x40012c00
 800c440:	50012c00 	.word	0x50012c00
 800c444:	40013400 	.word	0x40013400
 800c448:	50013400 	.word	0x50013400
 800c44c:	40000400 	.word	0x40000400
 800c450:	50000400 	.word	0x50000400
 800c454:	40000800 	.word	0x40000800
 800c458:	50000800 	.word	0x50000800
 800c45c:	40000c00 	.word	0x40000c00
 800c460:	50000c00 	.word	0x50000c00
 800c464:	40001800 	.word	0x40001800
 800c468:	50001800 	.word	0x50001800
 800c46c:	40014000 	.word	0x40014000
 800c470:	50014000 	.word	0x50014000

0800c474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e042      	b.n	800c598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d106      	bne.n	800c52a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7f8 fa99 	bl	8004a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2224      	movs	r2, #36	@ 0x24
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0201 	bic.w	r2, r2, #1
 800c540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fb4c 	bl	800cbe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f99b 	bl	800c88c <UART_SetConfig>
 800c556:	4603      	mov	r3, r0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e01b      	b.n	800c598 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	689a      	ldr	r2, [r3, #8]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f042 0201 	orr.w	r2, r2, #1
 800c58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fbcb 	bl	800cd2c <UART_CheckIdleState>
 800c596:	4603      	mov	r3, r0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08a      	sub	sp, #40	@ 0x28
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5b6:	2b20      	cmp	r3, #32
 800c5b8:	f040 808b 	bne.w	800c6d2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <HAL_UART_Transmit+0x28>
 800c5c2:	88fb      	ldrh	r3, [r7, #6]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e083      	b.n	800c6d4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5d6:	2b80      	cmp	r3, #128	@ 0x80
 800c5d8:	d107      	bne.n	800c5ea <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c5e8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2221      	movs	r2, #33	@ 0x21
 800c5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5fa:	f7f8 fe5f 	bl	80052bc <HAL_GetTick>
 800c5fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	88fa      	ldrh	r2, [r7, #6]
 800c604:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	88fa      	ldrh	r2, [r7, #6]
 800c60c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c618:	d108      	bne.n	800c62c <HAL_UART_Transmit+0x8c>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d104      	bne.n	800c62c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800c622:	2300      	movs	r3, #0
 800c624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	61bb      	str	r3, [r7, #24]
 800c62a:	e003      	b.n	800c634 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c630:	2300      	movs	r3, #0
 800c632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c634:	e030      	b.n	800c698 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2200      	movs	r2, #0
 800c63e:	2180      	movs	r1, #128	@ 0x80
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fc1d 	bl	800ce80 <UART_WaitOnFlagUntilTimeout>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d005      	beq.n	800c658 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2220      	movs	r2, #32
 800c650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e03d      	b.n	800c6d4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10b      	bne.n	800c676 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c66c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	3302      	adds	r3, #2
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	e007      	b.n	800c686 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	781a      	ldrb	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	3301      	adds	r3, #1
 800c684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	b29a      	uxth	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1c8      	bne.n	800c636 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2140      	movs	r1, #64	@ 0x40
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 fbe6 	bl	800ce80 <UART_WaitOnFlagUntilTimeout>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e006      	b.n	800c6d4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e000      	b.n	800c6d4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800c6d2:	2302      	movs	r3, #2
  }
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3720      	adds	r7, #32
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08a      	sub	sp, #40	@ 0x28
 800c6e0:	af02      	add	r7, sp, #8
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	f040 80c4 	bne.w	800c880 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <HAL_UART_Receive+0x28>
 800c6fe:	88fb      	ldrh	r3, [r7, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e0bc      	b.n	800c882 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c712:	2b40      	cmp	r3, #64	@ 0x40
 800c714:	d107      	bne.n	800c726 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c724:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2222      	movs	r2, #34	@ 0x22
 800c732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c73c:	f7f8 fdbe 	bl	80052bc <HAL_GetTick>
 800c740:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	88fa      	ldrh	r2, [r7, #6]
 800c746:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	88fa      	ldrh	r2, [r7, #6]
 800c74e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c75a:	d10e      	bne.n	800c77a <HAL_UART_Receive+0x9e>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d105      	bne.n	800c770 <HAL_UART_Receive+0x94>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c76a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c76e:	e02d      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	22ff      	movs	r2, #255	@ 0xff
 800c774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c778:	e028      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10d      	bne.n	800c79e <HAL_UART_Receive+0xc2>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d104      	bne.n	800c794 <HAL_UART_Receive+0xb8>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	22ff      	movs	r2, #255	@ 0xff
 800c78e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c792:	e01b      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	227f      	movs	r2, #127	@ 0x7f
 800c798:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c79c:	e016      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7a6:	d10d      	bne.n	800c7c4 <HAL_UART_Receive+0xe8>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d104      	bne.n	800c7ba <HAL_UART_Receive+0xde>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	227f      	movs	r2, #127	@ 0x7f
 800c7b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7b8:	e008      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	223f      	movs	r2, #63	@ 0x3f
 800c7be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7c2:	e003      	b.n	800c7cc <HAL_UART_Receive+0xf0>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7dc:	d108      	bne.n	800c7f0 <HAL_UART_Receive+0x114>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d104      	bne.n	800c7f0 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	e003      	b.n	800c7f8 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c7f8:	e036      	b.n	800c868 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2200      	movs	r2, #0
 800c802:	2120      	movs	r1, #32
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f000 fb3b 	bl	800ce80 <UART_WaitOnFlagUntilTimeout>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d005      	beq.n	800c81c <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2220      	movs	r2, #32
 800c814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e032      	b.n	800c882 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10c      	bne.n	800c83c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c828:	b29a      	uxth	r2, r3
 800c82a:	8a7b      	ldrh	r3, [r7, #18]
 800c82c:	4013      	ands	r3, r2
 800c82e:	b29a      	uxth	r2, r3
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	3302      	adds	r3, #2
 800c838:	61bb      	str	r3, [r7, #24]
 800c83a:	e00c      	b.n	800c856 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c842:	b2da      	uxtb	r2, r3
 800c844:	8a7b      	ldrh	r3, [r7, #18]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	4013      	ands	r3, r2
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	3301      	adds	r3, #1
 800c854:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	3b01      	subs	r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c86e:	b29b      	uxth	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1c2      	bne.n	800c7fa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2220      	movs	r2, #32
 800c878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	e000      	b.n	800c882 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800c880:	2302      	movs	r3, #2
  }
}
 800c882:	4618      	mov	r0, r3
 800c884:	3720      	adds	r7, #32
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c890:	b094      	sub	sp, #80	@ 0x50
 800c892:	af00      	add	r7, sp, #0
 800c894:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	4b83      	ldr	r3, [pc, #524]	@ (800cab0 <UART_SetConfig+0x224>)
 800c8a2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	497c      	ldr	r1, [pc, #496]	@ (800cab4 <UART_SetConfig+0x228>)
 800c8c4:	4019      	ands	r1, r3
 800c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8dc:	68d9      	ldr	r1, [r3, #12]
 800c8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	ea40 0301 	orr.w	r3, r0, r1
 800c8e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b6f      	ldr	r3, [pc, #444]	@ (800cab0 <UART_SetConfig+0x224>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d009      	beq.n	800c90c <UART_SetConfig+0x80>
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	4b6e      	ldr	r3, [pc, #440]	@ (800cab8 <UART_SetConfig+0x22c>)
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d004      	beq.n	800c90c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c908:	4313      	orrs	r3, r2
 800c90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c916:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c920:	430b      	orrs	r3, r1
 800c922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92a:	f023 000f 	bic.w	r0, r3, #15
 800c92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c930:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	ea40 0301 	orr.w	r3, r0, r1
 800c93a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	4b5e      	ldr	r3, [pc, #376]	@ (800cabc <UART_SetConfig+0x230>)
 800c942:	429a      	cmp	r2, r3
 800c944:	d102      	bne.n	800c94c <UART_SetConfig+0xc0>
 800c946:	2301      	movs	r3, #1
 800c948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c94a:	e032      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	4b5b      	ldr	r3, [pc, #364]	@ (800cac0 <UART_SetConfig+0x234>)
 800c952:	429a      	cmp	r2, r3
 800c954:	d102      	bne.n	800c95c <UART_SetConfig+0xd0>
 800c956:	2302      	movs	r3, #2
 800c958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c95a:	e02a      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	4b58      	ldr	r3, [pc, #352]	@ (800cac4 <UART_SetConfig+0x238>)
 800c962:	429a      	cmp	r2, r3
 800c964:	d102      	bne.n	800c96c <UART_SetConfig+0xe0>
 800c966:	2304      	movs	r3, #4
 800c968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c96a:	e022      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	4b55      	ldr	r3, [pc, #340]	@ (800cac8 <UART_SetConfig+0x23c>)
 800c972:	429a      	cmp	r2, r3
 800c974:	d102      	bne.n	800c97c <UART_SetConfig+0xf0>
 800c976:	2308      	movs	r3, #8
 800c978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c97a:	e01a      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	4b52      	ldr	r3, [pc, #328]	@ (800cacc <UART_SetConfig+0x240>)
 800c982:	429a      	cmp	r2, r3
 800c984:	d102      	bne.n	800c98c <UART_SetConfig+0x100>
 800c986:	2310      	movs	r3, #16
 800c988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c98a:	e012      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	4b4f      	ldr	r3, [pc, #316]	@ (800cad0 <UART_SetConfig+0x244>)
 800c992:	429a      	cmp	r2, r3
 800c994:	d102      	bne.n	800c99c <UART_SetConfig+0x110>
 800c996:	2320      	movs	r3, #32
 800c998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c99a:	e00a      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	4b43      	ldr	r3, [pc, #268]	@ (800cab0 <UART_SetConfig+0x224>)
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d103      	bne.n	800c9ae <UART_SetConfig+0x122>
 800c9a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9ac:	e001      	b.n	800c9b2 <UART_SetConfig+0x126>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b3e      	ldr	r3, [pc, #248]	@ (800cab0 <UART_SetConfig+0x224>)
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d005      	beq.n	800c9c8 <UART_SetConfig+0x13c>
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	4b3d      	ldr	r3, [pc, #244]	@ (800cab8 <UART_SetConfig+0x22c>)
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	f040 8088 	bne.w	800cad8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c9c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	623b      	str	r3, [r7, #32]
 800c9ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c9d4:	f7fb ff72 	bl	80088bc <HAL_RCCEx_GetPeriphCLKFreq>
 800c9d8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 80eb 	beq.w	800cbb8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e6:	4a3b      	ldr	r2, [pc, #236]	@ (800cad4 <UART_SetConfig+0x248>)
 800c9e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4413      	add	r3, r2
 800ca00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d305      	bcc.n	800ca12 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d903      	bls.n	800ca1a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ca18:	e048      	b.n	800caac <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	61bb      	str	r3, [r7, #24]
 800ca20:	61fa      	str	r2, [r7, #28]
 800ca22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca26:	4a2b      	ldr	r2, [pc, #172]	@ (800cad4 <UART_SetConfig+0x248>)
 800ca28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	2200      	movs	r2, #0
 800ca30:	613b      	str	r3, [r7, #16]
 800ca32:	617a      	str	r2, [r7, #20]
 800ca34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca3c:	f7f4 f938 	bl	8000cb0 <__aeabi_uldivmod>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	020b      	lsls	r3, r1, #8
 800ca52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca56:	0202      	lsls	r2, r0, #8
 800ca58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca5a:	6849      	ldr	r1, [r1, #4]
 800ca5c:	0849      	lsrs	r1, r1, #1
 800ca5e:	2000      	movs	r0, #0
 800ca60:	460c      	mov	r4, r1
 800ca62:	4605      	mov	r5, r0
 800ca64:	eb12 0804 	adds.w	r8, r2, r4
 800ca68:	eb43 0905 	adc.w	r9, r3, r5
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	60bb      	str	r3, [r7, #8]
 800ca74:	60fa      	str	r2, [r7, #12]
 800ca76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f4 f917 	bl	8000cb0 <__aeabi_uldivmod>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4613      	mov	r3, r2
 800ca88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca90:	d308      	bcc.n	800caa4 <UART_SetConfig+0x218>
 800ca92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca98:	d204      	bcs.n	800caa4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caa0:	60da      	str	r2, [r3, #12]
 800caa2:	e003      	b.n	800caac <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800caaa:	e085      	b.n	800cbb8 <UART_SetConfig+0x32c>
 800caac:	e084      	b.n	800cbb8 <UART_SetConfig+0x32c>
 800caae:	bf00      	nop
 800cab0:	44002400 	.word	0x44002400
 800cab4:	cfff69f3 	.word	0xcfff69f3
 800cab8:	54002400 	.word	0x54002400
 800cabc:	40013800 	.word	0x40013800
 800cac0:	40004400 	.word	0x40004400
 800cac4:	40004800 	.word	0x40004800
 800cac8:	40004c00 	.word	0x40004c00
 800cacc:	40005000 	.word	0x40005000
 800cad0:	40006400 	.word	0x40006400
 800cad4:	080144d8 	.word	0x080144d8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cada:	69db      	ldr	r3, [r3, #28]
 800cadc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cae0:	d13c      	bne.n	800cb5c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cae4:	2200      	movs	r2, #0
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	607a      	str	r2, [r7, #4]
 800caea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caee:	f7fb fee5 	bl	80088bc <HAL_RCCEx_GetPeriphCLKFreq>
 800caf2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800caf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d05e      	beq.n	800cbb8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cafe:	4a39      	ldr	r2, [pc, #228]	@ (800cbe4 <UART_SetConfig+0x358>)
 800cb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb04:	461a      	mov	r2, r3
 800cb06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb08:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb0c:	005a      	lsls	r2, r3, #1
 800cb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	085b      	lsrs	r3, r3, #1
 800cb14:	441a      	add	r2, r3
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb22:	2b0f      	cmp	r3, #15
 800cb24:	d916      	bls.n	800cb54 <UART_SetConfig+0x2c8>
 800cb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb2c:	d212      	bcs.n	800cb54 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	f023 030f 	bic.w	r3, r3, #15
 800cb36:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3a:	085b      	lsrs	r3, r3, #1
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cb46:	4313      	orrs	r3, r2
 800cb48:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800cb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	e031      	b.n	800cbb8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cb5a:	e02d      	b.n	800cbb8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cb5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb5e:	2200      	movs	r2, #0
 800cb60:	469a      	mov	sl, r3
 800cb62:	4693      	mov	fp, r2
 800cb64:	4650      	mov	r0, sl
 800cb66:	4659      	mov	r1, fp
 800cb68:	f7fb fea8 	bl	80088bc <HAL_RCCEx_GetPeriphCLKFreq>
 800cb6c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d021      	beq.n	800cbb8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb78:	4a1a      	ldr	r2, [pc, #104]	@ (800cbe4 <UART_SetConfig+0x358>)
 800cb7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb82:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	085b      	lsrs	r3, r3, #1
 800cb8c:	441a      	add	r2, r3
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9a:	2b0f      	cmp	r3, #15
 800cb9c:	d909      	bls.n	800cbb2 <UART_SetConfig+0x326>
 800cb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cba4:	d205      	bcs.n	800cbb2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60da      	str	r2, [r3, #12]
 800cbb0:	e002      	b.n	800cbb8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	2200      	movs	r2, #0
 800cbcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cbd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3750      	adds	r7, #80	@ 0x50
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbe2:	bf00      	nop
 800cbe4:	080144d8 	.word	0x080144d8

0800cbe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	430a      	orrs	r2, r1
 800cc32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc38:	f003 0302 	and.w	r3, r3, #2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00a      	beq.n	800cc56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5a:	f003 0304 	and.w	r3, r3, #4
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	430a      	orrs	r2, r1
 800cc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7c:	f003 0310 	and.w	r3, r3, #16
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00a      	beq.n	800cc9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	430a      	orrs	r2, r1
 800cc98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc9e:	f003 0320 	and.w	r3, r3, #32
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00a      	beq.n	800ccbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	430a      	orrs	r2, r1
 800ccba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d01a      	beq.n	800ccfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cce6:	d10a      	bne.n	800ccfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00a      	beq.n	800cd20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	605a      	str	r2, [r3, #4]
  }
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b098      	sub	sp, #96	@ 0x60
 800cd30:	af02      	add	r7, sp, #8
 800cd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd3c:	f7f8 fabe 	bl	80052bc <HAL_GetTick>
 800cd40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0308 	and.w	r3, r3, #8
 800cd4c:	2b08      	cmp	r3, #8
 800cd4e:	d12f      	bne.n	800cdb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f88e 	bl	800ce80 <UART_WaitOnFlagUntilTimeout>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d022      	beq.n	800cdb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd88:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd90:	e841 2300 	strex	r3, r2, [r1]
 800cd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e6      	bne.n	800cd6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e063      	b.n	800ce78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0304 	and.w	r3, r3, #4
 800cdba:	2b04      	cmp	r3, #4
 800cdbc:	d149      	bne.n	800ce52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f857 	bl	800ce80 <UART_WaitOnFlagUntilTimeout>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d03c      	beq.n	800ce52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	e853 3f00 	ldrex	r3, [r3]
 800cde4:	623b      	str	r3, [r7, #32]
   return(result);
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdfe:	e841 2300 	strex	r3, r2, [r1]
 800ce02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1e6      	bne.n	800cdd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	e853 3f00 	ldrex	r3, [r3]
 800ce18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f023 0301 	bic.w	r3, r3, #1
 800ce20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3308      	adds	r3, #8
 800ce28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce2a:	61fa      	str	r2, [r7, #28]
 800ce2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2e:	69b9      	ldr	r1, [r7, #24]
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	e841 2300 	strex	r3, r2, [r1]
 800ce36:	617b      	str	r3, [r7, #20]
   return(result);
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e5      	bne.n	800ce0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e012      	b.n	800ce78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2220      	movs	r2, #32
 800ce56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3758      	adds	r7, #88	@ 0x58
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce90:	e04f      	b.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce98:	d04b      	beq.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce9a:	f7f8 fa0f 	bl	80052bc <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d302      	bcc.n	800ceb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e04e      	b.n	800cf52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d037      	beq.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2b80      	cmp	r3, #128	@ 0x80
 800cec6:	d034      	beq.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b40      	cmp	r3, #64	@ 0x40
 800cecc:	d031      	beq.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	f003 0308 	and.w	r3, r3, #8
 800ced8:	2b08      	cmp	r3, #8
 800ceda:	d110      	bne.n	800cefe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2208      	movs	r2, #8
 800cee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 f838 	bl	800cf5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2208      	movs	r2, #8
 800ceee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e029      	b.n	800cf52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf0c:	d111      	bne.n	800cf32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 f81e 	bl	800cf5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e00f      	b.n	800cf52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69da      	ldr	r2, [r3, #28]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	bf0c      	ite	eq
 800cf42:	2301      	moveq	r3, #1
 800cf44:	2300      	movne	r3, #0
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	461a      	mov	r2, r3
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d0a0      	beq.n	800ce92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b095      	sub	sp, #84	@ 0x54
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6a:	e853 3f00 	ldrex	r3, [r3]
 800cf6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf80:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf88:	e841 2300 	strex	r3, r2, [r1]
 800cf8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1e6      	bne.n	800cf62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3308      	adds	r3, #8
 800cf9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9c:	6a3b      	ldr	r3, [r7, #32]
 800cf9e:	e853 3f00 	ldrex	r3, [r3]
 800cfa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfaa:	f023 0301 	bic.w	r3, r3, #1
 800cfae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3308      	adds	r3, #8
 800cfb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfc0:	e841 2300 	strex	r3, r2, [r1]
 800cfc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e3      	bne.n	800cf94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d118      	bne.n	800d006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	e853 3f00 	ldrex	r3, [r3]
 800cfe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	f023 0310 	bic.w	r3, r3, #16
 800cfe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cff2:	61bb      	str	r3, [r7, #24]
 800cff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff6:	6979      	ldr	r1, [r7, #20]
 800cff8:	69ba      	ldr	r2, [r7, #24]
 800cffa:	e841 2300 	strex	r3, r2, [r1]
 800cffe:	613b      	str	r3, [r7, #16]
   return(result);
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1e6      	bne.n	800cfd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2220      	movs	r2, #32
 800d00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d01a:	bf00      	nop
 800d01c:	3754      	adds	r7, #84	@ 0x54
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d026:	b480      	push	{r7}
 800d028:	b085      	sub	sp, #20
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d034:	2b01      	cmp	r3, #1
 800d036:	d101      	bne.n	800d03c <HAL_UARTEx_DisableFifoMode+0x16>
 800d038:	2302      	movs	r3, #2
 800d03a:	e027      	b.n	800d08c <HAL_UARTEx_DisableFifoMode+0x66>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2224      	movs	r2, #36	@ 0x24
 800d048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0201 	bic.w	r2, r2, #1
 800d062:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d06a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2220      	movs	r2, #32
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d101      	bne.n	800d0b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	e02d      	b.n	800d10c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2224      	movs	r2, #36	@ 0x24
 800d0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f022 0201 	bic.w	r2, r2, #1
 800d0d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f84f 	bl	800d190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d124:	2b01      	cmp	r3, #1
 800d126:	d101      	bne.n	800d12c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d128:	2302      	movs	r3, #2
 800d12a:	e02d      	b.n	800d188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2224      	movs	r2, #36	@ 0x24
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f022 0201 	bic.w	r2, r2, #1
 800d152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	430a      	orrs	r2, r1
 800d166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f811 	bl	800d190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2220      	movs	r2, #32
 800d17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d108      	bne.n	800d1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1b0:	e031      	b.n	800d216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1b2:	2308      	movs	r3, #8
 800d1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1b6:	2308      	movs	r3, #8
 800d1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	0e5b      	lsrs	r3, r3, #25
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f003 0307 	and.w	r3, r3, #7
 800d1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	0f5b      	lsrs	r3, r3, #29
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0307 	and.w	r3, r3, #7
 800d1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	7b3a      	ldrb	r2, [r7, #12]
 800d1de:	4911      	ldr	r1, [pc, #68]	@ (800d224 <UARTEx_SetNbDataToProcess+0x94>)
 800d1e0:	5c8a      	ldrb	r2, [r1, r2]
 800d1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1e6:	7b3a      	ldrb	r2, [r7, #12]
 800d1e8:	490f      	ldr	r1, [pc, #60]	@ (800d228 <UARTEx_SetNbDataToProcess+0x98>)
 800d1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	7b7a      	ldrb	r2, [r7, #13]
 800d1fc:	4909      	ldr	r1, [pc, #36]	@ (800d224 <UARTEx_SetNbDataToProcess+0x94>)
 800d1fe:	5c8a      	ldrb	r2, [r1, r2]
 800d200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d204:	7b7a      	ldrb	r2, [r7, #13]
 800d206:	4908      	ldr	r1, [pc, #32]	@ (800d228 <UARTEx_SetNbDataToProcess+0x98>)
 800d208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d216:	bf00      	nop
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	080144f0 	.word	0x080144f0
 800d228:	080144f8 	.word	0x080144f8

0800d22c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d234:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d238:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	43db      	mvns	r3, r3
 800d242:	401a      	ands	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800d262:	78fb      	ldrb	r3, [r7, #3]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	641a      	str	r2, [r3, #64]	@ 0x40
 800d274:	e00b      	b.n	800d28e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d106      	bne.n	800d28a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d280:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	641a      	str	r2, [r3, #64]	@ 0x40
 800d288:	e001      	b.n	800d28e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e000      	b.n	800d290 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d29c:	b084      	sub	sp, #16
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	f107 001c 	add.w	r0, r7, #28
 800d2aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b8:	f023 0201 	bic.w	r2, r3, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ffc7 	bl	800d256 <USB_SetCurrentMode>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2de:	b004      	add	sp, #16
 800d2e0:	4770      	bx	lr

0800d2e2 <atoi>:
 800d2e2:	220a      	movs	r2, #10
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	f000 b87d 	b.w	800d3e4 <strtol>
	...

0800d2ec <_strtol_l.constprop.0>:
 800d2ec:	2b24      	cmp	r3, #36	@ 0x24
 800d2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f2:	4686      	mov	lr, r0
 800d2f4:	4690      	mov	r8, r2
 800d2f6:	d801      	bhi.n	800d2fc <_strtol_l.constprop.0+0x10>
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d106      	bne.n	800d30a <_strtol_l.constprop.0+0x1e>
 800d2fc:	f001 f860 	bl	800e3c0 <__errno>
 800d300:	2316      	movs	r3, #22
 800d302:	6003      	str	r3, [r0, #0]
 800d304:	2000      	movs	r0, #0
 800d306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30a:	460d      	mov	r5, r1
 800d30c:	4833      	ldr	r0, [pc, #204]	@ (800d3dc <_strtol_l.constprop.0+0xf0>)
 800d30e:	462a      	mov	r2, r5
 800d310:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d314:	5d06      	ldrb	r6, [r0, r4]
 800d316:	f016 0608 	ands.w	r6, r6, #8
 800d31a:	d1f8      	bne.n	800d30e <_strtol_l.constprop.0+0x22>
 800d31c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d31e:	d12d      	bne.n	800d37c <_strtol_l.constprop.0+0x90>
 800d320:	782c      	ldrb	r4, [r5, #0]
 800d322:	2601      	movs	r6, #1
 800d324:	1c95      	adds	r5, r2, #2
 800d326:	f033 0210 	bics.w	r2, r3, #16
 800d32a:	d109      	bne.n	800d340 <_strtol_l.constprop.0+0x54>
 800d32c:	2c30      	cmp	r4, #48	@ 0x30
 800d32e:	d12a      	bne.n	800d386 <_strtol_l.constprop.0+0x9a>
 800d330:	782a      	ldrb	r2, [r5, #0]
 800d332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d336:	2a58      	cmp	r2, #88	@ 0x58
 800d338:	d125      	bne.n	800d386 <_strtol_l.constprop.0+0x9a>
 800d33a:	786c      	ldrb	r4, [r5, #1]
 800d33c:	2310      	movs	r3, #16
 800d33e:	3502      	adds	r5, #2
 800d340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d344:	2200      	movs	r2, #0
 800d346:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d34a:	4610      	mov	r0, r2
 800d34c:	fbbc f9f3 	udiv	r9, ip, r3
 800d350:	fb03 ca19 	mls	sl, r3, r9, ip
 800d354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d358:	2f09      	cmp	r7, #9
 800d35a:	d81b      	bhi.n	800d394 <_strtol_l.constprop.0+0xa8>
 800d35c:	463c      	mov	r4, r7
 800d35e:	42a3      	cmp	r3, r4
 800d360:	dd27      	ble.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d362:	1c57      	adds	r7, r2, #1
 800d364:	d007      	beq.n	800d376 <_strtol_l.constprop.0+0x8a>
 800d366:	4581      	cmp	r9, r0
 800d368:	d320      	bcc.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d36a:	d101      	bne.n	800d370 <_strtol_l.constprop.0+0x84>
 800d36c:	45a2      	cmp	sl, r4
 800d36e:	db1d      	blt.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d370:	fb00 4003 	mla	r0, r0, r3, r4
 800d374:	2201      	movs	r2, #1
 800d376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d37a:	e7eb      	b.n	800d354 <_strtol_l.constprop.0+0x68>
 800d37c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d37e:	bf04      	itt	eq
 800d380:	782c      	ldrbeq	r4, [r5, #0]
 800d382:	1c95      	addeq	r5, r2, #2
 800d384:	e7cf      	b.n	800d326 <_strtol_l.constprop.0+0x3a>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1da      	bne.n	800d340 <_strtol_l.constprop.0+0x54>
 800d38a:	2c30      	cmp	r4, #48	@ 0x30
 800d38c:	bf0c      	ite	eq
 800d38e:	2308      	moveq	r3, #8
 800d390:	230a      	movne	r3, #10
 800d392:	e7d5      	b.n	800d340 <_strtol_l.constprop.0+0x54>
 800d394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d398:	2f19      	cmp	r7, #25
 800d39a:	d801      	bhi.n	800d3a0 <_strtol_l.constprop.0+0xb4>
 800d39c:	3c37      	subs	r4, #55	@ 0x37
 800d39e:	e7de      	b.n	800d35e <_strtol_l.constprop.0+0x72>
 800d3a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d3a4:	2f19      	cmp	r7, #25
 800d3a6:	d804      	bhi.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d3a8:	3c57      	subs	r4, #87	@ 0x57
 800d3aa:	e7d8      	b.n	800d35e <_strtol_l.constprop.0+0x72>
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	e7e1      	b.n	800d376 <_strtol_l.constprop.0+0x8a>
 800d3b2:	1c53      	adds	r3, r2, #1
 800d3b4:	d108      	bne.n	800d3c8 <_strtol_l.constprop.0+0xdc>
 800d3b6:	2322      	movs	r3, #34	@ 0x22
 800d3b8:	4660      	mov	r0, ip
 800d3ba:	f8ce 3000 	str.w	r3, [lr]
 800d3be:	f1b8 0f00 	cmp.w	r8, #0
 800d3c2:	d0a0      	beq.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3c4:	1e69      	subs	r1, r5, #1
 800d3c6:	e006      	b.n	800d3d6 <_strtol_l.constprop.0+0xea>
 800d3c8:	b106      	cbz	r6, 800d3cc <_strtol_l.constprop.0+0xe0>
 800d3ca:	4240      	negs	r0, r0
 800d3cc:	f1b8 0f00 	cmp.w	r8, #0
 800d3d0:	d099      	beq.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3d2:	2a00      	cmp	r2, #0
 800d3d4:	d1f6      	bne.n	800d3c4 <_strtol_l.constprop.0+0xd8>
 800d3d6:	f8c8 1000 	str.w	r1, [r8]
 800d3da:	e794      	b.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3dc:	08014501 	.word	0x08014501

0800d3e0 <_strtol_r>:
 800d3e0:	f7ff bf84 	b.w	800d2ec <_strtol_l.constprop.0>

0800d3e4 <strtol>:
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	460a      	mov	r2, r1
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	4802      	ldr	r0, [pc, #8]	@ (800d3f4 <strtol+0x10>)
 800d3ec:	6800      	ldr	r0, [r0, #0]
 800d3ee:	f7ff bf7d 	b.w	800d2ec <_strtol_l.constprop.0>
 800d3f2:	bf00      	nop
 800d3f4:	20000034 	.word	0x20000034

0800d3f8 <__cvt>:
 800d3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	ec57 6b10 	vmov	r6, r7, d0
 800d400:	2f00      	cmp	r7, #0
 800d402:	460c      	mov	r4, r1
 800d404:	4619      	mov	r1, r3
 800d406:	463b      	mov	r3, r7
 800d408:	bfb4      	ite	lt
 800d40a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d40e:	2300      	movge	r3, #0
 800d410:	4691      	mov	r9, r2
 800d412:	bfbf      	itttt	lt
 800d414:	4632      	movlt	r2, r6
 800d416:	461f      	movlt	r7, r3
 800d418:	232d      	movlt	r3, #45	@ 0x2d
 800d41a:	4616      	movlt	r6, r2
 800d41c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d420:	700b      	strb	r3, [r1, #0]
 800d422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d424:	f023 0820 	bic.w	r8, r3, #32
 800d428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d42c:	d005      	beq.n	800d43a <__cvt+0x42>
 800d42e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d432:	d100      	bne.n	800d436 <__cvt+0x3e>
 800d434:	3401      	adds	r4, #1
 800d436:	2102      	movs	r1, #2
 800d438:	e000      	b.n	800d43c <__cvt+0x44>
 800d43a:	2103      	movs	r1, #3
 800d43c:	ab03      	add	r3, sp, #12
 800d43e:	4622      	mov	r2, r4
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	ab02      	add	r3, sp, #8
 800d444:	ec47 6b10 	vmov	d0, r6, r7
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4653      	mov	r3, sl
 800d44c:	f001 f894 	bl	800e578 <_dtoa_r>
 800d450:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d454:	4605      	mov	r5, r0
 800d456:	d119      	bne.n	800d48c <__cvt+0x94>
 800d458:	f019 0f01 	tst.w	r9, #1
 800d45c:	d00e      	beq.n	800d47c <__cvt+0x84>
 800d45e:	eb00 0904 	add.w	r9, r0, r4
 800d462:	2200      	movs	r2, #0
 800d464:	2300      	movs	r3, #0
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	f7f3 fb41 	bl	8000af0 <__aeabi_dcmpeq>
 800d46e:	b108      	cbz	r0, 800d474 <__cvt+0x7c>
 800d470:	f8cd 900c 	str.w	r9, [sp, #12]
 800d474:	2230      	movs	r2, #48	@ 0x30
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	454b      	cmp	r3, r9
 800d47a:	d31e      	bcc.n	800d4ba <__cvt+0xc2>
 800d47c:	9b03      	ldr	r3, [sp, #12]
 800d47e:	4628      	mov	r0, r5
 800d480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d482:	1b5b      	subs	r3, r3, r5
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	b004      	add	sp, #16
 800d488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d48c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d490:	eb00 0904 	add.w	r9, r0, r4
 800d494:	d1e5      	bne.n	800d462 <__cvt+0x6a>
 800d496:	7803      	ldrb	r3, [r0, #0]
 800d498:	2b30      	cmp	r3, #48	@ 0x30
 800d49a:	d10a      	bne.n	800d4b2 <__cvt+0xba>
 800d49c:	2200      	movs	r2, #0
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	f7f3 fb24 	bl	8000af0 <__aeabi_dcmpeq>
 800d4a8:	b918      	cbnz	r0, 800d4b2 <__cvt+0xba>
 800d4aa:	f1c4 0401 	rsb	r4, r4, #1
 800d4ae:	f8ca 4000 	str.w	r4, [sl]
 800d4b2:	f8da 3000 	ldr.w	r3, [sl]
 800d4b6:	4499      	add	r9, r3
 800d4b8:	e7d3      	b.n	800d462 <__cvt+0x6a>
 800d4ba:	1c59      	adds	r1, r3, #1
 800d4bc:	9103      	str	r1, [sp, #12]
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	e7d9      	b.n	800d476 <__cvt+0x7e>

0800d4c2 <__exponent>:
 800d4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	7002      	strb	r2, [r0, #0]
 800d4c8:	bfba      	itte	lt
 800d4ca:	4249      	neglt	r1, r1
 800d4cc:	232d      	movlt	r3, #45	@ 0x2d
 800d4ce:	232b      	movge	r3, #43	@ 0x2b
 800d4d0:	2909      	cmp	r1, #9
 800d4d2:	7043      	strb	r3, [r0, #1]
 800d4d4:	dd28      	ble.n	800d528 <__exponent+0x66>
 800d4d6:	f10d 0307 	add.w	r3, sp, #7
 800d4da:	270a      	movs	r7, #10
 800d4dc:	461d      	mov	r5, r3
 800d4de:	461a      	mov	r2, r3
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4e6:	fb07 1416 	mls	r4, r7, r6, r1
 800d4ea:	3430      	adds	r4, #48	@ 0x30
 800d4ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	2c63      	cmp	r4, #99	@ 0x63
 800d4f6:	dcf2      	bgt.n	800d4de <__exponent+0x1c>
 800d4f8:	3130      	adds	r1, #48	@ 0x30
 800d4fa:	1e94      	subs	r4, r2, #2
 800d4fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d500:	1c41      	adds	r1, r0, #1
 800d502:	4623      	mov	r3, r4
 800d504:	42ab      	cmp	r3, r5
 800d506:	d30a      	bcc.n	800d51e <__exponent+0x5c>
 800d508:	f10d 0309 	add.w	r3, sp, #9
 800d50c:	1a9b      	subs	r3, r3, r2
 800d50e:	42ac      	cmp	r4, r5
 800d510:	bf88      	it	hi
 800d512:	2300      	movhi	r3, #0
 800d514:	3302      	adds	r3, #2
 800d516:	4403      	add	r3, r0
 800d518:	1a18      	subs	r0, r3, r0
 800d51a:	b003      	add	sp, #12
 800d51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d522:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d526:	e7ed      	b.n	800d504 <__exponent+0x42>
 800d528:	2330      	movs	r3, #48	@ 0x30
 800d52a:	3130      	adds	r1, #48	@ 0x30
 800d52c:	7083      	strb	r3, [r0, #2]
 800d52e:	1d03      	adds	r3, r0, #4
 800d530:	70c1      	strb	r1, [r0, #3]
 800d532:	e7f1      	b.n	800d518 <__exponent+0x56>

0800d534 <_printf_float>:
 800d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	b08d      	sub	sp, #52	@ 0x34
 800d53a:	460c      	mov	r4, r1
 800d53c:	4616      	mov	r6, r2
 800d53e:	461f      	mov	r7, r3
 800d540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d544:	4605      	mov	r5, r0
 800d546:	f000 fef1 	bl	800e32c <_localeconv_r>
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	9304      	str	r3, [sp, #16]
 800d550:	f7f2 fea2 	bl	8000298 <strlen>
 800d554:	2300      	movs	r3, #0
 800d556:	9005      	str	r0, [sp, #20]
 800d558:	930a      	str	r3, [sp, #40]	@ 0x28
 800d55a:	f8d8 3000 	ldr.w	r3, [r8]
 800d55e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d562:	3307      	adds	r3, #7
 800d564:	f8d4 b000 	ldr.w	fp, [r4]
 800d568:	f023 0307 	bic.w	r3, r3, #7
 800d56c:	f103 0208 	add.w	r2, r3, #8
 800d570:	f8c8 2000 	str.w	r2, [r8]
 800d574:	f04f 32ff 	mov.w	r2, #4294967295
 800d578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d57c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d580:	f8cd 8018 	str.w	r8, [sp, #24]
 800d584:	9307      	str	r3, [sp, #28]
 800d586:	4b9d      	ldr	r3, [pc, #628]	@ (800d7fc <_printf_float+0x2c8>)
 800d588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d58c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d590:	f7f3 fae0 	bl	8000b54 <__aeabi_dcmpun>
 800d594:	bb70      	cbnz	r0, 800d5f4 <_printf_float+0xc0>
 800d596:	f04f 32ff 	mov.w	r2, #4294967295
 800d59a:	4b98      	ldr	r3, [pc, #608]	@ (800d7fc <_printf_float+0x2c8>)
 800d59c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5a0:	f7f3 faba 	bl	8000b18 <__aeabi_dcmple>
 800d5a4:	bb30      	cbnz	r0, 800d5f4 <_printf_float+0xc0>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	f7f3 faa9 	bl	8000b04 <__aeabi_dcmplt>
 800d5b2:	b110      	cbz	r0, 800d5ba <_printf_float+0x86>
 800d5b4:	232d      	movs	r3, #45	@ 0x2d
 800d5b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ba:	4a91      	ldr	r2, [pc, #580]	@ (800d800 <_printf_float+0x2cc>)
 800d5bc:	4b91      	ldr	r3, [pc, #580]	@ (800d804 <_printf_float+0x2d0>)
 800d5be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5c2:	bf94      	ite	ls
 800d5c4:	4690      	movls	r8, r2
 800d5c6:	4698      	movhi	r8, r3
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	f04f 0900 	mov.w	r9, #0
 800d5ce:	6123      	str	r3, [r4, #16]
 800d5d0:	f02b 0304 	bic.w	r3, fp, #4
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	4633      	mov	r3, r6
 800d5d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4628      	mov	r0, r5
 800d5de:	9700      	str	r7, [sp, #0]
 800d5e0:	f000 f9d2 	bl	800d988 <_printf_common>
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	f040 808d 	bne.w	800d704 <_printf_float+0x1d0>
 800d5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ee:	b00d      	add	sp, #52	@ 0x34
 800d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f4:	4642      	mov	r2, r8
 800d5f6:	464b      	mov	r3, r9
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	f7f3 faaa 	bl	8000b54 <__aeabi_dcmpun>
 800d600:	b140      	cbz	r0, 800d614 <_printf_float+0xe0>
 800d602:	464b      	mov	r3, r9
 800d604:	4a80      	ldr	r2, [pc, #512]	@ (800d808 <_printf_float+0x2d4>)
 800d606:	2b00      	cmp	r3, #0
 800d608:	bfbc      	itt	lt
 800d60a:	232d      	movlt	r3, #45	@ 0x2d
 800d60c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d610:	4b7e      	ldr	r3, [pc, #504]	@ (800d80c <_printf_float+0x2d8>)
 800d612:	e7d4      	b.n	800d5be <_printf_float+0x8a>
 800d614:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	9206      	str	r2, [sp, #24]
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	d13b      	bne.n	800d698 <_printf_float+0x164>
 800d620:	2306      	movs	r3, #6
 800d622:	6063      	str	r3, [r4, #4]
 800d624:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d628:	2300      	movs	r3, #0
 800d62a:	4628      	mov	r0, r5
 800d62c:	6022      	str	r2, [r4, #0]
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	ab0a      	add	r3, sp, #40	@ 0x28
 800d632:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d636:	ab09      	add	r3, sp, #36	@ 0x24
 800d638:	ec49 8b10 	vmov	d0, r8, r9
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d642:	6861      	ldr	r1, [r4, #4]
 800d644:	f7ff fed8 	bl	800d3f8 <__cvt>
 800d648:	9b06      	ldr	r3, [sp, #24]
 800d64a:	4680      	mov	r8, r0
 800d64c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d64e:	2b47      	cmp	r3, #71	@ 0x47
 800d650:	d129      	bne.n	800d6a6 <_printf_float+0x172>
 800d652:	1cc8      	adds	r0, r1, #3
 800d654:	db02      	blt.n	800d65c <_printf_float+0x128>
 800d656:	6863      	ldr	r3, [r4, #4]
 800d658:	4299      	cmp	r1, r3
 800d65a:	dd41      	ble.n	800d6e0 <_printf_float+0x1ac>
 800d65c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d660:	fa5f fa8a 	uxtb.w	sl, sl
 800d664:	3901      	subs	r1, #1
 800d666:	4652      	mov	r2, sl
 800d668:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d66c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d66e:	f7ff ff28 	bl	800d4c2 <__exponent>
 800d672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d674:	4681      	mov	r9, r0
 800d676:	1813      	adds	r3, r2, r0
 800d678:	2a01      	cmp	r2, #1
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	dc02      	bgt.n	800d684 <_printf_float+0x150>
 800d67e:	6822      	ldr	r2, [r4, #0]
 800d680:	07d2      	lsls	r2, r2, #31
 800d682:	d501      	bpl.n	800d688 <_printf_float+0x154>
 800d684:	3301      	adds	r3, #1
 800d686:	6123      	str	r3, [r4, #16]
 800d688:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d0a2      	beq.n	800d5d6 <_printf_float+0xa2>
 800d690:	232d      	movs	r3, #45	@ 0x2d
 800d692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d696:	e79e      	b.n	800d5d6 <_printf_float+0xa2>
 800d698:	9a06      	ldr	r2, [sp, #24]
 800d69a:	2a47      	cmp	r2, #71	@ 0x47
 800d69c:	d1c2      	bne.n	800d624 <_printf_float+0xf0>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1c0      	bne.n	800d624 <_printf_float+0xf0>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e7bd      	b.n	800d622 <_printf_float+0xee>
 800d6a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6aa:	d9db      	bls.n	800d664 <_printf_float+0x130>
 800d6ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6b0:	d118      	bne.n	800d6e4 <_printf_float+0x1b0>
 800d6b2:	2900      	cmp	r1, #0
 800d6b4:	6863      	ldr	r3, [r4, #4]
 800d6b6:	dd0b      	ble.n	800d6d0 <_printf_float+0x19c>
 800d6b8:	6121      	str	r1, [r4, #16]
 800d6ba:	b913      	cbnz	r3, 800d6c2 <_printf_float+0x18e>
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	07d0      	lsls	r0, r2, #31
 800d6c0:	d502      	bpl.n	800d6c8 <_printf_float+0x194>
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	440b      	add	r3, r1
 800d6c6:	6123      	str	r3, [r4, #16]
 800d6c8:	f04f 0900 	mov.w	r9, #0
 800d6cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6ce:	e7db      	b.n	800d688 <_printf_float+0x154>
 800d6d0:	b913      	cbnz	r3, 800d6d8 <_printf_float+0x1a4>
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	07d2      	lsls	r2, r2, #31
 800d6d6:	d501      	bpl.n	800d6dc <_printf_float+0x1a8>
 800d6d8:	3302      	adds	r3, #2
 800d6da:	e7f4      	b.n	800d6c6 <_printf_float+0x192>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e7f2      	b.n	800d6c6 <_printf_float+0x192>
 800d6e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6e6:	4299      	cmp	r1, r3
 800d6e8:	db05      	blt.n	800d6f6 <_printf_float+0x1c2>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	6121      	str	r1, [r4, #16]
 800d6ee:	07d8      	lsls	r0, r3, #31
 800d6f0:	d5ea      	bpl.n	800d6c8 <_printf_float+0x194>
 800d6f2:	1c4b      	adds	r3, r1, #1
 800d6f4:	e7e7      	b.n	800d6c6 <_printf_float+0x192>
 800d6f6:	2900      	cmp	r1, #0
 800d6f8:	bfd4      	ite	le
 800d6fa:	f1c1 0202 	rsble	r2, r1, #2
 800d6fe:	2201      	movgt	r2, #1
 800d700:	4413      	add	r3, r2
 800d702:	e7e0      	b.n	800d6c6 <_printf_float+0x192>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	055a      	lsls	r2, r3, #21
 800d708:	d407      	bmi.n	800d71a <_printf_float+0x1e6>
 800d70a:	6923      	ldr	r3, [r4, #16]
 800d70c:	4642      	mov	r2, r8
 800d70e:	4631      	mov	r1, r6
 800d710:	4628      	mov	r0, r5
 800d712:	47b8      	blx	r7
 800d714:	3001      	adds	r0, #1
 800d716:	d12b      	bne.n	800d770 <_printf_float+0x23c>
 800d718:	e767      	b.n	800d5ea <_printf_float+0xb6>
 800d71a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d71e:	f240 80dd 	bls.w	800d8dc <_printf_float+0x3a8>
 800d722:	2200      	movs	r2, #0
 800d724:	2300      	movs	r3, #0
 800d726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d72a:	f7f3 f9e1 	bl	8000af0 <__aeabi_dcmpeq>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d033      	beq.n	800d79a <_printf_float+0x266>
 800d732:	2301      	movs	r3, #1
 800d734:	4a36      	ldr	r2, [pc, #216]	@ (800d810 <_printf_float+0x2dc>)
 800d736:	4631      	mov	r1, r6
 800d738:	4628      	mov	r0, r5
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	f43f af54 	beq.w	800d5ea <_printf_float+0xb6>
 800d742:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d746:	4543      	cmp	r3, r8
 800d748:	db02      	blt.n	800d750 <_printf_float+0x21c>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	07d8      	lsls	r0, r3, #31
 800d74e:	d50f      	bpl.n	800d770 <_printf_float+0x23c>
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d758:	47b8      	blx	r7
 800d75a:	3001      	adds	r0, #1
 800d75c:	f43f af45 	beq.w	800d5ea <_printf_float+0xb6>
 800d760:	f04f 0900 	mov.w	r9, #0
 800d764:	f108 38ff 	add.w	r8, r8, #4294967295
 800d768:	f104 0a1a 	add.w	sl, r4, #26
 800d76c:	45c8      	cmp	r8, r9
 800d76e:	dc09      	bgt.n	800d784 <_printf_float+0x250>
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	079b      	lsls	r3, r3, #30
 800d774:	f100 8103 	bmi.w	800d97e <_printf_float+0x44a>
 800d778:	68e0      	ldr	r0, [r4, #12]
 800d77a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d77c:	4298      	cmp	r0, r3
 800d77e:	bfb8      	it	lt
 800d780:	4618      	movlt	r0, r3
 800d782:	e734      	b.n	800d5ee <_printf_float+0xba>
 800d784:	2301      	movs	r3, #1
 800d786:	4652      	mov	r2, sl
 800d788:	4631      	mov	r1, r6
 800d78a:	4628      	mov	r0, r5
 800d78c:	47b8      	blx	r7
 800d78e:	3001      	adds	r0, #1
 800d790:	f43f af2b 	beq.w	800d5ea <_printf_float+0xb6>
 800d794:	f109 0901 	add.w	r9, r9, #1
 800d798:	e7e8      	b.n	800d76c <_printf_float+0x238>
 800d79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dc39      	bgt.n	800d814 <_printf_float+0x2e0>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d810 <_printf_float+0x2dc>)
 800d7a4:	4631      	mov	r1, r6
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	47b8      	blx	r7
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	f43f af1d 	beq.w	800d5ea <_printf_float+0xb6>
 800d7b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7b4:	ea59 0303 	orrs.w	r3, r9, r3
 800d7b8:	d102      	bne.n	800d7c0 <_printf_float+0x28c>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	07d9      	lsls	r1, r3, #31
 800d7be:	d5d7      	bpl.n	800d770 <_printf_float+0x23c>
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7c8:	47b8      	blx	r7
 800d7ca:	3001      	adds	r0, #1
 800d7cc:	f43f af0d 	beq.w	800d5ea <_printf_float+0xb6>
 800d7d0:	f04f 0a00 	mov.w	sl, #0
 800d7d4:	f104 0b1a 	add.w	fp, r4, #26
 800d7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7da:	425b      	negs	r3, r3
 800d7dc:	4553      	cmp	r3, sl
 800d7de:	dc01      	bgt.n	800d7e4 <_printf_float+0x2b0>
 800d7e0:	464b      	mov	r3, r9
 800d7e2:	e793      	b.n	800d70c <_printf_float+0x1d8>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	465a      	mov	r2, fp
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	47b8      	blx	r7
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	f43f aefb 	beq.w	800d5ea <_printf_float+0xb6>
 800d7f4:	f10a 0a01 	add.w	sl, sl, #1
 800d7f8:	e7ee      	b.n	800d7d8 <_printf_float+0x2a4>
 800d7fa:	bf00      	nop
 800d7fc:	7fefffff 	.word	0x7fefffff
 800d800:	08014601 	.word	0x08014601
 800d804:	08014605 	.word	0x08014605
 800d808:	08014609 	.word	0x08014609
 800d80c:	0801460d 	.word	0x0801460d
 800d810:	08014611 	.word	0x08014611
 800d814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d816:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d81a:	4553      	cmp	r3, sl
 800d81c:	bfa8      	it	ge
 800d81e:	4653      	movge	r3, sl
 800d820:	2b00      	cmp	r3, #0
 800d822:	4699      	mov	r9, r3
 800d824:	dc36      	bgt.n	800d894 <_printf_float+0x360>
 800d826:	f04f 0b00 	mov.w	fp, #0
 800d82a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d82e:	f104 021a 	add.w	r2, r4, #26
 800d832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d834:	9306      	str	r3, [sp, #24]
 800d836:	eba3 0309 	sub.w	r3, r3, r9
 800d83a:	455b      	cmp	r3, fp
 800d83c:	dc31      	bgt.n	800d8a2 <_printf_float+0x36e>
 800d83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d840:	459a      	cmp	sl, r3
 800d842:	dc3a      	bgt.n	800d8ba <_printf_float+0x386>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	07da      	lsls	r2, r3, #31
 800d848:	d437      	bmi.n	800d8ba <_printf_float+0x386>
 800d84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84c:	ebaa 0903 	sub.w	r9, sl, r3
 800d850:	9b06      	ldr	r3, [sp, #24]
 800d852:	ebaa 0303 	sub.w	r3, sl, r3
 800d856:	4599      	cmp	r9, r3
 800d858:	bfa8      	it	ge
 800d85a:	4699      	movge	r9, r3
 800d85c:	f1b9 0f00 	cmp.w	r9, #0
 800d860:	dc33      	bgt.n	800d8ca <_printf_float+0x396>
 800d862:	f04f 0800 	mov.w	r8, #0
 800d866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d86a:	f104 0b1a 	add.w	fp, r4, #26
 800d86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d870:	ebaa 0303 	sub.w	r3, sl, r3
 800d874:	eba3 0309 	sub.w	r3, r3, r9
 800d878:	4543      	cmp	r3, r8
 800d87a:	f77f af79 	ble.w	800d770 <_printf_float+0x23c>
 800d87e:	2301      	movs	r3, #1
 800d880:	465a      	mov	r2, fp
 800d882:	4631      	mov	r1, r6
 800d884:	4628      	mov	r0, r5
 800d886:	47b8      	blx	r7
 800d888:	3001      	adds	r0, #1
 800d88a:	f43f aeae 	beq.w	800d5ea <_printf_float+0xb6>
 800d88e:	f108 0801 	add.w	r8, r8, #1
 800d892:	e7ec      	b.n	800d86e <_printf_float+0x33a>
 800d894:	4642      	mov	r2, r8
 800d896:	4631      	mov	r1, r6
 800d898:	4628      	mov	r0, r5
 800d89a:	47b8      	blx	r7
 800d89c:	3001      	adds	r0, #1
 800d89e:	d1c2      	bne.n	800d826 <_printf_float+0x2f2>
 800d8a0:	e6a3      	b.n	800d5ea <_printf_float+0xb6>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	9206      	str	r2, [sp, #24]
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	f43f ae9c 	beq.w	800d5ea <_printf_float+0xb6>
 800d8b2:	f10b 0b01 	add.w	fp, fp, #1
 800d8b6:	9a06      	ldr	r2, [sp, #24]
 800d8b8:	e7bb      	b.n	800d832 <_printf_float+0x2fe>
 800d8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8be:	4631      	mov	r1, r6
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b8      	blx	r7
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d1c0      	bne.n	800d84a <_printf_float+0x316>
 800d8c8:	e68f      	b.n	800d5ea <_printf_float+0xb6>
 800d8ca:	9a06      	ldr	r2, [sp, #24]
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	4442      	add	r2, r8
 800d8d4:	47b8      	blx	r7
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d1c3      	bne.n	800d862 <_printf_float+0x32e>
 800d8da:	e686      	b.n	800d5ea <_printf_float+0xb6>
 800d8dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8e0:	f1ba 0f01 	cmp.w	sl, #1
 800d8e4:	dc01      	bgt.n	800d8ea <_printf_float+0x3b6>
 800d8e6:	07db      	lsls	r3, r3, #31
 800d8e8:	d536      	bpl.n	800d958 <_printf_float+0x424>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	4642      	mov	r2, r8
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	f43f ae78 	beq.w	800d5ea <_printf_float+0xb6>
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f ae70 	beq.w	800d5ea <_printf_float+0xb6>
 800d90a:	2200      	movs	r2, #0
 800d90c:	2300      	movs	r3, #0
 800d90e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d916:	f7f3 f8eb 	bl	8000af0 <__aeabi_dcmpeq>
 800d91a:	b9c0      	cbnz	r0, 800d94e <_printf_float+0x41a>
 800d91c:	4653      	mov	r3, sl
 800d91e:	f108 0201 	add.w	r2, r8, #1
 800d922:	4631      	mov	r1, r6
 800d924:	4628      	mov	r0, r5
 800d926:	47b8      	blx	r7
 800d928:	3001      	adds	r0, #1
 800d92a:	d10c      	bne.n	800d946 <_printf_float+0x412>
 800d92c:	e65d      	b.n	800d5ea <_printf_float+0xb6>
 800d92e:	2301      	movs	r3, #1
 800d930:	465a      	mov	r2, fp
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f ae56 	beq.w	800d5ea <_printf_float+0xb6>
 800d93e:	f108 0801 	add.w	r8, r8, #1
 800d942:	45d0      	cmp	r8, sl
 800d944:	dbf3      	blt.n	800d92e <_printf_float+0x3fa>
 800d946:	464b      	mov	r3, r9
 800d948:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d94c:	e6df      	b.n	800d70e <_printf_float+0x1da>
 800d94e:	f04f 0800 	mov.w	r8, #0
 800d952:	f104 0b1a 	add.w	fp, r4, #26
 800d956:	e7f4      	b.n	800d942 <_printf_float+0x40e>
 800d958:	2301      	movs	r3, #1
 800d95a:	4642      	mov	r2, r8
 800d95c:	e7e1      	b.n	800d922 <_printf_float+0x3ee>
 800d95e:	2301      	movs	r3, #1
 800d960:	464a      	mov	r2, r9
 800d962:	4631      	mov	r1, r6
 800d964:	4628      	mov	r0, r5
 800d966:	47b8      	blx	r7
 800d968:	3001      	adds	r0, #1
 800d96a:	f43f ae3e 	beq.w	800d5ea <_printf_float+0xb6>
 800d96e:	f108 0801 	add.w	r8, r8, #1
 800d972:	68e3      	ldr	r3, [r4, #12]
 800d974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d976:	1a5b      	subs	r3, r3, r1
 800d978:	4543      	cmp	r3, r8
 800d97a:	dcf0      	bgt.n	800d95e <_printf_float+0x42a>
 800d97c:	e6fc      	b.n	800d778 <_printf_float+0x244>
 800d97e:	f04f 0800 	mov.w	r8, #0
 800d982:	f104 0919 	add.w	r9, r4, #25
 800d986:	e7f4      	b.n	800d972 <_printf_float+0x43e>

0800d988 <_printf_common>:
 800d988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d98c:	4616      	mov	r6, r2
 800d98e:	4698      	mov	r8, r3
 800d990:	688a      	ldr	r2, [r1, #8]
 800d992:	4607      	mov	r7, r0
 800d994:	690b      	ldr	r3, [r1, #16]
 800d996:	460c      	mov	r4, r1
 800d998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d99c:	4293      	cmp	r3, r2
 800d99e:	bfb8      	it	lt
 800d9a0:	4613      	movlt	r3, r2
 800d9a2:	6033      	str	r3, [r6, #0]
 800d9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9a8:	b10a      	cbz	r2, 800d9ae <_printf_common+0x26>
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	6033      	str	r3, [r6, #0]
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	0699      	lsls	r1, r3, #26
 800d9b2:	bf42      	ittt	mi
 800d9b4:	6833      	ldrmi	r3, [r6, #0]
 800d9b6:	3302      	addmi	r3, #2
 800d9b8:	6033      	strmi	r3, [r6, #0]
 800d9ba:	6825      	ldr	r5, [r4, #0]
 800d9bc:	f015 0506 	ands.w	r5, r5, #6
 800d9c0:	d106      	bne.n	800d9d0 <_printf_common+0x48>
 800d9c2:	f104 0a19 	add.w	sl, r4, #25
 800d9c6:	68e3      	ldr	r3, [r4, #12]
 800d9c8:	6832      	ldr	r2, [r6, #0]
 800d9ca:	1a9b      	subs	r3, r3, r2
 800d9cc:	42ab      	cmp	r3, r5
 800d9ce:	dc2b      	bgt.n	800da28 <_printf_common+0xa0>
 800d9d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9d4:	6822      	ldr	r2, [r4, #0]
 800d9d6:	3b00      	subs	r3, #0
 800d9d8:	bf18      	it	ne
 800d9da:	2301      	movne	r3, #1
 800d9dc:	0692      	lsls	r2, r2, #26
 800d9de:	d430      	bmi.n	800da42 <_printf_common+0xba>
 800d9e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9e4:	4641      	mov	r1, r8
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	47c8      	blx	r9
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d023      	beq.n	800da36 <_printf_common+0xae>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	341a      	adds	r4, #26
 800d9f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d9f6:	f003 0306 	and.w	r3, r3, #6
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	bf0a      	itet	eq
 800d9fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800da02:	2500      	movne	r5, #0
 800da04:	6833      	ldreq	r3, [r6, #0]
 800da06:	f04f 0600 	mov.w	r6, #0
 800da0a:	bf08      	it	eq
 800da0c:	1aed      	subeq	r5, r5, r3
 800da0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800da12:	bf08      	it	eq
 800da14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da18:	4293      	cmp	r3, r2
 800da1a:	bfc4      	itt	gt
 800da1c:	1a9b      	subgt	r3, r3, r2
 800da1e:	18ed      	addgt	r5, r5, r3
 800da20:	42b5      	cmp	r5, r6
 800da22:	d11a      	bne.n	800da5a <_printf_common+0xd2>
 800da24:	2000      	movs	r0, #0
 800da26:	e008      	b.n	800da3a <_printf_common+0xb2>
 800da28:	2301      	movs	r3, #1
 800da2a:	4652      	mov	r2, sl
 800da2c:	4641      	mov	r1, r8
 800da2e:	4638      	mov	r0, r7
 800da30:	47c8      	blx	r9
 800da32:	3001      	adds	r0, #1
 800da34:	d103      	bne.n	800da3e <_printf_common+0xb6>
 800da36:	f04f 30ff 	mov.w	r0, #4294967295
 800da3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3e:	3501      	adds	r5, #1
 800da40:	e7c1      	b.n	800d9c6 <_printf_common+0x3e>
 800da42:	18e1      	adds	r1, r4, r3
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	2030      	movs	r0, #48	@ 0x30
 800da48:	3302      	adds	r3, #2
 800da4a:	4422      	add	r2, r4
 800da4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da58:	e7c2      	b.n	800d9e0 <_printf_common+0x58>
 800da5a:	2301      	movs	r3, #1
 800da5c:	4622      	mov	r2, r4
 800da5e:	4641      	mov	r1, r8
 800da60:	4638      	mov	r0, r7
 800da62:	47c8      	blx	r9
 800da64:	3001      	adds	r0, #1
 800da66:	d0e6      	beq.n	800da36 <_printf_common+0xae>
 800da68:	3601      	adds	r6, #1
 800da6a:	e7d9      	b.n	800da20 <_printf_common+0x98>

0800da6c <_printf_i>:
 800da6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	7e0f      	ldrb	r7, [r1, #24]
 800da72:	4691      	mov	r9, r2
 800da74:	4680      	mov	r8, r0
 800da76:	460c      	mov	r4, r1
 800da78:	2f78      	cmp	r7, #120	@ 0x78
 800da7a:	469a      	mov	sl, r3
 800da7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da82:	d807      	bhi.n	800da94 <_printf_i+0x28>
 800da84:	2f62      	cmp	r7, #98	@ 0x62
 800da86:	d80a      	bhi.n	800da9e <_printf_i+0x32>
 800da88:	2f00      	cmp	r7, #0
 800da8a:	f000 80d2 	beq.w	800dc32 <_printf_i+0x1c6>
 800da8e:	2f58      	cmp	r7, #88	@ 0x58
 800da90:	f000 80b9 	beq.w	800dc06 <_printf_i+0x19a>
 800da94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da9c:	e03a      	b.n	800db14 <_printf_i+0xa8>
 800da9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daa2:	2b15      	cmp	r3, #21
 800daa4:	d8f6      	bhi.n	800da94 <_printf_i+0x28>
 800daa6:	a101      	add	r1, pc, #4	@ (adr r1, 800daac <_printf_i+0x40>)
 800daa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daac:	0800db05 	.word	0x0800db05
 800dab0:	0800db19 	.word	0x0800db19
 800dab4:	0800da95 	.word	0x0800da95
 800dab8:	0800da95 	.word	0x0800da95
 800dabc:	0800da95 	.word	0x0800da95
 800dac0:	0800da95 	.word	0x0800da95
 800dac4:	0800db19 	.word	0x0800db19
 800dac8:	0800da95 	.word	0x0800da95
 800dacc:	0800da95 	.word	0x0800da95
 800dad0:	0800da95 	.word	0x0800da95
 800dad4:	0800da95 	.word	0x0800da95
 800dad8:	0800dc19 	.word	0x0800dc19
 800dadc:	0800db43 	.word	0x0800db43
 800dae0:	0800dbd3 	.word	0x0800dbd3
 800dae4:	0800da95 	.word	0x0800da95
 800dae8:	0800da95 	.word	0x0800da95
 800daec:	0800dc3b 	.word	0x0800dc3b
 800daf0:	0800da95 	.word	0x0800da95
 800daf4:	0800db43 	.word	0x0800db43
 800daf8:	0800da95 	.word	0x0800da95
 800dafc:	0800da95 	.word	0x0800da95
 800db00:	0800dbdb 	.word	0x0800dbdb
 800db04:	6833      	ldr	r3, [r6, #0]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6032      	str	r2, [r6, #0]
 800db0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db14:	2301      	movs	r3, #1
 800db16:	e09d      	b.n	800dc54 <_printf_i+0x1e8>
 800db18:	6833      	ldr	r3, [r6, #0]
 800db1a:	6820      	ldr	r0, [r4, #0]
 800db1c:	1d19      	adds	r1, r3, #4
 800db1e:	6031      	str	r1, [r6, #0]
 800db20:	0606      	lsls	r6, r0, #24
 800db22:	d501      	bpl.n	800db28 <_printf_i+0xbc>
 800db24:	681d      	ldr	r5, [r3, #0]
 800db26:	e003      	b.n	800db30 <_printf_i+0xc4>
 800db28:	0645      	lsls	r5, r0, #25
 800db2a:	d5fb      	bpl.n	800db24 <_printf_i+0xb8>
 800db2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db30:	2d00      	cmp	r5, #0
 800db32:	da03      	bge.n	800db3c <_printf_i+0xd0>
 800db34:	232d      	movs	r3, #45	@ 0x2d
 800db36:	426d      	negs	r5, r5
 800db38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db3c:	4859      	ldr	r0, [pc, #356]	@ (800dca4 <_printf_i+0x238>)
 800db3e:	230a      	movs	r3, #10
 800db40:	e011      	b.n	800db66 <_printf_i+0xfa>
 800db42:	6821      	ldr	r1, [r4, #0]
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	0608      	lsls	r0, r1, #24
 800db48:	f853 5b04 	ldr.w	r5, [r3], #4
 800db4c:	d402      	bmi.n	800db54 <_printf_i+0xe8>
 800db4e:	0649      	lsls	r1, r1, #25
 800db50:	bf48      	it	mi
 800db52:	b2ad      	uxthmi	r5, r5
 800db54:	2f6f      	cmp	r7, #111	@ 0x6f
 800db56:	6033      	str	r3, [r6, #0]
 800db58:	4852      	ldr	r0, [pc, #328]	@ (800dca4 <_printf_i+0x238>)
 800db5a:	bf14      	ite	ne
 800db5c:	230a      	movne	r3, #10
 800db5e:	2308      	moveq	r3, #8
 800db60:	2100      	movs	r1, #0
 800db62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db66:	6866      	ldr	r6, [r4, #4]
 800db68:	2e00      	cmp	r6, #0
 800db6a:	60a6      	str	r6, [r4, #8]
 800db6c:	bfa2      	ittt	ge
 800db6e:	6821      	ldrge	r1, [r4, #0]
 800db70:	f021 0104 	bicge.w	r1, r1, #4
 800db74:	6021      	strge	r1, [r4, #0]
 800db76:	b90d      	cbnz	r5, 800db7c <_printf_i+0x110>
 800db78:	2e00      	cmp	r6, #0
 800db7a:	d04b      	beq.n	800dc14 <_printf_i+0x1a8>
 800db7c:	4616      	mov	r6, r2
 800db7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800db82:	fb03 5711 	mls	r7, r3, r1, r5
 800db86:	5dc7      	ldrb	r7, [r0, r7]
 800db88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db8c:	462f      	mov	r7, r5
 800db8e:	460d      	mov	r5, r1
 800db90:	42bb      	cmp	r3, r7
 800db92:	d9f4      	bls.n	800db7e <_printf_i+0x112>
 800db94:	2b08      	cmp	r3, #8
 800db96:	d10b      	bne.n	800dbb0 <_printf_i+0x144>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	07df      	lsls	r7, r3, #31
 800db9c:	d508      	bpl.n	800dbb0 <_printf_i+0x144>
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	4299      	cmp	r1, r3
 800dba4:	bfde      	ittt	le
 800dba6:	2330      	movle	r3, #48	@ 0x30
 800dba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbb0:	1b92      	subs	r2, r2, r6
 800dbb2:	6122      	str	r2, [r4, #16]
 800dbb4:	464b      	mov	r3, r9
 800dbb6:	aa03      	add	r2, sp, #12
 800dbb8:	4621      	mov	r1, r4
 800dbba:	4640      	mov	r0, r8
 800dbbc:	f8cd a000 	str.w	sl, [sp]
 800dbc0:	f7ff fee2 	bl	800d988 <_printf_common>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d14a      	bne.n	800dc5e <_printf_i+0x1f2>
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	b004      	add	sp, #16
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	f043 0320 	orr.w	r3, r3, #32
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	2778      	movs	r7, #120	@ 0x78
 800dbdc:	4832      	ldr	r0, [pc, #200]	@ (800dca8 <_printf_i+0x23c>)
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbe4:	061f      	lsls	r7, r3, #24
 800dbe6:	6831      	ldr	r1, [r6, #0]
 800dbe8:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbec:	d402      	bmi.n	800dbf4 <_printf_i+0x188>
 800dbee:	065f      	lsls	r7, r3, #25
 800dbf0:	bf48      	it	mi
 800dbf2:	b2ad      	uxthmi	r5, r5
 800dbf4:	6031      	str	r1, [r6, #0]
 800dbf6:	07d9      	lsls	r1, r3, #31
 800dbf8:	bf44      	itt	mi
 800dbfa:	f043 0320 	orrmi.w	r3, r3, #32
 800dbfe:	6023      	strmi	r3, [r4, #0]
 800dc00:	b11d      	cbz	r5, 800dc0a <_printf_i+0x19e>
 800dc02:	2310      	movs	r3, #16
 800dc04:	e7ac      	b.n	800db60 <_printf_i+0xf4>
 800dc06:	4827      	ldr	r0, [pc, #156]	@ (800dca4 <_printf_i+0x238>)
 800dc08:	e7e9      	b.n	800dbde <_printf_i+0x172>
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	f023 0320 	bic.w	r3, r3, #32
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	e7f6      	b.n	800dc02 <_printf_i+0x196>
 800dc14:	4616      	mov	r6, r2
 800dc16:	e7bd      	b.n	800db94 <_printf_i+0x128>
 800dc18:	6833      	ldr	r3, [r6, #0]
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	1d18      	adds	r0, r3, #4
 800dc1e:	6961      	ldr	r1, [r4, #20]
 800dc20:	6030      	str	r0, [r6, #0]
 800dc22:	062e      	lsls	r6, r5, #24
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	d501      	bpl.n	800dc2c <_printf_i+0x1c0>
 800dc28:	6019      	str	r1, [r3, #0]
 800dc2a:	e002      	b.n	800dc32 <_printf_i+0x1c6>
 800dc2c:	0668      	lsls	r0, r5, #25
 800dc2e:	d5fb      	bpl.n	800dc28 <_printf_i+0x1bc>
 800dc30:	8019      	strh	r1, [r3, #0]
 800dc32:	2300      	movs	r3, #0
 800dc34:	4616      	mov	r6, r2
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	e7bc      	b.n	800dbb4 <_printf_i+0x148>
 800dc3a:	6833      	ldr	r3, [r6, #0]
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	1d1a      	adds	r2, r3, #4
 800dc40:	6032      	str	r2, [r6, #0]
 800dc42:	681e      	ldr	r6, [r3, #0]
 800dc44:	6862      	ldr	r2, [r4, #4]
 800dc46:	4630      	mov	r0, r6
 800dc48:	f000 fbe7 	bl	800e41a <memchr>
 800dc4c:	b108      	cbz	r0, 800dc52 <_printf_i+0x1e6>
 800dc4e:	1b80      	subs	r0, r0, r6
 800dc50:	6060      	str	r0, [r4, #4]
 800dc52:	6863      	ldr	r3, [r4, #4]
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	2300      	movs	r3, #0
 800dc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5c:	e7aa      	b.n	800dbb4 <_printf_i+0x148>
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	4632      	mov	r2, r6
 800dc62:	4649      	mov	r1, r9
 800dc64:	4640      	mov	r0, r8
 800dc66:	47d0      	blx	sl
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d0ad      	beq.n	800dbc8 <_printf_i+0x15c>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	079b      	lsls	r3, r3, #30
 800dc70:	d413      	bmi.n	800dc9a <_printf_i+0x22e>
 800dc72:	68e0      	ldr	r0, [r4, #12]
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	4298      	cmp	r0, r3
 800dc78:	bfb8      	it	lt
 800dc7a:	4618      	movlt	r0, r3
 800dc7c:	e7a6      	b.n	800dbcc <_printf_i+0x160>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4632      	mov	r2, r6
 800dc82:	4649      	mov	r1, r9
 800dc84:	4640      	mov	r0, r8
 800dc86:	47d0      	blx	sl
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d09d      	beq.n	800dbc8 <_printf_i+0x15c>
 800dc8c:	3501      	adds	r5, #1
 800dc8e:	68e3      	ldr	r3, [r4, #12]
 800dc90:	9903      	ldr	r1, [sp, #12]
 800dc92:	1a5b      	subs	r3, r3, r1
 800dc94:	42ab      	cmp	r3, r5
 800dc96:	dcf2      	bgt.n	800dc7e <_printf_i+0x212>
 800dc98:	e7eb      	b.n	800dc72 <_printf_i+0x206>
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	f104 0619 	add.w	r6, r4, #25
 800dca0:	e7f5      	b.n	800dc8e <_printf_i+0x222>
 800dca2:	bf00      	nop
 800dca4:	08014613 	.word	0x08014613
 800dca8:	08014624 	.word	0x08014624

0800dcac <_scanf_float>:
 800dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb0:	b087      	sub	sp, #28
 800dcb2:	4617      	mov	r7, r2
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	688b      	ldr	r3, [r1, #8]
 800dcbc:	1e5a      	subs	r2, r3, #1
 800dcbe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dcc2:	460a      	mov	r2, r1
 800dcc4:	bf89      	itett	hi
 800dcc6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dcca:	f04f 0b00 	movls.w	fp, #0
 800dcce:	eb03 0b05 	addhi.w	fp, r3, r5
 800dcd2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dcd6:	f04f 0500 	mov.w	r5, #0
 800dcda:	bf88      	it	hi
 800dcdc:	608b      	strhi	r3, [r1, #8]
 800dcde:	680b      	ldr	r3, [r1, #0]
 800dce0:	46aa      	mov	sl, r5
 800dce2:	46a9      	mov	r9, r5
 800dce4:	9502      	str	r5, [sp, #8]
 800dce6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dcea:	f842 3b1c 	str.w	r3, [r2], #28
 800dcee:	4616      	mov	r6, r2
 800dcf0:	9201      	str	r2, [sp, #4]
 800dcf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	b152      	cbz	r2, 800dd10 <_scanf_float+0x64>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd00:	d864      	bhi.n	800ddcc <_scanf_float+0x120>
 800dd02:	2b40      	cmp	r3, #64	@ 0x40
 800dd04:	d83c      	bhi.n	800dd80 <_scanf_float+0xd4>
 800dd06:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd0a:	b2c8      	uxtb	r0, r1
 800dd0c:	280e      	cmp	r0, #14
 800dd0e:	d93a      	bls.n	800dd86 <_scanf_float+0xda>
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	d003      	beq.n	800dd1e <_scanf_float+0x72>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd22:	f1ba 0f01 	cmp.w	sl, #1
 800dd26:	f200 8117 	bhi.w	800df58 <_scanf_float+0x2ac>
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	429e      	cmp	r6, r3
 800dd2e:	f200 8108 	bhi.w	800df42 <_scanf_float+0x296>
 800dd32:	2001      	movs	r0, #1
 800dd34:	b007      	add	sp, #28
 800dd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd3e:	2a0d      	cmp	r2, #13
 800dd40:	d8e6      	bhi.n	800dd10 <_scanf_float+0x64>
 800dd42:	a101      	add	r1, pc, #4	@ (adr r1, 800dd48 <_scanf_float+0x9c>)
 800dd44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd48:	0800de8f 	.word	0x0800de8f
 800dd4c:	0800dd11 	.word	0x0800dd11
 800dd50:	0800dd11 	.word	0x0800dd11
 800dd54:	0800dd11 	.word	0x0800dd11
 800dd58:	0800deef 	.word	0x0800deef
 800dd5c:	0800dec7 	.word	0x0800dec7
 800dd60:	0800dd11 	.word	0x0800dd11
 800dd64:	0800dd11 	.word	0x0800dd11
 800dd68:	0800de9d 	.word	0x0800de9d
 800dd6c:	0800dd11 	.word	0x0800dd11
 800dd70:	0800dd11 	.word	0x0800dd11
 800dd74:	0800dd11 	.word	0x0800dd11
 800dd78:	0800dd11 	.word	0x0800dd11
 800dd7c:	0800de55 	.word	0x0800de55
 800dd80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dd84:	e7db      	b.n	800dd3e <_scanf_float+0x92>
 800dd86:	290e      	cmp	r1, #14
 800dd88:	d8c2      	bhi.n	800dd10 <_scanf_float+0x64>
 800dd8a:	a001      	add	r0, pc, #4	@ (adr r0, 800dd90 <_scanf_float+0xe4>)
 800dd8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd90:	0800de45 	.word	0x0800de45
 800dd94:	0800dd11 	.word	0x0800dd11
 800dd98:	0800de45 	.word	0x0800de45
 800dd9c:	0800dedb 	.word	0x0800dedb
 800dda0:	0800dd11 	.word	0x0800dd11
 800dda4:	0800dded 	.word	0x0800dded
 800dda8:	0800de2b 	.word	0x0800de2b
 800ddac:	0800de2b 	.word	0x0800de2b
 800ddb0:	0800de2b 	.word	0x0800de2b
 800ddb4:	0800de2b 	.word	0x0800de2b
 800ddb8:	0800de2b 	.word	0x0800de2b
 800ddbc:	0800de2b 	.word	0x0800de2b
 800ddc0:	0800de2b 	.word	0x0800de2b
 800ddc4:	0800de2b 	.word	0x0800de2b
 800ddc8:	0800de2b 	.word	0x0800de2b
 800ddcc:	2b6e      	cmp	r3, #110	@ 0x6e
 800ddce:	d809      	bhi.n	800dde4 <_scanf_float+0x138>
 800ddd0:	2b60      	cmp	r3, #96	@ 0x60
 800ddd2:	d8b2      	bhi.n	800dd3a <_scanf_float+0x8e>
 800ddd4:	2b54      	cmp	r3, #84	@ 0x54
 800ddd6:	d07b      	beq.n	800ded0 <_scanf_float+0x224>
 800ddd8:	2b59      	cmp	r3, #89	@ 0x59
 800ddda:	d199      	bne.n	800dd10 <_scanf_float+0x64>
 800dddc:	2d07      	cmp	r5, #7
 800ddde:	d197      	bne.n	800dd10 <_scanf_float+0x64>
 800dde0:	2508      	movs	r5, #8
 800dde2:	e02c      	b.n	800de3e <_scanf_float+0x192>
 800dde4:	2b74      	cmp	r3, #116	@ 0x74
 800dde6:	d073      	beq.n	800ded0 <_scanf_float+0x224>
 800dde8:	2b79      	cmp	r3, #121	@ 0x79
 800ddea:	e7f6      	b.n	800ddda <_scanf_float+0x12e>
 800ddec:	6821      	ldr	r1, [r4, #0]
 800ddee:	05c8      	lsls	r0, r1, #23
 800ddf0:	d51b      	bpl.n	800de2a <_scanf_float+0x17e>
 800ddf2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ddf6:	f109 0901 	add.w	r9, r9, #1
 800ddfa:	6021      	str	r1, [r4, #0]
 800ddfc:	f1bb 0f00 	cmp.w	fp, #0
 800de00:	d003      	beq.n	800de0a <_scanf_float+0x15e>
 800de02:	3201      	adds	r2, #1
 800de04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de08:	60a2      	str	r2, [r4, #8]
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	6923      	ldr	r3, [r4, #16]
 800de12:	3301      	adds	r3, #1
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3b01      	subs	r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	607b      	str	r3, [r7, #4]
 800de1e:	f340 8087 	ble.w	800df30 <_scanf_float+0x284>
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	e765      	b.n	800dcf6 <_scanf_float+0x4a>
 800de2a:	eb1a 0105 	adds.w	r1, sl, r5
 800de2e:	f47f af6f 	bne.w	800dd10 <_scanf_float+0x64>
 800de32:	6822      	ldr	r2, [r4, #0]
 800de34:	460d      	mov	r5, r1
 800de36:	468a      	mov	sl, r1
 800de38:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de3c:	6022      	str	r2, [r4, #0]
 800de3e:	f806 3b01 	strb.w	r3, [r6], #1
 800de42:	e7e2      	b.n	800de0a <_scanf_float+0x15e>
 800de44:	6822      	ldr	r2, [r4, #0]
 800de46:	0610      	lsls	r0, r2, #24
 800de48:	f57f af62 	bpl.w	800dd10 <_scanf_float+0x64>
 800de4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de50:	6022      	str	r2, [r4, #0]
 800de52:	e7f4      	b.n	800de3e <_scanf_float+0x192>
 800de54:	f1ba 0f00 	cmp.w	sl, #0
 800de58:	d10e      	bne.n	800de78 <_scanf_float+0x1cc>
 800de5a:	f1b9 0f00 	cmp.w	r9, #0
 800de5e:	d10e      	bne.n	800de7e <_scanf_float+0x1d2>
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de66:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de6a:	d108      	bne.n	800de7e <_scanf_float+0x1d2>
 800de6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de70:	f04f 0a01 	mov.w	sl, #1
 800de74:	6022      	str	r2, [r4, #0]
 800de76:	e7e2      	b.n	800de3e <_scanf_float+0x192>
 800de78:	f1ba 0f02 	cmp.w	sl, #2
 800de7c:	d055      	beq.n	800df2a <_scanf_float+0x27e>
 800de7e:	2d01      	cmp	r5, #1
 800de80:	d002      	beq.n	800de88 <_scanf_float+0x1dc>
 800de82:	2d04      	cmp	r5, #4
 800de84:	f47f af44 	bne.w	800dd10 <_scanf_float+0x64>
 800de88:	3501      	adds	r5, #1
 800de8a:	b2ed      	uxtb	r5, r5
 800de8c:	e7d7      	b.n	800de3e <_scanf_float+0x192>
 800de8e:	f1ba 0f01 	cmp.w	sl, #1
 800de92:	f47f af3d 	bne.w	800dd10 <_scanf_float+0x64>
 800de96:	f04f 0a02 	mov.w	sl, #2
 800de9a:	e7d0      	b.n	800de3e <_scanf_float+0x192>
 800de9c:	b97d      	cbnz	r5, 800debe <_scanf_float+0x212>
 800de9e:	f1b9 0f00 	cmp.w	r9, #0
 800dea2:	f47f af38 	bne.w	800dd16 <_scanf_float+0x6a>
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800deac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800deb0:	f040 8107 	bne.w	800e0c2 <_scanf_float+0x416>
 800deb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800deb8:	2501      	movs	r5, #1
 800deba:	6022      	str	r2, [r4, #0]
 800debc:	e7bf      	b.n	800de3e <_scanf_float+0x192>
 800debe:	2d03      	cmp	r5, #3
 800dec0:	d0e2      	beq.n	800de88 <_scanf_float+0x1dc>
 800dec2:	2d05      	cmp	r5, #5
 800dec4:	e7de      	b.n	800de84 <_scanf_float+0x1d8>
 800dec6:	2d02      	cmp	r5, #2
 800dec8:	f47f af22 	bne.w	800dd10 <_scanf_float+0x64>
 800decc:	2503      	movs	r5, #3
 800dece:	e7b6      	b.n	800de3e <_scanf_float+0x192>
 800ded0:	2d06      	cmp	r5, #6
 800ded2:	f47f af1d 	bne.w	800dd10 <_scanf_float+0x64>
 800ded6:	2507      	movs	r5, #7
 800ded8:	e7b1      	b.n	800de3e <_scanf_float+0x192>
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	0591      	lsls	r1, r2, #22
 800dede:	f57f af17 	bpl.w	800dd10 <_scanf_float+0x64>
 800dee2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dee6:	f8cd 9008 	str.w	r9, [sp, #8]
 800deea:	6022      	str	r2, [r4, #0]
 800deec:	e7a7      	b.n	800de3e <_scanf_float+0x192>
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800def4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800def8:	d006      	beq.n	800df08 <_scanf_float+0x25c>
 800defa:	0550      	lsls	r0, r2, #21
 800defc:	f57f af08 	bpl.w	800dd10 <_scanf_float+0x64>
 800df00:	f1b9 0f00 	cmp.w	r9, #0
 800df04:	f000 80dd 	beq.w	800e0c2 <_scanf_float+0x416>
 800df08:	0591      	lsls	r1, r2, #22
 800df0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df0e:	bf58      	it	pl
 800df10:	9902      	ldrpl	r1, [sp, #8]
 800df12:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df16:	bf58      	it	pl
 800df18:	eba9 0101 	subpl.w	r1, r9, r1
 800df1c:	6022      	str	r2, [r4, #0]
 800df1e:	f04f 0900 	mov.w	r9, #0
 800df22:	bf58      	it	pl
 800df24:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df28:	e789      	b.n	800de3e <_scanf_float+0x192>
 800df2a:	f04f 0a03 	mov.w	sl, #3
 800df2e:	e786      	b.n	800de3e <_scanf_float+0x192>
 800df30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df34:	4639      	mov	r1, r7
 800df36:	4640      	mov	r0, r8
 800df38:	4798      	blx	r3
 800df3a:	2800      	cmp	r0, #0
 800df3c:	f43f aedb 	beq.w	800dcf6 <_scanf_float+0x4a>
 800df40:	e6e6      	b.n	800dd10 <_scanf_float+0x64>
 800df42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df46:	463a      	mov	r2, r7
 800df48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df4c:	4640      	mov	r0, r8
 800df4e:	4798      	blx	r3
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	3b01      	subs	r3, #1
 800df54:	6123      	str	r3, [r4, #16]
 800df56:	e6e8      	b.n	800dd2a <_scanf_float+0x7e>
 800df58:	1e6b      	subs	r3, r5, #1
 800df5a:	2b06      	cmp	r3, #6
 800df5c:	d824      	bhi.n	800dfa8 <_scanf_float+0x2fc>
 800df5e:	2d02      	cmp	r5, #2
 800df60:	d836      	bhi.n	800dfd0 <_scanf_float+0x324>
 800df62:	9b01      	ldr	r3, [sp, #4]
 800df64:	429e      	cmp	r6, r3
 800df66:	f67f aee4 	bls.w	800dd32 <_scanf_float+0x86>
 800df6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df6e:	463a      	mov	r2, r7
 800df70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df74:	4640      	mov	r0, r8
 800df76:	4798      	blx	r3
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	3b01      	subs	r3, #1
 800df7c:	6123      	str	r3, [r4, #16]
 800df7e:	e7f0      	b.n	800df62 <_scanf_float+0x2b6>
 800df80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df84:	463a      	mov	r2, r7
 800df86:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800df8a:	4640      	mov	r0, r8
 800df8c:	4798      	blx	r3
 800df8e:	6923      	ldr	r3, [r4, #16]
 800df90:	3b01      	subs	r3, #1
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df98:	fa5f fa8a 	uxtb.w	sl, sl
 800df9c:	f1ba 0f02 	cmp.w	sl, #2
 800dfa0:	d1ee      	bne.n	800df80 <_scanf_float+0x2d4>
 800dfa2:	3d03      	subs	r5, #3
 800dfa4:	b2ed      	uxtb	r5, r5
 800dfa6:	1b76      	subs	r6, r6, r5
 800dfa8:	6823      	ldr	r3, [r4, #0]
 800dfaa:	05da      	lsls	r2, r3, #23
 800dfac:	d52f      	bpl.n	800e00e <_scanf_float+0x362>
 800dfae:	055b      	lsls	r3, r3, #21
 800dfb0:	d511      	bpl.n	800dfd6 <_scanf_float+0x32a>
 800dfb2:	9b01      	ldr	r3, [sp, #4]
 800dfb4:	429e      	cmp	r6, r3
 800dfb6:	f67f aebc 	bls.w	800dd32 <_scanf_float+0x86>
 800dfba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfbe:	463a      	mov	r2, r7
 800dfc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	4798      	blx	r3
 800dfc8:	6923      	ldr	r3, [r4, #16]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	6123      	str	r3, [r4, #16]
 800dfce:	e7f0      	b.n	800dfb2 <_scanf_float+0x306>
 800dfd0:	46aa      	mov	sl, r5
 800dfd2:	46b3      	mov	fp, r6
 800dfd4:	e7de      	b.n	800df94 <_scanf_float+0x2e8>
 800dfd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfda:	1e75      	subs	r5, r6, #1
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	2965      	cmp	r1, #101	@ 0x65
 800dfe0:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfe4:	6123      	str	r3, [r4, #16]
 800dfe6:	d00c      	beq.n	800e002 <_scanf_float+0x356>
 800dfe8:	2945      	cmp	r1, #69	@ 0x45
 800dfea:	d00a      	beq.n	800e002 <_scanf_float+0x356>
 800dfec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dff0:	463a      	mov	r2, r7
 800dff2:	4640      	mov	r0, r8
 800dff4:	1eb5      	subs	r5, r6, #2
 800dff6:	4798      	blx	r3
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dffe:	3b01      	subs	r3, #1
 800e000:	6123      	str	r3, [r4, #16]
 800e002:	462e      	mov	r6, r5
 800e004:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e008:	463a      	mov	r2, r7
 800e00a:	4640      	mov	r0, r8
 800e00c:	4798      	blx	r3
 800e00e:	6822      	ldr	r2, [r4, #0]
 800e010:	f012 0210 	ands.w	r2, r2, #16
 800e014:	d001      	beq.n	800e01a <_scanf_float+0x36e>
 800e016:	2000      	movs	r0, #0
 800e018:	e68c      	b.n	800dd34 <_scanf_float+0x88>
 800e01a:	7032      	strb	r2, [r6, #0]
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e026:	d11c      	bne.n	800e062 <_scanf_float+0x3b6>
 800e028:	9b02      	ldr	r3, [sp, #8]
 800e02a:	454b      	cmp	r3, r9
 800e02c:	eba3 0209 	sub.w	r2, r3, r9
 800e030:	d123      	bne.n	800e07a <_scanf_float+0x3ce>
 800e032:	2200      	movs	r2, #0
 800e034:	9901      	ldr	r1, [sp, #4]
 800e036:	4640      	mov	r0, r8
 800e038:	f002 fc22 	bl	8010880 <_strtod_r>
 800e03c:	6821      	ldr	r1, [r4, #0]
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	f011 0f02 	tst.w	r1, #2
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	ec57 6b10 	vmov	r6, r7, d0
 800e04a:	f103 0204 	add.w	r2, r3, #4
 800e04e:	d01f      	beq.n	800e090 <_scanf_float+0x3e4>
 800e050:	9903      	ldr	r1, [sp, #12]
 800e052:	600a      	str	r2, [r1, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	e9c3 6700 	strd	r6, r7, [r3]
 800e05a:	68e3      	ldr	r3, [r4, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60e3      	str	r3, [r4, #12]
 800e060:	e7d9      	b.n	800e016 <_scanf_float+0x36a>
 800e062:	9b04      	ldr	r3, [sp, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d0e4      	beq.n	800e032 <_scanf_float+0x386>
 800e068:	9905      	ldr	r1, [sp, #20]
 800e06a:	230a      	movs	r3, #10
 800e06c:	4640      	mov	r0, r8
 800e06e:	3101      	adds	r1, #1
 800e070:	f7ff f9b6 	bl	800d3e0 <_strtol_r>
 800e074:	9b04      	ldr	r3, [sp, #16]
 800e076:	9e05      	ldr	r6, [sp, #20]
 800e078:	1ac2      	subs	r2, r0, r3
 800e07a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e07e:	4912      	ldr	r1, [pc, #72]	@ (800e0c8 <_scanf_float+0x41c>)
 800e080:	429e      	cmp	r6, r3
 800e082:	bf28      	it	cs
 800e084:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e088:	4630      	mov	r0, r6
 800e08a:	f000 f8e3 	bl	800e254 <siprintf>
 800e08e:	e7d0      	b.n	800e032 <_scanf_float+0x386>
 800e090:	f011 0f04 	tst.w	r1, #4
 800e094:	9903      	ldr	r1, [sp, #12]
 800e096:	600a      	str	r2, [r1, #0]
 800e098:	d1dc      	bne.n	800e054 <_scanf_float+0x3a8>
 800e09a:	681d      	ldr	r5, [r3, #0]
 800e09c:	4632      	mov	r2, r6
 800e09e:	463b      	mov	r3, r7
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	f7f2 fd56 	bl	8000b54 <__aeabi_dcmpun>
 800e0a8:	b128      	cbz	r0, 800e0b6 <_scanf_float+0x40a>
 800e0aa:	4808      	ldr	r0, [pc, #32]	@ (800e0cc <_scanf_float+0x420>)
 800e0ac:	f000 f9d0 	bl	800e450 <nanf>
 800e0b0:	ed85 0a00 	vstr	s0, [r5]
 800e0b4:	e7d1      	b.n	800e05a <_scanf_float+0x3ae>
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	f7f2 fda9 	bl	8000c10 <__aeabi_d2f>
 800e0be:	6028      	str	r0, [r5, #0]
 800e0c0:	e7cb      	b.n	800e05a <_scanf_float+0x3ae>
 800e0c2:	f04f 0900 	mov.w	r9, #0
 800e0c6:	e62a      	b.n	800dd1e <_scanf_float+0x72>
 800e0c8:	08014635 	.word	0x08014635
 800e0cc:	080148cc 	.word	0x080148cc

0800e0d0 <std>:
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	b510      	push	{r4, lr}
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	6083      	str	r3, [r0, #8]
 800e0d8:	8181      	strh	r1, [r0, #12]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0de:	81c2      	strh	r2, [r0, #14]
 800e0e0:	2208      	movs	r2, #8
 800e0e2:	6183      	str	r3, [r0, #24]
 800e0e4:	e9c0 3300 	strd	r3, r3, [r0]
 800e0e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0ec:	305c      	adds	r0, #92	@ 0x5c
 800e0ee:	f000 f914 	bl	800e31a <memset>
 800e0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e128 <std+0x58>)
 800e0f4:	6224      	str	r4, [r4, #32]
 800e0f6:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <std+0x5c>)
 800e0fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e130 <std+0x60>)
 800e0fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e100:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <std+0x64>)
 800e102:	6323      	str	r3, [r4, #48]	@ 0x30
 800e104:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <std+0x68>)
 800e106:	429c      	cmp	r4, r3
 800e108:	d006      	beq.n	800e118 <std+0x48>
 800e10a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e10e:	4294      	cmp	r4, r2
 800e110:	d002      	beq.n	800e118 <std+0x48>
 800e112:	33d0      	adds	r3, #208	@ 0xd0
 800e114:	429c      	cmp	r4, r3
 800e116:	d105      	bne.n	800e124 <std+0x54>
 800e118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e120:	f000 b978 	b.w	800e414 <__retarget_lock_init_recursive>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	bf00      	nop
 800e128:	0800e295 	.word	0x0800e295
 800e12c:	0800e2b7 	.word	0x0800e2b7
 800e130:	0800e2ef 	.word	0x0800e2ef
 800e134:	0800e313 	.word	0x0800e313
 800e138:	2003b278 	.word	0x2003b278

0800e13c <stdio_exit_handler>:
 800e13c:	4a02      	ldr	r2, [pc, #8]	@ (800e148 <stdio_exit_handler+0xc>)
 800e13e:	4903      	ldr	r1, [pc, #12]	@ (800e14c <stdio_exit_handler+0x10>)
 800e140:	4803      	ldr	r0, [pc, #12]	@ (800e150 <stdio_exit_handler+0x14>)
 800e142:	f000 b869 	b.w	800e218 <_fwalk_sglue>
 800e146:	bf00      	nop
 800e148:	20000028 	.word	0x20000028
 800e14c:	08010c45 	.word	0x08010c45
 800e150:	20000038 	.word	0x20000038

0800e154 <cleanup_stdio>:
 800e154:	6841      	ldr	r1, [r0, #4]
 800e156:	4b0c      	ldr	r3, [pc, #48]	@ (800e188 <cleanup_stdio+0x34>)
 800e158:	4299      	cmp	r1, r3
 800e15a:	b510      	push	{r4, lr}
 800e15c:	4604      	mov	r4, r0
 800e15e:	d001      	beq.n	800e164 <cleanup_stdio+0x10>
 800e160:	f002 fd70 	bl	8010c44 <_fflush_r>
 800e164:	68a1      	ldr	r1, [r4, #8]
 800e166:	4b09      	ldr	r3, [pc, #36]	@ (800e18c <cleanup_stdio+0x38>)
 800e168:	4299      	cmp	r1, r3
 800e16a:	d002      	beq.n	800e172 <cleanup_stdio+0x1e>
 800e16c:	4620      	mov	r0, r4
 800e16e:	f002 fd69 	bl	8010c44 <_fflush_r>
 800e172:	68e1      	ldr	r1, [r4, #12]
 800e174:	4b06      	ldr	r3, [pc, #24]	@ (800e190 <cleanup_stdio+0x3c>)
 800e176:	4299      	cmp	r1, r3
 800e178:	d004      	beq.n	800e184 <cleanup_stdio+0x30>
 800e17a:	4620      	mov	r0, r4
 800e17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e180:	f002 bd60 	b.w	8010c44 <_fflush_r>
 800e184:	bd10      	pop	{r4, pc}
 800e186:	bf00      	nop
 800e188:	2003b278 	.word	0x2003b278
 800e18c:	2003b2e0 	.word	0x2003b2e0
 800e190:	2003b348 	.word	0x2003b348

0800e194 <global_stdio_init.part.0>:
 800e194:	b510      	push	{r4, lr}
 800e196:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c4 <global_stdio_init.part.0+0x30>)
 800e198:	2104      	movs	r1, #4
 800e19a:	4c0b      	ldr	r4, [pc, #44]	@ (800e1c8 <global_stdio_init.part.0+0x34>)
 800e19c:	4a0b      	ldr	r2, [pc, #44]	@ (800e1cc <global_stdio_init.part.0+0x38>)
 800e19e:	4620      	mov	r0, r4
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f7ff ff94 	bl	800e0d0 <std>
 800e1a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	2109      	movs	r1, #9
 800e1b0:	f7ff ff8e 	bl	800e0d0 <std>
 800e1b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	2112      	movs	r1, #18
 800e1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c0:	f7ff bf86 	b.w	800e0d0 <std>
 800e1c4:	2003b3b0 	.word	0x2003b3b0
 800e1c8:	2003b278 	.word	0x2003b278
 800e1cc:	0800e13d 	.word	0x0800e13d

0800e1d0 <__sfp_lock_acquire>:
 800e1d0:	4801      	ldr	r0, [pc, #4]	@ (800e1d8 <__sfp_lock_acquire+0x8>)
 800e1d2:	f000 b920 	b.w	800e416 <__retarget_lock_acquire_recursive>
 800e1d6:	bf00      	nop
 800e1d8:	2003b3b9 	.word	0x2003b3b9

0800e1dc <__sfp_lock_release>:
 800e1dc:	4801      	ldr	r0, [pc, #4]	@ (800e1e4 <__sfp_lock_release+0x8>)
 800e1de:	f000 b91b 	b.w	800e418 <__retarget_lock_release_recursive>
 800e1e2:	bf00      	nop
 800e1e4:	2003b3b9 	.word	0x2003b3b9

0800e1e8 <__sinit>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	f7ff fff0 	bl	800e1d0 <__sfp_lock_acquire>
 800e1f0:	6a23      	ldr	r3, [r4, #32]
 800e1f2:	b11b      	cbz	r3, 800e1fc <__sinit+0x14>
 800e1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1f8:	f7ff bff0 	b.w	800e1dc <__sfp_lock_release>
 800e1fc:	4b04      	ldr	r3, [pc, #16]	@ (800e210 <__sinit+0x28>)
 800e1fe:	6223      	str	r3, [r4, #32]
 800e200:	4b04      	ldr	r3, [pc, #16]	@ (800e214 <__sinit+0x2c>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1f5      	bne.n	800e1f4 <__sinit+0xc>
 800e208:	f7ff ffc4 	bl	800e194 <global_stdio_init.part.0>
 800e20c:	e7f2      	b.n	800e1f4 <__sinit+0xc>
 800e20e:	bf00      	nop
 800e210:	0800e155 	.word	0x0800e155
 800e214:	2003b3b0 	.word	0x2003b3b0

0800e218 <_fwalk_sglue>:
 800e218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e21c:	4607      	mov	r7, r0
 800e21e:	4688      	mov	r8, r1
 800e220:	4614      	mov	r4, r2
 800e222:	2600      	movs	r6, #0
 800e224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e228:	f1b9 0901 	subs.w	r9, r9, #1
 800e22c:	d505      	bpl.n	800e23a <_fwalk_sglue+0x22>
 800e22e:	6824      	ldr	r4, [r4, #0]
 800e230:	2c00      	cmp	r4, #0
 800e232:	d1f7      	bne.n	800e224 <_fwalk_sglue+0xc>
 800e234:	4630      	mov	r0, r6
 800e236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23a:	89ab      	ldrh	r3, [r5, #12]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d907      	bls.n	800e250 <_fwalk_sglue+0x38>
 800e240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e244:	3301      	adds	r3, #1
 800e246:	d003      	beq.n	800e250 <_fwalk_sglue+0x38>
 800e248:	4629      	mov	r1, r5
 800e24a:	4638      	mov	r0, r7
 800e24c:	47c0      	blx	r8
 800e24e:	4306      	orrs	r6, r0
 800e250:	3568      	adds	r5, #104	@ 0x68
 800e252:	e7e9      	b.n	800e228 <_fwalk_sglue+0x10>

0800e254 <siprintf>:
 800e254:	b40e      	push	{r1, r2, r3}
 800e256:	b500      	push	{lr}
 800e258:	b09c      	sub	sp, #112	@ 0x70
 800e25a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e25e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e260:	9002      	str	r0, [sp, #8]
 800e262:	9006      	str	r0, [sp, #24]
 800e264:	9107      	str	r1, [sp, #28]
 800e266:	9104      	str	r1, [sp, #16]
 800e268:	4808      	ldr	r0, [pc, #32]	@ (800e28c <siprintf+0x38>)
 800e26a:	4909      	ldr	r1, [pc, #36]	@ (800e290 <siprintf+0x3c>)
 800e26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e270:	9105      	str	r1, [sp, #20]
 800e272:	a902      	add	r1, sp, #8
 800e274:	6800      	ldr	r0, [r0, #0]
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	f002 fb64 	bl	8010944 <_svfiprintf_r>
 800e27c:	9b02      	ldr	r3, [sp, #8]
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
 800e282:	b01c      	add	sp, #112	@ 0x70
 800e284:	f85d eb04 	ldr.w	lr, [sp], #4
 800e288:	b003      	add	sp, #12
 800e28a:	4770      	bx	lr
 800e28c:	20000034 	.word	0x20000034
 800e290:	ffff0208 	.word	0xffff0208

0800e294 <__sread>:
 800e294:	b510      	push	{r4, lr}
 800e296:	460c      	mov	r4, r1
 800e298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e29c:	f000 f86c 	bl	800e378 <_read_r>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	bfab      	itete	ge
 800e2a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2a8:	181b      	addge	r3, r3, r0
 800e2aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2ae:	bfac      	ite	ge
 800e2b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2b2:	81a3      	strhlt	r3, [r4, #12]
 800e2b4:	bd10      	pop	{r4, pc}

0800e2b6 <__swrite>:
 800e2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ba:	461f      	mov	r7, r3
 800e2bc:	898b      	ldrh	r3, [r1, #12]
 800e2be:	4605      	mov	r5, r0
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	05db      	lsls	r3, r3, #23
 800e2c4:	4616      	mov	r6, r2
 800e2c6:	d505      	bpl.n	800e2d4 <__swrite+0x1e>
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	f000 f840 	bl	800e354 <_lseek_r>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	4632      	mov	r2, r6
 800e2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	f000 b857 	b.w	800e39c <_write_r>

0800e2ee <__sseek>:
 800e2ee:	b510      	push	{r4, lr}
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f6:	f000 f82d 	bl	800e354 <_lseek_r>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	bf15      	itete	ne
 800e300:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e30a:	81a3      	strheq	r3, [r4, #12]
 800e30c:	bf18      	it	ne
 800e30e:	81a3      	strhne	r3, [r4, #12]
 800e310:	bd10      	pop	{r4, pc}

0800e312 <__sclose>:
 800e312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e316:	f000 b80d 	b.w	800e334 <_close_r>

0800e31a <memset>:
 800e31a:	4402      	add	r2, r0
 800e31c:	4603      	mov	r3, r0
 800e31e:	4293      	cmp	r3, r2
 800e320:	d100      	bne.n	800e324 <memset+0xa>
 800e322:	4770      	bx	lr
 800e324:	f803 1b01 	strb.w	r1, [r3], #1
 800e328:	e7f9      	b.n	800e31e <memset+0x4>
	...

0800e32c <_localeconv_r>:
 800e32c:	4800      	ldr	r0, [pc, #0]	@ (800e330 <_localeconv_r+0x4>)
 800e32e:	4770      	bx	lr
 800e330:	20000174 	.word	0x20000174

0800e334 <_close_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	2300      	movs	r3, #0
 800e338:	4d05      	ldr	r5, [pc, #20]	@ (800e350 <_close_r+0x1c>)
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	602b      	str	r3, [r5, #0]
 800e340:	f7f6 fdfa 	bl	8004f38 <_close>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d102      	bne.n	800e34e <_close_r+0x1a>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	b103      	cbz	r3, 800e34e <_close_r+0x1a>
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	2003b3b4 	.word	0x2003b3b4

0800e354 <_lseek_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4604      	mov	r4, r0
 800e358:	4d06      	ldr	r5, [pc, #24]	@ (800e374 <_lseek_r+0x20>)
 800e35a:	4608      	mov	r0, r1
 800e35c:	4611      	mov	r1, r2
 800e35e:	2200      	movs	r2, #0
 800e360:	602a      	str	r2, [r5, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	f7f6 fe0f 	bl	8004f86 <_lseek>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_lseek_r+0x1e>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_lseek_r+0x1e>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	2003b3b4 	.word	0x2003b3b4

0800e378 <_read_r>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	4d06      	ldr	r5, [pc, #24]	@ (800e398 <_read_r+0x20>)
 800e37e:	4608      	mov	r0, r1
 800e380:	4611      	mov	r1, r2
 800e382:	2200      	movs	r2, #0
 800e384:	602a      	str	r2, [r5, #0]
 800e386:	461a      	mov	r2, r3
 800e388:	f7f6 fd9d 	bl	8004ec6 <_read>
 800e38c:	1c43      	adds	r3, r0, #1
 800e38e:	d102      	bne.n	800e396 <_read_r+0x1e>
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	b103      	cbz	r3, 800e396 <_read_r+0x1e>
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	bd38      	pop	{r3, r4, r5, pc}
 800e398:	2003b3b4 	.word	0x2003b3b4

0800e39c <_write_r>:
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4d06      	ldr	r5, [pc, #24]	@ (800e3bc <_write_r+0x20>)
 800e3a2:	4608      	mov	r0, r1
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	602a      	str	r2, [r5, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f7f6 fda8 	bl	8004f00 <_write>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_write_r+0x1e>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_write_r+0x1e>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	2003b3b4 	.word	0x2003b3b4

0800e3c0 <__errno>:
 800e3c0:	4b01      	ldr	r3, [pc, #4]	@ (800e3c8 <__errno+0x8>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	20000034 	.word	0x20000034

0800e3cc <__libc_init_array>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e404 <__libc_init_array+0x38>)
 800e3d0:	2600      	movs	r6, #0
 800e3d2:	4c0d      	ldr	r4, [pc, #52]	@ (800e408 <__libc_init_array+0x3c>)
 800e3d4:	1b64      	subs	r4, r4, r5
 800e3d6:	10a4      	asrs	r4, r4, #2
 800e3d8:	42a6      	cmp	r6, r4
 800e3da:	d109      	bne.n	800e3f0 <__libc_init_array+0x24>
 800e3dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e40c <__libc_init_array+0x40>)
 800e3de:	2600      	movs	r6, #0
 800e3e0:	4c0b      	ldr	r4, [pc, #44]	@ (800e410 <__libc_init_array+0x44>)
 800e3e2:	f005 fcfd 	bl	8013de0 <_init>
 800e3e6:	1b64      	subs	r4, r4, r5
 800e3e8:	10a4      	asrs	r4, r4, #2
 800e3ea:	42a6      	cmp	r6, r4
 800e3ec:	d105      	bne.n	800e3fa <__libc_init_array+0x2e>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3f4:	3601      	adds	r6, #1
 800e3f6:	4798      	blx	r3
 800e3f8:	e7ee      	b.n	800e3d8 <__libc_init_array+0xc>
 800e3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fe:	3601      	adds	r6, #1
 800e400:	4798      	blx	r3
 800e402:	e7f2      	b.n	800e3ea <__libc_init_array+0x1e>
 800e404:	08014bb0 	.word	0x08014bb0
 800e408:	08014bb0 	.word	0x08014bb0
 800e40c:	08014bb0 	.word	0x08014bb0
 800e410:	08014bb4 	.word	0x08014bb4

0800e414 <__retarget_lock_init_recursive>:
 800e414:	4770      	bx	lr

0800e416 <__retarget_lock_acquire_recursive>:
 800e416:	4770      	bx	lr

0800e418 <__retarget_lock_release_recursive>:
 800e418:	4770      	bx	lr

0800e41a <memchr>:
 800e41a:	b2c9      	uxtb	r1, r1
 800e41c:	4603      	mov	r3, r0
 800e41e:	4402      	add	r2, r0
 800e420:	b510      	push	{r4, lr}
 800e422:	4293      	cmp	r3, r2
 800e424:	4618      	mov	r0, r3
 800e426:	d101      	bne.n	800e42c <memchr+0x12>
 800e428:	2000      	movs	r0, #0
 800e42a:	e003      	b.n	800e434 <memchr+0x1a>
 800e42c:	7804      	ldrb	r4, [r0, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	428c      	cmp	r4, r1
 800e432:	d1f6      	bne.n	800e422 <memchr+0x8>
 800e434:	bd10      	pop	{r4, pc}

0800e436 <memcpy>:
 800e436:	440a      	add	r2, r1
 800e438:	1e43      	subs	r3, r0, #1
 800e43a:	4291      	cmp	r1, r2
 800e43c:	d100      	bne.n	800e440 <memcpy+0xa>
 800e43e:	4770      	bx	lr
 800e440:	b510      	push	{r4, lr}
 800e442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e446:	4291      	cmp	r1, r2
 800e448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e44c:	d1f9      	bne.n	800e442 <memcpy+0xc>
 800e44e:	bd10      	pop	{r4, pc}

0800e450 <nanf>:
 800e450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e458 <nanf+0x8>
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	7fc00000 	.word	0x7fc00000

0800e45c <quorem>:
 800e45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	6903      	ldr	r3, [r0, #16]
 800e462:	4607      	mov	r7, r0
 800e464:	690c      	ldr	r4, [r1, #16]
 800e466:	42a3      	cmp	r3, r4
 800e468:	f2c0 8083 	blt.w	800e572 <quorem+0x116>
 800e46c:	3c01      	subs	r4, #1
 800e46e:	f100 0514 	add.w	r5, r0, #20
 800e472:	f101 0814 	add.w	r8, r1, #20
 800e476:	00a3      	lsls	r3, r4, #2
 800e478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e47c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e486:	9301      	str	r3, [sp, #4]
 800e488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e48c:	3301      	adds	r3, #1
 800e48e:	429a      	cmp	r2, r3
 800e490:	fbb2 f6f3 	udiv	r6, r2, r3
 800e494:	d331      	bcc.n	800e4fa <quorem+0x9e>
 800e496:	f04f 0a00 	mov.w	sl, #0
 800e49a:	46c4      	mov	ip, r8
 800e49c:	46ae      	mov	lr, r5
 800e49e:	46d3      	mov	fp, sl
 800e4a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4a4:	b298      	uxth	r0, r3
 800e4a6:	45e1      	cmp	r9, ip
 800e4a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e4ac:	fb06 a000 	mla	r0, r6, r0, sl
 800e4b0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e4b4:	b280      	uxth	r0, r0
 800e4b6:	fb06 2303 	mla	r3, r6, r3, r2
 800e4ba:	f8de 2000 	ldr.w	r2, [lr]
 800e4be:	b292      	uxth	r2, r2
 800e4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c4:	eba2 0200 	sub.w	r2, r2, r0
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	f8de 0000 	ldr.w	r0, [lr]
 800e4ce:	445a      	add	r2, fp
 800e4d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4d4:	b292      	uxth	r2, r2
 800e4d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4e2:	f84e 2b04 	str.w	r2, [lr], #4
 800e4e6:	d2db      	bcs.n	800e4a0 <quorem+0x44>
 800e4e8:	9b00      	ldr	r3, [sp, #0]
 800e4ea:	58eb      	ldr	r3, [r5, r3]
 800e4ec:	b92b      	cbnz	r3, 800e4fa <quorem+0x9e>
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	3b04      	subs	r3, #4
 800e4f2:	429d      	cmp	r5, r3
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	d330      	bcc.n	800e55a <quorem+0xfe>
 800e4f8:	613c      	str	r4, [r7, #16]
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	f001 f9c6 	bl	800f88c <__mcmp>
 800e500:	2800      	cmp	r0, #0
 800e502:	db26      	blt.n	800e552 <quorem+0xf6>
 800e504:	4629      	mov	r1, r5
 800e506:	2000      	movs	r0, #0
 800e508:	f858 2b04 	ldr.w	r2, [r8], #4
 800e50c:	f8d1 c000 	ldr.w	ip, [r1]
 800e510:	fa1f fe82 	uxth.w	lr, r2
 800e514:	45c1      	cmp	r9, r8
 800e516:	fa1f f38c 	uxth.w	r3, ip
 800e51a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e51e:	eba3 030e 	sub.w	r3, r3, lr
 800e522:	4403      	add	r3, r0
 800e524:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e528:	b29b      	uxth	r3, r3
 800e52a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e52e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e532:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e536:	f841 3b04 	str.w	r3, [r1], #4
 800e53a:	d2e5      	bcs.n	800e508 <quorem+0xac>
 800e53c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e544:	b922      	cbnz	r2, 800e550 <quorem+0xf4>
 800e546:	3b04      	subs	r3, #4
 800e548:	429d      	cmp	r5, r3
 800e54a:	461a      	mov	r2, r3
 800e54c:	d30b      	bcc.n	800e566 <quorem+0x10a>
 800e54e:	613c      	str	r4, [r7, #16]
 800e550:	3601      	adds	r6, #1
 800e552:	4630      	mov	r0, r6
 800e554:	b003      	add	sp, #12
 800e556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55a:	6812      	ldr	r2, [r2, #0]
 800e55c:	3b04      	subs	r3, #4
 800e55e:	2a00      	cmp	r2, #0
 800e560:	d1ca      	bne.n	800e4f8 <quorem+0x9c>
 800e562:	3c01      	subs	r4, #1
 800e564:	e7c5      	b.n	800e4f2 <quorem+0x96>
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	3b04      	subs	r3, #4
 800e56a:	2a00      	cmp	r2, #0
 800e56c:	d1ef      	bne.n	800e54e <quorem+0xf2>
 800e56e:	3c01      	subs	r4, #1
 800e570:	e7ea      	b.n	800e548 <quorem+0xec>
 800e572:	2000      	movs	r0, #0
 800e574:	e7ee      	b.n	800e554 <quorem+0xf8>
	...

0800e578 <_dtoa_r>:
 800e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57c:	69c7      	ldr	r7, [r0, #28]
 800e57e:	b099      	sub	sp, #100	@ 0x64
 800e580:	4683      	mov	fp, r0
 800e582:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e584:	9109      	str	r1, [sp, #36]	@ 0x24
 800e586:	920e      	str	r2, [sp, #56]	@ 0x38
 800e588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e58a:	ec55 4b10 	vmov	r4, r5, d0
 800e58e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e592:	b97f      	cbnz	r7, 800e5b4 <_dtoa_r+0x3c>
 800e594:	2010      	movs	r0, #16
 800e596:	f000 fdfd 	bl	800f194 <malloc>
 800e59a:	4602      	mov	r2, r0
 800e59c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5a0:	b920      	cbnz	r0, 800e5ac <_dtoa_r+0x34>
 800e5a2:	4ba7      	ldr	r3, [pc, #668]	@ (800e840 <_dtoa_r+0x2c8>)
 800e5a4:	21ef      	movs	r1, #239	@ 0xef
 800e5a6:	48a7      	ldr	r0, [pc, #668]	@ (800e844 <_dtoa_r+0x2cc>)
 800e5a8:	f002 fbba 	bl	8010d20 <__assert_func>
 800e5ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5b0:	6007      	str	r7, [r0, #0]
 800e5b2:	60c7      	str	r7, [r0, #12]
 800e5b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5b8:	6819      	ldr	r1, [r3, #0]
 800e5ba:	b159      	cbz	r1, 800e5d4 <_dtoa_r+0x5c>
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	4658      	mov	r0, fp
 800e5c2:	4093      	lsls	r3, r2
 800e5c4:	604a      	str	r2, [r1, #4]
 800e5c6:	608b      	str	r3, [r1, #8]
 800e5c8:	f000 feda 	bl	800f380 <_Bfree>
 800e5cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	1e2b      	subs	r3, r5, #0
 800e5d6:	bfb7      	itett	lt
 800e5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5dc:	2300      	movge	r3, #0
 800e5de:	2201      	movlt	r2, #1
 800e5e0:	9303      	strlt	r3, [sp, #12]
 800e5e2:	bfa8      	it	ge
 800e5e4:	6033      	strge	r3, [r6, #0]
 800e5e6:	9f03      	ldr	r7, [sp, #12]
 800e5e8:	4b97      	ldr	r3, [pc, #604]	@ (800e848 <_dtoa_r+0x2d0>)
 800e5ea:	bfb8      	it	lt
 800e5ec:	6032      	strlt	r2, [r6, #0]
 800e5ee:	43bb      	bics	r3, r7
 800e5f0:	d112      	bne.n	800e618 <_dtoa_r+0xa0>
 800e5f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5fe:	4323      	orrs	r3, r4
 800e600:	f000 854c 	beq.w	800f09c <_dtoa_r+0xb24>
 800e604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e606:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e85c <_dtoa_r+0x2e4>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 854e 	beq.w	800f0ac <_dtoa_r+0xb34>
 800e610:	f10a 0303 	add.w	r3, sl, #3
 800e614:	f000 bd48 	b.w	800f0a8 <_dtoa_r+0xb30>
 800e618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e61c:	2200      	movs	r2, #0
 800e61e:	2300      	movs	r3, #0
 800e620:	ec51 0b17 	vmov	r0, r1, d7
 800e624:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e628:	f7f2 fa62 	bl	8000af0 <__aeabi_dcmpeq>
 800e62c:	4680      	mov	r8, r0
 800e62e:	b158      	cbz	r0, 800e648 <_dtoa_r+0xd0>
 800e630:	2301      	movs	r3, #1
 800e632:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e638:	b113      	cbz	r3, 800e640 <_dtoa_r+0xc8>
 800e63a:	4b84      	ldr	r3, [pc, #528]	@ (800e84c <_dtoa_r+0x2d4>)
 800e63c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e860 <_dtoa_r+0x2e8>
 800e644:	f000 bd32 	b.w	800f0ac <_dtoa_r+0xb34>
 800e648:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e64c:	aa16      	add	r2, sp, #88	@ 0x58
 800e64e:	a917      	add	r1, sp, #92	@ 0x5c
 800e650:	4658      	mov	r0, fp
 800e652:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e656:	f001 fa41 	bl	800fadc <__d2b>
 800e65a:	4681      	mov	r9, r0
 800e65c:	2e00      	cmp	r6, #0
 800e65e:	d075      	beq.n	800e74c <_dtoa_r+0x1d4>
 800e660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e662:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e666:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e66a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e66e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e676:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e67a:	4619      	mov	r1, r3
 800e67c:	2200      	movs	r2, #0
 800e67e:	4b74      	ldr	r3, [pc, #464]	@ (800e850 <_dtoa_r+0x2d8>)
 800e680:	f7f1 fe16 	bl	80002b0 <__aeabi_dsub>
 800e684:	a368      	add	r3, pc, #416	@ (adr r3, 800e828 <_dtoa_r+0x2b0>)
 800e686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68a:	f7f1 ffc9 	bl	8000620 <__aeabi_dmul>
 800e68e:	a368      	add	r3, pc, #416	@ (adr r3, 800e830 <_dtoa_r+0x2b8>)
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f7f1 fe0e 	bl	80002b4 <__adddf3>
 800e698:	4604      	mov	r4, r0
 800e69a:	460d      	mov	r5, r1
 800e69c:	4630      	mov	r0, r6
 800e69e:	f7f1 ff55 	bl	800054c <__aeabi_i2d>
 800e6a2:	a365      	add	r3, pc, #404	@ (adr r3, 800e838 <_dtoa_r+0x2c0>)
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f7f1 ffba 	bl	8000620 <__aeabi_dmul>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	f7f1 fdfe 	bl	80002b4 <__adddf3>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	f7f2 fa60 	bl	8000b80 <__aeabi_d2iz>
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	4607      	mov	r7, r0
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	f7f2 fa1b 	bl	8000b04 <__aeabi_dcmplt>
 800e6ce:	b140      	cbz	r0, 800e6e2 <_dtoa_r+0x16a>
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f7f1 ff3b 	bl	800054c <__aeabi_i2d>
 800e6d6:	4622      	mov	r2, r4
 800e6d8:	462b      	mov	r3, r5
 800e6da:	f7f2 fa09 	bl	8000af0 <__aeabi_dcmpeq>
 800e6de:	b900      	cbnz	r0, 800e6e2 <_dtoa_r+0x16a>
 800e6e0:	3f01      	subs	r7, #1
 800e6e2:	2f16      	cmp	r7, #22
 800e6e4:	d851      	bhi.n	800e78a <_dtoa_r+0x212>
 800e6e6:	4b5b      	ldr	r3, [pc, #364]	@ (800e854 <_dtoa_r+0x2dc>)
 800e6e8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f4:	f7f2 fa06 	bl	8000b04 <__aeabi_dcmplt>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d048      	beq.n	800e78e <_dtoa_r+0x216>
 800e6fc:	3f01      	subs	r7, #1
 800e6fe:	2300      	movs	r3, #0
 800e700:	9312      	str	r3, [sp, #72]	@ 0x48
 800e702:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e704:	1b9b      	subs	r3, r3, r6
 800e706:	1e5a      	subs	r2, r3, #1
 800e708:	bf46      	itte	mi
 800e70a:	f1c3 0801 	rsbmi	r8, r3, #1
 800e70e:	2300      	movmi	r3, #0
 800e710:	f04f 0800 	movpl.w	r8, #0
 800e714:	9208      	str	r2, [sp, #32]
 800e716:	bf48      	it	mi
 800e718:	9308      	strmi	r3, [sp, #32]
 800e71a:	2f00      	cmp	r7, #0
 800e71c:	db39      	blt.n	800e792 <_dtoa_r+0x21a>
 800e71e:	9b08      	ldr	r3, [sp, #32]
 800e720:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e722:	443b      	add	r3, r7
 800e724:	9308      	str	r3, [sp, #32]
 800e726:	2300      	movs	r3, #0
 800e728:	930a      	str	r3, [sp, #40]	@ 0x28
 800e72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e72c:	2b09      	cmp	r3, #9
 800e72e:	d864      	bhi.n	800e7fa <_dtoa_r+0x282>
 800e730:	2b05      	cmp	r3, #5
 800e732:	bfc5      	ittet	gt
 800e734:	3b04      	subgt	r3, #4
 800e736:	2400      	movgt	r4, #0
 800e738:	2401      	movle	r4, #1
 800e73a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	3b02      	subs	r3, #2
 800e740:	2b03      	cmp	r3, #3
 800e742:	d865      	bhi.n	800e810 <_dtoa_r+0x298>
 800e744:	e8df f003 	tbb	[pc, r3]
 800e748:	5737392c 	.word	0x5737392c
 800e74c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e750:	441e      	add	r6, r3
 800e752:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e756:	2b20      	cmp	r3, #32
 800e758:	bfc9      	itett	gt
 800e75a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e75e:	f1c3 0320 	rsble	r3, r3, #32
 800e762:	409f      	lslgt	r7, r3
 800e764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e768:	bfd8      	it	le
 800e76a:	fa04 f003 	lslle.w	r0, r4, r3
 800e76e:	f106 36ff 	add.w	r6, r6, #4294967295
 800e772:	bfc4      	itt	gt
 800e774:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e778:	ea47 0003 	orrgt.w	r0, r7, r3
 800e77c:	f7f1 fed6 	bl	800052c <__aeabi_ui2d>
 800e780:	2201      	movs	r2, #1
 800e782:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e786:	9214      	str	r2, [sp, #80]	@ 0x50
 800e788:	e777      	b.n	800e67a <_dtoa_r+0x102>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e7b8      	b.n	800e700 <_dtoa_r+0x188>
 800e78e:	9012      	str	r0, [sp, #72]	@ 0x48
 800e790:	e7b7      	b.n	800e702 <_dtoa_r+0x18a>
 800e792:	427b      	negs	r3, r7
 800e794:	eba8 0807 	sub.w	r8, r8, r7
 800e798:	930a      	str	r3, [sp, #40]	@ 0x28
 800e79a:	2300      	movs	r3, #0
 800e79c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e79e:	e7c4      	b.n	800e72a <_dtoa_r+0x1b2>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	dc35      	bgt.n	800e816 <_dtoa_r+0x29e>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	9307      	str	r3, [sp, #28]
 800e7b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7b4:	e00b      	b.n	800e7ce <_dtoa_r+0x256>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7f3      	b.n	800e7a2 <_dtoa_r+0x22a>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c0:	18fb      	adds	r3, r7, r3
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	9307      	str	r3, [sp, #28]
 800e7ca:	bfb8      	it	lt
 800e7cc:	2301      	movlt	r3, #1
 800e7ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	f102 0514 	add.w	r5, r2, #20
 800e7da:	429d      	cmp	r5, r3
 800e7dc:	d91f      	bls.n	800e81e <_dtoa_r+0x2a6>
 800e7de:	6041      	str	r1, [r0, #4]
 800e7e0:	4658      	mov	r0, fp
 800e7e2:	f000 fd8d 	bl	800f300 <_Balloc>
 800e7e6:	4682      	mov	sl, r0
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d13b      	bne.n	800e864 <_dtoa_r+0x2ec>
 800e7ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e858 <_dtoa_r+0x2e0>)
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7f4:	e6d7      	b.n	800e5a6 <_dtoa_r+0x2e>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e7e0      	b.n	800e7bc <_dtoa_r+0x244>
 800e7fa:	2401      	movs	r4, #1
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e800:	9309      	str	r3, [sp, #36]	@ 0x24
 800e802:	f04f 33ff 	mov.w	r3, #4294967295
 800e806:	2200      	movs	r2, #0
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	9307      	str	r3, [sp, #28]
 800e80c:	2312      	movs	r3, #18
 800e80e:	e7d0      	b.n	800e7b2 <_dtoa_r+0x23a>
 800e810:	2301      	movs	r3, #1
 800e812:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e814:	e7f5      	b.n	800e802 <_dtoa_r+0x28a>
 800e816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	9307      	str	r3, [sp, #28]
 800e81c:	e7d7      	b.n	800e7ce <_dtoa_r+0x256>
 800e81e:	3101      	adds	r1, #1
 800e820:	0052      	lsls	r2, r2, #1
 800e822:	e7d8      	b.n	800e7d6 <_dtoa_r+0x25e>
 800e824:	f3af 8000 	nop.w
 800e828:	636f4361 	.word	0x636f4361
 800e82c:	3fd287a7 	.word	0x3fd287a7
 800e830:	8b60c8b3 	.word	0x8b60c8b3
 800e834:	3fc68a28 	.word	0x3fc68a28
 800e838:	509f79fb 	.word	0x509f79fb
 800e83c:	3fd34413 	.word	0x3fd34413
 800e840:	08014647 	.word	0x08014647
 800e844:	0801465e 	.word	0x0801465e
 800e848:	7ff00000 	.word	0x7ff00000
 800e84c:	08014612 	.word	0x08014612
 800e850:	3ff80000 	.word	0x3ff80000
 800e854:	08014758 	.word	0x08014758
 800e858:	080146b6 	.word	0x080146b6
 800e85c:	08014643 	.word	0x08014643
 800e860:	08014611 	.word	0x08014611
 800e864:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e868:	6018      	str	r0, [r3, #0]
 800e86a:	9b07      	ldr	r3, [sp, #28]
 800e86c:	2b0e      	cmp	r3, #14
 800e86e:	f200 80a4 	bhi.w	800e9ba <_dtoa_r+0x442>
 800e872:	2c00      	cmp	r4, #0
 800e874:	f000 80a1 	beq.w	800e9ba <_dtoa_r+0x442>
 800e878:	2f00      	cmp	r7, #0
 800e87a:	dd33      	ble.n	800e8e4 <_dtoa_r+0x36c>
 800e87c:	f007 020f 	and.w	r2, r7, #15
 800e880:	4bac      	ldr	r3, [pc, #688]	@ (800eb34 <_dtoa_r+0x5bc>)
 800e882:	05f8      	lsls	r0, r7, #23
 800e884:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e88c:	ed93 7b00 	vldr	d7, [r3]
 800e890:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e894:	d516      	bpl.n	800e8c4 <_dtoa_r+0x34c>
 800e896:	4ba8      	ldr	r3, [pc, #672]	@ (800eb38 <_dtoa_r+0x5c0>)
 800e898:	f004 040f 	and.w	r4, r4, #15
 800e89c:	2603      	movs	r6, #3
 800e89e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8a6:	f7f1 ffe5 	bl	8000874 <__aeabi_ddiv>
 800e8aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ae:	4da2      	ldr	r5, [pc, #648]	@ (800eb38 <_dtoa_r+0x5c0>)
 800e8b0:	b954      	cbnz	r4, 800e8c8 <_dtoa_r+0x350>
 800e8b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ba:	f7f1 ffdb 	bl	8000874 <__aeabi_ddiv>
 800e8be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8c2:	e028      	b.n	800e916 <_dtoa_r+0x39e>
 800e8c4:	2602      	movs	r6, #2
 800e8c6:	e7f2      	b.n	800e8ae <_dtoa_r+0x336>
 800e8c8:	07e1      	lsls	r1, r4, #31
 800e8ca:	d508      	bpl.n	800e8de <_dtoa_r+0x366>
 800e8cc:	3601      	adds	r6, #1
 800e8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8d6:	f7f1 fea3 	bl	8000620 <__aeabi_dmul>
 800e8da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8de:	1064      	asrs	r4, r4, #1
 800e8e0:	3508      	adds	r5, #8
 800e8e2:	e7e5      	b.n	800e8b0 <_dtoa_r+0x338>
 800e8e4:	f000 80d2 	beq.w	800ea8c <_dtoa_r+0x514>
 800e8e8:	427c      	negs	r4, r7
 800e8ea:	4b92      	ldr	r3, [pc, #584]	@ (800eb34 <_dtoa_r+0x5bc>)
 800e8ec:	4d92      	ldr	r5, [pc, #584]	@ (800eb38 <_dtoa_r+0x5c0>)
 800e8ee:	2602      	movs	r6, #2
 800e8f0:	f004 020f 	and.w	r2, r4, #15
 800e8f4:	1124      	asrs	r4, r4, #4
 800e8f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	f7f1 fe8d 	bl	8000620 <__aeabi_dmul>
 800e906:	2300      	movs	r3, #0
 800e908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e90c:	2c00      	cmp	r4, #0
 800e90e:	f040 80b2 	bne.w	800ea76 <_dtoa_r+0x4fe>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1d3      	bne.n	800e8be <_dtoa_r+0x346>
 800e916:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e918:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 80b7 	beq.w	800ea90 <_dtoa_r+0x518>
 800e922:	2200      	movs	r2, #0
 800e924:	4b85      	ldr	r3, [pc, #532]	@ (800eb3c <_dtoa_r+0x5c4>)
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	f7f2 f8eb 	bl	8000b04 <__aeabi_dcmplt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	f000 80ae 	beq.w	800ea90 <_dtoa_r+0x518>
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	2b00      	cmp	r3, #0
 800e938:	f000 80aa 	beq.w	800ea90 <_dtoa_r+0x518>
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd37      	ble.n	800e9b2 <_dtoa_r+0x43a>
 800e942:	1e7b      	subs	r3, r7, #1
 800e944:	4620      	mov	r0, r4
 800e946:	2200      	movs	r2, #0
 800e948:	4629      	mov	r1, r5
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	3601      	adds	r6, #1
 800e94e:	4b7c      	ldr	r3, [pc, #496]	@ (800eb40 <_dtoa_r+0x5c8>)
 800e950:	f7f1 fe66 	bl	8000620 <__aeabi_dmul>
 800e954:	9c00      	ldr	r4, [sp, #0]
 800e956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7f1 fdf6 	bl	800054c <__aeabi_i2d>
 800e960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e964:	f7f1 fe5c 	bl	8000620 <__aeabi_dmul>
 800e968:	2200      	movs	r2, #0
 800e96a:	4b76      	ldr	r3, [pc, #472]	@ (800eb44 <_dtoa_r+0x5cc>)
 800e96c:	f7f1 fca2 	bl	80002b4 <__adddf3>
 800e970:	4605      	mov	r5, r0
 800e972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e976:	2c00      	cmp	r4, #0
 800e978:	f040 808d 	bne.w	800ea96 <_dtoa_r+0x51e>
 800e97c:	2200      	movs	r2, #0
 800e97e:	4b72      	ldr	r3, [pc, #456]	@ (800eb48 <_dtoa_r+0x5d0>)
 800e980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e984:	f7f1 fc94 	bl	80002b0 <__aeabi_dsub>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e990:	462a      	mov	r2, r5
 800e992:	4633      	mov	r3, r6
 800e994:	f7f2 f8d4 	bl	8000b40 <__aeabi_dcmpgt>
 800e998:	2800      	cmp	r0, #0
 800e99a:	f040 828b 	bne.w	800eeb4 <_dtoa_r+0x93c>
 800e99e:	462a      	mov	r2, r5
 800e9a0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9a8:	f7f2 f8ac 	bl	8000b04 <__aeabi_dcmplt>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f040 8128 	bne.w	800ec02 <_dtoa_r+0x68a>
 800e9b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f2c0 815a 	blt.w	800ec76 <_dtoa_r+0x6fe>
 800e9c2:	2f0e      	cmp	r7, #14
 800e9c4:	f300 8157 	bgt.w	800ec76 <_dtoa_r+0x6fe>
 800e9c8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb34 <_dtoa_r+0x5bc>)
 800e9ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9ce:	ed93 7b00 	vldr	d7, [r3]
 800e9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	ed8d 7b00 	vstr	d7, [sp]
 800e9da:	da03      	bge.n	800e9e4 <_dtoa_r+0x46c>
 800e9dc:	9b07      	ldr	r3, [sp, #28]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f340 8101 	ble.w	800ebe6 <_dtoa_r+0x66e>
 800e9e4:	4656      	mov	r6, sl
 800e9e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f7f1 ff3f 	bl	8000874 <__aeabi_ddiv>
 800e9f6:	f7f2 f8c3 	bl	8000b80 <__aeabi_d2iz>
 800e9fa:	4680      	mov	r8, r0
 800e9fc:	f7f1 fda6 	bl	800054c <__aeabi_i2d>
 800ea00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea04:	f7f1 fe0c 	bl	8000620 <__aeabi_dmul>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea10:	460b      	mov	r3, r1
 800ea12:	4629      	mov	r1, r5
 800ea14:	f7f1 fc4c 	bl	80002b0 <__aeabi_dsub>
 800ea18:	9d07      	ldr	r5, [sp, #28]
 800ea1a:	f806 4b01 	strb.w	r4, [r6], #1
 800ea1e:	eba6 040a 	sub.w	r4, r6, sl
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	42a5      	cmp	r5, r4
 800ea28:	f040 8117 	bne.w	800ec5a <_dtoa_r+0x6e2>
 800ea2c:	f7f1 fc42 	bl	80002b4 <__adddf3>
 800ea30:	4604      	mov	r4, r0
 800ea32:	460d      	mov	r5, r1
 800ea34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea38:	f7f2 f882 	bl	8000b40 <__aeabi_dcmpgt>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f040 80f9 	bne.w	800ec34 <_dtoa_r+0x6bc>
 800ea42:	4620      	mov	r0, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4a:	f7f2 f851 	bl	8000af0 <__aeabi_dcmpeq>
 800ea4e:	b118      	cbz	r0, 800ea58 <_dtoa_r+0x4e0>
 800ea50:	f018 0f01 	tst.w	r8, #1
 800ea54:	f040 80ee 	bne.w	800ec34 <_dtoa_r+0x6bc>
 800ea58:	4649      	mov	r1, r9
 800ea5a:	4658      	mov	r0, fp
 800ea5c:	f000 fc90 	bl	800f380 <_Bfree>
 800ea60:	2300      	movs	r3, #0
 800ea62:	3701      	adds	r7, #1
 800ea64:	7033      	strb	r3, [r6, #0]
 800ea66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea68:	601f      	str	r7, [r3, #0]
 800ea6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f000 831d 	beq.w	800f0ac <_dtoa_r+0xb34>
 800ea72:	601e      	str	r6, [r3, #0]
 800ea74:	e31a      	b.n	800f0ac <_dtoa_r+0xb34>
 800ea76:	07e2      	lsls	r2, r4, #31
 800ea78:	d505      	bpl.n	800ea86 <_dtoa_r+0x50e>
 800ea7a:	3601      	adds	r6, #1
 800ea7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea80:	f7f1 fdce 	bl	8000620 <__aeabi_dmul>
 800ea84:	2301      	movs	r3, #1
 800ea86:	1064      	asrs	r4, r4, #1
 800ea88:	3508      	adds	r5, #8
 800ea8a:	e73f      	b.n	800e90c <_dtoa_r+0x394>
 800ea8c:	2602      	movs	r6, #2
 800ea8e:	e742      	b.n	800e916 <_dtoa_r+0x39e>
 800ea90:	9c07      	ldr	r4, [sp, #28]
 800ea92:	9704      	str	r7, [sp, #16]
 800ea94:	e761      	b.n	800e95a <_dtoa_r+0x3e2>
 800ea96:	4b27      	ldr	r3, [pc, #156]	@ (800eb34 <_dtoa_r+0x5bc>)
 800ea98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea9e:	4454      	add	r4, sl
 800eaa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eaa4:	2900      	cmp	r1, #0
 800eaa6:	d053      	beq.n	800eb50 <_dtoa_r+0x5d8>
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	4928      	ldr	r1, [pc, #160]	@ (800eb4c <_dtoa_r+0x5d4>)
 800eaac:	f7f1 fee2 	bl	8000874 <__aeabi_ddiv>
 800eab0:	4633      	mov	r3, r6
 800eab2:	4656      	mov	r6, sl
 800eab4:	462a      	mov	r2, r5
 800eab6:	f7f1 fbfb 	bl	80002b0 <__aeabi_dsub>
 800eaba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac2:	f7f2 f85d 	bl	8000b80 <__aeabi_d2iz>
 800eac6:	4605      	mov	r5, r0
 800eac8:	f7f1 fd40 	bl	800054c <__aeabi_i2d>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	3530      	adds	r5, #48	@ 0x30
 800ead2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ead6:	f7f1 fbeb 	bl	80002b0 <__aeabi_dsub>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	f806 5b01 	strb.w	r5, [r6], #1
 800eae2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eae6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaea:	f7f2 f80b 	bl	8000b04 <__aeabi_dcmplt>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d171      	bne.n	800ebd6 <_dtoa_r+0x65e>
 800eaf2:	2000      	movs	r0, #0
 800eaf4:	4911      	ldr	r1, [pc, #68]	@ (800eb3c <_dtoa_r+0x5c4>)
 800eaf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eafa:	f7f1 fbd9 	bl	80002b0 <__aeabi_dsub>
 800eafe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb02:	f7f1 ffff 	bl	8000b04 <__aeabi_dcmplt>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f040 8095 	bne.w	800ec36 <_dtoa_r+0x6be>
 800eb0c:	42a6      	cmp	r6, r4
 800eb0e:	f43f af50 	beq.w	800e9b2 <_dtoa_r+0x43a>
 800eb12:	2200      	movs	r2, #0
 800eb14:	4b0a      	ldr	r3, [pc, #40]	@ (800eb40 <_dtoa_r+0x5c8>)
 800eb16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb1a:	f7f1 fd81 	bl	8000620 <__aeabi_dmul>
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4b07      	ldr	r3, [pc, #28]	@ (800eb40 <_dtoa_r+0x5c8>)
 800eb22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb2a:	f7f1 fd79 	bl	8000620 <__aeabi_dmul>
 800eb2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb32:	e7c4      	b.n	800eabe <_dtoa_r+0x546>
 800eb34:	08014758 	.word	0x08014758
 800eb38:	08014730 	.word	0x08014730
 800eb3c:	3ff00000 	.word	0x3ff00000
 800eb40:	40240000 	.word	0x40240000
 800eb44:	401c0000 	.word	0x401c0000
 800eb48:	40140000 	.word	0x40140000
 800eb4c:	3fe00000 	.word	0x3fe00000
 800eb50:	4631      	mov	r1, r6
 800eb52:	4656      	mov	r6, sl
 800eb54:	4628      	mov	r0, r5
 800eb56:	f7f1 fd63 	bl	8000620 <__aeabi_dmul>
 800eb5a:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb64:	f7f2 f80c 	bl	8000b80 <__aeabi_d2iz>
 800eb68:	4605      	mov	r5, r0
 800eb6a:	f7f1 fcef 	bl	800054c <__aeabi_i2d>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	3530      	adds	r5, #48	@ 0x30
 800eb72:	460b      	mov	r3, r1
 800eb74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb78:	f7f1 fb9a 	bl	80002b0 <__aeabi_dsub>
 800eb7c:	f806 5b01 	strb.w	r5, [r6], #1
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	42a6      	cmp	r6, r4
 800eb86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb8a:	f04f 0200 	mov.w	r2, #0
 800eb8e:	d124      	bne.n	800ebda <_dtoa_r+0x662>
 800eb90:	4bac      	ldr	r3, [pc, #688]	@ (800ee44 <_dtoa_r+0x8cc>)
 800eb92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb96:	f7f1 fb8d 	bl	80002b4 <__adddf3>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eba2:	f7f1 ffcd 	bl	8000b40 <__aeabi_dcmpgt>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d145      	bne.n	800ec36 <_dtoa_r+0x6be>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	49a5      	ldr	r1, [pc, #660]	@ (800ee44 <_dtoa_r+0x8cc>)
 800ebae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebb2:	f7f1 fb7d 	bl	80002b0 <__aeabi_dsub>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebbe:	f7f1 ffa1 	bl	8000b04 <__aeabi_dcmplt>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f43f aef5 	beq.w	800e9b2 <_dtoa_r+0x43a>
 800ebc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ebca:	1e73      	subs	r3, r6, #1
 800ebcc:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebd2:	2b30      	cmp	r3, #48	@ 0x30
 800ebd4:	d0f8      	beq.n	800ebc8 <_dtoa_r+0x650>
 800ebd6:	9f04      	ldr	r7, [sp, #16]
 800ebd8:	e73e      	b.n	800ea58 <_dtoa_r+0x4e0>
 800ebda:	4b9b      	ldr	r3, [pc, #620]	@ (800ee48 <_dtoa_r+0x8d0>)
 800ebdc:	f7f1 fd20 	bl	8000620 <__aeabi_dmul>
 800ebe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebe4:	e7bc      	b.n	800eb60 <_dtoa_r+0x5e8>
 800ebe6:	d10c      	bne.n	800ec02 <_dtoa_r+0x68a>
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4b98      	ldr	r3, [pc, #608]	@ (800ee4c <_dtoa_r+0x8d4>)
 800ebec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebf0:	f7f1 fd16 	bl	8000620 <__aeabi_dmul>
 800ebf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebf8:	f7f1 ff98 	bl	8000b2c <__aeabi_dcmpge>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	f000 8157 	beq.w	800eeb0 <_dtoa_r+0x938>
 800ec02:	2400      	movs	r4, #0
 800ec04:	4625      	mov	r5, r4
 800ec06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec08:	4656      	mov	r6, sl
 800ec0a:	43db      	mvns	r3, r3
 800ec0c:	9304      	str	r3, [sp, #16]
 800ec0e:	2700      	movs	r7, #0
 800ec10:	4621      	mov	r1, r4
 800ec12:	4658      	mov	r0, fp
 800ec14:	f000 fbb4 	bl	800f380 <_Bfree>
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	d0dc      	beq.n	800ebd6 <_dtoa_r+0x65e>
 800ec1c:	b12f      	cbz	r7, 800ec2a <_dtoa_r+0x6b2>
 800ec1e:	42af      	cmp	r7, r5
 800ec20:	d003      	beq.n	800ec2a <_dtoa_r+0x6b2>
 800ec22:	4639      	mov	r1, r7
 800ec24:	4658      	mov	r0, fp
 800ec26:	f000 fbab 	bl	800f380 <_Bfree>
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 fba7 	bl	800f380 <_Bfree>
 800ec32:	e7d0      	b.n	800ebd6 <_dtoa_r+0x65e>
 800ec34:	9704      	str	r7, [sp, #16]
 800ec36:	4633      	mov	r3, r6
 800ec38:	461e      	mov	r6, r3
 800ec3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec3e:	2a39      	cmp	r2, #57	@ 0x39
 800ec40:	d107      	bne.n	800ec52 <_dtoa_r+0x6da>
 800ec42:	459a      	cmp	sl, r3
 800ec44:	d1f8      	bne.n	800ec38 <_dtoa_r+0x6c0>
 800ec46:	9a04      	ldr	r2, [sp, #16]
 800ec48:	3201      	adds	r2, #1
 800ec4a:	9204      	str	r2, [sp, #16]
 800ec4c:	2230      	movs	r2, #48	@ 0x30
 800ec4e:	f88a 2000 	strb.w	r2, [sl]
 800ec52:	781a      	ldrb	r2, [r3, #0]
 800ec54:	3201      	adds	r2, #1
 800ec56:	701a      	strb	r2, [r3, #0]
 800ec58:	e7bd      	b.n	800ebd6 <_dtoa_r+0x65e>
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	4b7a      	ldr	r3, [pc, #488]	@ (800ee48 <_dtoa_r+0x8d0>)
 800ec5e:	f7f1 fcdf 	bl	8000620 <__aeabi_dmul>
 800ec62:	2200      	movs	r2, #0
 800ec64:	2300      	movs	r3, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	460d      	mov	r5, r1
 800ec6a:	f7f1 ff41 	bl	8000af0 <__aeabi_dcmpeq>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f43f aebb 	beq.w	800e9ea <_dtoa_r+0x472>
 800ec74:	e6f0      	b.n	800ea58 <_dtoa_r+0x4e0>
 800ec76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	f000 80db 	beq.w	800ee34 <_dtoa_r+0x8bc>
 800ec7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec80:	2a01      	cmp	r2, #1
 800ec82:	f300 80bf 	bgt.w	800ee04 <_dtoa_r+0x88c>
 800ec86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec88:	2a00      	cmp	r2, #0
 800ec8a:	f000 80b7 	beq.w	800edfc <_dtoa_r+0x884>
 800ec8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec94:	4646      	mov	r6, r8
 800ec96:	9a08      	ldr	r2, [sp, #32]
 800ec98:	2101      	movs	r1, #1
 800ec9a:	4658      	mov	r0, fp
 800ec9c:	4498      	add	r8, r3
 800ec9e:	441a      	add	r2, r3
 800eca0:	9208      	str	r2, [sp, #32]
 800eca2:	f000 fc6d 	bl	800f580 <__i2b>
 800eca6:	4605      	mov	r5, r0
 800eca8:	b15e      	cbz	r6, 800ecc2 <_dtoa_r+0x74a>
 800ecaa:	9b08      	ldr	r3, [sp, #32]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	dd08      	ble.n	800ecc2 <_dtoa_r+0x74a>
 800ecb0:	42b3      	cmp	r3, r6
 800ecb2:	9a08      	ldr	r2, [sp, #32]
 800ecb4:	bfa8      	it	ge
 800ecb6:	4633      	movge	r3, r6
 800ecb8:	eba8 0803 	sub.w	r8, r8, r3
 800ecbc:	1af6      	subs	r6, r6, r3
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	9308      	str	r3, [sp, #32]
 800ecc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecc4:	b1f3      	cbz	r3, 800ed04 <_dtoa_r+0x78c>
 800ecc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f000 80b7 	beq.w	800ee3c <_dtoa_r+0x8c4>
 800ecce:	b18c      	cbz	r4, 800ecf4 <_dtoa_r+0x77c>
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	4658      	mov	r0, fp
 800ecd6:	f000 fd13 	bl	800f700 <__pow5mult>
 800ecda:	464a      	mov	r2, r9
 800ecdc:	4601      	mov	r1, r0
 800ecde:	4605      	mov	r5, r0
 800ece0:	4658      	mov	r0, fp
 800ece2:	f000 fc63 	bl	800f5ac <__multiply>
 800ece6:	4649      	mov	r1, r9
 800ece8:	9004      	str	r0, [sp, #16]
 800ecea:	4658      	mov	r0, fp
 800ecec:	f000 fb48 	bl	800f380 <_Bfree>
 800ecf0:	9b04      	ldr	r3, [sp, #16]
 800ecf2:	4699      	mov	r9, r3
 800ecf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecf6:	1b1a      	subs	r2, r3, r4
 800ecf8:	d004      	beq.n	800ed04 <_dtoa_r+0x78c>
 800ecfa:	4649      	mov	r1, r9
 800ecfc:	4658      	mov	r0, fp
 800ecfe:	f000 fcff 	bl	800f700 <__pow5mult>
 800ed02:	4681      	mov	r9, r0
 800ed04:	2101      	movs	r1, #1
 800ed06:	4658      	mov	r0, fp
 800ed08:	f000 fc3a 	bl	800f580 <__i2b>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	4604      	mov	r4, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f000 81cf 	beq.w	800f0b4 <_dtoa_r+0xb3c>
 800ed16:	461a      	mov	r2, r3
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4658      	mov	r0, fp
 800ed1c:	f000 fcf0 	bl	800f700 <__pow5mult>
 800ed20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed22:	4604      	mov	r4, r0
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	f300 8095 	bgt.w	800ee54 <_dtoa_r+0x8dc>
 800ed2a:	9b02      	ldr	r3, [sp, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f040 8087 	bne.w	800ee40 <_dtoa_r+0x8c8>
 800ed32:	9b03      	ldr	r3, [sp, #12]
 800ed34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f040 8089 	bne.w	800ee50 <_dtoa_r+0x8d8>
 800ed3e:	9b03      	ldr	r3, [sp, #12]
 800ed40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed44:	0d1b      	lsrs	r3, r3, #20
 800ed46:	051b      	lsls	r3, r3, #20
 800ed48:	b12b      	cbz	r3, 800ed56 <_dtoa_r+0x7de>
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	f108 0801 	add.w	r8, r8, #1
 800ed50:	3301      	adds	r3, #1
 800ed52:	9308      	str	r3, [sp, #32]
 800ed54:	2301      	movs	r3, #1
 800ed56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f000 81b0 	beq.w	800f0c0 <_dtoa_r+0xb48>
 800ed60:	6923      	ldr	r3, [r4, #16]
 800ed62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed66:	6918      	ldr	r0, [r3, #16]
 800ed68:	f000 fbbe 	bl	800f4e8 <__hi0bits>
 800ed6c:	f1c0 0020 	rsb	r0, r0, #32
 800ed70:	9b08      	ldr	r3, [sp, #32]
 800ed72:	4418      	add	r0, r3
 800ed74:	f010 001f 	ands.w	r0, r0, #31
 800ed78:	d077      	beq.n	800ee6a <_dtoa_r+0x8f2>
 800ed7a:	f1c0 0320 	rsb	r3, r0, #32
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	dd6b      	ble.n	800ee5a <_dtoa_r+0x8e2>
 800ed82:	f1c0 001c 	rsb	r0, r0, #28
 800ed86:	9b08      	ldr	r3, [sp, #32]
 800ed88:	4480      	add	r8, r0
 800ed8a:	4403      	add	r3, r0
 800ed8c:	4406      	add	r6, r0
 800ed8e:	9308      	str	r3, [sp, #32]
 800ed90:	f1b8 0f00 	cmp.w	r8, #0
 800ed94:	dd05      	ble.n	800eda2 <_dtoa_r+0x82a>
 800ed96:	4649      	mov	r1, r9
 800ed98:	4642      	mov	r2, r8
 800ed9a:	4658      	mov	r0, fp
 800ed9c:	f000 fd0a 	bl	800f7b4 <__lshift>
 800eda0:	4681      	mov	r9, r0
 800eda2:	9b08      	ldr	r3, [sp, #32]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	dd05      	ble.n	800edb4 <_dtoa_r+0x83c>
 800eda8:	4621      	mov	r1, r4
 800edaa:	461a      	mov	r2, r3
 800edac:	4658      	mov	r0, fp
 800edae:	f000 fd01 	bl	800f7b4 <__lshift>
 800edb2:	4604      	mov	r4, r0
 800edb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d059      	beq.n	800ee6e <_dtoa_r+0x8f6>
 800edba:	4621      	mov	r1, r4
 800edbc:	4648      	mov	r0, r9
 800edbe:	f000 fd65 	bl	800f88c <__mcmp>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	da53      	bge.n	800ee6e <_dtoa_r+0x8f6>
 800edc6:	1e7b      	subs	r3, r7, #1
 800edc8:	4649      	mov	r1, r9
 800edca:	220a      	movs	r2, #10
 800edcc:	4658      	mov	r0, fp
 800edce:	9304      	str	r3, [sp, #16]
 800edd0:	2300      	movs	r3, #0
 800edd2:	f000 faf7 	bl	800f3c4 <__multadd>
 800edd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edd8:	4681      	mov	r9, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f000 8172 	beq.w	800f0c4 <_dtoa_r+0xb4c>
 800ede0:	2300      	movs	r3, #0
 800ede2:	4629      	mov	r1, r5
 800ede4:	220a      	movs	r2, #10
 800ede6:	4658      	mov	r0, fp
 800ede8:	f000 faec 	bl	800f3c4 <__multadd>
 800edec:	9b00      	ldr	r3, [sp, #0]
 800edee:	4605      	mov	r5, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	dc67      	bgt.n	800eec4 <_dtoa_r+0x94c>
 800edf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	dc41      	bgt.n	800ee7e <_dtoa_r+0x906>
 800edfa:	e063      	b.n	800eec4 <_dtoa_r+0x94c>
 800edfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800edfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee02:	e746      	b.n	800ec92 <_dtoa_r+0x71a>
 800ee04:	9b07      	ldr	r3, [sp, #28]
 800ee06:	1e5c      	subs	r4, r3, #1
 800ee08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee0a:	42a3      	cmp	r3, r4
 800ee0c:	bfb7      	itett	lt
 800ee0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee10:	1b1c      	subge	r4, r3, r4
 800ee12:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee14:	1ae3      	sublt	r3, r4, r3
 800ee16:	bfbe      	ittt	lt
 800ee18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee1a:	2400      	movlt	r4, #0
 800ee1c:	18d2      	addlt	r2, r2, r3
 800ee1e:	9b07      	ldr	r3, [sp, #28]
 800ee20:	bfb8      	it	lt
 800ee22:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb5      	itete	lt
 800ee28:	eba8 0603 	sublt.w	r6, r8, r3
 800ee2c:	4646      	movge	r6, r8
 800ee2e:	2300      	movlt	r3, #0
 800ee30:	9b07      	ldrge	r3, [sp, #28]
 800ee32:	e730      	b.n	800ec96 <_dtoa_r+0x71e>
 800ee34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee36:	4646      	mov	r6, r8
 800ee38:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee3a:	e735      	b.n	800eca8 <_dtoa_r+0x730>
 800ee3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee3e:	e75c      	b.n	800ecfa <_dtoa_r+0x782>
 800ee40:	2300      	movs	r3, #0
 800ee42:	e788      	b.n	800ed56 <_dtoa_r+0x7de>
 800ee44:	3fe00000 	.word	0x3fe00000
 800ee48:	40240000 	.word	0x40240000
 800ee4c:	40140000 	.word	0x40140000
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	e780      	b.n	800ed56 <_dtoa_r+0x7de>
 800ee54:	2300      	movs	r3, #0
 800ee56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee58:	e782      	b.n	800ed60 <_dtoa_r+0x7e8>
 800ee5a:	d099      	beq.n	800ed90 <_dtoa_r+0x818>
 800ee5c:	331c      	adds	r3, #28
 800ee5e:	9a08      	ldr	r2, [sp, #32]
 800ee60:	441a      	add	r2, r3
 800ee62:	4498      	add	r8, r3
 800ee64:	441e      	add	r6, r3
 800ee66:	9208      	str	r2, [sp, #32]
 800ee68:	e792      	b.n	800ed90 <_dtoa_r+0x818>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	e7f6      	b.n	800ee5c <_dtoa_r+0x8e4>
 800ee6e:	9b07      	ldr	r3, [sp, #28]
 800ee70:	9704      	str	r7, [sp, #16]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dc20      	bgt.n	800eeb8 <_dtoa_r+0x940>
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	dd1e      	ble.n	800eebc <_dtoa_r+0x944>
 800ee7e:	9b00      	ldr	r3, [sp, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f47f aec0 	bne.w	800ec06 <_dtoa_r+0x68e>
 800ee86:	4621      	mov	r1, r4
 800ee88:	2205      	movs	r2, #5
 800ee8a:	4658      	mov	r0, fp
 800ee8c:	f000 fa9a 	bl	800f3c4 <__multadd>
 800ee90:	4601      	mov	r1, r0
 800ee92:	4604      	mov	r4, r0
 800ee94:	4648      	mov	r0, r9
 800ee96:	f000 fcf9 	bl	800f88c <__mcmp>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	f77f aeb3 	ble.w	800ec06 <_dtoa_r+0x68e>
 800eea0:	2331      	movs	r3, #49	@ 0x31
 800eea2:	4656      	mov	r6, sl
 800eea4:	f806 3b01 	strb.w	r3, [r6], #1
 800eea8:	9b04      	ldr	r3, [sp, #16]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	9304      	str	r3, [sp, #16]
 800eeae:	e6ae      	b.n	800ec0e <_dtoa_r+0x696>
 800eeb0:	9c07      	ldr	r4, [sp, #28]
 800eeb2:	9704      	str	r7, [sp, #16]
 800eeb4:	4625      	mov	r5, r4
 800eeb6:	e7f3      	b.n	800eea0 <_dtoa_r+0x928>
 800eeb8:	9b07      	ldr	r3, [sp, #28]
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f000 8104 	beq.w	800f0cc <_dtoa_r+0xb54>
 800eec4:	2e00      	cmp	r6, #0
 800eec6:	dd05      	ble.n	800eed4 <_dtoa_r+0x95c>
 800eec8:	4629      	mov	r1, r5
 800eeca:	4632      	mov	r2, r6
 800eecc:	4658      	mov	r0, fp
 800eece:	f000 fc71 	bl	800f7b4 <__lshift>
 800eed2:	4605      	mov	r5, r0
 800eed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d05a      	beq.n	800ef90 <_dtoa_r+0xa18>
 800eeda:	6869      	ldr	r1, [r5, #4]
 800eedc:	4658      	mov	r0, fp
 800eede:	f000 fa0f 	bl	800f300 <_Balloc>
 800eee2:	4606      	mov	r6, r0
 800eee4:	b928      	cbnz	r0, 800eef2 <_dtoa_r+0x97a>
 800eee6:	4b84      	ldr	r3, [pc, #528]	@ (800f0f8 <_dtoa_r+0xb80>)
 800eee8:	4602      	mov	r2, r0
 800eeea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eeee:	f7ff bb5a 	b.w	800e5a6 <_dtoa_r+0x2e>
 800eef2:	692a      	ldr	r2, [r5, #16]
 800eef4:	f105 010c 	add.w	r1, r5, #12
 800eef8:	300c      	adds	r0, #12
 800eefa:	3202      	adds	r2, #2
 800eefc:	0092      	lsls	r2, r2, #2
 800eefe:	f7ff fa9a 	bl	800e436 <memcpy>
 800ef02:	2201      	movs	r2, #1
 800ef04:	4631      	mov	r1, r6
 800ef06:	4658      	mov	r0, fp
 800ef08:	f000 fc54 	bl	800f7b4 <__lshift>
 800ef0c:	f10a 0301 	add.w	r3, sl, #1
 800ef10:	462f      	mov	r7, r5
 800ef12:	4605      	mov	r5, r0
 800ef14:	9307      	str	r3, [sp, #28]
 800ef16:	9b00      	ldr	r3, [sp, #0]
 800ef18:	4453      	add	r3, sl
 800ef1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef1c:	9b02      	ldr	r3, [sp, #8]
 800ef1e:	f003 0301 	and.w	r3, r3, #1
 800ef22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef24:	9b07      	ldr	r3, [sp, #28]
 800ef26:	4621      	mov	r1, r4
 800ef28:	4648      	mov	r0, r9
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	f7ff fa95 	bl	800e45c <quorem>
 800ef32:	4639      	mov	r1, r7
 800ef34:	9002      	str	r0, [sp, #8]
 800ef36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef3a:	4648      	mov	r0, r9
 800ef3c:	f000 fca6 	bl	800f88c <__mcmp>
 800ef40:	462a      	mov	r2, r5
 800ef42:	9008      	str	r0, [sp, #32]
 800ef44:	4621      	mov	r1, r4
 800ef46:	4658      	mov	r0, fp
 800ef48:	f000 fcbc 	bl	800f8c4 <__mdiff>
 800ef4c:	68c2      	ldr	r2, [r0, #12]
 800ef4e:	4606      	mov	r6, r0
 800ef50:	bb02      	cbnz	r2, 800ef94 <_dtoa_r+0xa1c>
 800ef52:	4601      	mov	r1, r0
 800ef54:	4648      	mov	r0, r9
 800ef56:	f000 fc99 	bl	800f88c <__mcmp>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	4631      	mov	r1, r6
 800ef5e:	4658      	mov	r0, fp
 800ef60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef62:	f000 fa0d 	bl	800f380 <_Bfree>
 800ef66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef6a:	9e07      	ldr	r6, [sp, #28]
 800ef6c:	ea43 0102 	orr.w	r1, r3, r2
 800ef70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef72:	4319      	orrs	r1, r3
 800ef74:	d110      	bne.n	800ef98 <_dtoa_r+0xa20>
 800ef76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef7a:	d029      	beq.n	800efd0 <_dtoa_r+0xa58>
 800ef7c:	9b08      	ldr	r3, [sp, #32]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	dd02      	ble.n	800ef88 <_dtoa_r+0xa10>
 800ef82:	9b02      	ldr	r3, [sp, #8]
 800ef84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef88:	9b00      	ldr	r3, [sp, #0]
 800ef8a:	f883 8000 	strb.w	r8, [r3]
 800ef8e:	e63f      	b.n	800ec10 <_dtoa_r+0x698>
 800ef90:	4628      	mov	r0, r5
 800ef92:	e7bb      	b.n	800ef0c <_dtoa_r+0x994>
 800ef94:	2201      	movs	r2, #1
 800ef96:	e7e1      	b.n	800ef5c <_dtoa_r+0x9e4>
 800ef98:	9b08      	ldr	r3, [sp, #32]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	db04      	blt.n	800efa8 <_dtoa_r+0xa30>
 800ef9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efa0:	430b      	orrs	r3, r1
 800efa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efa4:	430b      	orrs	r3, r1
 800efa6:	d120      	bne.n	800efea <_dtoa_r+0xa72>
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	dded      	ble.n	800ef88 <_dtoa_r+0xa10>
 800efac:	4649      	mov	r1, r9
 800efae:	2201      	movs	r2, #1
 800efb0:	4658      	mov	r0, fp
 800efb2:	f000 fbff 	bl	800f7b4 <__lshift>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4681      	mov	r9, r0
 800efba:	f000 fc67 	bl	800f88c <__mcmp>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	dc03      	bgt.n	800efca <_dtoa_r+0xa52>
 800efc2:	d1e1      	bne.n	800ef88 <_dtoa_r+0xa10>
 800efc4:	f018 0f01 	tst.w	r8, #1
 800efc8:	d0de      	beq.n	800ef88 <_dtoa_r+0xa10>
 800efca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efce:	d1d8      	bne.n	800ef82 <_dtoa_r+0xa0a>
 800efd0:	2339      	movs	r3, #57	@ 0x39
 800efd2:	9a00      	ldr	r2, [sp, #0]
 800efd4:	7013      	strb	r3, [r2, #0]
 800efd6:	4633      	mov	r3, r6
 800efd8:	461e      	mov	r6, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efe0:	2a39      	cmp	r2, #57	@ 0x39
 800efe2:	d052      	beq.n	800f08a <_dtoa_r+0xb12>
 800efe4:	3201      	adds	r2, #1
 800efe6:	701a      	strb	r2, [r3, #0]
 800efe8:	e612      	b.n	800ec10 <_dtoa_r+0x698>
 800efea:	2a00      	cmp	r2, #0
 800efec:	dd07      	ble.n	800effe <_dtoa_r+0xa86>
 800efee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eff2:	d0ed      	beq.n	800efd0 <_dtoa_r+0xa58>
 800eff4:	f108 0301 	add.w	r3, r8, #1
 800eff8:	9a00      	ldr	r2, [sp, #0]
 800effa:	7013      	strb	r3, [r2, #0]
 800effc:	e608      	b.n	800ec10 <_dtoa_r+0x698>
 800effe:	9b07      	ldr	r3, [sp, #28]
 800f000:	9a07      	ldr	r2, [sp, #28]
 800f002:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f008:	4293      	cmp	r3, r2
 800f00a:	d028      	beq.n	800f05e <_dtoa_r+0xae6>
 800f00c:	4649      	mov	r1, r9
 800f00e:	2300      	movs	r3, #0
 800f010:	220a      	movs	r2, #10
 800f012:	4658      	mov	r0, fp
 800f014:	f000 f9d6 	bl	800f3c4 <__multadd>
 800f018:	42af      	cmp	r7, r5
 800f01a:	4681      	mov	r9, r0
 800f01c:	f04f 0300 	mov.w	r3, #0
 800f020:	f04f 020a 	mov.w	r2, #10
 800f024:	4639      	mov	r1, r7
 800f026:	4658      	mov	r0, fp
 800f028:	d107      	bne.n	800f03a <_dtoa_r+0xac2>
 800f02a:	f000 f9cb 	bl	800f3c4 <__multadd>
 800f02e:	4607      	mov	r7, r0
 800f030:	4605      	mov	r5, r0
 800f032:	9b07      	ldr	r3, [sp, #28]
 800f034:	3301      	adds	r3, #1
 800f036:	9307      	str	r3, [sp, #28]
 800f038:	e774      	b.n	800ef24 <_dtoa_r+0x9ac>
 800f03a:	f000 f9c3 	bl	800f3c4 <__multadd>
 800f03e:	4629      	mov	r1, r5
 800f040:	4607      	mov	r7, r0
 800f042:	2300      	movs	r3, #0
 800f044:	220a      	movs	r2, #10
 800f046:	4658      	mov	r0, fp
 800f048:	f000 f9bc 	bl	800f3c4 <__multadd>
 800f04c:	4605      	mov	r5, r0
 800f04e:	e7f0      	b.n	800f032 <_dtoa_r+0xaba>
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	2700      	movs	r7, #0
 800f054:	2b00      	cmp	r3, #0
 800f056:	bfcc      	ite	gt
 800f058:	461e      	movgt	r6, r3
 800f05a:	2601      	movle	r6, #1
 800f05c:	4456      	add	r6, sl
 800f05e:	4649      	mov	r1, r9
 800f060:	2201      	movs	r2, #1
 800f062:	4658      	mov	r0, fp
 800f064:	f000 fba6 	bl	800f7b4 <__lshift>
 800f068:	4621      	mov	r1, r4
 800f06a:	4681      	mov	r9, r0
 800f06c:	f000 fc0e 	bl	800f88c <__mcmp>
 800f070:	2800      	cmp	r0, #0
 800f072:	dcb0      	bgt.n	800efd6 <_dtoa_r+0xa5e>
 800f074:	d102      	bne.n	800f07c <_dtoa_r+0xb04>
 800f076:	f018 0f01 	tst.w	r8, #1
 800f07a:	d1ac      	bne.n	800efd6 <_dtoa_r+0xa5e>
 800f07c:	4633      	mov	r3, r6
 800f07e:	461e      	mov	r6, r3
 800f080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f084:	2a30      	cmp	r2, #48	@ 0x30
 800f086:	d0fa      	beq.n	800f07e <_dtoa_r+0xb06>
 800f088:	e5c2      	b.n	800ec10 <_dtoa_r+0x698>
 800f08a:	459a      	cmp	sl, r3
 800f08c:	d1a4      	bne.n	800efd8 <_dtoa_r+0xa60>
 800f08e:	9b04      	ldr	r3, [sp, #16]
 800f090:	3301      	adds	r3, #1
 800f092:	9304      	str	r3, [sp, #16]
 800f094:	2331      	movs	r3, #49	@ 0x31
 800f096:	f88a 3000 	strb.w	r3, [sl]
 800f09a:	e5b9      	b.n	800ec10 <_dtoa_r+0x698>
 800f09c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f09e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f0fc <_dtoa_r+0xb84>
 800f0a2:	b11b      	cbz	r3, 800f0ac <_dtoa_r+0xb34>
 800f0a4:	f10a 0308 	add.w	r3, sl, #8
 800f0a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0aa:	6013      	str	r3, [r2, #0]
 800f0ac:	4650      	mov	r0, sl
 800f0ae:	b019      	add	sp, #100	@ 0x64
 800f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	f77f ae37 	ble.w	800ed2a <_dtoa_r+0x7b2>
 800f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	e655      	b.n	800ed70 <_dtoa_r+0x7f8>
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f77f aed6 	ble.w	800ee78 <_dtoa_r+0x900>
 800f0cc:	4656      	mov	r6, sl
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	4648      	mov	r0, r9
 800f0d2:	f7ff f9c3 	bl	800e45c <quorem>
 800f0d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0da:	9b00      	ldr	r3, [sp, #0]
 800f0dc:	f806 8b01 	strb.w	r8, [r6], #1
 800f0e0:	eba6 020a 	sub.w	r2, r6, sl
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	ddb3      	ble.n	800f050 <_dtoa_r+0xad8>
 800f0e8:	4649      	mov	r1, r9
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	220a      	movs	r2, #10
 800f0ee:	4658      	mov	r0, fp
 800f0f0:	f000 f968 	bl	800f3c4 <__multadd>
 800f0f4:	4681      	mov	r9, r0
 800f0f6:	e7ea      	b.n	800f0ce <_dtoa_r+0xb56>
 800f0f8:	080146b6 	.word	0x080146b6
 800f0fc:	0801463a 	.word	0x0801463a

0800f100 <_free_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4605      	mov	r5, r0
 800f104:	2900      	cmp	r1, #0
 800f106:	d041      	beq.n	800f18c <_free_r+0x8c>
 800f108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f10c:	1f0c      	subs	r4, r1, #4
 800f10e:	2b00      	cmp	r3, #0
 800f110:	bfb8      	it	lt
 800f112:	18e4      	addlt	r4, r4, r3
 800f114:	f000 f8e8 	bl	800f2e8 <__malloc_lock>
 800f118:	4a1d      	ldr	r2, [pc, #116]	@ (800f190 <_free_r+0x90>)
 800f11a:	6813      	ldr	r3, [r2, #0]
 800f11c:	b933      	cbnz	r3, 800f12c <_free_r+0x2c>
 800f11e:	6063      	str	r3, [r4, #4]
 800f120:	6014      	str	r4, [r2, #0]
 800f122:	4628      	mov	r0, r5
 800f124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f128:	f000 b8e4 	b.w	800f2f4 <__malloc_unlock>
 800f12c:	42a3      	cmp	r3, r4
 800f12e:	d908      	bls.n	800f142 <_free_r+0x42>
 800f130:	6820      	ldr	r0, [r4, #0]
 800f132:	1821      	adds	r1, r4, r0
 800f134:	428b      	cmp	r3, r1
 800f136:	bf01      	itttt	eq
 800f138:	6819      	ldreq	r1, [r3, #0]
 800f13a:	685b      	ldreq	r3, [r3, #4]
 800f13c:	1809      	addeq	r1, r1, r0
 800f13e:	6021      	streq	r1, [r4, #0]
 800f140:	e7ed      	b.n	800f11e <_free_r+0x1e>
 800f142:	461a      	mov	r2, r3
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	b10b      	cbz	r3, 800f14c <_free_r+0x4c>
 800f148:	42a3      	cmp	r3, r4
 800f14a:	d9fa      	bls.n	800f142 <_free_r+0x42>
 800f14c:	6811      	ldr	r1, [r2, #0]
 800f14e:	1850      	adds	r0, r2, r1
 800f150:	42a0      	cmp	r0, r4
 800f152:	d10b      	bne.n	800f16c <_free_r+0x6c>
 800f154:	6820      	ldr	r0, [r4, #0]
 800f156:	4401      	add	r1, r0
 800f158:	1850      	adds	r0, r2, r1
 800f15a:	6011      	str	r1, [r2, #0]
 800f15c:	4283      	cmp	r3, r0
 800f15e:	d1e0      	bne.n	800f122 <_free_r+0x22>
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	4408      	add	r0, r1
 800f166:	6053      	str	r3, [r2, #4]
 800f168:	6010      	str	r0, [r2, #0]
 800f16a:	e7da      	b.n	800f122 <_free_r+0x22>
 800f16c:	d902      	bls.n	800f174 <_free_r+0x74>
 800f16e:	230c      	movs	r3, #12
 800f170:	602b      	str	r3, [r5, #0]
 800f172:	e7d6      	b.n	800f122 <_free_r+0x22>
 800f174:	6820      	ldr	r0, [r4, #0]
 800f176:	1821      	adds	r1, r4, r0
 800f178:	428b      	cmp	r3, r1
 800f17a:	bf02      	ittt	eq
 800f17c:	6819      	ldreq	r1, [r3, #0]
 800f17e:	685b      	ldreq	r3, [r3, #4]
 800f180:	1809      	addeq	r1, r1, r0
 800f182:	6063      	str	r3, [r4, #4]
 800f184:	bf08      	it	eq
 800f186:	6021      	streq	r1, [r4, #0]
 800f188:	6054      	str	r4, [r2, #4]
 800f18a:	e7ca      	b.n	800f122 <_free_r+0x22>
 800f18c:	bd38      	pop	{r3, r4, r5, pc}
 800f18e:	bf00      	nop
 800f190:	2003b3c0 	.word	0x2003b3c0

0800f194 <malloc>:
 800f194:	4b02      	ldr	r3, [pc, #8]	@ (800f1a0 <malloc+0xc>)
 800f196:	4601      	mov	r1, r0
 800f198:	6818      	ldr	r0, [r3, #0]
 800f19a:	f000 b825 	b.w	800f1e8 <_malloc_r>
 800f19e:	bf00      	nop
 800f1a0:	20000034 	.word	0x20000034

0800f1a4 <sbrk_aligned>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	4e0f      	ldr	r6, [pc, #60]	@ (800f1e4 <sbrk_aligned+0x40>)
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	6831      	ldr	r1, [r6, #0]
 800f1ae:	b911      	cbnz	r1, 800f1b6 <sbrk_aligned+0x12>
 800f1b0:	f001 fd9c 	bl	8010cec <_sbrk_r>
 800f1b4:	6030      	str	r0, [r6, #0]
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f001 fd97 	bl	8010cec <_sbrk_r>
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	d103      	bne.n	800f1ca <sbrk_aligned+0x26>
 800f1c2:	f04f 34ff 	mov.w	r4, #4294967295
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ca:	1cc4      	adds	r4, r0, #3
 800f1cc:	f024 0403 	bic.w	r4, r4, #3
 800f1d0:	42a0      	cmp	r0, r4
 800f1d2:	d0f8      	beq.n	800f1c6 <sbrk_aligned+0x22>
 800f1d4:	1a21      	subs	r1, r4, r0
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f001 fd88 	bl	8010cec <_sbrk_r>
 800f1dc:	3001      	adds	r0, #1
 800f1de:	d1f2      	bne.n	800f1c6 <sbrk_aligned+0x22>
 800f1e0:	e7ef      	b.n	800f1c2 <sbrk_aligned+0x1e>
 800f1e2:	bf00      	nop
 800f1e4:	2003b3bc 	.word	0x2003b3bc

0800f1e8 <_malloc_r>:
 800f1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	1ccd      	adds	r5, r1, #3
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	f025 0503 	bic.w	r5, r5, #3
 800f1f4:	3508      	adds	r5, #8
 800f1f6:	2d0c      	cmp	r5, #12
 800f1f8:	bf38      	it	cc
 800f1fa:	250c      	movcc	r5, #12
 800f1fc:	2d00      	cmp	r5, #0
 800f1fe:	db01      	blt.n	800f204 <_malloc_r+0x1c>
 800f200:	42a9      	cmp	r1, r5
 800f202:	d904      	bls.n	800f20e <_malloc_r+0x26>
 800f204:	230c      	movs	r3, #12
 800f206:	6033      	str	r3, [r6, #0]
 800f208:	2000      	movs	r0, #0
 800f20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f20e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2e4 <_malloc_r+0xfc>
 800f212:	f000 f869 	bl	800f2e8 <__malloc_lock>
 800f216:	f8d8 3000 	ldr.w	r3, [r8]
 800f21a:	461c      	mov	r4, r3
 800f21c:	bb44      	cbnz	r4, 800f270 <_malloc_r+0x88>
 800f21e:	4629      	mov	r1, r5
 800f220:	4630      	mov	r0, r6
 800f222:	f7ff ffbf 	bl	800f1a4 <sbrk_aligned>
 800f226:	1c43      	adds	r3, r0, #1
 800f228:	4604      	mov	r4, r0
 800f22a:	d158      	bne.n	800f2de <_malloc_r+0xf6>
 800f22c:	f8d8 4000 	ldr.w	r4, [r8]
 800f230:	4627      	mov	r7, r4
 800f232:	2f00      	cmp	r7, #0
 800f234:	d143      	bne.n	800f2be <_malloc_r+0xd6>
 800f236:	2c00      	cmp	r4, #0
 800f238:	d04b      	beq.n	800f2d2 <_malloc_r+0xea>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	4639      	mov	r1, r7
 800f23e:	4630      	mov	r0, r6
 800f240:	eb04 0903 	add.w	r9, r4, r3
 800f244:	f001 fd52 	bl	8010cec <_sbrk_r>
 800f248:	4581      	cmp	r9, r0
 800f24a:	d142      	bne.n	800f2d2 <_malloc_r+0xea>
 800f24c:	6821      	ldr	r1, [r4, #0]
 800f24e:	4630      	mov	r0, r6
 800f250:	1a6d      	subs	r5, r5, r1
 800f252:	4629      	mov	r1, r5
 800f254:	f7ff ffa6 	bl	800f1a4 <sbrk_aligned>
 800f258:	3001      	adds	r0, #1
 800f25a:	d03a      	beq.n	800f2d2 <_malloc_r+0xea>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	442b      	add	r3, r5
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	f8d8 3000 	ldr.w	r3, [r8]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	bb62      	cbnz	r2, 800f2c4 <_malloc_r+0xdc>
 800f26a:	f8c8 7000 	str.w	r7, [r8]
 800f26e:	e00f      	b.n	800f290 <_malloc_r+0xa8>
 800f270:	6822      	ldr	r2, [r4, #0]
 800f272:	1b52      	subs	r2, r2, r5
 800f274:	d420      	bmi.n	800f2b8 <_malloc_r+0xd0>
 800f276:	2a0b      	cmp	r2, #11
 800f278:	d917      	bls.n	800f2aa <_malloc_r+0xc2>
 800f27a:	1961      	adds	r1, r4, r5
 800f27c:	42a3      	cmp	r3, r4
 800f27e:	6025      	str	r5, [r4, #0]
 800f280:	bf18      	it	ne
 800f282:	6059      	strne	r1, [r3, #4]
 800f284:	6863      	ldr	r3, [r4, #4]
 800f286:	bf08      	it	eq
 800f288:	f8c8 1000 	streq.w	r1, [r8]
 800f28c:	5162      	str	r2, [r4, r5]
 800f28e:	604b      	str	r3, [r1, #4]
 800f290:	4630      	mov	r0, r6
 800f292:	f000 f82f 	bl	800f2f4 <__malloc_unlock>
 800f296:	f104 000b 	add.w	r0, r4, #11
 800f29a:	1d23      	adds	r3, r4, #4
 800f29c:	f020 0007 	bic.w	r0, r0, #7
 800f2a0:	1ac2      	subs	r2, r0, r3
 800f2a2:	bf1c      	itt	ne
 800f2a4:	1a1b      	subne	r3, r3, r0
 800f2a6:	50a3      	strne	r3, [r4, r2]
 800f2a8:	e7af      	b.n	800f20a <_malloc_r+0x22>
 800f2aa:	6862      	ldr	r2, [r4, #4]
 800f2ac:	42a3      	cmp	r3, r4
 800f2ae:	bf0c      	ite	eq
 800f2b0:	f8c8 2000 	streq.w	r2, [r8]
 800f2b4:	605a      	strne	r2, [r3, #4]
 800f2b6:	e7eb      	b.n	800f290 <_malloc_r+0xa8>
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	6864      	ldr	r4, [r4, #4]
 800f2bc:	e7ae      	b.n	800f21c <_malloc_r+0x34>
 800f2be:	463c      	mov	r4, r7
 800f2c0:	687f      	ldr	r7, [r7, #4]
 800f2c2:	e7b6      	b.n	800f232 <_malloc_r+0x4a>
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	42a3      	cmp	r3, r4
 800f2ca:	d1fb      	bne.n	800f2c4 <_malloc_r+0xdc>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	6053      	str	r3, [r2, #4]
 800f2d0:	e7de      	b.n	800f290 <_malloc_r+0xa8>
 800f2d2:	230c      	movs	r3, #12
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	6033      	str	r3, [r6, #0]
 800f2d8:	f000 f80c 	bl	800f2f4 <__malloc_unlock>
 800f2dc:	e794      	b.n	800f208 <_malloc_r+0x20>
 800f2de:	6005      	str	r5, [r0, #0]
 800f2e0:	e7d6      	b.n	800f290 <_malloc_r+0xa8>
 800f2e2:	bf00      	nop
 800f2e4:	2003b3c0 	.word	0x2003b3c0

0800f2e8 <__malloc_lock>:
 800f2e8:	4801      	ldr	r0, [pc, #4]	@ (800f2f0 <__malloc_lock+0x8>)
 800f2ea:	f7ff b894 	b.w	800e416 <__retarget_lock_acquire_recursive>
 800f2ee:	bf00      	nop
 800f2f0:	2003b3b8 	.word	0x2003b3b8

0800f2f4 <__malloc_unlock>:
 800f2f4:	4801      	ldr	r0, [pc, #4]	@ (800f2fc <__malloc_unlock+0x8>)
 800f2f6:	f7ff b88f 	b.w	800e418 <__retarget_lock_release_recursive>
 800f2fa:	bf00      	nop
 800f2fc:	2003b3b8 	.word	0x2003b3b8

0800f300 <_Balloc>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	69c6      	ldr	r6, [r0, #28]
 800f304:	4604      	mov	r4, r0
 800f306:	460d      	mov	r5, r1
 800f308:	b976      	cbnz	r6, 800f328 <_Balloc+0x28>
 800f30a:	2010      	movs	r0, #16
 800f30c:	f7ff ff42 	bl	800f194 <malloc>
 800f310:	4602      	mov	r2, r0
 800f312:	61e0      	str	r0, [r4, #28]
 800f314:	b920      	cbnz	r0, 800f320 <_Balloc+0x20>
 800f316:	4b18      	ldr	r3, [pc, #96]	@ (800f378 <_Balloc+0x78>)
 800f318:	216b      	movs	r1, #107	@ 0x6b
 800f31a:	4818      	ldr	r0, [pc, #96]	@ (800f37c <_Balloc+0x7c>)
 800f31c:	f001 fd00 	bl	8010d20 <__assert_func>
 800f320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f324:	6006      	str	r6, [r0, #0]
 800f326:	60c6      	str	r6, [r0, #12]
 800f328:	69e6      	ldr	r6, [r4, #28]
 800f32a:	68f3      	ldr	r3, [r6, #12]
 800f32c:	b183      	cbz	r3, 800f350 <_Balloc+0x50>
 800f32e:	69e3      	ldr	r3, [r4, #28]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f336:	b9b8      	cbnz	r0, 800f368 <_Balloc+0x68>
 800f338:	2101      	movs	r1, #1
 800f33a:	4620      	mov	r0, r4
 800f33c:	fa01 f605 	lsl.w	r6, r1, r5
 800f340:	1d72      	adds	r2, r6, #5
 800f342:	0092      	lsls	r2, r2, #2
 800f344:	f001 fd0a 	bl	8010d5c <_calloc_r>
 800f348:	b160      	cbz	r0, 800f364 <_Balloc+0x64>
 800f34a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f34e:	e00e      	b.n	800f36e <_Balloc+0x6e>
 800f350:	2221      	movs	r2, #33	@ 0x21
 800f352:	2104      	movs	r1, #4
 800f354:	4620      	mov	r0, r4
 800f356:	f001 fd01 	bl	8010d5c <_calloc_r>
 800f35a:	69e3      	ldr	r3, [r4, #28]
 800f35c:	60f0      	str	r0, [r6, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1e4      	bne.n	800f32e <_Balloc+0x2e>
 800f364:	2000      	movs	r0, #0
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	6802      	ldr	r2, [r0, #0]
 800f36a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f36e:	2300      	movs	r3, #0
 800f370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f374:	e7f7      	b.n	800f366 <_Balloc+0x66>
 800f376:	bf00      	nop
 800f378:	08014647 	.word	0x08014647
 800f37c:	080146c7 	.word	0x080146c7

0800f380 <_Bfree>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	69c6      	ldr	r6, [r0, #28]
 800f384:	4605      	mov	r5, r0
 800f386:	460c      	mov	r4, r1
 800f388:	b976      	cbnz	r6, 800f3a8 <_Bfree+0x28>
 800f38a:	2010      	movs	r0, #16
 800f38c:	f7ff ff02 	bl	800f194 <malloc>
 800f390:	4602      	mov	r2, r0
 800f392:	61e8      	str	r0, [r5, #28]
 800f394:	b920      	cbnz	r0, 800f3a0 <_Bfree+0x20>
 800f396:	4b09      	ldr	r3, [pc, #36]	@ (800f3bc <_Bfree+0x3c>)
 800f398:	218f      	movs	r1, #143	@ 0x8f
 800f39a:	4809      	ldr	r0, [pc, #36]	@ (800f3c0 <_Bfree+0x40>)
 800f39c:	f001 fcc0 	bl	8010d20 <__assert_func>
 800f3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3a4:	6006      	str	r6, [r0, #0]
 800f3a6:	60c6      	str	r6, [r0, #12]
 800f3a8:	b13c      	cbz	r4, 800f3ba <_Bfree+0x3a>
 800f3aa:	69eb      	ldr	r3, [r5, #28]
 800f3ac:	6862      	ldr	r2, [r4, #4]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3b4:	6021      	str	r1, [r4, #0]
 800f3b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	08014647 	.word	0x08014647
 800f3c0:	080146c7 	.word	0x080146c7

0800f3c4 <__multadd>:
 800f3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c8:	f101 0c14 	add.w	ip, r1, #20
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	461e      	mov	r6, r3
 800f3d2:	690d      	ldr	r5, [r1, #16]
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f3da:	3001      	adds	r0, #1
 800f3dc:	b299      	uxth	r1, r3
 800f3de:	4285      	cmp	r5, r0
 800f3e0:	fb02 6101 	mla	r1, r2, r1, r6
 800f3e4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f3ec:	b289      	uxth	r1, r1
 800f3ee:	fb02 3306 	mla	r3, r2, r6, r3
 800f3f2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800f3fe:	dcea      	bgt.n	800f3d6 <__multadd+0x12>
 800f400:	b30e      	cbz	r6, 800f446 <__multadd+0x82>
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	42ab      	cmp	r3, r5
 800f406:	dc19      	bgt.n	800f43c <__multadd+0x78>
 800f408:	6861      	ldr	r1, [r4, #4]
 800f40a:	4638      	mov	r0, r7
 800f40c:	3101      	adds	r1, #1
 800f40e:	f7ff ff77 	bl	800f300 <_Balloc>
 800f412:	4680      	mov	r8, r0
 800f414:	b928      	cbnz	r0, 800f422 <__multadd+0x5e>
 800f416:	4602      	mov	r2, r0
 800f418:	4b0c      	ldr	r3, [pc, #48]	@ (800f44c <__multadd+0x88>)
 800f41a:	21ba      	movs	r1, #186	@ 0xba
 800f41c:	480c      	ldr	r0, [pc, #48]	@ (800f450 <__multadd+0x8c>)
 800f41e:	f001 fc7f 	bl	8010d20 <__assert_func>
 800f422:	6922      	ldr	r2, [r4, #16]
 800f424:	f104 010c 	add.w	r1, r4, #12
 800f428:	300c      	adds	r0, #12
 800f42a:	3202      	adds	r2, #2
 800f42c:	0092      	lsls	r2, r2, #2
 800f42e:	f7ff f802 	bl	800e436 <memcpy>
 800f432:	4621      	mov	r1, r4
 800f434:	4644      	mov	r4, r8
 800f436:	4638      	mov	r0, r7
 800f438:	f7ff ffa2 	bl	800f380 <_Bfree>
 800f43c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f440:	3501      	adds	r5, #1
 800f442:	615e      	str	r6, [r3, #20]
 800f444:	6125      	str	r5, [r4, #16]
 800f446:	4620      	mov	r0, r4
 800f448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44c:	080146b6 	.word	0x080146b6
 800f450:	080146c7 	.word	0x080146c7

0800f454 <__s2b>:
 800f454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f458:	4615      	mov	r5, r2
 800f45a:	461f      	mov	r7, r3
 800f45c:	2209      	movs	r2, #9
 800f45e:	3308      	adds	r3, #8
 800f460:	460c      	mov	r4, r1
 800f462:	4606      	mov	r6, r0
 800f464:	2100      	movs	r1, #0
 800f466:	fb93 f3f2 	sdiv	r3, r3, r2
 800f46a:	2201      	movs	r2, #1
 800f46c:	429a      	cmp	r2, r3
 800f46e:	db09      	blt.n	800f484 <__s2b+0x30>
 800f470:	4630      	mov	r0, r6
 800f472:	f7ff ff45 	bl	800f300 <_Balloc>
 800f476:	b940      	cbnz	r0, 800f48a <__s2b+0x36>
 800f478:	4602      	mov	r2, r0
 800f47a:	4b19      	ldr	r3, [pc, #100]	@ (800f4e0 <__s2b+0x8c>)
 800f47c:	21d3      	movs	r1, #211	@ 0xd3
 800f47e:	4819      	ldr	r0, [pc, #100]	@ (800f4e4 <__s2b+0x90>)
 800f480:	f001 fc4e 	bl	8010d20 <__assert_func>
 800f484:	0052      	lsls	r2, r2, #1
 800f486:	3101      	adds	r1, #1
 800f488:	e7f0      	b.n	800f46c <__s2b+0x18>
 800f48a:	9b08      	ldr	r3, [sp, #32]
 800f48c:	2d09      	cmp	r5, #9
 800f48e:	6143      	str	r3, [r0, #20]
 800f490:	f04f 0301 	mov.w	r3, #1
 800f494:	6103      	str	r3, [r0, #16]
 800f496:	dd16      	ble.n	800f4c6 <__s2b+0x72>
 800f498:	f104 0909 	add.w	r9, r4, #9
 800f49c:	442c      	add	r4, r5
 800f49e:	46c8      	mov	r8, r9
 800f4a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4a4:	4601      	mov	r1, r0
 800f4a6:	220a      	movs	r2, #10
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	3b30      	subs	r3, #48	@ 0x30
 800f4ac:	f7ff ff8a 	bl	800f3c4 <__multadd>
 800f4b0:	45a0      	cmp	r8, r4
 800f4b2:	d1f5      	bne.n	800f4a0 <__s2b+0x4c>
 800f4b4:	f1a5 0408 	sub.w	r4, r5, #8
 800f4b8:	444c      	add	r4, r9
 800f4ba:	1b2d      	subs	r5, r5, r4
 800f4bc:	1963      	adds	r3, r4, r5
 800f4be:	42bb      	cmp	r3, r7
 800f4c0:	db04      	blt.n	800f4cc <__s2b+0x78>
 800f4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4c6:	340a      	adds	r4, #10
 800f4c8:	2509      	movs	r5, #9
 800f4ca:	e7f6      	b.n	800f4ba <__s2b+0x66>
 800f4cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4d0:	4601      	mov	r1, r0
 800f4d2:	220a      	movs	r2, #10
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	3b30      	subs	r3, #48	@ 0x30
 800f4d8:	f7ff ff74 	bl	800f3c4 <__multadd>
 800f4dc:	e7ee      	b.n	800f4bc <__s2b+0x68>
 800f4de:	bf00      	nop
 800f4e0:	080146b6 	.word	0x080146b6
 800f4e4:	080146c7 	.word	0x080146c7

0800f4e8 <__hi0bits>:
 800f4e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	bf36      	itet	cc
 800f4f0:	0403      	lslcc	r3, r0, #16
 800f4f2:	2000      	movcs	r0, #0
 800f4f4:	2010      	movcc	r0, #16
 800f4f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4fa:	bf3c      	itt	cc
 800f4fc:	021b      	lslcc	r3, r3, #8
 800f4fe:	3008      	addcc	r0, #8
 800f500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f504:	bf3c      	itt	cc
 800f506:	011b      	lslcc	r3, r3, #4
 800f508:	3004      	addcc	r0, #4
 800f50a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f50e:	bf3c      	itt	cc
 800f510:	009b      	lslcc	r3, r3, #2
 800f512:	3002      	addcc	r0, #2
 800f514:	2b00      	cmp	r3, #0
 800f516:	db05      	blt.n	800f524 <__hi0bits+0x3c>
 800f518:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f51c:	f100 0001 	add.w	r0, r0, #1
 800f520:	bf08      	it	eq
 800f522:	2020      	moveq	r0, #32
 800f524:	4770      	bx	lr

0800f526 <__lo0bits>:
 800f526:	6803      	ldr	r3, [r0, #0]
 800f528:	4602      	mov	r2, r0
 800f52a:	f013 0007 	ands.w	r0, r3, #7
 800f52e:	d00b      	beq.n	800f548 <__lo0bits+0x22>
 800f530:	07d9      	lsls	r1, r3, #31
 800f532:	d421      	bmi.n	800f578 <__lo0bits+0x52>
 800f534:	0798      	lsls	r0, r3, #30
 800f536:	bf47      	ittee	mi
 800f538:	085b      	lsrmi	r3, r3, #1
 800f53a:	2001      	movmi	r0, #1
 800f53c:	089b      	lsrpl	r3, r3, #2
 800f53e:	2002      	movpl	r0, #2
 800f540:	bf4c      	ite	mi
 800f542:	6013      	strmi	r3, [r2, #0]
 800f544:	6013      	strpl	r3, [r2, #0]
 800f546:	4770      	bx	lr
 800f548:	b299      	uxth	r1, r3
 800f54a:	b909      	cbnz	r1, 800f550 <__lo0bits+0x2a>
 800f54c:	0c1b      	lsrs	r3, r3, #16
 800f54e:	2010      	movs	r0, #16
 800f550:	b2d9      	uxtb	r1, r3
 800f552:	b909      	cbnz	r1, 800f558 <__lo0bits+0x32>
 800f554:	3008      	adds	r0, #8
 800f556:	0a1b      	lsrs	r3, r3, #8
 800f558:	0719      	lsls	r1, r3, #28
 800f55a:	bf04      	itt	eq
 800f55c:	091b      	lsreq	r3, r3, #4
 800f55e:	3004      	addeq	r0, #4
 800f560:	0799      	lsls	r1, r3, #30
 800f562:	bf04      	itt	eq
 800f564:	089b      	lsreq	r3, r3, #2
 800f566:	3002      	addeq	r0, #2
 800f568:	07d9      	lsls	r1, r3, #31
 800f56a:	d403      	bmi.n	800f574 <__lo0bits+0x4e>
 800f56c:	085b      	lsrs	r3, r3, #1
 800f56e:	f100 0001 	add.w	r0, r0, #1
 800f572:	d003      	beq.n	800f57c <__lo0bits+0x56>
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	4770      	bx	lr
 800f578:	2000      	movs	r0, #0
 800f57a:	4770      	bx	lr
 800f57c:	2020      	movs	r0, #32
 800f57e:	4770      	bx	lr

0800f580 <__i2b>:
 800f580:	b510      	push	{r4, lr}
 800f582:	460c      	mov	r4, r1
 800f584:	2101      	movs	r1, #1
 800f586:	f7ff febb 	bl	800f300 <_Balloc>
 800f58a:	4602      	mov	r2, r0
 800f58c:	b928      	cbnz	r0, 800f59a <__i2b+0x1a>
 800f58e:	4b05      	ldr	r3, [pc, #20]	@ (800f5a4 <__i2b+0x24>)
 800f590:	f240 1145 	movw	r1, #325	@ 0x145
 800f594:	4804      	ldr	r0, [pc, #16]	@ (800f5a8 <__i2b+0x28>)
 800f596:	f001 fbc3 	bl	8010d20 <__assert_func>
 800f59a:	2301      	movs	r3, #1
 800f59c:	6144      	str	r4, [r0, #20]
 800f59e:	6103      	str	r3, [r0, #16]
 800f5a0:	bd10      	pop	{r4, pc}
 800f5a2:	bf00      	nop
 800f5a4:	080146b6 	.word	0x080146b6
 800f5a8:	080146c7 	.word	0x080146c7

0800f5ac <__multiply>:
 800f5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b0:	4614      	mov	r4, r2
 800f5b2:	690a      	ldr	r2, [r1, #16]
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	bfa2      	ittt	ge
 800f5be:	4623      	movge	r3, r4
 800f5c0:	460c      	movge	r4, r1
 800f5c2:	461f      	movge	r7, r3
 800f5c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f5c8:	68a3      	ldr	r3, [r4, #8]
 800f5ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f5ce:	6861      	ldr	r1, [r4, #4]
 800f5d0:	eb0a 0609 	add.w	r6, sl, r9
 800f5d4:	42b3      	cmp	r3, r6
 800f5d6:	bfb8      	it	lt
 800f5d8:	3101      	addlt	r1, #1
 800f5da:	f7ff fe91 	bl	800f300 <_Balloc>
 800f5de:	b930      	cbnz	r0, 800f5ee <__multiply+0x42>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	4b45      	ldr	r3, [pc, #276]	@ (800f6f8 <__multiply+0x14c>)
 800f5e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5e8:	4844      	ldr	r0, [pc, #272]	@ (800f6fc <__multiply+0x150>)
 800f5ea:	f001 fb99 	bl	8010d20 <__assert_func>
 800f5ee:	f100 0514 	add.w	r5, r0, #20
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5f8:	462b      	mov	r3, r5
 800f5fa:	4543      	cmp	r3, r8
 800f5fc:	d321      	bcc.n	800f642 <__multiply+0x96>
 800f5fe:	f107 0114 	add.w	r1, r7, #20
 800f602:	f104 0214 	add.w	r2, r4, #20
 800f606:	f104 0715 	add.w	r7, r4, #21
 800f60a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f60e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f612:	9302      	str	r3, [sp, #8]
 800f614:	1b13      	subs	r3, r2, r4
 800f616:	3b15      	subs	r3, #21
 800f618:	f023 0303 	bic.w	r3, r3, #3
 800f61c:	3304      	adds	r3, #4
 800f61e:	42ba      	cmp	r2, r7
 800f620:	bf38      	it	cc
 800f622:	2304      	movcc	r3, #4
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	9b02      	ldr	r3, [sp, #8]
 800f628:	9103      	str	r1, [sp, #12]
 800f62a:	428b      	cmp	r3, r1
 800f62c:	d80c      	bhi.n	800f648 <__multiply+0x9c>
 800f62e:	2e00      	cmp	r6, #0
 800f630:	dd03      	ble.n	800f63a <__multiply+0x8e>
 800f632:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f636:	2b00      	cmp	r3, #0
 800f638:	d05b      	beq.n	800f6f2 <__multiply+0x146>
 800f63a:	6106      	str	r6, [r0, #16]
 800f63c:	b005      	add	sp, #20
 800f63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f642:	f843 2b04 	str.w	r2, [r3], #4
 800f646:	e7d8      	b.n	800f5fa <__multiply+0x4e>
 800f648:	f8b1 a000 	ldrh.w	sl, [r1]
 800f64c:	f1ba 0f00 	cmp.w	sl, #0
 800f650:	d024      	beq.n	800f69c <__multiply+0xf0>
 800f652:	f104 0e14 	add.w	lr, r4, #20
 800f656:	46a9      	mov	r9, r5
 800f658:	f04f 0c00 	mov.w	ip, #0
 800f65c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f660:	f8d9 3000 	ldr.w	r3, [r9]
 800f664:	fa1f fb87 	uxth.w	fp, r7
 800f668:	4572      	cmp	r2, lr
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f670:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f674:	f8d9 7000 	ldr.w	r7, [r9]
 800f678:	4463      	add	r3, ip
 800f67a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f67e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f682:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f686:	b29b      	uxth	r3, r3
 800f688:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f68c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f690:	f849 3b04 	str.w	r3, [r9], #4
 800f694:	d8e2      	bhi.n	800f65c <__multiply+0xb0>
 800f696:	9b01      	ldr	r3, [sp, #4]
 800f698:	f845 c003 	str.w	ip, [r5, r3]
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	3104      	adds	r1, #4
 800f6a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6a4:	f1b9 0f00 	cmp.w	r9, #0
 800f6a8:	d021      	beq.n	800f6ee <__multiply+0x142>
 800f6aa:	682b      	ldr	r3, [r5, #0]
 800f6ac:	f104 0c14 	add.w	ip, r4, #20
 800f6b0:	46ae      	mov	lr, r5
 800f6b2:	f04f 0a00 	mov.w	sl, #0
 800f6b6:	f8bc b000 	ldrh.w	fp, [ip]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f6c0:	fb09 770b 	mla	r7, r9, fp, r7
 800f6c4:	4457      	add	r7, sl
 800f6c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f6ca:	f84e 3b04 	str.w	r3, [lr], #4
 800f6ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6d6:	f8be 3000 	ldrh.w	r3, [lr]
 800f6da:	4562      	cmp	r2, ip
 800f6dc:	fb09 330a 	mla	r3, r9, sl, r3
 800f6e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f6e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6e8:	d8e5      	bhi.n	800f6b6 <__multiply+0x10a>
 800f6ea:	9f01      	ldr	r7, [sp, #4]
 800f6ec:	51eb      	str	r3, [r5, r7]
 800f6ee:	3504      	adds	r5, #4
 800f6f0:	e799      	b.n	800f626 <__multiply+0x7a>
 800f6f2:	3e01      	subs	r6, #1
 800f6f4:	e79b      	b.n	800f62e <__multiply+0x82>
 800f6f6:	bf00      	nop
 800f6f8:	080146b6 	.word	0x080146b6
 800f6fc:	080146c7 	.word	0x080146c7

0800f700 <__pow5mult>:
 800f700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f704:	4615      	mov	r5, r2
 800f706:	f012 0203 	ands.w	r2, r2, #3
 800f70a:	4607      	mov	r7, r0
 800f70c:	460e      	mov	r6, r1
 800f70e:	d007      	beq.n	800f720 <__pow5mult+0x20>
 800f710:	3a01      	subs	r2, #1
 800f712:	4c25      	ldr	r4, [pc, #148]	@ (800f7a8 <__pow5mult+0xa8>)
 800f714:	2300      	movs	r3, #0
 800f716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f71a:	f7ff fe53 	bl	800f3c4 <__multadd>
 800f71e:	4606      	mov	r6, r0
 800f720:	10ad      	asrs	r5, r5, #2
 800f722:	d03d      	beq.n	800f7a0 <__pow5mult+0xa0>
 800f724:	69fc      	ldr	r4, [r7, #28]
 800f726:	b97c      	cbnz	r4, 800f748 <__pow5mult+0x48>
 800f728:	2010      	movs	r0, #16
 800f72a:	f7ff fd33 	bl	800f194 <malloc>
 800f72e:	4602      	mov	r2, r0
 800f730:	61f8      	str	r0, [r7, #28]
 800f732:	b928      	cbnz	r0, 800f740 <__pow5mult+0x40>
 800f734:	4b1d      	ldr	r3, [pc, #116]	@ (800f7ac <__pow5mult+0xac>)
 800f736:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f73a:	481d      	ldr	r0, [pc, #116]	@ (800f7b0 <__pow5mult+0xb0>)
 800f73c:	f001 faf0 	bl	8010d20 <__assert_func>
 800f740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f744:	6004      	str	r4, [r0, #0]
 800f746:	60c4      	str	r4, [r0, #12]
 800f748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f750:	b94c      	cbnz	r4, 800f766 <__pow5mult+0x66>
 800f752:	f240 2171 	movw	r1, #625	@ 0x271
 800f756:	4638      	mov	r0, r7
 800f758:	f7ff ff12 	bl	800f580 <__i2b>
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	f8c8 0008 	str.w	r0, [r8, #8]
 800f764:	6003      	str	r3, [r0, #0]
 800f766:	f04f 0900 	mov.w	r9, #0
 800f76a:	07eb      	lsls	r3, r5, #31
 800f76c:	d50a      	bpl.n	800f784 <__pow5mult+0x84>
 800f76e:	4631      	mov	r1, r6
 800f770:	4622      	mov	r2, r4
 800f772:	4638      	mov	r0, r7
 800f774:	f7ff ff1a 	bl	800f5ac <__multiply>
 800f778:	4680      	mov	r8, r0
 800f77a:	4631      	mov	r1, r6
 800f77c:	4638      	mov	r0, r7
 800f77e:	4646      	mov	r6, r8
 800f780:	f7ff fdfe 	bl	800f380 <_Bfree>
 800f784:	106d      	asrs	r5, r5, #1
 800f786:	d00b      	beq.n	800f7a0 <__pow5mult+0xa0>
 800f788:	6820      	ldr	r0, [r4, #0]
 800f78a:	b938      	cbnz	r0, 800f79c <__pow5mult+0x9c>
 800f78c:	4622      	mov	r2, r4
 800f78e:	4621      	mov	r1, r4
 800f790:	4638      	mov	r0, r7
 800f792:	f7ff ff0b 	bl	800f5ac <__multiply>
 800f796:	6020      	str	r0, [r4, #0]
 800f798:	f8c0 9000 	str.w	r9, [r0]
 800f79c:	4604      	mov	r4, r0
 800f79e:	e7e4      	b.n	800f76a <__pow5mult+0x6a>
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a6:	bf00      	nop
 800f7a8:	08014720 	.word	0x08014720
 800f7ac:	08014647 	.word	0x08014647
 800f7b0:	080146c7 	.word	0x080146c7

0800f7b4 <__lshift>:
 800f7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	4607      	mov	r7, r0
 800f7bc:	4691      	mov	r9, r2
 800f7be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	6849      	ldr	r1, [r1, #4]
 800f7c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7ca:	68a3      	ldr	r3, [r4, #8]
 800f7cc:	f108 0601 	add.w	r6, r8, #1
 800f7d0:	42b3      	cmp	r3, r6
 800f7d2:	db0b      	blt.n	800f7ec <__lshift+0x38>
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f7ff fd93 	bl	800f300 <_Balloc>
 800f7da:	4605      	mov	r5, r0
 800f7dc:	b948      	cbnz	r0, 800f7f2 <__lshift+0x3e>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	4b28      	ldr	r3, [pc, #160]	@ (800f884 <__lshift+0xd0>)
 800f7e2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7e6:	4828      	ldr	r0, [pc, #160]	@ (800f888 <__lshift+0xd4>)
 800f7e8:	f001 fa9a 	bl	8010d20 <__assert_func>
 800f7ec:	3101      	adds	r1, #1
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	e7ee      	b.n	800f7d0 <__lshift+0x1c>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	f100 0114 	add.w	r1, r0, #20
 800f7f8:	f100 0210 	add.w	r2, r0, #16
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	4553      	cmp	r3, sl
 800f800:	db33      	blt.n	800f86a <__lshift+0xb6>
 800f802:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f806:	f104 0314 	add.w	r3, r4, #20
 800f80a:	6920      	ldr	r0, [r4, #16]
 800f80c:	f019 091f 	ands.w	r9, r9, #31
 800f810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f818:	d02b      	beq.n	800f872 <__lshift+0xbe>
 800f81a:	f1c9 0e20 	rsb	lr, r9, #32
 800f81e:	468a      	mov	sl, r1
 800f820:	2200      	movs	r2, #0
 800f822:	6818      	ldr	r0, [r3, #0]
 800f824:	fa00 f009 	lsl.w	r0, r0, r9
 800f828:	4310      	orrs	r0, r2
 800f82a:	f84a 0b04 	str.w	r0, [sl], #4
 800f82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f832:	459c      	cmp	ip, r3
 800f834:	fa22 f20e 	lsr.w	r2, r2, lr
 800f838:	d8f3      	bhi.n	800f822 <__lshift+0x6e>
 800f83a:	ebac 0304 	sub.w	r3, ip, r4
 800f83e:	f104 0015 	add.w	r0, r4, #21
 800f842:	3b15      	subs	r3, #21
 800f844:	f023 0303 	bic.w	r3, r3, #3
 800f848:	3304      	adds	r3, #4
 800f84a:	4584      	cmp	ip, r0
 800f84c:	bf38      	it	cc
 800f84e:	2304      	movcc	r3, #4
 800f850:	50ca      	str	r2, [r1, r3]
 800f852:	b10a      	cbz	r2, 800f858 <__lshift+0xa4>
 800f854:	f108 0602 	add.w	r6, r8, #2
 800f858:	3e01      	subs	r6, #1
 800f85a:	4638      	mov	r0, r7
 800f85c:	4621      	mov	r1, r4
 800f85e:	612e      	str	r6, [r5, #16]
 800f860:	f7ff fd8e 	bl	800f380 <_Bfree>
 800f864:	4628      	mov	r0, r5
 800f866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86a:	3301      	adds	r3, #1
 800f86c:	f842 0f04 	str.w	r0, [r2, #4]!
 800f870:	e7c5      	b.n	800f7fe <__lshift+0x4a>
 800f872:	3904      	subs	r1, #4
 800f874:	f853 2b04 	ldr.w	r2, [r3], #4
 800f878:	459c      	cmp	ip, r3
 800f87a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f87e:	d8f9      	bhi.n	800f874 <__lshift+0xc0>
 800f880:	e7ea      	b.n	800f858 <__lshift+0xa4>
 800f882:	bf00      	nop
 800f884:	080146b6 	.word	0x080146b6
 800f888:	080146c7 	.word	0x080146c7

0800f88c <__mcmp>:
 800f88c:	4603      	mov	r3, r0
 800f88e:	690a      	ldr	r2, [r1, #16]
 800f890:	6900      	ldr	r0, [r0, #16]
 800f892:	1a80      	subs	r0, r0, r2
 800f894:	b530      	push	{r4, r5, lr}
 800f896:	d10e      	bne.n	800f8b6 <__mcmp+0x2a>
 800f898:	3314      	adds	r3, #20
 800f89a:	3114      	adds	r1, #20
 800f89c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8ac:	4295      	cmp	r5, r2
 800f8ae:	d003      	beq.n	800f8b8 <__mcmp+0x2c>
 800f8b0:	d205      	bcs.n	800f8be <__mcmp+0x32>
 800f8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b6:	bd30      	pop	{r4, r5, pc}
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	d3f3      	bcc.n	800f8a4 <__mcmp+0x18>
 800f8bc:	e7fb      	b.n	800f8b6 <__mcmp+0x2a>
 800f8be:	2001      	movs	r0, #1
 800f8c0:	e7f9      	b.n	800f8b6 <__mcmp+0x2a>
	...

0800f8c4 <__mdiff>:
 800f8c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c8:	4689      	mov	r9, r1
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4614      	mov	r4, r2
 800f8d0:	4648      	mov	r0, r9
 800f8d2:	f7ff ffdb 	bl	800f88c <__mcmp>
 800f8d6:	1e05      	subs	r5, r0, #0
 800f8d8:	d112      	bne.n	800f900 <__mdiff+0x3c>
 800f8da:	4629      	mov	r1, r5
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f7ff fd0f 	bl	800f300 <_Balloc>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	b928      	cbnz	r0, 800f8f2 <__mdiff+0x2e>
 800f8e6:	4b41      	ldr	r3, [pc, #260]	@ (800f9ec <__mdiff+0x128>)
 800f8e8:	f240 2137 	movw	r1, #567	@ 0x237
 800f8ec:	4840      	ldr	r0, [pc, #256]	@ (800f9f0 <__mdiff+0x12c>)
 800f8ee:	f001 fa17 	bl	8010d20 <__assert_func>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	b003      	add	sp, #12
 800f8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f900:	bfbc      	itt	lt
 800f902:	464b      	movlt	r3, r9
 800f904:	46a1      	movlt	r9, r4
 800f906:	4630      	mov	r0, r6
 800f908:	bfb8      	it	lt
 800f90a:	2501      	movlt	r5, #1
 800f90c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f910:	bfb4      	ite	lt
 800f912:	461c      	movlt	r4, r3
 800f914:	2500      	movge	r5, #0
 800f916:	f7ff fcf3 	bl	800f300 <_Balloc>
 800f91a:	4602      	mov	r2, r0
 800f91c:	b918      	cbnz	r0, 800f926 <__mdiff+0x62>
 800f91e:	4b33      	ldr	r3, [pc, #204]	@ (800f9ec <__mdiff+0x128>)
 800f920:	f240 2145 	movw	r1, #581	@ 0x245
 800f924:	e7e2      	b.n	800f8ec <__mdiff+0x28>
 800f926:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f92a:	f104 0e14 	add.w	lr, r4, #20
 800f92e:	6926      	ldr	r6, [r4, #16]
 800f930:	f100 0b14 	add.w	fp, r0, #20
 800f934:	60c5      	str	r5, [r0, #12]
 800f936:	f109 0514 	add.w	r5, r9, #20
 800f93a:	f109 0310 	add.w	r3, r9, #16
 800f93e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f942:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f946:	46d9      	mov	r9, fp
 800f948:	f04f 0c00 	mov.w	ip, #0
 800f94c:	9301      	str	r3, [sp, #4]
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f954:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f958:	4576      	cmp	r6, lr
 800f95a:	9301      	str	r3, [sp, #4]
 800f95c:	fa1f f38a 	uxth.w	r3, sl
 800f960:	4619      	mov	r1, r3
 800f962:	b283      	uxth	r3, r0
 800f964:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800f968:	eba1 0303 	sub.w	r3, r1, r3
 800f96c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f970:	4463      	add	r3, ip
 800f972:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f976:	b29b      	uxth	r3, r3
 800f978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f97c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f980:	f849 3b04 	str.w	r3, [r9], #4
 800f984:	d8e3      	bhi.n	800f94e <__mdiff+0x8a>
 800f986:	1b33      	subs	r3, r6, r4
 800f988:	3415      	adds	r4, #21
 800f98a:	3b15      	subs	r3, #21
 800f98c:	f023 0303 	bic.w	r3, r3, #3
 800f990:	3304      	adds	r3, #4
 800f992:	42a6      	cmp	r6, r4
 800f994:	bf38      	it	cc
 800f996:	2304      	movcc	r3, #4
 800f998:	441d      	add	r5, r3
 800f99a:	445b      	add	r3, fp
 800f99c:	462c      	mov	r4, r5
 800f99e:	461e      	mov	r6, r3
 800f9a0:	4544      	cmp	r4, r8
 800f9a2:	d30e      	bcc.n	800f9c2 <__mdiff+0xfe>
 800f9a4:	f108 0103 	add.w	r1, r8, #3
 800f9a8:	1b49      	subs	r1, r1, r5
 800f9aa:	3d03      	subs	r5, #3
 800f9ac:	f021 0103 	bic.w	r1, r1, #3
 800f9b0:	45a8      	cmp	r8, r5
 800f9b2:	bf38      	it	cc
 800f9b4:	2100      	movcc	r1, #0
 800f9b6:	440b      	add	r3, r1
 800f9b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9bc:	b199      	cbz	r1, 800f9e6 <__mdiff+0x122>
 800f9be:	6117      	str	r7, [r2, #16]
 800f9c0:	e79a      	b.n	800f8f8 <__mdiff+0x34>
 800f9c2:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9c6:	46e6      	mov	lr, ip
 800f9c8:	fa1f fc81 	uxth.w	ip, r1
 800f9cc:	0c08      	lsrs	r0, r1, #16
 800f9ce:	4471      	add	r1, lr
 800f9d0:	44f4      	add	ip, lr
 800f9d2:	b289      	uxth	r1, r1
 800f9d4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9e0:	f846 1b04 	str.w	r1, [r6], #4
 800f9e4:	e7dc      	b.n	800f9a0 <__mdiff+0xdc>
 800f9e6:	3f01      	subs	r7, #1
 800f9e8:	e7e6      	b.n	800f9b8 <__mdiff+0xf4>
 800f9ea:	bf00      	nop
 800f9ec:	080146b6 	.word	0x080146b6
 800f9f0:	080146c7 	.word	0x080146c7

0800f9f4 <__ulp>:
 800f9f4:	b082      	sub	sp, #8
 800f9f6:	4b11      	ldr	r3, [pc, #68]	@ (800fa3c <__ulp+0x48>)
 800f9f8:	ed8d 0b00 	vstr	d0, [sp]
 800f9fc:	9a01      	ldr	r2, [sp, #4]
 800f9fe:	4013      	ands	r3, r2
 800fa00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	dc08      	bgt.n	800fa1a <__ulp+0x26>
 800fa08:	425b      	negs	r3, r3
 800fa0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa12:	da04      	bge.n	800fa1e <__ulp+0x2a>
 800fa14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa18:	4113      	asrs	r3, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	e008      	b.n	800fa30 <__ulp+0x3c>
 800fa1e:	f1a2 0314 	sub.w	r3, r2, #20
 800fa22:	2b1e      	cmp	r3, #30
 800fa24:	bfd6      	itet	le
 800fa26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa2a:	2201      	movgt	r2, #1
 800fa2c:	40da      	lsrle	r2, r3
 800fa2e:	2300      	movs	r3, #0
 800fa30:	4619      	mov	r1, r3
 800fa32:	4610      	mov	r0, r2
 800fa34:	ec41 0b10 	vmov	d0, r0, r1
 800fa38:	b002      	add	sp, #8
 800fa3a:	4770      	bx	lr
 800fa3c:	7ff00000 	.word	0x7ff00000

0800fa40 <__b2d>:
 800fa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa44:	6906      	ldr	r6, [r0, #16]
 800fa46:	f100 0814 	add.w	r8, r0, #20
 800fa4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa4e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa52:	1f37      	subs	r7, r6, #4
 800fa54:	4610      	mov	r0, r2
 800fa56:	f7ff fd47 	bl	800f4e8 <__hi0bits>
 800fa5a:	f1c0 0320 	rsb	r3, r0, #32
 800fa5e:	280a      	cmp	r0, #10
 800fa60:	600b      	str	r3, [r1, #0]
 800fa62:	491d      	ldr	r1, [pc, #116]	@ (800fad8 <__b2d+0x98>)
 800fa64:	dc16      	bgt.n	800fa94 <__b2d+0x54>
 800fa66:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa6a:	45b8      	cmp	r8, r7
 800fa6c:	f100 0015 	add.w	r0, r0, #21
 800fa70:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa74:	fa02 f000 	lsl.w	r0, r2, r0
 800fa78:	ea43 0501 	orr.w	r5, r3, r1
 800fa7c:	bf34      	ite	cc
 800fa7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa82:	2300      	movcs	r3, #0
 800fa84:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa88:	4303      	orrs	r3, r0
 800fa8a:	461c      	mov	r4, r3
 800fa8c:	ec45 4b10 	vmov	d0, r4, r5
 800fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa94:	45b8      	cmp	r8, r7
 800fa96:	bf3a      	itte	cc
 800fa98:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa9c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800faa0:	2300      	movcs	r3, #0
 800faa2:	380b      	subs	r0, #11
 800faa4:	d014      	beq.n	800fad0 <__b2d+0x90>
 800faa6:	f1c0 0120 	rsb	r1, r0, #32
 800faaa:	4082      	lsls	r2, r0
 800faac:	4547      	cmp	r7, r8
 800faae:	fa23 f401 	lsr.w	r4, r3, r1
 800fab2:	fa03 f300 	lsl.w	r3, r3, r0
 800fab6:	ea42 0204 	orr.w	r2, r2, r4
 800faba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fabe:	bf8c      	ite	hi
 800fac0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fac4:	2200      	movls	r2, #0
 800fac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800faca:	40ca      	lsrs	r2, r1
 800facc:	4313      	orrs	r3, r2
 800face:	e7dc      	b.n	800fa8a <__b2d+0x4a>
 800fad0:	ea42 0501 	orr.w	r5, r2, r1
 800fad4:	e7d9      	b.n	800fa8a <__b2d+0x4a>
 800fad6:	bf00      	nop
 800fad8:	3ff00000 	.word	0x3ff00000

0800fadc <__d2b>:
 800fadc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fae0:	460f      	mov	r7, r1
 800fae2:	2101      	movs	r1, #1
 800fae4:	4616      	mov	r6, r2
 800fae6:	ec59 8b10 	vmov	r8, r9, d0
 800faea:	f7ff fc09 	bl	800f300 <_Balloc>
 800faee:	4604      	mov	r4, r0
 800faf0:	b930      	cbnz	r0, 800fb00 <__d2b+0x24>
 800faf2:	4602      	mov	r2, r0
 800faf4:	4b23      	ldr	r3, [pc, #140]	@ (800fb84 <__d2b+0xa8>)
 800faf6:	f240 310f 	movw	r1, #783	@ 0x30f
 800fafa:	4823      	ldr	r0, [pc, #140]	@ (800fb88 <__d2b+0xac>)
 800fafc:	f001 f910 	bl	8010d20 <__assert_func>
 800fb00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb08:	b10d      	cbz	r5, 800fb0e <__d2b+0x32>
 800fb0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb0e:	9301      	str	r3, [sp, #4]
 800fb10:	f1b8 0300 	subs.w	r3, r8, #0
 800fb14:	d023      	beq.n	800fb5e <__d2b+0x82>
 800fb16:	4668      	mov	r0, sp
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	f7ff fd04 	bl	800f526 <__lo0bits>
 800fb1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb22:	b1d0      	cbz	r0, 800fb5a <__d2b+0x7e>
 800fb24:	f1c0 0320 	rsb	r3, r0, #32
 800fb28:	fa02 f303 	lsl.w	r3, r2, r3
 800fb2c:	40c2      	lsrs	r2, r0
 800fb2e:	430b      	orrs	r3, r1
 800fb30:	9201      	str	r2, [sp, #4]
 800fb32:	6163      	str	r3, [r4, #20]
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	61a3      	str	r3, [r4, #24]
 800fb3a:	bf0c      	ite	eq
 800fb3c:	2201      	moveq	r2, #1
 800fb3e:	2202      	movne	r2, #2
 800fb40:	6122      	str	r2, [r4, #16]
 800fb42:	b1a5      	cbz	r5, 800fb6e <__d2b+0x92>
 800fb44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb48:	4405      	add	r5, r0
 800fb4a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb4e:	603d      	str	r5, [r7, #0]
 800fb50:	6030      	str	r0, [r6, #0]
 800fb52:	4620      	mov	r0, r4
 800fb54:	b003      	add	sp, #12
 800fb56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb5a:	6161      	str	r1, [r4, #20]
 800fb5c:	e7ea      	b.n	800fb34 <__d2b+0x58>
 800fb5e:	a801      	add	r0, sp, #4
 800fb60:	f7ff fce1 	bl	800f526 <__lo0bits>
 800fb64:	9b01      	ldr	r3, [sp, #4]
 800fb66:	3020      	adds	r0, #32
 800fb68:	2201      	movs	r2, #1
 800fb6a:	6163      	str	r3, [r4, #20]
 800fb6c:	e7e8      	b.n	800fb40 <__d2b+0x64>
 800fb6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb76:	6038      	str	r0, [r7, #0]
 800fb78:	6918      	ldr	r0, [r3, #16]
 800fb7a:	f7ff fcb5 	bl	800f4e8 <__hi0bits>
 800fb7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb82:	e7e5      	b.n	800fb50 <__d2b+0x74>
 800fb84:	080146b6 	.word	0x080146b6
 800fb88:	080146c7 	.word	0x080146c7

0800fb8c <__ratio>:
 800fb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb90:	b085      	sub	sp, #20
 800fb92:	e9cd 1000 	strd	r1, r0, [sp]
 800fb96:	a902      	add	r1, sp, #8
 800fb98:	f7ff ff52 	bl	800fa40 <__b2d>
 800fb9c:	a903      	add	r1, sp, #12
 800fb9e:	9800      	ldr	r0, [sp, #0]
 800fba0:	ec55 4b10 	vmov	r4, r5, d0
 800fba4:	f7ff ff4c 	bl	800fa40 <__b2d>
 800fba8:	9b01      	ldr	r3, [sp, #4]
 800fbaa:	462f      	mov	r7, r5
 800fbac:	4620      	mov	r0, r4
 800fbae:	6919      	ldr	r1, [r3, #16]
 800fbb0:	9b00      	ldr	r3, [sp, #0]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	1ac9      	subs	r1, r1, r3
 800fbb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbba:	ec5b ab10 	vmov	sl, fp, d0
 800fbbe:	1a9b      	subs	r3, r3, r2
 800fbc0:	46d9      	mov	r9, fp
 800fbc2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	bfcd      	iteet	gt
 800fbca:	462a      	movgt	r2, r5
 800fbcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbd0:	465a      	movle	r2, fp
 800fbd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fbd6:	bfd8      	it	le
 800fbd8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbdc:	4652      	mov	r2, sl
 800fbde:	4639      	mov	r1, r7
 800fbe0:	464b      	mov	r3, r9
 800fbe2:	f7f0 fe47 	bl	8000874 <__aeabi_ddiv>
 800fbe6:	ec41 0b10 	vmov	d0, r0, r1
 800fbea:	b005      	add	sp, #20
 800fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbf0 <__copybits>:
 800fbf0:	3901      	subs	r1, #1
 800fbf2:	f102 0314 	add.w	r3, r2, #20
 800fbf6:	1149      	asrs	r1, r1, #5
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	3101      	adds	r1, #1
 800fbfc:	6914      	ldr	r4, [r2, #16]
 800fbfe:	1f05      	subs	r5, r0, #4
 800fc00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc08:	42a3      	cmp	r3, r4
 800fc0a:	d30c      	bcc.n	800fc26 <__copybits+0x36>
 800fc0c:	1aa3      	subs	r3, r4, r2
 800fc0e:	3211      	adds	r2, #17
 800fc10:	3b11      	subs	r3, #17
 800fc12:	f023 0303 	bic.w	r3, r3, #3
 800fc16:	42a2      	cmp	r2, r4
 800fc18:	bf88      	it	hi
 800fc1a:	2300      	movhi	r3, #0
 800fc1c:	4418      	add	r0, r3
 800fc1e:	2300      	movs	r3, #0
 800fc20:	4288      	cmp	r0, r1
 800fc22:	d305      	bcc.n	800fc30 <__copybits+0x40>
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc2e:	e7eb      	b.n	800fc08 <__copybits+0x18>
 800fc30:	f840 3b04 	str.w	r3, [r0], #4
 800fc34:	e7f4      	b.n	800fc20 <__copybits+0x30>

0800fc36 <__any_on>:
 800fc36:	f100 0214 	add.w	r2, r0, #20
 800fc3a:	114b      	asrs	r3, r1, #5
 800fc3c:	6900      	ldr	r0, [r0, #16]
 800fc3e:	4298      	cmp	r0, r3
 800fc40:	b510      	push	{r4, lr}
 800fc42:	db11      	blt.n	800fc68 <__any_on+0x32>
 800fc44:	dd0a      	ble.n	800fc5c <__any_on+0x26>
 800fc46:	f011 011f 	ands.w	r1, r1, #31
 800fc4a:	d007      	beq.n	800fc5c <__any_on+0x26>
 800fc4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc50:	fa24 f001 	lsr.w	r0, r4, r1
 800fc54:	fa00 f101 	lsl.w	r1, r0, r1
 800fc58:	428c      	cmp	r4, r1
 800fc5a:	d10b      	bne.n	800fc74 <__any_on+0x3e>
 800fc5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d803      	bhi.n	800fc6c <__any_on+0x36>
 800fc64:	2000      	movs	r0, #0
 800fc66:	bd10      	pop	{r4, pc}
 800fc68:	4603      	mov	r3, r0
 800fc6a:	e7f7      	b.n	800fc5c <__any_on+0x26>
 800fc6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc70:	2900      	cmp	r1, #0
 800fc72:	d0f5      	beq.n	800fc60 <__any_on+0x2a>
 800fc74:	2001      	movs	r0, #1
 800fc76:	e7f6      	b.n	800fc66 <__any_on+0x30>

0800fc78 <sulp>:
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	460d      	mov	r5, r1
 800fc7e:	4616      	mov	r6, r2
 800fc80:	ec45 4b10 	vmov	d0, r4, r5
 800fc84:	f7ff feb6 	bl	800f9f4 <__ulp>
 800fc88:	ec51 0b10 	vmov	r0, r1, d0
 800fc8c:	b17e      	cbz	r6, 800fcae <sulp+0x36>
 800fc8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	dd09      	ble.n	800fcae <sulp+0x36>
 800fc9a:	051b      	lsls	r3, r3, #20
 800fc9c:	2400      	movs	r4, #0
 800fc9e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fca2:	4622      	mov	r2, r4
 800fca4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fca8:	462b      	mov	r3, r5
 800fcaa:	f7f0 fcb9 	bl	8000620 <__aeabi_dmul>
 800fcae:	ec41 0b10 	vmov	d0, r0, r1
 800fcb2:	bd70      	pop	{r4, r5, r6, pc}
 800fcb4:	0000      	movs	r0, r0
	...

0800fcb8 <_strtod_l>:
 800fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbc:	b09f      	sub	sp, #124	@ 0x7c
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	f04f 0a00 	mov.w	sl, #0
 800fcc4:	f04f 0b00 	mov.w	fp, #0
 800fcc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcca:	2200      	movs	r2, #0
 800fccc:	9005      	str	r0, [sp, #20]
 800fcce:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcd0:	460a      	mov	r2, r1
 800fcd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fcd4:	7811      	ldrb	r1, [r2, #0]
 800fcd6:	292b      	cmp	r1, #43	@ 0x2b
 800fcd8:	d04a      	beq.n	800fd70 <_strtod_l+0xb8>
 800fcda:	d838      	bhi.n	800fd4e <_strtod_l+0x96>
 800fcdc:	290d      	cmp	r1, #13
 800fcde:	d832      	bhi.n	800fd46 <_strtod_l+0x8e>
 800fce0:	2908      	cmp	r1, #8
 800fce2:	d832      	bhi.n	800fd4a <_strtod_l+0x92>
 800fce4:	2900      	cmp	r1, #0
 800fce6:	d03b      	beq.n	800fd60 <_strtod_l+0xa8>
 800fce8:	2200      	movs	r2, #0
 800fcea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fcec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fcee:	782a      	ldrb	r2, [r5, #0]
 800fcf0:	2a30      	cmp	r2, #48	@ 0x30
 800fcf2:	f040 80b3 	bne.w	800fe5c <_strtod_l+0x1a4>
 800fcf6:	786a      	ldrb	r2, [r5, #1]
 800fcf8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcfc:	2a58      	cmp	r2, #88	@ 0x58
 800fcfe:	d16e      	bne.n	800fdde <_strtod_l+0x126>
 800fd00:	9302      	str	r3, [sp, #8]
 800fd02:	a919      	add	r1, sp, #100	@ 0x64
 800fd04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd06:	4a90      	ldr	r2, [pc, #576]	@ (800ff48 <_strtod_l+0x290>)
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd0c:	9805      	ldr	r0, [sp, #20]
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd12:	f001 f89d 	bl	8010e50 <__gethex>
 800fd16:	f010 060f 	ands.w	r6, r0, #15
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	d005      	beq.n	800fd2a <_strtod_l+0x72>
 800fd1e:	2e06      	cmp	r6, #6
 800fd20:	d128      	bne.n	800fd74 <_strtod_l+0xbc>
 800fd22:	3501      	adds	r5, #1
 800fd24:	2300      	movs	r3, #0
 800fd26:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f040 858e 	bne.w	801084e <_strtod_l+0xb96>
 800fd32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd34:	b1cb      	cbz	r3, 800fd6a <_strtod_l+0xb2>
 800fd36:	4652      	mov	r2, sl
 800fd38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd3c:	ec43 2b10 	vmov	d0, r2, r3
 800fd40:	b01f      	add	sp, #124	@ 0x7c
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	2920      	cmp	r1, #32
 800fd48:	d1ce      	bne.n	800fce8 <_strtod_l+0x30>
 800fd4a:	3201      	adds	r2, #1
 800fd4c:	e7c1      	b.n	800fcd2 <_strtod_l+0x1a>
 800fd4e:	292d      	cmp	r1, #45	@ 0x2d
 800fd50:	d1ca      	bne.n	800fce8 <_strtod_l+0x30>
 800fd52:	2101      	movs	r1, #1
 800fd54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd56:	1c51      	adds	r1, r2, #1
 800fd58:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd5a:	7852      	ldrb	r2, [r2, #1]
 800fd5c:	2a00      	cmp	r2, #0
 800fd5e:	d1c5      	bne.n	800fcec <_strtod_l+0x34>
 800fd60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd62:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f040 8570 	bne.w	801084a <_strtod_l+0xb92>
 800fd6a:	4652      	mov	r2, sl
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	e7e5      	b.n	800fd3c <_strtod_l+0x84>
 800fd70:	2100      	movs	r1, #0
 800fd72:	e7ef      	b.n	800fd54 <_strtod_l+0x9c>
 800fd74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd76:	b13a      	cbz	r2, 800fd88 <_strtod_l+0xd0>
 800fd78:	2135      	movs	r1, #53	@ 0x35
 800fd7a:	a81c      	add	r0, sp, #112	@ 0x70
 800fd7c:	f7ff ff38 	bl	800fbf0 <__copybits>
 800fd80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd82:	9805      	ldr	r0, [sp, #20]
 800fd84:	f7ff fafc 	bl	800f380 <_Bfree>
 800fd88:	3e01      	subs	r6, #1
 800fd8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd8c:	2e04      	cmp	r6, #4
 800fd8e:	d806      	bhi.n	800fd9e <_strtod_l+0xe6>
 800fd90:	e8df f006 	tbb	[pc, r6]
 800fd94:	201d0314 	.word	0x201d0314
 800fd98:	14          	.byte	0x14
 800fd99:	00          	.byte	0x00
 800fd9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd9e:	05e1      	lsls	r1, r4, #23
 800fda0:	bf48      	it	mi
 800fda2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fda6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdaa:	0d1b      	lsrs	r3, r3, #20
 800fdac:	051b      	lsls	r3, r3, #20
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1bb      	bne.n	800fd2a <_strtod_l+0x72>
 800fdb2:	f7fe fb05 	bl	800e3c0 <__errno>
 800fdb6:	2322      	movs	r3, #34	@ 0x22
 800fdb8:	6003      	str	r3, [r0, #0]
 800fdba:	e7b6      	b.n	800fd2a <_strtod_l+0x72>
 800fdbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdcc:	e7e7      	b.n	800fd9e <_strtod_l+0xe6>
 800fdce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ff50 <_strtod_l+0x298>
 800fdd2:	e7e4      	b.n	800fd9e <_strtod_l+0xe6>
 800fdd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdd8:	f04f 3aff 	mov.w	sl, #4294967295
 800fddc:	e7df      	b.n	800fd9e <_strtod_l+0xe6>
 800fdde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fde0:	1c5a      	adds	r2, r3, #1
 800fde2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fde4:	785b      	ldrb	r3, [r3, #1]
 800fde6:	2b30      	cmp	r3, #48	@ 0x30
 800fde8:	d0f9      	beq.n	800fdde <_strtod_l+0x126>
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d09d      	beq.n	800fd2a <_strtod_l+0x72>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdf2:	220a      	movs	r2, #10
 800fdf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdf6:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	461f      	mov	r7, r3
 800fdfc:	9308      	str	r3, [sp, #32]
 800fdfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fe02:	7805      	ldrb	r5, [r0, #0]
 800fe04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fe08:	b2d9      	uxtb	r1, r3
 800fe0a:	2909      	cmp	r1, #9
 800fe0c:	d928      	bls.n	800fe60 <_strtod_l+0x1a8>
 800fe0e:	2201      	movs	r2, #1
 800fe10:	494e      	ldr	r1, [pc, #312]	@ (800ff4c <_strtod_l+0x294>)
 800fe12:	f000 ff59 	bl	8010cc8 <strncmp>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d033      	beq.n	800fe82 <_strtod_l+0x1ca>
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	462a      	mov	r2, r5
 800fe1e:	463d      	mov	r5, r7
 800fe20:	4681      	mov	r9, r0
 800fe22:	4603      	mov	r3, r0
 800fe24:	2a65      	cmp	r2, #101	@ 0x65
 800fe26:	d001      	beq.n	800fe2c <_strtod_l+0x174>
 800fe28:	2a45      	cmp	r2, #69	@ 0x45
 800fe2a:	d114      	bne.n	800fe56 <_strtod_l+0x19e>
 800fe2c:	b91d      	cbnz	r5, 800fe36 <_strtod_l+0x17e>
 800fe2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe30:	4302      	orrs	r2, r0
 800fe32:	d095      	beq.n	800fd60 <_strtod_l+0xa8>
 800fe34:	2500      	movs	r5, #0
 800fe36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe38:	1c62      	adds	r2, r4, #1
 800fe3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe3c:	7862      	ldrb	r2, [r4, #1]
 800fe3e:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe40:	d078      	beq.n	800ff34 <_strtod_l+0x27c>
 800fe42:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe44:	d07c      	beq.n	800ff40 <_strtod_l+0x288>
 800fe46:	f04f 0c00 	mov.w	ip, #0
 800fe4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe4e:	2909      	cmp	r1, #9
 800fe50:	f240 8084 	bls.w	800ff5c <_strtod_l+0x2a4>
 800fe54:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe56:	f04f 0800 	mov.w	r8, #0
 800fe5a:	e0a4      	b.n	800ffa6 <_strtod_l+0x2ee>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	e7c7      	b.n	800fdf0 <_strtod_l+0x138>
 800fe60:	2f08      	cmp	r7, #8
 800fe62:	f100 0001 	add.w	r0, r0, #1
 800fe66:	f107 0701 	add.w	r7, r7, #1
 800fe6a:	bfd5      	itete	le
 800fe6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe6e:	9908      	ldrgt	r1, [sp, #32]
 800fe70:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe78:	bfd4      	ite	le
 800fe7a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe7c:	9308      	strgt	r3, [sp, #32]
 800fe7e:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe80:	e7be      	b.n	800fe00 <_strtod_l+0x148>
 800fe82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe84:	1c5a      	adds	r2, r3, #1
 800fe86:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe88:	785a      	ldrb	r2, [r3, #1]
 800fe8a:	b37f      	cbz	r7, 800feec <_strtod_l+0x234>
 800fe8c:	4681      	mov	r9, r0
 800fe8e:	463d      	mov	r5, r7
 800fe90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe94:	2b09      	cmp	r3, #9
 800fe96:	d912      	bls.n	800febe <_strtod_l+0x206>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e7c3      	b.n	800fe24 <_strtod_l+0x16c>
 800fe9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe9e:	3001      	adds	r0, #1
 800fea0:	1c5a      	adds	r2, r3, #1
 800fea2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fea4:	785a      	ldrb	r2, [r3, #1]
 800fea6:	2a30      	cmp	r2, #48	@ 0x30
 800fea8:	d0f8      	beq.n	800fe9c <_strtod_l+0x1e4>
 800feaa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800feae:	2b08      	cmp	r3, #8
 800feb0:	f200 84d2 	bhi.w	8010858 <_strtod_l+0xba0>
 800feb4:	4681      	mov	r9, r0
 800feb6:	2000      	movs	r0, #0
 800feb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feba:	4605      	mov	r5, r0
 800febc:	930c      	str	r3, [sp, #48]	@ 0x30
 800febe:	3a30      	subs	r2, #48	@ 0x30
 800fec0:	f100 0301 	add.w	r3, r0, #1
 800fec4:	d02a      	beq.n	800ff1c <_strtod_l+0x264>
 800fec6:	4499      	add	r9, r3
 800fec8:	eb00 0c05 	add.w	ip, r0, r5
 800fecc:	462b      	mov	r3, r5
 800fece:	210a      	movs	r1, #10
 800fed0:	4563      	cmp	r3, ip
 800fed2:	d10d      	bne.n	800fef0 <_strtod_l+0x238>
 800fed4:	1c69      	adds	r1, r5, #1
 800fed6:	4401      	add	r1, r0
 800fed8:	4428      	add	r0, r5
 800feda:	2808      	cmp	r0, #8
 800fedc:	dc16      	bgt.n	800ff0c <_strtod_l+0x254>
 800fede:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fee0:	230a      	movs	r3, #10
 800fee2:	fb03 2300 	mla	r3, r3, r0, r2
 800fee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fee8:	2300      	movs	r3, #0
 800feea:	e018      	b.n	800ff1e <_strtod_l+0x266>
 800feec:	4638      	mov	r0, r7
 800feee:	e7da      	b.n	800fea6 <_strtod_l+0x1ee>
 800fef0:	2b08      	cmp	r3, #8
 800fef2:	f103 0301 	add.w	r3, r3, #1
 800fef6:	dc03      	bgt.n	800ff00 <_strtod_l+0x248>
 800fef8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fefa:	434e      	muls	r6, r1
 800fefc:	960a      	str	r6, [sp, #40]	@ 0x28
 800fefe:	e7e7      	b.n	800fed0 <_strtod_l+0x218>
 800ff00:	2b10      	cmp	r3, #16
 800ff02:	bfde      	ittt	le
 800ff04:	9e08      	ldrle	r6, [sp, #32]
 800ff06:	434e      	mulle	r6, r1
 800ff08:	9608      	strle	r6, [sp, #32]
 800ff0a:	e7e1      	b.n	800fed0 <_strtod_l+0x218>
 800ff0c:	280f      	cmp	r0, #15
 800ff0e:	dceb      	bgt.n	800fee8 <_strtod_l+0x230>
 800ff10:	9808      	ldr	r0, [sp, #32]
 800ff12:	230a      	movs	r3, #10
 800ff14:	fb03 2300 	mla	r3, r3, r0, r2
 800ff18:	9308      	str	r3, [sp, #32]
 800ff1a:	e7e5      	b.n	800fee8 <_strtod_l+0x230>
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff20:	460d      	mov	r5, r1
 800ff22:	1c50      	adds	r0, r2, #1
 800ff24:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff26:	4618      	mov	r0, r3
 800ff28:	7852      	ldrb	r2, [r2, #1]
 800ff2a:	e7b1      	b.n	800fe90 <_strtod_l+0x1d8>
 800ff2c:	f04f 0900 	mov.w	r9, #0
 800ff30:	2301      	movs	r3, #1
 800ff32:	e77c      	b.n	800fe2e <_strtod_l+0x176>
 800ff34:	f04f 0c00 	mov.w	ip, #0
 800ff38:	1ca2      	adds	r2, r4, #2
 800ff3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff3c:	78a2      	ldrb	r2, [r4, #2]
 800ff3e:	e784      	b.n	800fe4a <_strtod_l+0x192>
 800ff40:	f04f 0c01 	mov.w	ip, #1
 800ff44:	e7f8      	b.n	800ff38 <_strtod_l+0x280>
 800ff46:	bf00      	nop
 800ff48:	08014838 	.word	0x08014838
 800ff4c:	08014820 	.word	0x08014820
 800ff50:	7ff00000 	.word	0x7ff00000
 800ff54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff56:	1c51      	adds	r1, r2, #1
 800ff58:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff5a:	7852      	ldrb	r2, [r2, #1]
 800ff5c:	2a30      	cmp	r2, #48	@ 0x30
 800ff5e:	d0f9      	beq.n	800ff54 <_strtod_l+0x29c>
 800ff60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff64:	2908      	cmp	r1, #8
 800ff66:	f63f af76 	bhi.w	800fe56 <_strtod_l+0x19e>
 800ff6a:	3a30      	subs	r2, #48	@ 0x30
 800ff6c:	f04f 080a 	mov.w	r8, #10
 800ff70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff78:	1c56      	adds	r6, r2, #1
 800ff7a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff7c:	7852      	ldrb	r2, [r2, #1]
 800ff7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff82:	f1be 0f09 	cmp.w	lr, #9
 800ff86:	d939      	bls.n	800fffc <_strtod_l+0x344>
 800ff88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff8e:	1a76      	subs	r6, r6, r1
 800ff90:	2e08      	cmp	r6, #8
 800ff92:	dc03      	bgt.n	800ff9c <_strtod_l+0x2e4>
 800ff94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff96:	4588      	cmp	r8, r1
 800ff98:	bfa8      	it	ge
 800ff9a:	4688      	movge	r8, r1
 800ff9c:	f1bc 0f00 	cmp.w	ip, #0
 800ffa0:	d001      	beq.n	800ffa6 <_strtod_l+0x2ee>
 800ffa2:	f1c8 0800 	rsb	r8, r8, #0
 800ffa6:	2d00      	cmp	r5, #0
 800ffa8:	d14e      	bne.n	8010048 <_strtod_l+0x390>
 800ffaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffac:	4308      	orrs	r0, r1
 800ffae:	f47f aebc 	bne.w	800fd2a <_strtod_l+0x72>
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f47f aed4 	bne.w	800fd60 <_strtod_l+0xa8>
 800ffb8:	2a69      	cmp	r2, #105	@ 0x69
 800ffba:	d028      	beq.n	801000e <_strtod_l+0x356>
 800ffbc:	dc25      	bgt.n	801000a <_strtod_l+0x352>
 800ffbe:	2a49      	cmp	r2, #73	@ 0x49
 800ffc0:	d025      	beq.n	801000e <_strtod_l+0x356>
 800ffc2:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffc4:	f47f aecc 	bne.w	800fd60 <_strtod_l+0xa8>
 800ffc8:	499b      	ldr	r1, [pc, #620]	@ (8010238 <_strtod_l+0x580>)
 800ffca:	a819      	add	r0, sp, #100	@ 0x64
 800ffcc:	f001 f960 	bl	8011290 <__match>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	f43f aec5 	beq.w	800fd60 <_strtod_l+0xa8>
 800ffd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	2b28      	cmp	r3, #40	@ 0x28
 800ffdc:	d12e      	bne.n	801003c <_strtod_l+0x384>
 800ffde:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffe0:	4996      	ldr	r1, [pc, #600]	@ (801023c <_strtod_l+0x584>)
 800ffe2:	a819      	add	r0, sp, #100	@ 0x64
 800ffe4:	f001 f968 	bl	80112b8 <__hexnan>
 800ffe8:	2805      	cmp	r0, #5
 800ffea:	d127      	bne.n	801003c <_strtod_l+0x384>
 800ffec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fff2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fff6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fffa:	e696      	b.n	800fd2a <_strtod_l+0x72>
 800fffc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fffe:	fb08 2101 	mla	r1, r8, r1, r2
 8010002:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010006:	920e      	str	r2, [sp, #56]	@ 0x38
 8010008:	e7b5      	b.n	800ff76 <_strtod_l+0x2be>
 801000a:	2a6e      	cmp	r2, #110	@ 0x6e
 801000c:	e7da      	b.n	800ffc4 <_strtod_l+0x30c>
 801000e:	498c      	ldr	r1, [pc, #560]	@ (8010240 <_strtod_l+0x588>)
 8010010:	a819      	add	r0, sp, #100	@ 0x64
 8010012:	f001 f93d 	bl	8011290 <__match>
 8010016:	2800      	cmp	r0, #0
 8010018:	f43f aea2 	beq.w	800fd60 <_strtod_l+0xa8>
 801001c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801001e:	a819      	add	r0, sp, #100	@ 0x64
 8010020:	4988      	ldr	r1, [pc, #544]	@ (8010244 <_strtod_l+0x58c>)
 8010022:	3b01      	subs	r3, #1
 8010024:	9319      	str	r3, [sp, #100]	@ 0x64
 8010026:	f001 f933 	bl	8011290 <__match>
 801002a:	b910      	cbnz	r0, 8010032 <_strtod_l+0x37a>
 801002c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801002e:	3301      	adds	r3, #1
 8010030:	9319      	str	r3, [sp, #100]	@ 0x64
 8010032:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010254 <_strtod_l+0x59c>
 8010036:	f04f 0a00 	mov.w	sl, #0
 801003a:	e676      	b.n	800fd2a <_strtod_l+0x72>
 801003c:	4882      	ldr	r0, [pc, #520]	@ (8010248 <_strtod_l+0x590>)
 801003e:	f000 fe67 	bl	8010d10 <nan>
 8010042:	ec5b ab10 	vmov	sl, fp, d0
 8010046:	e670      	b.n	800fd2a <_strtod_l+0x72>
 8010048:	eba8 0309 	sub.w	r3, r8, r9
 801004c:	2f00      	cmp	r7, #0
 801004e:	bf08      	it	eq
 8010050:	462f      	moveq	r7, r5
 8010052:	2d10      	cmp	r5, #16
 8010054:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010056:	462c      	mov	r4, r5
 8010058:	9309      	str	r3, [sp, #36]	@ 0x24
 801005a:	bfa8      	it	ge
 801005c:	2410      	movge	r4, #16
 801005e:	f7f0 fa65 	bl	800052c <__aeabi_ui2d>
 8010062:	2d09      	cmp	r5, #9
 8010064:	4682      	mov	sl, r0
 8010066:	468b      	mov	fp, r1
 8010068:	dc13      	bgt.n	8010092 <_strtod_l+0x3da>
 801006a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801006c:	2b00      	cmp	r3, #0
 801006e:	f43f ae5c 	beq.w	800fd2a <_strtod_l+0x72>
 8010072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010074:	dd78      	ble.n	8010168 <_strtod_l+0x4b0>
 8010076:	2b16      	cmp	r3, #22
 8010078:	dc5f      	bgt.n	801013a <_strtod_l+0x482>
 801007a:	4974      	ldr	r1, [pc, #464]	@ (801024c <_strtod_l+0x594>)
 801007c:	4652      	mov	r2, sl
 801007e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010082:	465b      	mov	r3, fp
 8010084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010088:	f7f0 faca 	bl	8000620 <__aeabi_dmul>
 801008c:	4682      	mov	sl, r0
 801008e:	468b      	mov	fp, r1
 8010090:	e64b      	b.n	800fd2a <_strtod_l+0x72>
 8010092:	4b6e      	ldr	r3, [pc, #440]	@ (801024c <_strtod_l+0x594>)
 8010094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010098:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801009c:	f7f0 fac0 	bl	8000620 <__aeabi_dmul>
 80100a0:	4682      	mov	sl, r0
 80100a2:	468b      	mov	fp, r1
 80100a4:	9808      	ldr	r0, [sp, #32]
 80100a6:	f7f0 fa41 	bl	800052c <__aeabi_ui2d>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4650      	mov	r0, sl
 80100b0:	4659      	mov	r1, fp
 80100b2:	f7f0 f8ff 	bl	80002b4 <__adddf3>
 80100b6:	2d0f      	cmp	r5, #15
 80100b8:	4682      	mov	sl, r0
 80100ba:	468b      	mov	fp, r1
 80100bc:	ddd5      	ble.n	801006a <_strtod_l+0x3b2>
 80100be:	1b2c      	subs	r4, r5, r4
 80100c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100c2:	441c      	add	r4, r3
 80100c4:	2c00      	cmp	r4, #0
 80100c6:	f340 8096 	ble.w	80101f6 <_strtod_l+0x53e>
 80100ca:	f014 030f 	ands.w	r3, r4, #15
 80100ce:	d00a      	beq.n	80100e6 <_strtod_l+0x42e>
 80100d0:	495e      	ldr	r1, [pc, #376]	@ (801024c <_strtod_l+0x594>)
 80100d2:	4652      	mov	r2, sl
 80100d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100d8:	465b      	mov	r3, fp
 80100da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100de:	f7f0 fa9f 	bl	8000620 <__aeabi_dmul>
 80100e2:	4682      	mov	sl, r0
 80100e4:	468b      	mov	fp, r1
 80100e6:	f034 040f 	bics.w	r4, r4, #15
 80100ea:	d073      	beq.n	80101d4 <_strtod_l+0x51c>
 80100ec:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100f0:	dd48      	ble.n	8010184 <_strtod_l+0x4cc>
 80100f2:	2400      	movs	r4, #0
 80100f4:	46a0      	mov	r8, r4
 80100f6:	46a1      	mov	r9, r4
 80100f8:	940a      	str	r4, [sp, #40]	@ 0x28
 80100fa:	2322      	movs	r3, #34	@ 0x22
 80100fc:	9a05      	ldr	r2, [sp, #20]
 80100fe:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010254 <_strtod_l+0x59c>
 8010102:	f04f 0a00 	mov.w	sl, #0
 8010106:	6013      	str	r3, [r2, #0]
 8010108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801010a:	2b00      	cmp	r3, #0
 801010c:	f43f ae0d 	beq.w	800fd2a <_strtod_l+0x72>
 8010110:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010112:	9805      	ldr	r0, [sp, #20]
 8010114:	f7ff f934 	bl	800f380 <_Bfree>
 8010118:	4649      	mov	r1, r9
 801011a:	9805      	ldr	r0, [sp, #20]
 801011c:	f7ff f930 	bl	800f380 <_Bfree>
 8010120:	4641      	mov	r1, r8
 8010122:	9805      	ldr	r0, [sp, #20]
 8010124:	f7ff f92c 	bl	800f380 <_Bfree>
 8010128:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801012a:	9805      	ldr	r0, [sp, #20]
 801012c:	f7ff f928 	bl	800f380 <_Bfree>
 8010130:	4621      	mov	r1, r4
 8010132:	9805      	ldr	r0, [sp, #20]
 8010134:	f7ff f924 	bl	800f380 <_Bfree>
 8010138:	e5f7      	b.n	800fd2a <_strtod_l+0x72>
 801013a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801013e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010140:	4293      	cmp	r3, r2
 8010142:	dbbc      	blt.n	80100be <_strtod_l+0x406>
 8010144:	f1c5 050f 	rsb	r5, r5, #15
 8010148:	4c40      	ldr	r4, [pc, #256]	@ (801024c <_strtod_l+0x594>)
 801014a:	4652      	mov	r2, sl
 801014c:	465b      	mov	r3, fp
 801014e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010156:	f7f0 fa63 	bl	8000620 <__aeabi_dmul>
 801015a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801015c:	1b5d      	subs	r5, r3, r5
 801015e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010162:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010166:	e78f      	b.n	8010088 <_strtod_l+0x3d0>
 8010168:	3316      	adds	r3, #22
 801016a:	dba8      	blt.n	80100be <_strtod_l+0x406>
 801016c:	eba9 0808 	sub.w	r8, r9, r8
 8010170:	4b36      	ldr	r3, [pc, #216]	@ (801024c <_strtod_l+0x594>)
 8010172:	4650      	mov	r0, sl
 8010174:	4659      	mov	r1, fp
 8010176:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801017a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801017e:	f7f0 fb79 	bl	8000874 <__aeabi_ddiv>
 8010182:	e783      	b.n	801008c <_strtod_l+0x3d4>
 8010184:	4b32      	ldr	r3, [pc, #200]	@ (8010250 <_strtod_l+0x598>)
 8010186:	1124      	asrs	r4, r4, #4
 8010188:	4650      	mov	r0, sl
 801018a:	4659      	mov	r1, fp
 801018c:	9308      	str	r3, [sp, #32]
 801018e:	2300      	movs	r3, #0
 8010190:	461e      	mov	r6, r3
 8010192:	2c01      	cmp	r4, #1
 8010194:	dc21      	bgt.n	80101da <_strtod_l+0x522>
 8010196:	b10b      	cbz	r3, 801019c <_strtod_l+0x4e4>
 8010198:	4682      	mov	sl, r0
 801019a:	468b      	mov	fp, r1
 801019c:	492c      	ldr	r1, [pc, #176]	@ (8010250 <_strtod_l+0x598>)
 801019e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80101a2:	4652      	mov	r2, sl
 80101a4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80101a8:	465b      	mov	r3, fp
 80101aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101ae:	f7f0 fa37 	bl	8000620 <__aeabi_dmul>
 80101b2:	4b28      	ldr	r3, [pc, #160]	@ (8010254 <_strtod_l+0x59c>)
 80101b4:	460a      	mov	r2, r1
 80101b6:	4682      	mov	sl, r0
 80101b8:	400b      	ands	r3, r1
 80101ba:	4927      	ldr	r1, [pc, #156]	@ (8010258 <_strtod_l+0x5a0>)
 80101bc:	428b      	cmp	r3, r1
 80101be:	d898      	bhi.n	80100f2 <_strtod_l+0x43a>
 80101c0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101c4:	428b      	cmp	r3, r1
 80101c6:	bf86      	itte	hi
 80101c8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801025c <_strtod_l+0x5a4>
 80101cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80101d0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101d4:	2300      	movs	r3, #0
 80101d6:	9308      	str	r3, [sp, #32]
 80101d8:	e07a      	b.n	80102d0 <_strtod_l+0x618>
 80101da:	07e2      	lsls	r2, r4, #31
 80101dc:	d505      	bpl.n	80101ea <_strtod_l+0x532>
 80101de:	9b08      	ldr	r3, [sp, #32]
 80101e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e4:	f7f0 fa1c 	bl	8000620 <__aeabi_dmul>
 80101e8:	2301      	movs	r3, #1
 80101ea:	9a08      	ldr	r2, [sp, #32]
 80101ec:	3601      	adds	r6, #1
 80101ee:	1064      	asrs	r4, r4, #1
 80101f0:	3208      	adds	r2, #8
 80101f2:	9208      	str	r2, [sp, #32]
 80101f4:	e7cd      	b.n	8010192 <_strtod_l+0x4da>
 80101f6:	d0ed      	beq.n	80101d4 <_strtod_l+0x51c>
 80101f8:	4264      	negs	r4, r4
 80101fa:	f014 020f 	ands.w	r2, r4, #15
 80101fe:	d00a      	beq.n	8010216 <_strtod_l+0x55e>
 8010200:	4b12      	ldr	r3, [pc, #72]	@ (801024c <_strtod_l+0x594>)
 8010202:	4650      	mov	r0, sl
 8010204:	4659      	mov	r1, fp
 8010206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	f7f0 fb31 	bl	8000874 <__aeabi_ddiv>
 8010212:	4682      	mov	sl, r0
 8010214:	468b      	mov	fp, r1
 8010216:	1124      	asrs	r4, r4, #4
 8010218:	d0dc      	beq.n	80101d4 <_strtod_l+0x51c>
 801021a:	2c1f      	cmp	r4, #31
 801021c:	dd20      	ble.n	8010260 <_strtod_l+0x5a8>
 801021e:	2400      	movs	r4, #0
 8010220:	46a0      	mov	r8, r4
 8010222:	46a1      	mov	r9, r4
 8010224:	940a      	str	r4, [sp, #40]	@ 0x28
 8010226:	2322      	movs	r3, #34	@ 0x22
 8010228:	9a05      	ldr	r2, [sp, #20]
 801022a:	f04f 0a00 	mov.w	sl, #0
 801022e:	f04f 0b00 	mov.w	fp, #0
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	e768      	b.n	8010108 <_strtod_l+0x450>
 8010236:	bf00      	nop
 8010238:	0801460e 	.word	0x0801460e
 801023c:	08014824 	.word	0x08014824
 8010240:	08014606 	.word	0x08014606
 8010244:	0801463d 	.word	0x0801463d
 8010248:	080148cc 	.word	0x080148cc
 801024c:	08014758 	.word	0x08014758
 8010250:	08014730 	.word	0x08014730
 8010254:	7ff00000 	.word	0x7ff00000
 8010258:	7ca00000 	.word	0x7ca00000
 801025c:	7fefffff 	.word	0x7fefffff
 8010260:	f014 0310 	ands.w	r3, r4, #16
 8010264:	4650      	mov	r0, sl
 8010266:	4659      	mov	r1, fp
 8010268:	4ea9      	ldr	r6, [pc, #676]	@ (8010510 <_strtod_l+0x858>)
 801026a:	bf18      	it	ne
 801026c:	236a      	movne	r3, #106	@ 0x6a
 801026e:	9308      	str	r3, [sp, #32]
 8010270:	2300      	movs	r3, #0
 8010272:	07e2      	lsls	r2, r4, #31
 8010274:	d504      	bpl.n	8010280 <_strtod_l+0x5c8>
 8010276:	e9d6 2300 	ldrd	r2, r3, [r6]
 801027a:	f7f0 f9d1 	bl	8000620 <__aeabi_dmul>
 801027e:	2301      	movs	r3, #1
 8010280:	1064      	asrs	r4, r4, #1
 8010282:	f106 0608 	add.w	r6, r6, #8
 8010286:	d1f4      	bne.n	8010272 <_strtod_l+0x5ba>
 8010288:	b10b      	cbz	r3, 801028e <_strtod_l+0x5d6>
 801028a:	4682      	mov	sl, r0
 801028c:	468b      	mov	fp, r1
 801028e:	9b08      	ldr	r3, [sp, #32]
 8010290:	b1b3      	cbz	r3, 80102c0 <_strtod_l+0x608>
 8010292:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010296:	4659      	mov	r1, fp
 8010298:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801029c:	2b00      	cmp	r3, #0
 801029e:	dd0f      	ble.n	80102c0 <_strtod_l+0x608>
 80102a0:	2b1f      	cmp	r3, #31
 80102a2:	dd55      	ble.n	8010350 <_strtod_l+0x698>
 80102a4:	2b34      	cmp	r3, #52	@ 0x34
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	bfdb      	ittet	le
 80102ac:	f04f 33ff 	movle.w	r3, #4294967295
 80102b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102b8:	4093      	lslle	r3, r2
 80102ba:	bfd8      	it	le
 80102bc:	ea03 0b01 	andle.w	fp, r3, r1
 80102c0:	2200      	movs	r2, #0
 80102c2:	2300      	movs	r3, #0
 80102c4:	4650      	mov	r0, sl
 80102c6:	4659      	mov	r1, fp
 80102c8:	f7f0 fc12 	bl	8000af0 <__aeabi_dcmpeq>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d1a6      	bne.n	801021e <_strtod_l+0x566>
 80102d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102d2:	463a      	mov	r2, r7
 80102d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	462b      	mov	r3, r5
 80102da:	9805      	ldr	r0, [sp, #20]
 80102dc:	f7ff f8ba 	bl	800f454 <__s2b>
 80102e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80102e2:	2800      	cmp	r0, #0
 80102e4:	f43f af05 	beq.w	80100f2 <_strtod_l+0x43a>
 80102e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102ea:	eba9 0308 	sub.w	r3, r9, r8
 80102ee:	2400      	movs	r4, #0
 80102f0:	2a00      	cmp	r2, #0
 80102f2:	46a0      	mov	r8, r4
 80102f4:	bfa8      	it	ge
 80102f6:	2300      	movge	r3, #0
 80102f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80102fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102fe:	9316      	str	r3, [sp, #88]	@ 0x58
 8010300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010302:	9805      	ldr	r0, [sp, #20]
 8010304:	6859      	ldr	r1, [r3, #4]
 8010306:	f7fe fffb 	bl	800f300 <_Balloc>
 801030a:	4681      	mov	r9, r0
 801030c:	2800      	cmp	r0, #0
 801030e:	f43f aef4 	beq.w	80100fa <_strtod_l+0x442>
 8010312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010314:	300c      	adds	r0, #12
 8010316:	691a      	ldr	r2, [r3, #16]
 8010318:	f103 010c 	add.w	r1, r3, #12
 801031c:	3202      	adds	r2, #2
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	f7fe f889 	bl	800e436 <memcpy>
 8010324:	aa1c      	add	r2, sp, #112	@ 0x70
 8010326:	a91b      	add	r1, sp, #108	@ 0x6c
 8010328:	9805      	ldr	r0, [sp, #20]
 801032a:	ec4b ab10 	vmov	d0, sl, fp
 801032e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010332:	f7ff fbd3 	bl	800fadc <__d2b>
 8010336:	901a      	str	r0, [sp, #104]	@ 0x68
 8010338:	2800      	cmp	r0, #0
 801033a:	f43f aede 	beq.w	80100fa <_strtod_l+0x442>
 801033e:	2101      	movs	r1, #1
 8010340:	9805      	ldr	r0, [sp, #20]
 8010342:	f7ff f91d 	bl	800f580 <__i2b>
 8010346:	4680      	mov	r8, r0
 8010348:	b948      	cbnz	r0, 801035e <_strtod_l+0x6a6>
 801034a:	f04f 0800 	mov.w	r8, #0
 801034e:	e6d4      	b.n	80100fa <_strtod_l+0x442>
 8010350:	f04f 32ff 	mov.w	r2, #4294967295
 8010354:	fa02 f303 	lsl.w	r3, r2, r3
 8010358:	ea03 0a0a 	and.w	sl, r3, sl
 801035c:	e7b0      	b.n	80102c0 <_strtod_l+0x608>
 801035e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010360:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010362:	2d00      	cmp	r5, #0
 8010364:	bfa9      	itett	ge
 8010366:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010368:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801036a:	18ef      	addge	r7, r5, r3
 801036c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801036e:	bfb8      	it	lt
 8010370:	1b5e      	sublt	r6, r3, r5
 8010372:	9b08      	ldr	r3, [sp, #32]
 8010374:	bfb8      	it	lt
 8010376:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010378:	1aed      	subs	r5, r5, r3
 801037a:	4b66      	ldr	r3, [pc, #408]	@ (8010514 <_strtod_l+0x85c>)
 801037c:	4415      	add	r5, r2
 801037e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010382:	3d01      	subs	r5, #1
 8010384:	429d      	cmp	r5, r3
 8010386:	da4f      	bge.n	8010428 <_strtod_l+0x770>
 8010388:	1b5b      	subs	r3, r3, r5
 801038a:	2101      	movs	r1, #1
 801038c:	2b1f      	cmp	r3, #31
 801038e:	eba2 0203 	sub.w	r2, r2, r3
 8010392:	dc3d      	bgt.n	8010410 <_strtod_l+0x758>
 8010394:	fa01 f303 	lsl.w	r3, r1, r3
 8010398:	9313      	str	r3, [sp, #76]	@ 0x4c
 801039a:	2300      	movs	r3, #0
 801039c:	9310      	str	r3, [sp, #64]	@ 0x40
 801039e:	18bd      	adds	r5, r7, r2
 80103a0:	9b08      	ldr	r3, [sp, #32]
 80103a2:	4416      	add	r6, r2
 80103a4:	42af      	cmp	r7, r5
 80103a6:	441e      	add	r6, r3
 80103a8:	463b      	mov	r3, r7
 80103aa:	bfa8      	it	ge
 80103ac:	462b      	movge	r3, r5
 80103ae:	42b3      	cmp	r3, r6
 80103b0:	bfa8      	it	ge
 80103b2:	4633      	movge	r3, r6
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	bfc2      	ittt	gt
 80103b8:	1aed      	subgt	r5, r5, r3
 80103ba:	1af6      	subgt	r6, r6, r3
 80103bc:	1aff      	subgt	r7, r7, r3
 80103be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dd16      	ble.n	80103f2 <_strtod_l+0x73a>
 80103c4:	4641      	mov	r1, r8
 80103c6:	461a      	mov	r2, r3
 80103c8:	9805      	ldr	r0, [sp, #20]
 80103ca:	f7ff f999 	bl	800f700 <__pow5mult>
 80103ce:	4680      	mov	r8, r0
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d0ba      	beq.n	801034a <_strtod_l+0x692>
 80103d4:	4601      	mov	r1, r0
 80103d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103d8:	9805      	ldr	r0, [sp, #20]
 80103da:	f7ff f8e7 	bl	800f5ac <__multiply>
 80103de:	900e      	str	r0, [sp, #56]	@ 0x38
 80103e0:	2800      	cmp	r0, #0
 80103e2:	f43f ae8a 	beq.w	80100fa <_strtod_l+0x442>
 80103e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103e8:	9805      	ldr	r0, [sp, #20]
 80103ea:	f7fe ffc9 	bl	800f380 <_Bfree>
 80103ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80103f2:	2d00      	cmp	r5, #0
 80103f4:	dc1d      	bgt.n	8010432 <_strtod_l+0x77a>
 80103f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	dd23      	ble.n	8010444 <_strtod_l+0x78c>
 80103fc:	4649      	mov	r1, r9
 80103fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010400:	9805      	ldr	r0, [sp, #20]
 8010402:	f7ff f97d 	bl	800f700 <__pow5mult>
 8010406:	4681      	mov	r9, r0
 8010408:	b9e0      	cbnz	r0, 8010444 <_strtod_l+0x78c>
 801040a:	f04f 0900 	mov.w	r9, #0
 801040e:	e674      	b.n	80100fa <_strtod_l+0x442>
 8010410:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010414:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010416:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801041a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801041e:	35e2      	adds	r5, #226	@ 0xe2
 8010420:	fa01 f305 	lsl.w	r3, r1, r5
 8010424:	9310      	str	r3, [sp, #64]	@ 0x40
 8010426:	e7ba      	b.n	801039e <_strtod_l+0x6e6>
 8010428:	2300      	movs	r3, #0
 801042a:	9310      	str	r3, [sp, #64]	@ 0x40
 801042c:	2301      	movs	r3, #1
 801042e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010430:	e7b5      	b.n	801039e <_strtod_l+0x6e6>
 8010432:	462a      	mov	r2, r5
 8010434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010436:	9805      	ldr	r0, [sp, #20]
 8010438:	f7ff f9bc 	bl	800f7b4 <__lshift>
 801043c:	901a      	str	r0, [sp, #104]	@ 0x68
 801043e:	2800      	cmp	r0, #0
 8010440:	d1d9      	bne.n	80103f6 <_strtod_l+0x73e>
 8010442:	e65a      	b.n	80100fa <_strtod_l+0x442>
 8010444:	2e00      	cmp	r6, #0
 8010446:	dd07      	ble.n	8010458 <_strtod_l+0x7a0>
 8010448:	4649      	mov	r1, r9
 801044a:	4632      	mov	r2, r6
 801044c:	9805      	ldr	r0, [sp, #20]
 801044e:	f7ff f9b1 	bl	800f7b4 <__lshift>
 8010452:	4681      	mov	r9, r0
 8010454:	2800      	cmp	r0, #0
 8010456:	d0d8      	beq.n	801040a <_strtod_l+0x752>
 8010458:	2f00      	cmp	r7, #0
 801045a:	dd08      	ble.n	801046e <_strtod_l+0x7b6>
 801045c:	4641      	mov	r1, r8
 801045e:	463a      	mov	r2, r7
 8010460:	9805      	ldr	r0, [sp, #20]
 8010462:	f7ff f9a7 	bl	800f7b4 <__lshift>
 8010466:	4680      	mov	r8, r0
 8010468:	2800      	cmp	r0, #0
 801046a:	f43f ae46 	beq.w	80100fa <_strtod_l+0x442>
 801046e:	464a      	mov	r2, r9
 8010470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010472:	9805      	ldr	r0, [sp, #20]
 8010474:	f7ff fa26 	bl	800f8c4 <__mdiff>
 8010478:	4604      	mov	r4, r0
 801047a:	2800      	cmp	r0, #0
 801047c:	f43f ae3d 	beq.w	80100fa <_strtod_l+0x442>
 8010480:	68c3      	ldr	r3, [r0, #12]
 8010482:	4641      	mov	r1, r8
 8010484:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010486:	2300      	movs	r3, #0
 8010488:	60c3      	str	r3, [r0, #12]
 801048a:	f7ff f9ff 	bl	800f88c <__mcmp>
 801048e:	2800      	cmp	r0, #0
 8010490:	da46      	bge.n	8010520 <_strtod_l+0x868>
 8010492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010494:	ea53 030a 	orrs.w	r3, r3, sl
 8010498:	d16c      	bne.n	8010574 <_strtod_l+0x8bc>
 801049a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d168      	bne.n	8010574 <_strtod_l+0x8bc>
 80104a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104a6:	0d1b      	lsrs	r3, r3, #20
 80104a8:	051b      	lsls	r3, r3, #20
 80104aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104ae:	d961      	bls.n	8010574 <_strtod_l+0x8bc>
 80104b0:	6963      	ldr	r3, [r4, #20]
 80104b2:	b913      	cbnz	r3, 80104ba <_strtod_l+0x802>
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	dd5c      	ble.n	8010574 <_strtod_l+0x8bc>
 80104ba:	4621      	mov	r1, r4
 80104bc:	2201      	movs	r2, #1
 80104be:	9805      	ldr	r0, [sp, #20]
 80104c0:	f7ff f978 	bl	800f7b4 <__lshift>
 80104c4:	4641      	mov	r1, r8
 80104c6:	4604      	mov	r4, r0
 80104c8:	f7ff f9e0 	bl	800f88c <__mcmp>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	dd51      	ble.n	8010574 <_strtod_l+0x8bc>
 80104d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104d4:	9a08      	ldr	r2, [sp, #32]
 80104d6:	0d1b      	lsrs	r3, r3, #20
 80104d8:	051b      	lsls	r3, r3, #20
 80104da:	2a00      	cmp	r2, #0
 80104dc:	d06b      	beq.n	80105b6 <_strtod_l+0x8fe>
 80104de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104e2:	d868      	bhi.n	80105b6 <_strtod_l+0x8fe>
 80104e4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104e8:	f67f ae9d 	bls.w	8010226 <_strtod_l+0x56e>
 80104ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010518 <_strtod_l+0x860>)
 80104ee:	4650      	mov	r0, sl
 80104f0:	4659      	mov	r1, fp
 80104f2:	2200      	movs	r2, #0
 80104f4:	f7f0 f894 	bl	8000620 <__aeabi_dmul>
 80104f8:	4b08      	ldr	r3, [pc, #32]	@ (801051c <_strtod_l+0x864>)
 80104fa:	4682      	mov	sl, r0
 80104fc:	468b      	mov	fp, r1
 80104fe:	400b      	ands	r3, r1
 8010500:	2b00      	cmp	r3, #0
 8010502:	f47f ae05 	bne.w	8010110 <_strtod_l+0x458>
 8010506:	2322      	movs	r3, #34	@ 0x22
 8010508:	9a05      	ldr	r2, [sp, #20]
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	e600      	b.n	8010110 <_strtod_l+0x458>
 801050e:	bf00      	nop
 8010510:	08014850 	.word	0x08014850
 8010514:	fffffc02 	.word	0xfffffc02
 8010518:	39500000 	.word	0x39500000
 801051c:	7ff00000 	.word	0x7ff00000
 8010520:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010524:	d165      	bne.n	80105f2 <_strtod_l+0x93a>
 8010526:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801052c:	b35a      	cbz	r2, 8010586 <_strtod_l+0x8ce>
 801052e:	4a9e      	ldr	r2, [pc, #632]	@ (80107a8 <_strtod_l+0xaf0>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d12b      	bne.n	801058c <_strtod_l+0x8d4>
 8010534:	9b08      	ldr	r3, [sp, #32]
 8010536:	4651      	mov	r1, sl
 8010538:	b303      	cbz	r3, 801057c <_strtod_l+0x8c4>
 801053a:	465a      	mov	r2, fp
 801053c:	4b9b      	ldr	r3, [pc, #620]	@ (80107ac <_strtod_l+0xaf4>)
 801053e:	4013      	ands	r3, r2
 8010540:	f04f 32ff 	mov.w	r2, #4294967295
 8010544:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010548:	d81b      	bhi.n	8010582 <_strtod_l+0x8ca>
 801054a:	0d1b      	lsrs	r3, r3, #20
 801054c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010550:	fa02 f303 	lsl.w	r3, r2, r3
 8010554:	4299      	cmp	r1, r3
 8010556:	d119      	bne.n	801058c <_strtod_l+0x8d4>
 8010558:	4b95      	ldr	r3, [pc, #596]	@ (80107b0 <_strtod_l+0xaf8>)
 801055a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801055c:	429a      	cmp	r2, r3
 801055e:	d102      	bne.n	8010566 <_strtod_l+0x8ae>
 8010560:	3101      	adds	r1, #1
 8010562:	f43f adca 	beq.w	80100fa <_strtod_l+0x442>
 8010566:	4b91      	ldr	r3, [pc, #580]	@ (80107ac <_strtod_l+0xaf4>)
 8010568:	f04f 0a00 	mov.w	sl, #0
 801056c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801056e:	401a      	ands	r2, r3
 8010570:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010574:	9b08      	ldr	r3, [sp, #32]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1b8      	bne.n	80104ec <_strtod_l+0x834>
 801057a:	e5c9      	b.n	8010110 <_strtod_l+0x458>
 801057c:	f04f 33ff 	mov.w	r3, #4294967295
 8010580:	e7e8      	b.n	8010554 <_strtod_l+0x89c>
 8010582:	4613      	mov	r3, r2
 8010584:	e7e6      	b.n	8010554 <_strtod_l+0x89c>
 8010586:	ea53 030a 	orrs.w	r3, r3, sl
 801058a:	d0a1      	beq.n	80104d0 <_strtod_l+0x818>
 801058c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801058e:	b1db      	cbz	r3, 80105c8 <_strtod_l+0x910>
 8010590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010592:	4213      	tst	r3, r2
 8010594:	d0ee      	beq.n	8010574 <_strtod_l+0x8bc>
 8010596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010598:	4650      	mov	r0, sl
 801059a:	9a08      	ldr	r2, [sp, #32]
 801059c:	4659      	mov	r1, fp
 801059e:	b1bb      	cbz	r3, 80105d0 <_strtod_l+0x918>
 80105a0:	f7ff fb6a 	bl	800fc78 <sulp>
 80105a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105a8:	ec53 2b10 	vmov	r2, r3, d0
 80105ac:	f7ef fe82 	bl	80002b4 <__adddf3>
 80105b0:	4682      	mov	sl, r0
 80105b2:	468b      	mov	fp, r1
 80105b4:	e7de      	b.n	8010574 <_strtod_l+0x8bc>
 80105b6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105ba:	f04f 3aff 	mov.w	sl, #4294967295
 80105be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105c6:	e7d5      	b.n	8010574 <_strtod_l+0x8bc>
 80105c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105ca:	ea13 0f0a 	tst.w	r3, sl
 80105ce:	e7e1      	b.n	8010594 <_strtod_l+0x8dc>
 80105d0:	f7ff fb52 	bl	800fc78 <sulp>
 80105d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105d8:	ec53 2b10 	vmov	r2, r3, d0
 80105dc:	f7ef fe68 	bl	80002b0 <__aeabi_dsub>
 80105e0:	2200      	movs	r2, #0
 80105e2:	2300      	movs	r3, #0
 80105e4:	4682      	mov	sl, r0
 80105e6:	468b      	mov	fp, r1
 80105e8:	f7f0 fa82 	bl	8000af0 <__aeabi_dcmpeq>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d0c1      	beq.n	8010574 <_strtod_l+0x8bc>
 80105f0:	e619      	b.n	8010226 <_strtod_l+0x56e>
 80105f2:	4641      	mov	r1, r8
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7ff fac9 	bl	800fb8c <__ratio>
 80105fa:	2200      	movs	r2, #0
 80105fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010600:	ec57 6b10 	vmov	r6, r7, d0
 8010604:	4630      	mov	r0, r6
 8010606:	4639      	mov	r1, r7
 8010608:	f7f0 fa86 	bl	8000b18 <__aeabi_dcmple>
 801060c:	2800      	cmp	r0, #0
 801060e:	d06f      	beq.n	80106f0 <_strtod_l+0xa38>
 8010610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d17a      	bne.n	801070c <_strtod_l+0xa54>
 8010616:	f1ba 0f00 	cmp.w	sl, #0
 801061a:	d158      	bne.n	80106ce <_strtod_l+0xa16>
 801061c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801061e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010622:	2b00      	cmp	r3, #0
 8010624:	d15a      	bne.n	80106dc <_strtod_l+0xa24>
 8010626:	2200      	movs	r2, #0
 8010628:	4b62      	ldr	r3, [pc, #392]	@ (80107b4 <_strtod_l+0xafc>)
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	f7f0 fa69 	bl	8000b04 <__aeabi_dcmplt>
 8010632:	2800      	cmp	r0, #0
 8010634:	d159      	bne.n	80106ea <_strtod_l+0xa32>
 8010636:	4630      	mov	r0, r6
 8010638:	4639      	mov	r1, r7
 801063a:	2200      	movs	r2, #0
 801063c:	4b5e      	ldr	r3, [pc, #376]	@ (80107b8 <_strtod_l+0xb00>)
 801063e:	f7ef ffef 	bl	8000620 <__aeabi_dmul>
 8010642:	4606      	mov	r6, r0
 8010644:	460f      	mov	r7, r1
 8010646:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801064a:	9606      	str	r6, [sp, #24]
 801064c:	9307      	str	r3, [sp, #28]
 801064e:	4d57      	ldr	r5, [pc, #348]	@ (80107ac <_strtod_l+0xaf4>)
 8010650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010654:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801065a:	401d      	ands	r5, r3
 801065c:	4b57      	ldr	r3, [pc, #348]	@ (80107bc <_strtod_l+0xb04>)
 801065e:	429d      	cmp	r5, r3
 8010660:	f040 80b0 	bne.w	80107c4 <_strtod_l+0xb0c>
 8010664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010666:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801066a:	ec4b ab10 	vmov	d0, sl, fp
 801066e:	f7ff f9c1 	bl	800f9f4 <__ulp>
 8010672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010676:	ec51 0b10 	vmov	r0, r1, d0
 801067a:	f7ef ffd1 	bl	8000620 <__aeabi_dmul>
 801067e:	4652      	mov	r2, sl
 8010680:	465b      	mov	r3, fp
 8010682:	f7ef fe17 	bl	80002b4 <__adddf3>
 8010686:	460b      	mov	r3, r1
 8010688:	4948      	ldr	r1, [pc, #288]	@ (80107ac <_strtod_l+0xaf4>)
 801068a:	4682      	mov	sl, r0
 801068c:	4a4c      	ldr	r2, [pc, #304]	@ (80107c0 <_strtod_l+0xb08>)
 801068e:	4019      	ands	r1, r3
 8010690:	4291      	cmp	r1, r2
 8010692:	d942      	bls.n	801071a <_strtod_l+0xa62>
 8010694:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010696:	4b46      	ldr	r3, [pc, #280]	@ (80107b0 <_strtod_l+0xaf8>)
 8010698:	429a      	cmp	r2, r3
 801069a:	d103      	bne.n	80106a4 <_strtod_l+0x9ec>
 801069c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801069e:	3301      	adds	r3, #1
 80106a0:	f43f ad2b 	beq.w	80100fa <_strtod_l+0x442>
 80106a4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 80107b0 <_strtod_l+0xaf8>
 80106a8:	f04f 3aff 	mov.w	sl, #4294967295
 80106ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106ae:	9805      	ldr	r0, [sp, #20]
 80106b0:	f7fe fe66 	bl	800f380 <_Bfree>
 80106b4:	4649      	mov	r1, r9
 80106b6:	9805      	ldr	r0, [sp, #20]
 80106b8:	f7fe fe62 	bl	800f380 <_Bfree>
 80106bc:	4641      	mov	r1, r8
 80106be:	9805      	ldr	r0, [sp, #20]
 80106c0:	f7fe fe5e 	bl	800f380 <_Bfree>
 80106c4:	4621      	mov	r1, r4
 80106c6:	9805      	ldr	r0, [sp, #20]
 80106c8:	f7fe fe5a 	bl	800f380 <_Bfree>
 80106cc:	e618      	b.n	8010300 <_strtod_l+0x648>
 80106ce:	f1ba 0f01 	cmp.w	sl, #1
 80106d2:	d103      	bne.n	80106dc <_strtod_l+0xa24>
 80106d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f43f ada5 	beq.w	8010226 <_strtod_l+0x56e>
 80106dc:	2600      	movs	r6, #0
 80106de:	4f35      	ldr	r7, [pc, #212]	@ (80107b4 <_strtod_l+0xafc>)
 80106e0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8010788 <_strtod_l+0xad0>
 80106e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106e8:	e7b1      	b.n	801064e <_strtod_l+0x996>
 80106ea:	2600      	movs	r6, #0
 80106ec:	4f32      	ldr	r7, [pc, #200]	@ (80107b8 <_strtod_l+0xb00>)
 80106ee:	e7aa      	b.n	8010646 <_strtod_l+0x98e>
 80106f0:	4b31      	ldr	r3, [pc, #196]	@ (80107b8 <_strtod_l+0xb00>)
 80106f2:	4630      	mov	r0, r6
 80106f4:	4639      	mov	r1, r7
 80106f6:	2200      	movs	r2, #0
 80106f8:	f7ef ff92 	bl	8000620 <__aeabi_dmul>
 80106fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106fe:	4606      	mov	r6, r0
 8010700:	460f      	mov	r7, r1
 8010702:	2b00      	cmp	r3, #0
 8010704:	d09f      	beq.n	8010646 <_strtod_l+0x98e>
 8010706:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801070a:	e7a0      	b.n	801064e <_strtod_l+0x996>
 801070c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8010790 <_strtod_l+0xad8>
 8010710:	ec57 6b17 	vmov	r6, r7, d7
 8010714:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010718:	e799      	b.n	801064e <_strtod_l+0x996>
 801071a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801071e:	9b08      	ldr	r3, [sp, #32]
 8010720:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010724:	2b00      	cmp	r3, #0
 8010726:	d1c1      	bne.n	80106ac <_strtod_l+0x9f4>
 8010728:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801072c:	0d1b      	lsrs	r3, r3, #20
 801072e:	051b      	lsls	r3, r3, #20
 8010730:	429d      	cmp	r5, r3
 8010732:	d1bb      	bne.n	80106ac <_strtod_l+0x9f4>
 8010734:	4630      	mov	r0, r6
 8010736:	4639      	mov	r1, r7
 8010738:	f7f0 fad2 	bl	8000ce0 <__aeabi_d2lz>
 801073c:	f7ef ff42 	bl	80005c4 <__aeabi_l2d>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	4630      	mov	r0, r6
 8010746:	4639      	mov	r1, r7
 8010748:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801074c:	f7ef fdb0 	bl	80002b0 <__aeabi_dsub>
 8010750:	460b      	mov	r3, r1
 8010752:	4602      	mov	r2, r0
 8010754:	ea46 060a 	orr.w	r6, r6, sl
 8010758:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801075c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801075e:	431e      	orrs	r6, r3
 8010760:	d06d      	beq.n	801083e <_strtod_l+0xb86>
 8010762:	a30d      	add	r3, pc, #52	@ (adr r3, 8010798 <_strtod_l+0xae0>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f7f0 f9cc 	bl	8000b04 <__aeabi_dcmplt>
 801076c:	2800      	cmp	r0, #0
 801076e:	f47f accf 	bne.w	8010110 <_strtod_l+0x458>
 8010772:	a30b      	add	r3, pc, #44	@ (adr r3, 80107a0 <_strtod_l+0xae8>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801077c:	f7f0 f9e0 	bl	8000b40 <__aeabi_dcmpgt>
 8010780:	2800      	cmp	r0, #0
 8010782:	d093      	beq.n	80106ac <_strtod_l+0x9f4>
 8010784:	e4c4      	b.n	8010110 <_strtod_l+0x458>
 8010786:	bf00      	nop
 8010788:	00000000 	.word	0x00000000
 801078c:	bff00000 	.word	0xbff00000
 8010790:	00000000 	.word	0x00000000
 8010794:	3ff00000 	.word	0x3ff00000
 8010798:	94a03595 	.word	0x94a03595
 801079c:	3fdfffff 	.word	0x3fdfffff
 80107a0:	35afe535 	.word	0x35afe535
 80107a4:	3fe00000 	.word	0x3fe00000
 80107a8:	000fffff 	.word	0x000fffff
 80107ac:	7ff00000 	.word	0x7ff00000
 80107b0:	7fefffff 	.word	0x7fefffff
 80107b4:	3ff00000 	.word	0x3ff00000
 80107b8:	3fe00000 	.word	0x3fe00000
 80107bc:	7fe00000 	.word	0x7fe00000
 80107c0:	7c9fffff 	.word	0x7c9fffff
 80107c4:	9b08      	ldr	r3, [sp, #32]
 80107c6:	b323      	cbz	r3, 8010812 <_strtod_l+0xb5a>
 80107c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107cc:	d821      	bhi.n	8010812 <_strtod_l+0xb5a>
 80107ce:	4630      	mov	r0, r6
 80107d0:	4639      	mov	r1, r7
 80107d2:	a327      	add	r3, pc, #156	@ (adr r3, 8010870 <_strtod_l+0xbb8>)
 80107d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d8:	f7f0 f99e 	bl	8000b18 <__aeabi_dcmple>
 80107dc:	b1a0      	cbz	r0, 8010808 <_strtod_l+0xb50>
 80107de:	4639      	mov	r1, r7
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7f0 f9f5 	bl	8000bd0 <__aeabi_d2uiz>
 80107e6:	2801      	cmp	r0, #1
 80107e8:	bf38      	it	cc
 80107ea:	2001      	movcc	r0, #1
 80107ec:	f7ef fe9e 	bl	800052c <__aeabi_ui2d>
 80107f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107f2:	4606      	mov	r6, r0
 80107f4:	460f      	mov	r7, r1
 80107f6:	b9fb      	cbnz	r3, 8010838 <_strtod_l+0xb80>
 80107f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80107fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8010800:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010804:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010808:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801080a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801080e:	1b5b      	subs	r3, r3, r5
 8010810:	9311      	str	r3, [sp, #68]	@ 0x44
 8010812:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010816:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801081a:	f7ff f8eb 	bl	800f9f4 <__ulp>
 801081e:	4650      	mov	r0, sl
 8010820:	4659      	mov	r1, fp
 8010822:	ec53 2b10 	vmov	r2, r3, d0
 8010826:	f7ef fefb 	bl	8000620 <__aeabi_dmul>
 801082a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801082e:	f7ef fd41 	bl	80002b4 <__adddf3>
 8010832:	4682      	mov	sl, r0
 8010834:	468b      	mov	fp, r1
 8010836:	e772      	b.n	801071e <_strtod_l+0xa66>
 8010838:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801083c:	e7e0      	b.n	8010800 <_strtod_l+0xb48>
 801083e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010878 <_strtod_l+0xbc0>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f7f0 f95e 	bl	8000b04 <__aeabi_dcmplt>
 8010848:	e79a      	b.n	8010780 <_strtod_l+0xac8>
 801084a:	2300      	movs	r3, #0
 801084c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801084e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010850:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010852:	6013      	str	r3, [r2, #0]
 8010854:	f7ff ba6d 	b.w	800fd32 <_strtod_l+0x7a>
 8010858:	2a65      	cmp	r2, #101	@ 0x65
 801085a:	f43f ab67 	beq.w	800ff2c <_strtod_l+0x274>
 801085e:	2a45      	cmp	r2, #69	@ 0x45
 8010860:	f43f ab64 	beq.w	800ff2c <_strtod_l+0x274>
 8010864:	2301      	movs	r3, #1
 8010866:	f7ff bba0 	b.w	800ffaa <_strtod_l+0x2f2>
 801086a:	bf00      	nop
 801086c:	f3af 8000 	nop.w
 8010870:	ffc00000 	.word	0xffc00000
 8010874:	41dfffff 	.word	0x41dfffff
 8010878:	94a03595 	.word	0x94a03595
 801087c:	3fcfffff 	.word	0x3fcfffff

08010880 <_strtod_r>:
 8010880:	4b01      	ldr	r3, [pc, #4]	@ (8010888 <_strtod_r+0x8>)
 8010882:	f7ff ba19 	b.w	800fcb8 <_strtod_l>
 8010886:	bf00      	nop
 8010888:	20000084 	.word	0x20000084

0801088c <__ssputs_r>:
 801088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010890:	461f      	mov	r7, r3
 8010892:	688e      	ldr	r6, [r1, #8]
 8010894:	4682      	mov	sl, r0
 8010896:	460c      	mov	r4, r1
 8010898:	42be      	cmp	r6, r7
 801089a:	4690      	mov	r8, r2
 801089c:	680b      	ldr	r3, [r1, #0]
 801089e:	d82d      	bhi.n	80108fc <__ssputs_r+0x70>
 80108a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80108a8:	d026      	beq.n	80108f8 <__ssputs_r+0x6c>
 80108aa:	6965      	ldr	r5, [r4, #20]
 80108ac:	6909      	ldr	r1, [r1, #16]
 80108ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108b2:	eba3 0901 	sub.w	r9, r3, r1
 80108b6:	1c7b      	adds	r3, r7, #1
 80108b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108bc:	444b      	add	r3, r9
 80108be:	106d      	asrs	r5, r5, #1
 80108c0:	429d      	cmp	r5, r3
 80108c2:	bf38      	it	cc
 80108c4:	461d      	movcc	r5, r3
 80108c6:	0553      	lsls	r3, r2, #21
 80108c8:	d527      	bpl.n	801091a <__ssputs_r+0x8e>
 80108ca:	4629      	mov	r1, r5
 80108cc:	f7fe fc8c 	bl	800f1e8 <_malloc_r>
 80108d0:	4606      	mov	r6, r0
 80108d2:	b360      	cbz	r0, 801092e <__ssputs_r+0xa2>
 80108d4:	464a      	mov	r2, r9
 80108d6:	6921      	ldr	r1, [r4, #16]
 80108d8:	f7fd fdad 	bl	800e436 <memcpy>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80108e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	6126      	str	r6, [r4, #16]
 80108ea:	444e      	add	r6, r9
 80108ec:	6165      	str	r5, [r4, #20]
 80108ee:	eba5 0509 	sub.w	r5, r5, r9
 80108f2:	6026      	str	r6, [r4, #0]
 80108f4:	463e      	mov	r6, r7
 80108f6:	60a5      	str	r5, [r4, #8]
 80108f8:	42be      	cmp	r6, r7
 80108fa:	d900      	bls.n	80108fe <__ssputs_r+0x72>
 80108fc:	463e      	mov	r6, r7
 80108fe:	4632      	mov	r2, r6
 8010900:	4641      	mov	r1, r8
 8010902:	6820      	ldr	r0, [r4, #0]
 8010904:	f000 f9c6 	bl	8010c94 <memmove>
 8010908:	68a3      	ldr	r3, [r4, #8]
 801090a:	2000      	movs	r0, #0
 801090c:	1b9b      	subs	r3, r3, r6
 801090e:	60a3      	str	r3, [r4, #8]
 8010910:	6823      	ldr	r3, [r4, #0]
 8010912:	4433      	add	r3, r6
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801091a:	462a      	mov	r2, r5
 801091c:	f000 fd79 	bl	8011412 <_realloc_r>
 8010920:	4606      	mov	r6, r0
 8010922:	2800      	cmp	r0, #0
 8010924:	d1e0      	bne.n	80108e8 <__ssputs_r+0x5c>
 8010926:	6921      	ldr	r1, [r4, #16]
 8010928:	4650      	mov	r0, sl
 801092a:	f7fe fbe9 	bl	800f100 <_free_r>
 801092e:	230c      	movs	r3, #12
 8010930:	f04f 30ff 	mov.w	r0, #4294967295
 8010934:	f8ca 3000 	str.w	r3, [sl]
 8010938:	89a3      	ldrh	r3, [r4, #12]
 801093a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	e7e9      	b.n	8010916 <__ssputs_r+0x8a>
	...

08010944 <_svfiprintf_r>:
 8010944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	4698      	mov	r8, r3
 801094a:	898b      	ldrh	r3, [r1, #12]
 801094c:	b09d      	sub	sp, #116	@ 0x74
 801094e:	4607      	mov	r7, r0
 8010950:	061b      	lsls	r3, r3, #24
 8010952:	460d      	mov	r5, r1
 8010954:	4614      	mov	r4, r2
 8010956:	d510      	bpl.n	801097a <_svfiprintf_r+0x36>
 8010958:	690b      	ldr	r3, [r1, #16]
 801095a:	b973      	cbnz	r3, 801097a <_svfiprintf_r+0x36>
 801095c:	2140      	movs	r1, #64	@ 0x40
 801095e:	f7fe fc43 	bl	800f1e8 <_malloc_r>
 8010962:	6028      	str	r0, [r5, #0]
 8010964:	6128      	str	r0, [r5, #16]
 8010966:	b930      	cbnz	r0, 8010976 <_svfiprintf_r+0x32>
 8010968:	230c      	movs	r3, #12
 801096a:	603b      	str	r3, [r7, #0]
 801096c:	f04f 30ff 	mov.w	r0, #4294967295
 8010970:	b01d      	add	sp, #116	@ 0x74
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010976:	2340      	movs	r3, #64	@ 0x40
 8010978:	616b      	str	r3, [r5, #20]
 801097a:	2300      	movs	r3, #0
 801097c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010980:	f04f 0901 	mov.w	r9, #1
 8010984:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010b28 <_svfiprintf_r+0x1e4>
 8010988:	9309      	str	r3, [sp, #36]	@ 0x24
 801098a:	2320      	movs	r3, #32
 801098c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010990:	2330      	movs	r3, #48	@ 0x30
 8010992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010996:	4623      	mov	r3, r4
 8010998:	469a      	mov	sl, r3
 801099a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801099e:	b10a      	cbz	r2, 80109a4 <_svfiprintf_r+0x60>
 80109a0:	2a25      	cmp	r2, #37	@ 0x25
 80109a2:	d1f9      	bne.n	8010998 <_svfiprintf_r+0x54>
 80109a4:	ebba 0b04 	subs.w	fp, sl, r4
 80109a8:	d00b      	beq.n	80109c2 <_svfiprintf_r+0x7e>
 80109aa:	465b      	mov	r3, fp
 80109ac:	4622      	mov	r2, r4
 80109ae:	4629      	mov	r1, r5
 80109b0:	4638      	mov	r0, r7
 80109b2:	f7ff ff6b 	bl	801088c <__ssputs_r>
 80109b6:	3001      	adds	r0, #1
 80109b8:	f000 80a7 	beq.w	8010b0a <_svfiprintf_r+0x1c6>
 80109bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109be:	445a      	add	r2, fp
 80109c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80109c2:	f89a 3000 	ldrb.w	r3, [sl]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 809f 	beq.w	8010b0a <_svfiprintf_r+0x1c6>
 80109cc:	2300      	movs	r3, #0
 80109ce:	f04f 32ff 	mov.w	r2, #4294967295
 80109d2:	f10a 0a01 	add.w	sl, sl, #1
 80109d6:	9304      	str	r3, [sp, #16]
 80109d8:	9307      	str	r3, [sp, #28]
 80109da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109de:	931a      	str	r3, [sp, #104]	@ 0x68
 80109e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109e4:	4654      	mov	r4, sl
 80109e6:	2205      	movs	r2, #5
 80109e8:	484f      	ldr	r0, [pc, #316]	@ (8010b28 <_svfiprintf_r+0x1e4>)
 80109ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ee:	f7fd fd14 	bl	800e41a <memchr>
 80109f2:	9a04      	ldr	r2, [sp, #16]
 80109f4:	b9d8      	cbnz	r0, 8010a2e <_svfiprintf_r+0xea>
 80109f6:	06d0      	lsls	r0, r2, #27
 80109f8:	bf44      	itt	mi
 80109fa:	2320      	movmi	r3, #32
 80109fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a00:	0711      	lsls	r1, r2, #28
 8010a02:	bf44      	itt	mi
 8010a04:	232b      	movmi	r3, #43	@ 0x2b
 8010a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a10:	d015      	beq.n	8010a3e <_svfiprintf_r+0xfa>
 8010a12:	9a07      	ldr	r2, [sp, #28]
 8010a14:	4654      	mov	r4, sl
 8010a16:	2000      	movs	r0, #0
 8010a18:	f04f 0c0a 	mov.w	ip, #10
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a22:	3b30      	subs	r3, #48	@ 0x30
 8010a24:	2b09      	cmp	r3, #9
 8010a26:	d94b      	bls.n	8010ac0 <_svfiprintf_r+0x17c>
 8010a28:	b1b0      	cbz	r0, 8010a58 <_svfiprintf_r+0x114>
 8010a2a:	9207      	str	r2, [sp, #28]
 8010a2c:	e014      	b.n	8010a58 <_svfiprintf_r+0x114>
 8010a2e:	eba0 0308 	sub.w	r3, r0, r8
 8010a32:	46a2      	mov	sl, r4
 8010a34:	fa09 f303 	lsl.w	r3, r9, r3
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	9304      	str	r3, [sp, #16]
 8010a3c:	e7d2      	b.n	80109e4 <_svfiprintf_r+0xa0>
 8010a3e:	9b03      	ldr	r3, [sp, #12]
 8010a40:	1d19      	adds	r1, r3, #4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	9103      	str	r1, [sp, #12]
 8010a48:	bfbb      	ittet	lt
 8010a4a:	425b      	neglt	r3, r3
 8010a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a50:	9307      	strge	r3, [sp, #28]
 8010a52:	9307      	strlt	r3, [sp, #28]
 8010a54:	bfb8      	it	lt
 8010a56:	9204      	strlt	r2, [sp, #16]
 8010a58:	7823      	ldrb	r3, [r4, #0]
 8010a5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a5c:	d10a      	bne.n	8010a74 <_svfiprintf_r+0x130>
 8010a5e:	7863      	ldrb	r3, [r4, #1]
 8010a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a62:	d132      	bne.n	8010aca <_svfiprintf_r+0x186>
 8010a64:	9b03      	ldr	r3, [sp, #12]
 8010a66:	3402      	adds	r4, #2
 8010a68:	1d1a      	adds	r2, r3, #4
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a70:	9203      	str	r2, [sp, #12]
 8010a72:	9305      	str	r3, [sp, #20]
 8010a74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b38 <_svfiprintf_r+0x1f4>
 8010a78:	2203      	movs	r2, #3
 8010a7a:	7821      	ldrb	r1, [r4, #0]
 8010a7c:	4650      	mov	r0, sl
 8010a7e:	f7fd fccc 	bl	800e41a <memchr>
 8010a82:	b138      	cbz	r0, 8010a94 <_svfiprintf_r+0x150>
 8010a84:	eba0 000a 	sub.w	r0, r0, sl
 8010a88:	2240      	movs	r2, #64	@ 0x40
 8010a8a:	9b04      	ldr	r3, [sp, #16]
 8010a8c:	3401      	adds	r4, #1
 8010a8e:	4082      	lsls	r2, r0
 8010a90:	4313      	orrs	r3, r2
 8010a92:	9304      	str	r3, [sp, #16]
 8010a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a98:	2206      	movs	r2, #6
 8010a9a:	4824      	ldr	r0, [pc, #144]	@ (8010b2c <_svfiprintf_r+0x1e8>)
 8010a9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010aa0:	f7fd fcbb 	bl	800e41a <memchr>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d036      	beq.n	8010b16 <_svfiprintf_r+0x1d2>
 8010aa8:	4b21      	ldr	r3, [pc, #132]	@ (8010b30 <_svfiprintf_r+0x1ec>)
 8010aaa:	bb1b      	cbnz	r3, 8010af4 <_svfiprintf_r+0x1b0>
 8010aac:	9b03      	ldr	r3, [sp, #12]
 8010aae:	3307      	adds	r3, #7
 8010ab0:	f023 0307 	bic.w	r3, r3, #7
 8010ab4:	3308      	adds	r3, #8
 8010ab6:	9303      	str	r3, [sp, #12]
 8010ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aba:	4433      	add	r3, r6
 8010abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010abe:	e76a      	b.n	8010996 <_svfiprintf_r+0x52>
 8010ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	2001      	movs	r0, #1
 8010ac8:	e7a8      	b.n	8010a1c <_svfiprintf_r+0xd8>
 8010aca:	2300      	movs	r3, #0
 8010acc:	3401      	adds	r4, #1
 8010ace:	f04f 0c0a 	mov.w	ip, #10
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	9305      	str	r3, [sp, #20]
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010adc:	3a30      	subs	r2, #48	@ 0x30
 8010ade:	2a09      	cmp	r2, #9
 8010ae0:	d903      	bls.n	8010aea <_svfiprintf_r+0x1a6>
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0c6      	beq.n	8010a74 <_svfiprintf_r+0x130>
 8010ae6:	9105      	str	r1, [sp, #20]
 8010ae8:	e7c4      	b.n	8010a74 <_svfiprintf_r+0x130>
 8010aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8010aee:	4604      	mov	r4, r0
 8010af0:	2301      	movs	r3, #1
 8010af2:	e7f0      	b.n	8010ad6 <_svfiprintf_r+0x192>
 8010af4:	ab03      	add	r3, sp, #12
 8010af6:	462a      	mov	r2, r5
 8010af8:	a904      	add	r1, sp, #16
 8010afa:	4638      	mov	r0, r7
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <_svfiprintf_r+0x1f0>)
 8010b00:	f7fc fd18 	bl	800d534 <_printf_float>
 8010b04:	1c42      	adds	r2, r0, #1
 8010b06:	4606      	mov	r6, r0
 8010b08:	d1d6      	bne.n	8010ab8 <_svfiprintf_r+0x174>
 8010b0a:	89ab      	ldrh	r3, [r5, #12]
 8010b0c:	065b      	lsls	r3, r3, #25
 8010b0e:	f53f af2d 	bmi.w	801096c <_svfiprintf_r+0x28>
 8010b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b14:	e72c      	b.n	8010970 <_svfiprintf_r+0x2c>
 8010b16:	ab03      	add	r3, sp, #12
 8010b18:	462a      	mov	r2, r5
 8010b1a:	a904      	add	r1, sp, #16
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	4b04      	ldr	r3, [pc, #16]	@ (8010b34 <_svfiprintf_r+0x1f0>)
 8010b22:	f7fc ffa3 	bl	800da6c <_printf_i>
 8010b26:	e7ed      	b.n	8010b04 <_svfiprintf_r+0x1c0>
 8010b28:	08014878 	.word	0x08014878
 8010b2c:	08014882 	.word	0x08014882
 8010b30:	0800d535 	.word	0x0800d535
 8010b34:	0801088d 	.word	0x0801088d
 8010b38:	0801487e 	.word	0x0801487e

08010b3c <__sflush_r>:
 8010b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b44:	0716      	lsls	r6, r2, #28
 8010b46:	4605      	mov	r5, r0
 8010b48:	460c      	mov	r4, r1
 8010b4a:	d454      	bmi.n	8010bf6 <__sflush_r+0xba>
 8010b4c:	684b      	ldr	r3, [r1, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	dc02      	bgt.n	8010b58 <__sflush_r+0x1c>
 8010b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dd48      	ble.n	8010bea <__sflush_r+0xae>
 8010b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b5a:	2e00      	cmp	r6, #0
 8010b5c:	d045      	beq.n	8010bea <__sflush_r+0xae>
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b64:	682f      	ldr	r7, [r5, #0]
 8010b66:	6a21      	ldr	r1, [r4, #32]
 8010b68:	602b      	str	r3, [r5, #0]
 8010b6a:	d030      	beq.n	8010bce <__sflush_r+0x92>
 8010b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	0759      	lsls	r1, r3, #29
 8010b72:	d505      	bpl.n	8010b80 <__sflush_r+0x44>
 8010b74:	6863      	ldr	r3, [r4, #4]
 8010b76:	1ad2      	subs	r2, r2, r3
 8010b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b7a:	b10b      	cbz	r3, 8010b80 <__sflush_r+0x44>
 8010b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b7e:	1ad2      	subs	r2, r2, r3
 8010b80:	2300      	movs	r3, #0
 8010b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b84:	6a21      	ldr	r1, [r4, #32]
 8010b86:	4628      	mov	r0, r5
 8010b88:	47b0      	blx	r6
 8010b8a:	1c43      	adds	r3, r0, #1
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	d106      	bne.n	8010b9e <__sflush_r+0x62>
 8010b90:	6829      	ldr	r1, [r5, #0]
 8010b92:	291d      	cmp	r1, #29
 8010b94:	d82b      	bhi.n	8010bee <__sflush_r+0xb2>
 8010b96:	4a2a      	ldr	r2, [pc, #168]	@ (8010c40 <__sflush_r+0x104>)
 8010b98:	410a      	asrs	r2, r1
 8010b9a:	07d6      	lsls	r6, r2, #31
 8010b9c:	d427      	bmi.n	8010bee <__sflush_r+0xb2>
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	04d9      	lsls	r1, r3, #19
 8010ba2:	6062      	str	r2, [r4, #4]
 8010ba4:	6922      	ldr	r2, [r4, #16]
 8010ba6:	6022      	str	r2, [r4, #0]
 8010ba8:	d504      	bpl.n	8010bb4 <__sflush_r+0x78>
 8010baa:	1c42      	adds	r2, r0, #1
 8010bac:	d101      	bne.n	8010bb2 <__sflush_r+0x76>
 8010bae:	682b      	ldr	r3, [r5, #0]
 8010bb0:	b903      	cbnz	r3, 8010bb4 <__sflush_r+0x78>
 8010bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bb6:	602f      	str	r7, [r5, #0]
 8010bb8:	b1b9      	cbz	r1, 8010bea <__sflush_r+0xae>
 8010bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bbe:	4299      	cmp	r1, r3
 8010bc0:	d002      	beq.n	8010bc8 <__sflush_r+0x8c>
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	f7fe fa9c 	bl	800f100 <_free_r>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bcc:	e00d      	b.n	8010bea <__sflush_r+0xae>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	47b0      	blx	r6
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	1c50      	adds	r0, r2, #1
 8010bd8:	d1c9      	bne.n	8010b6e <__sflush_r+0x32>
 8010bda:	682b      	ldr	r3, [r5, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d0c6      	beq.n	8010b6e <__sflush_r+0x32>
 8010be0:	2b1d      	cmp	r3, #29
 8010be2:	d001      	beq.n	8010be8 <__sflush_r+0xac>
 8010be4:	2b16      	cmp	r3, #22
 8010be6:	d11d      	bne.n	8010c24 <__sflush_r+0xe8>
 8010be8:	602f      	str	r7, [r5, #0]
 8010bea:	2000      	movs	r0, #0
 8010bec:	e021      	b.n	8010c32 <__sflush_r+0xf6>
 8010bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bf2:	b21b      	sxth	r3, r3
 8010bf4:	e01a      	b.n	8010c2c <__sflush_r+0xf0>
 8010bf6:	690f      	ldr	r7, [r1, #16]
 8010bf8:	2f00      	cmp	r7, #0
 8010bfa:	d0f6      	beq.n	8010bea <__sflush_r+0xae>
 8010bfc:	0793      	lsls	r3, r2, #30
 8010bfe:	680e      	ldr	r6, [r1, #0]
 8010c00:	600f      	str	r7, [r1, #0]
 8010c02:	bf0c      	ite	eq
 8010c04:	694b      	ldreq	r3, [r1, #20]
 8010c06:	2300      	movne	r3, #0
 8010c08:	eba6 0807 	sub.w	r8, r6, r7
 8010c0c:	608b      	str	r3, [r1, #8]
 8010c0e:	f1b8 0f00 	cmp.w	r8, #0
 8010c12:	ddea      	ble.n	8010bea <__sflush_r+0xae>
 8010c14:	4643      	mov	r3, r8
 8010c16:	463a      	mov	r2, r7
 8010c18:	6a21      	ldr	r1, [r4, #32]
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c1e:	47b0      	blx	r6
 8010c20:	2800      	cmp	r0, #0
 8010c22:	dc08      	bgt.n	8010c36 <__sflush_r+0xfa>
 8010c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c36:	4407      	add	r7, r0
 8010c38:	eba8 0800 	sub.w	r8, r8, r0
 8010c3c:	e7e7      	b.n	8010c0e <__sflush_r+0xd2>
 8010c3e:	bf00      	nop
 8010c40:	dfbffffe 	.word	0xdfbffffe

08010c44 <_fflush_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	690b      	ldr	r3, [r1, #16]
 8010c48:	4605      	mov	r5, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	b913      	cbnz	r3, 8010c54 <_fflush_r+0x10>
 8010c4e:	2500      	movs	r5, #0
 8010c50:	4628      	mov	r0, r5
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	b118      	cbz	r0, 8010c5e <_fflush_r+0x1a>
 8010c56:	6a03      	ldr	r3, [r0, #32]
 8010c58:	b90b      	cbnz	r3, 8010c5e <_fflush_r+0x1a>
 8010c5a:	f7fd fac5 	bl	800e1e8 <__sinit>
 8010c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d0f3      	beq.n	8010c4e <_fflush_r+0xa>
 8010c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c68:	07d0      	lsls	r0, r2, #31
 8010c6a:	d404      	bmi.n	8010c76 <_fflush_r+0x32>
 8010c6c:	0599      	lsls	r1, r3, #22
 8010c6e:	d402      	bmi.n	8010c76 <_fflush_r+0x32>
 8010c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c72:	f7fd fbd0 	bl	800e416 <__retarget_lock_acquire_recursive>
 8010c76:	4628      	mov	r0, r5
 8010c78:	4621      	mov	r1, r4
 8010c7a:	f7ff ff5f 	bl	8010b3c <__sflush_r>
 8010c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c80:	4605      	mov	r5, r0
 8010c82:	07da      	lsls	r2, r3, #31
 8010c84:	d4e4      	bmi.n	8010c50 <_fflush_r+0xc>
 8010c86:	89a3      	ldrh	r3, [r4, #12]
 8010c88:	059b      	lsls	r3, r3, #22
 8010c8a:	d4e1      	bmi.n	8010c50 <_fflush_r+0xc>
 8010c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c8e:	f7fd fbc3 	bl	800e418 <__retarget_lock_release_recursive>
 8010c92:	e7dd      	b.n	8010c50 <_fflush_r+0xc>

08010c94 <memmove>:
 8010c94:	4288      	cmp	r0, r1
 8010c96:	b510      	push	{r4, lr}
 8010c98:	eb01 0402 	add.w	r4, r1, r2
 8010c9c:	d902      	bls.n	8010ca4 <memmove+0x10>
 8010c9e:	4284      	cmp	r4, r0
 8010ca0:	4623      	mov	r3, r4
 8010ca2:	d807      	bhi.n	8010cb4 <memmove+0x20>
 8010ca4:	1e43      	subs	r3, r0, #1
 8010ca6:	42a1      	cmp	r1, r4
 8010ca8:	d008      	beq.n	8010cbc <memmove+0x28>
 8010caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cb2:	e7f8      	b.n	8010ca6 <memmove+0x12>
 8010cb4:	4402      	add	r2, r0
 8010cb6:	4601      	mov	r1, r0
 8010cb8:	428a      	cmp	r2, r1
 8010cba:	d100      	bne.n	8010cbe <memmove+0x2a>
 8010cbc:	bd10      	pop	{r4, pc}
 8010cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cc6:	e7f7      	b.n	8010cb8 <memmove+0x24>

08010cc8 <strncmp>:
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	b16a      	cbz	r2, 8010ce8 <strncmp+0x20>
 8010ccc:	3901      	subs	r1, #1
 8010cce:	1884      	adds	r4, r0, r2
 8010cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d103      	bne.n	8010ce4 <strncmp+0x1c>
 8010cdc:	42a0      	cmp	r0, r4
 8010cde:	d001      	beq.n	8010ce4 <strncmp+0x1c>
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	d1f5      	bne.n	8010cd0 <strncmp+0x8>
 8010ce4:	1ad0      	subs	r0, r2, r3
 8010ce6:	bd10      	pop	{r4, pc}
 8010ce8:	4610      	mov	r0, r2
 8010cea:	e7fc      	b.n	8010ce6 <strncmp+0x1e>

08010cec <_sbrk_r>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	2300      	movs	r3, #0
 8010cf0:	4d05      	ldr	r5, [pc, #20]	@ (8010d08 <_sbrk_r+0x1c>)
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	4608      	mov	r0, r1
 8010cf6:	602b      	str	r3, [r5, #0]
 8010cf8:	f7f4 f952 	bl	8004fa0 <_sbrk>
 8010cfc:	1c43      	adds	r3, r0, #1
 8010cfe:	d102      	bne.n	8010d06 <_sbrk_r+0x1a>
 8010d00:	682b      	ldr	r3, [r5, #0]
 8010d02:	b103      	cbz	r3, 8010d06 <_sbrk_r+0x1a>
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	2003b3b4 	.word	0x2003b3b4
 8010d0c:	00000000 	.word	0x00000000

08010d10 <nan>:
 8010d10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d18 <nan+0x8>
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	7ff80000 	.word	0x7ff80000

08010d20 <__assert_func>:
 8010d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d22:	4614      	mov	r4, r2
 8010d24:	461a      	mov	r2, r3
 8010d26:	4b09      	ldr	r3, [pc, #36]	@ (8010d4c <__assert_func+0x2c>)
 8010d28:	4605      	mov	r5, r0
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	68d8      	ldr	r0, [r3, #12]
 8010d2e:	b954      	cbnz	r4, 8010d46 <__assert_func+0x26>
 8010d30:	4b07      	ldr	r3, [pc, #28]	@ (8010d50 <__assert_func+0x30>)
 8010d32:	461c      	mov	r4, r3
 8010d34:	9100      	str	r1, [sp, #0]
 8010d36:	4907      	ldr	r1, [pc, #28]	@ (8010d54 <__assert_func+0x34>)
 8010d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	f000 fba3 	bl	8011488 <fiprintf>
 8010d42:	f000 fbb3 	bl	80114ac <abort>
 8010d46:	4b04      	ldr	r3, [pc, #16]	@ (8010d58 <__assert_func+0x38>)
 8010d48:	e7f4      	b.n	8010d34 <__assert_func+0x14>
 8010d4a:	bf00      	nop
 8010d4c:	20000034 	.word	0x20000034
 8010d50:	080148cc 	.word	0x080148cc
 8010d54:	0801489e 	.word	0x0801489e
 8010d58:	08014891 	.word	0x08014891

08010d5c <_calloc_r>:
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	fba1 5402 	umull	r5, r4, r1, r2
 8010d62:	b93c      	cbnz	r4, 8010d74 <_calloc_r+0x18>
 8010d64:	4629      	mov	r1, r5
 8010d66:	f7fe fa3f 	bl	800f1e8 <_malloc_r>
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	b928      	cbnz	r0, 8010d7a <_calloc_r+0x1e>
 8010d6e:	2600      	movs	r6, #0
 8010d70:	4630      	mov	r0, r6
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	220c      	movs	r2, #12
 8010d76:	6002      	str	r2, [r0, #0]
 8010d78:	e7f9      	b.n	8010d6e <_calloc_r+0x12>
 8010d7a:	462a      	mov	r2, r5
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	f7fd facc 	bl	800e31a <memset>
 8010d82:	e7f5      	b.n	8010d70 <_calloc_r+0x14>

08010d84 <rshift>:
 8010d84:	6903      	ldr	r3, [r0, #16]
 8010d86:	114a      	asrs	r2, r1, #5
 8010d88:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d90:	f100 0414 	add.w	r4, r0, #20
 8010d94:	dd45      	ble.n	8010e22 <rshift+0x9e>
 8010d96:	f011 011f 	ands.w	r1, r1, #31
 8010d9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010d9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010da2:	d10c      	bne.n	8010dbe <rshift+0x3a>
 8010da4:	f100 0710 	add.w	r7, r0, #16
 8010da8:	4629      	mov	r1, r5
 8010daa:	42b1      	cmp	r1, r6
 8010dac:	d334      	bcc.n	8010e18 <rshift+0x94>
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	1eea      	subs	r2, r5, #3
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	4296      	cmp	r6, r2
 8010db6:	bf38      	it	cc
 8010db8:	2300      	movcc	r3, #0
 8010dba:	4423      	add	r3, r4
 8010dbc:	e015      	b.n	8010dea <rshift+0x66>
 8010dbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010dc2:	f1c1 0820 	rsb	r8, r1, #32
 8010dc6:	f105 0e04 	add.w	lr, r5, #4
 8010dca:	46a1      	mov	r9, r4
 8010dcc:	40cf      	lsrs	r7, r1
 8010dce:	4576      	cmp	r6, lr
 8010dd0:	46f4      	mov	ip, lr
 8010dd2:	d815      	bhi.n	8010e00 <rshift+0x7c>
 8010dd4:	1a9a      	subs	r2, r3, r2
 8010dd6:	3501      	adds	r5, #1
 8010dd8:	0092      	lsls	r2, r2, #2
 8010dda:	3a04      	subs	r2, #4
 8010ddc:	42ae      	cmp	r6, r5
 8010dde:	bf38      	it	cc
 8010de0:	2200      	movcc	r2, #0
 8010de2:	18a3      	adds	r3, r4, r2
 8010de4:	50a7      	str	r7, [r4, r2]
 8010de6:	b107      	cbz	r7, 8010dea <rshift+0x66>
 8010de8:	3304      	adds	r3, #4
 8010dea:	1b1a      	subs	r2, r3, r4
 8010dec:	42a3      	cmp	r3, r4
 8010dee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010df2:	bf08      	it	eq
 8010df4:	2300      	moveq	r3, #0
 8010df6:	6102      	str	r2, [r0, #16]
 8010df8:	bf08      	it	eq
 8010dfa:	6143      	streq	r3, [r0, #20]
 8010dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e00:	f8dc c000 	ldr.w	ip, [ip]
 8010e04:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e08:	ea4c 0707 	orr.w	r7, ip, r7
 8010e0c:	f849 7b04 	str.w	r7, [r9], #4
 8010e10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e14:	40cf      	lsrs	r7, r1
 8010e16:	e7da      	b.n	8010dce <rshift+0x4a>
 8010e18:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e20:	e7c3      	b.n	8010daa <rshift+0x26>
 8010e22:	4623      	mov	r3, r4
 8010e24:	e7e1      	b.n	8010dea <rshift+0x66>

08010e26 <__hexdig_fun>:
 8010e26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e2a:	2b09      	cmp	r3, #9
 8010e2c:	d802      	bhi.n	8010e34 <__hexdig_fun+0xe>
 8010e2e:	3820      	subs	r0, #32
 8010e30:	b2c0      	uxtb	r0, r0
 8010e32:	4770      	bx	lr
 8010e34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010e38:	2b05      	cmp	r3, #5
 8010e3a:	d801      	bhi.n	8010e40 <__hexdig_fun+0x1a>
 8010e3c:	3847      	subs	r0, #71	@ 0x47
 8010e3e:	e7f7      	b.n	8010e30 <__hexdig_fun+0xa>
 8010e40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010e44:	2b05      	cmp	r3, #5
 8010e46:	d801      	bhi.n	8010e4c <__hexdig_fun+0x26>
 8010e48:	3827      	subs	r0, #39	@ 0x27
 8010e4a:	e7f1      	b.n	8010e30 <__hexdig_fun+0xa>
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	4770      	bx	lr

08010e50 <__gethex>:
 8010e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e54:	b085      	sub	sp, #20
 8010e56:	468a      	mov	sl, r1
 8010e58:	4690      	mov	r8, r2
 8010e5a:	9302      	str	r3, [sp, #8]
 8010e5c:	680b      	ldr	r3, [r1, #0]
 8010e5e:	9001      	str	r0, [sp, #4]
 8010e60:	1c9c      	adds	r4, r3, #2
 8010e62:	46a1      	mov	r9, r4
 8010e64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010e68:	2830      	cmp	r0, #48	@ 0x30
 8010e6a:	d0fa      	beq.n	8010e62 <__gethex+0x12>
 8010e6c:	eba9 0303 	sub.w	r3, r9, r3
 8010e70:	f1a3 0b02 	sub.w	fp, r3, #2
 8010e74:	f7ff ffd7 	bl	8010e26 <__hexdig_fun>
 8010e78:	4605      	mov	r5, r0
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d166      	bne.n	8010f4c <__gethex+0xfc>
 8010e7e:	2201      	movs	r2, #1
 8010e80:	499e      	ldr	r1, [pc, #632]	@ (80110fc <__gethex+0x2ac>)
 8010e82:	4648      	mov	r0, r9
 8010e84:	f7ff ff20 	bl	8010cc8 <strncmp>
 8010e88:	4607      	mov	r7, r0
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d165      	bne.n	8010f5a <__gethex+0x10a>
 8010e8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010e92:	4626      	mov	r6, r4
 8010e94:	f7ff ffc7 	bl	8010e26 <__hexdig_fun>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d060      	beq.n	8010f5e <__gethex+0x10e>
 8010e9c:	4623      	mov	r3, r4
 8010e9e:	7818      	ldrb	r0, [r3, #0]
 8010ea0:	4699      	mov	r9, r3
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	2830      	cmp	r0, #48	@ 0x30
 8010ea6:	d0fa      	beq.n	8010e9e <__gethex+0x4e>
 8010ea8:	f7ff ffbd 	bl	8010e26 <__hexdig_fun>
 8010eac:	fab0 f580 	clz	r5, r0
 8010eb0:	f04f 0b01 	mov.w	fp, #1
 8010eb4:	096d      	lsrs	r5, r5, #5
 8010eb6:	464a      	mov	r2, r9
 8010eb8:	4616      	mov	r6, r2
 8010eba:	3201      	adds	r2, #1
 8010ebc:	7830      	ldrb	r0, [r6, #0]
 8010ebe:	f7ff ffb2 	bl	8010e26 <__hexdig_fun>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d1f8      	bne.n	8010eb8 <__gethex+0x68>
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	498c      	ldr	r1, [pc, #560]	@ (80110fc <__gethex+0x2ac>)
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7ff fefc 	bl	8010cc8 <strncmp>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d13e      	bne.n	8010f52 <__gethex+0x102>
 8010ed4:	b944      	cbnz	r4, 8010ee8 <__gethex+0x98>
 8010ed6:	1c74      	adds	r4, r6, #1
 8010ed8:	4622      	mov	r2, r4
 8010eda:	4616      	mov	r6, r2
 8010edc:	3201      	adds	r2, #1
 8010ede:	7830      	ldrb	r0, [r6, #0]
 8010ee0:	f7ff ffa1 	bl	8010e26 <__hexdig_fun>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d1f8      	bne.n	8010eda <__gethex+0x8a>
 8010ee8:	1ba4      	subs	r4, r4, r6
 8010eea:	00a7      	lsls	r7, r4, #2
 8010eec:	7833      	ldrb	r3, [r6, #0]
 8010eee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010ef2:	2b50      	cmp	r3, #80	@ 0x50
 8010ef4:	d13d      	bne.n	8010f72 <__gethex+0x122>
 8010ef6:	7873      	ldrb	r3, [r6, #1]
 8010ef8:	2b2b      	cmp	r3, #43	@ 0x2b
 8010efa:	d032      	beq.n	8010f62 <__gethex+0x112>
 8010efc:	2b2d      	cmp	r3, #45	@ 0x2d
 8010efe:	d033      	beq.n	8010f68 <__gethex+0x118>
 8010f00:	1c71      	adds	r1, r6, #1
 8010f02:	2400      	movs	r4, #0
 8010f04:	7808      	ldrb	r0, [r1, #0]
 8010f06:	f7ff ff8e 	bl	8010e26 <__hexdig_fun>
 8010f0a:	1e43      	subs	r3, r0, #1
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b18      	cmp	r3, #24
 8010f10:	d82f      	bhi.n	8010f72 <__gethex+0x122>
 8010f12:	f1a0 0210 	sub.w	r2, r0, #16
 8010f16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f1a:	f7ff ff84 	bl	8010e26 <__hexdig_fun>
 8010f1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f22:	230a      	movs	r3, #10
 8010f24:	fa5f fc8c 	uxtb.w	ip, ip
 8010f28:	f1bc 0f18 	cmp.w	ip, #24
 8010f2c:	d91e      	bls.n	8010f6c <__gethex+0x11c>
 8010f2e:	b104      	cbz	r4, 8010f32 <__gethex+0xe2>
 8010f30:	4252      	negs	r2, r2
 8010f32:	4417      	add	r7, r2
 8010f34:	f8ca 1000 	str.w	r1, [sl]
 8010f38:	b1ed      	cbz	r5, 8010f76 <__gethex+0x126>
 8010f3a:	f1bb 0f00 	cmp.w	fp, #0
 8010f3e:	bf0c      	ite	eq
 8010f40:	2506      	moveq	r5, #6
 8010f42:	2500      	movne	r5, #0
 8010f44:	4628      	mov	r0, r5
 8010f46:	b005      	add	sp, #20
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4c:	2500      	movs	r5, #0
 8010f4e:	462c      	mov	r4, r5
 8010f50:	e7b1      	b.n	8010eb6 <__gethex+0x66>
 8010f52:	2c00      	cmp	r4, #0
 8010f54:	d1c8      	bne.n	8010ee8 <__gethex+0x98>
 8010f56:	4627      	mov	r7, r4
 8010f58:	e7c8      	b.n	8010eec <__gethex+0x9c>
 8010f5a:	464e      	mov	r6, r9
 8010f5c:	462f      	mov	r7, r5
 8010f5e:	2501      	movs	r5, #1
 8010f60:	e7c4      	b.n	8010eec <__gethex+0x9c>
 8010f62:	2400      	movs	r4, #0
 8010f64:	1cb1      	adds	r1, r6, #2
 8010f66:	e7cd      	b.n	8010f04 <__gethex+0xb4>
 8010f68:	2401      	movs	r4, #1
 8010f6a:	e7fb      	b.n	8010f64 <__gethex+0x114>
 8010f6c:	fb03 0002 	mla	r0, r3, r2, r0
 8010f70:	e7cf      	b.n	8010f12 <__gethex+0xc2>
 8010f72:	4631      	mov	r1, r6
 8010f74:	e7de      	b.n	8010f34 <__gethex+0xe4>
 8010f76:	eba6 0309 	sub.w	r3, r6, r9
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	2b07      	cmp	r3, #7
 8010f80:	dc0a      	bgt.n	8010f98 <__gethex+0x148>
 8010f82:	9801      	ldr	r0, [sp, #4]
 8010f84:	f7fe f9bc 	bl	800f300 <_Balloc>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	b940      	cbnz	r0, 8010f9e <__gethex+0x14e>
 8010f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8011100 <__gethex+0x2b0>)
 8010f8e:	4602      	mov	r2, r0
 8010f90:	21e4      	movs	r1, #228	@ 0xe4
 8010f92:	485c      	ldr	r0, [pc, #368]	@ (8011104 <__gethex+0x2b4>)
 8010f94:	f7ff fec4 	bl	8010d20 <__assert_func>
 8010f98:	3101      	adds	r1, #1
 8010f9a:	105b      	asrs	r3, r3, #1
 8010f9c:	e7ef      	b.n	8010f7e <__gethex+0x12e>
 8010f9e:	f100 0a14 	add.w	sl, r0, #20
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	4655      	mov	r5, sl
 8010fa6:	469b      	mov	fp, r3
 8010fa8:	45b1      	cmp	r9, r6
 8010faa:	d337      	bcc.n	801101c <__gethex+0x1cc>
 8010fac:	f845 bb04 	str.w	fp, [r5], #4
 8010fb0:	eba5 050a 	sub.w	r5, r5, sl
 8010fb4:	4658      	mov	r0, fp
 8010fb6:	10ad      	asrs	r5, r5, #2
 8010fb8:	6125      	str	r5, [r4, #16]
 8010fba:	016d      	lsls	r5, r5, #5
 8010fbc:	f7fe fa94 	bl	800f4e8 <__hi0bits>
 8010fc0:	f8d8 6000 	ldr.w	r6, [r8]
 8010fc4:	1a2d      	subs	r5, r5, r0
 8010fc6:	42b5      	cmp	r5, r6
 8010fc8:	dd54      	ble.n	8011074 <__gethex+0x224>
 8010fca:	1bad      	subs	r5, r5, r6
 8010fcc:	4620      	mov	r0, r4
 8010fce:	4629      	mov	r1, r5
 8010fd0:	f7fe fe31 	bl	800fc36 <__any_on>
 8010fd4:	4681      	mov	r9, r0
 8010fd6:	b178      	cbz	r0, 8010ff8 <__gethex+0x1a8>
 8010fd8:	1e6b      	subs	r3, r5, #1
 8010fda:	f04f 0901 	mov.w	r9, #1
 8010fde:	1159      	asrs	r1, r3, #5
 8010fe0:	f003 021f 	and.w	r2, r3, #31
 8010fe4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010fe8:	fa09 f202 	lsl.w	r2, r9, r2
 8010fec:	420a      	tst	r2, r1
 8010fee:	d003      	beq.n	8010ff8 <__gethex+0x1a8>
 8010ff0:	454b      	cmp	r3, r9
 8010ff2:	dc36      	bgt.n	8011062 <__gethex+0x212>
 8010ff4:	f04f 0902 	mov.w	r9, #2
 8010ff8:	442f      	add	r7, r5
 8010ffa:	4629      	mov	r1, r5
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f7ff fec1 	bl	8010d84 <rshift>
 8011002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011006:	42bb      	cmp	r3, r7
 8011008:	da42      	bge.n	8011090 <__gethex+0x240>
 801100a:	4621      	mov	r1, r4
 801100c:	9801      	ldr	r0, [sp, #4]
 801100e:	f7fe f9b7 	bl	800f380 <_Bfree>
 8011012:	2300      	movs	r3, #0
 8011014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011016:	25a3      	movs	r5, #163	@ 0xa3
 8011018:	6013      	str	r3, [r2, #0]
 801101a:	e793      	b.n	8010f44 <__gethex+0xf4>
 801101c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011020:	2a2e      	cmp	r2, #46	@ 0x2e
 8011022:	d012      	beq.n	801104a <__gethex+0x1fa>
 8011024:	2b20      	cmp	r3, #32
 8011026:	d104      	bne.n	8011032 <__gethex+0x1e2>
 8011028:	f845 bb04 	str.w	fp, [r5], #4
 801102c:	f04f 0b00 	mov.w	fp, #0
 8011030:	465b      	mov	r3, fp
 8011032:	7830      	ldrb	r0, [r6, #0]
 8011034:	9303      	str	r3, [sp, #12]
 8011036:	f7ff fef6 	bl	8010e26 <__hexdig_fun>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	f000 000f 	and.w	r0, r0, #15
 8011040:	4098      	lsls	r0, r3
 8011042:	3304      	adds	r3, #4
 8011044:	ea4b 0b00 	orr.w	fp, fp, r0
 8011048:	e7ae      	b.n	8010fa8 <__gethex+0x158>
 801104a:	45b1      	cmp	r9, r6
 801104c:	d8ea      	bhi.n	8011024 <__gethex+0x1d4>
 801104e:	2201      	movs	r2, #1
 8011050:	492a      	ldr	r1, [pc, #168]	@ (80110fc <__gethex+0x2ac>)
 8011052:	4630      	mov	r0, r6
 8011054:	9303      	str	r3, [sp, #12]
 8011056:	f7ff fe37 	bl	8010cc8 <strncmp>
 801105a:	9b03      	ldr	r3, [sp, #12]
 801105c:	2800      	cmp	r0, #0
 801105e:	d1e1      	bne.n	8011024 <__gethex+0x1d4>
 8011060:	e7a2      	b.n	8010fa8 <__gethex+0x158>
 8011062:	1ea9      	subs	r1, r5, #2
 8011064:	4620      	mov	r0, r4
 8011066:	f7fe fde6 	bl	800fc36 <__any_on>
 801106a:	2800      	cmp	r0, #0
 801106c:	d0c2      	beq.n	8010ff4 <__gethex+0x1a4>
 801106e:	f04f 0903 	mov.w	r9, #3
 8011072:	e7c1      	b.n	8010ff8 <__gethex+0x1a8>
 8011074:	da09      	bge.n	801108a <__gethex+0x23a>
 8011076:	1b75      	subs	r5, r6, r5
 8011078:	4621      	mov	r1, r4
 801107a:	9801      	ldr	r0, [sp, #4]
 801107c:	462a      	mov	r2, r5
 801107e:	1b7f      	subs	r7, r7, r5
 8011080:	f7fe fb98 	bl	800f7b4 <__lshift>
 8011084:	4604      	mov	r4, r0
 8011086:	f100 0a14 	add.w	sl, r0, #20
 801108a:	f04f 0900 	mov.w	r9, #0
 801108e:	e7b8      	b.n	8011002 <__gethex+0x1b2>
 8011090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011094:	42bd      	cmp	r5, r7
 8011096:	dd6f      	ble.n	8011178 <__gethex+0x328>
 8011098:	1bed      	subs	r5, r5, r7
 801109a:	42ae      	cmp	r6, r5
 801109c:	dc34      	bgt.n	8011108 <__gethex+0x2b8>
 801109e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d022      	beq.n	80110ec <__gethex+0x29c>
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	d024      	beq.n	80110f4 <__gethex+0x2a4>
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d115      	bne.n	80110da <__gethex+0x28a>
 80110ae:	42ae      	cmp	r6, r5
 80110b0:	d113      	bne.n	80110da <__gethex+0x28a>
 80110b2:	2e01      	cmp	r6, #1
 80110b4:	d10b      	bne.n	80110ce <__gethex+0x27e>
 80110b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110ba:	2562      	movs	r5, #98	@ 0x62
 80110bc:	9a02      	ldr	r2, [sp, #8]
 80110be:	6013      	str	r3, [r2, #0]
 80110c0:	2301      	movs	r3, #1
 80110c2:	6123      	str	r3, [r4, #16]
 80110c4:	f8ca 3000 	str.w	r3, [sl]
 80110c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110ca:	601c      	str	r4, [r3, #0]
 80110cc:	e73a      	b.n	8010f44 <__gethex+0xf4>
 80110ce:	1e71      	subs	r1, r6, #1
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7fe fdb0 	bl	800fc36 <__any_on>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d1ed      	bne.n	80110b6 <__gethex+0x266>
 80110da:	4621      	mov	r1, r4
 80110dc:	9801      	ldr	r0, [sp, #4]
 80110de:	f7fe f94f 	bl	800f380 <_Bfree>
 80110e2:	2300      	movs	r3, #0
 80110e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110e6:	2550      	movs	r5, #80	@ 0x50
 80110e8:	6013      	str	r3, [r2, #0]
 80110ea:	e72b      	b.n	8010f44 <__gethex+0xf4>
 80110ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1f3      	bne.n	80110da <__gethex+0x28a>
 80110f2:	e7e0      	b.n	80110b6 <__gethex+0x266>
 80110f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1dd      	bne.n	80110b6 <__gethex+0x266>
 80110fa:	e7ee      	b.n	80110da <__gethex+0x28a>
 80110fc:	08014820 	.word	0x08014820
 8011100:	080146b6 	.word	0x080146b6
 8011104:	080148cd 	.word	0x080148cd
 8011108:	1e6f      	subs	r7, r5, #1
 801110a:	f1b9 0f00 	cmp.w	r9, #0
 801110e:	d130      	bne.n	8011172 <__gethex+0x322>
 8011110:	b127      	cbz	r7, 801111c <__gethex+0x2cc>
 8011112:	4639      	mov	r1, r7
 8011114:	4620      	mov	r0, r4
 8011116:	f7fe fd8e 	bl	800fc36 <__any_on>
 801111a:	4681      	mov	r9, r0
 801111c:	117a      	asrs	r2, r7, #5
 801111e:	2301      	movs	r3, #1
 8011120:	f007 071f 	and.w	r7, r7, #31
 8011124:	4629      	mov	r1, r5
 8011126:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801112a:	4620      	mov	r0, r4
 801112c:	40bb      	lsls	r3, r7
 801112e:	1b76      	subs	r6, r6, r5
 8011130:	2502      	movs	r5, #2
 8011132:	4213      	tst	r3, r2
 8011134:	bf18      	it	ne
 8011136:	f049 0902 	orrne.w	r9, r9, #2
 801113a:	f7ff fe23 	bl	8010d84 <rshift>
 801113e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011142:	f1b9 0f00 	cmp.w	r9, #0
 8011146:	d047      	beq.n	80111d8 <__gethex+0x388>
 8011148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d015      	beq.n	801117c <__gethex+0x32c>
 8011150:	2b03      	cmp	r3, #3
 8011152:	d017      	beq.n	8011184 <__gethex+0x334>
 8011154:	2b01      	cmp	r3, #1
 8011156:	d109      	bne.n	801116c <__gethex+0x31c>
 8011158:	f019 0f02 	tst.w	r9, #2
 801115c:	d006      	beq.n	801116c <__gethex+0x31c>
 801115e:	f8da 3000 	ldr.w	r3, [sl]
 8011162:	ea49 0903 	orr.w	r9, r9, r3
 8011166:	f019 0f01 	tst.w	r9, #1
 801116a:	d10e      	bne.n	801118a <__gethex+0x33a>
 801116c:	f045 0510 	orr.w	r5, r5, #16
 8011170:	e032      	b.n	80111d8 <__gethex+0x388>
 8011172:	f04f 0901 	mov.w	r9, #1
 8011176:	e7d1      	b.n	801111c <__gethex+0x2cc>
 8011178:	2501      	movs	r5, #1
 801117a:	e7e2      	b.n	8011142 <__gethex+0x2f2>
 801117c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801117e:	f1c3 0301 	rsb	r3, r3, #1
 8011182:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0f0      	beq.n	801116c <__gethex+0x31c>
 801118a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801118e:	f104 0314 	add.w	r3, r4, #20
 8011192:	f04f 0c00 	mov.w	ip, #0
 8011196:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801119a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801119e:	4618      	mov	r0, r3
 80111a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80111a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80111a8:	d01b      	beq.n	80111e2 <__gethex+0x392>
 80111aa:	3201      	adds	r2, #1
 80111ac:	6002      	str	r2, [r0, #0]
 80111ae:	2d02      	cmp	r5, #2
 80111b0:	f104 0314 	add.w	r3, r4, #20
 80111b4:	d13c      	bne.n	8011230 <__gethex+0x3e0>
 80111b6:	f8d8 2000 	ldr.w	r2, [r8]
 80111ba:	3a01      	subs	r2, #1
 80111bc:	42b2      	cmp	r2, r6
 80111be:	d109      	bne.n	80111d4 <__gethex+0x384>
 80111c0:	1171      	asrs	r1, r6, #5
 80111c2:	2201      	movs	r2, #1
 80111c4:	f006 061f 	and.w	r6, r6, #31
 80111c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111cc:	fa02 f606 	lsl.w	r6, r2, r6
 80111d0:	421e      	tst	r6, r3
 80111d2:	d13a      	bne.n	801124a <__gethex+0x3fa>
 80111d4:	f045 0520 	orr.w	r5, r5, #32
 80111d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111da:	601c      	str	r4, [r3, #0]
 80111dc:	9b02      	ldr	r3, [sp, #8]
 80111de:	601f      	str	r7, [r3, #0]
 80111e0:	e6b0      	b.n	8010f44 <__gethex+0xf4>
 80111e2:	4299      	cmp	r1, r3
 80111e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80111e8:	d8d9      	bhi.n	801119e <__gethex+0x34e>
 80111ea:	68a3      	ldr	r3, [r4, #8]
 80111ec:	459b      	cmp	fp, r3
 80111ee:	db17      	blt.n	8011220 <__gethex+0x3d0>
 80111f0:	6861      	ldr	r1, [r4, #4]
 80111f2:	9801      	ldr	r0, [sp, #4]
 80111f4:	3101      	adds	r1, #1
 80111f6:	f7fe f883 	bl	800f300 <_Balloc>
 80111fa:	4681      	mov	r9, r0
 80111fc:	b918      	cbnz	r0, 8011206 <__gethex+0x3b6>
 80111fe:	4b1a      	ldr	r3, [pc, #104]	@ (8011268 <__gethex+0x418>)
 8011200:	4602      	mov	r2, r0
 8011202:	2184      	movs	r1, #132	@ 0x84
 8011204:	e6c5      	b.n	8010f92 <__gethex+0x142>
 8011206:	6922      	ldr	r2, [r4, #16]
 8011208:	f104 010c 	add.w	r1, r4, #12
 801120c:	300c      	adds	r0, #12
 801120e:	3202      	adds	r2, #2
 8011210:	0092      	lsls	r2, r2, #2
 8011212:	f7fd f910 	bl	800e436 <memcpy>
 8011216:	4621      	mov	r1, r4
 8011218:	464c      	mov	r4, r9
 801121a:	9801      	ldr	r0, [sp, #4]
 801121c:	f7fe f8b0 	bl	800f380 <_Bfree>
 8011220:	6923      	ldr	r3, [r4, #16]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011228:	6122      	str	r2, [r4, #16]
 801122a:	2201      	movs	r2, #1
 801122c:	615a      	str	r2, [r3, #20]
 801122e:	e7be      	b.n	80111ae <__gethex+0x35e>
 8011230:	6922      	ldr	r2, [r4, #16]
 8011232:	455a      	cmp	r2, fp
 8011234:	dd0b      	ble.n	801124e <__gethex+0x3fe>
 8011236:	2101      	movs	r1, #1
 8011238:	4620      	mov	r0, r4
 801123a:	f7ff fda3 	bl	8010d84 <rshift>
 801123e:	3701      	adds	r7, #1
 8011240:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011244:	42bb      	cmp	r3, r7
 8011246:	f6ff aee0 	blt.w	801100a <__gethex+0x1ba>
 801124a:	2501      	movs	r5, #1
 801124c:	e7c2      	b.n	80111d4 <__gethex+0x384>
 801124e:	f016 061f 	ands.w	r6, r6, #31
 8011252:	d0fa      	beq.n	801124a <__gethex+0x3fa>
 8011254:	4453      	add	r3, sl
 8011256:	f1c6 0620 	rsb	r6, r6, #32
 801125a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801125e:	f7fe f943 	bl	800f4e8 <__hi0bits>
 8011262:	42b0      	cmp	r0, r6
 8011264:	dbe7      	blt.n	8011236 <__gethex+0x3e6>
 8011266:	e7f0      	b.n	801124a <__gethex+0x3fa>
 8011268:	080146b6 	.word	0x080146b6

0801126c <L_shift>:
 801126c:	f1c2 0208 	rsb	r2, r2, #8
 8011270:	0092      	lsls	r2, r2, #2
 8011272:	b570      	push	{r4, r5, r6, lr}
 8011274:	f1c2 0620 	rsb	r6, r2, #32
 8011278:	6843      	ldr	r3, [r0, #4]
 801127a:	6804      	ldr	r4, [r0, #0]
 801127c:	fa03 f506 	lsl.w	r5, r3, r6
 8011280:	40d3      	lsrs	r3, r2
 8011282:	432c      	orrs	r4, r5
 8011284:	6004      	str	r4, [r0, #0]
 8011286:	f840 3f04 	str.w	r3, [r0, #4]!
 801128a:	4288      	cmp	r0, r1
 801128c:	d3f4      	bcc.n	8011278 <L_shift+0xc>
 801128e:	bd70      	pop	{r4, r5, r6, pc}

08011290 <__match>:
 8011290:	6803      	ldr	r3, [r0, #0]
 8011292:	3301      	adds	r3, #1
 8011294:	b530      	push	{r4, r5, lr}
 8011296:	f811 4b01 	ldrb.w	r4, [r1], #1
 801129a:	b914      	cbnz	r4, 80112a2 <__match+0x12>
 801129c:	6003      	str	r3, [r0, #0]
 801129e:	2001      	movs	r0, #1
 80112a0:	bd30      	pop	{r4, r5, pc}
 80112a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80112aa:	2d19      	cmp	r5, #25
 80112ac:	bf98      	it	ls
 80112ae:	3220      	addls	r2, #32
 80112b0:	42a2      	cmp	r2, r4
 80112b2:	d0f0      	beq.n	8011296 <__match+0x6>
 80112b4:	2000      	movs	r0, #0
 80112b6:	e7f3      	b.n	80112a0 <__match+0x10>

080112b8 <__hexnan>:
 80112b8:	680b      	ldr	r3, [r1, #0]
 80112ba:	6801      	ldr	r1, [r0, #0]
 80112bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c0:	115e      	asrs	r6, r3, #5
 80112c2:	f013 031f 	ands.w	r3, r3, #31
 80112c6:	f04f 0500 	mov.w	r5, #0
 80112ca:	b087      	sub	sp, #28
 80112cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80112d0:	4682      	mov	sl, r0
 80112d2:	4690      	mov	r8, r2
 80112d4:	46ab      	mov	fp, r5
 80112d6:	bf18      	it	ne
 80112d8:	3604      	addne	r6, #4
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	9502      	str	r5, [sp, #8]
 80112de:	1f37      	subs	r7, r6, #4
 80112e0:	f846 5c04 	str.w	r5, [r6, #-4]
 80112e4:	46b9      	mov	r9, r7
 80112e6:	463c      	mov	r4, r7
 80112e8:	1c4b      	adds	r3, r1, #1
 80112ea:	784a      	ldrb	r2, [r1, #1]
 80112ec:	9303      	str	r3, [sp, #12]
 80112ee:	b342      	cbz	r2, 8011342 <__hexnan+0x8a>
 80112f0:	4610      	mov	r0, r2
 80112f2:	9105      	str	r1, [sp, #20]
 80112f4:	9204      	str	r2, [sp, #16]
 80112f6:	f7ff fd96 	bl	8010e26 <__hexdig_fun>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d151      	bne.n	80113a2 <__hexnan+0xea>
 80112fe:	9a04      	ldr	r2, [sp, #16]
 8011300:	9905      	ldr	r1, [sp, #20]
 8011302:	2a20      	cmp	r2, #32
 8011304:	d818      	bhi.n	8011338 <__hexnan+0x80>
 8011306:	9b02      	ldr	r3, [sp, #8]
 8011308:	459b      	cmp	fp, r3
 801130a:	dd13      	ble.n	8011334 <__hexnan+0x7c>
 801130c:	454c      	cmp	r4, r9
 801130e:	d206      	bcs.n	801131e <__hexnan+0x66>
 8011310:	2d07      	cmp	r5, #7
 8011312:	dc04      	bgt.n	801131e <__hexnan+0x66>
 8011314:	462a      	mov	r2, r5
 8011316:	4649      	mov	r1, r9
 8011318:	4620      	mov	r0, r4
 801131a:	f7ff ffa7 	bl	801126c <L_shift>
 801131e:	4544      	cmp	r4, r8
 8011320:	d951      	bls.n	80113c6 <__hexnan+0x10e>
 8011322:	2300      	movs	r3, #0
 8011324:	f1a4 0904 	sub.w	r9, r4, #4
 8011328:	f8cd b008 	str.w	fp, [sp, #8]
 801132c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011330:	461d      	mov	r5, r3
 8011332:	464c      	mov	r4, r9
 8011334:	9903      	ldr	r1, [sp, #12]
 8011336:	e7d7      	b.n	80112e8 <__hexnan+0x30>
 8011338:	2a29      	cmp	r2, #41	@ 0x29
 801133a:	d156      	bne.n	80113ea <__hexnan+0x132>
 801133c:	3102      	adds	r1, #2
 801133e:	f8ca 1000 	str.w	r1, [sl]
 8011342:	f1bb 0f00 	cmp.w	fp, #0
 8011346:	d050      	beq.n	80113ea <__hexnan+0x132>
 8011348:	454c      	cmp	r4, r9
 801134a:	d206      	bcs.n	801135a <__hexnan+0xa2>
 801134c:	2d07      	cmp	r5, #7
 801134e:	dc04      	bgt.n	801135a <__hexnan+0xa2>
 8011350:	462a      	mov	r2, r5
 8011352:	4649      	mov	r1, r9
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff ff89 	bl	801126c <L_shift>
 801135a:	4544      	cmp	r4, r8
 801135c:	d935      	bls.n	80113ca <__hexnan+0x112>
 801135e:	f1a8 0204 	sub.w	r2, r8, #4
 8011362:	4623      	mov	r3, r4
 8011364:	f853 1b04 	ldr.w	r1, [r3], #4
 8011368:	429f      	cmp	r7, r3
 801136a:	f842 1f04 	str.w	r1, [r2, #4]!
 801136e:	d2f9      	bcs.n	8011364 <__hexnan+0xac>
 8011370:	1b3b      	subs	r3, r7, r4
 8011372:	3e03      	subs	r6, #3
 8011374:	3401      	adds	r4, #1
 8011376:	2200      	movs	r2, #0
 8011378:	f023 0303 	bic.w	r3, r3, #3
 801137c:	3304      	adds	r3, #4
 801137e:	42b4      	cmp	r4, r6
 8011380:	bf88      	it	hi
 8011382:	2304      	movhi	r3, #4
 8011384:	4443      	add	r3, r8
 8011386:	f843 2b04 	str.w	r2, [r3], #4
 801138a:	429f      	cmp	r7, r3
 801138c:	d2fb      	bcs.n	8011386 <__hexnan+0xce>
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	b91b      	cbnz	r3, 801139a <__hexnan+0xe2>
 8011392:	4547      	cmp	r7, r8
 8011394:	d127      	bne.n	80113e6 <__hexnan+0x12e>
 8011396:	2301      	movs	r3, #1
 8011398:	603b      	str	r3, [r7, #0]
 801139a:	2005      	movs	r0, #5
 801139c:	b007      	add	sp, #28
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	3501      	adds	r5, #1
 80113a4:	f10b 0b01 	add.w	fp, fp, #1
 80113a8:	2d08      	cmp	r5, #8
 80113aa:	dd05      	ble.n	80113b8 <__hexnan+0x100>
 80113ac:	4544      	cmp	r4, r8
 80113ae:	d9c1      	bls.n	8011334 <__hexnan+0x7c>
 80113b0:	2300      	movs	r3, #0
 80113b2:	3c04      	subs	r4, #4
 80113b4:	2501      	movs	r5, #1
 80113b6:	6023      	str	r3, [r4, #0]
 80113b8:	6822      	ldr	r2, [r4, #0]
 80113ba:	f000 000f 	and.w	r0, r0, #15
 80113be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80113c2:	6020      	str	r0, [r4, #0]
 80113c4:	e7b6      	b.n	8011334 <__hexnan+0x7c>
 80113c6:	2508      	movs	r5, #8
 80113c8:	e7b4      	b.n	8011334 <__hexnan+0x7c>
 80113ca:	9b01      	ldr	r3, [sp, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d0de      	beq.n	801138e <__hexnan+0xd6>
 80113d0:	f1c3 0320 	rsb	r3, r3, #32
 80113d4:	f04f 32ff 	mov.w	r2, #4294967295
 80113d8:	40da      	lsrs	r2, r3
 80113da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80113de:	4013      	ands	r3, r2
 80113e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80113e4:	e7d3      	b.n	801138e <__hexnan+0xd6>
 80113e6:	3f04      	subs	r7, #4
 80113e8:	e7d1      	b.n	801138e <__hexnan+0xd6>
 80113ea:	2004      	movs	r0, #4
 80113ec:	e7d6      	b.n	801139c <__hexnan+0xe4>

080113ee <__ascii_mbtowc>:
 80113ee:	b082      	sub	sp, #8
 80113f0:	b901      	cbnz	r1, 80113f4 <__ascii_mbtowc+0x6>
 80113f2:	a901      	add	r1, sp, #4
 80113f4:	b142      	cbz	r2, 8011408 <__ascii_mbtowc+0x1a>
 80113f6:	b14b      	cbz	r3, 801140c <__ascii_mbtowc+0x1e>
 80113f8:	7813      	ldrb	r3, [r2, #0]
 80113fa:	600b      	str	r3, [r1, #0]
 80113fc:	7812      	ldrb	r2, [r2, #0]
 80113fe:	1e10      	subs	r0, r2, #0
 8011400:	bf18      	it	ne
 8011402:	2001      	movne	r0, #1
 8011404:	b002      	add	sp, #8
 8011406:	4770      	bx	lr
 8011408:	4610      	mov	r0, r2
 801140a:	e7fb      	b.n	8011404 <__ascii_mbtowc+0x16>
 801140c:	f06f 0001 	mvn.w	r0, #1
 8011410:	e7f8      	b.n	8011404 <__ascii_mbtowc+0x16>

08011412 <_realloc_r>:
 8011412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011416:	4680      	mov	r8, r0
 8011418:	4615      	mov	r5, r2
 801141a:	460c      	mov	r4, r1
 801141c:	b921      	cbnz	r1, 8011428 <_realloc_r+0x16>
 801141e:	4611      	mov	r1, r2
 8011420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	f7fd bee0 	b.w	800f1e8 <_malloc_r>
 8011428:	b92a      	cbnz	r2, 8011436 <_realloc_r+0x24>
 801142a:	f7fd fe69 	bl	800f100 <_free_r>
 801142e:	2400      	movs	r4, #0
 8011430:	4620      	mov	r0, r4
 8011432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011436:	f000 f840 	bl	80114ba <_malloc_usable_size_r>
 801143a:	4285      	cmp	r5, r0
 801143c:	4606      	mov	r6, r0
 801143e:	d802      	bhi.n	8011446 <_realloc_r+0x34>
 8011440:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011444:	d8f4      	bhi.n	8011430 <_realloc_r+0x1e>
 8011446:	4629      	mov	r1, r5
 8011448:	4640      	mov	r0, r8
 801144a:	f7fd fecd 	bl	800f1e8 <_malloc_r>
 801144e:	4607      	mov	r7, r0
 8011450:	2800      	cmp	r0, #0
 8011452:	d0ec      	beq.n	801142e <_realloc_r+0x1c>
 8011454:	42b5      	cmp	r5, r6
 8011456:	462a      	mov	r2, r5
 8011458:	4621      	mov	r1, r4
 801145a:	bf28      	it	cs
 801145c:	4632      	movcs	r2, r6
 801145e:	f7fc ffea 	bl	800e436 <memcpy>
 8011462:	4621      	mov	r1, r4
 8011464:	4640      	mov	r0, r8
 8011466:	463c      	mov	r4, r7
 8011468:	f7fd fe4a 	bl	800f100 <_free_r>
 801146c:	e7e0      	b.n	8011430 <_realloc_r+0x1e>

0801146e <__ascii_wctomb>:
 801146e:	4603      	mov	r3, r0
 8011470:	4608      	mov	r0, r1
 8011472:	b141      	cbz	r1, 8011486 <__ascii_wctomb+0x18>
 8011474:	2aff      	cmp	r2, #255	@ 0xff
 8011476:	d904      	bls.n	8011482 <__ascii_wctomb+0x14>
 8011478:	228a      	movs	r2, #138	@ 0x8a
 801147a:	f04f 30ff 	mov.w	r0, #4294967295
 801147e:	601a      	str	r2, [r3, #0]
 8011480:	4770      	bx	lr
 8011482:	2001      	movs	r0, #1
 8011484:	700a      	strb	r2, [r1, #0]
 8011486:	4770      	bx	lr

08011488 <fiprintf>:
 8011488:	b40e      	push	{r1, r2, r3}
 801148a:	b503      	push	{r0, r1, lr}
 801148c:	ab03      	add	r3, sp, #12
 801148e:	4601      	mov	r1, r0
 8011490:	4805      	ldr	r0, [pc, #20]	@ (80114a8 <fiprintf+0x20>)
 8011492:	f853 2b04 	ldr.w	r2, [r3], #4
 8011496:	6800      	ldr	r0, [r0, #0]
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	f000 f83f 	bl	801151c <_vfiprintf_r>
 801149e:	b002      	add	sp, #8
 80114a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114a4:	b003      	add	sp, #12
 80114a6:	4770      	bx	lr
 80114a8:	20000034 	.word	0x20000034

080114ac <abort>:
 80114ac:	2006      	movs	r0, #6
 80114ae:	b508      	push	{r3, lr}
 80114b0:	f000 fa08 	bl	80118c4 <raise>
 80114b4:	2001      	movs	r0, #1
 80114b6:	f7f3 fcfb 	bl	8004eb0 <_exit>

080114ba <_malloc_usable_size_r>:
 80114ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114be:	1f18      	subs	r0, r3, #4
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	bfbc      	itt	lt
 80114c4:	580b      	ldrlt	r3, [r1, r0]
 80114c6:	18c0      	addlt	r0, r0, r3
 80114c8:	4770      	bx	lr

080114ca <__sfputc_r>:
 80114ca:	6893      	ldr	r3, [r2, #8]
 80114cc:	3b01      	subs	r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	6093      	str	r3, [r2, #8]
 80114d2:	b410      	push	{r4}
 80114d4:	da08      	bge.n	80114e8 <__sfputc_r+0x1e>
 80114d6:	6994      	ldr	r4, [r2, #24]
 80114d8:	42a3      	cmp	r3, r4
 80114da:	db01      	blt.n	80114e0 <__sfputc_r+0x16>
 80114dc:	290a      	cmp	r1, #10
 80114de:	d103      	bne.n	80114e8 <__sfputc_r+0x1e>
 80114e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114e4:	f000 b932 	b.w	801174c <__swbuf_r>
 80114e8:	6813      	ldr	r3, [r2, #0]
 80114ea:	1c58      	adds	r0, r3, #1
 80114ec:	6010      	str	r0, [r2, #0]
 80114ee:	4608      	mov	r0, r1
 80114f0:	7019      	strb	r1, [r3, #0]
 80114f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <__sfputs_r>:
 80114f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fa:	4606      	mov	r6, r0
 80114fc:	460f      	mov	r7, r1
 80114fe:	4614      	mov	r4, r2
 8011500:	18d5      	adds	r5, r2, r3
 8011502:	42ac      	cmp	r4, r5
 8011504:	d101      	bne.n	801150a <__sfputs_r+0x12>
 8011506:	2000      	movs	r0, #0
 8011508:	e007      	b.n	801151a <__sfputs_r+0x22>
 801150a:	463a      	mov	r2, r7
 801150c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011510:	4630      	mov	r0, r6
 8011512:	f7ff ffda 	bl	80114ca <__sfputc_r>
 8011516:	1c43      	adds	r3, r0, #1
 8011518:	d1f3      	bne.n	8011502 <__sfputs_r+0xa>
 801151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801151c <_vfiprintf_r>:
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	460d      	mov	r5, r1
 8011522:	b09d      	sub	sp, #116	@ 0x74
 8011524:	4614      	mov	r4, r2
 8011526:	4698      	mov	r8, r3
 8011528:	4606      	mov	r6, r0
 801152a:	b118      	cbz	r0, 8011534 <_vfiprintf_r+0x18>
 801152c:	6a03      	ldr	r3, [r0, #32]
 801152e:	b90b      	cbnz	r3, 8011534 <_vfiprintf_r+0x18>
 8011530:	f7fc fe5a 	bl	800e1e8 <__sinit>
 8011534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011536:	07d9      	lsls	r1, r3, #31
 8011538:	d405      	bmi.n	8011546 <_vfiprintf_r+0x2a>
 801153a:	89ab      	ldrh	r3, [r5, #12]
 801153c:	059a      	lsls	r2, r3, #22
 801153e:	d402      	bmi.n	8011546 <_vfiprintf_r+0x2a>
 8011540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011542:	f7fc ff68 	bl	800e416 <__retarget_lock_acquire_recursive>
 8011546:	89ab      	ldrh	r3, [r5, #12]
 8011548:	071b      	lsls	r3, r3, #28
 801154a:	d501      	bpl.n	8011550 <_vfiprintf_r+0x34>
 801154c:	692b      	ldr	r3, [r5, #16]
 801154e:	b99b      	cbnz	r3, 8011578 <_vfiprintf_r+0x5c>
 8011550:	4629      	mov	r1, r5
 8011552:	4630      	mov	r0, r6
 8011554:	f000 f938 	bl	80117c8 <__swsetup_r>
 8011558:	b170      	cbz	r0, 8011578 <_vfiprintf_r+0x5c>
 801155a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801155c:	07dc      	lsls	r4, r3, #31
 801155e:	d504      	bpl.n	801156a <_vfiprintf_r+0x4e>
 8011560:	f04f 30ff 	mov.w	r0, #4294967295
 8011564:	b01d      	add	sp, #116	@ 0x74
 8011566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156a:	89ab      	ldrh	r3, [r5, #12]
 801156c:	0598      	lsls	r0, r3, #22
 801156e:	d4f7      	bmi.n	8011560 <_vfiprintf_r+0x44>
 8011570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011572:	f7fc ff51 	bl	800e418 <__retarget_lock_release_recursive>
 8011576:	e7f3      	b.n	8011560 <_vfiprintf_r+0x44>
 8011578:	2300      	movs	r3, #0
 801157a:	f8cd 800c 	str.w	r8, [sp, #12]
 801157e:	f04f 0901 	mov.w	r9, #1
 8011582:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011738 <_vfiprintf_r+0x21c>
 8011586:	9309      	str	r3, [sp, #36]	@ 0x24
 8011588:	2320      	movs	r3, #32
 801158a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801158e:	2330      	movs	r3, #48	@ 0x30
 8011590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011594:	4623      	mov	r3, r4
 8011596:	469a      	mov	sl, r3
 8011598:	f813 2b01 	ldrb.w	r2, [r3], #1
 801159c:	b10a      	cbz	r2, 80115a2 <_vfiprintf_r+0x86>
 801159e:	2a25      	cmp	r2, #37	@ 0x25
 80115a0:	d1f9      	bne.n	8011596 <_vfiprintf_r+0x7a>
 80115a2:	ebba 0b04 	subs.w	fp, sl, r4
 80115a6:	d00b      	beq.n	80115c0 <_vfiprintf_r+0xa4>
 80115a8:	465b      	mov	r3, fp
 80115aa:	4622      	mov	r2, r4
 80115ac:	4629      	mov	r1, r5
 80115ae:	4630      	mov	r0, r6
 80115b0:	f7ff ffa2 	bl	80114f8 <__sfputs_r>
 80115b4:	3001      	adds	r0, #1
 80115b6:	f000 80a7 	beq.w	8011708 <_vfiprintf_r+0x1ec>
 80115ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115bc:	445a      	add	r2, fp
 80115be:	9209      	str	r2, [sp, #36]	@ 0x24
 80115c0:	f89a 3000 	ldrb.w	r3, [sl]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	f000 809f 	beq.w	8011708 <_vfiprintf_r+0x1ec>
 80115ca:	2300      	movs	r3, #0
 80115cc:	f04f 32ff 	mov.w	r2, #4294967295
 80115d0:	f10a 0a01 	add.w	sl, sl, #1
 80115d4:	9304      	str	r3, [sp, #16]
 80115d6:	9307      	str	r3, [sp, #28]
 80115d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80115de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115e2:	4654      	mov	r4, sl
 80115e4:	2205      	movs	r2, #5
 80115e6:	4854      	ldr	r0, [pc, #336]	@ (8011738 <_vfiprintf_r+0x21c>)
 80115e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115ec:	f7fc ff15 	bl	800e41a <memchr>
 80115f0:	9a04      	ldr	r2, [sp, #16]
 80115f2:	b9d8      	cbnz	r0, 801162c <_vfiprintf_r+0x110>
 80115f4:	06d1      	lsls	r1, r2, #27
 80115f6:	bf44      	itt	mi
 80115f8:	2320      	movmi	r3, #32
 80115fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115fe:	0713      	lsls	r3, r2, #28
 8011600:	bf44      	itt	mi
 8011602:	232b      	movmi	r3, #43	@ 0x2b
 8011604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011608:	f89a 3000 	ldrb.w	r3, [sl]
 801160c:	2b2a      	cmp	r3, #42	@ 0x2a
 801160e:	d015      	beq.n	801163c <_vfiprintf_r+0x120>
 8011610:	9a07      	ldr	r2, [sp, #28]
 8011612:	4654      	mov	r4, sl
 8011614:	2000      	movs	r0, #0
 8011616:	f04f 0c0a 	mov.w	ip, #10
 801161a:	4621      	mov	r1, r4
 801161c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011620:	3b30      	subs	r3, #48	@ 0x30
 8011622:	2b09      	cmp	r3, #9
 8011624:	d94b      	bls.n	80116be <_vfiprintf_r+0x1a2>
 8011626:	b1b0      	cbz	r0, 8011656 <_vfiprintf_r+0x13a>
 8011628:	9207      	str	r2, [sp, #28]
 801162a:	e014      	b.n	8011656 <_vfiprintf_r+0x13a>
 801162c:	eba0 0308 	sub.w	r3, r0, r8
 8011630:	46a2      	mov	sl, r4
 8011632:	fa09 f303 	lsl.w	r3, r9, r3
 8011636:	4313      	orrs	r3, r2
 8011638:	9304      	str	r3, [sp, #16]
 801163a:	e7d2      	b.n	80115e2 <_vfiprintf_r+0xc6>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	1d19      	adds	r1, r3, #4
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	9103      	str	r1, [sp, #12]
 8011646:	bfbb      	ittet	lt
 8011648:	425b      	neglt	r3, r3
 801164a:	f042 0202 	orrlt.w	r2, r2, #2
 801164e:	9307      	strge	r3, [sp, #28]
 8011650:	9307      	strlt	r3, [sp, #28]
 8011652:	bfb8      	it	lt
 8011654:	9204      	strlt	r2, [sp, #16]
 8011656:	7823      	ldrb	r3, [r4, #0]
 8011658:	2b2e      	cmp	r3, #46	@ 0x2e
 801165a:	d10a      	bne.n	8011672 <_vfiprintf_r+0x156>
 801165c:	7863      	ldrb	r3, [r4, #1]
 801165e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011660:	d132      	bne.n	80116c8 <_vfiprintf_r+0x1ac>
 8011662:	9b03      	ldr	r3, [sp, #12]
 8011664:	3402      	adds	r4, #2
 8011666:	1d1a      	adds	r2, r3, #4
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801166e:	9203      	str	r2, [sp, #12]
 8011670:	9305      	str	r3, [sp, #20]
 8011672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011748 <_vfiprintf_r+0x22c>
 8011676:	2203      	movs	r2, #3
 8011678:	7821      	ldrb	r1, [r4, #0]
 801167a:	4650      	mov	r0, sl
 801167c:	f7fc fecd 	bl	800e41a <memchr>
 8011680:	b138      	cbz	r0, 8011692 <_vfiprintf_r+0x176>
 8011682:	eba0 000a 	sub.w	r0, r0, sl
 8011686:	2240      	movs	r2, #64	@ 0x40
 8011688:	9b04      	ldr	r3, [sp, #16]
 801168a:	3401      	adds	r4, #1
 801168c:	4082      	lsls	r2, r0
 801168e:	4313      	orrs	r3, r2
 8011690:	9304      	str	r3, [sp, #16]
 8011692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011696:	2206      	movs	r2, #6
 8011698:	4828      	ldr	r0, [pc, #160]	@ (801173c <_vfiprintf_r+0x220>)
 801169a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801169e:	f7fc febc 	bl	800e41a <memchr>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d03f      	beq.n	8011726 <_vfiprintf_r+0x20a>
 80116a6:	4b26      	ldr	r3, [pc, #152]	@ (8011740 <_vfiprintf_r+0x224>)
 80116a8:	bb1b      	cbnz	r3, 80116f2 <_vfiprintf_r+0x1d6>
 80116aa:	9b03      	ldr	r3, [sp, #12]
 80116ac:	3307      	adds	r3, #7
 80116ae:	f023 0307 	bic.w	r3, r3, #7
 80116b2:	3308      	adds	r3, #8
 80116b4:	9303      	str	r3, [sp, #12]
 80116b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116b8:	443b      	add	r3, r7
 80116ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80116bc:	e76a      	b.n	8011594 <_vfiprintf_r+0x78>
 80116be:	fb0c 3202 	mla	r2, ip, r2, r3
 80116c2:	460c      	mov	r4, r1
 80116c4:	2001      	movs	r0, #1
 80116c6:	e7a8      	b.n	801161a <_vfiprintf_r+0xfe>
 80116c8:	2300      	movs	r3, #0
 80116ca:	3401      	adds	r4, #1
 80116cc:	f04f 0c0a 	mov.w	ip, #10
 80116d0:	4619      	mov	r1, r3
 80116d2:	9305      	str	r3, [sp, #20]
 80116d4:	4620      	mov	r0, r4
 80116d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116da:	3a30      	subs	r2, #48	@ 0x30
 80116dc:	2a09      	cmp	r2, #9
 80116de:	d903      	bls.n	80116e8 <_vfiprintf_r+0x1cc>
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0c6      	beq.n	8011672 <_vfiprintf_r+0x156>
 80116e4:	9105      	str	r1, [sp, #20]
 80116e6:	e7c4      	b.n	8011672 <_vfiprintf_r+0x156>
 80116e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ec:	4604      	mov	r4, r0
 80116ee:	2301      	movs	r3, #1
 80116f0:	e7f0      	b.n	80116d4 <_vfiprintf_r+0x1b8>
 80116f2:	ab03      	add	r3, sp, #12
 80116f4:	462a      	mov	r2, r5
 80116f6:	a904      	add	r1, sp, #16
 80116f8:	4630      	mov	r0, r6
 80116fa:	9300      	str	r3, [sp, #0]
 80116fc:	4b11      	ldr	r3, [pc, #68]	@ (8011744 <_vfiprintf_r+0x228>)
 80116fe:	f7fb ff19 	bl	800d534 <_printf_float>
 8011702:	4607      	mov	r7, r0
 8011704:	1c78      	adds	r0, r7, #1
 8011706:	d1d6      	bne.n	80116b6 <_vfiprintf_r+0x19a>
 8011708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801170a:	07d9      	lsls	r1, r3, #31
 801170c:	d405      	bmi.n	801171a <_vfiprintf_r+0x1fe>
 801170e:	89ab      	ldrh	r3, [r5, #12]
 8011710:	059a      	lsls	r2, r3, #22
 8011712:	d402      	bmi.n	801171a <_vfiprintf_r+0x1fe>
 8011714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011716:	f7fc fe7f 	bl	800e418 <__retarget_lock_release_recursive>
 801171a:	89ab      	ldrh	r3, [r5, #12]
 801171c:	065b      	lsls	r3, r3, #25
 801171e:	f53f af1f 	bmi.w	8011560 <_vfiprintf_r+0x44>
 8011722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011724:	e71e      	b.n	8011564 <_vfiprintf_r+0x48>
 8011726:	ab03      	add	r3, sp, #12
 8011728:	462a      	mov	r2, r5
 801172a:	a904      	add	r1, sp, #16
 801172c:	4630      	mov	r0, r6
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	4b04      	ldr	r3, [pc, #16]	@ (8011744 <_vfiprintf_r+0x228>)
 8011732:	f7fc f99b 	bl	800da6c <_printf_i>
 8011736:	e7e4      	b.n	8011702 <_vfiprintf_r+0x1e6>
 8011738:	08014878 	.word	0x08014878
 801173c:	08014882 	.word	0x08014882
 8011740:	0800d535 	.word	0x0800d535
 8011744:	080114f9 	.word	0x080114f9
 8011748:	0801487e 	.word	0x0801487e

0801174c <__swbuf_r>:
 801174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174e:	460e      	mov	r6, r1
 8011750:	4614      	mov	r4, r2
 8011752:	4605      	mov	r5, r0
 8011754:	b118      	cbz	r0, 801175e <__swbuf_r+0x12>
 8011756:	6a03      	ldr	r3, [r0, #32]
 8011758:	b90b      	cbnz	r3, 801175e <__swbuf_r+0x12>
 801175a:	f7fc fd45 	bl	800e1e8 <__sinit>
 801175e:	69a3      	ldr	r3, [r4, #24]
 8011760:	60a3      	str	r3, [r4, #8]
 8011762:	89a3      	ldrh	r3, [r4, #12]
 8011764:	071a      	lsls	r2, r3, #28
 8011766:	d501      	bpl.n	801176c <__swbuf_r+0x20>
 8011768:	6923      	ldr	r3, [r4, #16]
 801176a:	b943      	cbnz	r3, 801177e <__swbuf_r+0x32>
 801176c:	4621      	mov	r1, r4
 801176e:	4628      	mov	r0, r5
 8011770:	f000 f82a 	bl	80117c8 <__swsetup_r>
 8011774:	b118      	cbz	r0, 801177e <__swbuf_r+0x32>
 8011776:	f04f 37ff 	mov.w	r7, #4294967295
 801177a:	4638      	mov	r0, r7
 801177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	b2f6      	uxtb	r6, r6
 8011782:	6922      	ldr	r2, [r4, #16]
 8011784:	4637      	mov	r7, r6
 8011786:	1a98      	subs	r0, r3, r2
 8011788:	6963      	ldr	r3, [r4, #20]
 801178a:	4283      	cmp	r3, r0
 801178c:	dc05      	bgt.n	801179a <__swbuf_r+0x4e>
 801178e:	4621      	mov	r1, r4
 8011790:	4628      	mov	r0, r5
 8011792:	f7ff fa57 	bl	8010c44 <_fflush_r>
 8011796:	2800      	cmp	r0, #0
 8011798:	d1ed      	bne.n	8011776 <__swbuf_r+0x2a>
 801179a:	68a3      	ldr	r3, [r4, #8]
 801179c:	3b01      	subs	r3, #1
 801179e:	60a3      	str	r3, [r4, #8]
 80117a0:	6823      	ldr	r3, [r4, #0]
 80117a2:	1c5a      	adds	r2, r3, #1
 80117a4:	6022      	str	r2, [r4, #0]
 80117a6:	701e      	strb	r6, [r3, #0]
 80117a8:	1c43      	adds	r3, r0, #1
 80117aa:	6962      	ldr	r2, [r4, #20]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d004      	beq.n	80117ba <__swbuf_r+0x6e>
 80117b0:	89a3      	ldrh	r3, [r4, #12]
 80117b2:	07db      	lsls	r3, r3, #31
 80117b4:	d5e1      	bpl.n	801177a <__swbuf_r+0x2e>
 80117b6:	2e0a      	cmp	r6, #10
 80117b8:	d1df      	bne.n	801177a <__swbuf_r+0x2e>
 80117ba:	4621      	mov	r1, r4
 80117bc:	4628      	mov	r0, r5
 80117be:	f7ff fa41 	bl	8010c44 <_fflush_r>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d0d9      	beq.n	801177a <__swbuf_r+0x2e>
 80117c6:	e7d6      	b.n	8011776 <__swbuf_r+0x2a>

080117c8 <__swsetup_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4b29      	ldr	r3, [pc, #164]	@ (8011870 <__swsetup_r+0xa8>)
 80117cc:	4605      	mov	r5, r0
 80117ce:	460c      	mov	r4, r1
 80117d0:	6818      	ldr	r0, [r3, #0]
 80117d2:	b118      	cbz	r0, 80117dc <__swsetup_r+0x14>
 80117d4:	6a03      	ldr	r3, [r0, #32]
 80117d6:	b90b      	cbnz	r3, 80117dc <__swsetup_r+0x14>
 80117d8:	f7fc fd06 	bl	800e1e8 <__sinit>
 80117dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117e0:	0719      	lsls	r1, r3, #28
 80117e2:	d422      	bmi.n	801182a <__swsetup_r+0x62>
 80117e4:	06da      	lsls	r2, r3, #27
 80117e6:	d407      	bmi.n	80117f8 <__swsetup_r+0x30>
 80117e8:	2209      	movs	r2, #9
 80117ea:	602a      	str	r2, [r5, #0]
 80117ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117f0:	f04f 30ff 	mov.w	r0, #4294967295
 80117f4:	81a3      	strh	r3, [r4, #12]
 80117f6:	e033      	b.n	8011860 <__swsetup_r+0x98>
 80117f8:	0758      	lsls	r0, r3, #29
 80117fa:	d512      	bpl.n	8011822 <__swsetup_r+0x5a>
 80117fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117fe:	b141      	cbz	r1, 8011812 <__swsetup_r+0x4a>
 8011800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011804:	4299      	cmp	r1, r3
 8011806:	d002      	beq.n	801180e <__swsetup_r+0x46>
 8011808:	4628      	mov	r0, r5
 801180a:	f7fd fc79 	bl	800f100 <_free_r>
 801180e:	2300      	movs	r3, #0
 8011810:	6363      	str	r3, [r4, #52]	@ 0x34
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011818:	81a3      	strh	r3, [r4, #12]
 801181a:	2300      	movs	r3, #0
 801181c:	6063      	str	r3, [r4, #4]
 801181e:	6923      	ldr	r3, [r4, #16]
 8011820:	6023      	str	r3, [r4, #0]
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	f043 0308 	orr.w	r3, r3, #8
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	b94b      	cbnz	r3, 8011842 <__swsetup_r+0x7a>
 801182e:	89a3      	ldrh	r3, [r4, #12]
 8011830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011838:	d003      	beq.n	8011842 <__swsetup_r+0x7a>
 801183a:	4621      	mov	r1, r4
 801183c:	4628      	mov	r0, r5
 801183e:	f000 f882 	bl	8011946 <__smakebuf_r>
 8011842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011846:	f013 0201 	ands.w	r2, r3, #1
 801184a:	d00a      	beq.n	8011862 <__swsetup_r+0x9a>
 801184c:	2200      	movs	r2, #0
 801184e:	60a2      	str	r2, [r4, #8]
 8011850:	6962      	ldr	r2, [r4, #20]
 8011852:	4252      	negs	r2, r2
 8011854:	61a2      	str	r2, [r4, #24]
 8011856:	6922      	ldr	r2, [r4, #16]
 8011858:	b942      	cbnz	r2, 801186c <__swsetup_r+0xa4>
 801185a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801185e:	d1c5      	bne.n	80117ec <__swsetup_r+0x24>
 8011860:	bd38      	pop	{r3, r4, r5, pc}
 8011862:	0799      	lsls	r1, r3, #30
 8011864:	bf58      	it	pl
 8011866:	6962      	ldrpl	r2, [r4, #20]
 8011868:	60a2      	str	r2, [r4, #8]
 801186a:	e7f4      	b.n	8011856 <__swsetup_r+0x8e>
 801186c:	2000      	movs	r0, #0
 801186e:	e7f7      	b.n	8011860 <__swsetup_r+0x98>
 8011870:	20000034 	.word	0x20000034

08011874 <_raise_r>:
 8011874:	291f      	cmp	r1, #31
 8011876:	b538      	push	{r3, r4, r5, lr}
 8011878:	4605      	mov	r5, r0
 801187a:	460c      	mov	r4, r1
 801187c:	d904      	bls.n	8011888 <_raise_r+0x14>
 801187e:	2316      	movs	r3, #22
 8011880:	6003      	str	r3, [r0, #0]
 8011882:	f04f 30ff 	mov.w	r0, #4294967295
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801188a:	b112      	cbz	r2, 8011892 <_raise_r+0x1e>
 801188c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011890:	b94b      	cbnz	r3, 80118a6 <_raise_r+0x32>
 8011892:	4628      	mov	r0, r5
 8011894:	f000 f830 	bl	80118f8 <_getpid_r>
 8011898:	4622      	mov	r2, r4
 801189a:	4601      	mov	r1, r0
 801189c:	4628      	mov	r0, r5
 801189e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a2:	f000 b817 	b.w	80118d4 <_kill_r>
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d00a      	beq.n	80118c0 <_raise_r+0x4c>
 80118aa:	1c59      	adds	r1, r3, #1
 80118ac:	d103      	bne.n	80118b6 <_raise_r+0x42>
 80118ae:	2316      	movs	r3, #22
 80118b0:	6003      	str	r3, [r0, #0]
 80118b2:	2001      	movs	r0, #1
 80118b4:	e7e7      	b.n	8011886 <_raise_r+0x12>
 80118b6:	2100      	movs	r1, #0
 80118b8:	4620      	mov	r0, r4
 80118ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80118be:	4798      	blx	r3
 80118c0:	2000      	movs	r0, #0
 80118c2:	e7e0      	b.n	8011886 <_raise_r+0x12>

080118c4 <raise>:
 80118c4:	4b02      	ldr	r3, [pc, #8]	@ (80118d0 <raise+0xc>)
 80118c6:	4601      	mov	r1, r0
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	f7ff bfd3 	b.w	8011874 <_raise_r>
 80118ce:	bf00      	nop
 80118d0:	20000034 	.word	0x20000034

080118d4 <_kill_r>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	2300      	movs	r3, #0
 80118d8:	4d06      	ldr	r5, [pc, #24]	@ (80118f4 <_kill_r+0x20>)
 80118da:	4604      	mov	r4, r0
 80118dc:	4608      	mov	r0, r1
 80118de:	4611      	mov	r1, r2
 80118e0:	602b      	str	r3, [r5, #0]
 80118e2:	f7f3 fad5 	bl	8004e90 <_kill>
 80118e6:	1c43      	adds	r3, r0, #1
 80118e8:	d102      	bne.n	80118f0 <_kill_r+0x1c>
 80118ea:	682b      	ldr	r3, [r5, #0]
 80118ec:	b103      	cbz	r3, 80118f0 <_kill_r+0x1c>
 80118ee:	6023      	str	r3, [r4, #0]
 80118f0:	bd38      	pop	{r3, r4, r5, pc}
 80118f2:	bf00      	nop
 80118f4:	2003b3b4 	.word	0x2003b3b4

080118f8 <_getpid_r>:
 80118f8:	f7f3 bac2 	b.w	8004e80 <_getpid>

080118fc <__swhatbuf_r>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	460c      	mov	r4, r1
 8011900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011904:	b096      	sub	sp, #88	@ 0x58
 8011906:	4615      	mov	r5, r2
 8011908:	2900      	cmp	r1, #0
 801190a:	461e      	mov	r6, r3
 801190c:	da0c      	bge.n	8011928 <__swhatbuf_r+0x2c>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	2100      	movs	r1, #0
 8011912:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011916:	bf14      	ite	ne
 8011918:	2340      	movne	r3, #64	@ 0x40
 801191a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801191e:	2000      	movs	r0, #0
 8011920:	6031      	str	r1, [r6, #0]
 8011922:	602b      	str	r3, [r5, #0]
 8011924:	b016      	add	sp, #88	@ 0x58
 8011926:	bd70      	pop	{r4, r5, r6, pc}
 8011928:	466a      	mov	r2, sp
 801192a:	f000 f849 	bl	80119c0 <_fstat_r>
 801192e:	2800      	cmp	r0, #0
 8011930:	dbed      	blt.n	801190e <__swhatbuf_r+0x12>
 8011932:	9901      	ldr	r1, [sp, #4]
 8011934:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011938:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801193c:	4259      	negs	r1, r3
 801193e:	4159      	adcs	r1, r3
 8011940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011944:	e7eb      	b.n	801191e <__swhatbuf_r+0x22>

08011946 <__smakebuf_r>:
 8011946:	898b      	ldrh	r3, [r1, #12]
 8011948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801194a:	079d      	lsls	r5, r3, #30
 801194c:	4606      	mov	r6, r0
 801194e:	460c      	mov	r4, r1
 8011950:	d507      	bpl.n	8011962 <__smakebuf_r+0x1c>
 8011952:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011956:	6023      	str	r3, [r4, #0]
 8011958:	6123      	str	r3, [r4, #16]
 801195a:	2301      	movs	r3, #1
 801195c:	6163      	str	r3, [r4, #20]
 801195e:	b003      	add	sp, #12
 8011960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011962:	ab01      	add	r3, sp, #4
 8011964:	466a      	mov	r2, sp
 8011966:	f7ff ffc9 	bl	80118fc <__swhatbuf_r>
 801196a:	9f00      	ldr	r7, [sp, #0]
 801196c:	4605      	mov	r5, r0
 801196e:	4630      	mov	r0, r6
 8011970:	4639      	mov	r1, r7
 8011972:	f7fd fc39 	bl	800f1e8 <_malloc_r>
 8011976:	b948      	cbnz	r0, 801198c <__smakebuf_r+0x46>
 8011978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801197c:	059a      	lsls	r2, r3, #22
 801197e:	d4ee      	bmi.n	801195e <__smakebuf_r+0x18>
 8011980:	f023 0303 	bic.w	r3, r3, #3
 8011984:	f043 0302 	orr.w	r3, r3, #2
 8011988:	81a3      	strh	r3, [r4, #12]
 801198a:	e7e2      	b.n	8011952 <__smakebuf_r+0xc>
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	6020      	str	r0, [r4, #0]
 8011990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011994:	81a3      	strh	r3, [r4, #12]
 8011996:	9b01      	ldr	r3, [sp, #4]
 8011998:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801199c:	b15b      	cbz	r3, 80119b6 <__smakebuf_r+0x70>
 801199e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119a2:	4630      	mov	r0, r6
 80119a4:	f000 f81e 	bl	80119e4 <_isatty_r>
 80119a8:	b128      	cbz	r0, 80119b6 <__smakebuf_r+0x70>
 80119aa:	89a3      	ldrh	r3, [r4, #12]
 80119ac:	f023 0303 	bic.w	r3, r3, #3
 80119b0:	f043 0301 	orr.w	r3, r3, #1
 80119b4:	81a3      	strh	r3, [r4, #12]
 80119b6:	89a3      	ldrh	r3, [r4, #12]
 80119b8:	431d      	orrs	r5, r3
 80119ba:	81a5      	strh	r5, [r4, #12]
 80119bc:	e7cf      	b.n	801195e <__smakebuf_r+0x18>
	...

080119c0 <_fstat_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	2300      	movs	r3, #0
 80119c4:	4d06      	ldr	r5, [pc, #24]	@ (80119e0 <_fstat_r+0x20>)
 80119c6:	4604      	mov	r4, r0
 80119c8:	4608      	mov	r0, r1
 80119ca:	4611      	mov	r1, r2
 80119cc:	602b      	str	r3, [r5, #0]
 80119ce:	f7f3 fabf 	bl	8004f50 <_fstat>
 80119d2:	1c43      	adds	r3, r0, #1
 80119d4:	d102      	bne.n	80119dc <_fstat_r+0x1c>
 80119d6:	682b      	ldr	r3, [r5, #0]
 80119d8:	b103      	cbz	r3, 80119dc <_fstat_r+0x1c>
 80119da:	6023      	str	r3, [r4, #0]
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	2003b3b4 	.word	0x2003b3b4

080119e4 <_isatty_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	2300      	movs	r3, #0
 80119e8:	4d05      	ldr	r5, [pc, #20]	@ (8011a00 <_isatty_r+0x1c>)
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	f7f3 fabe 	bl	8004f70 <_isatty>
 80119f4:	1c43      	adds	r3, r0, #1
 80119f6:	d102      	bne.n	80119fe <_isatty_r+0x1a>
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	b103      	cbz	r3, 80119fe <_isatty_r+0x1a>
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	2003b3b4 	.word	0x2003b3b4

08011a04 <atan2>:
 8011a04:	f000 bbb4 	b.w	8012170 <__ieee754_atan2>

08011a08 <pow>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	ec55 4b11 	vmov	r4, r5, d1
 8011a0e:	ed2d 8b02 	vpush	{d8}
 8011a12:	eeb0 8a40 	vmov.f32	s16, s0
 8011a16:	eef0 8a60 	vmov.f32	s17, s1
 8011a1a:	f000 fc71 	bl	8012300 <__ieee754_pow>
 8011a1e:	4622      	mov	r2, r4
 8011a20:	462b      	mov	r3, r5
 8011a22:	4620      	mov	r0, r4
 8011a24:	4629      	mov	r1, r5
 8011a26:	ec57 6b10 	vmov	r6, r7, d0
 8011a2a:	f7ef f893 	bl	8000b54 <__aeabi_dcmpun>
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d13b      	bne.n	8011aaa <pow+0xa2>
 8011a32:	2200      	movs	r2, #0
 8011a34:	2300      	movs	r3, #0
 8011a36:	ec51 0b18 	vmov	r0, r1, d8
 8011a3a:	f7ef f859 	bl	8000af0 <__aeabi_dcmpeq>
 8011a3e:	b1b8      	cbz	r0, 8011a70 <pow+0x68>
 8011a40:	2200      	movs	r2, #0
 8011a42:	2300      	movs	r3, #0
 8011a44:	4620      	mov	r0, r4
 8011a46:	4629      	mov	r1, r5
 8011a48:	f7ef f852 	bl	8000af0 <__aeabi_dcmpeq>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d146      	bne.n	8011ade <pow+0xd6>
 8011a50:	ec45 4b10 	vmov	d0, r4, r5
 8011a54:	f000 f91c 	bl	8011c90 <finite>
 8011a58:	b338      	cbz	r0, 8011aaa <pow+0xa2>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4620      	mov	r0, r4
 8011a60:	4629      	mov	r1, r5
 8011a62:	f7ef f84f 	bl	8000b04 <__aeabi_dcmplt>
 8011a66:	b300      	cbz	r0, 8011aaa <pow+0xa2>
 8011a68:	f7fc fcaa 	bl	800e3c0 <__errno>
 8011a6c:	2322      	movs	r3, #34	@ 0x22
 8011a6e:	e01b      	b.n	8011aa8 <pow+0xa0>
 8011a70:	ec47 6b10 	vmov	d0, r6, r7
 8011a74:	f000 f90c 	bl	8011c90 <finite>
 8011a78:	b9e0      	cbnz	r0, 8011ab4 <pow+0xac>
 8011a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a7e:	eef0 0a68 	vmov.f32	s1, s17
 8011a82:	f000 f905 	bl	8011c90 <finite>
 8011a86:	b1a8      	cbz	r0, 8011ab4 <pow+0xac>
 8011a88:	ec45 4b10 	vmov	d0, r4, r5
 8011a8c:	f000 f900 	bl	8011c90 <finite>
 8011a90:	b180      	cbz	r0, 8011ab4 <pow+0xac>
 8011a92:	4632      	mov	r2, r6
 8011a94:	463b      	mov	r3, r7
 8011a96:	4630      	mov	r0, r6
 8011a98:	4639      	mov	r1, r7
 8011a9a:	f7ef f85b 	bl	8000b54 <__aeabi_dcmpun>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d0e2      	beq.n	8011a68 <pow+0x60>
 8011aa2:	f7fc fc8d 	bl	800e3c0 <__errno>
 8011aa6:	2321      	movs	r3, #33	@ 0x21
 8011aa8:	6003      	str	r3, [r0, #0]
 8011aaa:	ecbd 8b02 	vpop	{d8}
 8011aae:	ec47 6b10 	vmov	d0, r6, r7
 8011ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	4630      	mov	r0, r6
 8011aba:	4639      	mov	r1, r7
 8011abc:	f7ef f818 	bl	8000af0 <__aeabi_dcmpeq>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d0f2      	beq.n	8011aaa <pow+0xa2>
 8011ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ac8:	eef0 0a68 	vmov.f32	s1, s17
 8011acc:	f000 f8e0 	bl	8011c90 <finite>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0ea      	beq.n	8011aaa <pow+0xa2>
 8011ad4:	ec45 4b10 	vmov	d0, r4, r5
 8011ad8:	f000 f8da 	bl	8011c90 <finite>
 8011adc:	e7c3      	b.n	8011a66 <pow+0x5e>
 8011ade:	2600      	movs	r6, #0
 8011ae0:	4f00      	ldr	r7, [pc, #0]	@ (8011ae4 <pow+0xdc>)
 8011ae2:	e7e2      	b.n	8011aaa <pow+0xa2>
 8011ae4:	3ff00000 	.word	0x3ff00000

08011ae8 <sqrt>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	ec55 4b10 	vmov	r4, r5, d0
 8011aee:	ed2d 8b02 	vpush	{d8}
 8011af2:	f000 f8d9 	bl	8011ca8 <__ieee754_sqrt>
 8011af6:	4622      	mov	r2, r4
 8011af8:	462b      	mov	r3, r5
 8011afa:	4620      	mov	r0, r4
 8011afc:	4629      	mov	r1, r5
 8011afe:	eeb0 8a40 	vmov.f32	s16, s0
 8011b02:	eef0 8a60 	vmov.f32	s17, s1
 8011b06:	f7ef f825 	bl	8000b54 <__aeabi_dcmpun>
 8011b0a:	b990      	cbnz	r0, 8011b32 <sqrt+0x4a>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	2300      	movs	r3, #0
 8011b10:	4620      	mov	r0, r4
 8011b12:	4629      	mov	r1, r5
 8011b14:	f7ee fff6 	bl	8000b04 <__aeabi_dcmplt>
 8011b18:	b158      	cbz	r0, 8011b32 <sqrt+0x4a>
 8011b1a:	f7fc fc51 	bl	800e3c0 <__errno>
 8011b1e:	2321      	movs	r3, #33	@ 0x21
 8011b20:	2200      	movs	r2, #0
 8011b22:	6003      	str	r3, [r0, #0]
 8011b24:	2300      	movs	r3, #0
 8011b26:	4610      	mov	r0, r2
 8011b28:	4619      	mov	r1, r3
 8011b2a:	f7ee fea3 	bl	8000874 <__aeabi_ddiv>
 8011b2e:	ec41 0b18 	vmov	d8, r0, r1
 8011b32:	eeb0 0a48 	vmov.f32	s0, s16
 8011b36:	eef0 0a68 	vmov.f32	s1, s17
 8011b3a:	ecbd 8b02 	vpop	{d8}
 8011b3e:	bd38      	pop	{r3, r4, r5, pc}

08011b40 <cos>:
 8011b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b42:	ec53 2b10 	vmov	r2, r3, d0
 8011b46:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011b4a:	4825      	ldr	r0, [pc, #148]	@ (8011be0 <cos+0xa0>)
 8011b4c:	4281      	cmp	r1, r0
 8011b4e:	d806      	bhi.n	8011b5e <cos+0x1e>
 8011b50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011bd8 <cos+0x98>
 8011b54:	b005      	add	sp, #20
 8011b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b5a:	f000 b985 	b.w	8011e68 <__kernel_cos>
 8011b5e:	4821      	ldr	r0, [pc, #132]	@ (8011be4 <cos+0xa4>)
 8011b60:	4281      	cmp	r1, r0
 8011b62:	d908      	bls.n	8011b76 <cos+0x36>
 8011b64:	4610      	mov	r0, r2
 8011b66:	4619      	mov	r1, r3
 8011b68:	f7ee fba2 	bl	80002b0 <__aeabi_dsub>
 8011b6c:	ec41 0b10 	vmov	d0, r0, r1
 8011b70:	b005      	add	sp, #20
 8011b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b76:	4668      	mov	r0, sp
 8011b78:	f001 f902 	bl	8012d80 <__ieee754_rem_pio2>
 8011b7c:	f000 0003 	and.w	r0, r0, #3
 8011b80:	2801      	cmp	r0, #1
 8011b82:	d00b      	beq.n	8011b9c <cos+0x5c>
 8011b84:	2802      	cmp	r0, #2
 8011b86:	d015      	beq.n	8011bb4 <cos+0x74>
 8011b88:	b9d8      	cbnz	r0, 8011bc2 <cos+0x82>
 8011b8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b8e:	ed9d 0b00 	vldr	d0, [sp]
 8011b92:	f000 f969 	bl	8011e68 <__kernel_cos>
 8011b96:	ec51 0b10 	vmov	r0, r1, d0
 8011b9a:	e7e7      	b.n	8011b6c <cos+0x2c>
 8011b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ba0:	ed9d 0b00 	vldr	d0, [sp]
 8011ba4:	f000 fa28 	bl	8011ff8 <__kernel_sin>
 8011ba8:	ec53 2b10 	vmov	r2, r3, d0
 8011bac:	4610      	mov	r0, r2
 8011bae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011bb2:	e7db      	b.n	8011b6c <cos+0x2c>
 8011bb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bb8:	ed9d 0b00 	vldr	d0, [sp]
 8011bbc:	f000 f954 	bl	8011e68 <__kernel_cos>
 8011bc0:	e7f2      	b.n	8011ba8 <cos+0x68>
 8011bc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bc6:	ed9d 0b00 	vldr	d0, [sp]
 8011bca:	2001      	movs	r0, #1
 8011bcc:	f000 fa14 	bl	8011ff8 <__kernel_sin>
 8011bd0:	e7e1      	b.n	8011b96 <cos+0x56>
 8011bd2:	bf00      	nop
 8011bd4:	f3af 8000 	nop.w
	...
 8011be0:	3fe921fb 	.word	0x3fe921fb
 8011be4:	7fefffff 	.word	0x7fefffff

08011be8 <sin>:
 8011be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bea:	ec53 2b10 	vmov	r2, r3, d0
 8011bee:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011bf2:	4825      	ldr	r0, [pc, #148]	@ (8011c88 <sin+0xa0>)
 8011bf4:	4281      	cmp	r1, r0
 8011bf6:	d807      	bhi.n	8011c08 <sin+0x20>
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011c80 <sin+0x98>
 8011bfe:	b005      	add	sp, #20
 8011c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c04:	f000 b9f8 	b.w	8011ff8 <__kernel_sin>
 8011c08:	4820      	ldr	r0, [pc, #128]	@ (8011c8c <sin+0xa4>)
 8011c0a:	4281      	cmp	r1, r0
 8011c0c:	d908      	bls.n	8011c20 <sin+0x38>
 8011c0e:	4610      	mov	r0, r2
 8011c10:	4619      	mov	r1, r3
 8011c12:	f7ee fb4d 	bl	80002b0 <__aeabi_dsub>
 8011c16:	ec41 0b10 	vmov	d0, r0, r1
 8011c1a:	b005      	add	sp, #20
 8011c1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c20:	4668      	mov	r0, sp
 8011c22:	f001 f8ad 	bl	8012d80 <__ieee754_rem_pio2>
 8011c26:	f000 0003 	and.w	r0, r0, #3
 8011c2a:	2801      	cmp	r0, #1
 8011c2c:	d00c      	beq.n	8011c48 <sin+0x60>
 8011c2e:	2802      	cmp	r0, #2
 8011c30:	d011      	beq.n	8011c56 <sin+0x6e>
 8011c32:	b9e8      	cbnz	r0, 8011c70 <sin+0x88>
 8011c34:	2001      	movs	r0, #1
 8011c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c3a:	ed9d 0b00 	vldr	d0, [sp]
 8011c3e:	f000 f9db 	bl	8011ff8 <__kernel_sin>
 8011c42:	ec51 0b10 	vmov	r0, r1, d0
 8011c46:	e7e6      	b.n	8011c16 <sin+0x2e>
 8011c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c4c:	ed9d 0b00 	vldr	d0, [sp]
 8011c50:	f000 f90a 	bl	8011e68 <__kernel_cos>
 8011c54:	e7f5      	b.n	8011c42 <sin+0x5a>
 8011c56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c5a:	ed9d 0b00 	vldr	d0, [sp]
 8011c5e:	2001      	movs	r0, #1
 8011c60:	f000 f9ca 	bl	8011ff8 <__kernel_sin>
 8011c64:	ec53 2b10 	vmov	r2, r3, d0
 8011c68:	4610      	mov	r0, r2
 8011c6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011c6e:	e7d2      	b.n	8011c16 <sin+0x2e>
 8011c70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c74:	ed9d 0b00 	vldr	d0, [sp]
 8011c78:	f000 f8f6 	bl	8011e68 <__kernel_cos>
 8011c7c:	e7f2      	b.n	8011c64 <sin+0x7c>
 8011c7e:	bf00      	nop
	...
 8011c88:	3fe921fb 	.word	0x3fe921fb
 8011c8c:	7fefffff 	.word	0x7fefffff

08011c90 <finite>:
 8011c90:	b082      	sub	sp, #8
 8011c92:	ed8d 0b00 	vstr	d0, [sp]
 8011c96:	9801      	ldr	r0, [sp, #4]
 8011c98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011c9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011ca0:	0fc0      	lsrs	r0, r0, #31
 8011ca2:	b002      	add	sp, #8
 8011ca4:	4770      	bx	lr
	...

08011ca8 <__ieee754_sqrt>:
 8011ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8011e58 <__ieee754_sqrt+0x1b0>)
 8011caa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cae:	ec55 4b10 	vmov	r4, r5, d0
 8011cb2:	43aa      	bics	r2, r5
 8011cb4:	462b      	mov	r3, r5
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	d110      	bne.n	8011cdc <__ieee754_sqrt+0x34>
 8011cba:	4622      	mov	r2, r4
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	f7ee fcae 	bl	8000620 <__aeabi_dmul>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4620      	mov	r0, r4
 8011cca:	4629      	mov	r1, r5
 8011ccc:	f7ee faf2 	bl	80002b4 <__adddf3>
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	460d      	mov	r5, r1
 8011cd4:	ec45 4b10 	vmov	d0, r4, r5
 8011cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cdc:	2d00      	cmp	r5, #0
 8011cde:	dc0e      	bgt.n	8011cfe <__ieee754_sqrt+0x56>
 8011ce0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011ce4:	4322      	orrs	r2, r4
 8011ce6:	d0f5      	beq.n	8011cd4 <__ieee754_sqrt+0x2c>
 8011ce8:	b19d      	cbz	r5, 8011d12 <__ieee754_sqrt+0x6a>
 8011cea:	4622      	mov	r2, r4
 8011cec:	4620      	mov	r0, r4
 8011cee:	4629      	mov	r1, r5
 8011cf0:	f7ee fade 	bl	80002b0 <__aeabi_dsub>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	f7ee fdbc 	bl	8000874 <__aeabi_ddiv>
 8011cfc:	e7e8      	b.n	8011cd0 <__ieee754_sqrt+0x28>
 8011cfe:	152a      	asrs	r2, r5, #20
 8011d00:	d115      	bne.n	8011d2e <__ieee754_sqrt+0x86>
 8011d02:	2000      	movs	r0, #0
 8011d04:	e009      	b.n	8011d1a <__ieee754_sqrt+0x72>
 8011d06:	0acb      	lsrs	r3, r1, #11
 8011d08:	3a15      	subs	r2, #21
 8011d0a:	0549      	lsls	r1, r1, #21
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d0fa      	beq.n	8011d06 <__ieee754_sqrt+0x5e>
 8011d10:	e7f7      	b.n	8011d02 <__ieee754_sqrt+0x5a>
 8011d12:	462a      	mov	r2, r5
 8011d14:	e7fa      	b.n	8011d0c <__ieee754_sqrt+0x64>
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	3001      	adds	r0, #1
 8011d1a:	02dc      	lsls	r4, r3, #11
 8011d1c:	d5fb      	bpl.n	8011d16 <__ieee754_sqrt+0x6e>
 8011d1e:	1e44      	subs	r4, r0, #1
 8011d20:	1b12      	subs	r2, r2, r4
 8011d22:	f1c0 0420 	rsb	r4, r0, #32
 8011d26:	fa21 f404 	lsr.w	r4, r1, r4
 8011d2a:	4081      	lsls	r1, r0
 8011d2c:	4323      	orrs	r3, r4
 8011d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011d36:	07d2      	lsls	r2, r2, #31
 8011d38:	f04f 0600 	mov.w	r6, #0
 8011d3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d40:	ea4f 0565 	mov.w	r5, r5, asr #1
 8011d44:	f04f 0016 	mov.w	r0, #22
 8011d48:	4632      	mov	r2, r6
 8011d4a:	bf58      	it	pl
 8011d4c:	005b      	lslpl	r3, r3, #1
 8011d4e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011d52:	bf5c      	itt	pl
 8011d54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011d58:	0049      	lslpl	r1, r1, #1
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011d60:	0049      	lsls	r1, r1, #1
 8011d62:	1917      	adds	r7, r2, r4
 8011d64:	429f      	cmp	r7, r3
 8011d66:	bfde      	ittt	le
 8011d68:	193a      	addle	r2, r7, r4
 8011d6a:	1bdb      	suble	r3, r3, r7
 8011d6c:	1936      	addle	r6, r6, r4
 8011d6e:	0fcf      	lsrs	r7, r1, #31
 8011d70:	3801      	subs	r0, #1
 8011d72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011d7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011d7e:	d1f0      	bne.n	8011d62 <__ieee754_sqrt+0xba>
 8011d80:	4604      	mov	r4, r0
 8011d82:	2720      	movs	r7, #32
 8011d84:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	eb00 0e0c 	add.w	lr, r0, ip
 8011d8e:	db02      	blt.n	8011d96 <__ieee754_sqrt+0xee>
 8011d90:	d113      	bne.n	8011dba <__ieee754_sqrt+0x112>
 8011d92:	458e      	cmp	lr, r1
 8011d94:	d811      	bhi.n	8011dba <__ieee754_sqrt+0x112>
 8011d96:	f1be 0f00 	cmp.w	lr, #0
 8011d9a:	eb0e 000c 	add.w	r0, lr, ip
 8011d9e:	da43      	bge.n	8011e28 <__ieee754_sqrt+0x180>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	db41      	blt.n	8011e28 <__ieee754_sqrt+0x180>
 8011da4:	f102 0801 	add.w	r8, r2, #1
 8011da8:	1a9b      	subs	r3, r3, r2
 8011daa:	458e      	cmp	lr, r1
 8011dac:	4464      	add	r4, ip
 8011dae:	eba1 010e 	sub.w	r1, r1, lr
 8011db2:	bf88      	it	hi
 8011db4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011db8:	4642      	mov	r2, r8
 8011dba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011dbe:	3f01      	subs	r7, #1
 8011dc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011dc4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011dc8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011dcc:	d1dc      	bne.n	8011d88 <__ieee754_sqrt+0xe0>
 8011dce:	4319      	orrs	r1, r3
 8011dd0:	d01b      	beq.n	8011e0a <__ieee754_sqrt+0x162>
 8011dd2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8011e5c <__ieee754_sqrt+0x1b4>
 8011dd6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8011e60 <__ieee754_sqrt+0x1b8>
 8011dda:	e9da 0100 	ldrd	r0, r1, [sl]
 8011dde:	e9db 2300 	ldrd	r2, r3, [fp]
 8011de2:	e9da 8900 	ldrd	r8, r9, [sl]
 8011de6:	f7ee fa63 	bl	80002b0 <__aeabi_dsub>
 8011dea:	4602      	mov	r2, r0
 8011dec:	460b      	mov	r3, r1
 8011dee:	4640      	mov	r0, r8
 8011df0:	4649      	mov	r1, r9
 8011df2:	f7ee fe91 	bl	8000b18 <__aeabi_dcmple>
 8011df6:	b140      	cbz	r0, 8011e0a <__ieee754_sqrt+0x162>
 8011df8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011dfc:	e9da 0100 	ldrd	r0, r1, [sl]
 8011e00:	e9db 2300 	ldrd	r2, r3, [fp]
 8011e04:	d112      	bne.n	8011e2c <__ieee754_sqrt+0x184>
 8011e06:	3601      	adds	r6, #1
 8011e08:	463c      	mov	r4, r7
 8011e0a:	1072      	asrs	r2, r6, #1
 8011e0c:	07f1      	lsls	r1, r6, #31
 8011e0e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8011e12:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011e16:	bf48      	it	mi
 8011e18:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011e1c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011e20:	4618      	mov	r0, r3
 8011e22:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011e26:	e753      	b.n	8011cd0 <__ieee754_sqrt+0x28>
 8011e28:	4690      	mov	r8, r2
 8011e2a:	e7bd      	b.n	8011da8 <__ieee754_sqrt+0x100>
 8011e2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e30:	f7ee fa40 	bl	80002b4 <__adddf3>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	4640      	mov	r0, r8
 8011e3a:	4649      	mov	r1, r9
 8011e3c:	f7ee fe62 	bl	8000b04 <__aeabi_dcmplt>
 8011e40:	b128      	cbz	r0, 8011e4e <__ieee754_sqrt+0x1a6>
 8011e42:	1ca0      	adds	r0, r4, #2
 8011e44:	f104 0402 	add.w	r4, r4, #2
 8011e48:	bf08      	it	eq
 8011e4a:	3601      	addeq	r6, #1
 8011e4c:	e7dd      	b.n	8011e0a <__ieee754_sqrt+0x162>
 8011e4e:	1c63      	adds	r3, r4, #1
 8011e50:	f023 0401 	bic.w	r4, r3, #1
 8011e54:	e7d9      	b.n	8011e0a <__ieee754_sqrt+0x162>
 8011e56:	bf00      	nop
 8011e58:	7ff00000 	.word	0x7ff00000
 8011e5c:	200001f8 	.word	0x200001f8
 8011e60:	200001f0 	.word	0x200001f0
 8011e64:	00000000 	.word	0x00000000

08011e68 <__kernel_cos>:
 8011e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	ec57 6b10 	vmov	r6, r7, d0
 8011e70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011e74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011e78:	ed8d 1b00 	vstr	d1, [sp]
 8011e7c:	d206      	bcs.n	8011e8c <__kernel_cos+0x24>
 8011e7e:	4630      	mov	r0, r6
 8011e80:	4639      	mov	r1, r7
 8011e82:	f7ee fe7d 	bl	8000b80 <__aeabi_d2iz>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	f000 8088 	beq.w	8011f9c <__kernel_cos+0x134>
 8011e8c:	4632      	mov	r2, r6
 8011e8e:	463b      	mov	r3, r7
 8011e90:	4630      	mov	r0, r6
 8011e92:	4639      	mov	r1, r7
 8011e94:	f7ee fbc4 	bl	8000620 <__aeabi_dmul>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	460d      	mov	r5, r1
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	4b50      	ldr	r3, [pc, #320]	@ (8011fe0 <__kernel_cos+0x178>)
 8011ea0:	f7ee fbbe 	bl	8000620 <__aeabi_dmul>
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	468b      	mov	fp, r1
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	4629      	mov	r1, r5
 8011eac:	a33e      	add	r3, pc, #248	@ (adr r3, 8011fa8 <__kernel_cos+0x140>)
 8011eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb2:	f7ee fbb5 	bl	8000620 <__aeabi_dmul>
 8011eb6:	a33e      	add	r3, pc, #248	@ (adr r3, 8011fb0 <__kernel_cos+0x148>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	f7ee f9fa 	bl	80002b4 <__adddf3>
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	462b      	mov	r3, r5
 8011ec4:	f7ee fbac 	bl	8000620 <__aeabi_dmul>
 8011ec8:	a33b      	add	r3, pc, #236	@ (adr r3, 8011fb8 <__kernel_cos+0x150>)
 8011eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ece:	f7ee f9ef 	bl	80002b0 <__aeabi_dsub>
 8011ed2:	4622      	mov	r2, r4
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	f7ee fba3 	bl	8000620 <__aeabi_dmul>
 8011eda:	a339      	add	r3, pc, #228	@ (adr r3, 8011fc0 <__kernel_cos+0x158>)
 8011edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee0:	f7ee f9e8 	bl	80002b4 <__adddf3>
 8011ee4:	4622      	mov	r2, r4
 8011ee6:	462b      	mov	r3, r5
 8011ee8:	f7ee fb9a 	bl	8000620 <__aeabi_dmul>
 8011eec:	a336      	add	r3, pc, #216	@ (adr r3, 8011fc8 <__kernel_cos+0x160>)
 8011eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef2:	f7ee f9dd 	bl	80002b0 <__aeabi_dsub>
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	462b      	mov	r3, r5
 8011efa:	f7ee fb91 	bl	8000620 <__aeabi_dmul>
 8011efe:	a334      	add	r3, pc, #208	@ (adr r3, 8011fd0 <__kernel_cos+0x168>)
 8011f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f04:	f7ee f9d6 	bl	80002b4 <__adddf3>
 8011f08:	4622      	mov	r2, r4
 8011f0a:	462b      	mov	r3, r5
 8011f0c:	f7ee fb88 	bl	8000620 <__aeabi_dmul>
 8011f10:	4622      	mov	r2, r4
 8011f12:	462b      	mov	r3, r5
 8011f14:	f7ee fb84 	bl	8000620 <__aeabi_dmul>
 8011f18:	4604      	mov	r4, r0
 8011f1a:	460d      	mov	r5, r1
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	4639      	mov	r1, r7
 8011f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f24:	f7ee fb7c 	bl	8000620 <__aeabi_dmul>
 8011f28:	460b      	mov	r3, r1
 8011f2a:	4602      	mov	r2, r0
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f7ee f9be 	bl	80002b0 <__aeabi_dsub>
 8011f34:	4b2b      	ldr	r3, [pc, #172]	@ (8011fe4 <__kernel_cos+0x17c>)
 8011f36:	4606      	mov	r6, r0
 8011f38:	460f      	mov	r7, r1
 8011f3a:	4598      	cmp	r8, r3
 8011f3c:	d810      	bhi.n	8011f60 <__kernel_cos+0xf8>
 8011f3e:	4602      	mov	r2, r0
 8011f40:	460b      	mov	r3, r1
 8011f42:	4650      	mov	r0, sl
 8011f44:	4659      	mov	r1, fp
 8011f46:	f7ee f9b3 	bl	80002b0 <__aeabi_dsub>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	2000      	movs	r0, #0
 8011f50:	4925      	ldr	r1, [pc, #148]	@ (8011fe8 <__kernel_cos+0x180>)
 8011f52:	f7ee f9ad 	bl	80002b0 <__aeabi_dsub>
 8011f56:	ec41 0b10 	vmov	d0, r0, r1
 8011f5a:	b003      	add	sp, #12
 8011f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f60:	4b22      	ldr	r3, [pc, #136]	@ (8011fec <__kernel_cos+0x184>)
 8011f62:	2400      	movs	r4, #0
 8011f64:	2000      	movs	r0, #0
 8011f66:	4920      	ldr	r1, [pc, #128]	@ (8011fe8 <__kernel_cos+0x180>)
 8011f68:	4598      	cmp	r8, r3
 8011f6a:	4622      	mov	r2, r4
 8011f6c:	bf94      	ite	ls
 8011f6e:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011f72:	4d1f      	ldrhi	r5, [pc, #124]	@ (8011ff0 <__kernel_cos+0x188>)
 8011f74:	462b      	mov	r3, r5
 8011f76:	f7ee f99b 	bl	80002b0 <__aeabi_dsub>
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	4680      	mov	r8, r0
 8011f7e:	4689      	mov	r9, r1
 8011f80:	462b      	mov	r3, r5
 8011f82:	4650      	mov	r0, sl
 8011f84:	4659      	mov	r1, fp
 8011f86:	f7ee f993 	bl	80002b0 <__aeabi_dsub>
 8011f8a:	4632      	mov	r2, r6
 8011f8c:	463b      	mov	r3, r7
 8011f8e:	f7ee f98f 	bl	80002b0 <__aeabi_dsub>
 8011f92:	4602      	mov	r2, r0
 8011f94:	460b      	mov	r3, r1
 8011f96:	4640      	mov	r0, r8
 8011f98:	4649      	mov	r1, r9
 8011f9a:	e7da      	b.n	8011f52 <__kernel_cos+0xea>
 8011f9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011fd8 <__kernel_cos+0x170>
 8011fa0:	e7db      	b.n	8011f5a <__kernel_cos+0xf2>
 8011fa2:	bf00      	nop
 8011fa4:	f3af 8000 	nop.w
 8011fa8:	be8838d4 	.word	0xbe8838d4
 8011fac:	bda8fae9 	.word	0xbda8fae9
 8011fb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011fb4:	3e21ee9e 	.word	0x3e21ee9e
 8011fb8:	809c52ad 	.word	0x809c52ad
 8011fbc:	3e927e4f 	.word	0x3e927e4f
 8011fc0:	19cb1590 	.word	0x19cb1590
 8011fc4:	3efa01a0 	.word	0x3efa01a0
 8011fc8:	16c15177 	.word	0x16c15177
 8011fcc:	3f56c16c 	.word	0x3f56c16c
 8011fd0:	5555554c 	.word	0x5555554c
 8011fd4:	3fa55555 	.word	0x3fa55555
 8011fd8:	00000000 	.word	0x00000000
 8011fdc:	3ff00000 	.word	0x3ff00000
 8011fe0:	3fe00000 	.word	0x3fe00000
 8011fe4:	3fd33332 	.word	0x3fd33332
 8011fe8:	3ff00000 	.word	0x3ff00000
 8011fec:	3fe90000 	.word	0x3fe90000
 8011ff0:	3fd20000 	.word	0x3fd20000
 8011ff4:	00000000 	.word	0x00000000

08011ff8 <__kernel_sin>:
 8011ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffc:	ec55 4b10 	vmov	r4, r5, d0
 8012000:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012004:	b085      	sub	sp, #20
 8012006:	4680      	mov	r8, r0
 8012008:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801200c:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012010:	d205      	bcs.n	801201e <__kernel_sin+0x26>
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee fdb3 	bl	8000b80 <__aeabi_d2iz>
 801201a:	2800      	cmp	r0, #0
 801201c:	d052      	beq.n	80120c4 <__kernel_sin+0xcc>
 801201e:	4622      	mov	r2, r4
 8012020:	462b      	mov	r3, r5
 8012022:	4620      	mov	r0, r4
 8012024:	4629      	mov	r1, r5
 8012026:	f7ee fafb 	bl	8000620 <__aeabi_dmul>
 801202a:	4682      	mov	sl, r0
 801202c:	468b      	mov	fp, r1
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	4620      	mov	r0, r4
 8012034:	4629      	mov	r1, r5
 8012036:	f7ee faf3 	bl	8000620 <__aeabi_dmul>
 801203a:	a342      	add	r3, pc, #264	@ (adr r3, 8012144 <__kernel_sin+0x14c>)
 801203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012040:	e9cd 0100 	strd	r0, r1, [sp]
 8012044:	4650      	mov	r0, sl
 8012046:	4659      	mov	r1, fp
 8012048:	f7ee faea 	bl	8000620 <__aeabi_dmul>
 801204c:	a33f      	add	r3, pc, #252	@ (adr r3, 801214c <__kernel_sin+0x154>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	f7ee f92d 	bl	80002b0 <__aeabi_dsub>
 8012056:	4652      	mov	r2, sl
 8012058:	465b      	mov	r3, fp
 801205a:	f7ee fae1 	bl	8000620 <__aeabi_dmul>
 801205e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012154 <__kernel_sin+0x15c>)
 8012060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012064:	f7ee f926 	bl	80002b4 <__adddf3>
 8012068:	4652      	mov	r2, sl
 801206a:	465b      	mov	r3, fp
 801206c:	f7ee fad8 	bl	8000620 <__aeabi_dmul>
 8012070:	a33a      	add	r3, pc, #232	@ (adr r3, 801215c <__kernel_sin+0x164>)
 8012072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012076:	f7ee f91b 	bl	80002b0 <__aeabi_dsub>
 801207a:	4652      	mov	r2, sl
 801207c:	465b      	mov	r3, fp
 801207e:	f7ee facf 	bl	8000620 <__aeabi_dmul>
 8012082:	a338      	add	r3, pc, #224	@ (adr r3, 8012164 <__kernel_sin+0x16c>)
 8012084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012088:	f7ee f914 	bl	80002b4 <__adddf3>
 801208c:	4606      	mov	r6, r0
 801208e:	460f      	mov	r7, r1
 8012090:	f1b8 0f00 	cmp.w	r8, #0
 8012094:	d11b      	bne.n	80120ce <__kernel_sin+0xd6>
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	4650      	mov	r0, sl
 801209c:	4659      	mov	r1, fp
 801209e:	f7ee fabf 	bl	8000620 <__aeabi_dmul>
 80120a2:	a325      	add	r3, pc, #148	@ (adr r3, 8012138 <__kernel_sin+0x140>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	f7ee f902 	bl	80002b0 <__aeabi_dsub>
 80120ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120b0:	f7ee fab6 	bl	8000620 <__aeabi_dmul>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	4620      	mov	r0, r4
 80120ba:	4629      	mov	r1, r5
 80120bc:	f7ee f8fa 	bl	80002b4 <__adddf3>
 80120c0:	4604      	mov	r4, r0
 80120c2:	460d      	mov	r5, r1
 80120c4:	ec45 4b10 	vmov	d0, r4, r5
 80120c8:	b005      	add	sp, #20
 80120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ce:	2200      	movs	r2, #0
 80120d0:	4b1b      	ldr	r3, [pc, #108]	@ (8012140 <__kernel_sin+0x148>)
 80120d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120d6:	f7ee faa3 	bl	8000620 <__aeabi_dmul>
 80120da:	4680      	mov	r8, r0
 80120dc:	4689      	mov	r9, r1
 80120de:	4632      	mov	r2, r6
 80120e0:	463b      	mov	r3, r7
 80120e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120e6:	f7ee fa9b 	bl	8000620 <__aeabi_dmul>
 80120ea:	4602      	mov	r2, r0
 80120ec:	460b      	mov	r3, r1
 80120ee:	4640      	mov	r0, r8
 80120f0:	4649      	mov	r1, r9
 80120f2:	f7ee f8dd 	bl	80002b0 <__aeabi_dsub>
 80120f6:	4652      	mov	r2, sl
 80120f8:	465b      	mov	r3, fp
 80120fa:	f7ee fa91 	bl	8000620 <__aeabi_dmul>
 80120fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012102:	f7ee f8d5 	bl	80002b0 <__aeabi_dsub>
 8012106:	4606      	mov	r6, r0
 8012108:	460f      	mov	r7, r1
 801210a:	a30b      	add	r3, pc, #44	@ (adr r3, 8012138 <__kernel_sin+0x140>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012114:	f7ee fa84 	bl	8000620 <__aeabi_dmul>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4630      	mov	r0, r6
 801211e:	4639      	mov	r1, r7
 8012120:	f7ee f8c8 	bl	80002b4 <__adddf3>
 8012124:	4602      	mov	r2, r0
 8012126:	460b      	mov	r3, r1
 8012128:	4620      	mov	r0, r4
 801212a:	4629      	mov	r1, r5
 801212c:	f7ee f8c0 	bl	80002b0 <__aeabi_dsub>
 8012130:	e7c6      	b.n	80120c0 <__kernel_sin+0xc8>
 8012132:	bf00      	nop
 8012134:	f3af 8000 	nop.w
 8012138:	55555549 	.word	0x55555549
 801213c:	3fc55555 	.word	0x3fc55555
 8012140:	3fe00000 	.word	0x3fe00000
 8012144:	5acfd57c 	.word	0x5acfd57c
 8012148:	3de5d93a 	.word	0x3de5d93a
 801214c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012150:	3e5ae5e6 	.word	0x3e5ae5e6
 8012154:	57b1fe7d 	.word	0x57b1fe7d
 8012158:	3ec71de3 	.word	0x3ec71de3
 801215c:	19c161d5 	.word	0x19c161d5
 8012160:	3f2a01a0 	.word	0x3f2a01a0
 8012164:	1110f8a6 	.word	0x1110f8a6
 8012168:	3f811111 	.word	0x3f811111
 801216c:	00000000 	.word	0x00000000

08012170 <__ieee754_atan2>:
 8012170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012174:	ec57 6b11 	vmov	r6, r7, d1
 8012178:	4273      	negs	r3, r6
 801217a:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801217e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80122f8 <__ieee754_atan2+0x188>
 8012182:	4635      	mov	r5, r6
 8012184:	4333      	orrs	r3, r6
 8012186:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801218a:	4543      	cmp	r3, r8
 801218c:	ec51 0b10 	vmov	r0, r1, d0
 8012190:	d809      	bhi.n	80121a6 <__ieee754_atan2+0x36>
 8012192:	4244      	negs	r4, r0
 8012194:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012198:	468e      	mov	lr, r1
 801219a:	4681      	mov	r9, r0
 801219c:	4304      	orrs	r4, r0
 801219e:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80121a2:	4544      	cmp	r4, r8
 80121a4:	d907      	bls.n	80121b6 <__ieee754_atan2+0x46>
 80121a6:	4632      	mov	r2, r6
 80121a8:	463b      	mov	r3, r7
 80121aa:	f7ee f883 	bl	80002b4 <__adddf3>
 80121ae:	ec41 0b10 	vmov	d0, r0, r1
 80121b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80121ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80121be:	4334      	orrs	r4, r6
 80121c0:	d103      	bne.n	80121ca <__ieee754_atan2+0x5a>
 80121c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c6:	f000 bfd7 	b.w	8013178 <atan>
 80121ca:	17bc      	asrs	r4, r7, #30
 80121cc:	ea53 0909 	orrs.w	r9, r3, r9
 80121d0:	f004 0402 	and.w	r4, r4, #2
 80121d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80121d8:	d107      	bne.n	80121ea <__ieee754_atan2+0x7a>
 80121da:	2c02      	cmp	r4, #2
 80121dc:	d05f      	beq.n	801229e <__ieee754_atan2+0x12e>
 80121de:	2c03      	cmp	r4, #3
 80121e0:	d1e5      	bne.n	80121ae <__ieee754_atan2+0x3e>
 80121e2:	a141      	add	r1, pc, #260	@ (adr r1, 80122e8 <__ieee754_atan2+0x178>)
 80121e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121e8:	e7e1      	b.n	80121ae <__ieee754_atan2+0x3e>
 80121ea:	4315      	orrs	r5, r2
 80121ec:	d106      	bne.n	80121fc <__ieee754_atan2+0x8c>
 80121ee:	f1be 0f00 	cmp.w	lr, #0
 80121f2:	da5f      	bge.n	80122b4 <__ieee754_atan2+0x144>
 80121f4:	a13e      	add	r1, pc, #248	@ (adr r1, 80122f0 <__ieee754_atan2+0x180>)
 80121f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121fa:	e7d8      	b.n	80121ae <__ieee754_atan2+0x3e>
 80121fc:	4542      	cmp	r2, r8
 80121fe:	d10f      	bne.n	8012220 <__ieee754_atan2+0xb0>
 8012200:	4293      	cmp	r3, r2
 8012202:	f104 34ff 	add.w	r4, r4, #4294967295
 8012206:	d107      	bne.n	8012218 <__ieee754_atan2+0xa8>
 8012208:	2c02      	cmp	r4, #2
 801220a:	d84c      	bhi.n	80122a6 <__ieee754_atan2+0x136>
 801220c:	4b34      	ldr	r3, [pc, #208]	@ (80122e0 <__ieee754_atan2+0x170>)
 801220e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012216:	e7ca      	b.n	80121ae <__ieee754_atan2+0x3e>
 8012218:	2c02      	cmp	r4, #2
 801221a:	d848      	bhi.n	80122ae <__ieee754_atan2+0x13e>
 801221c:	4b31      	ldr	r3, [pc, #196]	@ (80122e4 <__ieee754_atan2+0x174>)
 801221e:	e7f6      	b.n	801220e <__ieee754_atan2+0x9e>
 8012220:	4543      	cmp	r3, r8
 8012222:	d0e4      	beq.n	80121ee <__ieee754_atan2+0x7e>
 8012224:	1a9b      	subs	r3, r3, r2
 8012226:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801222a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801222e:	da1e      	bge.n	801226e <__ieee754_atan2+0xfe>
 8012230:	2f00      	cmp	r7, #0
 8012232:	da01      	bge.n	8012238 <__ieee754_atan2+0xc8>
 8012234:	323c      	adds	r2, #60	@ 0x3c
 8012236:	db1e      	blt.n	8012276 <__ieee754_atan2+0x106>
 8012238:	4632      	mov	r2, r6
 801223a:	463b      	mov	r3, r7
 801223c:	f7ee fb1a 	bl	8000874 <__aeabi_ddiv>
 8012240:	ec41 0b10 	vmov	d0, r0, r1
 8012244:	f001 f930 	bl	80134a8 <fabs>
 8012248:	f000 ff96 	bl	8013178 <atan>
 801224c:	ec51 0b10 	vmov	r0, r1, d0
 8012250:	2c01      	cmp	r4, #1
 8012252:	d013      	beq.n	801227c <__ieee754_atan2+0x10c>
 8012254:	2c02      	cmp	r4, #2
 8012256:	d015      	beq.n	8012284 <__ieee754_atan2+0x114>
 8012258:	2c00      	cmp	r4, #0
 801225a:	d0a8      	beq.n	80121ae <__ieee754_atan2+0x3e>
 801225c:	a318      	add	r3, pc, #96	@ (adr r3, 80122c0 <__ieee754_atan2+0x150>)
 801225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012262:	f7ee f825 	bl	80002b0 <__aeabi_dsub>
 8012266:	a318      	add	r3, pc, #96	@ (adr r3, 80122c8 <__ieee754_atan2+0x158>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	e014      	b.n	8012298 <__ieee754_atan2+0x128>
 801226e:	a118      	add	r1, pc, #96	@ (adr r1, 80122d0 <__ieee754_atan2+0x160>)
 8012270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012274:	e7ec      	b.n	8012250 <__ieee754_atan2+0xe0>
 8012276:	2000      	movs	r0, #0
 8012278:	2100      	movs	r1, #0
 801227a:	e7e9      	b.n	8012250 <__ieee754_atan2+0xe0>
 801227c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012280:	4619      	mov	r1, r3
 8012282:	e794      	b.n	80121ae <__ieee754_atan2+0x3e>
 8012284:	a30e      	add	r3, pc, #56	@ (adr r3, 80122c0 <__ieee754_atan2+0x150>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	f7ee f811 	bl	80002b0 <__aeabi_dsub>
 801228e:	4602      	mov	r2, r0
 8012290:	460b      	mov	r3, r1
 8012292:	a10d      	add	r1, pc, #52	@ (adr r1, 80122c8 <__ieee754_atan2+0x158>)
 8012294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012298:	f7ee f80a 	bl	80002b0 <__aeabi_dsub>
 801229c:	e787      	b.n	80121ae <__ieee754_atan2+0x3e>
 801229e:	a10a      	add	r1, pc, #40	@ (adr r1, 80122c8 <__ieee754_atan2+0x158>)
 80122a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122a4:	e783      	b.n	80121ae <__ieee754_atan2+0x3e>
 80122a6:	a10c      	add	r1, pc, #48	@ (adr r1, 80122d8 <__ieee754_atan2+0x168>)
 80122a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122ac:	e77f      	b.n	80121ae <__ieee754_atan2+0x3e>
 80122ae:	2000      	movs	r0, #0
 80122b0:	2100      	movs	r1, #0
 80122b2:	e77c      	b.n	80121ae <__ieee754_atan2+0x3e>
 80122b4:	a106      	add	r1, pc, #24	@ (adr r1, 80122d0 <__ieee754_atan2+0x160>)
 80122b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122ba:	e778      	b.n	80121ae <__ieee754_atan2+0x3e>
 80122bc:	f3af 8000 	nop.w
 80122c0:	33145c07 	.word	0x33145c07
 80122c4:	3ca1a626 	.word	0x3ca1a626
 80122c8:	54442d18 	.word	0x54442d18
 80122cc:	400921fb 	.word	0x400921fb
 80122d0:	54442d18 	.word	0x54442d18
 80122d4:	3ff921fb 	.word	0x3ff921fb
 80122d8:	54442d18 	.word	0x54442d18
 80122dc:	3fe921fb 	.word	0x3fe921fb
 80122e0:	08014948 	.word	0x08014948
 80122e4:	08014930 	.word	0x08014930
 80122e8:	54442d18 	.word	0x54442d18
 80122ec:	c00921fb 	.word	0xc00921fb
 80122f0:	54442d18 	.word	0x54442d18
 80122f4:	bff921fb 	.word	0xbff921fb
 80122f8:	7ff00000 	.word	0x7ff00000
 80122fc:	00000000 	.word	0x00000000

08012300 <__ieee754_pow>:
 8012300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	b091      	sub	sp, #68	@ 0x44
 8012306:	ed8d 1b00 	vstr	d1, [sp]
 801230a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801230e:	ec57 6b10 	vmov	r6, r7, d0
 8012312:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012316:	ea5a 0001 	orrs.w	r0, sl, r1
 801231a:	d113      	bne.n	8012344 <__ieee754_pow+0x44>
 801231c:	19b3      	adds	r3, r6, r6
 801231e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012322:	4152      	adcs	r2, r2
 8012324:	4298      	cmp	r0, r3
 8012326:	4b96      	ldr	r3, [pc, #600]	@ (8012580 <__ieee754_pow+0x280>)
 8012328:	4193      	sbcs	r3, r2
 801232a:	f080 84e7 	bcs.w	8012cfc <__ieee754_pow+0x9fc>
 801232e:	4630      	mov	r0, r6
 8012330:	4639      	mov	r1, r7
 8012332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012336:	f7ed ffbd 	bl	80002b4 <__adddf3>
 801233a:	ec41 0b10 	vmov	d0, r0, r1
 801233e:	b011      	add	sp, #68	@ 0x44
 8012340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012344:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012348:	4a8e      	ldr	r2, [pc, #568]	@ (8012584 <__ieee754_pow+0x284>)
 801234a:	463d      	mov	r5, r7
 801234c:	4633      	mov	r3, r6
 801234e:	4590      	cmp	r8, r2
 8012350:	d806      	bhi.n	8012360 <__ieee754_pow+0x60>
 8012352:	d101      	bne.n	8012358 <__ieee754_pow+0x58>
 8012354:	2e00      	cmp	r6, #0
 8012356:	d1ea      	bne.n	801232e <__ieee754_pow+0x2e>
 8012358:	4592      	cmp	sl, r2
 801235a:	d801      	bhi.n	8012360 <__ieee754_pow+0x60>
 801235c:	d10e      	bne.n	801237c <__ieee754_pow+0x7c>
 801235e:	b169      	cbz	r1, 801237c <__ieee754_pow+0x7c>
 8012360:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012364:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012368:	431d      	orrs	r5, r3
 801236a:	d1e0      	bne.n	801232e <__ieee754_pow+0x2e>
 801236c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012370:	18db      	adds	r3, r3, r3
 8012372:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012376:	4152      	adcs	r2, r2
 8012378:	429d      	cmp	r5, r3
 801237a:	e7d4      	b.n	8012326 <__ieee754_pow+0x26>
 801237c:	2d00      	cmp	r5, #0
 801237e:	46c3      	mov	fp, r8
 8012380:	da3a      	bge.n	80123f8 <__ieee754_pow+0xf8>
 8012382:	4a81      	ldr	r2, [pc, #516]	@ (8012588 <__ieee754_pow+0x288>)
 8012384:	4592      	cmp	sl, r2
 8012386:	d84d      	bhi.n	8012424 <__ieee754_pow+0x124>
 8012388:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801238c:	4592      	cmp	sl, r2
 801238e:	f240 84c4 	bls.w	8012d1a <__ieee754_pow+0xa1a>
 8012392:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012396:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801239a:	2a14      	cmp	r2, #20
 801239c:	dd0f      	ble.n	80123be <__ieee754_pow+0xbe>
 801239e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80123a2:	fa21 f402 	lsr.w	r4, r1, r2
 80123a6:	fa04 f202 	lsl.w	r2, r4, r2
 80123aa:	428a      	cmp	r2, r1
 80123ac:	f040 84b5 	bne.w	8012d1a <__ieee754_pow+0xa1a>
 80123b0:	f004 0401 	and.w	r4, r4, #1
 80123b4:	f1c4 0402 	rsb	r4, r4, #2
 80123b8:	2900      	cmp	r1, #0
 80123ba:	d158      	bne.n	801246e <__ieee754_pow+0x16e>
 80123bc:	e00e      	b.n	80123dc <__ieee754_pow+0xdc>
 80123be:	2900      	cmp	r1, #0
 80123c0:	d154      	bne.n	801246c <__ieee754_pow+0x16c>
 80123c2:	f1c2 0214 	rsb	r2, r2, #20
 80123c6:	fa4a f402 	asr.w	r4, sl, r2
 80123ca:	fa04 f202 	lsl.w	r2, r4, r2
 80123ce:	4552      	cmp	r2, sl
 80123d0:	f040 84a0 	bne.w	8012d14 <__ieee754_pow+0xa14>
 80123d4:	f004 0401 	and.w	r4, r4, #1
 80123d8:	f1c4 0402 	rsb	r4, r4, #2
 80123dc:	4a6b      	ldr	r2, [pc, #428]	@ (801258c <__ieee754_pow+0x28c>)
 80123de:	4592      	cmp	sl, r2
 80123e0:	d12e      	bne.n	8012440 <__ieee754_pow+0x140>
 80123e2:	f1b9 0f00 	cmp.w	r9, #0
 80123e6:	f280 8491 	bge.w	8012d0c <__ieee754_pow+0xa0c>
 80123ea:	4632      	mov	r2, r6
 80123ec:	463b      	mov	r3, r7
 80123ee:	2000      	movs	r0, #0
 80123f0:	4966      	ldr	r1, [pc, #408]	@ (801258c <__ieee754_pow+0x28c>)
 80123f2:	f7ee fa3f 	bl	8000874 <__aeabi_ddiv>
 80123f6:	e7a0      	b.n	801233a <__ieee754_pow+0x3a>
 80123f8:	2400      	movs	r4, #0
 80123fa:	bbc1      	cbnz	r1, 801246e <__ieee754_pow+0x16e>
 80123fc:	4a61      	ldr	r2, [pc, #388]	@ (8012584 <__ieee754_pow+0x284>)
 80123fe:	4592      	cmp	sl, r2
 8012400:	d1ec      	bne.n	80123dc <__ieee754_pow+0xdc>
 8012402:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012406:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801240a:	431a      	orrs	r2, r3
 801240c:	f000 8476 	beq.w	8012cfc <__ieee754_pow+0x9fc>
 8012410:	4b5f      	ldr	r3, [pc, #380]	@ (8012590 <__ieee754_pow+0x290>)
 8012412:	4598      	cmp	r8, r3
 8012414:	d908      	bls.n	8012428 <__ieee754_pow+0x128>
 8012416:	f1b9 0f00 	cmp.w	r9, #0
 801241a:	f2c0 8473 	blt.w	8012d04 <__ieee754_pow+0xa04>
 801241e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012422:	e78a      	b.n	801233a <__ieee754_pow+0x3a>
 8012424:	2402      	movs	r4, #2
 8012426:	e7e8      	b.n	80123fa <__ieee754_pow+0xfa>
 8012428:	f1b9 0f00 	cmp.w	r9, #0
 801242c:	f04f 0000 	mov.w	r0, #0
 8012430:	f04f 0100 	mov.w	r1, #0
 8012434:	da81      	bge.n	801233a <__ieee754_pow+0x3a>
 8012436:	e9dd 0300 	ldrd	r0, r3, [sp]
 801243a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801243e:	e77c      	b.n	801233a <__ieee754_pow+0x3a>
 8012440:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012444:	d106      	bne.n	8012454 <__ieee754_pow+0x154>
 8012446:	4632      	mov	r2, r6
 8012448:	463b      	mov	r3, r7
 801244a:	4630      	mov	r0, r6
 801244c:	4639      	mov	r1, r7
 801244e:	f7ee f8e7 	bl	8000620 <__aeabi_dmul>
 8012452:	e772      	b.n	801233a <__ieee754_pow+0x3a>
 8012454:	4a4f      	ldr	r2, [pc, #316]	@ (8012594 <__ieee754_pow+0x294>)
 8012456:	4591      	cmp	r9, r2
 8012458:	d109      	bne.n	801246e <__ieee754_pow+0x16e>
 801245a:	2d00      	cmp	r5, #0
 801245c:	db07      	blt.n	801246e <__ieee754_pow+0x16e>
 801245e:	ec47 6b10 	vmov	d0, r6, r7
 8012462:	b011      	add	sp, #68	@ 0x44
 8012464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012468:	f7ff bc1e 	b.w	8011ca8 <__ieee754_sqrt>
 801246c:	2400      	movs	r4, #0
 801246e:	9302      	str	r3, [sp, #8]
 8012470:	ec47 6b10 	vmov	d0, r6, r7
 8012474:	f001 f818 	bl	80134a8 <fabs>
 8012478:	9b02      	ldr	r3, [sp, #8]
 801247a:	ec51 0b10 	vmov	r0, r1, d0
 801247e:	bb53      	cbnz	r3, 80124d6 <__ieee754_pow+0x1d6>
 8012480:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012484:	4b41      	ldr	r3, [pc, #260]	@ (801258c <__ieee754_pow+0x28c>)
 8012486:	429a      	cmp	r2, r3
 8012488:	d002      	beq.n	8012490 <__ieee754_pow+0x190>
 801248a:	f1b8 0f00 	cmp.w	r8, #0
 801248e:	d122      	bne.n	80124d6 <__ieee754_pow+0x1d6>
 8012490:	f1b9 0f00 	cmp.w	r9, #0
 8012494:	da05      	bge.n	80124a2 <__ieee754_pow+0x1a2>
 8012496:	4602      	mov	r2, r0
 8012498:	460b      	mov	r3, r1
 801249a:	2000      	movs	r0, #0
 801249c:	493b      	ldr	r1, [pc, #236]	@ (801258c <__ieee754_pow+0x28c>)
 801249e:	f7ee f9e9 	bl	8000874 <__aeabi_ddiv>
 80124a2:	2d00      	cmp	r5, #0
 80124a4:	f6bf af49 	bge.w	801233a <__ieee754_pow+0x3a>
 80124a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80124ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80124b0:	ea58 0804 	orrs.w	r8, r8, r4
 80124b4:	d108      	bne.n	80124c8 <__ieee754_pow+0x1c8>
 80124b6:	4602      	mov	r2, r0
 80124b8:	460b      	mov	r3, r1
 80124ba:	4610      	mov	r0, r2
 80124bc:	4619      	mov	r1, r3
 80124be:	f7ed fef7 	bl	80002b0 <__aeabi_dsub>
 80124c2:	4602      	mov	r2, r0
 80124c4:	460b      	mov	r3, r1
 80124c6:	e794      	b.n	80123f2 <__ieee754_pow+0xf2>
 80124c8:	2c01      	cmp	r4, #1
 80124ca:	f47f af36 	bne.w	801233a <__ieee754_pow+0x3a>
 80124ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124d2:	4619      	mov	r1, r3
 80124d4:	e731      	b.n	801233a <__ieee754_pow+0x3a>
 80124d6:	0feb      	lsrs	r3, r5, #31
 80124d8:	3b01      	subs	r3, #1
 80124da:	ea53 0204 	orrs.w	r2, r3, r4
 80124de:	d102      	bne.n	80124e6 <__ieee754_pow+0x1e6>
 80124e0:	4632      	mov	r2, r6
 80124e2:	463b      	mov	r3, r7
 80124e4:	e7e9      	b.n	80124ba <__ieee754_pow+0x1ba>
 80124e6:	3c01      	subs	r4, #1
 80124e8:	431c      	orrs	r4, r3
 80124ea:	d016      	beq.n	801251a <__ieee754_pow+0x21a>
 80124ec:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8012570 <__ieee754_pow+0x270>
 80124f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80124f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80124f8:	f240 810e 	bls.w	8012718 <__ieee754_pow+0x418>
 80124fc:	4b26      	ldr	r3, [pc, #152]	@ (8012598 <__ieee754_pow+0x298>)
 80124fe:	459a      	cmp	sl, r3
 8012500:	4b23      	ldr	r3, [pc, #140]	@ (8012590 <__ieee754_pow+0x290>)
 8012502:	d916      	bls.n	8012532 <__ieee754_pow+0x232>
 8012504:	4598      	cmp	r8, r3
 8012506:	d80b      	bhi.n	8012520 <__ieee754_pow+0x220>
 8012508:	f1b9 0f00 	cmp.w	r9, #0
 801250c:	da0b      	bge.n	8012526 <__ieee754_pow+0x226>
 801250e:	2000      	movs	r0, #0
 8012510:	b011      	add	sp, #68	@ 0x44
 8012512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012516:	f001 b883 	b.w	8013620 <__math_oflow>
 801251a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8012578 <__ieee754_pow+0x278>
 801251e:	e7e7      	b.n	80124f0 <__ieee754_pow+0x1f0>
 8012520:	f1b9 0f00 	cmp.w	r9, #0
 8012524:	dcf3      	bgt.n	801250e <__ieee754_pow+0x20e>
 8012526:	2000      	movs	r0, #0
 8012528:	b011      	add	sp, #68	@ 0x44
 801252a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252e:	f001 b86f 	b.w	8013610 <__math_uflow>
 8012532:	4598      	cmp	r8, r3
 8012534:	d20c      	bcs.n	8012550 <__ieee754_pow+0x250>
 8012536:	2200      	movs	r2, #0
 8012538:	2300      	movs	r3, #0
 801253a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801253e:	f7ee fae1 	bl	8000b04 <__aeabi_dcmplt>
 8012542:	3800      	subs	r0, #0
 8012544:	bf18      	it	ne
 8012546:	2001      	movne	r0, #1
 8012548:	f1b9 0f00 	cmp.w	r9, #0
 801254c:	daec      	bge.n	8012528 <__ieee754_pow+0x228>
 801254e:	e7df      	b.n	8012510 <__ieee754_pow+0x210>
 8012550:	4b0e      	ldr	r3, [pc, #56]	@ (801258c <__ieee754_pow+0x28c>)
 8012552:	2200      	movs	r2, #0
 8012554:	4598      	cmp	r8, r3
 8012556:	d921      	bls.n	801259c <__ieee754_pow+0x29c>
 8012558:	2300      	movs	r3, #0
 801255a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255e:	f7ee fad1 	bl	8000b04 <__aeabi_dcmplt>
 8012562:	3800      	subs	r0, #0
 8012564:	bf18      	it	ne
 8012566:	2001      	movne	r0, #1
 8012568:	f1b9 0f00 	cmp.w	r9, #0
 801256c:	dcd0      	bgt.n	8012510 <__ieee754_pow+0x210>
 801256e:	e7db      	b.n	8012528 <__ieee754_pow+0x228>
 8012570:	00000000 	.word	0x00000000
 8012574:	3ff00000 	.word	0x3ff00000
 8012578:	00000000 	.word	0x00000000
 801257c:	bff00000 	.word	0xbff00000
 8012580:	fff00000 	.word	0xfff00000
 8012584:	7ff00000 	.word	0x7ff00000
 8012588:	433fffff 	.word	0x433fffff
 801258c:	3ff00000 	.word	0x3ff00000
 8012590:	3fefffff 	.word	0x3fefffff
 8012594:	3fe00000 	.word	0x3fe00000
 8012598:	43f00000 	.word	0x43f00000
 801259c:	4b5a      	ldr	r3, [pc, #360]	@ (8012708 <__ieee754_pow+0x408>)
 801259e:	f7ed fe87 	bl	80002b0 <__aeabi_dsub>
 80125a2:	4604      	mov	r4, r0
 80125a4:	460d      	mov	r5, r1
 80125a6:	a350      	add	r3, pc, #320	@ (adr r3, 80126e8 <__ieee754_pow+0x3e8>)
 80125a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ac:	f7ee f838 	bl	8000620 <__aeabi_dmul>
 80125b0:	4606      	mov	r6, r0
 80125b2:	460f      	mov	r7, r1
 80125b4:	4620      	mov	r0, r4
 80125b6:	4629      	mov	r1, r5
 80125b8:	a34d      	add	r3, pc, #308	@ (adr r3, 80126f0 <__ieee754_pow+0x3f0>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	f7ee f82f 	bl	8000620 <__aeabi_dmul>
 80125c2:	2200      	movs	r2, #0
 80125c4:	4682      	mov	sl, r0
 80125c6:	468b      	mov	fp, r1
 80125c8:	4b50      	ldr	r3, [pc, #320]	@ (801270c <__ieee754_pow+0x40c>)
 80125ca:	4620      	mov	r0, r4
 80125cc:	4629      	mov	r1, r5
 80125ce:	f7ee f827 	bl	8000620 <__aeabi_dmul>
 80125d2:	4602      	mov	r2, r0
 80125d4:	460b      	mov	r3, r1
 80125d6:	a148      	add	r1, pc, #288	@ (adr r1, 80126f8 <__ieee754_pow+0x3f8>)
 80125d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125dc:	f7ed fe68 	bl	80002b0 <__aeabi_dsub>
 80125e0:	4622      	mov	r2, r4
 80125e2:	462b      	mov	r3, r5
 80125e4:	f7ee f81c 	bl	8000620 <__aeabi_dmul>
 80125e8:	4602      	mov	r2, r0
 80125ea:	460b      	mov	r3, r1
 80125ec:	2000      	movs	r0, #0
 80125ee:	4948      	ldr	r1, [pc, #288]	@ (8012710 <__ieee754_pow+0x410>)
 80125f0:	f7ed fe5e 	bl	80002b0 <__aeabi_dsub>
 80125f4:	4680      	mov	r8, r0
 80125f6:	4689      	mov	r9, r1
 80125f8:	4622      	mov	r2, r4
 80125fa:	462b      	mov	r3, r5
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	2400      	movs	r4, #0
 8012602:	f7ee f80d 	bl	8000620 <__aeabi_dmul>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	4640      	mov	r0, r8
 801260c:	4649      	mov	r1, r9
 801260e:	f7ee f807 	bl	8000620 <__aeabi_dmul>
 8012612:	a33b      	add	r3, pc, #236	@ (adr r3, 8012700 <__ieee754_pow+0x400>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	f7ee f802 	bl	8000620 <__aeabi_dmul>
 801261c:	4602      	mov	r2, r0
 801261e:	460b      	mov	r3, r1
 8012620:	4650      	mov	r0, sl
 8012622:	4659      	mov	r1, fp
 8012624:	f7ed fe44 	bl	80002b0 <__aeabi_dsub>
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	4680      	mov	r8, r0
 801262e:	4689      	mov	r9, r1
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ed fe3e 	bl	80002b4 <__adddf3>
 8012638:	4632      	mov	r2, r6
 801263a:	463b      	mov	r3, r7
 801263c:	4620      	mov	r0, r4
 801263e:	460d      	mov	r5, r1
 8012640:	f7ed fe36 	bl	80002b0 <__aeabi_dsub>
 8012644:	4602      	mov	r2, r0
 8012646:	460b      	mov	r3, r1
 8012648:	4640      	mov	r0, r8
 801264a:	4649      	mov	r1, r9
 801264c:	f7ed fe30 	bl	80002b0 <__aeabi_dsub>
 8012650:	4606      	mov	r6, r0
 8012652:	460f      	mov	r7, r1
 8012654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012658:	e9dd 0100 	ldrd	r0, r1, [sp]
 801265c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012660:	2300      	movs	r3, #0
 8012662:	9304      	str	r3, [sp, #16]
 8012664:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012668:	4652      	mov	r2, sl
 801266a:	465b      	mov	r3, fp
 801266c:	f7ed fe20 	bl	80002b0 <__aeabi_dsub>
 8012670:	4622      	mov	r2, r4
 8012672:	462b      	mov	r3, r5
 8012674:	f7ed ffd4 	bl	8000620 <__aeabi_dmul>
 8012678:	4680      	mov	r8, r0
 801267a:	4689      	mov	r9, r1
 801267c:	4630      	mov	r0, r6
 801267e:	4639      	mov	r1, r7
 8012680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012684:	f7ed ffcc 	bl	8000620 <__aeabi_dmul>
 8012688:	4602      	mov	r2, r0
 801268a:	460b      	mov	r3, r1
 801268c:	4640      	mov	r0, r8
 801268e:	4649      	mov	r1, r9
 8012690:	f7ed fe10 	bl	80002b4 <__adddf3>
 8012694:	4606      	mov	r6, r0
 8012696:	460f      	mov	r7, r1
 8012698:	4652      	mov	r2, sl
 801269a:	465b      	mov	r3, fp
 801269c:	4620      	mov	r0, r4
 801269e:	4629      	mov	r1, r5
 80126a0:	f7ed ffbe 	bl	8000620 <__aeabi_dmul>
 80126a4:	460b      	mov	r3, r1
 80126a6:	4602      	mov	r2, r0
 80126a8:	4680      	mov	r8, r0
 80126aa:	4689      	mov	r9, r1
 80126ac:	4630      	mov	r0, r6
 80126ae:	4639      	mov	r1, r7
 80126b0:	f7ed fe00 	bl	80002b4 <__adddf3>
 80126b4:	4b17      	ldr	r3, [pc, #92]	@ (8012714 <__ieee754_pow+0x414>)
 80126b6:	4604      	mov	r4, r0
 80126b8:	460d      	mov	r5, r1
 80126ba:	4299      	cmp	r1, r3
 80126bc:	468a      	mov	sl, r1
 80126be:	468b      	mov	fp, r1
 80126c0:	f340 82f0 	ble.w	8012ca4 <__ieee754_pow+0x9a4>
 80126c4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80126c8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80126cc:	4303      	orrs	r3, r0
 80126ce:	f000 81e8 	beq.w	8012aa2 <__ieee754_pow+0x7a2>
 80126d2:	2200      	movs	r2, #0
 80126d4:	2300      	movs	r3, #0
 80126d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126da:	f7ee fa13 	bl	8000b04 <__aeabi_dcmplt>
 80126de:	3800      	subs	r0, #0
 80126e0:	bf18      	it	ne
 80126e2:	2001      	movne	r0, #1
 80126e4:	e714      	b.n	8012510 <__ieee754_pow+0x210>
 80126e6:	bf00      	nop
 80126e8:	60000000 	.word	0x60000000
 80126ec:	3ff71547 	.word	0x3ff71547
 80126f0:	f85ddf44 	.word	0xf85ddf44
 80126f4:	3e54ae0b 	.word	0x3e54ae0b
 80126f8:	55555555 	.word	0x55555555
 80126fc:	3fd55555 	.word	0x3fd55555
 8012700:	652b82fe 	.word	0x652b82fe
 8012704:	3ff71547 	.word	0x3ff71547
 8012708:	3ff00000 	.word	0x3ff00000
 801270c:	3fd00000 	.word	0x3fd00000
 8012710:	3fe00000 	.word	0x3fe00000
 8012714:	408fffff 	.word	0x408fffff
 8012718:	4bd5      	ldr	r3, [pc, #852]	@ (8012a70 <__ieee754_pow+0x770>)
 801271a:	2200      	movs	r2, #0
 801271c:	402b      	ands	r3, r5
 801271e:	b92b      	cbnz	r3, 801272c <__ieee754_pow+0x42c>
 8012720:	4bd4      	ldr	r3, [pc, #848]	@ (8012a74 <__ieee754_pow+0x774>)
 8012722:	f7ed ff7d 	bl	8000620 <__aeabi_dmul>
 8012726:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801272a:	468b      	mov	fp, r1
 801272c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012730:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012734:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012738:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801273c:	4413      	add	r3, r2
 801273e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012742:	930a      	str	r3, [sp, #40]	@ 0x28
 8012744:	4bcc      	ldr	r3, [pc, #816]	@ (8012a78 <__ieee754_pow+0x778>)
 8012746:	459b      	cmp	fp, r3
 8012748:	dd08      	ble.n	801275c <__ieee754_pow+0x45c>
 801274a:	4bcc      	ldr	r3, [pc, #816]	@ (8012a7c <__ieee754_pow+0x77c>)
 801274c:	459b      	cmp	fp, r3
 801274e:	f340 81a5 	ble.w	8012a9c <__ieee754_pow+0x79c>
 8012752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012754:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012758:	3301      	adds	r3, #1
 801275a:	930a      	str	r3, [sp, #40]	@ 0x28
 801275c:	f04f 0a00 	mov.w	sl, #0
 8012760:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012764:	4629      	mov	r1, r5
 8012766:	106d      	asrs	r5, r5, #1
 8012768:	930b      	str	r3, [sp, #44]	@ 0x2c
 801276a:	4bc5      	ldr	r3, [pc, #788]	@ (8012a80 <__ieee754_pow+0x780>)
 801276c:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012770:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012774:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012778:	ed93 7b00 	vldr	d7, [r3]
 801277c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012780:	ec53 2b17 	vmov	r2, r3, d7
 8012784:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012788:	f7ed fd92 	bl	80002b0 <__aeabi_dsub>
 801278c:	4606      	mov	r6, r0
 801278e:	460f      	mov	r7, r1
 8012790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012798:	f7ed fd8c 	bl	80002b4 <__adddf3>
 801279c:	4602      	mov	r2, r0
 801279e:	460b      	mov	r3, r1
 80127a0:	2000      	movs	r0, #0
 80127a2:	49b8      	ldr	r1, [pc, #736]	@ (8012a84 <__ieee754_pow+0x784>)
 80127a4:	f7ee f866 	bl	8000874 <__aeabi_ddiv>
 80127a8:	4602      	mov	r2, r0
 80127aa:	460b      	mov	r3, r1
 80127ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80127b0:	4630      	mov	r0, r6
 80127b2:	4639      	mov	r1, r7
 80127b4:	f7ed ff34 	bl	8000620 <__aeabi_dmul>
 80127b8:	2200      	movs	r2, #0
 80127ba:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80127be:	4614      	mov	r4, r2
 80127c0:	461d      	mov	r5, r3
 80127c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127c6:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80127ca:	f04f 0b00 	mov.w	fp, #0
 80127ce:	4661      	mov	r1, ip
 80127d0:	46e1      	mov	r9, ip
 80127d2:	4658      	mov	r0, fp
 80127d4:	46d8      	mov	r8, fp
 80127d6:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80127da:	f7ed ff21 	bl	8000620 <__aeabi_dmul>
 80127de:	4602      	mov	r2, r0
 80127e0:	460b      	mov	r3, r1
 80127e2:	4630      	mov	r0, r6
 80127e4:	4639      	mov	r1, r7
 80127e6:	f7ed fd63 	bl	80002b0 <__aeabi_dsub>
 80127ea:	4606      	mov	r6, r0
 80127ec:	460f      	mov	r7, r1
 80127ee:	4620      	mov	r0, r4
 80127f0:	4629      	mov	r1, r5
 80127f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127f6:	f7ed fd5b 	bl	80002b0 <__aeabi_dsub>
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012802:	f7ed fd55 	bl	80002b0 <__aeabi_dsub>
 8012806:	465a      	mov	r2, fp
 8012808:	464b      	mov	r3, r9
 801280a:	f7ed ff09 	bl	8000620 <__aeabi_dmul>
 801280e:	4602      	mov	r2, r0
 8012810:	460b      	mov	r3, r1
 8012812:	4630      	mov	r0, r6
 8012814:	4639      	mov	r1, r7
 8012816:	f7ed fd4b 	bl	80002b0 <__aeabi_dsub>
 801281a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801281e:	f7ed feff 	bl	8000620 <__aeabi_dmul>
 8012822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801282a:	4610      	mov	r0, r2
 801282c:	4619      	mov	r1, r3
 801282e:	f7ed fef7 	bl	8000620 <__aeabi_dmul>
 8012832:	4604      	mov	r4, r0
 8012834:	460d      	mov	r5, r1
 8012836:	a37c      	add	r3, pc, #496	@ (adr r3, 8012a28 <__ieee754_pow+0x728>)
 8012838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283c:	f7ed fef0 	bl	8000620 <__aeabi_dmul>
 8012840:	a37b      	add	r3, pc, #492	@ (adr r3, 8012a30 <__ieee754_pow+0x730>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	f7ed fd35 	bl	80002b4 <__adddf3>
 801284a:	4622      	mov	r2, r4
 801284c:	462b      	mov	r3, r5
 801284e:	f7ed fee7 	bl	8000620 <__aeabi_dmul>
 8012852:	a379      	add	r3, pc, #484	@ (adr r3, 8012a38 <__ieee754_pow+0x738>)
 8012854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012858:	f7ed fd2c 	bl	80002b4 <__adddf3>
 801285c:	4622      	mov	r2, r4
 801285e:	462b      	mov	r3, r5
 8012860:	f7ed fede 	bl	8000620 <__aeabi_dmul>
 8012864:	a376      	add	r3, pc, #472	@ (adr r3, 8012a40 <__ieee754_pow+0x740>)
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	f7ed fd23 	bl	80002b4 <__adddf3>
 801286e:	4622      	mov	r2, r4
 8012870:	462b      	mov	r3, r5
 8012872:	f7ed fed5 	bl	8000620 <__aeabi_dmul>
 8012876:	a374      	add	r3, pc, #464	@ (adr r3, 8012a48 <__ieee754_pow+0x748>)
 8012878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287c:	f7ed fd1a 	bl	80002b4 <__adddf3>
 8012880:	4622      	mov	r2, r4
 8012882:	462b      	mov	r3, r5
 8012884:	f7ed fecc 	bl	8000620 <__aeabi_dmul>
 8012888:	a371      	add	r3, pc, #452	@ (adr r3, 8012a50 <__ieee754_pow+0x750>)
 801288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288e:	f7ed fd11 	bl	80002b4 <__adddf3>
 8012892:	4606      	mov	r6, r0
 8012894:	460f      	mov	r7, r1
 8012896:	4622      	mov	r2, r4
 8012898:	462b      	mov	r3, r5
 801289a:	4620      	mov	r0, r4
 801289c:	4629      	mov	r1, r5
 801289e:	f7ed febf 	bl	8000620 <__aeabi_dmul>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	4630      	mov	r0, r6
 80128a8:	4639      	mov	r1, r7
 80128aa:	f7ed feb9 	bl	8000620 <__aeabi_dmul>
 80128ae:	465a      	mov	r2, fp
 80128b0:	4604      	mov	r4, r0
 80128b2:	460d      	mov	r5, r1
 80128b4:	464b      	mov	r3, r9
 80128b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128ba:	f7ed fcfb 	bl	80002b4 <__adddf3>
 80128be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128c2:	f7ed fead 	bl	8000620 <__aeabi_dmul>
 80128c6:	4622      	mov	r2, r4
 80128c8:	462b      	mov	r3, r5
 80128ca:	f7ed fcf3 	bl	80002b4 <__adddf3>
 80128ce:	465a      	mov	r2, fp
 80128d0:	464b      	mov	r3, r9
 80128d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128d6:	4658      	mov	r0, fp
 80128d8:	4649      	mov	r1, r9
 80128da:	f7ed fea1 	bl	8000620 <__aeabi_dmul>
 80128de:	2200      	movs	r2, #0
 80128e0:	4b69      	ldr	r3, [pc, #420]	@ (8012a88 <__ieee754_pow+0x788>)
 80128e2:	4606      	mov	r6, r0
 80128e4:	460f      	mov	r7, r1
 80128e6:	f7ed fce5 	bl	80002b4 <__adddf3>
 80128ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128ee:	f7ed fce1 	bl	80002b4 <__adddf3>
 80128f2:	460d      	mov	r5, r1
 80128f4:	460b      	mov	r3, r1
 80128f6:	4640      	mov	r0, r8
 80128f8:	4649      	mov	r1, r9
 80128fa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80128fe:	465c      	mov	r4, fp
 8012900:	465a      	mov	r2, fp
 8012902:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012906:	f7ed fe8b 	bl	8000620 <__aeabi_dmul>
 801290a:	2200      	movs	r2, #0
 801290c:	4680      	mov	r8, r0
 801290e:	4689      	mov	r9, r1
 8012910:	4b5d      	ldr	r3, [pc, #372]	@ (8012a88 <__ieee754_pow+0x788>)
 8012912:	4620      	mov	r0, r4
 8012914:	4629      	mov	r1, r5
 8012916:	f7ed fccb 	bl	80002b0 <__aeabi_dsub>
 801291a:	4632      	mov	r2, r6
 801291c:	463b      	mov	r3, r7
 801291e:	f7ed fcc7 	bl	80002b0 <__aeabi_dsub>
 8012922:	4602      	mov	r2, r0
 8012924:	460b      	mov	r3, r1
 8012926:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801292a:	f7ed fcc1 	bl	80002b0 <__aeabi_dsub>
 801292e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012932:	f7ed fe75 	bl	8000620 <__aeabi_dmul>
 8012936:	4606      	mov	r6, r0
 8012938:	460f      	mov	r7, r1
 801293a:	4622      	mov	r2, r4
 801293c:	462b      	mov	r3, r5
 801293e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012942:	f7ed fe6d 	bl	8000620 <__aeabi_dmul>
 8012946:	4602      	mov	r2, r0
 8012948:	460b      	mov	r3, r1
 801294a:	4630      	mov	r0, r6
 801294c:	4639      	mov	r1, r7
 801294e:	f7ed fcb1 	bl	80002b4 <__adddf3>
 8012952:	4606      	mov	r6, r0
 8012954:	460f      	mov	r7, r1
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	4640      	mov	r0, r8
 801295c:	4649      	mov	r1, r9
 801295e:	f7ed fca9 	bl	80002b4 <__adddf3>
 8012962:	460d      	mov	r5, r1
 8012964:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012968:	a33b      	add	r3, pc, #236	@ (adr r3, 8012a58 <__ieee754_pow+0x758>)
 801296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296e:	465c      	mov	r4, fp
 8012970:	4658      	mov	r0, fp
 8012972:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012976:	f7ed fe53 	bl	8000620 <__aeabi_dmul>
 801297a:	4642      	mov	r2, r8
 801297c:	464b      	mov	r3, r9
 801297e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012982:	4620      	mov	r0, r4
 8012984:	4629      	mov	r1, r5
 8012986:	f7ed fc93 	bl	80002b0 <__aeabi_dsub>
 801298a:	4602      	mov	r2, r0
 801298c:	460b      	mov	r3, r1
 801298e:	4630      	mov	r0, r6
 8012990:	4639      	mov	r1, r7
 8012992:	f7ed fc8d 	bl	80002b0 <__aeabi_dsub>
 8012996:	a332      	add	r3, pc, #200	@ (adr r3, 8012a60 <__ieee754_pow+0x760>)
 8012998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299c:	f7ed fe40 	bl	8000620 <__aeabi_dmul>
 80129a0:	4606      	mov	r6, r0
 80129a2:	460f      	mov	r7, r1
 80129a4:	4620      	mov	r0, r4
 80129a6:	4629      	mov	r1, r5
 80129a8:	a32f      	add	r3, pc, #188	@ (adr r3, 8012a68 <__ieee754_pow+0x768>)
 80129aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ae:	f7ed fe37 	bl	8000620 <__aeabi_dmul>
 80129b2:	4602      	mov	r2, r0
 80129b4:	460b      	mov	r3, r1
 80129b6:	4630      	mov	r0, r6
 80129b8:	4639      	mov	r1, r7
 80129ba:	f7ed fc7b 	bl	80002b4 <__adddf3>
 80129be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80129c0:	4b32      	ldr	r3, [pc, #200]	@ (8012a8c <__ieee754_pow+0x78c>)
 80129c2:	4413      	add	r3, r2
 80129c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c8:	f7ed fc74 	bl	80002b4 <__adddf3>
 80129cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80129d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80129d2:	f7ed fdbb 	bl	800054c <__aeabi_i2d>
 80129d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80129d8:	4b2d      	ldr	r3, [pc, #180]	@ (8012a90 <__ieee754_pow+0x790>)
 80129da:	4606      	mov	r6, r0
 80129dc:	460f      	mov	r7, r1
 80129de:	4413      	add	r3, r2
 80129e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129ec:	f7ed fc62 	bl	80002b4 <__adddf3>
 80129f0:	4642      	mov	r2, r8
 80129f2:	464b      	mov	r3, r9
 80129f4:	f7ed fc5e 	bl	80002b4 <__adddf3>
 80129f8:	4632      	mov	r2, r6
 80129fa:	463b      	mov	r3, r7
 80129fc:	f7ed fc5a 	bl	80002b4 <__adddf3>
 8012a00:	4632      	mov	r2, r6
 8012a02:	463b      	mov	r3, r7
 8012a04:	460d      	mov	r5, r1
 8012a06:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012a0a:	4658      	mov	r0, fp
 8012a0c:	465c      	mov	r4, fp
 8012a0e:	f7ed fc4f 	bl	80002b0 <__aeabi_dsub>
 8012a12:	4642      	mov	r2, r8
 8012a14:	464b      	mov	r3, r9
 8012a16:	f7ed fc4b 	bl	80002b0 <__aeabi_dsub>
 8012a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a1e:	f7ed fc47 	bl	80002b0 <__aeabi_dsub>
 8012a22:	4602      	mov	r2, r0
 8012a24:	e036      	b.n	8012a94 <__ieee754_pow+0x794>
 8012a26:	bf00      	nop
 8012a28:	4a454eef 	.word	0x4a454eef
 8012a2c:	3fca7e28 	.word	0x3fca7e28
 8012a30:	93c9db65 	.word	0x93c9db65
 8012a34:	3fcd864a 	.word	0x3fcd864a
 8012a38:	a91d4101 	.word	0xa91d4101
 8012a3c:	3fd17460 	.word	0x3fd17460
 8012a40:	518f264d 	.word	0x518f264d
 8012a44:	3fd55555 	.word	0x3fd55555
 8012a48:	db6fabff 	.word	0xdb6fabff
 8012a4c:	3fdb6db6 	.word	0x3fdb6db6
 8012a50:	33333303 	.word	0x33333303
 8012a54:	3fe33333 	.word	0x3fe33333
 8012a58:	e0000000 	.word	0xe0000000
 8012a5c:	3feec709 	.word	0x3feec709
 8012a60:	dc3a03fd 	.word	0xdc3a03fd
 8012a64:	3feec709 	.word	0x3feec709
 8012a68:	145b01f5 	.word	0x145b01f5
 8012a6c:	be3e2fe0 	.word	0xbe3e2fe0
 8012a70:	7ff00000 	.word	0x7ff00000
 8012a74:	43400000 	.word	0x43400000
 8012a78:	0003988e 	.word	0x0003988e
 8012a7c:	000bb679 	.word	0x000bb679
 8012a80:	08014980 	.word	0x08014980
 8012a84:	3ff00000 	.word	0x3ff00000
 8012a88:	40080000 	.word	0x40080000
 8012a8c:	08014960 	.word	0x08014960
 8012a90:	08014970 	.word	0x08014970
 8012a94:	460b      	mov	r3, r1
 8012a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a9a:	e5d7      	b.n	801264c <__ieee754_pow+0x34c>
 8012a9c:	f04f 0a01 	mov.w	sl, #1
 8012aa0:	e65e      	b.n	8012760 <__ieee754_pow+0x460>
 8012aa2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8012d74 <__ieee754_pow+0xa74>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ed fc02 	bl	80002b4 <__adddf3>
 8012ab0:	4642      	mov	r2, r8
 8012ab2:	464b      	mov	r3, r9
 8012ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8012ab8:	4620      	mov	r0, r4
 8012aba:	4629      	mov	r1, r5
 8012abc:	f7ed fbf8 	bl	80002b0 <__aeabi_dsub>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ac8:	f7ee f83a 	bl	8000b40 <__aeabi_dcmpgt>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	f47f ae00 	bne.w	80126d2 <__ieee754_pow+0x3d2>
 8012ad2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8012ad6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012ada:	48a1      	ldr	r0, [pc, #644]	@ (8012d60 <__ieee754_pow+0xa60>)
 8012adc:	f1bb 0f00 	cmp.w	fp, #0
 8012ae0:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012ae4:	f04f 0200 	mov.w	r2, #0
 8012ae8:	fa43 fa0a 	asr.w	sl, r3, sl
 8012aec:	44da      	add	sl, fp
 8012aee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012af2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012af6:	fa40 f001 	asr.w	r0, r0, r1
 8012afa:	f1c1 0114 	rsb	r1, r1, #20
 8012afe:	ea00 030a 	and.w	r3, r0, sl
 8012b02:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012b06:	4640      	mov	r0, r8
 8012b08:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012b0c:	fa4a fa01 	asr.w	sl, sl, r1
 8012b10:	4649      	mov	r1, r9
 8012b12:	bfb8      	it	lt
 8012b14:	f1ca 0a00 	rsblt	sl, sl, #0
 8012b18:	f7ed fbca 	bl	80002b0 <__aeabi_dsub>
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	4689      	mov	r9, r1
 8012b20:	2400      	movs	r4, #0
 8012b22:	4632      	mov	r2, r6
 8012b24:	463b      	mov	r3, r7
 8012b26:	4640      	mov	r0, r8
 8012b28:	4649      	mov	r1, r9
 8012b2a:	f7ed fbc3 	bl	80002b4 <__adddf3>
 8012b2e:	460d      	mov	r5, r1
 8012b30:	4620      	mov	r0, r4
 8012b32:	a37b      	add	r3, pc, #492	@ (adr r3, 8012d20 <__ieee754_pow+0xa20>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fd72 	bl	8000620 <__aeabi_dmul>
 8012b3c:	4642      	mov	r2, r8
 8012b3e:	464b      	mov	r3, r9
 8012b40:	e9cd 0100 	strd	r0, r1, [sp]
 8012b44:	4620      	mov	r0, r4
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7ed fbb2 	bl	80002b0 <__aeabi_dsub>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	460b      	mov	r3, r1
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed fbac 	bl	80002b0 <__aeabi_dsub>
 8012b58:	a373      	add	r3, pc, #460	@ (adr r3, 8012d28 <__ieee754_pow+0xa28>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	f7ed fd5f 	bl	8000620 <__aeabi_dmul>
 8012b62:	4680      	mov	r8, r0
 8012b64:	4689      	mov	r9, r1
 8012b66:	4620      	mov	r0, r4
 8012b68:	4629      	mov	r1, r5
 8012b6a:	a371      	add	r3, pc, #452	@ (adr r3, 8012d30 <__ieee754_pow+0xa30>)
 8012b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b70:	f7ed fd56 	bl	8000620 <__aeabi_dmul>
 8012b74:	4602      	mov	r2, r0
 8012b76:	460b      	mov	r3, r1
 8012b78:	4640      	mov	r0, r8
 8012b7a:	4649      	mov	r1, r9
 8012b7c:	f7ed fb9a 	bl	80002b4 <__adddf3>
 8012b80:	4604      	mov	r4, r0
 8012b82:	460d      	mov	r5, r1
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b8c:	f7ed fb92 	bl	80002b4 <__adddf3>
 8012b90:	4680      	mov	r8, r0
 8012b92:	4689      	mov	r9, r1
 8012b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b98:	f7ed fb8a 	bl	80002b0 <__aeabi_dsub>
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	460b      	mov	r3, r1
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	f7ed fb84 	bl	80002b0 <__aeabi_dsub>
 8012ba8:	4642      	mov	r2, r8
 8012baa:	4606      	mov	r6, r0
 8012bac:	460f      	mov	r7, r1
 8012bae:	464b      	mov	r3, r9
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	4649      	mov	r1, r9
 8012bb4:	f7ed fd34 	bl	8000620 <__aeabi_dmul>
 8012bb8:	4604      	mov	r4, r0
 8012bba:	460d      	mov	r5, r1
 8012bbc:	a35e      	add	r3, pc, #376	@ (adr r3, 8012d38 <__ieee754_pow+0xa38>)
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f7ed fd2d 	bl	8000620 <__aeabi_dmul>
 8012bc6:	a35e      	add	r3, pc, #376	@ (adr r3, 8012d40 <__ieee754_pow+0xa40>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	f7ed fb70 	bl	80002b0 <__aeabi_dsub>
 8012bd0:	4622      	mov	r2, r4
 8012bd2:	462b      	mov	r3, r5
 8012bd4:	f7ed fd24 	bl	8000620 <__aeabi_dmul>
 8012bd8:	a35b      	add	r3, pc, #364	@ (adr r3, 8012d48 <__ieee754_pow+0xa48>)
 8012bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bde:	f7ed fb69 	bl	80002b4 <__adddf3>
 8012be2:	4622      	mov	r2, r4
 8012be4:	462b      	mov	r3, r5
 8012be6:	f7ed fd1b 	bl	8000620 <__aeabi_dmul>
 8012bea:	a359      	add	r3, pc, #356	@ (adr r3, 8012d50 <__ieee754_pow+0xa50>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	f7ed fb5e 	bl	80002b0 <__aeabi_dsub>
 8012bf4:	4622      	mov	r2, r4
 8012bf6:	462b      	mov	r3, r5
 8012bf8:	f7ed fd12 	bl	8000620 <__aeabi_dmul>
 8012bfc:	a356      	add	r3, pc, #344	@ (adr r3, 8012d58 <__ieee754_pow+0xa58>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f7ed fb57 	bl	80002b4 <__adddf3>
 8012c06:	4622      	mov	r2, r4
 8012c08:	462b      	mov	r3, r5
 8012c0a:	f7ed fd09 	bl	8000620 <__aeabi_dmul>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	460b      	mov	r3, r1
 8012c12:	4640      	mov	r0, r8
 8012c14:	4649      	mov	r1, r9
 8012c16:	f7ed fb4b 	bl	80002b0 <__aeabi_dsub>
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	460d      	mov	r5, r1
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	4640      	mov	r0, r8
 8012c24:	4649      	mov	r1, r9
 8012c26:	f7ed fcfb 	bl	8000620 <__aeabi_dmul>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012c30:	e9cd 0100 	strd	r0, r1, [sp]
 8012c34:	4620      	mov	r0, r4
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7ed fb3a 	bl	80002b0 <__aeabi_dsub>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	460b      	mov	r3, r1
 8012c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c44:	f7ed fe16 	bl	8000874 <__aeabi_ddiv>
 8012c48:	4632      	mov	r2, r6
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	460d      	mov	r5, r1
 8012c4e:	463b      	mov	r3, r7
 8012c50:	4640      	mov	r0, r8
 8012c52:	4649      	mov	r1, r9
 8012c54:	f7ed fce4 	bl	8000620 <__aeabi_dmul>
 8012c58:	4632      	mov	r2, r6
 8012c5a:	463b      	mov	r3, r7
 8012c5c:	f7ed fb2a 	bl	80002b4 <__adddf3>
 8012c60:	4602      	mov	r2, r0
 8012c62:	460b      	mov	r3, r1
 8012c64:	4620      	mov	r0, r4
 8012c66:	4629      	mov	r1, r5
 8012c68:	f7ed fb22 	bl	80002b0 <__aeabi_dsub>
 8012c6c:	4642      	mov	r2, r8
 8012c6e:	464b      	mov	r3, r9
 8012c70:	f7ed fb1e 	bl	80002b0 <__aeabi_dsub>
 8012c74:	460b      	mov	r3, r1
 8012c76:	4602      	mov	r2, r0
 8012c78:	493a      	ldr	r1, [pc, #232]	@ (8012d64 <__ieee754_pow+0xa64>)
 8012c7a:	2000      	movs	r0, #0
 8012c7c:	f7ed fb18 	bl	80002b0 <__aeabi_dsub>
 8012c80:	ec41 0b10 	vmov	d0, r0, r1
 8012c84:	ee10 3a90 	vmov	r3, s1
 8012c88:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c90:	da30      	bge.n	8012cf4 <__ieee754_pow+0x9f4>
 8012c92:	4650      	mov	r0, sl
 8012c94:	f000 fc10 	bl	80134b8 <scalbn>
 8012c98:	ec51 0b10 	vmov	r0, r1, d0
 8012c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ca0:	f7ff bbd5 	b.w	801244e <__ieee754_pow+0x14e>
 8012ca4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012ca8:	4c2f      	ldr	r4, [pc, #188]	@ (8012d68 <__ieee754_pow+0xa68>)
 8012caa:	42a3      	cmp	r3, r4
 8012cac:	d91a      	bls.n	8012ce4 <__ieee754_pow+0x9e4>
 8012cae:	4b2f      	ldr	r3, [pc, #188]	@ (8012d6c <__ieee754_pow+0xa6c>)
 8012cb0:	440b      	add	r3, r1
 8012cb2:	4303      	orrs	r3, r0
 8012cb4:	d009      	beq.n	8012cca <__ieee754_pow+0x9ca>
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cbe:	f7ed ff21 	bl	8000b04 <__aeabi_dcmplt>
 8012cc2:	3800      	subs	r0, #0
 8012cc4:	bf18      	it	ne
 8012cc6:	2001      	movne	r0, #1
 8012cc8:	e42e      	b.n	8012528 <__ieee754_pow+0x228>
 8012cca:	4642      	mov	r2, r8
 8012ccc:	464b      	mov	r3, r9
 8012cce:	f7ed faef 	bl	80002b0 <__aeabi_dsub>
 8012cd2:	4632      	mov	r2, r6
 8012cd4:	463b      	mov	r3, r7
 8012cd6:	f7ed ff29 	bl	8000b2c <__aeabi_dcmpge>
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d1eb      	bne.n	8012cb6 <__ieee754_pow+0x9b6>
 8012cde:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8012d7c <__ieee754_pow+0xa7c>
 8012ce2:	e6f6      	b.n	8012ad2 <__ieee754_pow+0x7d2>
 8012ce4:	469a      	mov	sl, r3
 8012ce6:	4b22      	ldr	r3, [pc, #136]	@ (8012d70 <__ieee754_pow+0xa70>)
 8012ce8:	459a      	cmp	sl, r3
 8012cea:	f63f aef2 	bhi.w	8012ad2 <__ieee754_pow+0x7d2>
 8012cee:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012cf2:	e715      	b.n	8012b20 <__ieee754_pow+0x820>
 8012cf4:	ec51 0b10 	vmov	r0, r1, d0
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	e7cf      	b.n	8012c9c <__ieee754_pow+0x99c>
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	4919      	ldr	r1, [pc, #100]	@ (8012d64 <__ieee754_pow+0xa64>)
 8012d00:	f7ff bb1b 	b.w	801233a <__ieee754_pow+0x3a>
 8012d04:	2000      	movs	r0, #0
 8012d06:	2100      	movs	r1, #0
 8012d08:	f7ff bb17 	b.w	801233a <__ieee754_pow+0x3a>
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	4639      	mov	r1, r7
 8012d10:	f7ff bb13 	b.w	801233a <__ieee754_pow+0x3a>
 8012d14:	460c      	mov	r4, r1
 8012d16:	f7ff bb61 	b.w	80123dc <__ieee754_pow+0xdc>
 8012d1a:	2400      	movs	r4, #0
 8012d1c:	f7ff bb4c 	b.w	80123b8 <__ieee754_pow+0xb8>
 8012d20:	00000000 	.word	0x00000000
 8012d24:	3fe62e43 	.word	0x3fe62e43
 8012d28:	fefa39ef 	.word	0xfefa39ef
 8012d2c:	3fe62e42 	.word	0x3fe62e42
 8012d30:	0ca86c39 	.word	0x0ca86c39
 8012d34:	be205c61 	.word	0xbe205c61
 8012d38:	72bea4d0 	.word	0x72bea4d0
 8012d3c:	3e663769 	.word	0x3e663769
 8012d40:	c5d26bf1 	.word	0xc5d26bf1
 8012d44:	3ebbbd41 	.word	0x3ebbbd41
 8012d48:	af25de2c 	.word	0xaf25de2c
 8012d4c:	3f11566a 	.word	0x3f11566a
 8012d50:	16bebd93 	.word	0x16bebd93
 8012d54:	3f66c16c 	.word	0x3f66c16c
 8012d58:	5555553e 	.word	0x5555553e
 8012d5c:	3fc55555 	.word	0x3fc55555
 8012d60:	fff00000 	.word	0xfff00000
 8012d64:	3ff00000 	.word	0x3ff00000
 8012d68:	4090cbff 	.word	0x4090cbff
 8012d6c:	3f6f3400 	.word	0x3f6f3400
 8012d70:	3fe00000 	.word	0x3fe00000
 8012d74:	652b82fe 	.word	0x652b82fe
 8012d78:	3c971547 	.word	0x3c971547
 8012d7c:	4090cc00 	.word	0x4090cc00

08012d80 <__ieee754_rem_pio2>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	ec57 6b10 	vmov	r6, r7, d0
 8012d88:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012d8c:	4bc4      	ldr	r3, [pc, #784]	@ (80130a0 <__ieee754_rem_pio2+0x320>)
 8012d8e:	b08d      	sub	sp, #52	@ 0x34
 8012d90:	4604      	mov	r4, r0
 8012d92:	4598      	cmp	r8, r3
 8012d94:	9704      	str	r7, [sp, #16]
 8012d96:	d807      	bhi.n	8012da8 <__ieee754_rem_pio2+0x28>
 8012d98:	2200      	movs	r2, #0
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	ed80 0b00 	vstr	d0, [r0]
 8012da0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012da4:	2500      	movs	r5, #0
 8012da6:	e028      	b.n	8012dfa <__ieee754_rem_pio2+0x7a>
 8012da8:	4bbe      	ldr	r3, [pc, #760]	@ (80130a4 <__ieee754_rem_pio2+0x324>)
 8012daa:	4598      	cmp	r8, r3
 8012dac:	d878      	bhi.n	8012ea0 <__ieee754_rem_pio2+0x120>
 8012dae:	9b04      	ldr	r3, [sp, #16]
 8012db0:	4630      	mov	r0, r6
 8012db2:	4dbd      	ldr	r5, [pc, #756]	@ (80130a8 <__ieee754_rem_pio2+0x328>)
 8012db4:	4639      	mov	r1, r7
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8013068 <__ieee754_rem_pio2+0x2e8>)
 8012dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbe:	dd38      	ble.n	8012e32 <__ieee754_rem_pio2+0xb2>
 8012dc0:	f7ed fa76 	bl	80002b0 <__aeabi_dsub>
 8012dc4:	45a8      	cmp	r8, r5
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	460f      	mov	r7, r1
 8012dca:	d01a      	beq.n	8012e02 <__ieee754_rem_pio2+0x82>
 8012dcc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2f0>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	f7ed fa6d 	bl	80002b0 <__aeabi_dsub>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	4680      	mov	r8, r0
 8012ddc:	4689      	mov	r9, r1
 8012dde:	4630      	mov	r0, r6
 8012de0:	4639      	mov	r1, r7
 8012de2:	f7ed fa65 	bl	80002b0 <__aeabi_dsub>
 8012de6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2f0>)
 8012de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dec:	2501      	movs	r5, #1
 8012dee:	f7ed fa5f 	bl	80002b0 <__aeabi_dsub>
 8012df2:	e9c4 8900 	strd	r8, r9, [r4]
 8012df6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	b00d      	add	sp, #52	@ 0x34
 8012dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e02:	a39d      	add	r3, pc, #628	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f8>)
 8012e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e08:	f7ed fa52 	bl	80002b0 <__aeabi_dsub>
 8012e0c:	4606      	mov	r6, r0
 8012e0e:	460f      	mov	r7, r1
 8012e10:	a39b      	add	r3, pc, #620	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x300>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	f7ed fa4b 	bl	80002b0 <__aeabi_dsub>
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	4680      	mov	r8, r0
 8012e20:	4689      	mov	r9, r1
 8012e22:	4630      	mov	r0, r6
 8012e24:	4639      	mov	r1, r7
 8012e26:	f7ed fa43 	bl	80002b0 <__aeabi_dsub>
 8012e2a:	a395      	add	r3, pc, #596	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x300>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	e7dc      	b.n	8012dec <__ieee754_rem_pio2+0x6c>
 8012e32:	f7ed fa3f 	bl	80002b4 <__adddf3>
 8012e36:	45a8      	cmp	r8, r5
 8012e38:	4606      	mov	r6, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	d018      	beq.n	8012e70 <__ieee754_rem_pio2+0xf0>
 8012e3e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2f0>)
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	f7ed fa36 	bl	80002b4 <__adddf3>
 8012e48:	4602      	mov	r2, r0
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	4680      	mov	r8, r0
 8012e4e:	4689      	mov	r9, r1
 8012e50:	4630      	mov	r0, r6
 8012e52:	4639      	mov	r1, r7
 8012e54:	f7ed fa2c 	bl	80002b0 <__aeabi_dsub>
 8012e58:	a385      	add	r3, pc, #532	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2f0>)
 8012e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5e:	f7ed fa29 	bl	80002b4 <__adddf3>
 8012e62:	f04f 35ff 	mov.w	r5, #4294967295
 8012e66:	e9c4 8900 	strd	r8, r9, [r4]
 8012e6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e6e:	e7c4      	b.n	8012dfa <__ieee754_rem_pio2+0x7a>
 8012e70:	a381      	add	r3, pc, #516	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f8>)
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f7ed fa1d 	bl	80002b4 <__adddf3>
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	460f      	mov	r7, r1
 8012e7e:	a380      	add	r3, pc, #512	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x300>)
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed fa16 	bl	80002b4 <__adddf3>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	4689      	mov	r9, r1
 8012e90:	4630      	mov	r0, r6
 8012e92:	4639      	mov	r1, r7
 8012e94:	f7ed fa0c 	bl	80002b0 <__aeabi_dsub>
 8012e98:	a379      	add	r3, pc, #484	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x300>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	e7de      	b.n	8012e5e <__ieee754_rem_pio2+0xde>
 8012ea0:	4b82      	ldr	r3, [pc, #520]	@ (80130ac <__ieee754_rem_pio2+0x32c>)
 8012ea2:	4598      	cmp	r8, r3
 8012ea4:	f200 80d1 	bhi.w	801304a <__ieee754_rem_pio2+0x2ca>
 8012ea8:	f000 fafe 	bl	80134a8 <fabs>
 8012eac:	ec57 6b10 	vmov	r6, r7, d0
 8012eb0:	a375      	add	r3, pc, #468	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x308>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	4639      	mov	r1, r7
 8012eba:	f7ed fbb1 	bl	8000620 <__aeabi_dmul>
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80130b0 <__ieee754_rem_pio2+0x330>)
 8012ec2:	f7ed f9f7 	bl	80002b4 <__adddf3>
 8012ec6:	f7ed fe5b 	bl	8000b80 <__aeabi_d2iz>
 8012eca:	4605      	mov	r5, r0
 8012ecc:	f7ed fb3e 	bl	800054c <__aeabi_i2d>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ed8:	a363      	add	r3, pc, #396	@ (adr r3, 8013068 <__ieee754_rem_pio2+0x2e8>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f7ed fb9f 	bl	8000620 <__aeabi_dmul>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	4639      	mov	r1, r7
 8012eea:	f7ed f9e1 	bl	80002b0 <__aeabi_dsub>
 8012eee:	4682      	mov	sl, r0
 8012ef0:	468b      	mov	fp, r1
 8012ef2:	a35f      	add	r3, pc, #380	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2f0>)
 8012ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012efc:	f7ed fb90 	bl	8000620 <__aeabi_dmul>
 8012f00:	2d1f      	cmp	r5, #31
 8012f02:	4606      	mov	r6, r0
 8012f04:	460f      	mov	r7, r1
 8012f06:	dc0c      	bgt.n	8012f22 <__ieee754_rem_pio2+0x1a2>
 8012f08:	1e6a      	subs	r2, r5, #1
 8012f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80130b4 <__ieee754_rem_pio2+0x334>)
 8012f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f10:	4543      	cmp	r3, r8
 8012f12:	d006      	beq.n	8012f22 <__ieee754_rem_pio2+0x1a2>
 8012f14:	4632      	mov	r2, r6
 8012f16:	463b      	mov	r3, r7
 8012f18:	4650      	mov	r0, sl
 8012f1a:	4659      	mov	r1, fp
 8012f1c:	f7ed f9c8 	bl	80002b0 <__aeabi_dsub>
 8012f20:	e00e      	b.n	8012f40 <__ieee754_rem_pio2+0x1c0>
 8012f22:	463b      	mov	r3, r7
 8012f24:	4632      	mov	r2, r6
 8012f26:	4650      	mov	r0, sl
 8012f28:	4659      	mov	r1, fp
 8012f2a:	f7ed f9c1 	bl	80002b0 <__aeabi_dsub>
 8012f2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f32:	9305      	str	r3, [sp, #20]
 8012f34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012f3c:	2b10      	cmp	r3, #16
 8012f3e:	dc02      	bgt.n	8012f46 <__ieee754_rem_pio2+0x1c6>
 8012f40:	e9c4 0100 	strd	r0, r1, [r4]
 8012f44:	e039      	b.n	8012fba <__ieee754_rem_pio2+0x23a>
 8012f46:	a34c      	add	r3, pc, #304	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f8>)
 8012f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f50:	f7ed fb66 	bl	8000620 <__aeabi_dmul>
 8012f54:	4606      	mov	r6, r0
 8012f56:	460f      	mov	r7, r1
 8012f58:	4602      	mov	r2, r0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4650      	mov	r0, sl
 8012f5e:	4659      	mov	r1, fp
 8012f60:	f7ed f9a6 	bl	80002b0 <__aeabi_dsub>
 8012f64:	4602      	mov	r2, r0
 8012f66:	460b      	mov	r3, r1
 8012f68:	4680      	mov	r8, r0
 8012f6a:	4689      	mov	r9, r1
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	4659      	mov	r1, fp
 8012f70:	f7ed f99e 	bl	80002b0 <__aeabi_dsub>
 8012f74:	4632      	mov	r2, r6
 8012f76:	463b      	mov	r3, r7
 8012f78:	f7ed f99a 	bl	80002b0 <__aeabi_dsub>
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	a33f      	add	r3, pc, #252	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x300>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f8a:	f7ed fb49 	bl	8000620 <__aeabi_dmul>
 8012f8e:	4632      	mov	r2, r6
 8012f90:	463b      	mov	r3, r7
 8012f92:	f7ed f98d 	bl	80002b0 <__aeabi_dsub>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	460f      	mov	r7, r1
 8012f9e:	4640      	mov	r0, r8
 8012fa0:	4649      	mov	r1, r9
 8012fa2:	f7ed f985 	bl	80002b0 <__aeabi_dsub>
 8012fa6:	9a05      	ldr	r2, [sp, #20]
 8012fa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	2b31      	cmp	r3, #49	@ 0x31
 8012fb0:	dc20      	bgt.n	8012ff4 <__ieee754_rem_pio2+0x274>
 8012fb2:	46c2      	mov	sl, r8
 8012fb4:	46cb      	mov	fp, r9
 8012fb6:	e9c4 0100 	strd	r0, r1, [r4]
 8012fba:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012fbe:	4650      	mov	r0, sl
 8012fc0:	4659      	mov	r1, fp
 8012fc2:	4642      	mov	r2, r8
 8012fc4:	464b      	mov	r3, r9
 8012fc6:	f7ed f973 	bl	80002b0 <__aeabi_dsub>
 8012fca:	463b      	mov	r3, r7
 8012fcc:	4632      	mov	r2, r6
 8012fce:	f7ed f96f 	bl	80002b0 <__aeabi_dsub>
 8012fd2:	9b04      	ldr	r3, [sp, #16]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012fda:	f6bf af0e 	bge.w	8012dfa <__ieee754_rem_pio2+0x7a>
 8012fde:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012fe2:	f8c4 8000 	str.w	r8, [r4]
 8012fe6:	60a0      	str	r0, [r4, #8]
 8012fe8:	6063      	str	r3, [r4, #4]
 8012fea:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012fee:	60e3      	str	r3, [r4, #12]
 8012ff0:	426d      	negs	r5, r5
 8012ff2:	e702      	b.n	8012dfa <__ieee754_rem_pio2+0x7a>
 8012ff4:	a326      	add	r3, pc, #152	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x310>)
 8012ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ffe:	f7ed fb0f 	bl	8000620 <__aeabi_dmul>
 8013002:	4606      	mov	r6, r0
 8013004:	460f      	mov	r7, r1
 8013006:	4602      	mov	r2, r0
 8013008:	460b      	mov	r3, r1
 801300a:	4640      	mov	r0, r8
 801300c:	4649      	mov	r1, r9
 801300e:	f7ed f94f 	bl	80002b0 <__aeabi_dsub>
 8013012:	4602      	mov	r2, r0
 8013014:	460b      	mov	r3, r1
 8013016:	4682      	mov	sl, r0
 8013018:	468b      	mov	fp, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed f947 	bl	80002b0 <__aeabi_dsub>
 8013022:	4632      	mov	r2, r6
 8013024:	463b      	mov	r3, r7
 8013026:	f7ed f943 	bl	80002b0 <__aeabi_dsub>
 801302a:	4606      	mov	r6, r0
 801302c:	460f      	mov	r7, r1
 801302e:	a31a      	add	r3, pc, #104	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x318>)
 8013030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013038:	f7ed faf2 	bl	8000620 <__aeabi_dmul>
 801303c:	4632      	mov	r2, r6
 801303e:	463b      	mov	r3, r7
 8013040:	f7ed f936 	bl	80002b0 <__aeabi_dsub>
 8013044:	4606      	mov	r6, r0
 8013046:	460f      	mov	r7, r1
 8013048:	e764      	b.n	8012f14 <__ieee754_rem_pio2+0x194>
 801304a:	4b1b      	ldr	r3, [pc, #108]	@ (80130b8 <__ieee754_rem_pio2+0x338>)
 801304c:	4598      	cmp	r8, r3
 801304e:	d935      	bls.n	80130bc <__ieee754_rem_pio2+0x33c>
 8013050:	4632      	mov	r2, r6
 8013052:	463b      	mov	r3, r7
 8013054:	4630      	mov	r0, r6
 8013056:	4639      	mov	r1, r7
 8013058:	f7ed f92a 	bl	80002b0 <__aeabi_dsub>
 801305c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013060:	e9c4 0100 	strd	r0, r1, [r4]
 8013064:	e69e      	b.n	8012da4 <__ieee754_rem_pio2+0x24>
 8013066:	bf00      	nop
 8013068:	54400000 	.word	0x54400000
 801306c:	3ff921fb 	.word	0x3ff921fb
 8013070:	1a626331 	.word	0x1a626331
 8013074:	3dd0b461 	.word	0x3dd0b461
 8013078:	1a600000 	.word	0x1a600000
 801307c:	3dd0b461 	.word	0x3dd0b461
 8013080:	2e037073 	.word	0x2e037073
 8013084:	3ba3198a 	.word	0x3ba3198a
 8013088:	6dc9c883 	.word	0x6dc9c883
 801308c:	3fe45f30 	.word	0x3fe45f30
 8013090:	2e000000 	.word	0x2e000000
 8013094:	3ba3198a 	.word	0x3ba3198a
 8013098:	252049c1 	.word	0x252049c1
 801309c:	397b839a 	.word	0x397b839a
 80130a0:	3fe921fb 	.word	0x3fe921fb
 80130a4:	4002d97b 	.word	0x4002d97b
 80130a8:	3ff921fb 	.word	0x3ff921fb
 80130ac:	413921fb 	.word	0x413921fb
 80130b0:	3fe00000 	.word	0x3fe00000
 80130b4:	08014990 	.word	0x08014990
 80130b8:	7fefffff 	.word	0x7fefffff
 80130bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80130c0:	4630      	mov	r0, r6
 80130c2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80130c6:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80130ca:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80130ce:	f04f 0803 	mov.w	r8, #3
 80130d2:	460f      	mov	r7, r1
 80130d4:	f7ed fd54 	bl	8000b80 <__aeabi_d2iz>
 80130d8:	f7ed fa38 	bl	800054c <__aeabi_i2d>
 80130dc:	4602      	mov	r2, r0
 80130de:	460b      	mov	r3, r1
 80130e0:	4630      	mov	r0, r6
 80130e2:	4639      	mov	r1, r7
 80130e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130e8:	f7ed f8e2 	bl	80002b0 <__aeabi_dsub>
 80130ec:	2200      	movs	r2, #0
 80130ee:	4b20      	ldr	r3, [pc, #128]	@ (8013170 <__ieee754_rem_pio2+0x3f0>)
 80130f0:	f7ed fa96 	bl	8000620 <__aeabi_dmul>
 80130f4:	460f      	mov	r7, r1
 80130f6:	4606      	mov	r6, r0
 80130f8:	f7ed fd42 	bl	8000b80 <__aeabi_d2iz>
 80130fc:	f7ed fa26 	bl	800054c <__aeabi_i2d>
 8013100:	4602      	mov	r2, r0
 8013102:	460b      	mov	r3, r1
 8013104:	4630      	mov	r0, r6
 8013106:	4639      	mov	r1, r7
 8013108:	2600      	movs	r6, #0
 801310a:	2700      	movs	r7, #0
 801310c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013110:	f7ed f8ce 	bl	80002b0 <__aeabi_dsub>
 8013114:	2200      	movs	r2, #0
 8013116:	4b16      	ldr	r3, [pc, #88]	@ (8013170 <__ieee754_rem_pio2+0x3f0>)
 8013118:	f7ed fa82 	bl	8000620 <__aeabi_dmul>
 801311c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013120:	4632      	mov	r2, r6
 8013122:	463b      	mov	r3, r7
 8013124:	46c2      	mov	sl, r8
 8013126:	f108 38ff 	add.w	r8, r8, #4294967295
 801312a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801312e:	f7ed fcdf 	bl	8000af0 <__aeabi_dcmpeq>
 8013132:	2800      	cmp	r0, #0
 8013134:	d1f4      	bne.n	8013120 <__ieee754_rem_pio2+0x3a0>
 8013136:	4b0f      	ldr	r3, [pc, #60]	@ (8013174 <__ieee754_rem_pio2+0x3f4>)
 8013138:	462a      	mov	r2, r5
 801313a:	4621      	mov	r1, r4
 801313c:	a806      	add	r0, sp, #24
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	2302      	movs	r3, #2
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	4653      	mov	r3, sl
 8013146:	f000 fa73 	bl	8013630 <__kernel_rem_pio2>
 801314a:	9b04      	ldr	r3, [sp, #16]
 801314c:	4605      	mov	r5, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	f6bf ae53 	bge.w	8012dfa <__ieee754_rem_pio2+0x7a>
 8013154:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013158:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801315c:	e9c4 2300 	strd	r2, r3, [r4]
 8013160:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013168:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801316c:	e740      	b.n	8012ff0 <__ieee754_rem_pio2+0x270>
 801316e:	bf00      	nop
 8013170:	41700000 	.word	0x41700000
 8013174:	08014a10 	.word	0x08014a10

08013178 <atan>:
 8013178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	ec55 4b10 	vmov	r4, r5, d0
 8013180:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013184:	4bbe      	ldr	r3, [pc, #760]	@ (8013480 <atan+0x308>)
 8013186:	46ab      	mov	fp, r5
 8013188:	429e      	cmp	r6, r3
 801318a:	d918      	bls.n	80131be <atan+0x46>
 801318c:	4bbd      	ldr	r3, [pc, #756]	@ (8013484 <atan+0x30c>)
 801318e:	429e      	cmp	r6, r3
 8013190:	d801      	bhi.n	8013196 <atan+0x1e>
 8013192:	d109      	bne.n	80131a8 <atan+0x30>
 8013194:	b144      	cbz	r4, 80131a8 <atan+0x30>
 8013196:	4622      	mov	r2, r4
 8013198:	462b      	mov	r3, r5
 801319a:	4620      	mov	r0, r4
 801319c:	4629      	mov	r1, r5
 801319e:	f7ed f889 	bl	80002b4 <__adddf3>
 80131a2:	4604      	mov	r4, r0
 80131a4:	460d      	mov	r5, r1
 80131a6:	e006      	b.n	80131b6 <atan+0x3e>
 80131a8:	f1bb 0f00 	cmp.w	fp, #0
 80131ac:	f340 812b 	ble.w	8013406 <atan+0x28e>
 80131b0:	a597      	add	r5, pc, #604	@ (adr r5, 8013410 <atan+0x298>)
 80131b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131b6:	ec45 4b10 	vmov	d0, r4, r5
 80131ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131be:	4bb2      	ldr	r3, [pc, #712]	@ (8013488 <atan+0x310>)
 80131c0:	429e      	cmp	r6, r3
 80131c2:	d813      	bhi.n	80131ec <atan+0x74>
 80131c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80131c8:	429e      	cmp	r6, r3
 80131ca:	d80c      	bhi.n	80131e6 <atan+0x6e>
 80131cc:	4620      	mov	r0, r4
 80131ce:	4629      	mov	r1, r5
 80131d0:	a391      	add	r3, pc, #580	@ (adr r3, 8013418 <atan+0x2a0>)
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	f7ed f86d 	bl	80002b4 <__adddf3>
 80131da:	2200      	movs	r2, #0
 80131dc:	4bab      	ldr	r3, [pc, #684]	@ (801348c <atan+0x314>)
 80131de:	f7ed fcaf 	bl	8000b40 <__aeabi_dcmpgt>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d1e7      	bne.n	80131b6 <atan+0x3e>
 80131e6:	f04f 3aff 	mov.w	sl, #4294967295
 80131ea:	e029      	b.n	8013240 <atan+0xc8>
 80131ec:	f000 f95c 	bl	80134a8 <fabs>
 80131f0:	4ba7      	ldr	r3, [pc, #668]	@ (8013490 <atan+0x318>)
 80131f2:	429e      	cmp	r6, r3
 80131f4:	ec55 4b10 	vmov	r4, r5, d0
 80131f8:	f200 80bc 	bhi.w	8013374 <atan+0x1fc>
 80131fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013200:	429e      	cmp	r6, r3
 8013202:	f200 809e 	bhi.w	8013342 <atan+0x1ca>
 8013206:	4622      	mov	r2, r4
 8013208:	462b      	mov	r3, r5
 801320a:	4620      	mov	r0, r4
 801320c:	4629      	mov	r1, r5
 801320e:	f7ed f851 	bl	80002b4 <__adddf3>
 8013212:	2200      	movs	r2, #0
 8013214:	4b9d      	ldr	r3, [pc, #628]	@ (801348c <atan+0x314>)
 8013216:	f04f 0a00 	mov.w	sl, #0
 801321a:	f7ed f849 	bl	80002b0 <__aeabi_dsub>
 801321e:	4606      	mov	r6, r0
 8013220:	460f      	mov	r7, r1
 8013222:	2200      	movs	r2, #0
 8013224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013228:	4620      	mov	r0, r4
 801322a:	4629      	mov	r1, r5
 801322c:	f7ed f842 	bl	80002b4 <__adddf3>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	4630      	mov	r0, r6
 8013236:	4639      	mov	r1, r7
 8013238:	f7ed fb1c 	bl	8000874 <__aeabi_ddiv>
 801323c:	4604      	mov	r4, r0
 801323e:	460d      	mov	r5, r1
 8013240:	4622      	mov	r2, r4
 8013242:	462b      	mov	r3, r5
 8013244:	4620      	mov	r0, r4
 8013246:	4629      	mov	r1, r5
 8013248:	f7ed f9ea 	bl	8000620 <__aeabi_dmul>
 801324c:	4602      	mov	r2, r0
 801324e:	460b      	mov	r3, r1
 8013250:	4680      	mov	r8, r0
 8013252:	4689      	mov	r9, r1
 8013254:	f7ed f9e4 	bl	8000620 <__aeabi_dmul>
 8013258:	4606      	mov	r6, r0
 801325a:	460f      	mov	r7, r1
 801325c:	a370      	add	r3, pc, #448	@ (adr r3, 8013420 <atan+0x2a8>)
 801325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013262:	f7ed f9dd 	bl	8000620 <__aeabi_dmul>
 8013266:	a370      	add	r3, pc, #448	@ (adr r3, 8013428 <atan+0x2b0>)
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	f7ed f822 	bl	80002b4 <__adddf3>
 8013270:	4632      	mov	r2, r6
 8013272:	463b      	mov	r3, r7
 8013274:	f7ed f9d4 	bl	8000620 <__aeabi_dmul>
 8013278:	a36d      	add	r3, pc, #436	@ (adr r3, 8013430 <atan+0x2b8>)
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	f7ed f819 	bl	80002b4 <__adddf3>
 8013282:	4632      	mov	r2, r6
 8013284:	463b      	mov	r3, r7
 8013286:	f7ed f9cb 	bl	8000620 <__aeabi_dmul>
 801328a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013438 <atan+0x2c0>)
 801328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013290:	f7ed f810 	bl	80002b4 <__adddf3>
 8013294:	4632      	mov	r2, r6
 8013296:	463b      	mov	r3, r7
 8013298:	f7ed f9c2 	bl	8000620 <__aeabi_dmul>
 801329c:	a368      	add	r3, pc, #416	@ (adr r3, 8013440 <atan+0x2c8>)
 801329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a2:	f7ed f807 	bl	80002b4 <__adddf3>
 80132a6:	4632      	mov	r2, r6
 80132a8:	463b      	mov	r3, r7
 80132aa:	f7ed f9b9 	bl	8000620 <__aeabi_dmul>
 80132ae:	a366      	add	r3, pc, #408	@ (adr r3, 8013448 <atan+0x2d0>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	f7ec fffe 	bl	80002b4 <__adddf3>
 80132b8:	4642      	mov	r2, r8
 80132ba:	464b      	mov	r3, r9
 80132bc:	f7ed f9b0 	bl	8000620 <__aeabi_dmul>
 80132c0:	4680      	mov	r8, r0
 80132c2:	4689      	mov	r9, r1
 80132c4:	4630      	mov	r0, r6
 80132c6:	4639      	mov	r1, r7
 80132c8:	a361      	add	r3, pc, #388	@ (adr r3, 8013450 <atan+0x2d8>)
 80132ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ce:	f7ed f9a7 	bl	8000620 <__aeabi_dmul>
 80132d2:	a361      	add	r3, pc, #388	@ (adr r3, 8013458 <atan+0x2e0>)
 80132d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d8:	f7ec ffea 	bl	80002b0 <__aeabi_dsub>
 80132dc:	4632      	mov	r2, r6
 80132de:	463b      	mov	r3, r7
 80132e0:	f7ed f99e 	bl	8000620 <__aeabi_dmul>
 80132e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013460 <atan+0x2e8>)
 80132e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ea:	f7ec ffe1 	bl	80002b0 <__aeabi_dsub>
 80132ee:	4632      	mov	r2, r6
 80132f0:	463b      	mov	r3, r7
 80132f2:	f7ed f995 	bl	8000620 <__aeabi_dmul>
 80132f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013468 <atan+0x2f0>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	f7ec ffd8 	bl	80002b0 <__aeabi_dsub>
 8013300:	4632      	mov	r2, r6
 8013302:	463b      	mov	r3, r7
 8013304:	f7ed f98c 	bl	8000620 <__aeabi_dmul>
 8013308:	a359      	add	r3, pc, #356	@ (adr r3, 8013470 <atan+0x2f8>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ec ffcf 	bl	80002b0 <__aeabi_dsub>
 8013312:	4632      	mov	r2, r6
 8013314:	463b      	mov	r3, r7
 8013316:	f7ed f983 	bl	8000620 <__aeabi_dmul>
 801331a:	4602      	mov	r2, r0
 801331c:	460b      	mov	r3, r1
 801331e:	4640      	mov	r0, r8
 8013320:	4649      	mov	r1, r9
 8013322:	f7ec ffc7 	bl	80002b4 <__adddf3>
 8013326:	4622      	mov	r2, r4
 8013328:	462b      	mov	r3, r5
 801332a:	f7ed f979 	bl	8000620 <__aeabi_dmul>
 801332e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013332:	4602      	mov	r2, r0
 8013334:	460b      	mov	r3, r1
 8013336:	d148      	bne.n	80133ca <atan+0x252>
 8013338:	4620      	mov	r0, r4
 801333a:	4629      	mov	r1, r5
 801333c:	f7ec ffb8 	bl	80002b0 <__aeabi_dsub>
 8013340:	e72f      	b.n	80131a2 <atan+0x2a>
 8013342:	2200      	movs	r2, #0
 8013344:	4b51      	ldr	r3, [pc, #324]	@ (801348c <atan+0x314>)
 8013346:	4620      	mov	r0, r4
 8013348:	4629      	mov	r1, r5
 801334a:	f7ec ffb1 	bl	80002b0 <__aeabi_dsub>
 801334e:	4606      	mov	r6, r0
 8013350:	460f      	mov	r7, r1
 8013352:	2200      	movs	r2, #0
 8013354:	4b4d      	ldr	r3, [pc, #308]	@ (801348c <atan+0x314>)
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f04f 0a01 	mov.w	sl, #1
 801335e:	f7ec ffa9 	bl	80002b4 <__adddf3>
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	4630      	mov	r0, r6
 8013368:	4639      	mov	r1, r7
 801336a:	f7ed fa83 	bl	8000874 <__aeabi_ddiv>
 801336e:	4604      	mov	r4, r0
 8013370:	460d      	mov	r5, r1
 8013372:	e765      	b.n	8013240 <atan+0xc8>
 8013374:	4b47      	ldr	r3, [pc, #284]	@ (8013494 <atan+0x31c>)
 8013376:	429e      	cmp	r6, r3
 8013378:	d21c      	bcs.n	80133b4 <atan+0x23c>
 801337a:	2200      	movs	r2, #0
 801337c:	4b46      	ldr	r3, [pc, #280]	@ (8013498 <atan+0x320>)
 801337e:	4620      	mov	r0, r4
 8013380:	4629      	mov	r1, r5
 8013382:	f7ec ff95 	bl	80002b0 <__aeabi_dsub>
 8013386:	2200      	movs	r2, #0
 8013388:	4606      	mov	r6, r0
 801338a:	460f      	mov	r7, r1
 801338c:	4b42      	ldr	r3, [pc, #264]	@ (8013498 <atan+0x320>)
 801338e:	4620      	mov	r0, r4
 8013390:	4629      	mov	r1, r5
 8013392:	f04f 0a02 	mov.w	sl, #2
 8013396:	f7ed f943 	bl	8000620 <__aeabi_dmul>
 801339a:	2200      	movs	r2, #0
 801339c:	4b3b      	ldr	r3, [pc, #236]	@ (801348c <atan+0x314>)
 801339e:	f7ec ff89 	bl	80002b4 <__adddf3>
 80133a2:	4602      	mov	r2, r0
 80133a4:	460b      	mov	r3, r1
 80133a6:	4630      	mov	r0, r6
 80133a8:	4639      	mov	r1, r7
 80133aa:	f7ed fa63 	bl	8000874 <__aeabi_ddiv>
 80133ae:	4604      	mov	r4, r0
 80133b0:	460d      	mov	r5, r1
 80133b2:	e745      	b.n	8013240 <atan+0xc8>
 80133b4:	4622      	mov	r2, r4
 80133b6:	462b      	mov	r3, r5
 80133b8:	2000      	movs	r0, #0
 80133ba:	4938      	ldr	r1, [pc, #224]	@ (801349c <atan+0x324>)
 80133bc:	f7ed fa5a 	bl	8000874 <__aeabi_ddiv>
 80133c0:	f04f 0a03 	mov.w	sl, #3
 80133c4:	4604      	mov	r4, r0
 80133c6:	460d      	mov	r5, r1
 80133c8:	e73a      	b.n	8013240 <atan+0xc8>
 80133ca:	4b35      	ldr	r3, [pc, #212]	@ (80134a0 <atan+0x328>)
 80133cc:	4e35      	ldr	r6, [pc, #212]	@ (80134a4 <atan+0x32c>)
 80133ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80133d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	f7ec ff69 	bl	80002b0 <__aeabi_dsub>
 80133de:	4622      	mov	r2, r4
 80133e0:	462b      	mov	r3, r5
 80133e2:	f7ec ff65 	bl	80002b0 <__aeabi_dsub>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133ee:	f7ec ff5f 	bl	80002b0 <__aeabi_dsub>
 80133f2:	f1bb 0f00 	cmp.w	fp, #0
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	f6bf aedc 	bge.w	80131b6 <atan+0x3e>
 80133fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013402:	461d      	mov	r5, r3
 8013404:	e6d7      	b.n	80131b6 <atan+0x3e>
 8013406:	a51c      	add	r5, pc, #112	@ (adr r5, 8013478 <atan+0x300>)
 8013408:	e9d5 4500 	ldrd	r4, r5, [r5]
 801340c:	e6d3      	b.n	80131b6 <atan+0x3e>
 801340e:	bf00      	nop
 8013410:	54442d18 	.word	0x54442d18
 8013414:	3ff921fb 	.word	0x3ff921fb
 8013418:	8800759c 	.word	0x8800759c
 801341c:	7e37e43c 	.word	0x7e37e43c
 8013420:	e322da11 	.word	0xe322da11
 8013424:	3f90ad3a 	.word	0x3f90ad3a
 8013428:	24760deb 	.word	0x24760deb
 801342c:	3fa97b4b 	.word	0x3fa97b4b
 8013430:	a0d03d51 	.word	0xa0d03d51
 8013434:	3fb10d66 	.word	0x3fb10d66
 8013438:	c54c206e 	.word	0xc54c206e
 801343c:	3fb745cd 	.word	0x3fb745cd
 8013440:	920083ff 	.word	0x920083ff
 8013444:	3fc24924 	.word	0x3fc24924
 8013448:	5555550d 	.word	0x5555550d
 801344c:	3fd55555 	.word	0x3fd55555
 8013450:	2c6a6c2f 	.word	0x2c6a6c2f
 8013454:	bfa2b444 	.word	0xbfa2b444
 8013458:	52defd9a 	.word	0x52defd9a
 801345c:	3fadde2d 	.word	0x3fadde2d
 8013460:	af749a6d 	.word	0xaf749a6d
 8013464:	3fb3b0f2 	.word	0x3fb3b0f2
 8013468:	fe231671 	.word	0xfe231671
 801346c:	3fbc71c6 	.word	0x3fbc71c6
 8013470:	9998ebc4 	.word	0x9998ebc4
 8013474:	3fc99999 	.word	0x3fc99999
 8013478:	54442d18 	.word	0x54442d18
 801347c:	bff921fb 	.word	0xbff921fb
 8013480:	440fffff 	.word	0x440fffff
 8013484:	7ff00000 	.word	0x7ff00000
 8013488:	3fdbffff 	.word	0x3fdbffff
 801348c:	3ff00000 	.word	0x3ff00000
 8013490:	3ff2ffff 	.word	0x3ff2ffff
 8013494:	40038000 	.word	0x40038000
 8013498:	3ff80000 	.word	0x3ff80000
 801349c:	bff00000 	.word	0xbff00000
 80134a0:	08014b18 	.word	0x08014b18
 80134a4:	08014b38 	.word	0x08014b38

080134a8 <fabs>:
 80134a8:	ec51 0b10 	vmov	r0, r1, d0
 80134ac:	4602      	mov	r2, r0
 80134ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134b2:	ec43 2b10 	vmov	d0, r2, r3
 80134b6:	4770      	bx	lr

080134b8 <scalbn>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	ec55 4b10 	vmov	r4, r5, d0
 80134be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80134c2:	4606      	mov	r6, r0
 80134c4:	462b      	mov	r3, r5
 80134c6:	b991      	cbnz	r1, 80134ee <scalbn+0x36>
 80134c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80134cc:	4323      	orrs	r3, r4
 80134ce:	d03d      	beq.n	801354c <scalbn+0x94>
 80134d0:	4b35      	ldr	r3, [pc, #212]	@ (80135a8 <scalbn+0xf0>)
 80134d2:	4620      	mov	r0, r4
 80134d4:	4629      	mov	r1, r5
 80134d6:	2200      	movs	r2, #0
 80134d8:	f7ed f8a2 	bl	8000620 <__aeabi_dmul>
 80134dc:	4b33      	ldr	r3, [pc, #204]	@ (80135ac <scalbn+0xf4>)
 80134de:	4604      	mov	r4, r0
 80134e0:	460d      	mov	r5, r1
 80134e2:	429e      	cmp	r6, r3
 80134e4:	da0f      	bge.n	8013506 <scalbn+0x4e>
 80134e6:	a328      	add	r3, pc, #160	@ (adr r3, 8013588 <scalbn+0xd0>)
 80134e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ec:	e01e      	b.n	801352c <scalbn+0x74>
 80134ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80134f2:	4291      	cmp	r1, r2
 80134f4:	d10b      	bne.n	801350e <scalbn+0x56>
 80134f6:	4622      	mov	r2, r4
 80134f8:	4620      	mov	r0, r4
 80134fa:	4629      	mov	r1, r5
 80134fc:	f7ec feda 	bl	80002b4 <__adddf3>
 8013500:	4604      	mov	r4, r0
 8013502:	460d      	mov	r5, r1
 8013504:	e022      	b.n	801354c <scalbn+0x94>
 8013506:	460b      	mov	r3, r1
 8013508:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801350c:	3936      	subs	r1, #54	@ 0x36
 801350e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013512:	4296      	cmp	r6, r2
 8013514:	dd0d      	ble.n	8013532 <scalbn+0x7a>
 8013516:	2d00      	cmp	r5, #0
 8013518:	a11d      	add	r1, pc, #116	@ (adr r1, 8013590 <scalbn+0xd8>)
 801351a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801351e:	da02      	bge.n	8013526 <scalbn+0x6e>
 8013520:	a11d      	add	r1, pc, #116	@ (adr r1, 8013598 <scalbn+0xe0>)
 8013522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013526:	a31a      	add	r3, pc, #104	@ (adr r3, 8013590 <scalbn+0xd8>)
 8013528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352c:	f7ed f878 	bl	8000620 <__aeabi_dmul>
 8013530:	e7e6      	b.n	8013500 <scalbn+0x48>
 8013532:	1872      	adds	r2, r6, r1
 8013534:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013538:	428a      	cmp	r2, r1
 801353a:	dcec      	bgt.n	8013516 <scalbn+0x5e>
 801353c:	2a00      	cmp	r2, #0
 801353e:	dd08      	ble.n	8013552 <scalbn+0x9a>
 8013540:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013544:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013548:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801354c:	ec45 4b10 	vmov	d0, r4, r5
 8013550:	bd70      	pop	{r4, r5, r6, pc}
 8013552:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013556:	da08      	bge.n	801356a <scalbn+0xb2>
 8013558:	2d00      	cmp	r5, #0
 801355a:	a10b      	add	r1, pc, #44	@ (adr r1, 8013588 <scalbn+0xd0>)
 801355c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013560:	dac1      	bge.n	80134e6 <scalbn+0x2e>
 8013562:	a10f      	add	r1, pc, #60	@ (adr r1, 80135a0 <scalbn+0xe8>)
 8013564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013568:	e7bd      	b.n	80134e6 <scalbn+0x2e>
 801356a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801356e:	3236      	adds	r2, #54	@ 0x36
 8013570:	4620      	mov	r0, r4
 8013572:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013576:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801357a:	2200      	movs	r2, #0
 801357c:	4b0c      	ldr	r3, [pc, #48]	@ (80135b0 <scalbn+0xf8>)
 801357e:	4629      	mov	r1, r5
 8013580:	e7d4      	b.n	801352c <scalbn+0x74>
 8013582:	bf00      	nop
 8013584:	f3af 8000 	nop.w
 8013588:	c2f8f359 	.word	0xc2f8f359
 801358c:	01a56e1f 	.word	0x01a56e1f
 8013590:	8800759c 	.word	0x8800759c
 8013594:	7e37e43c 	.word	0x7e37e43c
 8013598:	8800759c 	.word	0x8800759c
 801359c:	fe37e43c 	.word	0xfe37e43c
 80135a0:	c2f8f359 	.word	0xc2f8f359
 80135a4:	81a56e1f 	.word	0x81a56e1f
 80135a8:	43500000 	.word	0x43500000
 80135ac:	ffff3cb0 	.word	0xffff3cb0
 80135b0:	3c900000 	.word	0x3c900000

080135b4 <with_errno>:
 80135b4:	b510      	push	{r4, lr}
 80135b6:	ed2d 8b02 	vpush	{d8}
 80135ba:	eeb0 8a40 	vmov.f32	s16, s0
 80135be:	eef0 8a60 	vmov.f32	s17, s1
 80135c2:	4604      	mov	r4, r0
 80135c4:	f7fa fefc 	bl	800e3c0 <__errno>
 80135c8:	6004      	str	r4, [r0, #0]
 80135ca:	eeb0 0a48 	vmov.f32	s0, s16
 80135ce:	eef0 0a68 	vmov.f32	s1, s17
 80135d2:	ecbd 8b02 	vpop	{d8}
 80135d6:	bd10      	pop	{r4, pc}

080135d8 <xflow>:
 80135d8:	4603      	mov	r3, r0
 80135da:	b507      	push	{r0, r1, r2, lr}
 80135dc:	ec51 0b10 	vmov	r0, r1, d0
 80135e0:	b183      	cbz	r3, 8013604 <xflow+0x2c>
 80135e2:	4602      	mov	r2, r0
 80135e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135e8:	e9cd 2300 	strd	r2, r3, [sp]
 80135ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135f0:	f7ed f816 	bl	8000620 <__aeabi_dmul>
 80135f4:	ec41 0b10 	vmov	d0, r0, r1
 80135f8:	2022      	movs	r0, #34	@ 0x22
 80135fa:	b003      	add	sp, #12
 80135fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013600:	f7ff bfd8 	b.w	80135b4 <with_errno>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	e7ee      	b.n	80135e8 <xflow+0x10>
 801360a:	0000      	movs	r0, r0
 801360c:	0000      	movs	r0, r0
	...

08013610 <__math_uflow>:
 8013610:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013618 <__math_uflow+0x8>
 8013614:	f7ff bfe0 	b.w	80135d8 <xflow>
 8013618:	00000000 	.word	0x00000000
 801361c:	10000000 	.word	0x10000000

08013620 <__math_oflow>:
 8013620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013628 <__math_oflow+0x8>
 8013624:	f7ff bfd8 	b.w	80135d8 <xflow>
 8013628:	00000000 	.word	0x00000000
 801362c:	70000000 	.word	0x70000000

08013630 <__kernel_rem_pio2>:
 8013630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013634:	ed2d 8b02 	vpush	{d8}
 8013638:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801363c:	f112 0f14 	cmn.w	r2, #20
 8013640:	f04f 0500 	mov.w	r5, #0
 8013644:	9306      	str	r3, [sp, #24]
 8013646:	bfa8      	it	ge
 8013648:	1ed4      	subge	r4, r2, #3
 801364a:	4bbd      	ldr	r3, [pc, #756]	@ (8013940 <__kernel_rem_pio2+0x310>)
 801364c:	bfb8      	it	lt
 801364e:	2400      	movlt	r4, #0
 8013650:	9104      	str	r1, [sp, #16]
 8013652:	ae20      	add	r6, sp, #128	@ 0x80
 8013654:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013656:	9008      	str	r0, [sp, #32]
 8013658:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801365c:	9300      	str	r3, [sp, #0]
 801365e:	9b06      	ldr	r3, [sp, #24]
 8013660:	f103 33ff 	add.w	r3, r3, #4294967295
 8013664:	9305      	str	r3, [sp, #20]
 8013666:	bfa4      	itt	ge
 8013668:	2318      	movge	r3, #24
 801366a:	fb94 f4f3 	sdivge	r4, r4, r3
 801366e:	f06f 0317 	mvn.w	r3, #23
 8013672:	fb04 3303 	mla	r3, r4, r3, r3
 8013676:	eb03 0b02 	add.w	fp, r3, r2
 801367a:	9b00      	ldr	r3, [sp, #0]
 801367c:	9a05      	ldr	r2, [sp, #20]
 801367e:	eb03 0802 	add.w	r8, r3, r2
 8013682:	1aa7      	subs	r7, r4, r2
 8013684:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013686:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8013930 <__kernel_rem_pio2+0x300>
 801368a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801368e:	4545      	cmp	r5, r8
 8013690:	dd13      	ble.n	80136ba <__kernel_rem_pio2+0x8a>
 8013692:	aa20      	add	r2, sp, #128	@ 0x80
 8013694:	9b06      	ldr	r3, [sp, #24]
 8013696:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801369a:	f04f 0800 	mov.w	r8, #0
 801369e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80136a2:	9b00      	ldr	r3, [sp, #0]
 80136a4:	4598      	cmp	r8, r3
 80136a6:	dc30      	bgt.n	801370a <__kernel_rem_pio2+0xda>
 80136a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136ac:	462f      	mov	r7, r5
 80136ae:	2600      	movs	r6, #0
 80136b0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013930 <__kernel_rem_pio2+0x300>
 80136b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136b8:	e01b      	b.n	80136f2 <__kernel_rem_pio2+0xc2>
 80136ba:	42ef      	cmn	r7, r5
 80136bc:	d407      	bmi.n	80136ce <__kernel_rem_pio2+0x9e>
 80136be:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80136c2:	f7ec ff43 	bl	800054c <__aeabi_i2d>
 80136c6:	3501      	adds	r5, #1
 80136c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80136cc:	e7df      	b.n	801368e <__kernel_rem_pio2+0x5e>
 80136ce:	ec51 0b18 	vmov	r0, r1, d8
 80136d2:	e7f8      	b.n	80136c6 <__kernel_rem_pio2+0x96>
 80136d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136d8:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80136dc:	3601      	adds	r6, #1
 80136de:	f7ec ff9f 	bl	8000620 <__aeabi_dmul>
 80136e2:	4602      	mov	r2, r0
 80136e4:	460b      	mov	r3, r1
 80136e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136ea:	f7ec fde3 	bl	80002b4 <__adddf3>
 80136ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136f2:	9b05      	ldr	r3, [sp, #20]
 80136f4:	3f08      	subs	r7, #8
 80136f6:	429e      	cmp	r6, r3
 80136f8:	ddec      	ble.n	80136d4 <__kernel_rem_pio2+0xa4>
 80136fa:	f108 0801 	add.w	r8, r8, #1
 80136fe:	3508      	adds	r5, #8
 8013700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013704:	ecaa 7b02 	vstmia	sl!, {d7}
 8013708:	e7cb      	b.n	80136a2 <__kernel_rem_pio2+0x72>
 801370a:	9b00      	ldr	r3, [sp, #0]
 801370c:	aa0c      	add	r2, sp, #48	@ 0x30
 801370e:	f8dd 8000 	ldr.w	r8, [sp]
 8013712:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013716:	930a      	str	r3, [sp, #40]	@ 0x28
 8013718:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801371a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801371e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013720:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013724:	ac0c      	add	r4, sp, #48	@ 0x30
 8013726:	46c2      	mov	sl, r8
 8013728:	930b      	str	r3, [sp, #44]	@ 0x2c
 801372a:	ab98      	add	r3, sp, #608	@ 0x260
 801372c:	46a1      	mov	r9, r4
 801372e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013732:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013736:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013738:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801373c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013740:	f1ba 0f00 	cmp.w	sl, #0
 8013744:	f1a5 0508 	sub.w	r5, r5, #8
 8013748:	dc77      	bgt.n	801383a <__kernel_rem_pio2+0x20a>
 801374a:	4658      	mov	r0, fp
 801374c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013750:	f7ff feb2 	bl	80134b8 <scalbn>
 8013754:	2200      	movs	r2, #0
 8013756:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801375a:	ec57 6b10 	vmov	r6, r7, d0
 801375e:	4630      	mov	r0, r6
 8013760:	4639      	mov	r1, r7
 8013762:	f7ec ff5d 	bl	8000620 <__aeabi_dmul>
 8013766:	ec41 0b10 	vmov	d0, r0, r1
 801376a:	f000 fab9 	bl	8013ce0 <floor>
 801376e:	2200      	movs	r2, #0
 8013770:	4b74      	ldr	r3, [pc, #464]	@ (8013944 <__kernel_rem_pio2+0x314>)
 8013772:	ec51 0b10 	vmov	r0, r1, d0
 8013776:	f7ec ff53 	bl	8000620 <__aeabi_dmul>
 801377a:	4602      	mov	r2, r0
 801377c:	460b      	mov	r3, r1
 801377e:	4630      	mov	r0, r6
 8013780:	4639      	mov	r1, r7
 8013782:	f7ec fd95 	bl	80002b0 <__aeabi_dsub>
 8013786:	460f      	mov	r7, r1
 8013788:	4606      	mov	r6, r0
 801378a:	f7ed f9f9 	bl	8000b80 <__aeabi_d2iz>
 801378e:	9002      	str	r0, [sp, #8]
 8013790:	f7ec fedc 	bl	800054c <__aeabi_i2d>
 8013794:	4602      	mov	r2, r0
 8013796:	460b      	mov	r3, r1
 8013798:	4630      	mov	r0, r6
 801379a:	4639      	mov	r1, r7
 801379c:	f7ec fd88 	bl	80002b0 <__aeabi_dsub>
 80137a0:	f1bb 0f00 	cmp.w	fp, #0
 80137a4:	4606      	mov	r6, r0
 80137a6:	460f      	mov	r7, r1
 80137a8:	dd6c      	ble.n	8013884 <__kernel_rem_pio2+0x254>
 80137aa:	f108 31ff 	add.w	r1, r8, #4294967295
 80137ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80137b0:	f1cb 0018 	rsb	r0, fp, #24
 80137b4:	9d02      	ldr	r5, [sp, #8]
 80137b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137ba:	fa43 f200 	asr.w	r2, r3, r0
 80137be:	4415      	add	r5, r2
 80137c0:	4082      	lsls	r2, r0
 80137c2:	1a9b      	subs	r3, r3, r2
 80137c4:	aa0c      	add	r2, sp, #48	@ 0x30
 80137c6:	9502      	str	r5, [sp, #8]
 80137c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80137cc:	f1cb 0217 	rsb	r2, fp, #23
 80137d0:	fa43 f902 	asr.w	r9, r3, r2
 80137d4:	f1b9 0f00 	cmp.w	r9, #0
 80137d8:	dd64      	ble.n	80138a4 <__kernel_rem_pio2+0x274>
 80137da:	9b02      	ldr	r3, [sp, #8]
 80137dc:	2200      	movs	r2, #0
 80137de:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80137e2:	3301      	adds	r3, #1
 80137e4:	4615      	mov	r5, r2
 80137e6:	9302      	str	r3, [sp, #8]
 80137e8:	4590      	cmp	r8, r2
 80137ea:	f300 80b7 	bgt.w	801395c <__kernel_rem_pio2+0x32c>
 80137ee:	f1bb 0f00 	cmp.w	fp, #0
 80137f2:	dd07      	ble.n	8013804 <__kernel_rem_pio2+0x1d4>
 80137f4:	f1bb 0f01 	cmp.w	fp, #1
 80137f8:	f000 80be 	beq.w	8013978 <__kernel_rem_pio2+0x348>
 80137fc:	f1bb 0f02 	cmp.w	fp, #2
 8013800:	f000 80c5 	beq.w	801398e <__kernel_rem_pio2+0x35e>
 8013804:	f1b9 0f02 	cmp.w	r9, #2
 8013808:	d14c      	bne.n	80138a4 <__kernel_rem_pio2+0x274>
 801380a:	4632      	mov	r2, r6
 801380c:	463b      	mov	r3, r7
 801380e:	2000      	movs	r0, #0
 8013810:	494d      	ldr	r1, [pc, #308]	@ (8013948 <__kernel_rem_pio2+0x318>)
 8013812:	f7ec fd4d 	bl	80002b0 <__aeabi_dsub>
 8013816:	4606      	mov	r6, r0
 8013818:	460f      	mov	r7, r1
 801381a:	2d00      	cmp	r5, #0
 801381c:	d042      	beq.n	80138a4 <__kernel_rem_pio2+0x274>
 801381e:	4658      	mov	r0, fp
 8013820:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8013938 <__kernel_rem_pio2+0x308>
 8013824:	f7ff fe48 	bl	80134b8 <scalbn>
 8013828:	4630      	mov	r0, r6
 801382a:	4639      	mov	r1, r7
 801382c:	ec53 2b10 	vmov	r2, r3, d0
 8013830:	f7ec fd3e 	bl	80002b0 <__aeabi_dsub>
 8013834:	4606      	mov	r6, r0
 8013836:	460f      	mov	r7, r1
 8013838:	e034      	b.n	80138a4 <__kernel_rem_pio2+0x274>
 801383a:	2200      	movs	r2, #0
 801383c:	4b43      	ldr	r3, [pc, #268]	@ (801394c <__kernel_rem_pio2+0x31c>)
 801383e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013846:	f7ec feeb 	bl	8000620 <__aeabi_dmul>
 801384a:	f7ed f999 	bl	8000b80 <__aeabi_d2iz>
 801384e:	f7ec fe7d 	bl	800054c <__aeabi_i2d>
 8013852:	2200      	movs	r2, #0
 8013854:	4b3e      	ldr	r3, [pc, #248]	@ (8013950 <__kernel_rem_pio2+0x320>)
 8013856:	4606      	mov	r6, r0
 8013858:	460f      	mov	r7, r1
 801385a:	f7ec fee1 	bl	8000620 <__aeabi_dmul>
 801385e:	4602      	mov	r2, r0
 8013860:	460b      	mov	r3, r1
 8013862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013866:	f7ec fd23 	bl	80002b0 <__aeabi_dsub>
 801386a:	f7ed f989 	bl	8000b80 <__aeabi_d2iz>
 801386e:	4639      	mov	r1, r7
 8013870:	f849 0b04 	str.w	r0, [r9], #4
 8013874:	4630      	mov	r0, r6
 8013876:	e9d5 2300 	ldrd	r2, r3, [r5]
 801387a:	f7ec fd1b 	bl	80002b4 <__adddf3>
 801387e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013882:	e75d      	b.n	8013740 <__kernel_rem_pio2+0x110>
 8013884:	d107      	bne.n	8013896 <__kernel_rem_pio2+0x266>
 8013886:	f108 33ff 	add.w	r3, r8, #4294967295
 801388a:	aa0c      	add	r2, sp, #48	@ 0x30
 801388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013890:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013894:	e79e      	b.n	80137d4 <__kernel_rem_pio2+0x1a4>
 8013896:	2200      	movs	r2, #0
 8013898:	4b2e      	ldr	r3, [pc, #184]	@ (8013954 <__kernel_rem_pio2+0x324>)
 801389a:	f7ed f947 	bl	8000b2c <__aeabi_dcmpge>
 801389e:	2800      	cmp	r0, #0
 80138a0:	d143      	bne.n	801392a <__kernel_rem_pio2+0x2fa>
 80138a2:	4681      	mov	r9, r0
 80138a4:	2200      	movs	r2, #0
 80138a6:	2300      	movs	r3, #0
 80138a8:	4630      	mov	r0, r6
 80138aa:	4639      	mov	r1, r7
 80138ac:	f7ed f920 	bl	8000af0 <__aeabi_dcmpeq>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	f000 80be 	beq.w	8013a32 <__kernel_rem_pio2+0x402>
 80138b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80138ba:	2200      	movs	r2, #0
 80138bc:	9900      	ldr	r1, [sp, #0]
 80138be:	428b      	cmp	r3, r1
 80138c0:	da6d      	bge.n	801399e <__kernel_rem_pio2+0x36e>
 80138c2:	2a00      	cmp	r2, #0
 80138c4:	f000 8088 	beq.w	80139d8 <__kernel_rem_pio2+0x3a8>
 80138c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80138cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80138ce:	f1ab 0b18 	sub.w	fp, fp, #24
 80138d2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d0f6      	beq.n	80138c8 <__kernel_rem_pio2+0x298>
 80138da:	4658      	mov	r0, fp
 80138dc:	4646      	mov	r6, r8
 80138de:	f04f 0a00 	mov.w	sl, #0
 80138e2:	f8df b068 	ldr.w	fp, [pc, #104]	@ 801394c <__kernel_rem_pio2+0x31c>
 80138e6:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8013938 <__kernel_rem_pio2+0x308>
 80138ea:	f7ff fde5 	bl	80134b8 <scalbn>
 80138ee:	f108 0301 	add.w	r3, r8, #1
 80138f2:	00da      	lsls	r2, r3, #3
 80138f4:	9205      	str	r2, [sp, #20]
 80138f6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80138f8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80138fc:	ec55 4b10 	vmov	r4, r5, d0
 8013900:	2e00      	cmp	r6, #0
 8013902:	f280 80ce 	bge.w	8013aa2 <__kernel_rem_pio2+0x472>
 8013906:	4644      	mov	r4, r8
 8013908:	2c00      	cmp	r4, #0
 801390a:	f2c0 80fc 	blt.w	8013b06 <__kernel_rem_pio2+0x4d6>
 801390e:	4b12      	ldr	r3, [pc, #72]	@ (8013958 <__kernel_rem_pio2+0x328>)
 8013910:	f04f 0a00 	mov.w	sl, #0
 8013914:	f04f 0b00 	mov.w	fp, #0
 8013918:	2600      	movs	r6, #0
 801391a:	461f      	mov	r7, r3
 801391c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801391e:	eba8 0504 	sub.w	r5, r8, r4
 8013922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013926:	9306      	str	r3, [sp, #24]
 8013928:	e0e1      	b.n	8013aee <__kernel_rem_pio2+0x4be>
 801392a:	f04f 0902 	mov.w	r9, #2
 801392e:	e754      	b.n	80137da <__kernel_rem_pio2+0x1aa>
	...
 801393c:	3ff00000 	.word	0x3ff00000
 8013940:	08014b98 	.word	0x08014b98
 8013944:	40200000 	.word	0x40200000
 8013948:	3ff00000 	.word	0x3ff00000
 801394c:	3e700000 	.word	0x3e700000
 8013950:	41700000 	.word	0x41700000
 8013954:	3fe00000 	.word	0x3fe00000
 8013958:	08014b58 	.word	0x08014b58
 801395c:	f854 3b04 	ldr.w	r3, [r4], #4
 8013960:	b945      	cbnz	r5, 8013974 <__kernel_rem_pio2+0x344>
 8013962:	b123      	cbz	r3, 801396e <__kernel_rem_pio2+0x33e>
 8013964:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013968:	f844 3c04 	str.w	r3, [r4, #-4]
 801396c:	2301      	movs	r3, #1
 801396e:	3201      	adds	r2, #1
 8013970:	461d      	mov	r5, r3
 8013972:	e739      	b.n	80137e8 <__kernel_rem_pio2+0x1b8>
 8013974:	1acb      	subs	r3, r1, r3
 8013976:	e7f7      	b.n	8013968 <__kernel_rem_pio2+0x338>
 8013978:	f108 32ff 	add.w	r2, r8, #4294967295
 801397c:	ab0c      	add	r3, sp, #48	@ 0x30
 801397e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013982:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013986:	a90c      	add	r1, sp, #48	@ 0x30
 8013988:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801398c:	e73a      	b.n	8013804 <__kernel_rem_pio2+0x1d4>
 801398e:	f108 32ff 	add.w	r2, r8, #4294967295
 8013992:	ab0c      	add	r3, sp, #48	@ 0x30
 8013994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013998:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801399c:	e7f3      	b.n	8013986 <__kernel_rem_pio2+0x356>
 801399e:	a90c      	add	r1, sp, #48	@ 0x30
 80139a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80139a4:	3b01      	subs	r3, #1
 80139a6:	430a      	orrs	r2, r1
 80139a8:	e788      	b.n	80138bc <__kernel_rem_pio2+0x28c>
 80139aa:	3401      	adds	r4, #1
 80139ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80139b0:	2a00      	cmp	r2, #0
 80139b2:	d0fa      	beq.n	80139aa <__kernel_rem_pio2+0x37a>
 80139b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139b6:	aa20      	add	r2, sp, #128	@ 0x80
 80139b8:	f108 0701 	add.w	r7, r8, #1
 80139bc:	4444      	add	r4, r8
 80139be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80139c2:	eb0d 0503 	add.w	r5, sp, r3
 80139c6:	9b06      	ldr	r3, [sp, #24]
 80139c8:	4443      	add	r3, r8
 80139ca:	3d98      	subs	r5, #152	@ 0x98
 80139cc:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80139d0:	42bc      	cmp	r4, r7
 80139d2:	da04      	bge.n	80139de <__kernel_rem_pio2+0x3ae>
 80139d4:	46a0      	mov	r8, r4
 80139d6:	e6a3      	b.n	8013720 <__kernel_rem_pio2+0xf0>
 80139d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139da:	2401      	movs	r4, #1
 80139dc:	e7e6      	b.n	80139ac <__kernel_rem_pio2+0x37c>
 80139de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139e0:	f04f 0800 	mov.w	r8, #0
 80139e4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80139e8:	f7ec fdb0 	bl	800054c <__aeabi_i2d>
 80139ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80139f0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013cb0 <__kernel_rem_pio2+0x680>
 80139f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80139f8:	46b2      	mov	sl, r6
 80139fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139fe:	9b05      	ldr	r3, [sp, #20]
 8013a00:	4598      	cmp	r8, r3
 8013a02:	dd05      	ble.n	8013a10 <__kernel_rem_pio2+0x3e0>
 8013a04:	3701      	adds	r7, #1
 8013a06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a0a:	eca5 7b02 	vstmia	r5!, {d7}
 8013a0e:	e7df      	b.n	80139d0 <__kernel_rem_pio2+0x3a0>
 8013a10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013a14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a18:	f7ec fe02 	bl	8000620 <__aeabi_dmul>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	460b      	mov	r3, r1
 8013a20:	f108 0801 	add.w	r8, r8, #1
 8013a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a28:	f7ec fc44 	bl	80002b4 <__adddf3>
 8013a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a30:	e7e5      	b.n	80139fe <__kernel_rem_pio2+0x3ce>
 8013a32:	f1cb 0000 	rsb	r0, fp, #0
 8013a36:	ec47 6b10 	vmov	d0, r6, r7
 8013a3a:	f7ff fd3d 	bl	80134b8 <scalbn>
 8013a3e:	2200      	movs	r2, #0
 8013a40:	4b9d      	ldr	r3, [pc, #628]	@ (8013cb8 <__kernel_rem_pio2+0x688>)
 8013a42:	ec55 4b10 	vmov	r4, r5, d0
 8013a46:	4620      	mov	r0, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	f7ed f86f 	bl	8000b2c <__aeabi_dcmpge>
 8013a4e:	b300      	cbz	r0, 8013a92 <__kernel_rem_pio2+0x462>
 8013a50:	2200      	movs	r2, #0
 8013a52:	4b9a      	ldr	r3, [pc, #616]	@ (8013cbc <__kernel_rem_pio2+0x68c>)
 8013a54:	4620      	mov	r0, r4
 8013a56:	4629      	mov	r1, r5
 8013a58:	f7ec fde2 	bl	8000620 <__aeabi_dmul>
 8013a5c:	f10b 0b18 	add.w	fp, fp, #24
 8013a60:	f7ed f88e 	bl	8000b80 <__aeabi_d2iz>
 8013a64:	4606      	mov	r6, r0
 8013a66:	f7ec fd71 	bl	800054c <__aeabi_i2d>
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	4b92      	ldr	r3, [pc, #584]	@ (8013cb8 <__kernel_rem_pio2+0x688>)
 8013a6e:	f7ec fdd7 	bl	8000620 <__aeabi_dmul>
 8013a72:	460b      	mov	r3, r1
 8013a74:	4602      	mov	r2, r0
 8013a76:	4629      	mov	r1, r5
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7ec fc19 	bl	80002b0 <__aeabi_dsub>
 8013a7e:	f7ed f87f 	bl	8000b80 <__aeabi_d2iz>
 8013a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013a88:	f108 0801 	add.w	r8, r8, #1
 8013a8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013a90:	e723      	b.n	80138da <__kernel_rem_pio2+0x2aa>
 8013a92:	4620      	mov	r0, r4
 8013a94:	4629      	mov	r1, r5
 8013a96:	f7ed f873 	bl	8000b80 <__aeabi_d2iz>
 8013a9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013aa0:	e71b      	b.n	80138da <__kernel_rem_pio2+0x2aa>
 8013aa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8013aa4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013aa8:	3e01      	subs	r6, #1
 8013aaa:	f7ec fd4f 	bl	800054c <__aeabi_i2d>
 8013aae:	4622      	mov	r2, r4
 8013ab0:	462b      	mov	r3, r5
 8013ab2:	f7ec fdb5 	bl	8000620 <__aeabi_dmul>
 8013ab6:	4652      	mov	r2, sl
 8013ab8:	465b      	mov	r3, fp
 8013aba:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013abe:	4620      	mov	r0, r4
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	f7ec fdad 	bl	8000620 <__aeabi_dmul>
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	460d      	mov	r5, r1
 8013aca:	e719      	b.n	8013900 <__kernel_rem_pio2+0x2d0>
 8013acc:	9906      	ldr	r1, [sp, #24]
 8013ace:	3601      	adds	r6, #1
 8013ad0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013ad4:	9106      	str	r1, [sp, #24]
 8013ad6:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013ada:	f7ec fda1 	bl	8000620 <__aeabi_dmul>
 8013ade:	4602      	mov	r2, r0
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	4659      	mov	r1, fp
 8013ae6:	f7ec fbe5 	bl	80002b4 <__adddf3>
 8013aea:	4682      	mov	sl, r0
 8013aec:	468b      	mov	fp, r1
 8013aee:	9b00      	ldr	r3, [sp, #0]
 8013af0:	429e      	cmp	r6, r3
 8013af2:	dc01      	bgt.n	8013af8 <__kernel_rem_pio2+0x4c8>
 8013af4:	42b5      	cmp	r5, r6
 8013af6:	dae9      	bge.n	8013acc <__kernel_rem_pio2+0x49c>
 8013af8:	ab48      	add	r3, sp, #288	@ 0x120
 8013afa:	3c01      	subs	r4, #1
 8013afc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013b00:	e9c5 ab00 	strd	sl, fp, [r5]
 8013b04:	e700      	b.n	8013908 <__kernel_rem_pio2+0x2d8>
 8013b06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b08:	2b02      	cmp	r3, #2
 8013b0a:	dc0b      	bgt.n	8013b24 <__kernel_rem_pio2+0x4f4>
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	dc39      	bgt.n	8013b84 <__kernel_rem_pio2+0x554>
 8013b10:	d05d      	beq.n	8013bce <__kernel_rem_pio2+0x59e>
 8013b12:	9b02      	ldr	r3, [sp, #8]
 8013b14:	f003 0007 	and.w	r0, r3, #7
 8013b18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013b1c:	ecbd 8b02 	vpop	{d8}
 8013b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b26:	2b03      	cmp	r3, #3
 8013b28:	d1f3      	bne.n	8013b12 <__kernel_rem_pio2+0x4e2>
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	46c2      	mov	sl, r8
 8013b2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013b32:	eb0d 0403 	add.w	r4, sp, r3
 8013b36:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013b3a:	4625      	mov	r5, r4
 8013b3c:	f1ba 0f00 	cmp.w	sl, #0
 8013b40:	f1a5 0508 	sub.w	r5, r5, #8
 8013b44:	dc6b      	bgt.n	8013c1e <__kernel_rem_pio2+0x5ee>
 8013b46:	4645      	mov	r5, r8
 8013b48:	2d01      	cmp	r5, #1
 8013b4a:	f1a4 0408 	sub.w	r4, r4, #8
 8013b4e:	f300 8087 	bgt.w	8013c60 <__kernel_rem_pio2+0x630>
 8013b52:	9c05      	ldr	r4, [sp, #20]
 8013b54:	ab48      	add	r3, sp, #288	@ 0x120
 8013b56:	2000      	movs	r0, #0
 8013b58:	2100      	movs	r1, #0
 8013b5a:	441c      	add	r4, r3
 8013b5c:	f1b8 0f01 	cmp.w	r8, #1
 8013b60:	f300 809c 	bgt.w	8013c9c <__kernel_rem_pio2+0x66c>
 8013b64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8013b68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8013b6c:	f1b9 0f00 	cmp.w	r9, #0
 8013b70:	f040 80a6 	bne.w	8013cc0 <__kernel_rem_pio2+0x690>
 8013b74:	9b04      	ldr	r3, [sp, #16]
 8013b76:	e9c3 7800 	strd	r7, r8, [r3]
 8013b7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013b7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013b82:	e7c6      	b.n	8013b12 <__kernel_rem_pio2+0x4e2>
 8013b84:	9d05      	ldr	r5, [sp, #20]
 8013b86:	ab48      	add	r3, sp, #288	@ 0x120
 8013b88:	4644      	mov	r4, r8
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	441d      	add	r5, r3
 8013b8e:	2100      	movs	r1, #0
 8013b90:	2c00      	cmp	r4, #0
 8013b92:	da35      	bge.n	8013c00 <__kernel_rem_pio2+0x5d0>
 8013b94:	f1b9 0f00 	cmp.w	r9, #0
 8013b98:	d038      	beq.n	8013c0c <__kernel_rem_pio2+0x5dc>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ba0:	9c04      	ldr	r4, [sp, #16]
 8013ba2:	ad4a      	add	r5, sp, #296	@ 0x128
 8013ba4:	e9c4 2300 	strd	r2, r3, [r4]
 8013ba8:	2401      	movs	r4, #1
 8013baa:	4602      	mov	r2, r0
 8013bac:	460b      	mov	r3, r1
 8013bae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013bb2:	f7ec fb7d 	bl	80002b0 <__aeabi_dsub>
 8013bb6:	45a0      	cmp	r8, r4
 8013bb8:	da2b      	bge.n	8013c12 <__kernel_rem_pio2+0x5e2>
 8013bba:	f1b9 0f00 	cmp.w	r9, #0
 8013bbe:	d002      	beq.n	8013bc6 <__kernel_rem_pio2+0x596>
 8013bc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	9b04      	ldr	r3, [sp, #16]
 8013bc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013bcc:	e7a1      	b.n	8013b12 <__kernel_rem_pio2+0x4e2>
 8013bce:	9c05      	ldr	r4, [sp, #20]
 8013bd0:	ab48      	add	r3, sp, #288	@ 0x120
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	441c      	add	r4, r3
 8013bd8:	f1b8 0f00 	cmp.w	r8, #0
 8013bdc:	da09      	bge.n	8013bf2 <__kernel_rem_pio2+0x5c2>
 8013bde:	f1b9 0f00 	cmp.w	r9, #0
 8013be2:	d002      	beq.n	8013bea <__kernel_rem_pio2+0x5ba>
 8013be4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013be8:	4619      	mov	r1, r3
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	e9c3 0100 	strd	r0, r1, [r3]
 8013bf0:	e78f      	b.n	8013b12 <__kernel_rem_pio2+0x4e2>
 8013bf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bfa:	f7ec fb5b 	bl	80002b4 <__adddf3>
 8013bfe:	e7eb      	b.n	8013bd8 <__kernel_rem_pio2+0x5a8>
 8013c00:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013c04:	3c01      	subs	r4, #1
 8013c06:	f7ec fb55 	bl	80002b4 <__adddf3>
 8013c0a:	e7c1      	b.n	8013b90 <__kernel_rem_pio2+0x560>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	e7c6      	b.n	8013ba0 <__kernel_rem_pio2+0x570>
 8013c12:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013c16:	3401      	adds	r4, #1
 8013c18:	f7ec fb4c 	bl	80002b4 <__adddf3>
 8013c1c:	e7cb      	b.n	8013bb6 <__kernel_rem_pio2+0x586>
 8013c1e:	ed95 7b00 	vldr	d7, [r5]
 8013c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c26:	ed8d 7b00 	vstr	d7, [sp]
 8013c2a:	ed95 7b02 	vldr	d7, [r5, #8]
 8013c2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c32:	ec53 2b17 	vmov	r2, r3, d7
 8013c36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013c3a:	f7ec fb3b 	bl	80002b4 <__adddf3>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	460b      	mov	r3, r1
 8013c42:	4606      	mov	r6, r0
 8013c44:	460f      	mov	r7, r1
 8013c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c4a:	f7ec fb31 	bl	80002b0 <__aeabi_dsub>
 8013c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c52:	f7ec fb2f 	bl	80002b4 <__adddf3>
 8013c56:	e9c5 6700 	strd	r6, r7, [r5]
 8013c5a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013c5e:	e76d      	b.n	8013b3c <__kernel_rem_pio2+0x50c>
 8013c60:	ed94 7b00 	vldr	d7, [r4]
 8013c64:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013c68:	3d01      	subs	r5, #1
 8013c6a:	4652      	mov	r2, sl
 8013c6c:	465b      	mov	r3, fp
 8013c6e:	ec51 0b17 	vmov	r0, r1, d7
 8013c72:	ed8d 7b00 	vstr	d7, [sp]
 8013c76:	f7ec fb1d 	bl	80002b4 <__adddf3>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	4606      	mov	r6, r0
 8013c80:	460f      	mov	r7, r1
 8013c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c86:	f7ec fb13 	bl	80002b0 <__aeabi_dsub>
 8013c8a:	4652      	mov	r2, sl
 8013c8c:	465b      	mov	r3, fp
 8013c8e:	f7ec fb11 	bl	80002b4 <__adddf3>
 8013c92:	e9c4 6700 	strd	r6, r7, [r4]
 8013c96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013c9a:	e755      	b.n	8013b48 <__kernel_rem_pio2+0x518>
 8013c9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013ca0:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ca4:	f7ec fb06 	bl	80002b4 <__adddf3>
 8013ca8:	e758      	b.n	8013b5c <__kernel_rem_pio2+0x52c>
 8013caa:	bf00      	nop
 8013cac:	f3af 8000 	nop.w
	...
 8013cb8:	41700000 	.word	0x41700000
 8013cbc:	3e700000 	.word	0x3e700000
 8013cc0:	9b04      	ldr	r3, [sp, #16]
 8013cc2:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013cc6:	9a04      	ldr	r2, [sp, #16]
 8013cc8:	601f      	str	r7, [r3, #0]
 8013cca:	605c      	str	r4, [r3, #4]
 8013ccc:	609d      	str	r5, [r3, #8]
 8013cce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013cd2:	6110      	str	r0, [r2, #16]
 8013cd4:	60d3      	str	r3, [r2, #12]
 8013cd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013cda:	6153      	str	r3, [r2, #20]
 8013cdc:	e719      	b.n	8013b12 <__kernel_rem_pio2+0x4e2>
 8013cde:	bf00      	nop

08013ce0 <floor>:
 8013ce0:	ec51 0b10 	vmov	r0, r1, d0
 8013ce4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	4680      	mov	r8, r0
 8013cf6:	2e13      	cmp	r6, #19
 8013cf8:	dc35      	bgt.n	8013d66 <floor+0x86>
 8013cfa:	2e00      	cmp	r6, #0
 8013cfc:	da17      	bge.n	8013d2e <floor+0x4e>
 8013cfe:	a334      	add	r3, pc, #208	@ (adr r3, 8013dd0 <floor+0xf0>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	f7ec fad6 	bl	80002b4 <__adddf3>
 8013d08:	2200      	movs	r2, #0
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f7ec ff18 	bl	8000b40 <__aeabi_dcmpgt>
 8013d10:	b150      	cbz	r0, 8013d28 <floor+0x48>
 8013d12:	2c00      	cmp	r4, #0
 8013d14:	da56      	bge.n	8013dc4 <floor+0xe4>
 8013d16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013d1a:	432c      	orrs	r4, r5
 8013d1c:	2500      	movs	r5, #0
 8013d1e:	42ac      	cmp	r4, r5
 8013d20:	4c2d      	ldr	r4, [pc, #180]	@ (8013dd8 <floor+0xf8>)
 8013d22:	bf08      	it	eq
 8013d24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013d28:	4621      	mov	r1, r4
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	e024      	b.n	8013d78 <floor+0x98>
 8013d2e:	4f2b      	ldr	r7, [pc, #172]	@ (8013ddc <floor+0xfc>)
 8013d30:	4137      	asrs	r7, r6
 8013d32:	ea01 0307 	and.w	r3, r1, r7
 8013d36:	4303      	orrs	r3, r0
 8013d38:	d01e      	beq.n	8013d78 <floor+0x98>
 8013d3a:	a325      	add	r3, pc, #148	@ (adr r3, 8013dd0 <floor+0xf0>)
 8013d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d40:	f7ec fab8 	bl	80002b4 <__adddf3>
 8013d44:	2200      	movs	r2, #0
 8013d46:	2300      	movs	r3, #0
 8013d48:	f7ec fefa 	bl	8000b40 <__aeabi_dcmpgt>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d0eb      	beq.n	8013d28 <floor+0x48>
 8013d50:	2c00      	cmp	r4, #0
 8013d52:	f04f 0500 	mov.w	r5, #0
 8013d56:	bfbe      	ittt	lt
 8013d58:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013d5c:	4133      	asrlt	r3, r6
 8013d5e:	18e4      	addlt	r4, r4, r3
 8013d60:	ea24 0407 	bic.w	r4, r4, r7
 8013d64:	e7e0      	b.n	8013d28 <floor+0x48>
 8013d66:	2e33      	cmp	r6, #51	@ 0x33
 8013d68:	dd0a      	ble.n	8013d80 <floor+0xa0>
 8013d6a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013d6e:	d103      	bne.n	8013d78 <floor+0x98>
 8013d70:	4602      	mov	r2, r0
 8013d72:	460b      	mov	r3, r1
 8013d74:	f7ec fa9e 	bl	80002b4 <__adddf3>
 8013d78:	ec41 0b10 	vmov	d0, r0, r1
 8013d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d80:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013d84:	f04f 37ff 	mov.w	r7, #4294967295
 8013d88:	40df      	lsrs	r7, r3
 8013d8a:	4207      	tst	r7, r0
 8013d8c:	d0f4      	beq.n	8013d78 <floor+0x98>
 8013d8e:	a310      	add	r3, pc, #64	@ (adr r3, 8013dd0 <floor+0xf0>)
 8013d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d94:	f7ec fa8e 	bl	80002b4 <__adddf3>
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f7ec fed0 	bl	8000b40 <__aeabi_dcmpgt>
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d0c1      	beq.n	8013d28 <floor+0x48>
 8013da4:	2c00      	cmp	r4, #0
 8013da6:	da0a      	bge.n	8013dbe <floor+0xde>
 8013da8:	2e14      	cmp	r6, #20
 8013daa:	d101      	bne.n	8013db0 <floor+0xd0>
 8013dac:	3401      	adds	r4, #1
 8013dae:	e006      	b.n	8013dbe <floor+0xde>
 8013db0:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013db4:	2301      	movs	r3, #1
 8013db6:	40b3      	lsls	r3, r6
 8013db8:	441d      	add	r5, r3
 8013dba:	4545      	cmp	r5, r8
 8013dbc:	d3f6      	bcc.n	8013dac <floor+0xcc>
 8013dbe:	ea25 0507 	bic.w	r5, r5, r7
 8013dc2:	e7b1      	b.n	8013d28 <floor+0x48>
 8013dc4:	2500      	movs	r5, #0
 8013dc6:	462c      	mov	r4, r5
 8013dc8:	e7ae      	b.n	8013d28 <floor+0x48>
 8013dca:	bf00      	nop
 8013dcc:	f3af 8000 	nop.w
 8013dd0:	8800759c 	.word	0x8800759c
 8013dd4:	7e37e43c 	.word	0x7e37e43c
 8013dd8:	bff00000 	.word	0xbff00000
 8013ddc:	000fffff 	.word	0x000fffff

08013de0 <_init>:
 8013de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013de2:	bf00      	nop
 8013de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013de6:	bc08      	pop	{r3}
 8013de8:	469e      	mov	lr, r3
 8013dea:	4770      	bx	lr

08013dec <_fini>:
 8013dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dee:	bf00      	nop
 8013df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013df2:	bc08      	pop	{r3}
 8013df4:	469e      	mov	lr, r3
 8013df6:	4770      	bx	lr
