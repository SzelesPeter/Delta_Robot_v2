
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014038  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  08014290  08014290  00015290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015168  08015168  00017200  2**0
                  CONTENTS
  4 .ARM          00000008  08015168  08015168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015170  08015170  00017200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015170  08015170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015174  08015174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08015178  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  20000200  08015378  00017200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b3c4  08015378  000173c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ab2  00000000  00000000  00017236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427c  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd2b  00000000  00000000  00041147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025585  00000000  00000000  00070e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012715e  00000000  00000000  000963f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bd555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009338  00000000  00000000  001bd598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001c68d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000200 	.word	0x20000200
 8000274:	00000000 	.word	0x00000000
 8000278:	08014278 	.word	0x08014278

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000204 	.word	0x20000204
 8000294:	08014278 	.word	0x08014278

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Hall_Sensor_Read_Magnitude>:
 */

#include "AS5048A_P.h"

uint16_t Hall_Sensor_Read_Magnitude(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af02      	add	r7, sp, #8
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = magnitude_adress;
 8001042:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001046:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f004 feaa 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001054:	f107 0216 	add.w	r2, r7, #22
 8001058:	f107 0116 	add.w	r1, r7, #22
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f009 fc22 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f004 fe9a 	bl	8005da8 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f004 fe92 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001084:	f107 0216 	add.w	r2, r7, #22
 8001088:	f107 0116 	add.w	r1, r7, #22
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f009 fc0a 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f004 fe82 	bl	8005da8 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 80010a4:	2300      	movs	r3, #0
 80010a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f004 fe7a 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010b4:	f107 0216 	add.w	r2, r7, #22
 80010b8:	f107 0116 	add.w	r1, r7, #22
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f009 fbf2 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f004 fe6a 	bl	8005da8 <HAL_GPIO_WritePin>
	return tmp;
 80010d4:	8afb      	ldrh	r3, [r7, #22]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <Hall_Sensor_Read_Angle>:



uint16_t Hall_Sensor_Read_Angle(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = angle_adress;
 80010ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f0:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f004 fe55 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010fe:	f107 0216 	add.w	r2, r7, #22
 8001102:	f107 0116 	add.w	r1, r7, #22
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f009 fbcd 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f004 fe45 	bl	8005da8 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800111e:	2300      	movs	r3, #0
 8001120:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f004 fe3d 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800112e:	f107 0216 	add.w	r2, r7, #22
 8001132:	f107 0116 	add.w	r1, r7, #22
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f009 fbb5 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f004 fe2d 	bl	8005da8 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f004 fe25 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800115e:	f107 0216 	add.w	r2, r7, #22
 8001162:	f107 0116 	add.w	r1, r7, #22
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f009 fb9d 	bl	800a8ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f004 fe15 	bl	8005da8 <HAL_GPIO_WritePin>
	return tmp;
 800117e:	8afb      	ldrh	r3, [r7, #22]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <Relay_0_Set+0x14>)
 8001192:	f004 fe09 	bl	8005da8 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42020800 	.word	0x42020800

080011a0 <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <Relay_0_Reset+0x14>)
 80011aa:	f004 fdfd 	bl	8005da8 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	42020800 	.word	0x42020800

080011b8 <Relay_0_Read>:

uint8_t Relay_0_Read(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RELAY0_PORT, RELAY0_PIN);
 80011bc:	2110      	movs	r1, #16
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Relay_0_Read+0x14>)
 80011c0:	f004 fdda 	bl	8005d78 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	42020800 	.word	0x42020800

080011d0 <Relay_1_Set>:

void Relay_1_Set(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <Relay_1_Set+0x14>)
 80011dc:	f004 fde4 	bl	8005da8 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	42020400 	.word	0x42020400

080011e8 <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	4802      	ldr	r0, [pc, #8]	@ (80011fc <Relay_1_Reset+0x14>)
 80011f4:	f004 fdd8 	bl	8005da8 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	42020400 	.word	0x42020400

08001200 <Move_to_XYZ>:
#include "stm32h5xx_hal.h"

extern UART_HandleTypeDef *huart1;
#include "Inverz_Kinematika_P.h"
void  Move_to_XYZ(double X_target, double Y_target, double Z_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b0ba      	sub	sp, #232	@ 0xe8
 8001208:	af06      	add	r7, sp, #24
 800120a:	ed87 0b08 	vstr	d0, [r7, #32]
 800120e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001212:	ed87 2b04 	vstr	d2, [r7, #16]
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 800121e:	a3e5      	add	r3, pc, #916	@ (adr r3, 80015b4 <Move_to_XYZ+0x3b4>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double l;
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	uint8_t tx_buff[50] = {0};
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800122c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001230:	222e      	movs	r2, #46	@ 0x2e
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00d fabc 	bl	800e7b2 <memset>

	strcpy(tx_buff, "\r\n invez kinematika teszt \r\n");
 800123a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123e:	4ad0      	ldr	r2, [pc, #832]	@ (8001580 <Move_to_XYZ+0x380>)
 8001240:	461c      	mov	r4, r3
 8001242:	4615      	mov	r5, r2
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800124c:	c407      	stmia	r4!, {r0, r1, r2}
 800124e:	7023      	strb	r3, [r4, #0]
	UART_Out(huart1, tx_buff);
 8001250:	4bcc      	ldr	r3, [pc, #816]	@ (8001584 <Move_to_XYZ+0x384>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fbe6 	bl	8003a2c <UART_Out>

	//-----------------------------Motor 0

	strcpy(tx_buff, "\r\n Motor 0 \r\n");
 8001260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001264:	4ac8      	ldr	r2, [pc, #800]	@ (8001588 <Move_to_XYZ+0x388>)
 8001266:	461c      	mov	r4, r3
 8001268:	4613      	mov	r3, r2
 800126a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126c:	c407      	stmia	r4!, {r0, r1, r2}
 800126e:	8023      	strh	r3, [r4, #0]
	UART_Out(huart1, tx_buff);
 8001270:	4bc4      	ldr	r3, [pc, #784]	@ (8001584 <Move_to_XYZ+0x384>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fbd6 	bl	8003a2c <UART_Out>

	X_target_forgatott = X_target;
 8001280:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001284:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	Y_target_forgatott = Y_target;
 8001288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800128c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	sprintf(tx_buff, " X_target: %f \r\n", X_target);
 8001290:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001298:	49bc      	ldr	r1, [pc, #752]	@ (800158c <Move_to_XYZ+0x38c>)
 800129a:	f00d fa27 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 800129e:	4bb9      	ldr	r3, [pc, #740]	@ (8001584 <Move_to_XYZ+0x384>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fbbf 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " Y_target: %f \r\n", Y_target);
 80012ae:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012b6:	49b6      	ldr	r1, [pc, #728]	@ (8001590 <Move_to_XYZ+0x390>)
 80012b8:	f00d fa18 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 80012bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001584 <Move_to_XYZ+0x384>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fbb0 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " X_target_forgatott: %f \r\n", X_target_forgatott);
 80012cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012d0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80012d4:	49af      	ldr	r1, [pc, #700]	@ (8001594 <Move_to_XYZ+0x394>)
 80012d6:	f00d fa09 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 80012da:	4baa      	ldr	r3, [pc, #680]	@ (8001584 <Move_to_XYZ+0x384>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fba1 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " Y_target_forgatott: %f \r\n", Y_target_forgatott);
 80012ea:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80012f2:	49a9      	ldr	r1, [pc, #676]	@ (8001598 <Move_to_XYZ+0x398>)
 80012f4:	f00d f9fa 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 80012f8:	4ba2      	ldr	r3, [pc, #648]	@ (8001584 <Move_to_XYZ+0x384>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fb92 	bl	8003a2c <UART_Out>

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001308:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8001560 <Move_to_XYZ+0x360>
 800130c:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8001310:	f010 fdc6 	bl	8011ea0 <pow>
 8001314:	ec53 2b10 	vmov	r2, r3, d0
 8001318:	a193      	add	r1, pc, #588	@ (adr r1, 8001568 <Move_to_XYZ+0x368>)
 800131a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800131e:	f7fe ffc7 	bl	80002b0 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	ec43 2b17 	vmov	d7, r2, r3
 800132a:	eeb0 0a47 	vmov.f32	s0, s14
 800132e:	eef0 0a67 	vmov.f32	s1, s15
 8001332:	f010 fe25 	bl	8011f80 <sqrt>
 8001336:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b97      	ldr	r3, [pc, #604]	@ (800159c <Move_to_XYZ+0x39c>)
 8001340:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001344:	f7fe ffb6 	bl	80002b4 <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	4993      	ldr	r1, [pc, #588]	@ (80015a0 <Move_to_XYZ+0x3a0>)
 8001352:	f7fe ffad 	bl	80002b0 <__aeabi_dsub>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	ec43 2b17 	vmov	d7, r2, r3
 800135e:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8001560 <Move_to_XYZ+0x360>
 8001362:	eeb0 0a47 	vmov.f32	s0, s14
 8001366:	eef0 0a67 	vmov.f32	s1, s15
 800136a:	f010 fd99 	bl	8011ea0 <pow>
 800136e:	ec55 4b10 	vmov	r4, r5, d0
 8001372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001376:	a17e      	add	r1, pc, #504	@ (adr r1, 8001570 <Move_to_XYZ+0x370>)
 8001378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800137c:	f7fe ff98 	bl	80002b0 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b17 	vmov	d7, r2, r3
 8001388:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001560 <Move_to_XYZ+0x360>
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f010 fd84 	bl	8011ea0 <pow>
 8001398:	ec53 2b10 	vmov	r2, r3, d0
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7fe ff88 	bl	80002b4 <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	ec43 2b17 	vmov	d7, r2, r3
 80013ac:	eeb0 0a47 	vmov.f32	s0, s14
 80013b0:	eef0 0a67 	vmov.f32	s1, s15
 80013b4:	f010 fde4 	bl	8011f80 <sqrt>
 80013b8:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 80013bc:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8001560 <Move_to_XYZ+0x360>
 80013c0:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 80013c4:	f010 fd6c 	bl	8011ea0 <pow>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	a16a      	add	r1, pc, #424	@ (adr r1, 8001578 <Move_to_XYZ+0x378>)
 80013ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013d2:	f7fe ff6d 	bl	80002b0 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 8001560 <Move_to_XYZ+0x360>
 80013e2:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80013e6:	f010 fd5b 	bl	8011ea0 <pow>
 80013ea:	ec53 2b10 	vmov	r2, r3, d0
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe ff5f 	bl	80002b4 <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4614      	mov	r4, r2
 80013fc:	461d      	mov	r5, r3
 80013fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	f7fe ff55 	bl	80002b4 <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4620      	mov	r0, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f7ff fa2f 	bl	8000874 <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 800141e:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 8001560 <Move_to_XYZ+0x360>
 8001422:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8001426:	f010 fd3b 	bl	8011ea0 <pow>
 800142a:	ec53 2b10 	vmov	r2, r3, d0
 800142e:	a152      	add	r1, pc, #328	@ (adr r1, 8001578 <Move_to_XYZ+0x378>)
 8001430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001434:	f7fe ff3c 	bl	80002b0 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	ec43 2b17 	vmov	d7, r2, r3
 8001440:	eeb0 0a47 	vmov.f32	s0, s14
 8001444:	eef0 0a67 	vmov.f32	s1, s15
 8001448:	f010 fd9a 	bl	8011f80 <sqrt>
 800144c:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98

	sprintf(tx_buff, " also_arm_lenght_XZ: %f \r\n", also_arm_lenght_XZ);
 8001450:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001454:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001458:	4952      	ldr	r1, [pc, #328]	@ (80015a4 <Move_to_XYZ+0x3a4>)
 800145a:	f00d f947 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 800145e:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <Move_to_XYZ+0x384>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fadf 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " d: %f \r\n", d);
 800146e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001472:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001476:	494c      	ldr	r1, [pc, #304]	@ (80015a8 <Move_to_XYZ+0x3a8>)
 8001478:	f00d f938 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 800147c:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <Move_to_XYZ+0x384>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fad0 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " l: %f \r\n", l);
 800148c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001490:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001494:	4945      	ldr	r1, [pc, #276]	@ (80015ac <Move_to_XYZ+0x3ac>)
 8001496:	f00d f929 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 800149a:	4b3a      	ldr	r3, [pc, #232]	@ (8001584 <Move_to_XYZ+0x384>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fac1 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " h: %f \r\n", h);
 80014aa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80014ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80014b2:	493f      	ldr	r1, [pc, #252]	@ (80015b0 <Move_to_XYZ+0x3b0>)
 80014b4:	f00d f91a 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 80014b8:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <Move_to_XYZ+0x384>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fab2 	bl	8003a2c <UART_Out>

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <Move_to_XYZ+0x39c>)
 80014ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80014d2:	f7fe feef 	bl	80002b4 <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <Move_to_XYZ+0x3a0>)
 80014e4:	f7fe fee4 	bl	80002b0 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80014f4:	f7ff f894 	bl	8000620 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001504:	f7ff f9b6 	bl	8000874 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	a317      	add	r3, pc, #92	@ (adr r3, 8001570 <Move_to_XYZ+0x370>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800151a:	f7fe fec9 	bl	80002b0 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800152a:	f7ff f879 	bl	8000620 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800153a:	f7ff f99b 	bl	8000874 <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe feb5 	bl	80002b4 <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <Move_to_XYZ+0x3a0>)
 8001558:	f7fe feac 	bl	80002b4 <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	e02d      	b.n	80015bc <Move_to_XYZ+0x3bc>
 8001560:	00000000 	.word	0x00000000
 8001564:	40000000 	.word	0x40000000
 8001568:	00000000 	.word	0x00000000
 800156c:	40fa9640 	.word	0x40fa9640
 8001570:	00000000 	.word	0x00000000
 8001574:	4079a000 	.word	0x4079a000
 8001578:	00000000 	.word	0x00000000
 800157c:	40d3f840 	.word	0x40d3f840
 8001580:	08014290 	.word	0x08014290
 8001584:	2003ae68 	.word	0x2003ae68
 8001588:	080142b0 	.word	0x080142b0
 800158c:	080142c0 	.word	0x080142c0
 8001590:	080142d4 	.word	0x080142d4
 8001594:	080142e8 	.word	0x080142e8
 8001598:	08014304 	.word	0x08014304
 800159c:	40418000 	.word	0x40418000
 80015a0:	40440000 	.word	0x40440000
 80015a4:	08014320 	.word	0x08014320
 80015a8:	0801433c 	.word	0x0801433c
 80015ac:	08014348 	.word	0x08014348
 80015b0:	08014354 	.word	0x08014354
 80015b4:	54442d18 	.word	0x54442d18
 80015b8:	400921fb 	.word	0x400921fb
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 80015c2:	a3d7      	add	r3, pc, #860	@ (adr r3, 8001920 <Move_to_XYZ+0x720>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015cc:	f7fe fe70 	bl	80002b0 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80015dc:	f7ff f94a 	bl	8000874 <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	461d      	mov	r5, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4bd4      	ldr	r3, [pc, #848]	@ (8001940 <Move_to_XYZ+0x740>)
 80015ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015f2:	f7fe fe5f 	bl	80002b4 <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001602:	f7ff f80d 	bl	8000620 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fe51 	bl	80002b4 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4bc9      	ldr	r3, [pc, #804]	@ (8001944 <Move_to_XYZ+0x744>)
 8001620:	f7fe fe46 	bl	80002b0 <__aeabi_dsub>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001630:	f7fe fff6 	bl	8000620 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001640:	f7ff f918 	bl	8000874 <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	a3b4      	add	r3, pc, #720	@ (adr r3, 8001920 <Move_to_XYZ+0x720>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe fe2f 	bl	80002b4 <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 800165e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8001920 <Move_to_XYZ+0x720>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001668:	f7fe fe22 	bl	80002b0 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	ec43 2b18 	vmov	d8, r2, r3
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4bb2      	ldr	r3, [pc, #712]	@ (8001944 <Move_to_XYZ+0x744>)
 800167a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800167e:	f7fe fe17 	bl	80002b0 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ec43 2b17 	vmov	d7, r2, r3
 800168a:	eeb0 1a47 	vmov.f32	s2, s14
 800168e:	eef0 1a67 	vmov.f32	s3, s15
 8001692:	eeb0 0a48 	vmov.f32	s0, s16
 8001696:	eef0 0a68 	vmov.f32	s1, s17
 800169a:	f010 fbff 	bl	8011e9c <atan2>
 800169e:	ec51 0b10 	vmov	r0, r1, d0
 80016a2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001928 <Move_to_XYZ+0x728>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffba 	bl	8000620 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	461d      	mov	r5, r3
 80016b4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	f7fe fdfa 	bl	80002b4 <__adddf3>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7ff f8d4 	bl	8000874 <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	sprintf(tx_buff, " Arm_joint_X: %f \r\n", Arm_joint_X);
 80016d4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80016d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80016dc:	499a      	ldr	r1, [pc, #616]	@ (8001948 <Move_to_XYZ+0x748>)
 80016de:	f00d f805 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 80016e2:	4b9a      	ldr	r3, [pc, #616]	@ (800194c <Move_to_XYZ+0x74c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 f99d 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " Arm_joint_Z: %f \r\n", Arm_joint_Z);
 80016f2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80016f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016fa:	4995      	ldr	r1, [pc, #596]	@ (8001950 <Move_to_XYZ+0x750>)
 80016fc:	f00c fff6 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 8001700:	4b92      	ldr	r3, [pc, #584]	@ (800194c <Move_to_XYZ+0x74c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f002 f98e 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " Theta0: %f \r\n", Theta0);
 8001710:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001714:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001718:	498e      	ldr	r1, [pc, #568]	@ (8001954 <Move_to_XYZ+0x754>)
 800171a:	f00c ffe7 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 800171e:	4b8b      	ldr	r3, [pc, #556]	@ (800194c <Move_to_XYZ+0x74c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f002 f97f 	bl	8003a2c <UART_Out>


	//-----------------------------Motor 1

	strcpy(tx_buff, "\r\n Motor 1 \r\n");
 800172e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001732:	4a89      	ldr	r2, [pc, #548]	@ (8001958 <Move_to_XYZ+0x758>)
 8001734:	461c      	mov	r4, r3
 8001736:	4613      	mov	r3, r2
 8001738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173a:	c407      	stmia	r4!, {r0, r1, r2}
 800173c:	8023      	strh	r3, [r4, #0]
		UART_Out(huart1, tx_buff);
 800173e:	4b83      	ldr	r3, [pc, #524]	@ (800194c <Move_to_XYZ+0x74c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f002 f96f 	bl	8003a2c <UART_Out>

	alpha = atan2(Y_target,X_target);
 800174e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001752:	ed97 0b06 	vldr	d0, [r7, #24]
 8001756:	f010 fba1 	bl	8011e9c <atan2>
 800175a:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 800175e:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8001930 <Move_to_XYZ+0x730>
 8001762:	ed97 0b08 	vldr	d0, [r7, #32]
 8001766:	f010 fb9b 	bl	8011ea0 <pow>
 800176a:	ec55 4b10 	vmov	r4, r5, d0
 800176e:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8001930 <Move_to_XYZ+0x730>
 8001772:	ed97 0b06 	vldr	d0, [r7, #24]
 8001776:	f010 fb93 	bl	8011ea0 <pow>
 800177a:	ec53 2b10 	vmov	r2, r3, d0
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fd97 	bl	80002b4 <__adddf3>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	ec43 2b17 	vmov	d7, r2, r3
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f010 fbf3 	bl	8011f80 <sqrt>
 800179a:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	X_target_forgatott = r*cos(alpha + 2*PI/3);
 800179e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	f7fe fd85 	bl	80002b4 <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b69      	ldr	r3, [pc, #420]	@ (800195c <Move_to_XYZ+0x75c>)
 80017b8:	f7ff f85c 	bl	8000874 <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80017c8:	f7fe fd74 	bl	80002b4 <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ec43 2b17 	vmov	d7, r2, r3
 80017d4:	eeb0 0a47 	vmov.f32	s0, s14
 80017d8:	eef0 0a67 	vmov.f32	s1, s15
 80017dc:	f010 fbfc 	bl	8011fd8 <cos>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017e8:	f7fe ff1a 	bl	8000620 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	Y_target_forgatott = r*sin(alpha + 2*PI/3);
 80017f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	f7fe fd5a 	bl	80002b4 <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b53      	ldr	r3, [pc, #332]	@ (800195c <Move_to_XYZ+0x75c>)
 800180e:	f7ff f831 	bl	8000874 <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800181e:	f7fe fd49 	bl	80002b4 <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ec43 2b17 	vmov	d7, r2, r3
 800182a:	eeb0 0a47 	vmov.f32	s0, s14
 800182e:	eef0 0a67 	vmov.f32	s1, s15
 8001832:	f010 fc25 	bl	8012080 <sin>
 8001836:	ec53 2b10 	vmov	r2, r3, d0
 800183a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800183e:	f7fe feef 	bl	8000620 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	sprintf(tx_buff, " X_target_forgatott: %f \r\n", X_target_forgatott);
 800184a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800184e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001852:	4943      	ldr	r1, [pc, #268]	@ (8001960 <Move_to_XYZ+0x760>)
 8001854:	f00c ff4a 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <Move_to_XYZ+0x74c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f002 f8e2 	bl	8003a2c <UART_Out>
	sprintf(tx_buff, " Y_target_forgatott: %f \r\n", Y_target_forgatott);
 8001868:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800186c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8001870:	493c      	ldr	r1, [pc, #240]	@ (8001964 <Move_to_XYZ+0x764>)
 8001872:	f00c ff3b 	bl	800e6ec <siprintf>
	UART_Out(huart1, tx_buff);
 8001876:	4b35      	ldr	r3, [pc, #212]	@ (800194c <Move_to_XYZ+0x74c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f8d3 	bl	8003a2c <UART_Out>


	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001886:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001930 <Move_to_XYZ+0x730>
 800188a:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 800188e:	f010 fb07 	bl	8011ea0 <pow>
 8001892:	ec53 2b10 	vmov	r2, r3, d0
 8001896:	a128      	add	r1, pc, #160	@ (adr r1, 8001938 <Move_to_XYZ+0x738>)
 8001898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800189c:	f7fe fd08 	bl	80002b0 <__aeabi_dsub>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	ec43 2b17 	vmov	d7, r2, r3
 80018a8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ac:	eef0 0a67 	vmov.f32	s1, s15
 80018b0:	f010 fb66 	bl	8011f80 <sqrt>
 80018b4:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <Move_to_XYZ+0x740>)
 80018be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80018c2:	f7fe fcf7 	bl	80002b4 <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	f04f 0000 	mov.w	r0, #0
 80018ce:	491d      	ldr	r1, [pc, #116]	@ (8001944 <Move_to_XYZ+0x744>)
 80018d0:	f7fe fcee 	bl	80002b0 <__aeabi_dsub>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b17 	vmov	d7, r2, r3
 80018dc:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8001930 <Move_to_XYZ+0x730>
 80018e0:	eeb0 0a47 	vmov.f32	s0, s14
 80018e4:	eef0 0a67 	vmov.f32	s1, s15
 80018e8:	f010 fada 	bl	8011ea0 <pow>
 80018ec:	ec55 4b10 	vmov	r4, r5, d0
 80018f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018f4:	a10a      	add	r1, pc, #40	@ (adr r1, 8001920 <Move_to_XYZ+0x720>)
 80018f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018fa:	f7fe fcd9 	bl	80002b0 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	ec43 2b17 	vmov	d7, r2, r3
 8001906:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001930 <Move_to_XYZ+0x730>
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f010 fac5 	bl	8011ea0 <pow>
 8001916:	ec53 2b10 	vmov	r2, r3, d0
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	e023      	b.n	8001968 <Move_to_XYZ+0x768>
 8001920:	00000000 	.word	0x00000000
 8001924:	4079a000 	.word	0x4079a000
 8001928:	00000000 	.word	0x00000000
 800192c:	40e38800 	.word	0x40e38800
 8001930:	00000000 	.word	0x00000000
 8001934:	40000000 	.word	0x40000000
 8001938:	00000000 	.word	0x00000000
 800193c:	40fa9640 	.word	0x40fa9640
 8001940:	40418000 	.word	0x40418000
 8001944:	40440000 	.word	0x40440000
 8001948:	08014360 	.word	0x08014360
 800194c:	2003ae68 	.word	0x2003ae68
 8001950:	08014374 	.word	0x08014374
 8001954:	08014388 	.word	0x08014388
 8001958:	08014398 	.word	0x08014398
 800195c:	40080000 	.word	0x40080000
 8001960:	080142e8 	.word	0x080142e8
 8001964:	08014304 	.word	0x08014304
 8001968:	f7fe fca4 	bl	80002b4 <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	ec43 2b17 	vmov	d7, r2, r3
 8001974:	eeb0 0a47 	vmov.f32	s0, s14
 8001978:	eef0 0a67 	vmov.f32	s1, s15
 800197c:	f010 fb00 	bl	8011f80 <sqrt>
 8001980:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001984:	ed9f 1bce 	vldr	d1, [pc, #824]	@ 8001cc0 <Move_to_XYZ+0xac0>
 8001988:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 800198c:	f010 fa88 	bl	8011ea0 <pow>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	a1db      	add	r1, pc, #876	@ (adr r1, 8001d04 <Move_to_XYZ+0xb04>)
 8001996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800199a:	f7fe fc89 	bl	80002b0 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	ed9f 1bc6 	vldr	d1, [pc, #792]	@ 8001cc0 <Move_to_XYZ+0xac0>
 80019aa:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80019ae:	f010 fa77 	bl	8011ea0 <pow>
 80019b2:	ec53 2b10 	vmov	r2, r3, d0
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc7b 	bl	80002b4 <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	f7fe fc71 	bl	80002b4 <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe ff4b 	bl	8000874 <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 80019e6:	ed9f 1bb6 	vldr	d1, [pc, #728]	@ 8001cc0 <Move_to_XYZ+0xac0>
 80019ea:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 80019ee:	f010 fa57 	bl	8011ea0 <pow>
 80019f2:	ec53 2b10 	vmov	r2, r3, d0
 80019f6:	a1c3      	add	r1, pc, #780	@ (adr r1, 8001d04 <Move_to_XYZ+0xb04>)
 80019f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019fc:	f7fe fc58 	bl	80002b0 <__aeabi_dsub>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	ec43 2b17 	vmov	d7, r2, r3
 8001a08:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0c:	eef0 0a67 	vmov.f32	s1, s15
 8001a10:	f010 fab6 	bl	8011f80 <sqrt>
 8001a14:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98

	sprintf(tx_buff, " also_arm_lenght_XZ: %f \r\n", also_arm_lenght_XZ);
 8001a18:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a1c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001a20:	49ad      	ldr	r1, [pc, #692]	@ (8001cd8 <Move_to_XYZ+0xad8>)
 8001a22:	f00c fe63 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001a26:	4bad      	ldr	r3, [pc, #692]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fffb 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " d: %f \r\n", d);
 8001a36:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a3a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001a3e:	49a8      	ldr	r1, [pc, #672]	@ (8001ce0 <Move_to_XYZ+0xae0>)
 8001a40:	f00c fe54 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001a44:	4ba5      	ldr	r3, [pc, #660]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 ffec 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " l: %f \r\n", l);
 8001a54:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a58:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001a5c:	49a1      	ldr	r1, [pc, #644]	@ (8001ce4 <Move_to_XYZ+0xae4>)
 8001a5e:	f00c fe45 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001a62:	4b9e      	ldr	r3, [pc, #632]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 ffdd 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " h: %f \r\n", h);
 8001a72:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a76:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001a7a:	499b      	ldr	r1, [pc, #620]	@ (8001ce8 <Move_to_XYZ+0xae8>)
 8001a7c:	f00c fe36 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001a80:	4b96      	ldr	r3, [pc, #600]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 ffce 	bl	8003a2c <UART_Out>

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b95      	ldr	r3, [pc, #596]	@ (8001cec <Move_to_XYZ+0xaec>)
 8001a96:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a9a:	f7fe fc0b 	bl	80002b4 <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	4b91      	ldr	r3, [pc, #580]	@ (8001cf0 <Move_to_XYZ+0xaf0>)
 8001aac:	f7fe fc00 	bl	80002b0 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001abc:	f7fe fdb0 	bl	8000620 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001acc:	f7fe fed2 	bl	8000874 <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	a37b      	add	r3, pc, #492	@ (adr r3, 8001cc8 <Move_to_XYZ+0xac8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae2:	f7fe fbe5 	bl	80002b0 <__aeabi_dsub>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001af2:	f7fe fd95 	bl	8000620 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001b02:	f7fe feb7 	bl	8000874 <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbd1 	bl	80002b4 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <Move_to_XYZ+0xaf0>)
 8001b20:	f7fe fbc8 	bl	80002b4 <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8001b2c:	a366      	add	r3, pc, #408	@ (adr r3, 8001cc8 <Move_to_XYZ+0xac8>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b36:	f7fe fbbb 	bl	80002b0 <__aeabi_dsub>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001b46:	f7fe fe95 	bl	8000874 <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	461d      	mov	r5, r3
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <Move_to_XYZ+0xaec>)
 8001b58:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001b5c:	f7fe fbaa 	bl	80002b4 <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001b6c:	f7fe fd58 	bl	8000620 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fb9c 	bl	80002b4 <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <Move_to_XYZ+0xaf0>)
 8001b8a:	f7fe fb91 	bl	80002b0 <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001b9a:	f7fe fd41 	bl	8000620 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001baa:	f7fe fe63 	bl	8000874 <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	a344      	add	r3, pc, #272	@ (adr r3, 8001cc8 <Move_to_XYZ+0xac8>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fb7a 	bl	80002b4 <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8001bc8:	a33f      	add	r3, pc, #252	@ (adr r3, 8001cc8 <Move_to_XYZ+0xac8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001bd2:	f7fe fb6d 	bl	80002b0 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	ec43 2b18 	vmov	d8, r2, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b43      	ldr	r3, [pc, #268]	@ (8001cf0 <Move_to_XYZ+0xaf0>)
 8001be4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001be8:	f7fe fb62 	bl	80002b0 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	ec43 2b17 	vmov	d7, r2, r3
 8001bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8001bf8:	eef0 1a67 	vmov.f32	s3, s15
 8001bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8001c00:	eef0 0a68 	vmov.f32	s1, s17
 8001c04:	f010 f94a 	bl	8011e9c <atan2>
 8001c08:	ec51 0b10 	vmov	r0, r1, d0
 8001c0c:	a330      	add	r3, pc, #192	@ (adr r3, 8001cd0 <Move_to_XYZ+0xad0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fd05 	bl	8000620 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	f7fe fb45 	bl	80002b4 <__adddf3>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fe1f 	bl	8000874 <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	sprintf(tx_buff, " Arm_joint_X: %f \r\n", Arm_joint_X);
 8001c3e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c42:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001c46:	492b      	ldr	r1, [pc, #172]	@ (8001cf4 <Move_to_XYZ+0xaf4>)
 8001c48:	f00c fd50 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fee8 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " Arm_joint_Z: %f \r\n", Arm_joint_Z);
 8001c5c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c64:	4924      	ldr	r1, [pc, #144]	@ (8001cf8 <Move_to_XYZ+0xaf8>)
 8001c66:	f00c fd41 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fed9 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " Theta0: %f \r\n", Theta0);
 8001c7a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001c82:	491e      	ldr	r1, [pc, #120]	@ (8001cfc <Move_to_XYZ+0xafc>)
 8001c84:	f00c fd32 	bl	800e6ec <siprintf>
		UART_Out(huart1, tx_buff);
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 feca 	bl	8003a2c <UART_Out>

	//-----------------------------Motor 2

		strcpy(tx_buff, "\r\n Motor 2 \r\n");
 8001c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c9c:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <Move_to_XYZ+0xb00>)
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ca6:	8023      	strh	r3, [r4, #0]
		UART_Out(huart1, tx_buff);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <Move_to_XYZ+0xadc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 feba 	bl	8003a2c <UART_Out>

		alpha = atan2(Y_target,X_target);
 8001cb8:	ed97 1b08 	vldr	d1, [r7, #32]
 8001cbc:	e02a      	b.n	8001d14 <Move_to_XYZ+0xb14>
 8001cbe:	bf00      	nop
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40000000 	.word	0x40000000
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	4079a000 	.word	0x4079a000
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40e38800 	.word	0x40e38800
 8001cd8:	08014320 	.word	0x08014320
 8001cdc:	2003ae68 	.word	0x2003ae68
 8001ce0:	0801433c 	.word	0x0801433c
 8001ce4:	08014348 	.word	0x08014348
 8001ce8:	08014354 	.word	0x08014354
 8001cec:	40418000 	.word	0x40418000
 8001cf0:	40440000 	.word	0x40440000
 8001cf4:	08014360 	.word	0x08014360
 8001cf8:	08014374 	.word	0x08014374
 8001cfc:	08014388 	.word	0x08014388
 8001d00:	080143a8 	.word	0x080143a8
 8001d04:	00000000 	.word	0x00000000
 8001d08:	40d3f840 	.word	0x40d3f840
 8001d0c:	00000000 	.word	0x00000000
 8001d10:	40000000 	.word	0x40000000
 8001d14:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d18:	f010 f8c0 	bl	8011e9c <atan2>
 8001d1c:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 8001d20:	ed1f 1b06 	vldr	d1, [pc, #-24]	@ 8001d0c <Move_to_XYZ+0xb0c>
 8001d24:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d28:	f010 f8ba 	bl	8011ea0 <pow>
 8001d2c:	ec55 4b10 	vmov	r4, r5, d0
 8001d30:	ed1f 1b0a 	vldr	d1, [pc, #-40]	@ 8001d0c <Move_to_XYZ+0xb0c>
 8001d34:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d38:	f010 f8b2 	bl	8011ea0 <pow>
 8001d3c:	ec53 2b10 	vmov	r2, r3, d0
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fab6 	bl	80002b4 <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b17 	vmov	d7, r2, r3
 8001d50:	eeb0 0a47 	vmov.f32	s0, s14
 8001d54:	eef0 0a67 	vmov.f32	s1, s15
 8001d58:	f010 f912 	bl	8011f80 <sqrt>
 8001d5c:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
		X_target_forgatott = r*cos(alpha - 2*PI/3);
 8001d60:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	f7fe faa4 	bl	80002b4 <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4bd5      	ldr	r3, [pc, #852]	@ (80020d0 <Move_to_XYZ+0xed0>)
 8001d7a:	f7fe fd7b 	bl	8000874 <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d86:	f7fe fa93 	bl	80002b0 <__aeabi_dsub>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	ec43 2b17 	vmov	d7, r2, r3
 8001d92:	eeb0 0a47 	vmov.f32	s0, s14
 8001d96:	eef0 0a67 	vmov.f32	s1, s15
 8001d9a:	f010 f91d 	bl	8011fd8 <cos>
 8001d9e:	ec53 2b10 	vmov	r2, r3, d0
 8001da2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001da6:	f7fe fc3b 	bl	8000620 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		Y_target_forgatott = r*sin(alpha - 2*PI/3);
 8001db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	f7fe fa7b 	bl	80002b4 <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4bc1      	ldr	r3, [pc, #772]	@ (80020d0 <Move_to_XYZ+0xed0>)
 8001dcc:	f7fe fd52 	bl	8000874 <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001dd8:	f7fe fa6a 	bl	80002b0 <__aeabi_dsub>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b17 	vmov	d7, r2, r3
 8001de4:	eeb0 0a47 	vmov.f32	s0, s14
 8001de8:	eef0 0a67 	vmov.f32	s1, s15
 8001dec:	f010 f948 	bl	8012080 <sin>
 8001df0:	ec53 2b10 	vmov	r2, r3, d0
 8001df4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001df8:	f7fe fc12 	bl	8000620 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		sprintf(tx_buff, " X_target_forgatott: %f \r\n", X_target_forgatott);
 8001e04:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001e08:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001e0c:	49b1      	ldr	r1, [pc, #708]	@ (80020d4 <Move_to_XYZ+0xed4>)
 8001e0e:	f00c fc6d 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001e12:	4bb1      	ldr	r3, [pc, #708]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 fe05 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " Y_target_forgatott: %f \r\n", Y_target_forgatott);
 8001e22:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001e26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8001e2a:	49ac      	ldr	r1, [pc, #688]	@ (80020dc <Move_to_XYZ+0xedc>)
 8001e2c:	f00c fc5e 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001e30:	4ba9      	ldr	r3, [pc, #676]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fdf6 	bl	8003a2c <UART_Out>
		sprintf(tx_buff, " \r\n %f \r\n",X_target_forgatott);
		for(uint8_t j=0;tx_buff[j];j++) HAL_UART_Transmit(&huart1, &tx_buff[j], 1, 1000);
		sprintf(tx_buff, " \r\n %f \r\n",Y_target_forgatott);
		for(uint8_t j=0;tx_buff[j];j++) HAL_UART_Transmit(&huart1, &tx_buff[j], 1, 1000);*/

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001e40:	ed9f 1b9b 	vldr	d1, [pc, #620]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001e44:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8001e48:	f010 f82a 	bl	8011ea0 <pow>
 8001e4c:	ec53 2b10 	vmov	r2, r3, d0
 8001e50:	a199      	add	r1, pc, #612	@ (adr r1, 80020b8 <Move_to_XYZ+0xeb8>)
 8001e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e56:	f7fe fa2b 	bl	80002b0 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	f010 f889 	bl	8011f80 <sqrt>
 8001e6e:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
		d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b9a      	ldr	r3, [pc, #616]	@ (80020e0 <Move_to_XYZ+0xee0>)
 8001e78:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001e7c:	f7fe fa1a 	bl	80002b4 <__adddf3>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	4996      	ldr	r1, [pc, #600]	@ (80020e4 <Move_to_XYZ+0xee4>)
 8001e8a:	f7fe fa11 	bl	80002b0 <__aeabi_dsub>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b17 	vmov	d7, r2, r3
 8001e96:	ed9f 1b86 	vldr	d1, [pc, #536]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	f00f fffd 	bl	8011ea0 <pow>
 8001ea6:	ec55 4b10 	vmov	r4, r5, d0
 8001eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eae:	a184      	add	r1, pc, #528	@ (adr r1, 80020c0 <Move_to_XYZ+0xec0>)
 8001eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eb4:	f7fe f9fc 	bl	80002b0 <__aeabi_dsub>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	ec43 2b17 	vmov	d7, r2, r3
 8001ec0:	ed9f 1b7b 	vldr	d1, [pc, #492]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec8:	eef0 0a67 	vmov.f32	s1, s15
 8001ecc:	f00f ffe8 	bl	8011ea0 <pow>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe f9ec 	bl	80002b4 <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b17 	vmov	d7, r2, r3
 8001ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee8:	eef0 0a67 	vmov.f32	s1, s15
 8001eec:	f010 f848 	bl	8011f80 <sqrt>
 8001ef0:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001ef4:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001ef8:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8001efc:	f00f ffd0 	bl	8011ea0 <pow>
 8001f00:	ec53 2b10 	vmov	r2, r3, d0
 8001f04:	a170      	add	r1, pc, #448	@ (adr r1, 80020c8 <Move_to_XYZ+0xec8>)
 8001f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f0a:	f7fe f9d1 	bl	80002b0 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	ed9f 1b66 	vldr	d1, [pc, #408]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001f1a:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8001f1e:	f00f ffbf 	bl	8011ea0 <pow>
 8001f22:	ec53 2b10 	vmov	r2, r3, d0
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f9c3 	bl	80002b4 <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f7fe f9b9 	bl	80002b4 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe fc93 	bl	8000874 <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001f56:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 80020b0 <Move_to_XYZ+0xeb0>
 8001f5a:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8001f5e:	f00f ff9f 	bl	8011ea0 <pow>
 8001f62:	ec53 2b10 	vmov	r2, r3, d0
 8001f66:	a158      	add	r1, pc, #352	@ (adr r1, 80020c8 <Move_to_XYZ+0xec8>)
 8001f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f6c:	f7fe f9a0 	bl	80002b0 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b17 	vmov	d7, r2, r3
 8001f78:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7c:	eef0 0a67 	vmov.f32	s1, s15
 8001f80:	f00f fffe 	bl	8011f80 <sqrt>
 8001f84:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98

		sprintf(tx_buff, " also_arm_lenght_XZ: %f \r\n", also_arm_lenght_XZ);
 8001f88:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001f8c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001f90:	4955      	ldr	r1, [pc, #340]	@ (80020e8 <Move_to_XYZ+0xee8>)
 8001f92:	f00c fbab 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001f96:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 fd43 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " d: %f \r\n", d);
 8001fa6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001faa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001fae:	494f      	ldr	r1, [pc, #316]	@ (80020ec <Move_to_XYZ+0xeec>)
 8001fb0:	f00c fb9c 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001fb4:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fd34 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " l: %f \r\n", l);
 8001fc4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001fc8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001fcc:	4948      	ldr	r1, [pc, #288]	@ (80020f0 <Move_to_XYZ+0xef0>)
 8001fce:	f00c fb8d 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fd25 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " h: %f \r\n", h);
 8001fe2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001fe6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001fea:	4942      	ldr	r1, [pc, #264]	@ (80020f4 <Move_to_XYZ+0xef4>)
 8001fec:	f00c fb7e 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <Move_to_XYZ+0xed8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fd16 	bl	8003a2c <UART_Out>

		Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <Move_to_XYZ+0xee0>)
 8002006:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800200a:	f7fe f953 	bl	80002b4 <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b32      	ldr	r3, [pc, #200]	@ (80020e4 <Move_to_XYZ+0xee4>)
 800201c:	f7fe f948 	bl	80002b0 <__aeabi_dsub>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800202c:	f7fe faf8 	bl	8000620 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800203c:	f7fe fc1a 	bl	8000874 <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	a31d      	add	r3, pc, #116	@ (adr r3, 80020c0 <Move_to_XYZ+0xec0>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002052:	f7fe f92d 	bl	80002b0 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002062:	f7fe fadd 	bl	8000620 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002072:	f7fe fbff 	bl	8000874 <__aeabi_ddiv>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe f919 	bl	80002b4 <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <Move_to_XYZ+0xee4>)
 8002090:	f7fe f910 	bl	80002b4 <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800209c:	a308      	add	r3, pc, #32	@ (adr r3, 80020c0 <Move_to_XYZ+0xec0>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020a6:	f7fe f903 	bl	80002b0 <__aeabi_dsub>
 80020aa:	e025      	b.n	80020f8 <Move_to_XYZ+0xef8>
 80020ac:	f3af 8000 	nop.w
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40000000 	.word	0x40000000
 80020b8:	00000000 	.word	0x00000000
 80020bc:	40fa9640 	.word	0x40fa9640
 80020c0:	00000000 	.word	0x00000000
 80020c4:	4079a000 	.word	0x4079a000
 80020c8:	00000000 	.word	0x00000000
 80020cc:	40d3f840 	.word	0x40d3f840
 80020d0:	40080000 	.word	0x40080000
 80020d4:	080142e8 	.word	0x080142e8
 80020d8:	2003ae68 	.word	0x2003ae68
 80020dc:	08014304 	.word	0x08014304
 80020e0:	40418000 	.word	0x40418000
 80020e4:	40440000 	.word	0x40440000
 80020e8:	08014320 	.word	0x08014320
 80020ec:	0801433c 	.word	0x0801433c
 80020f0:	08014348 	.word	0x08014348
 80020f4:	08014354 	.word	0x08014354
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002104:	f7fe fbb6 	bl	8000874 <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4614      	mov	r4, r2
 800210e:	461d      	mov	r5, r3
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <Move_to_XYZ+0x10b8>)
 8002116:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800211a:	f7fe f8cb 	bl	80002b4 <__adddf3>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800212a:	f7fe fa79 	bl	8000620 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8bd 	bl	80002b4 <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b5d      	ldr	r3, [pc, #372]	@ (80022bc <Move_to_XYZ+0x10bc>)
 8002148:	f7fe f8b2 	bl	80002b0 <__aeabi_dsub>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002158:	f7fe fa62 	bl	8000620 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002168:	f7fe fb84 	bl	8000874 <__aeabi_ddiv>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	a34c      	add	r3, pc, #304	@ (adr r3, 80022a8 <Move_to_XYZ+0x10a8>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe f89b 	bl	80002b4 <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8002186:	a348      	add	r3, pc, #288	@ (adr r3, 80022a8 <Move_to_XYZ+0x10a8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002190:	f7fe f88e 	bl	80002b0 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ec43 2b18 	vmov	d8, r2, r3
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b46      	ldr	r3, [pc, #280]	@ (80022bc <Move_to_XYZ+0x10bc>)
 80021a2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80021a6:	f7fe f883 	bl	80002b0 <__aeabi_dsub>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	ec43 2b17 	vmov	d7, r2, r3
 80021b2:	eeb0 1a47 	vmov.f32	s2, s14
 80021b6:	eef0 1a67 	vmov.f32	s3, s15
 80021ba:	eeb0 0a48 	vmov.f32	s0, s16
 80021be:	eef0 0a68 	vmov.f32	s1, s17
 80021c2:	f00f fe6b 	bl	8011e9c <atan2>
 80021c6:	ec51 0b10 	vmov	r0, r1, d0
 80021ca:	a339      	add	r3, pc, #228	@ (adr r3, 80022b0 <Move_to_XYZ+0x10b0>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa26 	bl	8000620 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	461d      	mov	r5, r3
 80021dc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	f7fe f866 	bl	80002b4 <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe fb40 	bl	8000874 <__aeabi_ddiv>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

		sprintf(tx_buff, " Arm_joint_X: %f \r\n", Arm_joint_X);
 80021fc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002200:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002204:	492e      	ldr	r1, [pc, #184]	@ (80022c0 <Move_to_XYZ+0x10c0>)
 8002206:	f00c fa71 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 800220a:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <Move_to_XYZ+0x10c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fc09 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " Arm_joint_Z: %f \r\n", Arm_joint_Z);
 800221a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800221e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002222:	4929      	ldr	r1, [pc, #164]	@ (80022c8 <Move_to_XYZ+0x10c8>)
 8002224:	f00c fa62 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8002228:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <Move_to_XYZ+0x10c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f001 fbfa 	bl	8003a2c <UART_Out>
			sprintf(tx_buff, " Theta0: %f \r\n", Theta0);
 8002238:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800223c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002240:	4922      	ldr	r1, [pc, #136]	@ (80022cc <Move_to_XYZ+0x10cc>)
 8002242:	f00c fa53 	bl	800e6ec <siprintf>
			UART_Out(huart1, tx_buff);
 8002246:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <Move_to_XYZ+0x10c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fbeb 	bl	8003a2c <UART_Out>

	move (Theta0,Theta1,Theta2,tim1, Channel1, tim2, Channel2, tim3, Channel3);
 8002256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800225a:	f7fe fc91 	bl	8000b80 <__aeabi_d2iz>
 800225e:	4604      	mov	r4, r0
 8002260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002264:	f7fe fc8c 	bl	8000b80 <__aeabi_d2iz>
 8002268:	4605      	mov	r5, r0
 800226a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800226e:	f7fe fc87 	bl	8000b80 <__aeabi_d2iz>
 8002272:	4602      	mov	r2, r0
 8002274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002278:	9304      	str	r3, [sp, #16]
 800227a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800227e:	9303      	str	r3, [sp, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4629      	mov	r1, r5
 8002290:	4620      	mov	r0, r4
 8002292:	f001 fd99 	bl	8003dc8 <move>
}
 8002296:	bf00      	nop
 8002298:	37d0      	adds	r7, #208	@ 0xd0
 800229a:	46bd      	mov	sp, r7
 800229c:	ecbd 8b02 	vpop	{d8}
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	00000000 	.word	0x00000000
 80022ac:	4079a000 	.word	0x4079a000
 80022b0:	00000000 	.word	0x00000000
 80022b4:	40e38800 	.word	0x40e38800
 80022b8:	40418000 	.word	0x40418000
 80022bc:	40440000 	.word	0x40440000
 80022c0:	08014360 	.word	0x08014360
 80022c4:	2003ae68 	.word	0x2003ae68
 80022c8:	08014374 	.word	0x08014374
 80022cc:	08014388 	.word	0x08014388

080022d0 <Zero_XYZ>:

void  Zero_XYZ(double X_target, double Y_target, double Z_target)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	ed2d 8b02 	vpush	{d8}
 80022d6:	b0a2      	sub	sp, #136	@ 0x88
 80022d8:	af00      	add	r7, sp, #0
 80022da:	ed87 0b04 	vstr	d0, [r7, #16]
 80022de:	ed87 1b02 	vstr	d1, [r7, #8]
 80022e2:	ed87 2b00 	vstr	d2, [r7]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 80022e6:	a3ef      	add	r3, pc, #956	@ (adr r3, 80026a4 <Zero_XYZ+0x3d4>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	//-----------------------------Motor 0
	X_target_forgatott = X_target;
 80022f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022f4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = Y_target;
 80022f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022fc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002300:	ed9f 1bdd 	vldr	d1, [pc, #884]	@ 8002678 <Zero_XYZ+0x3a8>
 8002304:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002308:	f00f fdca 	bl	8011ea0 <pow>
 800230c:	ec53 2b10 	vmov	r2, r3, d0
 8002310:	a1e6      	add	r1, pc, #920	@ (adr r1, 80026ac <Zero_XYZ+0x3dc>)
 8002312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002316:	f7fd ffcb 	bl	80002b0 <__aeabi_dsub>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	ec43 2b17 	vmov	d7, r2, r3
 8002322:	eeb0 0a47 	vmov.f32	s0, s14
 8002326:	eef0 0a67 	vmov.f32	s1, s15
 800232a:	f00f fe29 	bl	8011f80 <sqrt>
 800232e:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4bd8      	ldr	r3, [pc, #864]	@ (8002698 <Zero_XYZ+0x3c8>)
 8002338:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800233c:	f7fd ffba 	bl	80002b4 <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	49d4      	ldr	r1, [pc, #848]	@ (800269c <Zero_XYZ+0x3cc>)
 800234a:	f7fd ffb1 	bl	80002b0 <__aeabi_dsub>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	ec43 2b17 	vmov	d7, r2, r3
 8002356:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 8002678 <Zero_XYZ+0x3a8>
 800235a:	eeb0 0a47 	vmov.f32	s0, s14
 800235e:	eef0 0a67 	vmov.f32	s1, s15
 8002362:	f00f fd9d 	bl	8011ea0 <pow>
 8002366:	ec55 4b10 	vmov	r4, r5, d0
 800236a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800236e:	a1c4      	add	r1, pc, #784	@ (adr r1, 8002680 <Zero_XYZ+0x3b0>)
 8002370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002374:	f7fd ff9c 	bl	80002b0 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	ec43 2b17 	vmov	d7, r2, r3
 8002380:	ed9f 1bbd 	vldr	d1, [pc, #756]	@ 8002678 <Zero_XYZ+0x3a8>
 8002384:	eeb0 0a47 	vmov.f32	s0, s14
 8002388:	eef0 0a67 	vmov.f32	s1, s15
 800238c:	f00f fd88 	bl	8011ea0 <pow>
 8002390:	ec53 2b10 	vmov	r2, r3, d0
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff8c 	bl	80002b4 <__adddf3>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	ec43 2b17 	vmov	d7, r2, r3
 80023a4:	eeb0 0a47 	vmov.f32	s0, s14
 80023a8:	eef0 0a67 	vmov.f32	s1, s15
 80023ac:	f00f fde8 	bl	8011f80 <sqrt>
 80023b0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 80023b4:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8002678 <Zero_XYZ+0x3a8>
 80023b8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80023bc:	f00f fd70 	bl	8011ea0 <pow>
 80023c0:	ec53 2b10 	vmov	r2, r3, d0
 80023c4:	a1b0      	add	r1, pc, #704	@ (adr r1, 8002688 <Zero_XYZ+0x3b8>)
 80023c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023ca:	f7fd ff71 	bl	80002b0 <__aeabi_dsub>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4614      	mov	r4, r2
 80023d4:	461d      	mov	r5, r3
 80023d6:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 8002678 <Zero_XYZ+0x3a8>
 80023da:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80023de:	f00f fd5f 	bl	8011ea0 <pow>
 80023e2:	ec53 2b10 	vmov	r2, r3, d0
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff63 	bl	80002b4 <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	461d      	mov	r5, r3
 80023f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	f7fd ff59 	bl	80002b4 <__adddf3>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fe fa33 	bl	8000874 <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8002416:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 8002678 <Zero_XYZ+0x3a8>
 800241a:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 800241e:	f00f fd3f 	bl	8011ea0 <pow>
 8002422:	ec53 2b10 	vmov	r2, r3, d0
 8002426:	a198      	add	r1, pc, #608	@ (adr r1, 8002688 <Zero_XYZ+0x3b8>)
 8002428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800242c:	f7fd ff40 	bl	80002b0 <__aeabi_dsub>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b17 	vmov	d7, r2, r3
 8002438:	eeb0 0a47 	vmov.f32	s0, s14
 800243c:	eef0 0a67 	vmov.f32	s1, s15
 8002440:	f00f fd9e 	bl	8011f80 <sqrt>
 8002444:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b92      	ldr	r3, [pc, #584]	@ (8002698 <Zero_XYZ+0x3c8>)
 800244e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002452:	f7fd ff2f 	bl	80002b4 <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <Zero_XYZ+0x3cc>)
 8002464:	f7fd ff24 	bl	80002b0 <__aeabi_dsub>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002474:	f7fe f8d4 	bl	8000620 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002484:	f7fe f9f6 	bl	8000874 <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	a37b      	add	r3, pc, #492	@ (adr r3, 8002680 <Zero_XYZ+0x3b0>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800249a:	f7fd ff09 	bl	80002b0 <__aeabi_dsub>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024aa:	f7fe f8b9 	bl	8000620 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024ba:	f7fe f9db 	bl	8000874 <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fd fef5 	bl	80002b4 <__adddf3>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b71      	ldr	r3, [pc, #452]	@ (800269c <Zero_XYZ+0x3cc>)
 80024d8:	f7fd feec 	bl	80002b4 <__adddf3>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 80024e4:	a366      	add	r3, pc, #408	@ (adr r3, 8002680 <Zero_XYZ+0x3b0>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024ee:	f7fd fedf 	bl	80002b0 <__aeabi_dsub>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024fe:	f7fe f9b9 	bl	8000874 <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4614      	mov	r4, r2
 8002508:	461d      	mov	r5, r3
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b62      	ldr	r3, [pc, #392]	@ (8002698 <Zero_XYZ+0x3c8>)
 8002510:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002514:	f7fd fece 	bl	80002b4 <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002524:	f7fe f87c 	bl	8000620 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fd fec0 	bl	80002b4 <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b56      	ldr	r3, [pc, #344]	@ (800269c <Zero_XYZ+0x3cc>)
 8002542:	f7fd feb5 	bl	80002b0 <__aeabi_dsub>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002552:	f7fe f865 	bl	8000620 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002562:	f7fe f987 	bl	8000874 <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	a344      	add	r3, pc, #272	@ (adr r3, 8002680 <Zero_XYZ+0x3b0>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fd fe9e 	bl	80002b4 <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8002580:	a33f      	add	r3, pc, #252	@ (adr r3, 8002680 <Zero_XYZ+0x3b0>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800258a:	f7fd fe91 	bl	80002b0 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	ec43 2b18 	vmov	d8, r2, r3
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <Zero_XYZ+0x3cc>)
 800259c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025a0:	f7fd fe86 	bl	80002b0 <__aeabi_dsub>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	ec43 2b17 	vmov	d7, r2, r3
 80025ac:	eeb0 1a47 	vmov.f32	s2, s14
 80025b0:	eef0 1a67 	vmov.f32	s3, s15
 80025b4:	eeb0 0a48 	vmov.f32	s0, s16
 80025b8:	eef0 0a68 	vmov.f32	s1, s17
 80025bc:	f00f fc6e 	bl	8011e9c <atan2>
 80025c0:	ec51 0b10 	vmov	r0, r1, d0
 80025c4:	a332      	add	r3, pc, #200	@ (adr r3, 8002690 <Zero_XYZ+0x3c0>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f829 	bl	8000620 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4614      	mov	r4, r2
 80025d4:	461d      	mov	r5, r3
 80025d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	f7fd fe69 	bl	80002b4 <__adddf3>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fe f943 	bl	8000874 <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	//-----------------------------Motor 1
	alpha = atan2(Y_target,X_target);
 80025f6:	ed97 1b04 	vldr	d1, [r7, #16]
 80025fa:	ed97 0b02 	vldr	d0, [r7, #8]
 80025fe:	f00f fc4d 	bl	8011e9c <atan2>
 8002602:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 8002606:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002678 <Zero_XYZ+0x3a8>
 800260a:	ed97 0b04 	vldr	d0, [r7, #16]
 800260e:	f00f fc47 	bl	8011ea0 <pow>
 8002612:	ec55 4b10 	vmov	r4, r5, d0
 8002616:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8002678 <Zero_XYZ+0x3a8>
 800261a:	ed97 0b02 	vldr	d0, [r7, #8]
 800261e:	f00f fc3f 	bl	8011ea0 <pow>
 8002622:	ec53 2b10 	vmov	r2, r3, d0
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	f7fd fe43 	bl	80002b4 <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b17 	vmov	d7, r2, r3
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	eef0 0a67 	vmov.f32	s1, s15
 800263e:	f00f fc9f 	bl	8011f80 <sqrt>
 8002642:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	X_target_forgatott = r*cos(alpha + 2*PI/3);
 8002646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	f7fd fe31 	bl	80002b4 <__adddf3>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <Zero_XYZ+0x3d0>)
 8002660:	f7fe f908 	bl	8000874 <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002670:	e020      	b.n	80026b4 <Zero_XYZ+0x3e4>
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	00000000 	.word	0x00000000
 800267c:	40000000 	.word	0x40000000
 8002680:	00000000 	.word	0x00000000
 8002684:	4079a000 	.word	0x4079a000
 8002688:	00000000 	.word	0x00000000
 800268c:	40d3f840 	.word	0x40d3f840
 8002690:	00000000 	.word	0x00000000
 8002694:	40e38800 	.word	0x40e38800
 8002698:	40418000 	.word	0x40418000
 800269c:	40440000 	.word	0x40440000
 80026a0:	40080000 	.word	0x40080000
 80026a4:	54442d18 	.word	0x54442d18
 80026a8:	400921fb 	.word	0x400921fb
 80026ac:	00000000 	.word	0x00000000
 80026b0:	40fa9640 	.word	0x40fa9640
 80026b4:	f7fd fdfe 	bl	80002b4 <__adddf3>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	ec43 2b17 	vmov	d7, r2, r3
 80026c0:	eeb0 0a47 	vmov.f32	s0, s14
 80026c4:	eef0 0a67 	vmov.f32	s1, s15
 80026c8:	f00f fc86 	bl	8011fd8 <cos>
 80026cc:	ec53 2b10 	vmov	r2, r3, d0
 80026d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026d4:	f7fd ffa4 	bl	8000620 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = r*sin(alpha + 2*PI/3);
 80026e0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	f7fd fde4 	bl	80002b4 <__adddf3>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4bdb      	ldr	r3, [pc, #876]	@ (8002a68 <Zero_XYZ+0x798>)
 80026fa:	f7fe f8bb 	bl	8000874 <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800270a:	f7fd fdd3 	bl	80002b4 <__adddf3>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	ec43 2b17 	vmov	d7, r2, r3
 8002716:	eeb0 0a47 	vmov.f32	s0, s14
 800271a:	eef0 0a67 	vmov.f32	s1, s15
 800271e:	f00f fcaf 	bl	8012080 <sin>
 8002722:	ec53 2b10 	vmov	r2, r3, d0
 8002726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800272a:	f7fd ff79 	bl	8000620 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002736:	ed9f 1bc2 	vldr	d1, [pc, #776]	@ 8002a40 <Zero_XYZ+0x770>
 800273a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800273e:	f00f fbaf 	bl	8011ea0 <pow>
 8002742:	ec53 2b10 	vmov	r2, r3, d0
 8002746:	a1c0      	add	r1, pc, #768	@ (adr r1, 8002a48 <Zero_XYZ+0x778>)
 8002748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800274c:	f7fd fdb0 	bl	80002b0 <__aeabi_dsub>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b17 	vmov	d7, r2, r3
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	f00f fc0e 	bl	8011f80 <sqrt>
 8002764:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4bbf      	ldr	r3, [pc, #764]	@ (8002a6c <Zero_XYZ+0x79c>)
 800276e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002772:	f7fd fd9f 	bl	80002b4 <__adddf3>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	f04f 0000 	mov.w	r0, #0
 800277e:	49bc      	ldr	r1, [pc, #752]	@ (8002a70 <Zero_XYZ+0x7a0>)
 8002780:	f7fd fd96 	bl	80002b0 <__aeabi_dsub>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	ec43 2b17 	vmov	d7, r2, r3
 800278c:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 8002a40 <Zero_XYZ+0x770>
 8002790:	eeb0 0a47 	vmov.f32	s0, s14
 8002794:	eef0 0a67 	vmov.f32	s1, s15
 8002798:	f00f fb82 	bl	8011ea0 <pow>
 800279c:	ec55 4b10 	vmov	r4, r5, d0
 80027a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027a4:	a1aa      	add	r1, pc, #680	@ (adr r1, 8002a50 <Zero_XYZ+0x780>)
 80027a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027aa:	f7fd fd81 	bl	80002b0 <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ec43 2b17 	vmov	d7, r2, r3
 80027b6:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 8002a40 <Zero_XYZ+0x770>
 80027ba:	eeb0 0a47 	vmov.f32	s0, s14
 80027be:	eef0 0a67 	vmov.f32	s1, s15
 80027c2:	f00f fb6d 	bl	8011ea0 <pow>
 80027c6:	ec53 2b10 	vmov	r2, r3, d0
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fd fd71 	bl	80002b4 <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	ec43 2b17 	vmov	d7, r2, r3
 80027da:	eeb0 0a47 	vmov.f32	s0, s14
 80027de:	eef0 0a67 	vmov.f32	s1, s15
 80027e2:	f00f fbcd 	bl	8011f80 <sqrt>
 80027e6:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 80027ea:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8002a40 <Zero_XYZ+0x770>
 80027ee:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80027f2:	f00f fb55 	bl	8011ea0 <pow>
 80027f6:	ec53 2b10 	vmov	r2, r3, d0
 80027fa:	a197      	add	r1, pc, #604	@ (adr r1, 8002a58 <Zero_XYZ+0x788>)
 80027fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002800:	f7fd fd56 	bl	80002b0 <__aeabi_dsub>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8002a40 <Zero_XYZ+0x770>
 8002810:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002814:	f00f fb44 	bl	8011ea0 <pow>
 8002818:	ec53 2b10 	vmov	r2, r3, d0
 800281c:	4620      	mov	r0, r4
 800281e:	4629      	mov	r1, r5
 8002820:	f7fd fd48 	bl	80002b4 <__adddf3>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	f7fd fd3e 	bl	80002b4 <__adddf3>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fe f818 	bl	8000874 <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 800284c:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8002a40 <Zero_XYZ+0x770>
 8002850:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8002854:	f00f fb24 	bl	8011ea0 <pow>
 8002858:	ec53 2b10 	vmov	r2, r3, d0
 800285c:	a17e      	add	r1, pc, #504	@ (adr r1, 8002a58 <Zero_XYZ+0x788>)
 800285e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002862:	f7fd fd25 	bl	80002b0 <__aeabi_dsub>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	ec43 2b17 	vmov	d7, r2, r3
 800286e:	eeb0 0a47 	vmov.f32	s0, s14
 8002872:	eef0 0a67 	vmov.f32	s1, s15
 8002876:	f00f fb83 	bl	8011f80 <sqrt>
 800287a:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b7a      	ldr	r3, [pc, #488]	@ (8002a6c <Zero_XYZ+0x79c>)
 8002884:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002888:	f7fd fd14 	bl	80002b4 <__adddf3>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <Zero_XYZ+0x7a0>)
 800289a:	f7fd fd09 	bl	80002b0 <__aeabi_dsub>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028aa:	f7fd feb9 	bl	8000620 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80028ba:	f7fd ffdb 	bl	8000874 <__aeabi_ddiv>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
 80028c6:	a362      	add	r3, pc, #392	@ (adr r3, 8002a50 <Zero_XYZ+0x780>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d0:	f7fd fcee 	bl	80002b0 <__aeabi_dsub>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028e0:	f7fd fe9e 	bl	8000620 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80028f0:	f7fd ffc0 	bl	8000874 <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fcda 	bl	80002b4 <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	4b58      	ldr	r3, [pc, #352]	@ (8002a70 <Zero_XYZ+0x7a0>)
 800290e:	f7fd fcd1 	bl	80002b4 <__adddf3>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800291a:	a34d      	add	r3, pc, #308	@ (adr r3, 8002a50 <Zero_XYZ+0x780>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002924:	f7fd fcc4 	bl	80002b0 <__aeabi_dsub>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002934:	f7fd ff9e 	bl	8000874 <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <Zero_XYZ+0x79c>)
 8002946:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800294a:	f7fd fcb3 	bl	80002b4 <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800295a:	f7fd fe61 	bl	8000620 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fca5 	bl	80002b4 <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b3e      	ldr	r3, [pc, #248]	@ (8002a70 <Zero_XYZ+0x7a0>)
 8002978:	f7fd fc9a 	bl	80002b0 <__aeabi_dsub>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002988:	f7fd fe4a 	bl	8000620 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002998:	f7fd ff6c 	bl	8000874 <__aeabi_ddiv>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	a32a      	add	r3, pc, #168	@ (adr r3, 8002a50 <Zero_XYZ+0x780>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fc83 	bl	80002b4 <__adddf3>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80029b6:	a326      	add	r3, pc, #152	@ (adr r3, 8002a50 <Zero_XYZ+0x780>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029c0:	f7fd fc76 	bl	80002b0 <__aeabi_dsub>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	ec43 2b18 	vmov	d8, r2, r3
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <Zero_XYZ+0x7a0>)
 80029d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80029d6:	f7fd fc6b 	bl	80002b0 <__aeabi_dsub>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	ec43 2b17 	vmov	d7, r2, r3
 80029e2:	eeb0 1a47 	vmov.f32	s2, s14
 80029e6:	eef0 1a67 	vmov.f32	s3, s15
 80029ea:	eeb0 0a48 	vmov.f32	s0, s16
 80029ee:	eef0 0a68 	vmov.f32	s1, s17
 80029f2:	f00f fa53 	bl	8011e9c <atan2>
 80029f6:	ec51 0b10 	vmov	r0, r1, d0
 80029fa:	a319      	add	r3, pc, #100	@ (adr r3, 8002a60 <Zero_XYZ+0x790>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe0e 	bl	8000620 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	f7fd fc4e 	bl	80002b4 <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd ff28 	bl	8000874 <__aeabi_ddiv>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//-----------------------------Motor 2
		alpha = atan2(Y_target,X_target);
 8002a2c:	ed97 1b04 	vldr	d1, [r7, #16]
 8002a30:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a34:	f00f fa32 	bl	8011e9c <atan2>
 8002a38:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002a3c:	e01a      	b.n	8002a74 <Zero_XYZ+0x7a4>
 8002a3e:	bf00      	nop
 8002a40:	00000000 	.word	0x00000000
 8002a44:	40000000 	.word	0x40000000
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	40fa9640 	.word	0x40fa9640
 8002a50:	00000000 	.word	0x00000000
 8002a54:	4079a000 	.word	0x4079a000
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40d3f840 	.word	0x40d3f840
 8002a60:	00000000 	.word	0x00000000
 8002a64:	40e38800 	.word	0x40e38800
 8002a68:	40080000 	.word	0x40080000
 8002a6c:	40418000 	.word	0x40418000
 8002a70:	40440000 	.word	0x40440000
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 8002a74:	ed9f 1bda 	vldr	d1, [pc, #872]	@ 8002de0 <Zero_XYZ+0xb10>
 8002a78:	ed97 0b04 	vldr	d0, [r7, #16]
 8002a7c:	f00f fa10 	bl	8011ea0 <pow>
 8002a80:	ec55 4b10 	vmov	r4, r5, d0
 8002a84:	ed9f 1bd6 	vldr	d1, [pc, #856]	@ 8002de0 <Zero_XYZ+0xb10>
 8002a88:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a8c:	f00f fa08 	bl	8011ea0 <pow>
 8002a90:	ec53 2b10 	vmov	r2, r3, d0
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fc0c 	bl	80002b4 <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	ec43 2b17 	vmov	d7, r2, r3
 8002aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa8:	eef0 0a67 	vmov.f32	s1, s15
 8002aac:	f00f fa68 	bl	8011f80 <sqrt>
 8002ab0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
		X_target_forgatott = r*cos(alpha - 2*PI/3);
 8002ab4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	f7fd fbfa 	bl	80002b4 <__adddf3>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4bcc      	ldr	r3, [pc, #816]	@ (8002e00 <Zero_XYZ+0xb30>)
 8002ace:	f7fd fed1 	bl	8000874 <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ada:	f7fd fbe9 	bl	80002b0 <__aeabi_dsub>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	ec43 2b17 	vmov	d7, r2, r3
 8002ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aea:	eef0 0a67 	vmov.f32	s1, s15
 8002aee:	f00f fa73 	bl	8011fd8 <cos>
 8002af2:	ec53 2b10 	vmov	r2, r3, d0
 8002af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002afa:	f7fd fd91 	bl	8000620 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		Y_target_forgatott = r*sin(alpha - 2*PI/3);
 8002b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	f7fd fbd1 	bl	80002b4 <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4bb8      	ldr	r3, [pc, #736]	@ (8002e00 <Zero_XYZ+0xb30>)
 8002b20:	f7fd fea8 	bl	8000874 <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b2c:	f7fd fbc0 	bl	80002b0 <__aeabi_dsub>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	ec43 2b17 	vmov	d7, r2, r3
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	f00f fa9e 	bl	8012080 <sin>
 8002b44:	ec53 2b10 	vmov	r2, r3, d0
 8002b48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b4c:	f7fd fd68 	bl	8000620 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002b58:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8002de0 <Zero_XYZ+0xb10>
 8002b5c:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002b60:	f00f f99e 	bl	8011ea0 <pow>
 8002b64:	ec53 2b10 	vmov	r2, r3, d0
 8002b68:	a19f      	add	r1, pc, #636	@ (adr r1, 8002de8 <Zero_XYZ+0xb18>)
 8002b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b6e:	f7fd fb9f 	bl	80002b0 <__aeabi_dsub>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	ec43 2b17 	vmov	d7, r2, r3
 8002b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b7e:	eef0 0a67 	vmov.f32	s1, s15
 8002b82:	f00f f9fd 	bl	8011f80 <sqrt>
 8002b86:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
		d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8002e04 <Zero_XYZ+0xb34>)
 8002b90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b94:	f7fd fb8e 	bl	80002b4 <__adddf3>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	4999      	ldr	r1, [pc, #612]	@ (8002e08 <Zero_XYZ+0xb38>)
 8002ba2:	f7fd fb85 	bl	80002b0 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	ec43 2b17 	vmov	d7, r2, r3
 8002bae:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8002de0 <Zero_XYZ+0xb10>
 8002bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb6:	eef0 0a67 	vmov.f32	s1, s15
 8002bba:	f00f f971 	bl	8011ea0 <pow>
 8002bbe:	ec55 4b10 	vmov	r4, r5, d0
 8002bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc6:	a18a      	add	r1, pc, #552	@ (adr r1, 8002df0 <Zero_XYZ+0xb20>)
 8002bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bcc:	f7fd fb70 	bl	80002b0 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	ec43 2b17 	vmov	d7, r2, r3
 8002bd8:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 8002de0 <Zero_XYZ+0xb10>
 8002bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8002be0:	eef0 0a67 	vmov.f32	s1, s15
 8002be4:	f00f f95c 	bl	8011ea0 <pow>
 8002be8:	ec53 2b10 	vmov	r2, r3, d0
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fb60 	bl	80002b4 <__adddf3>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	ec43 2b17 	vmov	d7, r2, r3
 8002bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002c00:	eef0 0a67 	vmov.f32	s1, s15
 8002c04:	f00f f9bc 	bl	8011f80 <sqrt>
 8002c08:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8002c0c:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002de0 <Zero_XYZ+0xb10>
 8002c10:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8002c14:	f00f f944 	bl	8011ea0 <pow>
 8002c18:	ec53 2b10 	vmov	r2, r3, d0
 8002c1c:	a176      	add	r1, pc, #472	@ (adr r1, 8002df8 <Zero_XYZ+0xb28>)
 8002c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c22:	f7fd fb45 	bl	80002b0 <__aeabi_dsub>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	461d      	mov	r5, r3
 8002c2e:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8002de0 <Zero_XYZ+0xb10>
 8002c32:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002c36:	f00f f933 	bl	8011ea0 <pow>
 8002c3a:	ec53 2b10 	vmov	r2, r3, d0
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd fb37 	bl	80002b4 <__adddf3>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	461d      	mov	r5, r3
 8002c4e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	f7fd fb2d 	bl	80002b4 <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	f7fd fe07 	bl	8000874 <__aeabi_ddiv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8002c6e:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 8002de0 <Zero_XYZ+0xb10>
 8002c72:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8002c76:	f00f f913 	bl	8011ea0 <pow>
 8002c7a:	ec53 2b10 	vmov	r2, r3, d0
 8002c7e:	a15e      	add	r1, pc, #376	@ (adr r1, 8002df8 <Zero_XYZ+0xb28>)
 8002c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c84:	f7fd fb14 	bl	80002b0 <__aeabi_dsub>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ec43 2b17 	vmov	d7, r2, r3
 8002c90:	eeb0 0a47 	vmov.f32	s0, s14
 8002c94:	eef0 0a67 	vmov.f32	s1, s15
 8002c98:	f00f f972 	bl	8011f80 <sqrt>
 8002c9c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

		Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <Zero_XYZ+0xb34>)
 8002ca6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002caa:	f7fd fb03 	bl	80002b4 <__adddf3>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <Zero_XYZ+0xb38>)
 8002cbc:	f7fd faf8 	bl	80002b0 <__aeabi_dsub>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ccc:	f7fd fca8 	bl	8000620 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002cdc:	f7fd fdca 	bl	8000874 <__aeabi_ddiv>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	a341      	add	r3, pc, #260	@ (adr r3, 8002df0 <Zero_XYZ+0xb20>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cf2:	f7fd fadd 	bl	80002b0 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d02:	f7fd fc8d 	bl	8000620 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d12:	f7fd fdaf 	bl	8000874 <__aeabi_ddiv>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fac9 	bl	80002b4 <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <Zero_XYZ+0xb38>)
 8002d30:	f7fd fac0 	bl	80002b4 <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8002d3c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002df0 <Zero_XYZ+0xb20>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d46:	f7fd fab3 	bl	80002b0 <__aeabi_dsub>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d56:	f7fd fd8d 	bl	8000874 <__aeabi_ddiv>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4614      	mov	r4, r2
 8002d60:	461d      	mov	r5, r3
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <Zero_XYZ+0xb34>)
 8002d68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002d6c:	f7fd faa2 	bl	80002b4 <__adddf3>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d7c:	f7fd fc50 	bl	8000620 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4620      	mov	r0, r4
 8002d86:	4629      	mov	r1, r5
 8002d88:	f7fd fa94 	bl	80002b4 <__adddf3>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <Zero_XYZ+0xb38>)
 8002d9a:	f7fd fa89 	bl	80002b0 <__aeabi_dsub>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002daa:	f7fd fc39 	bl	8000620 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002dba:	f7fd fd5b 	bl	8000874 <__aeabi_ddiv>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002df0 <Zero_XYZ+0xb20>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fa72 	bl	80002b4 <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002dd8:	e018      	b.n	8002e0c <Zero_XYZ+0xb3c>
 8002dda:	bf00      	nop
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40000000 	.word	0x40000000
 8002de8:	00000000 	.word	0x00000000
 8002dec:	40fa9640 	.word	0x40fa9640
 8002df0:	00000000 	.word	0x00000000
 8002df4:	4079a000 	.word	0x4079a000
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40d3f840 	.word	0x40d3f840
 8002e00:	40080000 	.word	0x40080000
 8002e04:	40418000 	.word	0x40418000
 8002e08:	40440000 	.word	0x40440000

		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8002e0c:	a32f      	add	r3, pc, #188	@ (adr r3, 8002ecc <Zero_XYZ+0xbfc>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002e16:	f7fd fa4b 	bl	80002b0 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	ec43 2b18 	vmov	d8, r2, r3
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <Zero_XYZ+0xbf8>)
 8002e28:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002e2c:	f7fd fa40 	bl	80002b0 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	ec43 2b17 	vmov	d7, r2, r3
 8002e38:	eeb0 1a47 	vmov.f32	s2, s14
 8002e3c:	eef0 1a67 	vmov.f32	s3, s15
 8002e40:	eeb0 0a48 	vmov.f32	s0, s16
 8002e44:	eef0 0a68 	vmov.f32	s1, s17
 8002e48:	f00f f828 	bl	8011e9c <atan2>
 8002e4c:	ec51 0b10 	vmov	r0, r1, d0
 8002e50:	a31b      	add	r3, pc, #108	@ (adr r3, 8002ec0 <Zero_XYZ+0xbf0>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fbe3 	bl	8000620 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4614      	mov	r4, r2
 8002e60:	461d      	mov	r5, r3
 8002e62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	f7fd fa23 	bl	80002b4 <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4620      	mov	r0, r4
 8002e74:	4629      	mov	r1, r5
 8002e76:	f7fd fcfd 	bl	8000874 <__aeabi_ddiv>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	Set_M_Poz_0(Theta0);
 8002e82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e86:	f7fd fea3 	bl	8000bd0 <__aeabi_d2uiz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 f90d 	bl	80040ac <Set_M_Poz_0>
	Set_M_Poz_1(Theta1);
 8002e92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e96:	f7fd fe9b 	bl	8000bd0 <__aeabi_d2uiz>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f915 	bl	80040cc <Set_M_Poz_1>
	Set_M_Poz_2(Theta2);
 8002ea2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ea6:	f7fd fe93 	bl	8000bd0 <__aeabi_d2uiz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f91d 	bl	80040ec <Set_M_Poz_2>
}
 8002eb2:	bf00      	nop
 8002eb4:	3788      	adds	r7, #136	@ 0x88
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	ecbd 8b02 	vpop	{d8}
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	40e38800 	.word	0x40e38800
 8002ec8:	40440000 	.word	0x40440000
 8002ecc:	00000000 	.word	0x00000000
 8002ed0:	4079a000 	.word	0x4079a000

08002ed4 <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b0f0      	sub	sp, #448	@ 0x1c0
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ede:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ee2:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 8002ee4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ee8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002eec:	4a1a      	ldr	r2, [pc, #104]	@ (8002f58 <Menu_UART_Start+0x84>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f00b fce9 	bl	800e8ce <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002f02:	e013      	b.n	8002f2c <Menu_UART_Start+0x58>
 8002f04:	f107 020c 	add.w	r2, r7, #12
 8002f08:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002f0c:	18d1      	adds	r1, r2, r3
 8002f0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f12:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 8002f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	6800      	ldr	r0, [r0, #0]
 8002f1e:	f009 fd8b 	bl	800ca38 <HAL_UART_Transmit>
 8002f22:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002f26:	3301      	adds	r3, #1
 8002f28:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002f2c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f30:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 8002f34:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e1      	bne.n	8002f04 <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 8002f40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f000 f807 	bl	8002f5c <Menu_UART_Update>
}
 8002f4e:	bf00      	nop
 8002f50:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	080143b8 	.word	0x080143b8

08002f5c <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <Menu_UART_Update+0x18>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000000 	.word	0x20000000

08002f78 <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b09e      	sub	sp, #120	@ 0x78
 8002f7c:	af06      	add	r7, sp, #24
 8002f7e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8002f80:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f8a:	2224      	movs	r2, #36	@ 0x24
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00b fc0f 	bl	800e7b2 <memset>
	int32_t poz0;
	int32_t poz1;
	int32_t poz2;

	uint8_t *Menu_Main[] = {
 8002f94:	4b76      	ldr	r3, [pc, #472]	@ (8003170 <Menu_UART_Main+0x1f8>)
 8002f96:	f107 0410 	add.w	r4, r7, #16
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Move to motor poz",
			"Move to XYZ poz",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	2206      	movs	r2, #6
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fcf1 	bl	8003998 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	81bb      	strh	r3, [r7, #12]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8002fba:	f107 010c 	add.w	r1, r7, #12
 8002fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f009 fdd5 	bl	800cb74 <HAL_UART_Receive>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 82a6 	bne.w	800351e <Menu_UART_Main+0x5a6>
		{
			switch (rx_buff[0])
 8002fd2:	7b3b      	ldrb	r3, [r7, #12]
 8002fd4:	3b30      	subs	r3, #48	@ 0x30
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	f200 82a3 	bhi.w	8003522 <Menu_UART_Main+0x5aa>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <Menu_UART_Main+0x6c>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	0800307b 	.word	0x0800307b
 8002fec:	080030f5 	.word	0x080030f5
 8002ff0:	08003199 	.word	0x08003199
 8002ff4:	080033a1 	.word	0x080033a1
 8002ff8:	0800350d 	.word	0x0800350d
 8002ffc:	08003515 	.word	0x08003515
			{
				case '0':
					sprintf(tx_buff, "\r\nf MAX was: %d\r\n",Get_f_MAX());
 8003000:	f001 f80c 	bl	800401c <Get_f_MAX>
 8003004:	4602      	mov	r2, r0
 8003006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800300a:	495a      	ldr	r1, [pc, #360]	@ (8003174 <Menu_UART_Main+0x1fc>)
 800300c:	4618      	mov	r0, r3
 800300e:	f00b fb6d 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003012:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fd07 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input f MAX\r\n");
 800301e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003022:	4a55      	ldr	r2, [pc, #340]	@ (8003178 <Menu_UART_Main+0x200>)
 8003024:	461c      	mov	r4, r3
 8003026:	4613      	mov	r3, r2
 8003028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800302a:	c407      	stmia	r4!, {r0, r1, r2}
 800302c:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 800302e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fcf9 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 800303a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800303e:	2214      	movs	r2, #20
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fd11 	bl	8003a6a <UART_In>
					Set_f_MAX(atoi(tx_buff));
 8003048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800304c:	4618      	mov	r0, r3
 800304e:	f00a fb94 	bl	800d77a <atoi>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	f000 ffb1 	bl	8003fbc <Set_f_MAX>
					sprintf(tx_buff, "New f MAX is: %d\r\n",Get_f_MAX());
 800305a:	f000 ffdf 	bl	800401c <Get_f_MAX>
 800305e:	4602      	mov	r2, r0
 8003060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003064:	4945      	ldr	r1, [pc, #276]	@ (800317c <Menu_UART_Main+0x204>)
 8003066:	4618      	mov	r0, r3
 8003068:	f00b fb40 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800306c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fcda 	bl	8003a2c <UART_Out>
					break;
 8003078:	e250      	b.n	800351c <Menu_UART_Main+0x5a4>
				case '1':
					sprintf(tx_buff, "\r\nf MIN was: %d\r\n",Get_f_MIN());
 800307a:	f000 ffdb 	bl	8004034 <Get_f_MIN>
 800307e:	4602      	mov	r2, r0
 8003080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003084:	493e      	ldr	r1, [pc, #248]	@ (8003180 <Menu_UART_Main+0x208>)
 8003086:	4618      	mov	r0, r3
 8003088:	f00b fb30 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800308c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fcca 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input f MIN\r\n");
 8003098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800309c:	4a39      	ldr	r2, [pc, #228]	@ (8003184 <Menu_UART_Main+0x20c>)
 800309e:	461c      	mov	r4, r3
 80030a0:	4613      	mov	r3, r2
 80030a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a4:	c407      	stmia	r4!, {r0, r1, r2}
 80030a6:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80030a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fcbc 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 80030b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030b8:	2214      	movs	r2, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fcd4 	bl	8003a6a <UART_In>
					Set_f_MIN(atoi(tx_buff));
 80030c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030c6:	4618      	mov	r0, r3
 80030c8:	f00a fb57 	bl	800d77a <atoi>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ff84 	bl	8003fdc <Set_f_MIN>
					sprintf(tx_buff, "New f MIN is: %d\r\n",Get_f_MIN());
 80030d4:	f000 ffae 	bl	8004034 <Get_f_MIN>
 80030d8:	4602      	mov	r2, r0
 80030da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030de:	492a      	ldr	r1, [pc, #168]	@ (8003188 <Menu_UART_Main+0x210>)
 80030e0:	4618      	mov	r0, r3
 80030e2:	f00b fb03 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80030e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fc9d 	bl	8003a2c <UART_Out>
					break;
 80030f2:	e213      	b.n	800351c <Menu_UART_Main+0x5a4>
				case '2':
					sprintf(tx_buff, "\r\na MAX was: %d\r\n",Get_a_MAX());
 80030f4:	f000 ffaa 	bl	800404c <Get_a_MAX>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030fe:	4923      	ldr	r1, [pc, #140]	@ (800318c <Menu_UART_Main+0x214>)
 8003100:	4618      	mov	r0, r3
 8003102:	f00b faf3 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc8d 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input a MAX\r\n");
 8003112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003116:	4a1e      	ldr	r2, [pc, #120]	@ (8003190 <Menu_UART_Main+0x218>)
 8003118:	461c      	mov	r4, r3
 800311a:	4613      	mov	r3, r2
 800311c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800311e:	c407      	stmia	r4!, {r0, r1, r2}
 8003120:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8003122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fc7f 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 800312e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003132:	2214      	movs	r2, #20
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fc97 	bl	8003a6a <UART_In>
					Set_a_MAX(atoi(tx_buff));
 800313c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003140:	4618      	mov	r0, r3
 8003142:	f00a fb1a 	bl	800d77a <atoi>
 8003146:	4603      	mov	r3, r0
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ff57 	bl	8003ffc <Set_a_MAX>
					sprintf(tx_buff, "New a MAX is: %d\r\n",Get_a_MAX());
 800314e:	f000 ff7d 	bl	800404c <Get_a_MAX>
 8003152:	4602      	mov	r2, r0
 8003154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003158:	490e      	ldr	r1, [pc, #56]	@ (8003194 <Menu_UART_Main+0x21c>)
 800315a:	4618      	mov	r0, r3
 800315c:	f00b fac6 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003160:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fc60 	bl	8003a2c <UART_Out>
					break;
 800316c:	e1d6      	b.n	800351c <Menu_UART_Main+0x5a4>
 800316e:	bf00      	nop
 8003170:	08014818 	.word	0x08014818
 8003174:	08014568 	.word	0x08014568
 8003178:	0801457c 	.word	0x0801457c
 800317c:	0801458c 	.word	0x0801458c
 8003180:	080145a0 	.word	0x080145a0
 8003184:	080145b4 	.word	0x080145b4
 8003188:	080145c4 	.word	0x080145c4
 800318c:	080145d8 	.word	0x080145d8
 8003190:	080145ec 	.word	0x080145ec
 8003194:	080145fc 	.word	0x080145fc
				case '3':
					sprintf(tx_buff, "\r\nMotor 0 poz was: %d\r\n",M_Poz_0());
 8003198:	f000 ff64 	bl	8004064 <M_Poz_0>
 800319c:	4602      	mov	r2, r0
 800319e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031a2:	4970      	ldr	r1, [pc, #448]	@ (8003364 <Menu_UART_Main+0x3ec>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f00b faa1 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80031aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fc3b 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input motor 0 poz\r\n");
 80031b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003368 <Menu_UART_Main+0x3f0>)
 80031bc:	461c      	mov	r4, r3
 80031be:	4615      	mov	r5, r2
 80031c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80031c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fc2c 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 80031d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031d8:	2214      	movs	r2, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fc44 	bl	8003a6a <UART_In>
					poz0 = atoi(tx_buff);
 80031e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00a fac7 	bl	800d77a <atoi>
 80031ec:	65f8      	str	r0, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New motor 0 poz will be: %d\r\n",poz0);
 80031ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80031f4:	495d      	ldr	r1, [pc, #372]	@ (800336c <Menu_UART_Main+0x3f4>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f00b fa78 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80031fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fc12 	bl	8003a2c <UART_Out>

					sprintf(tx_buff, "\r\nMotor 1 poz was: %d\r\n",M_Poz_1());
 8003208:	f000 ff38 	bl	800407c <M_Poz_1>
 800320c:	4602      	mov	r2, r0
 800320e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003212:	4957      	ldr	r1, [pc, #348]	@ (8003370 <Menu_UART_Main+0x3f8>)
 8003214:	4618      	mov	r0, r3
 8003216:	f00b fa69 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800321a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fc03 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input motor 1 poz\r\n");
 8003226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800322a:	4a52      	ldr	r2, [pc, #328]	@ (8003374 <Menu_UART_Main+0x3fc>)
 800322c:	461c      	mov	r4, r3
 800322e:	4615      	mov	r5, r2
 8003230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8003238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fbf4 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8003244:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003248:	2214      	movs	r2, #20
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fc0c 	bl	8003a6a <UART_In>
					poz1 = atoi(tx_buff);
 8003252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003256:	4618      	mov	r0, r3
 8003258:	f00a fa8f 	bl	800d77a <atoi>
 800325c:	65b8      	str	r0, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New motor 1 poz will be: %d\r\n",poz1);
 800325e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003264:	4944      	ldr	r1, [pc, #272]	@ (8003378 <Menu_UART_Main+0x400>)
 8003266:	4618      	mov	r0, r3
 8003268:	f00b fa40 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800326c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fbda 	bl	8003a2c <UART_Out>

					sprintf(tx_buff, "\r\nMotor 2 poz was: %d\r\n",M_Poz_2());
 8003278:	f000 ff0c 	bl	8004094 <M_Poz_2>
 800327c:	4602      	mov	r2, r0
 800327e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003282:	493e      	ldr	r1, [pc, #248]	@ (800337c <Menu_UART_Main+0x404>)
 8003284:	4618      	mov	r0, r3
 8003286:	f00b fa31 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800328a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fbcb 	bl	8003a2c <UART_Out>
					strcpy(tx_buff, "Input motor 2 poz\r\n");
 8003296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800329a:	4a39      	ldr	r2, [pc, #228]	@ (8003380 <Menu_UART_Main+0x408>)
 800329c:	461c      	mov	r4, r3
 800329e:	4615      	mov	r5, r2
 80032a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80032a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fbbc 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 80032b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032b8:	2214      	movs	r2, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fbd4 	bl	8003a6a <UART_In>
					poz2 = atoi(tx_buff);
 80032c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00a fa57 	bl	800d77a <atoi>
 80032cc:	6578      	str	r0, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New motor 2 poz will be: %d\r\n",poz2);
 80032ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032d4:	492b      	ldr	r1, [pc, #172]	@ (8003384 <Menu_UART_Main+0x40c>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f00b fa08 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80032dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fba2 	bl	8003a2c <UART_Out>

					move(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 80032e8:	230c      	movs	r3, #12
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <Menu_UART_Main+0x410>)
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	2304      	movs	r3, #4
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <Menu_UART_Main+0x414>)
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2300      	movs	r3, #0
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <Menu_UART_Main+0x418>)
 80032fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003300:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003302:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003304:	f000 fd60 	bl	8003dc8 <move>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 8003308:	f000 feac 	bl	8004064 <M_Poz_0>
 800330c:	4602      	mov	r2, r0
 800330e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003312:	4920      	ldr	r1, [pc, #128]	@ (8003394 <Menu_UART_Main+0x41c>)
 8003314:	4618      	mov	r0, r3
 8003316:	f00b f9e9 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 800331a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fb83 	bl	8003a2c <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 8003326:	f000 fea9 	bl	800407c <M_Poz_1>
 800332a:	4602      	mov	r2, r0
 800332c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003330:	4919      	ldr	r1, [pc, #100]	@ (8003398 <Menu_UART_Main+0x420>)
 8003332:	4618      	mov	r0, r3
 8003334:	f00b f9da 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003338:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fb74 	bl	8003a2c <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 8003344:	f000 fea6 	bl	8004094 <M_Poz_2>
 8003348:	4602      	mov	r2, r0
 800334a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800334e:	4913      	ldr	r1, [pc, #76]	@ (800339c <Menu_UART_Main+0x424>)
 8003350:	4618      	mov	r0, r3
 8003352:	f00b f9cb 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fb65 	bl	8003a2c <UART_Out>
					break;
 8003362:	e0db      	b.n	800351c <Menu_UART_Main+0x5a4>
 8003364:	08014610 	.word	0x08014610
 8003368:	08014628 	.word	0x08014628
 800336c:	0801463c 	.word	0x0801463c
 8003370:	0801465c 	.word	0x0801465c
 8003374:	08014674 	.word	0x08014674
 8003378:	08014688 	.word	0x08014688
 800337c:	080146a8 	.word	0x080146a8
 8003380:	080146c0 	.word	0x080146c0
 8003384:	080146d4 	.word	0x080146d4
 8003388:	2003acf0 	.word	0x2003acf0
 800338c:	2003aca4 	.word	0x2003aca4
 8003390:	2003ad3c 	.word	0x2003ad3c
 8003394:	080146f4 	.word	0x080146f4
 8003398:	0801470c 	.word	0x0801470c
 800339c:	08014724 	.word	0x08014724
				case '4':
					strcpy(tx_buff, "Input X poz\r\n");
 80033a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a4:	4a61      	ldr	r2, [pc, #388]	@ (800352c <Menu_UART_Main+0x5b4>)
 80033a6:	461c      	mov	r4, r3
 80033a8:	4613      	mov	r3, r2
 80033aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ac:	c407      	stmia	r4!, {r0, r1, r2}
 80033ae:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 80033b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb38 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 80033bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033c0:	2214      	movs	r2, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fb50 	bl	8003a6a <UART_In>
					poz0 = atoi(tx_buff);
 80033ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033ce:	4618      	mov	r0, r3
 80033d0:	f00a f9d3 	bl	800d77a <atoi>
 80033d4:	65f8      	str	r0, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New X poz will be: %d\r\n",poz0);
 80033d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033dc:	4954      	ldr	r1, [pc, #336]	@ (8003530 <Menu_UART_Main+0x5b8>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f00b f984 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80033e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb1e 	bl	8003a2c <UART_Out>

					strcpy(tx_buff, "Input Y poz\r\n");
 80033f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003534 <Menu_UART_Main+0x5bc>)
 80033f6:	461c      	mov	r4, r3
 80033f8:	4613      	mov	r3, r2
 80033fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033fc:	c407      	stmia	r4!, {r0, r1, r2}
 80033fe:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8003400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fb10 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 800340c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003410:	2214      	movs	r2, #20
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb28 	bl	8003a6a <UART_In>
					poz1 = atoi(tx_buff);
 800341a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800341e:	4618      	mov	r0, r3
 8003420:	f00a f9ab 	bl	800d77a <atoi>
 8003424:	65b8      	str	r0, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New Y poz will be: %d\r\n",poz1);
 8003426:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800342a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800342c:	4942      	ldr	r1, [pc, #264]	@ (8003538 <Menu_UART_Main+0x5c0>)
 800342e:	4618      	mov	r0, r3
 8003430:	f00b f95c 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003434:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 faf6 	bl	8003a2c <UART_Out>

					strcpy(tx_buff, "Input Z poz\r\n");
 8003440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003444:	4a3d      	ldr	r2, [pc, #244]	@ (800353c <Menu_UART_Main+0x5c4>)
 8003446:	461c      	mov	r4, r3
 8003448:	4613      	mov	r3, r2
 800344a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800344c:	c407      	stmia	r4!, {r0, r1, r2}
 800344e:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8003450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fae8 	bl	8003a2c <UART_Out>
					UART_In(huart, tx_buff, 20);
 800345c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003460:	2214      	movs	r2, #20
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb00 	bl	8003a6a <UART_In>
					poz2 = atoi(tx_buff);
 800346a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800346e:	4618      	mov	r0, r3
 8003470:	f00a f983 	bl	800d77a <atoi>
 8003474:	6578      	str	r0, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New Z poz will be: %d\r\n",poz2);
 8003476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800347a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800347c:	4930      	ldr	r1, [pc, #192]	@ (8003540 <Menu_UART_Main+0x5c8>)
 800347e:	4618      	mov	r0, r3
 8003480:	f00b f934 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 8003484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 face 	bl	8003a2c <UART_Out>

					Move_to_XYZ(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8003490:	230c      	movs	r3, #12
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <Menu_UART_Main+0x5cc>)
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	2304      	movs	r3, #4
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <Menu_UART_Main+0x5d0>)
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2300      	movs	r3, #0
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <Menu_UART_Main+0x5d4>)
 80034a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80034aa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80034ac:	f7fd fea8 	bl	8001200 <Move_to_XYZ>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 80034b0:	f000 fdd8 	bl	8004064 <M_Poz_0>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ba:	4925      	ldr	r1, [pc, #148]	@ (8003550 <Menu_UART_Main+0x5d8>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f00b f915 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80034c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 faaf 	bl	8003a2c <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 80034ce:	f000 fdd5 	bl	800407c <M_Poz_1>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d8:	491e      	ldr	r1, [pc, #120]	@ (8003554 <Menu_UART_Main+0x5dc>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f00b f906 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80034e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 faa0 	bl	8003a2c <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 80034ec:	f000 fdd2 	bl	8004094 <M_Poz_2>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034f6:	4918      	ldr	r1, [pc, #96]	@ (8003558 <Menu_UART_Main+0x5e0>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00b f8f7 	bl	800e6ec <siprintf>
					UART_Out(huart, tx_buff);
 80034fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa91 	bl	8003a2c <UART_Out>
					break;
 800350a:	e007      	b.n	800351c <Menu_UART_Main+0x5a4>
				case '5':
					Menu_State = Menu_UART_Relay;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <Menu_UART_Main+0x5e4>)
 800350e:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <Menu_UART_Main+0x5e8>)
 8003510:	601a      	str	r2, [r3, #0]
					break;
 8003512:	e003      	b.n	800351c <Menu_UART_Main+0x5a4>
				case '6':
					Menu_State = Menu_UART_Sensors;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <Menu_UART_Main+0x5e4>)
 8003516:	4a13      	ldr	r2, [pc, #76]	@ (8003564 <Menu_UART_Main+0x5ec>)
 8003518:	601a      	str	r2, [r3, #0]
					break;
 800351a:	bf00      	nop
			}
			break;
 800351c:	e001      	b.n	8003522 <Menu_UART_Main+0x5aa>
		} else {
			__NOP();
 800351e:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003520:	e54b      	b.n	8002fba <Menu_UART_Main+0x42>
			break;
 8003522:	bf00      	nop
		}
	}
}
 8003524:	bf00      	nop
 8003526:	3760      	adds	r7, #96	@ 0x60
 8003528:	46bd      	mov	sp, r7
 800352a:	bdb0      	pop	{r4, r5, r7, pc}
 800352c:	0801473c 	.word	0x0801473c
 8003530:	0801474c 	.word	0x0801474c
 8003534:	08014764 	.word	0x08014764
 8003538:	08014774 	.word	0x08014774
 800353c:	0801478c 	.word	0x0801478c
 8003540:	0801479c 	.word	0x0801479c
 8003544:	2003acf0 	.word	0x2003acf0
 8003548:	2003aca4 	.word	0x2003aca4
 800354c:	2003ad3c 	.word	0x2003ad3c
 8003550:	080146f4 	.word	0x080146f4
 8003554:	0801470c 	.word	0x0801470c
 8003558:	08014724 	.word	0x08014724
 800355c:	20000000 	.word	0x20000000
 8003560:	080037b5 	.word	0x080037b5
 8003564:	08003569 	.word	0x08003569

08003568 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b094      	sub	sp, #80	@ 0x50
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8003570:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800357a:	2224      	movs	r2, #36	@ 0x24
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f00b f917 	bl	800e7b2 <memset>

	uint8_t *Menu_Sensor[] = {
 8003584:	4b7e      	ldr	r3, [pc, #504]	@ (8003780 <Menu_UART_Sensors+0x218>)
 8003586:	f107 040c 	add.w	r4, r7, #12
 800358a:	461d      	mov	r5, r3
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 8003598:	f107 030c 	add.w	r3, r7, #12
 800359c:	2207      	movs	r2, #7
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f9f9 	bl	8003998 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 80035a6:	2300      	movs	r3, #0
 80035a8:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80035aa:	f107 0108 	add.w	r1, r7, #8
 80035ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b2:	2201      	movs	r2, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f009 fadd 	bl	800cb74 <HAL_UART_Receive>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 80d4 	bne.w	800376a <Menu_UART_Sensors+0x202>
			{
				switch (rx_buff[0])
 80035c2:	7a3b      	ldrb	r3, [r7, #8]
 80035c4:	3b30      	subs	r3, #48	@ 0x30
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	f200 80d1 	bhi.w	800376e <Menu_UART_Sensors+0x206>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <Menu_UART_Sensors+0x6c>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035f1 	.word	0x080035f1
 80035d8:	08003641 	.word	0x08003641
 80035dc:	0800366d 	.word	0x0800366d
 80035e0:	080036bd 	.word	0x080036bd
 80035e4:	080036e9 	.word	0x080036e9
 80035e8:	08003737 	.word	0x08003737
 80035ec:	08003761 	.word	0x08003761
				{
					case '0':
						sprintf(tx_buff, "\r\nHALL 0 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF));
 80035f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f4:	4963      	ldr	r1, [pc, #396]	@ (8003784 <Menu_UART_Sensors+0x21c>)
 80035f6:	4864      	ldr	r0, [pc, #400]	@ (8003788 <Menu_UART_Sensors+0x220>)
 80035f8:	f7fd fd71 	bl	80010de <Hall_Sensor_Read_Angle>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ffa2 	bl	800054c <__aeabi_i2d>
 8003608:	a35b      	add	r3, pc, #364	@ (adr r3, 8003778 <Menu_UART_Sensors+0x210>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fd f931 	bl	8000874 <__aeabi_ddiv>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <Menu_UART_Sensors+0x224>)
 8003620:	f7fc fffe 	bl	8000620 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800362c:	4958      	ldr	r1, [pc, #352]	@ (8003790 <Menu_UART_Sensors+0x228>)
 800362e:	f00b f85d 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 8003632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f9f7 	bl	8003a2c <UART_Out>
						break;
 800363e:	e093      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '1':
						sprintf(tx_buff, "\r\nHALL 0 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS0_PORT, Hall_SS0_PIN));
 8003640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003644:	494f      	ldr	r1, [pc, #316]	@ (8003784 <Menu_UART_Sensors+0x21c>)
 8003646:	4850      	ldr	r0, [pc, #320]	@ (8003788 <Menu_UART_Sensors+0x220>)
 8003648:	f7fd fcf4 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 800364c:	4603      	mov	r3, r0
 800364e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003656:	494f      	ldr	r1, [pc, #316]	@ (8003794 <Menu_UART_Sensors+0x22c>)
 8003658:	4618      	mov	r0, r3
 800365a:	f00b f847 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 800365e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f9e1 	bl	8003a2c <UART_Out>
						break;
 800366a:	e07d      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '2':
						sprintf(tx_buff, "\r\nHALL 1 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN))/0x3FFF));
 800366c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003670:	4949      	ldr	r1, [pc, #292]	@ (8003798 <Menu_UART_Sensors+0x230>)
 8003672:	4845      	ldr	r0, [pc, #276]	@ (8003788 <Menu_UART_Sensors+0x220>)
 8003674:	f7fd fd33 	bl	80010de <Hall_Sensor_Read_Angle>
 8003678:	4603      	mov	r3, r0
 800367a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff64 	bl	800054c <__aeabi_i2d>
 8003684:	a33c      	add	r3, pc, #240	@ (adr r3, 8003778 <Menu_UART_Sensors+0x210>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fd f8f3 	bl	8000874 <__aeabi_ddiv>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	4b3c      	ldr	r3, [pc, #240]	@ (800378c <Menu_UART_Sensors+0x224>)
 800369c:	f7fc ffc0 	bl	8000620 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80036a8:	493c      	ldr	r1, [pc, #240]	@ (800379c <Menu_UART_Sensors+0x234>)
 80036aa:	f00b f81f 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 80036ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f9b9 	bl	8003a2c <UART_Out>
						break;
 80036ba:	e055      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '3':
						sprintf(tx_buff, "\r\nHALL 1 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN));
 80036bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c0:	4935      	ldr	r1, [pc, #212]	@ (8003798 <Menu_UART_Sensors+0x230>)
 80036c2:	4831      	ldr	r0, [pc, #196]	@ (8003788 <Menu_UART_Sensors+0x220>)
 80036c4:	f7fd fcb6 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036d2:	4933      	ldr	r1, [pc, #204]	@ (80037a0 <Menu_UART_Sensors+0x238>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f00b f809 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 80036da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f9a3 	bl	8003a2c <UART_Out>
						break;
 80036e6:	e03f      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '4':
						sprintf(tx_buff, "\r\nHALL 2 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS2_PORT, Hall_SS2_PIN))/0x3FFF));
 80036e8:	2220      	movs	r2, #32
 80036ea:	492b      	ldr	r1, [pc, #172]	@ (8003798 <Menu_UART_Sensors+0x230>)
 80036ec:	4826      	ldr	r0, [pc, #152]	@ (8003788 <Menu_UART_Sensors+0x220>)
 80036ee:	f7fd fcf6 	bl	80010de <Hall_Sensor_Read_Angle>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc ff27 	bl	800054c <__aeabi_i2d>
 80036fe:	a31e      	add	r3, pc, #120	@ (adr r3, 8003778 <Menu_UART_Sensors+0x210>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fd f8b6 	bl	8000874 <__aeabi_ddiv>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <Menu_UART_Sensors+0x224>)
 8003716:	f7fc ff83 	bl	8000620 <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003722:	4920      	ldr	r1, [pc, #128]	@ (80037a4 <Menu_UART_Sensors+0x23c>)
 8003724:	f00a ffe2 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 8003728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f97c 	bl	8003a2c <UART_Out>
						break;
 8003734:	e018      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '5':
						sprintf(tx_buff, "\r\nHALL 2 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS2_PORT, Hall_SS2_PIN));
 8003736:	2220      	movs	r2, #32
 8003738:	4917      	ldr	r1, [pc, #92]	@ (8003798 <Menu_UART_Sensors+0x230>)
 800373a:	4813      	ldr	r0, [pc, #76]	@ (8003788 <Menu_UART_Sensors+0x220>)
 800373c:	f7fd fc7a 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 8003740:	4603      	mov	r3, r0
 8003742:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800374a:	4917      	ldr	r1, [pc, #92]	@ (80037a8 <Menu_UART_Sensors+0x240>)
 800374c:	4618      	mov	r0, r3
 800374e:	f00a ffcd 	bl	800e6ec <siprintf>
						UART_Out(huart, tx_buff);
 8003752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f967 	bl	8003a2c <UART_Out>
						break;
 800375e:	e003      	b.n	8003768 <Menu_UART_Sensors+0x200>
					case '6':
						Menu_State = Menu_UART_Main;
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <Menu_UART_Sensors+0x244>)
 8003762:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <Menu_UART_Sensors+0x248>)
 8003764:	601a      	str	r2, [r3, #0]
						break;
 8003766:	bf00      	nop
				}
				break;
 8003768:	e001      	b.n	800376e <Menu_UART_Sensors+0x206>
			} else {
				__NOP();
 800376a:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800376c:	e71d      	b.n	80035aa <Menu_UART_Sensors+0x42>
				break;
 800376e:	bf00      	nop
			}
		}
}
 8003770:	bf00      	nop
 8003772:	3750      	adds	r7, #80	@ 0x50
 8003774:	46bd      	mov	sp, r7
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	00000000 	.word	0x00000000
 800377c:	40cfff80 	.word	0x40cfff80
 8003780:	08014930 	.word	0x08014930
 8003784:	42020000 	.word	0x42020000
 8003788:	2003ac14 	.word	0x2003ac14
 800378c:	40768000 	.word	0x40768000
 8003790:	08014834 	.word	0x08014834
 8003794:	0801484c 	.word	0x0801484c
 8003798:	42020400 	.word	0x42020400
 800379c:	08014868 	.word	0x08014868
 80037a0:	08014880 	.word	0x08014880
 80037a4:	0801489c 	.word	0x0801489c
 80037a8:	080148b4 	.word	0x080148b4
 80037ac:	20000000 	.word	0x20000000
 80037b0:	08002f79 	.word	0x08002f79

080037b4 <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b092      	sub	sp, #72	@ 0x48
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80037bc:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00a fff1 	bl	800e7b2 <memset>

	uint8_t *Menu_Relay[] = {
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <Menu_UART_Relay+0x1b8>)
 80037d2:	f107 040c 	add.w	r4, r7, #12
 80037d6:	461d      	mov	r5, r3
 80037d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	2205      	movs	r2, #5
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8d5 	bl	8003998 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 80037ee:	2300      	movs	r3, #0
 80037f0:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80037f2:	f107 0108 	add.w	r1, r7, #8
 80037f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037fa:	2201      	movs	r2, #1
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f009 f9b9 	bl	800cb74 <HAL_UART_Receive>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 80aa 	bne.w	800395e <Menu_UART_Relay+0x1aa>
			{
				switch (rx_buff[0])
 800380a:	7a3b      	ldrb	r3, [r7, #8]
 800380c:	3b30      	subs	r3, #48	@ 0x30
 800380e:	2b04      	cmp	r3, #4
 8003810:	f200 80a7 	bhi.w	8003962 <Menu_UART_Relay+0x1ae>
 8003814:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <Menu_UART_Relay+0x68>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003831 	.word	0x08003831
 8003820:	08003877 	.word	0x08003877
 8003824:	080038c3 	.word	0x080038c3
 8003828:	08003909 	.word	0x08003909
 800382c:	08003955 	.word	0x08003955
				{
					case '0':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was set\r\n");
 8003830:	f7fd fcc2 	bl	80011b8 <Relay_0_Read>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <Menu_UART_Relay+0x9a>
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	4a4c      	ldr	r2, [pc, #304]	@ (8003970 <Menu_UART_Relay+0x1bc>)
 8003840:	461c      	mov	r4, r3
 8003842:	4615      	mov	r5, r2
 8003844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	6023      	str	r3, [r4, #0]
 800384c:	e00a      	b.n	8003864 <Menu_UART_Relay+0xb0>
						else strcpy(tx_buff, "\r\nRelay 0 was already set\r\n");
 800384e:	f107 0320 	add.w	r3, r7, #32
 8003852:	4a48      	ldr	r2, [pc, #288]	@ (8003974 <Menu_UART_Relay+0x1c0>)
 8003854:	461c      	mov	r4, r3
 8003856:	4615      	mov	r5, r2
 8003858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800385a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800385c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8de 	bl	8003a2c <UART_Out>
						Relay_0_Set();
 8003870:	f7fd fc8a 	bl	8001188 <Relay_0_Set>
						break;
 8003874:	e072      	b.n	800395c <Menu_UART_Relay+0x1a8>
					case '1':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was already reset\r\n");
 8003876:	f7fd fc9f 	bl	80011b8 <Relay_0_Read>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <Menu_UART_Relay+0xe4>
 8003880:	f107 0320 	add.w	r3, r7, #32
 8003884:	4a3c      	ldr	r2, [pc, #240]	@ (8003978 <Menu_UART_Relay+0x1c4>)
 8003886:	461c      	mov	r4, r3
 8003888:	4615      	mov	r5, r2
 800388a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800388e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003892:	c407      	stmia	r4!, {r0, r1, r2}
 8003894:	8023      	strh	r3, [r4, #0]
 8003896:	e00b      	b.n	80038b0 <Menu_UART_Relay+0xfc>
						else strcpy(tx_buff, "\r\nRelay 0 was reset\r\n");
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	4a37      	ldr	r2, [pc, #220]	@ (800397c <Menu_UART_Relay+0x1c8>)
 800389e:	461c      	mov	r4, r3
 80038a0:	4615      	mov	r5, r2
 80038a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038aa:	6020      	str	r0, [r4, #0]
 80038ac:	3404      	adds	r4, #4
 80038ae:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 80038b0:	f107 0320 	add.w	r3, r7, #32
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8b8 	bl	8003a2c <UART_Out>
						Relay_0_Reset();
 80038bc:	f7fd fc70 	bl	80011a0 <Relay_0_Reset>
						break;
 80038c0:	e04c      	b.n	800395c <Menu_UART_Relay+0x1a8>
					case '2':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was set\r\n");
 80038c2:	f7fd fc79 	bl	80011b8 <Relay_0_Read>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <Menu_UART_Relay+0x12c>
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <Menu_UART_Relay+0x1cc>)
 80038d2:	461c      	mov	r4, r3
 80038d4:	4615      	mov	r5, r2
 80038d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	e00a      	b.n	80038f6 <Menu_UART_Relay+0x142>
						else strcpy(tx_buff, "\r\nRelay 1 was already set\r\n");
 80038e0:	f107 0320 	add.w	r3, r7, #32
 80038e4:	4a27      	ldr	r2, [pc, #156]	@ (8003984 <Menu_UART_Relay+0x1d0>)
 80038e6:	461c      	mov	r4, r3
 80038e8:	4615      	mov	r5, r2
 80038ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f895 	bl	8003a2c <UART_Out>
						Relay_1_Set();
 8003902:	f7fd fc65 	bl	80011d0 <Relay_1_Set>
						break;
 8003906:	e029      	b.n	800395c <Menu_UART_Relay+0x1a8>
					case '3':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was already reset\r\n");
 8003908:	f7fd fc56 	bl	80011b8 <Relay_0_Read>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <Menu_UART_Relay+0x176>
 8003912:	f107 0320 	add.w	r3, r7, #32
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <Menu_UART_Relay+0x1d4>)
 8003918:	461c      	mov	r4, r3
 800391a:	4615      	mov	r5, r2
 800391c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003920:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003924:	c407      	stmia	r4!, {r0, r1, r2}
 8003926:	8023      	strh	r3, [r4, #0]
 8003928:	e00b      	b.n	8003942 <Menu_UART_Relay+0x18e>
						else strcpy(tx_buff, "\r\nRelay 1 was reset\r\n");
 800392a:	f107 0320 	add.w	r3, r7, #32
 800392e:	4a17      	ldr	r2, [pc, #92]	@ (800398c <Menu_UART_Relay+0x1d8>)
 8003930:	461c      	mov	r4, r3
 8003932:	4615      	mov	r5, r2
 8003934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003938:	e895 0003 	ldmia.w	r5, {r0, r1}
 800393c:	6020      	str	r0, [r4, #0]
 800393e:	3404      	adds	r4, #4
 8003940:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8003942:	f107 0320 	add.w	r3, r7, #32
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f86f 	bl	8003a2c <UART_Out>
						Relay_1_Reset();
 800394e:	f7fd fc4b 	bl	80011e8 <Relay_1_Reset>
						break;
 8003952:	e003      	b.n	800395c <Menu_UART_Relay+0x1a8>
					case '4':
						Menu_State = Menu_UART_Main;
 8003954:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <Menu_UART_Relay+0x1dc>)
 8003956:	4a0f      	ldr	r2, [pc, #60]	@ (8003994 <Menu_UART_Relay+0x1e0>)
 8003958:	601a      	str	r2, [r3, #0]
						break;
 800395a:	bf00      	nop
				}
				break;
 800395c:	e001      	b.n	8003962 <Menu_UART_Relay+0x1ae>
			} else {
				__NOP();
 800395e:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003960:	e747      	b.n	80037f2 <Menu_UART_Relay+0x3e>
				break;
 8003962:	bf00      	nop
			}
		}
}
 8003964:	bf00      	nop
 8003966:	3748      	adds	r7, #72	@ 0x48
 8003968:	46bd      	mov	sp, r7
 800396a:	bdb0      	pop	{r4, r5, r7, pc}
 800396c:	08014a54 	.word	0x08014a54
 8003970:	0801494c 	.word	0x0801494c
 8003974:	08014960 	.word	0x08014960
 8003978:	0801497c 	.word	0x0801497c
 800397c:	0801499c 	.word	0x0801499c
 8003980:	080149b4 	.word	0x080149b4
 8003984:	080149c8 	.word	0x080149c8
 8003988:	080149e4 	.word	0x080149e4
 800398c:	08014a04 	.word	0x08014a04
 8003990:	20000000 	.word	0x20000000
 8003994:	08002f79 	.word	0x08002f79

08003998 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b090      	sub	sp, #64	@ 0x40
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80039a4:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	f107 0318 	add.w	r3, r7, #24
 80039ae:	2224      	movs	r2, #36	@ 0x24
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00a fefd 	bl	800e7b2 <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 80039b8:	f107 0114 	add.w	r1, r7, #20
 80039bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039c0:	2204      	movs	r2, #4
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f009 f838 	bl	800ca38 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 80039c8:	f107 0114 	add.w	r1, r7, #20
 80039cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039d0:	2204      	movs	r2, #4
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f009 f830 	bl	800ca38 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80039de:	e018      	b.n	8003a12 <Menu_UART_Out+0x7a>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 80039e0:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80039e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f107 0014 	add.w	r0, r7, #20
 80039f4:	460a      	mov	r2, r1
 80039f6:	490c      	ldr	r1, [pc, #48]	@ (8003a28 <Menu_UART_Out+0x90>)
 80039f8:	f00a fe78 	bl	800e6ec <siprintf>
		UART_Out(huart, tx_buff);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4619      	mov	r1, r3
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f812 	bl	8003a2c <UART_Out>
	for(uint8_t i=0;i<size;i++)
 8003a08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003a12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d8e1      	bhi.n	80039e0 <Menu_UART_Out+0x48>
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3740      	adds	r7, #64	@ 0x40
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08014a68 	.word	0x08014a68

08003a2c <UART_Out>:

void UART_Out(UART_HandleTypeDef *huart, uint8_t* p)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	for(uint8_t j=0;p[j];j++) HAL_UART_Transmit(huart, (p+j), 1, 1000);
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e00b      	b.n	8003a54 <UART_Out+0x28>
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	18d1      	adds	r1, r2, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a46:	2201      	movs	r2, #1
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f008 fff5 	bl	800ca38 <HAL_UART_Transmit>
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3301      	adds	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ed      	bne.n	8003a3c <UART_Out+0x10>
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_In>:

void UART_In(UART_HandleTypeDef *huart, uint8_t* p, uint8_t len)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	4613      	mov	r3, r2
 8003a76:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff =0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buff[10]={"\r\n"};
 8003a7c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	f107 0318 	add.w	r3, r7, #24
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	809a      	strh	r2, [r3, #4]
	uint8_t i=0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8003a90:	e020      	b.n	8003ad4 <UART_In+0x6a>
	{
		while(1)
		{
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003a92:	f107 011e 	add.w	r1, r7, #30
 8003a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f009 f869 	bl	800cb74 <HAL_UART_Receive>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <UART_In+0x42>
			{
				break;
			} else {
				__NOP();
 8003aa8:	bf00      	nop
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003aaa:	e7f2      	b.n	8003a92 <UART_In+0x28>
				break;
 8003aac:	bf00      	nop
			}
		}
		if(rx_buff=='\r') break;
 8003aae:	7fbb      	ldrb	r3, [r7, #30]
 8003ab0:	2b0d      	cmp	r3, #13
 8003ab2:	d014      	beq.n	8003ade <UART_In+0x74>
		*(p+i) = rx_buff;
 8003ab4:	7ffb      	ldrb	r3, [r7, #31]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	7fba      	ldrb	r2, [r7, #30]
 8003abc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, &rx_buff, 1, 1000);
 8003abe:	f107 011e 	add.w	r1, r7, #30
 8003ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f008 ffb5 	bl	800ca38 <HAL_UART_Transmit>
		i++;
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8003ad4:	7ffa      	ldrb	r2, [r7, #31]
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3da      	bcc.n	8003a92 <UART_In+0x28>
 8003adc:	e000      	b.n	8003ae0 <UART_In+0x76>
		if(rx_buff=='\r') break;
 8003ade:	bf00      	nop
	}
	*(p+i) = 0;
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003aea:	f107 0114 	add.w	r1, r7, #20
 8003aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003af2:	2204      	movs	r2, #4
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f008 ff9f 	bl	800ca38 <HAL_UART_Transmit>
}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	4a05      	ldr	r2, [pc, #20]	@ (8003b2c <Frequency_To_Period+0x28>)
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	3b01      	subs	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	07735940 	.word	0x07735940

08003b30 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f007 fb0e 	bl	800b15c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f007 fa56 	bl	800b000 <HAL_TIM_Base_Start_IT>
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 8003b64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba4 <Mototr_Poz_Inc+0x48>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <Mototr_Poz_Inc+0x4c>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	490b      	ldr	r1, [pc, #44]	@ (8003ba8 <Mototr_Poz_Inc+0x4c>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 8003b82:	e008      	b.n	8003b96 <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 8003b84:	4a08      	ldr	r2, [pc, #32]	@ (8003ba8 <Mototr_Poz_Inc+0x4c>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	1e5a      	subs	r2, r3, #1
 8003b8e:	4906      	ldr	r1, [pc, #24]	@ (8003ba8 <Mototr_Poz_Inc+0x4c>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000010 	.word	0x20000010
 8003ba8:	2000021c 	.word	0x2000021c

08003bac <Ramp>:

void Ramp(uint32_t M)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	e0b1      	b.n	8003d20 <Ramp+0x174>
	{
		if(i<M_move_l[M]/2)
 8003bbc:	4a60      	ldr	r2, [pc, #384]	@ (8003d40 <Ramp+0x194>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc4:	0fda      	lsrs	r2, r3, #31
 8003bc6:	4413      	add	r3, r2
 8003bc8:	105b      	asrs	r3, r3, #1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d246      	bcs.n	8003c60 <Ramp+0xb4>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d44 <Ramp+0x198>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fca8 	bl	800052c <__aeabi_ui2d>
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	4b59      	ldr	r3, [pc, #356]	@ (8003d48 <Ramp+0x19c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fc fca1 	bl	800052c <__aeabi_ui2d>
 8003bea:	4680      	mov	r8, r0
 8003bec:	4689      	mov	r9, r1
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc fc9a 	bl	800052c <__aeabi_ui2d>
 8003bf8:	4682      	mov	sl, r0
 8003bfa:	468b      	mov	fp, r1
 8003bfc:	4b52      	ldr	r3, [pc, #328]	@ (8003d48 <Ramp+0x19c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fc93 	bl	800052c <__aeabi_ui2d>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	f7fc fe31 	bl	8000874 <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	ec43 2b17 	vmov	d7, r2, r3
 8003c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c1e:	eef0 0a67 	vmov.f32	s1, s15
 8003c22:	f00e f9ad 	bl	8011f80 <sqrt>
 8003c26:	ec53 2b10 	vmov	r2, r3, d0
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc fcf7 	bl	8000620 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f7fc fb3b 	bl	80002b4 <__adddf3>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	f7fc ffc3 	bl	8000bd0 <__aeabi_d2uiz>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d4c <Ramp+0x1a0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d950      	bls.n	8003cfa <Ramp+0x14e>
				tmp = f_MAX;
 8003c58:	4b3c      	ldr	r3, [pc, #240]	@ (8003d4c <Ramp+0x1a0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e04c      	b.n	8003cfa <Ramp+0x14e>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-1-i))/a_MAX);
 8003c60:	4b38      	ldr	r3, [pc, #224]	@ (8003d44 <Ramp+0x198>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc61 	bl	800052c <__aeabi_ui2d>
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <Ramp+0x19c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc5a 	bl	800052c <__aeabi_ui2d>
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4689      	mov	r9, r1
 8003c7c:	4a30      	ldr	r2, [pc, #192]	@ (8003d40 <Ramp+0x194>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc4c 	bl	800052c <__aeabi_ui2d>
 8003c94:	4682      	mov	sl, r0
 8003c96:	468b      	mov	fp, r1
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <Ramp+0x19c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fc45 	bl	800052c <__aeabi_ui2d>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	4659      	mov	r1, fp
 8003caa:	f7fc fde3 	bl	8000874 <__aeabi_ddiv>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	ec43 2b17 	vmov	d7, r2, r3
 8003cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8003cba:	eef0 0a67 	vmov.f32	s1, s15
 8003cbe:	f00e f95f 	bl	8011f80 <sqrt>
 8003cc2:	ec53 2b10 	vmov	r2, r3, d0
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	4649      	mov	r1, r9
 8003cca:	f7fc fca9 	bl	8000620 <__aeabi_dmul>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f7fc faed 	bl	80002b4 <__adddf3>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff75 	bl	8000bd0 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <Ramp+0x1a0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d902      	bls.n	8003cfa <Ramp+0x14e>
				tmp = f_MAX;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <Ramp+0x1a0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff02 	bl	8003b04 <Frequency_To_Period>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b298      	uxth	r0, r3
 8003d04:	4912      	ldr	r1, [pc, #72]	@ (8003d50 <Ramp+0x1a4>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003d0c:	fb03 f202 	mul.w	r2, r3, r2
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	4602      	mov	r2, r0
 8003d16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	4a07      	ldr	r2, [pc, #28]	@ (8003d40 <Ramp+0x194>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	f4ff af45 	bcc.w	8003bbc <Ramp+0x10>
	}
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	2003aba8 	.word	0x2003aba8
 8003d44:	20000008 	.word	0x20000008
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	20000004 	.word	0x20000004
 8003d50:	20000228 	.word	0x20000228

08003d54 <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <Ramp_Out+0x68>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	4915      	ldr	r1, [pc, #84]	@ (8003dc0 <Ramp_Out+0x6c>)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d304      	bcc.n	8003d7e <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f007 fc12 	bl	800b5a0 <HAL_TIM_OC_Stop_IT>
	else
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
		M_move_poz[M]++;
	}
}
 8003d7c:	e019      	b.n	8003db2 <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dbc <Ramp_Out+0x68>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	490f      	ldr	r1, [pc, #60]	@ (8003dc4 <Ramp_Out+0x70>)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8003d8e:	fb00 f202 	mul.w	r2, r0, r2
 8003d92:	4413      	add	r3, r2
 8003d94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fec8 	bl	8003b30 <Period_Out>
		M_move_poz[M]++;
 8003da0:	4a06      	ldr	r2, [pc, #24]	@ (8003dbc <Ramp_Out+0x68>)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	4904      	ldr	r1, [pc, #16]	@ (8003dbc <Ramp_Out+0x68>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2003abb4 	.word	0x2003abb4
 8003dc0:	2003aba8 	.word	0x2003aba8
 8003dc4:	20000228 	.word	0x20000228

08003dc8 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 8003dd6:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <move+0x1d8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a71      	ldr	r2, [pc, #452]	@ (8003fa4 <move+0x1dc>)
 8003de0:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 8003de2:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa0 <move+0x1d8>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa4 <move+0x1dc>)
 8003dec:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 8003dee:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa0 <move+0x1d8>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa4 <move+0x1dc>)
 8003df8:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa4 <move+0x1dc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da0d      	bge.n	8003e1e <move+0x56>
	{
		M_move_l[0] = ~M_move_l[0]+1;
 8003e02:	4b68      	ldr	r3, [pc, #416]	@ (8003fa4 <move+0x1dc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	425b      	negs	r3, r3
 8003e08:	4a66      	ldr	r2, [pc, #408]	@ (8003fa4 <move+0x1dc>)
 8003e0a:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 8003e0c:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <move+0x1e0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 8003e12:	2201      	movs	r2, #1
 8003e14:	2101      	movs	r1, #1
 8003e16:	4865      	ldr	r0, [pc, #404]	@ (8003fac <move+0x1e4>)
 8003e18:	f001 ffc6 	bl	8005da8 <HAL_GPIO_WritePin>
 8003e1c:	e007      	b.n	8003e2e <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 8003e1e:	4b62      	ldr	r3, [pc, #392]	@ (8003fa8 <move+0x1e0>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	4860      	ldr	r0, [pc, #384]	@ (8003fac <move+0x1e4>)
 8003e2a:	f001 ffbd 	bl	8005da8 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa4 <move+0x1dc>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0d      	bge.n	8003e52 <move+0x8a>
	{
		M_move_l[1] = ~M_move_l[1]+1;
 8003e36:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa4 <move+0x1dc>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	425b      	negs	r3, r3
 8003e3c:	4a59      	ldr	r2, [pc, #356]	@ (8003fa4 <move+0x1dc>)
 8003e3e:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 8003e40:	4b59      	ldr	r3, [pc, #356]	@ (8003fa8 <move+0x1e0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 8003e46:	2201      	movs	r2, #1
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4859      	ldr	r0, [pc, #356]	@ (8003fb0 <move+0x1e8>)
 8003e4c:	f001 ffac 	bl	8005da8 <HAL_GPIO_WritePin>
 8003e50:	e007      	b.n	8003e62 <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 8003e52:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <move+0x1e0>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4854      	ldr	r0, [pc, #336]	@ (8003fb0 <move+0x1e8>)
 8003e5e:	f001 ffa3 	bl	8005da8 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 8003e62:	4b50      	ldr	r3, [pc, #320]	@ (8003fa4 <move+0x1dc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da0d      	bge.n	8003e86 <move+0xbe>
	{
		M_move_l[2] = ~M_move_l[2]+1;
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa4 <move+0x1dc>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	425b      	negs	r3, r3
 8003e70:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa4 <move+0x1dc>)
 8003e72:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 8003e74:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <move+0x1e0>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	484c      	ldr	r0, [pc, #304]	@ (8003fb0 <move+0x1e8>)
 8003e80:	f001 ff92 	bl	8005da8 <HAL_GPIO_WritePin>
 8003e84:	e007      	b.n	8003e96 <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 8003e86:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <move+0x1e0>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4847      	ldr	r0, [pc, #284]	@ (8003fb0 <move+0x1e8>)
 8003e92:	f001 ff89 	bl	8005da8 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7ff fe88 	bl	8003bac <Ramp>
	Ramp(1);
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	f7ff fe85 	bl	8003bac <Ramp>
	Ramp(2);
 8003ea2:	2002      	movs	r0, #2
 8003ea4:	f7ff fe82 	bl	8003bac <Ramp>

	M_move_poz[0] =0;
 8003ea8:	4b42      	ldr	r3, [pc, #264]	@ (8003fb4 <move+0x1ec>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8003eae:	4b41      	ldr	r3, [pc, #260]	@ (8003fb4 <move+0x1ec>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <move+0x1ec>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24

	Period_Out(tim1,Period_ramp[0][M_move_poz[0]]);
 8003ed2:	4b38      	ldr	r3, [pc, #224]	@ (8003fb4 <move+0x1ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	@ (8003fb8 <move+0x1f0>)
 8003ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f7ff fe26 	bl	8003b30 <Period_Out>
	Period_Out(tim2,Period_ramp[1][M_move_poz[1]]);
 8003ee4:	4b33      	ldr	r3, [pc, #204]	@ (8003fb4 <move+0x1ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <move+0x1f0>)
 8003eea:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8003eee:	3340      	adds	r3, #64	@ 0x40
 8003ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	69f8      	ldr	r0, [r7, #28]
 8003ef8:	f7ff fe1a 	bl	8003b30 <Period_Out>
	Period_Out(tim3,Period_ramp[2][M_move_poz[2]]);
 8003efc:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb4 <move+0x1ec>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <move+0x1f0>)
 8003f02:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003f06:	3380      	adds	r3, #128	@ 0x80
 8003f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f10:	f7ff fe0e 	bl	8003b30 <Period_Out>

	if(M_move_l[0] >  M_move_poz[0])
 8003f14:	4b23      	ldr	r3, [pc, #140]	@ (8003fa4 <move+0x1dc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <move+0x1ec>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d903      	bls.n	8003f2a <move+0x162>
	HAL_TIM_OC_Start_IT(tim1,Channel1);
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	6838      	ldr	r0, [r7, #0]
 8003f26:	f007 f9a9 	bl	800b27c <HAL_TIM_OC_Start_IT>
	if(M_move_l[1] >  M_move_poz[1])
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <move+0x1dc>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <move+0x1ec>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d903      	bls.n	8003f40 <move+0x178>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 8003f38:	6a39      	ldr	r1, [r7, #32]
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f007 f99e 	bl	800b27c <HAL_TIM_OC_Start_IT>
	if(M_move_l[2] >  M_move_poz[2])
 8003f40:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <move+0x1dc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <move+0x1ec>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d903      	bls.n	8003f56 <move+0x18e>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 8003f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f52:	f007 f993 	bl	800b27c <HAL_TIM_OC_Start_IT>

	M_move_poz[0]++;
 8003f56:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <move+0x1ec>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <move+0x1ec>)
 8003f5e:	6013      	str	r3, [r2, #0]
	M_move_poz[1]++;
 8003f60:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <move+0x1ec>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3301      	adds	r3, #1
 8003f66:	4a13      	ldr	r2, [pc, #76]	@ (8003fb4 <move+0x1ec>)
 8003f68:	6053      	str	r3, [r2, #4]
	M_move_poz[2]++;
 8003f6a:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <move+0x1ec>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <move+0x1ec>)
 8003f72:	6093      	str	r3, [r2, #8]

	while(!(theta0_target ==  M_poz[0]) || !(theta1_target ==  M_poz[1]) || !(theta2_target ==  M_poz[2]))
 8003f74:	bf00      	nop
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <move+0x1d8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1fa      	bne.n	8003f76 <move+0x1ae>
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <move+0x1d8>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d1f5      	bne.n	8003f76 <move+0x1ae>
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <move+0x1d8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1f0      	bne.n	8003f76 <move+0x1ae>
	{
	}
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000021c 	.word	0x2000021c
 8003fa4:	2003aba8 	.word	0x2003aba8
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	42020400 	.word	0x42020400
 8003fb0:	42020800 	.word	0x42020800
 8003fb4:	2003abb4 	.word	0x2003abb4
 8003fb8:	20000228 	.word	0x20000228

08003fbc <Set_f_MAX>:

void Set_f_MAX(uint32_t tmp)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	f_MAX = tmp;
 8003fc4:	4a04      	ldr	r2, [pc, #16]	@ (8003fd8 <Set_f_MAX+0x1c>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6013      	str	r3, [r2, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000004 	.word	0x20000004

08003fdc <Set_f_MIN>:

void Set_f_MIN(uint32_t tmp)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	f_MIN = tmp;
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <Set_f_MIN+0x1c>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000008 	.word	0x20000008

08003ffc <Set_a_MAX>:

void Set_a_MAX(uint32_t tmp)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	a_MAX = tmp;
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <Set_a_MAX+0x1c>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	2000000c 	.word	0x2000000c

0800401c <Get_f_MAX>:

uint32_t Get_f_MAX(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
	return f_MAX;
 8004020:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <Get_f_MAX+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000004 	.word	0x20000004

08004034 <Get_f_MIN>:

uint32_t Get_f_MIN(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
	return f_MIN;
 8004038:	4b03      	ldr	r3, [pc, #12]	@ (8004048 <Get_f_MIN+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000008 	.word	0x20000008

0800404c <Get_a_MAX>:

uint32_t Get_a_MAX(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
	return a_MAX;
 8004050:	4b03      	ldr	r3, [pc, #12]	@ (8004060 <Get_a_MAX+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000000c 	.word	0x2000000c

08004064 <M_Poz_0>:

uint32_t M_Poz_0(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	return M_poz[0];
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <M_Poz_0+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	2000021c 	.word	0x2000021c

0800407c <M_Poz_1>:

uint32_t M_Poz_1(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	return M_poz[1];
 8004080:	4b03      	ldr	r3, [pc, #12]	@ (8004090 <M_Poz_1+0x14>)
 8004082:	685b      	ldr	r3, [r3, #4]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000021c 	.word	0x2000021c

08004094 <M_Poz_2>:

uint32_t M_Poz_2(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
	return M_poz[2];
 8004098:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <M_Poz_2+0x14>)
 800409a:	689b      	ldr	r3, [r3, #8]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000021c 	.word	0x2000021c

080040ac <Set_M_Poz_0>:

void Set_M_Poz_0(uint32_t tmp)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	M_poz[0] = tmp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <Set_M_Poz_0+0x1c>)
 80040b8:	6013      	str	r3, [r2, #0]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000021c 	.word	0x2000021c

080040cc <Set_M_Poz_1>:
void Set_M_Poz_1(uint32_t tmp)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	M_poz[1] = tmp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <Set_M_Poz_1+0x1c>)
 80040d8:	6053      	str	r3, [r2, #4]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000021c 	.word	0x2000021c

080040ec <Set_M_Poz_2>:
void Set_M_Poz_2(uint32_t tmp)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	M_poz[2] = tmp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <Set_M_Poz_2+0x1c>)
 80040f8:	6093      	str	r3, [r2, #8]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000021c 	.word	0x2000021c
 800410c:	00000000 	.word	0x00000000

08004110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b090      	sub	sp, #64	@ 0x40
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004116:	f001 fa6b 	bl	80055f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800411a:	f000 f853 	bl	80041c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800411e:	f000 fc31 	bl	8004984 <MX_GPIO_Init>
  MX_UART5_Init();
 8004122:	f000 fb17 	bl	8004754 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004126:	f000 fb63 	bl	80047f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800412a:	f000 fbf9 	bl	8004920 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 800412e:	f000 f8bd 	bl	80042ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8004132:	f000 f907 	bl	8004344 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8004136:	f000 fba7 	bl	8004888 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800413a:	f000 f959 	bl	80043f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800413e:	f000 f9cd 	bl	80044dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8004142:	f000 fa41 	bl	80045c8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8004146:	f000 fab5 	bl	80046b4 <MX_TIM15_Init>
  MX_ICACHE_Init();
 800414a:	f000 f8ef 	bl	800432c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 800414e:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <main+0xa8>)
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	6810      	ldr	r0, [r2, #0]
 8004154:	6851      	ldr	r1, [r2, #4]
 8004156:	c303      	stmia	r3!, {r0, r1}
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	2234      	movs	r2, #52	@ 0x34
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f00a fb26 	bl	800e7b2 <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 8004166:	f7fd f80f 	bl	8001188 <Relay_0_Set>
  HAL_Delay(200);
 800416a:	20c8      	movs	r0, #200	@ 0xc8
 800416c:	f001 fafe 	bl	800576c <HAL_Delay>
  Relay_1_Set();
 8004170:	f7fd f82e 	bl	80011d0 <Relay_1_Set>
  HAL_Delay(200);
 8004174:	20c8      	movs	r0, #200	@ 0xc8
 8004176:	f001 faf9 	bl	800576c <HAL_Delay>
  Relay_0_Reset();
 800417a:	f7fd f811 	bl	80011a0 <Relay_0_Reset>
  HAL_Delay(200);
 800417e:	20c8      	movs	r0, #200	@ 0xc8
 8004180:	f001 faf4 	bl	800576c <HAL_Delay>
  Relay_1_Reset();
 8004184:	f7fd f830 	bl	80011e8 <Relay_1_Reset>

  Zero_XYZ(0, 0, 0);
 8004188:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 80041b0 <main+0xa0>
 800418c:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80041b0 <main+0xa0>
 8004190:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80041b0 <main+0xa0>
 8004194:	f7fe f89c 	bl	80022d0 <Zero_XYZ>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8004198:	4808      	ldr	r0, [pc, #32]	@ (80041bc <main+0xac>)
 800419a:	f006 ff31 	bl	800b000 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 800419e:	4808      	ldr	r0, [pc, #32]	@ (80041c0 <main+0xb0>)
 80041a0:	f7fe fe98 	bl	8002ed4 <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 80041a4:	4806      	ldr	r0, [pc, #24]	@ (80041c0 <main+0xb0>)
 80041a6:	f7fe fed9 	bl	8002f5c <Menu_UART_Update>
 80041aa:	e7fb      	b.n	80041a4 <main+0x94>
 80041ac:	f3af 8000 	nop.w
	...
 80041b8:	08014a78 	.word	0x08014a78
 80041bc:	2003ad88 	.word	0x2003ad88
 80041c0:	2003ae68 	.word	0x2003ae68

080041c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b09c      	sub	sp, #112	@ 0x70
 80041c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ca:	f107 0320 	add.w	r3, r7, #32
 80041ce:	2250      	movs	r2, #80	@ 0x50
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f00a faed 	bl	800e7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041d8:	f107 0308 	add.w	r3, r7, #8
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80041ea:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <SystemClock_Config+0xe0>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	4a2d      	ldr	r2, [pc, #180]	@ (80042a4 <SystemClock_Config+0xe0>)
 80041f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80041f4:	6113      	str	r3, [r2, #16]
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <SystemClock_Config+0xe0>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004202:	bf00      	nop
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <SystemClock_Config+0xe0>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d1f9      	bne.n	8004204 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004210:	2321      	movs	r3, #33	@ 0x21
 8004212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800421a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800421e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004220:	2302      	movs	r3, #2
 8004222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8004224:	2303      	movs	r3, #3
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004228:	2306      	movs	r3, #6
 800422a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800422c:	237d      	movs	r3, #125	@ 0x7d
 800422e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004230:	2302      	movs	r3, #2
 8004232:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004234:	2308      	movs	r3, #8
 8004236:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004238:	2302      	movs	r3, #2
 800423a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800423c:	2308      	movs	r3, #8
 800423e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8004240:	2300      	movs	r3, #0
 8004242:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004248:	f107 0320 	add.w	r3, r7, #32
 800424c:	4618      	mov	r0, r3
 800424e:	f002 f809 	bl	8006264 <HAL_RCC_OscConfig>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004258:	f000 fc4c 	bl	8004af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800425c:	231f      	movs	r3, #31
 800425e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004260:	2303      	movs	r3, #3
 8004262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004268:	2350      	movs	r3, #80	@ 0x50
 800426a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800426c:	2350      	movs	r3, #80	@ 0x50
 800426e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 8004270:	2350      	movs	r3, #80	@ 0x50
 8004272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	2105      	movs	r1, #5
 800427a:	4618      	mov	r0, r3
 800427c:	f002 fc2a 	bl	8006ad4 <HAL_RCC_ClockConfig>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004286:	f000 fc35 	bl	8004af4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800428a:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <SystemClock_Config+0xe4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <SystemClock_Config+0xe4>)
 8004294:	f043 0320 	orr.w	r3, r3, #32
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	3770      	adds	r7, #112	@ 0x70
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	44020800 	.word	0x44020800
 80042a8:	40022000 	.word	0x40022000

080042ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <MX_I2C1_Init+0x78>)
 80042b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 80042b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004328 <MX_I2C1_Init+0x7c>)
 80042ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80042bc:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042c2:	4b17      	ldr	r3, [pc, #92]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042c8:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80042d4:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042da:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042dc:	2200      	movs	r2, #0
 80042de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042e6:	480e      	ldr	r0, [pc, #56]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042e8:	f001 fd76 	bl	8005dd8 <HAL_I2C_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80042f2:	f000 fbff 	bl	8004af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042f6:	2100      	movs	r1, #0
 80042f8:	4809      	ldr	r0, [pc, #36]	@ (8004320 <MX_I2C1_Init+0x74>)
 80042fa:	f001 fe08 	bl	8005f0e <HAL_I2CEx_ConfigAnalogFilter>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004304:	f000 fbf6 	bl	8004af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004308:	2100      	movs	r1, #0
 800430a:	4805      	ldr	r0, [pc, #20]	@ (8004320 <MX_I2C1_Init+0x74>)
 800430c:	f001 fe4a 	bl	8005fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004316:	f000 fbed 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	2003abc0 	.word	0x2003abc0
 8004324:	40005400 	.word	0x40005400
 8004328:	2050517a 	.word	0x2050517a

0800432c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004330:	f001 fe84 	bl	800603c <HAL_ICACHE_Enable>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800433a:	f000 fbdb 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004348:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800434a:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <MX_SPI1_Init+0xa8>)
 800434c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800434e:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004350:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800435c:	4b22      	ldr	r3, [pc, #136]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800435e:	220f      	movs	r2, #15
 8004360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004368:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800436a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800436e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004372:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800437a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800437e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004380:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004382:	2200      	movs	r2, #0
 8004384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004386:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004388:	2200      	movs	r2, #0
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438c:	4b16      	ldr	r3, [pc, #88]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800438e:	2200      	movs	r2, #0
 8004390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 8004394:	2207      	movs	r2, #7
 8004396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800439e:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80043a4:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043aa:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043b0:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043b6:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80043c2:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80043c8:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043d4:	4804      	ldr	r0, [pc, #16]	@ (80043e8 <MX_SPI1_Init+0xa4>)
 80043d6:	f006 f93d 	bl	800a654 <HAL_SPI_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80043e0:	f000 fb88 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	2003ac14 	.word	0x2003ac14
 80043ec:	40013000 	.word	0x40013000

080043f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08e      	sub	sp, #56	@ 0x38
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004404:	f107 031c 	add.w	r3, r7, #28
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004410:	463b      	mov	r3, r7
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	615a      	str	r2, [r3, #20]
 8004420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004422:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 800442a:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 800442c:	22f9      	movs	r2, #249	@ 0xf9
 800442e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004430:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8004436:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004438:	2201      	movs	r2, #1
 800443a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800443c:	4b26      	ldr	r3, [pc, #152]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004442:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004444:	2200      	movs	r2, #0
 8004446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004448:	4823      	ldr	r0, [pc, #140]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 800444a:	f006 fd82 	bl	800af52 <HAL_TIM_Base_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004454:	f000 fb4e 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800445e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004462:	4619      	mov	r1, r3
 8004464:	481c      	ldr	r0, [pc, #112]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004466:	f007 fb4f 	bl	800bb08 <HAL_TIM_ConfigClockSource>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004470:	f000 fb40 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8004474:	4818      	ldr	r0, [pc, #96]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004476:	f006 fea0 	bl	800b1ba <HAL_TIM_OC_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004480:	f000 fb38 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004488:	2300      	movs	r3, #0
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	4619      	mov	r1, r3
 8004492:	4811      	ldr	r0, [pc, #68]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 8004494:	f008 f96a 	bl	800c76c <HAL_TIMEx_MasterConfigSynchronization>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800449e:	f000 fb29 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80044a2:	2330      	movs	r3, #48	@ 0x30
 80044a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044b2:	463b      	mov	r3, r7
 80044b4:	2204      	movs	r2, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4807      	ldr	r0, [pc, #28]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 80044ba:	f007 faab 	bl	800ba14 <HAL_TIM_OC_ConfigChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80044c4:	f000 fb16 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80044c8:	4803      	ldr	r0, [pc, #12]	@ (80044d8 <MX_TIM2_Init+0xe8>)
 80044ca:	f000 fc8b 	bl	8004de4 <HAL_TIM_MspPostInit>

}
 80044ce:	bf00      	nop
 80044d0:	3738      	adds	r7, #56	@ 0x38
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2003aca4 	.word	0x2003aca4

080044dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	@ 0x38
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	609a      	str	r2, [r3, #8]
 80044ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044fc:	463b      	mov	r3, r7
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	615a      	str	r2, [r3, #20]
 800450c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800450e:	4b2c      	ldr	r3, [pc, #176]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004510:	4a2c      	ldr	r2, [pc, #176]	@ (80045c4 <MX_TIM3_Init+0xe8>)
 8004512:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 8004514:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004516:	22f9      	movs	r2, #249	@ 0xf9
 8004518:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451a:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8004520:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004522:	2201      	movs	r2, #1
 8004524:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800452c:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004532:	4823      	ldr	r0, [pc, #140]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004534:	f006 fd0d 	bl	800af52 <HAL_TIM_Base_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800453e:	f000 fad9 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800454c:	4619      	mov	r1, r3
 800454e:	481c      	ldr	r0, [pc, #112]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004550:	f007 fada 	bl	800bb08 <HAL_TIM_ConfigClockSource>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800455a:	f000 facb 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800455e:	4818      	ldr	r0, [pc, #96]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 8004560:	f006 fe2b 	bl	800b1ba <HAL_TIM_OC_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800456a:	f000 fac3 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	4619      	mov	r1, r3
 800457c:	4810      	ldr	r0, [pc, #64]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 800457e:	f008 f8f5 	bl	800c76c <HAL_TIMEx_MasterConfigSynchronization>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004588:	f000 fab4 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800458c:	2330      	movs	r3, #48	@ 0x30
 800458e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800459c:	463b      	mov	r3, r7
 800459e:	220c      	movs	r2, #12
 80045a0:	4619      	mov	r1, r3
 80045a2:	4807      	ldr	r0, [pc, #28]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 80045a4:	f007 fa36 	bl	800ba14 <HAL_TIM_OC_ConfigChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80045ae:	f000 faa1 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045b2:	4803      	ldr	r0, [pc, #12]	@ (80045c0 <MX_TIM3_Init+0xe4>)
 80045b4:	f000 fc16 	bl	8004de4 <HAL_TIM_MspPostInit>

}
 80045b8:	bf00      	nop
 80045ba:	3738      	adds	r7, #56	@ 0x38
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2003acf0 	.word	0x2003acf0
 80045c4:	40000400 	.word	0x40000400

080045c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	@ 0x38
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045e8:	463b      	mov	r3, r7
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	609a      	str	r2, [r3, #8]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	615a      	str	r2, [r3, #20]
 80045f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80045fa:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <MX_TIM5_Init+0xe4>)
 80045fc:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <MX_TIM5_Init+0xe8>)
 80045fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8004600:	4b2a      	ldr	r3, [pc, #168]	@ (80046ac <MX_TIM5_Init+0xe4>)
 8004602:	22f9      	movs	r2, #249	@ 0xf9
 8004604:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004606:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <MX_TIM5_Init+0xe4>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 800460c:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <MX_TIM5_Init+0xe4>)
 800460e:	2201      	movs	r2, #1
 8004610:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004612:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <MX_TIM5_Init+0xe4>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004618:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <MX_TIM5_Init+0xe4>)
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800461e:	4823      	ldr	r0, [pc, #140]	@ (80046ac <MX_TIM5_Init+0xe4>)
 8004620:	f006 fc97 	bl	800af52 <HAL_TIM_Base_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800462a:	f000 fa63 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800462e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004638:	4619      	mov	r1, r3
 800463a:	481c      	ldr	r0, [pc, #112]	@ (80046ac <MX_TIM5_Init+0xe4>)
 800463c:	f007 fa64 	bl	800bb08 <HAL_TIM_ConfigClockSource>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8004646:	f000 fa55 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800464a:	4818      	ldr	r0, [pc, #96]	@ (80046ac <MX_TIM5_Init+0xe4>)
 800464c:	f006 fdb5 	bl	800b1ba <HAL_TIM_OC_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8004656:	f000 fa4d 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004662:	f107 031c 	add.w	r3, r7, #28
 8004666:	4619      	mov	r1, r3
 8004668:	4810      	ldr	r0, [pc, #64]	@ (80046ac <MX_TIM5_Init+0xe4>)
 800466a:	f008 f87f 	bl	800c76c <HAL_TIMEx_MasterConfigSynchronization>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8004674:	f000 fa3e 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004678:	2330      	movs	r3, #48	@ 0x30
 800467a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004680:	2300      	movs	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004688:	463b      	mov	r3, r7
 800468a:	2200      	movs	r2, #0
 800468c:	4619      	mov	r1, r3
 800468e:	4807      	ldr	r0, [pc, #28]	@ (80046ac <MX_TIM5_Init+0xe4>)
 8004690:	f007 f9c0 	bl	800ba14 <HAL_TIM_OC_ConfigChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800469a:	f000 fa2b 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800469e:	4803      	ldr	r0, [pc, #12]	@ (80046ac <MX_TIM5_Init+0xe4>)
 80046a0:	f000 fba0 	bl	8004de4 <HAL_TIM_MspPostInit>

}
 80046a4:	bf00      	nop
 80046a6:	3738      	adds	r7, #56	@ 0x38
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2003ad3c 	.word	0x2003ad3c
 80046b0:	40000c00 	.word	0x40000c00

080046b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046ba:	f107 0310 	add.w	r3, r7, #16
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <MX_TIM15_Init+0x98>)
 80046d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <MX_TIM15_Init+0x9c>)
 80046d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	@ (800474c <MX_TIM15_Init+0x98>)
 80046da:	220a      	movs	r2, #10
 80046dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <MX_TIM15_Init+0x98>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <MX_TIM15_Init+0x98>)
 80046e6:	227c      	movs	r2, #124	@ 0x7c
 80046e8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <MX_TIM15_Init+0x98>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80046f0:	4b16      	ldr	r3, [pc, #88]	@ (800474c <MX_TIM15_Init+0x98>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f6:	4b15      	ldr	r3, [pc, #84]	@ (800474c <MX_TIM15_Init+0x98>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80046fc:	4813      	ldr	r0, [pc, #76]	@ (800474c <MX_TIM15_Init+0x98>)
 80046fe:	f006 fc28 	bl	800af52 <HAL_TIM_Base_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8004708:	f000 f9f4 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800470c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004710:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004712:	f107 0310 	add.w	r3, r7, #16
 8004716:	4619      	mov	r1, r3
 8004718:	480c      	ldr	r0, [pc, #48]	@ (800474c <MX_TIM15_Init+0x98>)
 800471a:	f007 f9f5 	bl	800bb08 <HAL_TIM_ConfigClockSource>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8004724:	f000 f9e6 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004728:	2300      	movs	r3, #0
 800472a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	@ (800474c <MX_TIM15_Init+0x98>)
 8004736:	f008 f819 	bl	800c76c <HAL_TIMEx_MasterConfigSynchronization>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8004740:	f000 f9d8 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004744:	bf00      	nop
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	2003ad88 	.word	0x2003ad88
 8004750:	40014000 	.word	0x40014000

08004754 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <MX_UART5_Init+0x94>)
 800475a:	4a24      	ldr	r2, [pc, #144]	@ (80047ec <MX_UART5_Init+0x98>)
 800475c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800475e:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004764:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004768:	2200      	movs	r2, #0
 800476a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800476c:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <MX_UART5_Init+0x94>)
 800476e:	2200      	movs	r2, #0
 8004770:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004772:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <MX_UART5_Init+0x94>)
 800477a:	220c      	movs	r2, #12
 800477c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004780:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004784:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004786:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004788:	2200      	movs	r2, #0
 800478a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800478c:	4b16      	ldr	r3, [pc, #88]	@ (80047e8 <MX_UART5_Init+0x94>)
 800478e:	2200      	movs	r2, #0
 8004790:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <MX_UART5_Init+0x94>)
 8004794:	2200      	movs	r2, #0
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <MX_UART5_Init+0x94>)
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800479e:	4812      	ldr	r0, [pc, #72]	@ (80047e8 <MX_UART5_Init+0x94>)
 80047a0:	f008 f8fa 	bl	800c998 <HAL_UART_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80047aa:	f000 f9a3 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047ae:	2100      	movs	r1, #0
 80047b0:	480d      	ldr	r0, [pc, #52]	@ (80047e8 <MX_UART5_Init+0x94>)
 80047b2:	f008 febd 	bl	800d530 <HAL_UARTEx_SetTxFifoThreshold>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80047bc:	f000 f99a 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047c0:	2100      	movs	r1, #0
 80047c2:	4809      	ldr	r0, [pc, #36]	@ (80047e8 <MX_UART5_Init+0x94>)
 80047c4:	f008 fef2 	bl	800d5ac <HAL_UARTEx_SetRxFifoThreshold>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80047ce:	f000 f991 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80047d2:	4805      	ldr	r0, [pc, #20]	@ (80047e8 <MX_UART5_Init+0x94>)
 80047d4:	f008 fe73 	bl	800d4be <HAL_UARTEx_DisableFifoMode>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80047de:	f000 f989 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2003add4 	.word	0x2003add4
 80047ec:	40005000 	.word	0x40005000

080047f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047f4:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 80047f6:	4a23      	ldr	r2, [pc, #140]	@ (8004884 <MX_USART1_UART_Init+0x94>)
 80047f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80047fa:	4b21      	ldr	r3, [pc, #132]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 80047fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004802:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004808:	4b1d      	ldr	r3, [pc, #116]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800480a:	2200      	movs	r2, #0
 800480c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800480e:	4b1c      	ldr	r3, [pc, #112]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004814:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004816:	220c      	movs	r2, #12
 8004818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800481a:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800481c:	2200      	movs	r2, #0
 800481e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004822:	2200      	movs	r2, #0
 8004824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004826:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800482e:	2200      	movs	r2, #0
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004832:	4b13      	ldr	r3, [pc, #76]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 8004834:	2200      	movs	r2, #0
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004838:	4811      	ldr	r0, [pc, #68]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800483a:	f008 f8ad 	bl	800c998 <HAL_UART_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004844:	f000 f956 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004848:	2100      	movs	r1, #0
 800484a:	480d      	ldr	r0, [pc, #52]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800484c:	f008 fe70 	bl	800d530 <HAL_UARTEx_SetTxFifoThreshold>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004856:	f000 f94d 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800485a:	2100      	movs	r1, #0
 800485c:	4808      	ldr	r0, [pc, #32]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800485e:	f008 fea5 	bl	800d5ac <HAL_UARTEx_SetRxFifoThreshold>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004868:	f000 f944 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800486c:	4804      	ldr	r0, [pc, #16]	@ (8004880 <MX_USART1_UART_Init+0x90>)
 800486e:	f008 fe26 	bl	800d4be <HAL_UARTEx_DisableFifoMode>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004878:	f000 f93c 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800487c:	bf00      	nop
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2003ae68 	.word	0x2003ae68
 8004884:	40013800 	.word	0x40013800

08004888 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800488c:	4b22      	ldr	r3, [pc, #136]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 800488e:	4a23      	ldr	r2, [pc, #140]	@ (800491c <MX_USART6_UART_Init+0x94>)
 8004890:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004892:	4b21      	ldr	r3, [pc, #132]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 8004894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004898:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800489a:	4b1f      	ldr	r3, [pc, #124]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048ae:	220c      	movs	r2, #12
 80048b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b2:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048b8:	4b17      	ldr	r3, [pc, #92]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048be:	4b16      	ldr	r3, [pc, #88]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ca:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048d0:	4811      	ldr	r0, [pc, #68]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048d2:	f008 f861 	bl	800c998 <HAL_UART_Init>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80048dc:	f000 f90a 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048e0:	2100      	movs	r1, #0
 80048e2:	480d      	ldr	r0, [pc, #52]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048e4:	f008 fe24 	bl	800d530 <HAL_UARTEx_SetTxFifoThreshold>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80048ee:	f000 f901 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048f2:	2100      	movs	r1, #0
 80048f4:	4808      	ldr	r0, [pc, #32]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 80048f6:	f008 fe59 	bl	800d5ac <HAL_UARTEx_SetRxFifoThreshold>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004900:	f000 f8f8 	bl	8004af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004904:	4804      	ldr	r0, [pc, #16]	@ (8004918 <MX_USART6_UART_Init+0x90>)
 8004906:	f008 fdda 	bl	800d4be <HAL_UARTEx_DisableFifoMode>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004910:	f000 f8f0 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2003aefc 	.word	0x2003aefc
 800491c:	40006400 	.word	0x40006400

08004920 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8004924:	4b15      	ldr	r3, [pc, #84]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004926:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <MX_USB_PCD_Init+0x60>)
 8004928:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800492a:	4b14      	ldr	r3, [pc, #80]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 800492c:	2208      	movs	r2, #8
 800492e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8004930:	4b12      	ldr	r3, [pc, #72]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004932:	2202      	movs	r2, #2
 8004934:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004936:	4b11      	ldr	r3, [pc, #68]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004938:	2202      	movs	r2, #2
 800493a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800493c:	4b0f      	ldr	r3, [pc, #60]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 800493e:	2200      	movs	r2, #0
 8004940:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8004942:	4b0e      	ldr	r3, [pc, #56]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004944:	2200      	movs	r2, #0
 8004946:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8004948:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 800494a:	2200      	movs	r2, #0
 800494c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004950:	2200      	movs	r2, #0
 8004952:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8004954:	4b09      	ldr	r3, [pc, #36]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004956:	2200      	movs	r2, #0
 8004958:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 800495c:	2200      	movs	r2, #0
 800495e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004962:	2200      	movs	r2, #0
 8004964:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8004966:	4805      	ldr	r0, [pc, #20]	@ (800497c <MX_USB_PCD_Init+0x5c>)
 8004968:	f001 fb78 	bl	800605c <HAL_PCD_Init>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8004972:	f000 f8bf 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	2003af90 	.word	0x2003af90
 8004980:	40016000 	.word	0x40016000

08004984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	@ 0x28
 8004988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800499a:	4b51      	ldr	r3, [pc, #324]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049aa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049b8:	4b49      	ldr	r3, [pc, #292]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049be:	4a48      	ldr	r2, [pc, #288]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049c8:	4b45      	ldr	r3, [pc, #276]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d6:	4b42      	ldr	r3, [pc, #264]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049dc:	4a40      	ldr	r2, [pc, #256]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049e6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049fa:	4a39      	ldr	r2, [pc, #228]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a04:	4b36      	ldr	r3, [pc, #216]	@ (8004ae0 <MX_GPIO_Init+0x15c>)
 8004a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8004a12:	2200      	movs	r2, #0
 8004a14:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8004a18:	4832      	ldr	r0, [pc, #200]	@ (8004ae4 <MX_GPIO_Init+0x160>)
 8004a1a:	f001 f9c5 	bl	8005da8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f240 1101 	movw	r1, #257	@ 0x101
 8004a24:	4830      	ldr	r0, [pc, #192]	@ (8004ae8 <MX_GPIO_Init+0x164>)
 8004a26:	f001 f9bf 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004a30:	482d      	ldr	r0, [pc, #180]	@ (8004ae8 <MX_GPIO_Init+0x164>)
 8004a32:	f001 f9b9 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8004a36:	2201      	movs	r2, #1
 8004a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a3c:	482b      	ldr	r0, [pc, #172]	@ (8004aec <MX_GPIO_Init+0x168>)
 8004a3e:	f001 f9b3 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8004a42:	f24a 0313 	movw	r3, #40979	@ 0xa013
 8004a46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4822      	ldr	r0, [pc, #136]	@ (8004ae4 <MX_GPIO_Init+0x160>)
 8004a5c:	f001 f83a 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <MX_GPIO_Init+0x16c>)
 8004a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a6e:	f107 0314 	add.w	r3, r7, #20
 8004a72:	4619      	mov	r1, r3
 8004a74:	481b      	ldr	r0, [pc, #108]	@ (8004ae4 <MX_GPIO_Init+0x160>)
 8004a76:	f001 f82d 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	4813      	ldr	r0, [pc, #76]	@ (8004ae4 <MX_GPIO_Init+0x160>)
 8004a96:	f001 f81d 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 8004a9a:	f240 5321 	movw	r3, #1313	@ 0x521
 8004a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	480d      	ldr	r0, [pc, #52]	@ (8004ae8 <MX_GPIO_Init+0x164>)
 8004ab4:	f001 f80e 	bl	8005ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4806      	ldr	r0, [pc, #24]	@ (8004aec <MX_GPIO_Init+0x168>)
 8004ad2:	f000 ffff 	bl	8005ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ad6:	bf00      	nop
 8004ad8:	3728      	adds	r7, #40	@ 0x28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	44020c00 	.word	0x44020c00
 8004ae4:	42020800 	.word	0x42020800
 8004ae8:	42020400 	.word	0x42020400
 8004aec:	42020000 	.word	0x42020000
 8004af0:	10110000 	.word	0x10110000

08004af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004af8:	b672      	cpsid	i
}
 8004afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004afc:	bf00      	nop
 8004afe:	e7fd      	b.n	8004afc <Error_Handler+0x8>

08004b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b0be      	sub	sp, #248	@ 0xf8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	22d0      	movs	r2, #208	@ 0xd0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f009 fe3e 	bl	800e7b2 <memset>
  if(hi2c->Instance==I2C1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <HAL_I2C_MspInit+0xc4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d145      	bne.n	8004bcc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b52:	f107 0310 	add.w	r3, r7, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fafe 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8004b62:	f7ff ffc7 	bl	8004af4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b66:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b76:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b84:	23c0      	movs	r3, #192	@ 0xc0
 8004b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b8a:	2312      	movs	r3, #18
 8004b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	480c      	ldr	r0, [pc, #48]	@ (8004bdc <HAL_I2C_MspInit+0xcc>)
 8004baa:	f000 ff93 	bl	8005ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bae:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bb4:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004bb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_I2C_MspInit+0xc8>)
 8004bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004bcc:	bf00      	nop
 8004bce:	37f8      	adds	r7, #248	@ 0xf8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40005400 	.word	0x40005400
 8004bd8:	44020c00 	.word	0x44020c00
 8004bdc:	42020400 	.word	0x42020400

08004be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0be      	sub	sp, #248	@ 0xf8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	22d0      	movs	r2, #208	@ 0xd0
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f009 fdd6 	bl	800e7b2 <memset>
  if(hspi->Instance==SPI1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <HAL_SPI_MspInit+0xf0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d15a      	bne.n	8004cc6 <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004c10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f002 fa96 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8004c32:	f7ff ff5f 	bl	8004af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c36:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c3c:	4a25      	ldr	r2, [pc, #148]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c42:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <HAL_SPI_MspInit+0xf4>)
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004c72:	23a0      	movs	r3, #160	@ 0xa0
 8004c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4810      	ldr	r0, [pc, #64]	@ (8004cd8 <HAL_SPI_MspInit+0xf8>)
 8004c98:	f000 ff1c 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c9c:	2340      	movs	r3, #64	@ 0x40
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cb4:	2305      	movs	r3, #5
 8004cb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4805      	ldr	r0, [pc, #20]	@ (8004cd8 <HAL_SPI_MspInit+0xf8>)
 8004cc2:	f000 ff07 	bl	8005ad4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004cc6:	bf00      	nop
 8004cc8:	37f8      	adds	r7, #248	@ 0xf8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40013000 	.word	0x40013000
 8004cd4:	44020c00 	.word	0x44020c00
 8004cd8:	42020000 	.word	0x42020000

08004cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d117      	bne.n	8004d1e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cee:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf4:	4a37      	ldr	r2, [pc, #220]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	202d      	movs	r0, #45	@ 0x2d
 8004d12:	f000 fe07 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d16:	202d      	movs	r0, #45	@ 0x2d
 8004d18:	f000 fe1e 	bl	8005958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004d1c:	e055      	b.n	8004dca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd8 <HAL_TIM_Base_MspInit+0xfc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d117      	bne.n	8004d58 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d28:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d2e:	4a29      	ldr	r2, [pc, #164]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2100      	movs	r1, #0
 8004d4a:	202e      	movs	r0, #46	@ 0x2e
 8004d4c:	f000 fdea 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d50:	202e      	movs	r0, #46	@ 0x2e
 8004d52:	f000 fe01 	bl	8005958 <HAL_NVIC_EnableIRQ>
}
 8004d56:	e038      	b.n	8004dca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <HAL_TIM_Base_MspInit+0x100>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d117      	bne.n	8004d92 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d62:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d6a:	f043 0308 	orr.w	r3, r3, #8
 8004d6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d72:	4b18      	ldr	r3, [pc, #96]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2100      	movs	r1, #0
 8004d84:	2030      	movs	r0, #48	@ 0x30
 8004d86:	f000 fdcd 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d8a:	2030      	movs	r0, #48	@ 0x30
 8004d8c:	f000 fde4 	bl	8005958 <HAL_NVIC_EnableIRQ>
}
 8004d90:	e01b      	b.n	8004dca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <HAL_TIM_Base_MspInit+0x104>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d116      	bne.n	8004dca <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004d9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004da2:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_TIM_Base_MspInit+0xf8>)
 8004dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2047      	movs	r0, #71	@ 0x47
 8004dc0:	f000 fdb0 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004dc4:	2047      	movs	r0, #71	@ 0x47
 8004dc6:	f000 fdc7 	bl	8005958 <HAL_NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	44020c00 	.word	0x44020c00
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d11f      	bne.n	8004e46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e06:	4b36      	ldr	r3, [pc, #216]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0c:	4a34      	ldr	r2, [pc, #208]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e16:	4b32      	ldr	r3, [pc, #200]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e24:	2302      	movs	r3, #2
 8004e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e34:	2301      	movs	r3, #1
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4829      	ldr	r0, [pc, #164]	@ (8004ee4 <HAL_TIM_MspPostInit+0x100>)
 8004e40:	f000 fe48 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004e44:	e048      	b.n	8004ed8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a27      	ldr	r2, [pc, #156]	@ (8004ee8 <HAL_TIM_MspPostInit+0x104>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d11f      	bne.n	8004e90 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e50:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e56:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e60:	4b1f      	ldr	r3, [pc, #124]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	4619      	mov	r1, r3
 8004e88:	4818      	ldr	r0, [pc, #96]	@ (8004eec <HAL_TIM_MspPostInit+0x108>)
 8004e8a:	f000 fe23 	bl	8005ad4 <HAL_GPIO_Init>
}
 8004e8e:	e023      	b.n	8004ed8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <HAL_TIM_MspPostInit+0x10c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d11e      	bne.n	8004ed8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9a:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <HAL_TIM_MspPostInit+0xfc>)
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ecc:	f107 0314 	add.w	r3, r7, #20
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4804      	ldr	r0, [pc, #16]	@ (8004ee4 <HAL_TIM_MspPostInit+0x100>)
 8004ed4:	f000 fdfe 	bl	8005ad4 <HAL_GPIO_Init>
}
 8004ed8:	bf00      	nop
 8004eda:	3728      	adds	r7, #40	@ 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	44020c00 	.word	0x44020c00
 8004ee4:	42020000 	.word	0x42020000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	42020400 	.word	0x42020400
 8004ef0:	40000c00 	.word	0x40000c00

08004ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b0c4      	sub	sp, #272	@ 0x110
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004efe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004f02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f18:	22d0      	movs	r2, #208	@ 0xd0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f009 fc48 	bl	800e7b2 <memset>
  if(huart->Instance==UART5)
 8004f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a92      	ldr	r2, [pc, #584]	@ (8005178 <HAL_UART_MspInit+0x284>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d16c      	bne.n	800500e <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004f34:	f04f 0210 	mov.w	r2, #16
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f002 f904 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8004f56:	f7ff fdcd 	bl	8004af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004f5a:	4b88      	ldr	r3, [pc, #544]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f60:	4a86      	ldr	r2, [pc, #536]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f66:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004f6a:	4b84      	ldr	r3, [pc, #528]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f78:	4b80      	ldr	r3, [pc, #512]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f7e:	4a7f      	ldr	r2, [pc, #508]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004f88:	4b7c      	ldr	r3, [pc, #496]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	4b79      	ldr	r3, [pc, #484]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9c:	4a77      	ldr	r2, [pc, #476]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fa6:	4b75      	ldr	r3, [pc, #468]	@ (800517c <HAL_UART_MspInit+0x288>)
 8004fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004fb4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004fce:	230e      	movs	r3, #14
 8004fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4869      	ldr	r0, [pc, #420]	@ (8005180 <HAL_UART_MspInit+0x28c>)
 8004fdc:	f000 fd7a 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fe0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005000:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8005004:	4619      	mov	r1, r3
 8005006:	485f      	ldr	r0, [pc, #380]	@ (8005184 <HAL_UART_MspInit+0x290>)
 8005008:	f000 fd64 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800500c:	e0af      	b.n	800516e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 800500e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5b      	ldr	r2, [pc, #364]	@ (8005188 <HAL_UART_MspInit+0x294>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d147      	bne.n	80050b0 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005020:	f04f 0201 	mov.w	r2, #1
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f88e 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8005042:	f7ff fd57 	bl	8004af4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005046:	4b4d      	ldr	r3, [pc, #308]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800504c:	4a4b      	ldr	r2, [pc, #300]	@ (800517c <HAL_UART_MspInit+0x288>)
 800504e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005052:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8005056:	4b49      	ldr	r3, [pc, #292]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800505c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005064:	4b45      	ldr	r3, [pc, #276]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800506a:	4a44      	ldr	r2, [pc, #272]	@ (800517c <HAL_UART_MspInit+0x288>)
 800506c:	f043 0302 	orr.w	r3, r3, #2
 8005070:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005074:	4b41      	ldr	r3, [pc, #260]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005082:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508a:	2302      	movs	r3, #2
 800508c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800509c:	2304      	movs	r3, #4
 800509e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80050a6:	4619      	mov	r1, r3
 80050a8:	4835      	ldr	r0, [pc, #212]	@ (8005180 <HAL_UART_MspInit+0x28c>)
 80050aa:	f000 fd13 	bl	8005ad4 <HAL_GPIO_Init>
}
 80050ae:	e05e      	b.n	800516e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 80050b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a33      	ldr	r2, [pc, #204]	@ (800518c <HAL_UART_MspInit+0x298>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d155      	bne.n	800516e <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80050c2:	f04f 0220 	mov.w	r2, #32
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050d8:	4618      	mov	r0, r3
 80050da:	f002 f83d 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80050e4:	f7ff fd06 	bl	8004af4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80050e8:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_UART_MspInit+0x288>)
 80050ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ee:	4a23      	ldr	r2, [pc, #140]	@ (800517c <HAL_UART_MspInit+0x288>)
 80050f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_UART_MspInit+0x288>)
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050fe:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8005102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005106:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005110:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005114:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005116:	4b19      	ldr	r3, [pc, #100]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800511c:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_UART_MspInit+0x288>)
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <HAL_UART_MspInit+0x288>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800512c:	f003 0204 	and.w	r2, r3, #4
 8005130:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800513e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005142:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005144:	23c0      	movs	r3, #192	@ 0xc0
 8005146:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	2302      	movs	r3, #2
 800514c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005156:	2300      	movs	r3, #0
 8005158:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800515c:	2307      	movs	r3, #7
 800515e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005162:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8005166:	4619      	mov	r1, r3
 8005168:	4806      	ldr	r0, [pc, #24]	@ (8005184 <HAL_UART_MspInit+0x290>)
 800516a:	f000 fcb3 	bl	8005ad4 <HAL_GPIO_Init>
}
 800516e:	bf00      	nop
 8005170:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40005000 	.word	0x40005000
 800517c:	44020c00 	.word	0x44020c00
 8005180:	42020400 	.word	0x42020400
 8005184:	42020800 	.word	0x42020800
 8005188:	40013800 	.word	0x40013800
 800518c:	40006400 	.word	0x40006400

08005190 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0b8      	sub	sp, #224	@ 0xe0
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	22d0      	movs	r2, #208	@ 0xd0
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f009 fb06 	bl	800e7b2 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <HAL_PCD_MspInit+0x70>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d123      	bne.n	80051f8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0310 	mov.w	r3, #16
 80051b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80051bc:	2330      	movs	r3, #48	@ 0x30
 80051be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 ffc6 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80051d2:	f7ff fc8f 	bl	8004af4 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 80051d6:	f001 f835 	bl	8006244 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <HAL_PCD_MspInit+0x74>)
 80051dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051e0:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <HAL_PCD_MspInit+0x74>)
 80051e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051e6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80051ea:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <HAL_PCD_MspInit+0x74>)
 80051ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80051f8:	bf00      	nop
 80051fa:	37e0      	adds	r7, #224	@ 0xe0
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40016000 	.word	0x40016000
 8005204:	44020c00 	.word	0x44020c00

08005208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <NMI_Handler+0x4>

08005210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <HardFault_Handler+0x4>

08005218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <MemManage_Handler+0x4>

08005220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <BusFault_Handler+0x4>

08005228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <UsageFault_Handler+0x4>

08005230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800525e:	f000 fa65 	bl	800572c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 800526c:	2102      	movs	r1, #2
 800526e:	4809      	ldr	r0, [pc, #36]	@ (8005294 <TIM2_IRQHandler+0x2c>)
 8005270:	f000 fd82 	bl	8005d78 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 800527a:	2201      	movs	r2, #1
 800527c:	2104      	movs	r1, #4
 800527e:	4806      	ldr	r0, [pc, #24]	@ (8005298 <TIM2_IRQHandler+0x30>)
 8005280:	f7fe fd68 	bl	8003d54 <Ramp_Out>
		Mototr_Poz_Inc(1);
 8005284:	2001      	movs	r0, #1
 8005286:	f7fe fc69 	bl	8003b5c <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800528a:	4803      	ldr	r0, [pc, #12]	@ (8005298 <TIM2_IRQHandler+0x30>)
 800528c:	f006 fa72 	bl	800b774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	42020000 	.word	0x42020000
 8005298:	2003aca4 	.word	0x2003aca4

0800529c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 80052a0:	2102      	movs	r1, #2
 80052a2:	4809      	ldr	r0, [pc, #36]	@ (80052c8 <TIM3_IRQHandler+0x2c>)
 80052a4:	f000 fd68 	bl	8005d78 <HAL_GPIO_ReadPin>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d107      	bne.n	80052be <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 80052ae:	2202      	movs	r2, #2
 80052b0:	210c      	movs	r1, #12
 80052b2:	4806      	ldr	r0, [pc, #24]	@ (80052cc <TIM3_IRQHandler+0x30>)
 80052b4:	f7fe fd4e 	bl	8003d54 <Ramp_Out>
		Mototr_Poz_Inc(2);
 80052b8:	2002      	movs	r0, #2
 80052ba:	f7fe fc4f 	bl	8003b5c <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80052be:	4803      	ldr	r0, [pc, #12]	@ (80052cc <TIM3_IRQHandler+0x30>)
 80052c0:	f006 fa58 	bl	800b774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	42020400 	.word	0x42020400
 80052cc:	2003acf0 	.word	0x2003acf0

080052d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 80052d4:	2101      	movs	r1, #1
 80052d6:	4809      	ldr	r0, [pc, #36]	@ (80052fc <TIM5_IRQHandler+0x2c>)
 80052d8:	f000 fd4e 	bl	8005d78 <HAL_GPIO_ReadPin>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	4806      	ldr	r0, [pc, #24]	@ (8005300 <TIM5_IRQHandler+0x30>)
 80052e8:	f7fe fd34 	bl	8003d54 <Ramp_Out>
		  Mototr_Poz_Inc(0);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f7fe fc35 	bl	8003b5c <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80052f2:	4803      	ldr	r0, [pc, #12]	@ (8005300 <TIM5_IRQHandler+0x30>)
 80052f4:	f006 fa3e 	bl	800b774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	42020000 	.word	0x42020000
 8005300:	2003ad3c 	.word	0x2003ad3c

08005304 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005308:	4802      	ldr	r0, [pc, #8]	@ (8005314 <TIM15_IRQHandler+0x10>)
 800530a:	f006 fa33 	bl	800b774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	2003ad88 	.word	0x2003ad88

08005318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return 1;
 800531c:	2301      	movs	r3, #1
}
 800531e:	4618      	mov	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <_kill>:

int _kill(int pid, int sig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005332:	f009 fa91 	bl	800e858 <__errno>
 8005336:	4603      	mov	r3, r0
 8005338:	2216      	movs	r2, #22
 800533a:	601a      	str	r2, [r3, #0]
  return -1;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_exit>:

void _exit (int status)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005350:	f04f 31ff 	mov.w	r1, #4294967295
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ffe7 	bl	8005328 <_kill>
  while (1) {}    /* Make sure we hang here */
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <_exit+0x12>

0800535e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e00a      	b.n	8005386 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005370:	f3af 8000 	nop.w
 8005374:	4601      	mov	r1, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	60ba      	str	r2, [r7, #8]
 800537c:	b2ca      	uxtb	r2, r1
 800537e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3301      	adds	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	dbf0      	blt.n	8005370 <_read+0x12>
  }

  return len;
 800538e:	687b      	ldr	r3, [r7, #4]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e009      	b.n	80053be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	60ba      	str	r2, [r7, #8]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3301      	adds	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	dbf1      	blt.n	80053aa <_write+0x12>
  }
  return len;
 80053c6:	687b      	ldr	r3, [r7, #4]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_close>:

int _close(int file)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053f8:	605a      	str	r2, [r3, #4]
  return 0;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <_isatty>:

int _isatty(int file)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005410:	2301      	movs	r3, #1
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005440:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <_sbrk+0x5c>)
 8005442:	4b15      	ldr	r3, [pc, #84]	@ (8005498 <_sbrk+0x60>)
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800544c:	4b13      	ldr	r3, [pc, #76]	@ (800549c <_sbrk+0x64>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005454:	4b11      	ldr	r3, [pc, #68]	@ (800549c <_sbrk+0x64>)
 8005456:	4a12      	ldr	r2, [pc, #72]	@ (80054a0 <_sbrk+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <_sbrk+0x64>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	429a      	cmp	r2, r3
 8005466:	d207      	bcs.n	8005478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005468:	f009 f9f6 	bl	800e858 <__errno>
 800546c:	4603      	mov	r3, r0
 800546e:	220c      	movs	r2, #12
 8005470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	e009      	b.n	800548c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005478:	4b08      	ldr	r3, [pc, #32]	@ (800549c <_sbrk+0x64>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800547e:	4b07      	ldr	r3, [pc, #28]	@ (800549c <_sbrk+0x64>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	4a05      	ldr	r2, [pc, #20]	@ (800549c <_sbrk+0x64>)
 8005488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20044000 	.word	0x20044000
 8005498:	00000400 	.word	0x00000400
 800549c:	2003b270 	.word	0x2003b270
 80054a0:	2003b3c8 	.word	0x2003b3c8

080054a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80054aa:	4b35      	ldr	r3, [pc, #212]	@ (8005580 <SystemInit+0xdc>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	4a33      	ldr	r2, [pc, #204]	@ (8005580 <SystemInit+0xdc>)
 80054b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80054ba:	4b32      	ldr	r3, [pc, #200]	@ (8005584 <SystemInit+0xe0>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80054c0:	4b30      	ldr	r3, [pc, #192]	@ (8005584 <SystemInit+0xe0>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80054c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005584 <SystemInit+0xe0>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80054cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005584 <SystemInit+0xe0>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	492c      	ldr	r1, [pc, #176]	@ (8005584 <SystemInit+0xe0>)
 80054d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005588 <SystemInit+0xe4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80054d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005584 <SystemInit+0xe0>)
 80054da:	2200      	movs	r2, #0
 80054dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80054de:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <SystemInit+0xe0>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80054e4:	4b27      	ldr	r3, [pc, #156]	@ (8005584 <SystemInit+0xe0>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80054ea:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <SystemInit+0xe0>)
 80054ec:	4a27      	ldr	r2, [pc, #156]	@ (800558c <SystemInit+0xe8>)
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80054f0:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <SystemInit+0xe0>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <SystemInit+0xe0>)
 80054f8:	4a24      	ldr	r2, [pc, #144]	@ (800558c <SystemInit+0xe8>)
 80054fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80054fc:	4b21      	ldr	r3, [pc, #132]	@ (8005584 <SystemInit+0xe0>)
 80054fe:	2200      	movs	r2, #0
 8005500:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <SystemInit+0xe0>)
 8005504:	4a21      	ldr	r2, [pc, #132]	@ (800558c <SystemInit+0xe8>)
 8005506:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005508:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <SystemInit+0xe0>)
 800550a:	2200      	movs	r2, #0
 800550c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800550e:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <SystemInit+0xe0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1c      	ldr	r2, [pc, #112]	@ (8005584 <SystemInit+0xe0>)
 8005514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005518:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800551a:	4b1a      	ldr	r3, [pc, #104]	@ (8005584 <SystemInit+0xe0>)
 800551c:	2200      	movs	r2, #0
 800551e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005520:	4b17      	ldr	r3, [pc, #92]	@ (8005580 <SystemInit+0xdc>)
 8005522:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005526:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005528:	4b19      	ldr	r3, [pc, #100]	@ (8005590 <SystemInit+0xec>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005530:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8005538:	d003      	beq.n	8005542 <SystemInit+0x9e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005540:	d117      	bne.n	8005572 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <SystemInit+0xec>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800554e:	4b10      	ldr	r3, [pc, #64]	@ (8005590 <SystemInit+0xec>)
 8005550:	4a10      	ldr	r2, [pc, #64]	@ (8005594 <SystemInit+0xf0>)
 8005552:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8005554:	4b0e      	ldr	r3, [pc, #56]	@ (8005590 <SystemInit+0xec>)
 8005556:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <SystemInit+0xf4>)
 8005558:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <SystemInit+0xec>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4a0c      	ldr	r2, [pc, #48]	@ (8005590 <SystemInit+0xec>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <SystemInit+0xec>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <SystemInit+0xec>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	61d3      	str	r3, [r2, #28]
  }
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000ed00 	.word	0xe000ed00
 8005584:	44020c00 	.word	0x44020c00
 8005588:	eae2eae3 	.word	0xeae2eae3
 800558c:	01010280 	.word	0x01010280
 8005590:	40022000 	.word	0x40022000
 8005594:	08192a3b 	.word	0x08192a3b
 8005598:	4c5d6e7f 	.word	0x4c5d6e7f

0800559c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800559c:	480d      	ldr	r0, [pc, #52]	@ (80055d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800559e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80055a0:	f7ff ff80 	bl	80054a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055a4:	480c      	ldr	r0, [pc, #48]	@ (80055d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80055a6:	490d      	ldr	r1, [pc, #52]	@ (80055dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80055a8:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <LoopForever+0xe>)
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055ac:	e002      	b.n	80055b4 <LoopCopyDataInit>

080055ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055b2:	3304      	adds	r3, #4

080055b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b8:	d3f9      	bcc.n	80055ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ba:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055bc:	4c0a      	ldr	r4, [pc, #40]	@ (80055e8 <LoopForever+0x16>)
  movs r3, #0
 80055be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c0:	e001      	b.n	80055c6 <LoopFillZerobss>

080055c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c4:	3204      	adds	r2, #4

080055c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c8:	d3fb      	bcc.n	80055c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055ca:	f009 f94b 	bl	800e864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055ce:	f7fe fd9f 	bl	8004110 <main>

080055d2 <LoopForever>:

LoopForever:
    b LoopForever
 80055d2:	e7fe      	b.n	80055d2 <LoopForever>
  ldr   r0, =_estack
 80055d4:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80055d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055dc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80055e0:	08015178 	.word	0x08015178
  ldr r2, =_sbss
 80055e4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80055e8:	2003b3c4 	.word	0x2003b3c4

080055ec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055ec:	e7fe      	b.n	80055ec <ADC1_IRQHandler>
	...

080055f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055f4:	2003      	movs	r0, #3
 80055f6:	f000 f98a 	bl	800590e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80055fa:	f001 fc23 	bl	8006e44 <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <HAL_Init+0x44>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	490b      	ldr	r1, [pc, #44]	@ (8005638 <HAL_Init+0x48>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	4a0a      	ldr	r2, [pc, #40]	@ (800563c <HAL_Init+0x4c>)
 8005612:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005614:	2004      	movs	r0, #4
 8005616:	f000 f9cf 	bl	80059b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800561a:	200f      	movs	r0, #15
 800561c:	f000 f810 	bl	8005640 <HAL_InitTick>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e002      	b.n	8005630 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800562a:	f7ff fa69 	bl	8004b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	44020c00 	.word	0x44020c00
 8005638:	08014a80 	.word	0x08014a80
 800563c:	2000001c 	.word	0x2000001c

08005640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800564c:	4b33      	ldr	r3, [pc, #204]	@ (800571c <HAL_InitTick+0xdc>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e05c      	b.n	8005712 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8005658:	4b31      	ldr	r3, [pc, #196]	@ (8005720 <HAL_InitTick+0xe0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d10c      	bne.n	800567e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005664:	4b2f      	ldr	r3, [pc, #188]	@ (8005724 <HAL_InitTick+0xe4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <HAL_InitTick+0xdc>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4619      	mov	r1, r3
 800566e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005672:	fbb3 f3f1 	udiv	r3, r3, r1
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e037      	b.n	80056ee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800567e:	f000 f9f3 	bl	8005a68 <HAL_SYSTICK_GetCLKSourceConfig>
 8005682:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d023      	beq.n	80056d2 <HAL_InitTick+0x92>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d82d      	bhi.n	80056ec <HAL_InitTick+0xac>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_InitTick+0x5e>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d00d      	beq.n	80056b8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800569c:	e026      	b.n	80056ec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800569e:	4b21      	ldr	r3, [pc, #132]	@ (8005724 <HAL_InitTick+0xe4>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <HAL_InitTick+0xdc>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80056ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	60fb      	str	r3, [r7, #12]
        break;
 80056b6:	e01a      	b.n	80056ee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80056b8:	4b18      	ldr	r3, [pc, #96]	@ (800571c <HAL_InitTick+0xdc>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	60fb      	str	r3, [r7, #12]
        break;
 80056d0:	e00d      	b.n	80056ee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80056d2:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_InitTick+0xdc>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	60fb      	str	r3, [r7, #12]
        break;
 80056ea:	e000      	b.n	80056ee <HAL_InitTick+0xae>
        break;
 80056ec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f940 	bl	8005974 <HAL_SYSTICK_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e009      	b.n	8005712 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056fe:	2200      	movs	r2, #0
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295
 8005706:	f000 f90d 	bl	8005924 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800570a:	4a07      	ldr	r2, [pc, #28]	@ (8005728 <HAL_InitTick+0xe8>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000024 	.word	0x20000024
 8005720:	e000e010 	.word	0xe000e010
 8005724:	2000001c 	.word	0x2000001c
 8005728:	20000020 	.word	0x20000020

0800572c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <HAL_IncTick+0x20>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <HAL_IncTick+0x24>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4413      	add	r3, r2
 800573c:	4a04      	ldr	r2, [pc, #16]	@ (8005750 <HAL_IncTick+0x24>)
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000024 	.word	0x20000024
 8005750:	2003b274 	.word	0x2003b274

08005754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return uwTick;
 8005758:	4b03      	ldr	r3, [pc, #12]	@ (8005768 <HAL_GetTick+0x14>)
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	2003b274 	.word	0x2003b274

0800576c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005774:	f7ff ffee 	bl	8005754 <HAL_GetTick>
 8005778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d005      	beq.n	8005792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005786:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <HAL_Delay+0x44>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005792:	bf00      	nop
 8005794:	f7ff ffde 	bl	8005754 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d8f7      	bhi.n	8005794 <HAL_Delay+0x28>
  {
  }
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000024 	.word	0x20000024

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4907      	ldr	r1, [pc, #28]	@ (8005850 <__NVIC_EnableIRQ+0x38>)
 8005832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	@ (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	@ 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ff4c 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005932:	f7ff ff63 	bl	80057fc <__NVIC_GetPriorityGrouping>
 8005936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f7ff ffb3 	bl	80058a8 <NVIC_EncodePriority>
 8005942:	4602      	mov	r2, r0
 8005944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff ff82 	bl	8005854 <__NVIC_SetPriority>
}
 8005950:	bf00      	nop
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff56 	bl	8005818 <__NVIC_EnableIRQ>
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005984:	d301      	bcc.n	800598a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005986:	2301      	movs	r3, #1
 8005988:	e00d      	b.n	80059a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800598a:	4a0a      	ldr	r2, [pc, #40]	@ (80059b4 <HAL_SYSTICK_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005992:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <HAL_SYSTICK_Config+0x40>)
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <HAL_SYSTICK_Config+0x40>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a05      	ldr	r2, [pc, #20]	@ (80059b4 <HAL_SYSTICK_Config+0x40>)
 800599e:	f043 0303 	orr.w	r3, r3, #3
 80059a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d844      	bhi.n	8005a50 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059ef 	.word	0x080059ef
 80059d0:	08005a0d 	.word	0x08005a0d
 80059d4:	08005a2f 	.word	0x08005a2f
 80059d8:	08005a51 	.word	0x08005a51
 80059dc:	080059e1 	.word	0x080059e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	6013      	str	r3, [r2, #0]
      break;
 80059ec:	e031      	b.n	8005a52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80059fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a00:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a02:	f023 030c 	bic.w	r3, r3, #12
 8005a06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a0a:	e022      	b.n	8005a52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005a0c:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a13      	ldr	r2, [pc, #76]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a12:	f023 0304 	bic.w	r3, r3, #4
 8005a16:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005a18:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a1e:	f023 030c 	bic.w	r3, r3, #12
 8005a22:	4a10      	ldr	r2, [pc, #64]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a2c:	e011      	b.n	8005a52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a0b      	ldr	r2, [pc, #44]	@ (8005a60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a40:	f023 030c 	bic.w	r3, r3, #12
 8005a44:	4a07      	ldr	r2, [pc, #28]	@ (8005a64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a46:	f043 0308 	orr.w	r3, r3, #8
 8005a4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a4e:	e000      	b.n	8005a52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005a50:	bf00      	nop
  }
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000e010 	.word	0xe000e010
 8005a64:	44020c00 	.word	0x44020c00

08005a68 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005a6e:	4b17      	ldr	r3, [pc, #92]	@ (8005acc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e01e      	b.n	8005abe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8005a80:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8005a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d00f      	beq.n	8005ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d80f      	bhi.n	8005ab8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d003      	beq.n	8005aac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005aa4:	e008      	b.n	8005ab8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
        break;
 8005aaa:	e008      	b.n	8005abe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005aac:	2301      	movs	r3, #1
 8005aae:	607b      	str	r3, [r7, #4]
        break;
 8005ab0:	e005      	b.n	8005abe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	607b      	str	r3, [r7, #4]
        break;
 8005ab6:	e002      	b.n	8005abe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	607b      	str	r3, [r7, #4]
        break;
 8005abc:	bf00      	nop
    }
  }
  return systick_source;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	e000e010 	.word	0xe000e010
 8005ad0:	44020c00 	.word	0x44020c00

08005ad4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005ae2:	e136      	b.n	8005d52 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8128 	beq.w	8005d4c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x38>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b12      	cmp	r3, #18
 8005b0a:	d125      	bne.n	8005b58 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	08da      	lsrs	r2, r3, #3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3208      	adds	r2, #8
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	220f      	movs	r2, #15
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	08da      	lsrs	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3208      	adds	r2, #8
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	2203      	movs	r2, #3
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 0203 	and.w	r2, r3, #3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d00b      	beq.n	8005bac <HAL_GPIO_Init+0xd8>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d007      	beq.n	8005bac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ba0:	2b11      	cmp	r3, #17
 8005ba2:	d003      	beq.n	8005bac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b12      	cmp	r3, #18
 8005baa:	d130      	bne.n	8005c0e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be2:	2201      	movs	r2, #1
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	f003 0201 	and.w	r2, r3, #1
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d017      	beq.n	8005c46 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	2203      	movs	r2, #3
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d07c      	beq.n	8005d4c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005c52:	4a47      	ldr	r2, [pc, #284]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	3318      	adds	r3, #24
 8005c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	220f      	movs	r2, #15
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4013      	ands	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0a9a      	lsrs	r2, r3, #10
 8005c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d74 <HAL_GPIO_Init+0x2a0>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	f002 0203 	and.w	r2, r2, #3
 8005c84:	00d2      	lsls	r2, r2, #3
 8005c86:	4093      	lsls	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005c8e:	4938      	ldr	r1, [pc, #224]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	3318      	adds	r3, #24
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005c9c:	4b34      	ldr	r3, [pc, #208]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005cea:	4a21      	ldr	r2, [pc, #132]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005d16:	4a16      	ldr	r2, [pc, #88]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005d1e:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d24:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005d44:	4a0a      	ldr	r2, [pc, #40]	@ (8005d70 <HAL_GPIO_Init+0x29c>)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f47f aec1 	bne.w	8005ae4 <HAL_GPIO_Init+0x10>
  }
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	44022000 	.word	0x44022000
 8005d74:	002f7f7f 	.word	0x002f7f7f

08005d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e001      	b.n	8005d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dc4:	e002      	b.n	8005dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e08d      	b.n	8005f06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fe fe86 	bl	8004b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	@ 0x24
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d107      	bne.n	8005e52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	e006      	b.n	8005e60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d108      	bne.n	8005e7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	e007      	b.n	8005e8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d138      	bne.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e032      	b.n	8005f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	@ 0x24
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e000      	b.n	8005f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
  }
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d139      	bne.n	800602e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e033      	b.n	8006030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	@ 0x24
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006040:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <HAL_ICACHE_Enable+0x1c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a04      	ldr	r2, [pc, #16]	@ (8006058 <HAL_ICACHE_Enable+0x1c>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40030400 	.word	0x40030400

0800605c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af02      	add	r7, sp, #8
 8006062:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0c3      	b.n	80061f6 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff f884 	bl	8005190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2203      	movs	r2, #3
 800608c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f007 fb15 	bl	800d6c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	e03f      	b.n	8006120 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	440b      	add	r3, r1
 80060ae:	3315      	adds	r3, #21
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060b4:	7bfa      	ldrb	r2, [r7, #15]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	440b      	add	r3, r1
 80060c2:	3314      	adds	r3, #20
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060c8:	7bfa      	ldrb	r2, [r7, #15]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	440b      	add	r3, r1
 80060d6:	3317      	adds	r3, #23
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060dc:	7bfa      	ldrb	r2, [r7, #15]
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	3324      	adds	r3, #36	@ 0x24
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060f0:	7bfa      	ldrb	r2, [r7, #15]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	3328      	adds	r3, #40	@ 0x28
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	3304      	adds	r3, #4
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	3301      	adds	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	429a      	cmp	r2, r3
 8006128:	d3ba      	bcc.n	80060a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	e044      	b.n	80061ba <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	440b      	add	r3, r1
 8006154:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	440b      	add	r3, r1
 800616a:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	440b      	add	r3, r1
 8006180:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800619e:	7bfa      	ldrb	r2, [r7, #15]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	440b      	add	r3, r1
 80061ac:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	3301      	adds	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3b5      	bcc.n	8006130 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7c1a      	ldrb	r2, [r3, #16]
 80061cc:	f88d 2000 	strb.w	r2, [sp]
 80061d0:	3304      	adds	r3, #4
 80061d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d4:	f007 faae 	bl	800d734 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7b1b      	ldrb	r3, [r3, #12]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f805 	bl	80061fe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	f043 0201 	orr.w	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	f043 0202 	orr.w	r2, r3, #2
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8006248:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <HAL_PWREx_EnableVddUSB+0x1c>)
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <HAL_PWREx_EnableVddUSB+0x1c>)
 800624e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006252:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	44020800 	.word	0x44020800

08006264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f000 bc28 	b.w	8006ac8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006278:	4b94      	ldr	r3, [pc, #592]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f003 0318 	and.w	r3, r3, #24
 8006280:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006282:	4b92      	ldr	r3, [pc, #584]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05b      	beq.n	8006350 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d005      	beq.n	80062aa <HAL_RCC_OscConfig+0x46>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b18      	cmp	r3, #24
 80062a2:	d114      	bne.n	80062ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d111      	bne.n	80062ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f000 bc08 	b.w	8006ac8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80062b8:	4b84      	ldr	r3, [pc, #528]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	4981      	ldr	r1, [pc, #516]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80062cc:	e040      	b.n	8006350 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d023      	beq.n	800631e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062d6:	4b7d      	ldr	r3, [pc, #500]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a7c      	ldr	r2, [pc, #496]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80062dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e2:	f7ff fa37 	bl	8005754 <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80062ea:	f7ff fa33 	bl	8005754 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e3e5      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80062fc:	4b73      	ldr	r3, [pc, #460]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006308:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	496d      	ldr	r1, [pc, #436]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006318:	4313      	orrs	r3, r2
 800631a:	618b      	str	r3, [r1, #24]
 800631c:	e018      	b.n	8006350 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800631e:	4b6b      	ldr	r3, [pc, #428]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6a      	ldr	r2, [pc, #424]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7ff fa13 	bl	8005754 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006332:	f7ff fa0f 	bl	8005754 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e3c1      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006344:	4b61      	ldr	r3, [pc, #388]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80a0 	beq.w	800649e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b10      	cmp	r3, #16
 8006362:	d005      	beq.n	8006370 <HAL_RCC_OscConfig+0x10c>
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b18      	cmp	r3, #24
 8006368:	d109      	bne.n	800637e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d106      	bne.n	800637e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 8092 	bne.w	800649e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e3a4      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006386:	d106      	bne.n	8006396 <HAL_RCC_OscConfig+0x132>
 8006388:	4b50      	ldr	r3, [pc, #320]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a4f      	ldr	r2, [pc, #316]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800638e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e058      	b.n	8006448 <HAL_RCC_OscConfig+0x1e4>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d112      	bne.n	80063c4 <HAL_RCC_OscConfig+0x160>
 800639e:	4b4b      	ldr	r3, [pc, #300]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a4a      	ldr	r2, [pc, #296]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b48      	ldr	r3, [pc, #288]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a47      	ldr	r2, [pc, #284]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b45      	ldr	r3, [pc, #276]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a44      	ldr	r2, [pc, #272]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e041      	b.n	8006448 <HAL_RCC_OscConfig+0x1e4>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063cc:	d112      	bne.n	80063f4 <HAL_RCC_OscConfig+0x190>
 80063ce:	4b3f      	ldr	r3, [pc, #252]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3e      	ldr	r2, [pc, #248]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b3c      	ldr	r3, [pc, #240]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a3b      	ldr	r2, [pc, #236]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b39      	ldr	r3, [pc, #228]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a38      	ldr	r2, [pc, #224]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e029      	b.n	8006448 <HAL_RCC_OscConfig+0x1e4>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80063fc:	d112      	bne.n	8006424 <HAL_RCC_OscConfig+0x1c0>
 80063fe:	4b33      	ldr	r3, [pc, #204]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a32      	ldr	r2, [pc, #200]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b30      	ldr	r3, [pc, #192]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2f      	ldr	r2, [pc, #188]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006410:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b2d      	ldr	r3, [pc, #180]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e011      	b.n	8006448 <HAL_RCC_OscConfig+0x1e4>
 8006424:	4b29      	ldr	r3, [pc, #164]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a28      	ldr	r2, [pc, #160]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800642a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a25      	ldr	r2, [pc, #148]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4b23      	ldr	r3, [pc, #140]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a22      	ldr	r2, [pc, #136]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006442:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7ff f980 	bl	8005754 <HAL_GetTick>
 8006454:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006458:	f7ff f97c 	bl	8005754 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	@ 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e32e      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800646a:	4b18      	ldr	r3, [pc, #96]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x1f4>
 8006476:	e012      	b.n	800649e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7ff f96c 	bl	8005754 <HAL_GetTick>
 800647c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006480:	f7ff f968 	bl	8005754 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	@ 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e31a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006492:	4b0e      	ldr	r3, [pc, #56]	@ (80064cc <HAL_RCC_OscConfig+0x268>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 809a 	beq.w	80065e0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_RCC_OscConfig+0x25a>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2b18      	cmp	r3, #24
 80064b6:	d149      	bne.n	800654c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d146      	bne.n	800654c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e2fe      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
 80064ca:	bf00      	nop
 80064cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d11c      	bne.n	8006510 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80064d6:	4b9a      	ldr	r3, [pc, #616]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0218 	and.w	r2, r3, #24
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d014      	beq.n	8006510 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80064e6:	4b96      	ldr	r3, [pc, #600]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 0218 	bic.w	r2, r3, #24
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	4993      	ldr	r1, [pc, #588]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80064f8:	f000 fdd0 	bl	800709c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80064fc:	4b91      	ldr	r3, [pc, #580]	@ (8006744 <HAL_RCC_OscConfig+0x4e0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff f89d 	bl	8005640 <HAL_InitTick>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e2db      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7ff f920 	bl	8005754 <HAL_GetTick>
 8006514:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006518:	f7ff f91c 	bl	8005754 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e2ce      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800652a:	4b85      	ldr	r3, [pc, #532]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006536:	4b82      	ldr	r3, [pc, #520]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	497e      	ldr	r1, [pc, #504]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800654a:	e049      	b.n	80065e0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02c      	beq.n	80065ae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006554:	4b7a      	ldr	r3, [pc, #488]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f023 0218 	bic.w	r2, r3, #24
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	4977      	ldr	r1, [pc, #476]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8006566:	4b76      	ldr	r3, [pc, #472]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006572:	f7ff f8ef 	bl	8005754 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800657a:	f7ff f8eb 	bl	8005754 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e29d      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800658c:	4b6c      	ldr	r3, [pc, #432]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006598:	4b69      	ldr	r3, [pc, #420]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	4966      	ldr	r1, [pc, #408]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	610b      	str	r3, [r1, #16]
 80065ac:	e018      	b.n	80065e0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ae:	4b64      	ldr	r3, [pc, #400]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a63      	ldr	r2, [pc, #396]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ba:	f7ff f8cb 	bl	8005754 <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80065c2:	f7ff f8c7 	bl	8005754 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e279      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f0      	bne.n	80065c2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d03c      	beq.n	8006666 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01c      	beq.n	800662e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f4:	4b52      	ldr	r3, [pc, #328]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065fa:	4a51      	ldr	r2, [pc, #324]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80065fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7ff f8a6 	bl	8005754 <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800660c:	f7ff f8a2 	bl	8005754 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e254      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800661e:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ef      	beq.n	800660c <HAL_RCC_OscConfig+0x3a8>
 800662c:	e01b      	b.n	8006666 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800662e:	4b44      	ldr	r3, [pc, #272]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006634:	4a42      	ldr	r2, [pc, #264]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800663a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663e:	f7ff f889 	bl	8005754 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006646:	f7ff f885 	bl	8005754 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e237      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006658:	4b39      	ldr	r3, [pc, #228]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 800665a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1ef      	bne.n	8006646 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80d2 	beq.w	8006818 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006674:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <HAL_RCC_OscConfig+0x4e4>)
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d118      	bne.n	80066b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006680:	4b31      	ldr	r3, [pc, #196]	@ (8006748 <HAL_RCC_OscConfig+0x4e4>)
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	4a30      	ldr	r2, [pc, #192]	@ (8006748 <HAL_RCC_OscConfig+0x4e4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668c:	f7ff f862 	bl	8005754 <HAL_GetTick>
 8006690:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006694:	f7ff f85e 	bl	8005754 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e210      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80066a6:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <HAL_RCC_OscConfig+0x4e4>)
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d108      	bne.n	80066cc <HAL_RCC_OscConfig+0x468>
 80066ba:	4b21      	ldr	r3, [pc, #132]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066ca:	e074      	b.n	80067b6 <HAL_RCC_OscConfig+0x552>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d118      	bne.n	8006706 <HAL_RCC_OscConfig+0x4a2>
 80066d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066da:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066e4:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ea:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066f4:	4b12      	ldr	r3, [pc, #72]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066fa:	4a11      	ldr	r2, [pc, #68]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006704:	e057      	b.n	80067b6 <HAL_RCC_OscConfig+0x552>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d11e      	bne.n	800674c <HAL_RCC_OscConfig+0x4e8>
 800670e:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006714:	4a0a      	ldr	r2, [pc, #40]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006716:	f043 0304 	orr.w	r3, r3, #4
 800671a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800671e:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006724:	4a06      	ldr	r2, [pc, #24]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800672e:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006734:	4a02      	ldr	r2, [pc, #8]	@ (8006740 <HAL_RCC_OscConfig+0x4dc>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800673e:	e03a      	b.n	80067b6 <HAL_RCC_OscConfig+0x552>
 8006740:	44020c00 	.word	0x44020c00
 8006744:	20000020 	.word	0x20000020
 8006748:	44020800 	.word	0x44020800
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b85      	cmp	r3, #133	@ 0x85
 8006752:	d118      	bne.n	8006786 <HAL_RCC_OscConfig+0x522>
 8006754:	4ba2      	ldr	r3, [pc, #648]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800675a:	4aa1      	ldr	r2, [pc, #644]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800675c:	f043 0304 	orr.w	r3, r3, #4
 8006760:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006764:	4b9e      	ldr	r3, [pc, #632]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800676a:	4a9d      	ldr	r2, [pc, #628]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800676c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006770:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006774:	4b9a      	ldr	r3, [pc, #616]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800677a:	4a99      	ldr	r2, [pc, #612]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006784:	e017      	b.n	80067b6 <HAL_RCC_OscConfig+0x552>
 8006786:	4b96      	ldr	r3, [pc, #600]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800678c:	4a94      	ldr	r2, [pc, #592]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006796:	4b92      	ldr	r3, [pc, #584]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679c:	4a90      	ldr	r2, [pc, #576]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800679e:	f023 0304 	bic.w	r3, r3, #4
 80067a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067a6:	4b8e      	ldr	r3, [pc, #568]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80067a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ac:	4a8c      	ldr	r2, [pc, #560]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80067ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d016      	beq.n	80067ec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067be:	f7fe ffc9 	bl	8005754 <HAL_GetTick>
 80067c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c4:	e00a      	b.n	80067dc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c6:	f7fe ffc5 	bl	8005754 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e175      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067dc:	4b80      	ldr	r3, [pc, #512]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80067de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0ed      	beq.n	80067c6 <HAL_RCC_OscConfig+0x562>
 80067ea:	e015      	b.n	8006818 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fe ffb2 	bl	8005754 <HAL_GetTick>
 80067f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f2:	e00a      	b.n	800680a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f4:	f7fe ffae 	bl	8005754 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e15e      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680a:	4b75      	ldr	r3, [pc, #468]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800680c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ed      	bne.n	80067f4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d036      	beq.n	8006892 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d019      	beq.n	8006860 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800682c:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a6b      	ldr	r2, [pc, #428]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fe ff8c 	bl	8005754 <HAL_GetTick>
 800683c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006840:	f7fe ff88 	bl	8005754 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e13a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006852:	4b63      	ldr	r3, [pc, #396]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0x5dc>
 800685e:	e018      	b.n	8006892 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006860:	4b5f      	ldr	r3, [pc, #380]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5e      	ldr	r2, [pc, #376]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800686a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fe ff72 	bl	8005754 <HAL_GetTick>
 8006870:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006874:	f7fe ff6e 	bl	8005754 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e120      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006886:	4b56      	ldr	r3, [pc, #344]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f0      	bne.n	8006874 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8115 	beq.w	8006ac6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b18      	cmp	r3, #24
 80068a0:	f000 80af 	beq.w	8006a02 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f040 8086 	bne.w	80069ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80068ae:	4b4c      	ldr	r3, [pc, #304]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a4b      	ldr	r2, [pc, #300]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80068b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ba:	f7fe ff4b 	bl	8005754 <HAL_GetTick>
 80068be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80068c2:	f7fe ff47 	bl	8005754 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e0f9      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068d4:	4b42      	ldr	r3, [pc, #264]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80068e0:	4b3f      	ldr	r3, [pc, #252]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068f4:	0212      	lsls	r2, r2, #8
 80068f6:	430a      	orrs	r2, r1
 80068f8:	4939      	ldr	r1, [pc, #228]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	3b01      	subs	r3, #1
 8006904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	3b01      	subs	r3, #1
 800690e:	025b      	lsls	r3, r3, #9
 8006910:	b29b      	uxth	r3, r3
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	3b01      	subs	r3, #1
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	3b01      	subs	r3, #1
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800692e:	492c      	ldr	r1, [pc, #176]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006930:	4313      	orrs	r3, r2
 8006932:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006934:	4b2a      	ldr	r3, [pc, #168]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	4a29      	ldr	r2, [pc, #164]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006944:	4a26      	ldr	r2, [pc, #152]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800694a:	4b25      	ldr	r3, [pc, #148]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	4a24      	ldr	r2, [pc, #144]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006950:	f043 0310 	orr.w	r3, r3, #16
 8006954:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006956:	4b22      	ldr	r3, [pc, #136]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695a:	f023 020c 	bic.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	491f      	ldr	r1, [pc, #124]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f023 0220 	bic.w	r2, r3, #32
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006974:	491a      	ldr	r1, [pc, #104]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006976:	4313      	orrs	r3, r2
 8006978:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800697a:	4b19      	ldr	r3, [pc, #100]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800697c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697e:	4a18      	ldr	r2, [pc, #96]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006984:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006986:	4b16      	ldr	r3, [pc, #88]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 800698c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fe fedf 	bl	8005754 <HAL_GetTick>
 8006996:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800699a:	f7fe fedb 	bl	8005754 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e08d      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069ac:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x736>
 80069b8:	e085      	b.n	8006ac6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80069ba:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a08      	ldr	r2, [pc, #32]	@ (80069e0 <HAL_RCC_OscConfig+0x77c>)
 80069c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fe fec5 	bl	8005754 <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80069cc:	e00a      	b.n	80069e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80069ce:	f7fe fec1 	bl	8005754 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d903      	bls.n	80069e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e073      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
 80069e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80069e4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ee      	bne.n	80069ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80069f0:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	4a36      	ldr	r2, [pc, #216]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 80069f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a00:	e061      	b.n	8006ac6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006a02:	4b33      	ldr	r3, [pc, #204]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a08:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d031      	beq.n	8006a7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0203 	and.w	r2, r3, #3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d12a      	bne.n	8006a7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d122      	bne.n	8006a7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d11a      	bne.n	8006a7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	0a5b      	lsrs	r3, r3, #9
 8006a48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d111      	bne.n	8006a7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d108      	bne.n	8006a7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0e1b      	lsrs	r3, r3, #24
 8006a6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e024      	b.n	8006ac8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d01a      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fe fe5a 	bl	8005754 <HAL_GetTick>
 8006aa0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006aa2:	bf00      	nop
 8006aa4:	f7fe fe56 	bl	8005754 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d0f9      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab4:	4a06      	ldr	r2, [pc, #24]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006aba:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	4a04      	ldr	r2, [pc, #16]	@ (8006ad0 <HAL_RCC_OscConfig+0x86c>)
 8006ac0:	f043 0310 	orr.w	r3, r3, #16
 8006ac4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	44020c00 	.word	0x44020c00

08006ad4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e19e      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b83      	ldr	r3, [pc, #524]	@ (8006cf8 <HAL_RCC_ClockConfig+0x224>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d910      	bls.n	8006b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b80      	ldr	r3, [pc, #512]	@ (8006cf8 <HAL_RCC_ClockConfig+0x224>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 020f 	bic.w	r2, r3, #15
 8006afe:	497e      	ldr	r1, [pc, #504]	@ (8006cf8 <HAL_RCC_ClockConfig+0x224>)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b06:	4b7c      	ldr	r3, [pc, #496]	@ (8006cf8 <HAL_RCC_ClockConfig+0x224>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d001      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e186      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d012      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	4b74      	ldr	r3, [pc, #464]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d909      	bls.n	8006b4a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006b36:	4b71      	ldr	r3, [pc, #452]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	496d      	ldr	r1, [pc, #436]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d012      	beq.n	8006b7c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	4b68      	ldr	r3, [pc, #416]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d909      	bls.n	8006b7c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006b68:	4b64      	ldr	r3, [pc, #400]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	4961      	ldr	r1, [pc, #388]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d908      	bls.n	8006baa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006b98:	4b58      	ldr	r3, [pc, #352]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4955      	ldr	r1, [pc, #340]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	4b50      	ldr	r3, [pc, #320]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d908      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 020f 	bic.w	r2, r3, #15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	494a      	ldr	r1, [pc, #296]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8093 	beq.w	8006d0c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d107      	bne.n	8006bfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006bee:	4b43      	ldr	r3, [pc, #268]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d121      	bne.n	8006c3e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e113      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c06:	4b3d      	ldr	r3, [pc, #244]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d115      	bne.n	8006c3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e107      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006c1e:	4b37      	ldr	r3, [pc, #220]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e0fb      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c2e:	4b33      	ldr	r3, [pc, #204]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0f3      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f023 0203 	bic.w	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	492c      	ldr	r1, [pc, #176]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c50:	f7fe fd80 	bl	8005754 <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d112      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fe fd78 	bl	8005754 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e0d7      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c76:	4b21      	ldr	r3, [pc, #132]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 0318 	and.w	r3, r3, #24
 8006c7e:	2b18      	cmp	r3, #24
 8006c80:	d1ee      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x18c>
 8006c82:	e043      	b.n	8006d0c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d112      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c8c:	e00a      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006c8e:	f7fe fd61 	bl	8005754 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e0c0      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ca4:	4b15      	ldr	r3, [pc, #84]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f003 0318 	and.w	r3, r3, #24
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d1ee      	bne.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
 8006cb0:	e02c      	b.n	8006d0c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d122      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fe fd4a 	bl	8005754 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0a9      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <HAL_RCC_ClockConfig+0x228>)
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0318 	and.w	r3, r3, #24
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d1ee      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x1e8>
 8006cde:	e015      	b.n	8006d0c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006ce0:	f7fe fd38 	bl	8005754 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d906      	bls.n	8006d00 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e097      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
 8006cf6:	bf00      	nop
 8006cf8:	40022000 	.word	0x40022000
 8006cfc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d00:	4b4b      	ldr	r3, [pc, #300]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f003 0318 	and.w	r3, r3, #24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e9      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	4b44      	ldr	r3, [pc, #272]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d208      	bcs.n	8006d3a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006d28:	4b41      	ldr	r3, [pc, #260]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f023 020f 	bic.w	r2, r3, #15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	493e      	ldr	r1, [pc, #248]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e34 <HAL_RCC_ClockConfig+0x360>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d210      	bcs.n	8006d6a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d48:	4b3a      	ldr	r3, [pc, #232]	@ (8006e34 <HAL_RCC_ClockConfig+0x360>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f023 020f 	bic.w	r2, r3, #15
 8006d50:	4938      	ldr	r1, [pc, #224]	@ (8006e34 <HAL_RCC_ClockConfig+0x360>)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <HAL_RCC_ClockConfig+0x360>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d001      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e05d      	b.n	8006e26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d010      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d208      	bcs.n	8006d98 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006d86:	4b2a      	ldr	r3, [pc, #168]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	4927      	ldr	r1, [pc, #156]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	4b21      	ldr	r3, [pc, #132]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d209      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006db6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	491a      	ldr	r1, [pc, #104]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d012      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	4b15      	ldr	r3, [pc, #84]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d209      	bcs.n	8006dfc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	490e      	ldr	r1, [pc, #56]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006dfc:	f000 f822 	bl	8006e44 <HAL_RCC_GetSysClockFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b0b      	ldr	r3, [pc, #44]	@ (8006e30 <HAL_RCC_ClockConfig+0x35c>)
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	490b      	ldr	r1, [pc, #44]	@ (8006e38 <HAL_RCC_ClockConfig+0x364>)
 8006e0c:	5ccb      	ldrb	r3, [r1, r3]
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <HAL_RCC_ClockConfig+0x368>)
 8006e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e16:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <HAL_RCC_ClockConfig+0x36c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fc10 	bl	8005640 <HAL_InitTick>
 8006e20:	4603      	mov	r3, r0
 8006e22:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006e24:	7afb      	ldrb	r3, [r7, #11]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	44020c00 	.word	0x44020c00
 8006e34:	40022000 	.word	0x40022000
 8006e38:	08014a80 	.word	0x08014a80
 8006e3c:	2000001c 	.word	0x2000001c
 8006e40:	20000020 	.word	0x20000020

08006e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0318 	and.w	r3, r3, #24
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d102      	bne.n	8006e5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e56:	4b8a      	ldr	r3, [pc, #552]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e107      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e5c:	4b87      	ldr	r3, [pc, #540]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f003 0318 	and.w	r3, r3, #24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d112      	bne.n	8006e8e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006e68:	4b84      	ldr	r3, [pc, #528]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e74:	4b81      	ldr	r3, [pc, #516]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a81      	ldr	r2, [pc, #516]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x240>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	e0f1      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006e88:	4b7e      	ldr	r3, [pc, #504]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x240>)
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	e0ee      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f003 0318 	and.w	r3, r3, #24
 8006e96:	2b10      	cmp	r3, #16
 8006e98:	d102      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8007088 <HAL_RCC_GetSysClockFreq+0x244>)
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	e0e5      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ea0:	4b76      	ldr	r3, [pc, #472]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f003 0318 	and.w	r3, r3, #24
 8006ea8:	2b18      	cmp	r3, #24
 8006eaa:	f040 80dd 	bne.w	8007068 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006eae:	4b73      	ldr	r3, [pc, #460]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006eb8:	4b70      	ldr	r3, [pc, #448]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	0a1b      	lsrs	r3, r3, #8
 8006ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ec2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80b7 	beq.w	8007062 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCC_GetSysClockFreq+0xbe>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d056      	beq.n	8006fae <HAL_RCC_GetSysClockFreq+0x16a>
 8006f00:	e077      	b.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006f02:	4b5e      	ldr	r3, [pc, #376]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d02d      	beq.n	8006f6a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	08db      	lsrs	r3, r3, #3
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	4a5a      	ldr	r2, [pc, #360]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x240>)
 8006f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f38:	4b50      	ldr	r3, [pc, #320]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f48:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800708c <HAL_RCC_GetSysClockFreq+0x248>
 8006f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f64:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006f68:	e065      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f74:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007090 <HAL_RCC_GetSysClockFreq+0x24c>
 8006f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f90:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800708c <HAL_RCC_GetSysClockFreq+0x248>
 8006f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006fac:	e043      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007094 <HAL_RCC_GetSysClockFreq+0x250>
 8006fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800708c <HAL_RCC_GetSysClockFreq+0x248>
 8006fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006ff0:	e021      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007098 <HAL_RCC_GetSysClockFreq+0x254>
 8007000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8007006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007014:	ed97 6a02 	vldr	s12, [r7, #8]
 8007018:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800708c <HAL_RCC_GetSysClockFreq+0x248>
 800701c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007020:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007028:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800702c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007030:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007034:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007036:	4b11      	ldr	r3, [pc, #68]	@ (800707c <HAL_RCC_GetSysClockFreq+0x238>)
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	0a5b      	lsrs	r3, r3, #9
 800703c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007040:	3301      	adds	r3, #1
 8007042:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800704e:	edd7 6a06 	vldr	s13, [r7, #24]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 3a90 	vmov	r3, s15
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e004      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	e001      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x240>)
 800706a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	@ 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	44020c00 	.word	0x44020c00
 8007080:	003d0900 	.word	0x003d0900
 8007084:	03d09000 	.word	0x03d09000
 8007088:	016e3600 	.word	0x016e3600
 800708c:	46000000 	.word	0x46000000
 8007090:	4c742400 	.word	0x4c742400
 8007094:	4bb71b00 	.word	0x4bb71b00
 8007098:	4a742400 	.word	0x4a742400

0800709c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070a0:	f7ff fed0 	bl	8006e44 <HAL_RCC_GetSysClockFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b08      	ldr	r3, [pc, #32]	@ (80070c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80070aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070ae:	4907      	ldr	r1, [pc, #28]	@ (80070cc <HAL_RCC_GetHCLKFreq+0x30>)
 80070b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80070b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	4a05      	ldr	r2, [pc, #20]	@ (80070d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80070bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80070be:	4b04      	ldr	r3, [pc, #16]	@ (80070d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80070c0:	681b      	ldr	r3, [r3, #0]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	44020c00 	.word	0x44020c00
 80070cc:	08014a80 	.word	0x08014a80
 80070d0:	2000001c 	.word	0x2000001c

080070d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80070d8:	f7ff ffe0 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	091b      	lsrs	r3, r3, #4
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4904      	ldr	r1, [pc, #16]	@ (80070fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	44020c00 	.word	0x44020c00
 80070fc:	08014a90 	.word	0x08014a90

08007100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007104:	f7ff ffca 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	4904      	ldr	r1, [pc, #16]	@ (8007128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	44020c00 	.word	0x44020c00
 8007128:	08014a90 	.word	0x08014a90

0800712c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007130:	f7ff ffb4 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	0b1b      	lsrs	r3, r3, #12
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	4904      	ldr	r1, [pc, #16]	@ (8007154 <HAL_RCC_GetPCLK3Freq+0x28>)
 8007142:	5ccb      	ldrb	r3, [r1, r3]
 8007144:	f003 031f 	and.w	r3, r3, #31
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	bd80      	pop	{r7, pc}
 8007150:	44020c00 	.word	0x44020c00
 8007154:	08014a90 	.word	0x08014a90

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800715c:	b0ba      	sub	sp, #232	@ 0xe8
 800715e:	af00      	add	r7, sp, #0
 8007160:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007164:	2300      	movs	r3, #0
 8007166:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800716a:	2300      	movs	r3, #0
 800716c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800717c:	2500      	movs	r5, #0
 800717e:	ea54 0305 	orrs.w	r3, r4, r5
 8007182:	d00b      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007184:	4bcd      	ldr	r3, [pc, #820]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800718a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800718e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007194:	4ac9      	ldr	r2, [pc, #804]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007196:	430b      	orrs	r3, r1
 8007198:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800719c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f002 0801 	and.w	r8, r2, #1
 80071a8:	f04f 0900 	mov.w	r9, #0
 80071ac:	ea58 0309 	orrs.w	r3, r8, r9
 80071b0:	d042      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80071b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	d823      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80071bc:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	0800720d 	.word	0x0800720d
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	0800720d 	.word	0x0800720d
 80071d4:	0800720d 	.word	0x0800720d
 80071d8:	0800720d 	.word	0x0800720d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071e0:	3308      	adds	r3, #8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f003 f906 	bl	800a3f4 <RCCEx_PLL2_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80071ee:	e00e      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f4:	3330      	adds	r3, #48	@ 0x30
 80071f6:	4618      	mov	r0, r3
 80071f8:	f003 f994 	bl	800a524 <RCCEx_PLL3_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8007202:	e004      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800720a:	e000      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800720c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10c      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007216:	4ba9      	ldr	r3, [pc, #676]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800721c:	f023 0107 	bic.w	r1, r3, #7
 8007220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007226:	4aa5      	ldr	r2, [pc, #660]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007228:	430b      	orrs	r3, r1
 800722a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800722e:	e003      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007230:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007234:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f002 0a02 	and.w	sl, r2, #2
 8007244:	f04f 0b00 	mov.w	fp, #0
 8007248:	ea5a 030b 	orrs.w	r3, sl, fp
 800724c:	f000 8088 	beq.w	8007360 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007256:	2b28      	cmp	r3, #40	@ 0x28
 8007258:	d868      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800725a:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007335 	.word	0x08007335
 8007264:	0800732d 	.word	0x0800732d
 8007268:	0800732d 	.word	0x0800732d
 800726c:	0800732d 	.word	0x0800732d
 8007270:	0800732d 	.word	0x0800732d
 8007274:	0800732d 	.word	0x0800732d
 8007278:	0800732d 	.word	0x0800732d
 800727c:	0800732d 	.word	0x0800732d
 8007280:	08007305 	.word	0x08007305
 8007284:	0800732d 	.word	0x0800732d
 8007288:	0800732d 	.word	0x0800732d
 800728c:	0800732d 	.word	0x0800732d
 8007290:	0800732d 	.word	0x0800732d
 8007294:	0800732d 	.word	0x0800732d
 8007298:	0800732d 	.word	0x0800732d
 800729c:	0800732d 	.word	0x0800732d
 80072a0:	08007319 	.word	0x08007319
 80072a4:	0800732d 	.word	0x0800732d
 80072a8:	0800732d 	.word	0x0800732d
 80072ac:	0800732d 	.word	0x0800732d
 80072b0:	0800732d 	.word	0x0800732d
 80072b4:	0800732d 	.word	0x0800732d
 80072b8:	0800732d 	.word	0x0800732d
 80072bc:	0800732d 	.word	0x0800732d
 80072c0:	08007335 	.word	0x08007335
 80072c4:	0800732d 	.word	0x0800732d
 80072c8:	0800732d 	.word	0x0800732d
 80072cc:	0800732d 	.word	0x0800732d
 80072d0:	0800732d 	.word	0x0800732d
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	0800732d 	.word	0x0800732d
 80072dc:	0800732d 	.word	0x0800732d
 80072e0:	08007335 	.word	0x08007335
 80072e4:	0800732d 	.word	0x0800732d
 80072e8:	0800732d 	.word	0x0800732d
 80072ec:	0800732d 	.word	0x0800732d
 80072f0:	0800732d 	.word	0x0800732d
 80072f4:	0800732d 	.word	0x0800732d
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	0800732d 	.word	0x0800732d
 8007300:	08007335 	.word	0x08007335
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007308:	3308      	adds	r3, #8
 800730a:	4618      	mov	r0, r3
 800730c:	f003 f872 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8007316:	e00e      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800731c:	3330      	adds	r3, #48	@ 0x30
 800731e:	4618      	mov	r0, r3
 8007320:	f003 f900 	bl	800a524 <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800733e:	4b5f      	ldr	r3, [pc, #380]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007344:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800734c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800734e:	4a5b      	ldr	r2, [pc, #364]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007350:	430b      	orrs	r3, r1
 8007352:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007356:	e003      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800735c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f002 0304 	and.w	r3, r2, #4
 800736c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007370:	2300      	movs	r3, #0
 8007372:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007376:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800737a:	460b      	mov	r3, r1
 800737c:	4313      	orrs	r3, r2
 800737e:	d04e      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007386:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800738a:	d02c      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800738c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007390:	d825      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007396:	d028      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800739c:	d81f      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800739e:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a0:	d025      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x296>
 80073a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a4:	d81b      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073a6:	2b80      	cmp	r3, #128	@ 0x80
 80073a8:	d00f      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 80073aa:	2b80      	cmp	r3, #128	@ 0x80
 80073ac:	d817      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01f      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d113      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ba:	3308      	adds	r3, #8
 80073bc:	4618      	mov	r0, r3
 80073be:	f003 f819 	bl	800a3f4 <RCCEx_PLL2_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80073c8:	e014      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ce:	3330      	adds	r3, #48	@ 0x30
 80073d0:	4618      	mov	r0, r3
 80073d2:	f003 f8a7 	bl	800a524 <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80073dc:	e00a      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80073e4:	e006      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80073e6:	bf00      	nop
 80073e8:	e004      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80073f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80073fc:	4b2f      	ldr	r3, [pc, #188]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80073fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007402:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800740a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800740c:	4a2b      	ldr	r2, [pc, #172]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800740e:	430b      	orrs	r3, r1
 8007410:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007414:	e003      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800741a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800741e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f002 0308 	and.w	r3, r2, #8
 800742a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800742e:	2300      	movs	r3, #0
 8007430:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007438:	460b      	mov	r3, r1
 800743a:	4313      	orrs	r3, r2
 800743c:	d056      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800743e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007444:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007448:	d031      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 800744a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800744e:	d82a      	bhi.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007454:	d02d      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800745a:	d824      	bhi.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800745c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007460:	d029      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007462:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007466:	d81e      	bhi.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746c:	d011      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007472:	d818      	bhi.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d023      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747c:	d113      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800747e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007482:	3308      	adds	r3, #8
 8007484:	4618      	mov	r0, r3
 8007486:	f002 ffb5 	bl	800a3f4 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8007490:	e017      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007496:	3330      	adds	r3, #48	@ 0x30
 8007498:	4618      	mov	r0, r3
 800749a:	f003 f843 	bl	800a524 <RCCEx_PLL3_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80074a4:	e00d      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80074ac:	e009      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074ae:	bf00      	nop
 80074b0:	e007      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074b2:	bf00      	nop
 80074b4:	e005      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074b6:	bf00      	nop
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80074ba:	bf00      	nop
 80074bc:	44020c00 	.word	0x44020c00
        break;
 80074c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80074ca:	4bb9      	ldr	r3, [pc, #740]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074d0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80074d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074da:	4ab5      	ldr	r2, [pc, #724]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074e2:	e003      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f002 0310 	and.w	r3, r2, #16
 80074f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074fc:	2300      	movs	r3, #0
 80074fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007502:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007506:	460b      	mov	r3, r1
 8007508:	4313      	orrs	r3, r2
 800750a:	d053      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800750c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007512:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007516:	d031      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007518:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800751c:	d82a      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800751e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007522:	d02d      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007528:	d824      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800752a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800752e:	d029      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007534:	d81e      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800753a:	d011      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800753c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007540:	d818      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8007546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800754a:	d113      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800754c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007550:	3308      	adds	r3, #8
 8007552:	4618      	mov	r0, r3
 8007554:	f002 ff4e 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800755e:	e014      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007564:	3330      	adds	r3, #48	@ 0x30
 8007566:	4618      	mov	r0, r3
 8007568:	f002 ffdc 	bl	800a524 <RCCEx_PLL3_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8007572:	e00a      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800757a:	e006      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800757c:	bf00      	nop
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007580:	bf00      	nop
 8007582:	e002      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10c      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007592:	4b87      	ldr	r3, [pc, #540]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007598:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800759c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a2:	4a83      	ldr	r2, [pc, #524]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f002 0320 	and.w	r3, r2, #32
 80075c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d053      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80075d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075da:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80075de:	d031      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80075e0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80075e4:	d82a      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80075e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ea:	d02d      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80075ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f0:	d824      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80075f2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80075f6:	d029      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80075f8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80075fc:	d81e      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80075fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007602:	d011      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007608:	d818      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d020      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007612:	d113      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007618:	3308      	adds	r3, #8
 800761a:	4618      	mov	r0, r3
 800761c:	f002 feea 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8007626:	e014      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800762c:	3330      	adds	r3, #48	@ 0x30
 800762e:	4618      	mov	r0, r3
 8007630:	f002 ff78 	bl	800a524 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800763a:	e00a      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007642:	e006      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007644:	bf00      	nop
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10c      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800765a:	4b55      	ldr	r3, [pc, #340]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800765c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007660:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a51      	ldr	r2, [pc, #324]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800766c:	430b      	orrs	r3, r1
 800766e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007672:	e003      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007678:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800767c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800768c:	2300      	movs	r3, #0
 800768e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007692:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	d053      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800769c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80076a6:	d031      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80076a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80076ac:	d82a      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076b2:	d02d      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80076b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076b8:	d824      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076be:	d029      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076c4:	d81e      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ca:	d011      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80076cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076d0:	d818      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d020      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80076d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076da:	d113      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076e0:	3308      	adds	r3, #8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f002 fe86 	bl	800a3f4 <RCCEx_PLL2_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80076ee:	e014      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f4:	3330      	adds	r3, #48	@ 0x30
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 ff14 	bl	800a524 <RCCEx_PLL3_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007702:	e00a      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800770a:	e006      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800770c:	bf00      	nop
 800770e:	e004      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007710:	bf00      	nop
 8007712:	e002      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800771a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10c      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007722:	4b23      	ldr	r3, [pc, #140]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007728:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800772c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007732:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007734:	430b      	orrs	r3, r1
 8007736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800773a:	e003      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007740:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007750:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800775a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800775e:	460b      	mov	r3, r1
 8007760:	4313      	orrs	r3, r2
 8007762:	d03d      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800776a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800776e:	d01b      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007770:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007774:	d814      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800777a:	d017      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x654>
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007780:	d80e      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d016      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778a:	d109      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800778c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007790:	3330      	adds	r3, #48	@ 0x30
 8007792:	4618      	mov	r0, r3
 8007794:	f002 fec6 	bl	800a524 <RCCEx_PLL3_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800779e:	e00a      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077a6:	e006      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80077a8:	bf00      	nop
 80077aa:	e004      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80077ac:	bf00      	nop
 80077ae:	e002      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80077b0:	44020c00 	.word	0x44020c00
        break;
 80077b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80077be:	4b99      	ldr	r3, [pc, #612]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077c4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80077c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077ce:	4a95      	ldr	r2, [pc, #596]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077d0:	430b      	orrs	r3, r1
 80077d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077d6:	e003      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80077ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d03b      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007806:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800780a:	d01b      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800780c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007810:	d814      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8007812:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007816:	d017      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8007818:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800781c:	d80e      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d014      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800782c:	3330      	adds	r3, #48	@ 0x30
 800782e:	4618      	mov	r0, r3
 8007830:	f002 fe78 	bl	800a524 <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800783a:	e008      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800784c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800784e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10c      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007856:	4b73      	ldr	r3, [pc, #460]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800785c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007866:	4a6f      	ldr	r2, [pc, #444]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007868:	430b      	orrs	r3, r1
 800786a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800786e:	e003      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007874:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007888:	2300      	movs	r3, #0
 800788a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800788e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007892:	460b      	mov	r3, r1
 8007894:	4313      	orrs	r3, r2
 8007896:	d03d      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800789c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078a4:	d01b      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x786>
 80078a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078aa:	d814      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80078ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078b0:	d017      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80078b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078b6:	d80e      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d014      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80078bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c0:	d109      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c6:	3330      	adds	r3, #48	@ 0x30
 80078c8:	4618      	mov	r0, r3
 80078ca:	f002 fe2b 	bl	800a524 <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80078d4:	e008      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80078dc:	e004      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80078e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10d      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80078f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007902:	4a48      	ldr	r2, [pc, #288]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007904:	430b      	orrs	r3, r1
 8007906:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007910:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800792a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d035      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800793c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007940:	d015      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007946:	d80e      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d012      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800794c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007950:	d109      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007956:	3330      	adds	r3, #48	@ 0x30
 8007958:	4618      	mov	r0, r3
 800795a:	f002 fde3 	bl	800a524 <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8007972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007974:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10d      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800797c:	4b29      	ldr	r3, [pc, #164]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800797e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007982:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800798a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800798e:	4a25      	ldr	r2, [pc, #148]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007990:	430b      	orrs	r3, r1
 8007992:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800799c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80079a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	2100      	movs	r1, #0
 80079aa:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80079ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80079ba:	460b      	mov	r3, r1
 80079bc:	4313      	orrs	r3, r2
 80079be:	d037      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80079c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079cc:	d015      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80079ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d2:	d80e      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d012      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80079d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079dc:	d109      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079e2:	3330      	adds	r3, #48	@ 0x30
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 fd9d 	bl	800a524 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80079f0:	e006      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80079fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10f      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1a:	4a02      	ldr	r2, [pc, #8]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a22:	e005      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8007a24:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a2c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a42:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007a4c:	4bb8      	ldr	r3, [pc, #736]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	4ab7      	ldr	r2, [pc, #732]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007a52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a56:	61d3      	str	r3, [r2, #28]
 8007a58:	4bb5      	ldr	r3, [pc, #724]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007a5a:	69d9      	ldr	r1, [r3, #28]
 8007a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a60:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007a64:	4ab2      	ldr	r2, [pc, #712]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007a66:	430b      	orrs	r3, r1
 8007a68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a76:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a78:	2300      	movs	r3, #0
 8007a7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d055      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007a92:	d031      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8007a94:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007a98:	d82a      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9e:	d02d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa4:	d824      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aaa:	d029      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8007aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab0:	d81e      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab6:	d011      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d818      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d020      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac6:	d113      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007acc:	3308      	adds	r3, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 fc90 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007ada:	e014      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae0:	3330      	adds	r3, #48	@ 0x30
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f002 fd1e 	bl	800a524 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007aee:	e00a      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10d      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007b0e:	4b88      	ldr	r3, [pc, #544]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007b10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b14:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b20:	4a83      	ldr	r2, [pc, #524]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007b22:	430b      	orrs	r3, r1
 8007b24:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b28:	e003      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b2e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007b3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b40:	2300      	movs	r3, #0
 8007b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	d055      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b5a:	d031      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8007b5c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b60:	d82a      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b66:	d02d      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8007b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b6c:	d824      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007b6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b72:	d029      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b78:	d81e      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7e:	d011      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b84:	d818      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d020      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8e:	d113      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b94:	3308      	adds	r3, #8
 8007b96:	4618      	mov	r0, r3
 8007b98:	f002 fc2c 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007ba2:	e014      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba8:	3330      	adds	r3, #48	@ 0x30
 8007baa:	4618      	mov	r0, r3
 8007bac:	f002 fcba 	bl	800a524 <RCCEx_PLL3_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007bb6:	e00a      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bbe:	e006      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007bc0:	bf00      	nop
 8007bc2:	e004      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007bd6:	4b56      	ldr	r3, [pc, #344]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007bd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be8:	4a51      	ldr	r2, [pc, #324]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bf6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c06:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c08:	2300      	movs	r3, #0
 8007c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d032      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d80f      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d211      	bcs.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d911      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c32:	3308      	adds	r3, #8
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 fbdd 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8007c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10d      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007c58:	4b35      	ldr	r3, [pc, #212]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c5e:	f023 0107 	bic.w	r1, r3, #7
 8007c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c6a:	4a31      	ldr	r2, [pc, #196]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c72:	e003      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	2100      	movs	r1, #0
 8007c86:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d024      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007cae:	e002      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10d      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cc4:	f023 0108 	bic.w	r1, r3, #8
 8007cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cd0:	4a17      	ldr	r2, [pc, #92]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cd8:	e003      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cde:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cf4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f000 80b9 	beq.w	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007d00:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	4a0b      	ldr	r2, [pc, #44]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d0c:	f7fd fd22 	bl	8005754 <HAL_GetTick>
 8007d10:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007d14:	e010      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d16:	f7fd fd1d 	bl	8005754 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d908      	bls.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d2c:	e00a      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007d2e:	bf00      	nop
 8007d30:	44020c00 	.word	0x44020c00
 8007d34:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007d38:	4bba      	ldr	r3, [pc, #744]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0e8      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8007d44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 808e 	bne.w	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d4e:	4bb6      	ldr	r3, [pc, #728]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d023      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d68:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d01b      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d74:	4bac      	ldr	r3, [pc, #688]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d82:	4ba9      	ldr	r3, [pc, #676]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d88:	4aa7      	ldr	r2, [pc, #668]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d92:	4ba5      	ldr	r3, [pc, #660]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d98:	4aa3      	ldr	r2, [pc, #652]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007da2:	4aa1      	ldr	r2, [pc, #644]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d019      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fd fccc 	bl	8005754 <HAL_GetTick>
 8007dbc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dc0:	e00d      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dc2:	f7fd fcc7 	bl	8005754 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dcc:	1ad2      	subs	r2, r2, r3
 8007dce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d903      	bls.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dde:	4b92      	ldr	r3, [pc, #584]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0ea      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007dec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d135      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e04:	d110      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8007e06:	4b88      	ldr	r3, [pc, #544]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e1c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007e20:	4a81      	ldr	r2, [pc, #516]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e22:	430b      	orrs	r3, r1
 8007e24:	61d3      	str	r3, [r2, #28]
 8007e26:	e005      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007e28:	4b7f      	ldr	r3, [pc, #508]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e32:	61d3      	str	r3, [r2, #28]
 8007e34:	4b7c      	ldr	r3, [pc, #496]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e44:	4b78      	ldr	r3, [pc, #480]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e46:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e56:	4a74      	ldr	r2, [pc, #464]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e5e:	e008      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e64:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007e68:	e003      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e6e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e80:	2300      	movs	r3, #0
 8007e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d035      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e96:	2b30      	cmp	r3, #48	@ 0x30
 8007e98:	d014      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8007e9a:	2b30      	cmp	r3, #48	@ 0x30
 8007e9c:	d80e      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d012      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d80a      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d106      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eae:	4b5e      	ldr	r3, [pc, #376]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007eba:	e008      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ec2:	e004      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007ec4:	bf00      	nop
 8007ec6:	e002      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007ed6:	4b54      	ldr	r3, [pc, #336]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007edc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007eea:	430b      	orrs	r3, r1
 8007eec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ef6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f08:	2300      	movs	r3, #0
 8007f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f10:	460b      	mov	r3, r1
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d033      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007f22:	2b40      	cmp	r3, #64	@ 0x40
 8007f24:	d007      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007f26:	e010      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f28:	4b3f      	ldr	r3, [pc, #252]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f32:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007f34:	e00d      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fa59 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007f48:	e003      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10d      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007f5a:	4b33      	ldr	r3, [pc, #204]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f60:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f74:	e003      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f94:	460b      	mov	r3, r1
 8007f96:	4313      	orrs	r3, r2
 8007f98:	d04c      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d827      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fcf 	.word	0x08007fcf
 8007fb4:	08007fe3 	.word	0x08007fe3
 8007fb8:	08007fff 	.word	0x08007fff
 8007fbc:	08007fff 	.word	0x08007fff
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc0:	4b19      	ldr	r3, [pc, #100]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	4a18      	ldr	r2, [pc, #96]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007fcc:	e018      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fa0d 	bl	800a3f4 <RCCEx_PLL2_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007fe0:	e00e      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fe6:	3330      	adds	r3, #48	@ 0x30
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 fa9b 	bl	800a524 <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e004      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ffc:	e000      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008000:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d111      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008008:	4b07      	ldr	r3, [pc, #28]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800800a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800800e:	f023 0107 	bic.w	r1, r3, #7
 8008012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800801a:	4a03      	ldr	r2, [pc, #12]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800801c:	430b      	orrs	r3, r1
 800801e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008022:	e007      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8008024:	44020800 	.word	0x44020800
 8008028:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008030:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30
 8008042:	2300      	movs	r3, #0
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
 8008046:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	f000 8081 	beq.w	8008154 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800805a:	2b20      	cmp	r3, #32
 800805c:	d85f      	bhi.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800805e:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	080080e9 	.word	0x080080e9
 8008068:	0800811f 	.word	0x0800811f
 800806c:	0800811f 	.word	0x0800811f
 8008070:	0800811f 	.word	0x0800811f
 8008074:	0800811f 	.word	0x0800811f
 8008078:	0800811f 	.word	0x0800811f
 800807c:	0800811f 	.word	0x0800811f
 8008080:	0800811f 	.word	0x0800811f
 8008084:	080080f7 	.word	0x080080f7
 8008088:	0800811f 	.word	0x0800811f
 800808c:	0800811f 	.word	0x0800811f
 8008090:	0800811f 	.word	0x0800811f
 8008094:	0800811f 	.word	0x0800811f
 8008098:	0800811f 	.word	0x0800811f
 800809c:	0800811f 	.word	0x0800811f
 80080a0:	0800811f 	.word	0x0800811f
 80080a4:	0800810b 	.word	0x0800810b
 80080a8:	0800811f 	.word	0x0800811f
 80080ac:	0800811f 	.word	0x0800811f
 80080b0:	0800811f 	.word	0x0800811f
 80080b4:	0800811f 	.word	0x0800811f
 80080b8:	0800811f 	.word	0x0800811f
 80080bc:	0800811f 	.word	0x0800811f
 80080c0:	0800811f 	.word	0x0800811f
 80080c4:	08008127 	.word	0x08008127
 80080c8:	0800811f 	.word	0x0800811f
 80080cc:	0800811f 	.word	0x0800811f
 80080d0:	0800811f 	.word	0x0800811f
 80080d4:	0800811f 	.word	0x0800811f
 80080d8:	0800811f 	.word	0x0800811f
 80080dc:	0800811f 	.word	0x0800811f
 80080e0:	0800811f 	.word	0x0800811f
 80080e4:	08008127 	.word	0x08008127
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4bb9      	ldr	r3, [pc, #740]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	4ab8      	ldr	r2, [pc, #736]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80080f4:	e018      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080fa:	3308      	adds	r3, #8
 80080fc:	4618      	mov	r0, r3
 80080fe:	f002 f979 	bl	800a3f4 <RCCEx_PLL2_Config>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008108:	e00e      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800810a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800810e:	3330      	adds	r3, #48	@ 0x30
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fa07 	bl	800a524 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800811c:	e004      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8008126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008128:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10d      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008130:	4ba7      	ldr	r3, [pc, #668]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8008132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008136:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800813a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800813e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008142:	4aa3      	ldr	r2, [pc, #652]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8008144:	430b      	orrs	r3, r1
 8008146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800814a:	e003      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008150:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008162:	2300      	movs	r3, #0
 8008164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008166:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800816a:	460b      	mov	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	d04e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800817c:	d02e      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800817e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008182:	d827      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008184:	2bc0      	cmp	r3, #192	@ 0xc0
 8008186:	d02b      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8008188:	2bc0      	cmp	r3, #192	@ 0xc0
 800818a:	d823      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800818c:	2b80      	cmp	r3, #128	@ 0x80
 800818e:	d017      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8008190:	2b80      	cmp	r3, #128	@ 0x80
 8008192:	d81f      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	d007      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1054>
 800819c:	e01a      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819e:	4b8c      	ldr	r3, [pc, #560]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	4a8b      	ldr	r2, [pc, #556]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80081a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80081aa:	e01a      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081b0:	3308      	adds	r3, #8
 80081b2:	4618      	mov	r0, r3
 80081b4:	f002 f91e 	bl	800a3f4 <RCCEx_PLL2_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80081be:	e010      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081c4:	3330      	adds	r3, #48	@ 0x30
 80081c6:	4618      	mov	r0, r3
 80081c8:	f002 f9ac 	bl	800a524 <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80081d2:	e006      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80081da:	e002      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80081dc:	bf00      	nop
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80081e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80081ea:	4b79      	ldr	r3, [pc, #484]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80081ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081f0:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80081f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081fc:	4974      	ldr	r1, [pc, #464]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008204:	e003      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800820a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800820e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	2300      	movs	r3, #0
 800821e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008220:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008224:	460b      	mov	r3, r1
 8008226:	4313      	orrs	r3, r2
 8008228:	d055      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800822a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800822e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008232:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008236:	d031      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8008238:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800823c:	d82a      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800823e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008242:	d02d      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8008244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008248:	d824      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800824a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800824e:	d029      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8008250:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008254:	d81e      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825a:	d011      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 800825c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008260:	d818      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8008266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826a:	d113      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800826c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008270:	3308      	adds	r3, #8
 8008272:	4618      	mov	r0, r3
 8008274:	f002 f8be 	bl	800a3f4 <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800827e:	e014      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008284:	3330      	adds	r3, #48	@ 0x30
 8008286:	4618      	mov	r0, r3
 8008288:	f002 f94c 	bl	800a524 <RCCEx_PLL3_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008292:	e00a      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800829a:	e006      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800829c:	bf00      	nop
 800829e:	e004      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80082a0:	bf00      	nop
 80082a2:	e002      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80082a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10d      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80082b2:	4b47      	ldr	r3, [pc, #284]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80082b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082b8:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80082bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082c4:	4942      	ldr	r1, [pc, #264]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80082cc:	e003      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80082d2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80082d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	2100      	movs	r1, #0
 80082e0:	61b9      	str	r1, [r7, #24]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082ec:	460b      	mov	r3, r1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	d03c      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80082f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d81b      	bhi.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800833f 	.word	0x0800833f
 8008308:	08008315 	.word	0x08008315
 800830c:	08008323 	.word	0x08008323
 8008310:	0800833f 	.word	0x0800833f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008314:	4b2e      	ldr	r3, [pc, #184]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	4a2d      	ldr	r2, [pc, #180]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800831a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800831e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008320:	e00e      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008326:	3308      	adds	r3, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f002 f863 	bl	800a3f4 <RCCEx_PLL2_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008334:	e004      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800833c:	e000      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800833e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008340:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10d      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008348:	4b21      	ldr	r3, [pc, #132]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800834a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800834e:	f023 0203 	bic.w	r2, r3, #3
 8008352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800835a:	491d      	ldr	r1, [pc, #116]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008362:	e003      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008368:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800836c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	2100      	movs	r1, #0
 8008376:	6139      	str	r1, [r7, #16]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008382:	460b      	mov	r3, r1
 8008384:	4313      	orrs	r3, r2
 8008386:	d03c      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800838c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008394:	d00e      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839a:	d815      	bhi.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d019      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80083a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a4:	d110      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a6:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	4a09      	ldr	r2, [pc, #36]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80083ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80083b2:	e010      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083b8:	3308      	adds	r3, #8
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 f81a 	bl	800a3f4 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80083c6:	e006      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80083ce:	e002      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80083d0:	44020c00 	.word	0x44020c00
        break;
 80083d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10d      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80083de:	4b3d      	ldr	r3, [pc, #244]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80083e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f0:	4938      	ldr	r1, [pc, #224]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80083f8:	e003      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80083fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	2100      	movs	r1, #0
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008418:	460b      	mov	r3, r1
 800841a:	4313      	orrs	r3, r2
 800841c:	d038      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800841e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008422:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008426:	2b30      	cmp	r3, #48	@ 0x30
 8008428:	d01b      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800842a:	2b30      	cmp	r3, #48	@ 0x30
 800842c:	d815      	bhi.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800842e:	2b10      	cmp	r3, #16
 8008430:	d002      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8008432:	2b20      	cmp	r3, #32
 8008434:	d007      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8008436:	e010      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008438:	4b26      	ldr	r3, [pc, #152]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	4a25      	ldr	r2, [pc, #148]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800843e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008442:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008444:	e00e      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800844a:	3330      	adds	r3, #48	@ 0x30
 800844c:	4618      	mov	r0, r3
 800844e:	f002 f869 	bl	800a524 <RCCEx_PLL3_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008458:	e004      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8008462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008464:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10d      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800846c:	4b19      	ldr	r3, [pc, #100]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800846e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008472:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800847a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800847e:	4915      	ldr	r1, [pc, #84]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008480:	4313      	orrs	r3, r2
 8008482:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008486:	e003      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800848c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	2100      	movs	r1, #0
 800849a:	6039      	str	r1, [r7, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	607b      	str	r3, [r7, #4]
 80084a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084a6:	460b      	mov	r3, r1
 80084a8:	4313      	orrs	r3, r2
 80084aa:	d00c      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80084ac:	4b09      	ldr	r3, [pc, #36]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80084ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084be:	4905      	ldr	r1, [pc, #20]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80084c6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	37e8      	adds	r7, #232	@ 0xe8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084d4:	44020c00 	.word	0x44020c00

080084d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80084d8:	b480      	push	{r7}
 80084da:	b08b      	sub	sp, #44	@ 0x2c
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80084e0:	4bad      	ldr	r3, [pc, #692]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80084e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80084ea:	4bab      	ldr	r3, [pc, #684]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80084ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80084f4:	4ba8      	ldr	r3, [pc, #672]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084fe:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008500:	4ba5      	ldr	r3, [pc, #660]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800850a:	4ba3      	ldr	r3, [pc, #652]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	08db      	lsrs	r3, r3, #3
 8008510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8126 	beq.w	800877a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d053      	beq.n	80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2b03      	cmp	r3, #3
 8008538:	d86f      	bhi.n	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d02b      	beq.n	800859e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008546:	e068      	b.n	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008548:	4b93      	ldr	r3, [pc, #588]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	4a92      	ldr	r2, [pc, #584]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008580:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008598:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800859c:	e068      	b.n	8008670 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	ee07 3a90 	vmov	s15, r3
 80085a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80085ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80085be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80085c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80085da:	e049      	b.n	8008670 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80085ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80085fc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008618:	e02a      	b.n	8008670 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800861a:	4b5f      	ldr	r3, [pc, #380]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	4a5d      	ldr	r2, [pc, #372]	@ (800879c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008626:	fa22 f303 	lsr.w	r3, r2, r3
 800862a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	ee07 3a90 	vmov	s15, r3
 800863c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008652:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800866e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008670:	4b49      	ldr	r3, [pc, #292]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800867c:	d121      	bne.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800867e:	4b46      	ldr	r3, [pc, #280]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800868a:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800868c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868e:	0a5b      	lsrs	r3, r3, #9
 8008690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800869c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80086a4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80086a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	e006      	b.n	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e002      	b.n	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086c8:	4b33      	ldr	r3, [pc, #204]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d4:	d121      	bne.n	800871a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80086d6:	4b30      	ldr	r3, [pc, #192]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d017      	beq.n	8008712 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80086e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80086f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80086fc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008708:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
 8008710:	e006      	b.n	8008720 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	e002      	b.n	8008720 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008720:	4b1d      	ldr	r3, [pc, #116]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800872c:	d121      	bne.n	8008772 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800872e:	4b1a      	ldr	r3, [pc, #104]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d017      	beq.n	800876a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800873a:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	0e1b      	lsrs	r3, r3, #24
 8008740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800874c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008750:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008754:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800875c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008760:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008768:	e010      	b.n	800878c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	609a      	str	r2, [r3, #8]
}
 8008770:	e00c      	b.n	800878c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	609a      	str	r2, [r3, #8]
}
 8008778:	e008      	b.n	800878c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
}
 800878c:	bf00      	nop
 800878e:	372c      	adds	r7, #44	@ 0x2c
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	44020c00 	.word	0x44020c00
 800879c:	03d09000 	.word	0x03d09000
 80087a0:	46000000 	.word	0x46000000
 80087a4:	4a742400 	.word	0x4a742400
 80087a8:	4bb71b00 	.word	0x4bb71b00

080087ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b08b      	sub	sp, #44	@ 0x2c
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80087b4:	4bad      	ldr	r3, [pc, #692]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087bc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80087be:	4bab      	ldr	r3, [pc, #684]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80087c8:	4ba8      	ldr	r3, [pc, #672]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80087d4:	4ba5      	ldr	r3, [pc, #660]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80087de:	4ba3      	ldr	r3, [pc, #652]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	08db      	lsrs	r3, r3, #3
 80087e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8126 	beq.w	8008a4e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d053      	beq.n	80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d86f      	bhi.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d003      	beq.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	2b02      	cmp	r3, #2
 8008818:	d02b      	beq.n	8008872 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800881a:	e068      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800881c:	4b93      	ldr	r3, [pc, #588]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	08db      	lsrs	r3, r3, #3
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	4a92      	ldr	r2, [pc, #584]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
 800882c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008850:	ed97 6a04 	vldr	s12, [r7, #16]
 8008854:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008870:	e068      	b.n	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008892:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80088ae:	e049      	b.n	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80088be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	ee07 3a90 	vmov	s15, r3
 80088c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80088d0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80088d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80088ec:	e02a      	b.n	8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088ee:	4b5f      	ldr	r3, [pc, #380]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	08db      	lsrs	r3, r3, #3
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008922:	ed97 6a04 	vldr	s12, [r7, #16]
 8008926:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800892a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008942:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008944:	4b49      	ldr	r3, [pc, #292]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008950:	d121      	bne.n	8008996 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008952:	4b46      	ldr	r3, [pc, #280]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d017      	beq.n	800898e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800895e:	4b43      	ldr	r3, [pc, #268]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008962:	0a5b      	lsrs	r3, r3, #9
 8008964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008974:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008978:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800897c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008984:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	e006      	b.n	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e002      	b.n	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800899c:	4b33      	ldr	r3, [pc, #204]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089a8:	d121      	bne.n	80089ee <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80089aa:	4b30      	ldr	r3, [pc, #192]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d017      	beq.n	80089e6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089b6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ba:	0c1b      	lsrs	r3, r3, #16
 80089bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80089c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80089d0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80089d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089dc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	605a      	str	r2, [r3, #4]
 80089e4:	e006      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	605a      	str	r2, [r3, #4]
 80089ec:	e002      	b.n	80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a00:	d121      	bne.n	8008a46 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008a02:	4b1a      	ldr	r3, [pc, #104]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d017      	beq.n	8008a3e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008a0e:	4b17      	ldr	r3, [pc, #92]	@ (8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a12:	0e1b      	lsrs	r3, r3, #24
 8008a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a18:	ee07 3a90 	vmov	s15, r3
 8008a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a24:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008a28:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a34:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a3c:	e010      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	609a      	str	r2, [r3, #8]
}
 8008a44:	e00c      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	609a      	str	r2, [r3, #8]
}
 8008a4c:	e008      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	609a      	str	r2, [r3, #8]
}
 8008a60:	bf00      	nop
 8008a62:	372c      	adds	r7, #44	@ 0x2c
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	44020c00 	.word	0x44020c00
 8008a70:	03d09000 	.word	0x03d09000
 8008a74:	46000000 	.word	0x46000000
 8008a78:	4a742400 	.word	0x4a742400
 8008a7c:	4bb71b00 	.word	0x4bb71b00

08008a80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b08b      	sub	sp, #44	@ 0x2c
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008a88:	4bad      	ldr	r3, [pc, #692]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a90:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008a92:	4bab      	ldr	r3, [pc, #684]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008a9c:	4ba8      	ldr	r3, [pc, #672]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aa6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008aa8:	4ba5      	ldr	r3, [pc, #660]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008ab2:	4ba3      	ldr	r3, [pc, #652]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8126 	beq.w	8008d22 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d053      	beq.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d86f      	bhi.n	8008bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d003      	beq.n	8008af0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d02b      	beq.n	8008b46 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8008aee:	e068      	b.n	8008bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008af0:	4b93      	ldr	r3, [pc, #588]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	08db      	lsrs	r3, r3, #3
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	4a92      	ldr	r2, [pc, #584]	@ (8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
 8008b00:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	ee07 3a90 	vmov	s15, r3
 8008b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b24:	ed97 6a04 	vldr	s12, [r7, #16]
 8008b28:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008b44:	e068      	b.n	8008c18 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b50:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a04 	vldr	s12, [r7, #16]
 8008b66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008b82:	e049      	b.n	8008c18 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ba4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008bc0:	e02a      	b.n	8008c18 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	08db      	lsrs	r3, r3, #3
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	ed97 6a04 	vldr	s12, [r7, #16]
 8008bfa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008c16:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c18:	4b49      	ldr	r3, [pc, #292]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c24:	d121      	bne.n	8008c6a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008c26:	4b46      	ldr	r3, [pc, #280]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d017      	beq.n	8008c62 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c32:	4b43      	ldr	r3, [pc, #268]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c36:	0a5b      	lsrs	r3, r3, #9
 8008c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c48:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008c4c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c58:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c70:	4b33      	ldr	r3, [pc, #204]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7c:	d121      	bne.n	8008cc2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008c7e:	4b30      	ldr	r3, [pc, #192]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d017      	beq.n	8008cba <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c94:	ee07 3a90 	vmov	s15, r3
 8008c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008ca4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	e002      	b.n	8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd4:	d121      	bne.n	8008d1a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d017      	beq.n	8008d12 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ce2:	4b17      	ldr	r3, [pc, #92]	@ (8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce6:	0e1b      	lsrs	r3, r3, #24
 8008ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008cfc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d08:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008d10:	e010      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	609a      	str	r2, [r3, #8]
}
 8008d18:	e00c      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	609a      	str	r2, [r3, #8]
}
 8008d20:	e008      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	609a      	str	r2, [r3, #8]
}
 8008d34:	bf00      	nop
 8008d36:	372c      	adds	r7, #44	@ 0x2c
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	44020c00 	.word	0x44020c00
 8008d44:	03d09000 	.word	0x03d09000
 8008d48:	46000000 	.word	0x46000000
 8008d4c:	4a742400 	.word	0x4a742400
 8008d50:	4bb71b00 	.word	0x4bb71b00

08008d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b08f      	sub	sp, #60	@ 0x3c
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d62:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8008d66:	4321      	orrs	r1, r4
 8008d68:	d150      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008d6a:	4b26      	ldr	r3, [pc, #152]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008d76:	4b23      	ldr	r3, [pc, #140]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d108      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8a:	d104      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	f001 bb20 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008d96:	4b1b      	ldr	r3, [pc, #108]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008da4:	d108      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dac:	d104      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008dae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db4:	f001 bb0f 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008db8:	4b12      	ldr	r3, [pc, #72]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc4:	d119      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dcc:	d115      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dda:	d30a      	bcc.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008ddc:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	0a1b      	lsrs	r3, r3, #8
 8008de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de6:	4a08      	ldr	r2, [pc, #32]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008dee:	f001 baf2 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008df6:	f001 baee 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfe:	f001 baea 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e02:	bf00      	nop
 8008e04:	44020c00 	.word	0x44020c00
 8008e08:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e10:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8008e14:	ea50 0104 	orrs.w	r1, r0, r4
 8008e18:	f000 8615 	beq.w	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8008e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e20:	2801      	cmp	r0, #1
 8008e22:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8008e26:	f081 82d3 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e2e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008e32:	ea50 0104 	orrs.w	r1, r0, r4
 8008e36:	f000 84d8 	beq.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e3e:	2801      	cmp	r0, #1
 8008e40:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008e44:	f081 82c4 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e4c:	f1a1 0410 	sub.w	r4, r1, #16
 8008e50:	ea50 0104 	orrs.w	r1, r0, r4
 8008e54:	f001 8288 	beq.w	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8008e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e5c:	2801      	cmp	r0, #1
 8008e5e:	f171 0110 	sbcs.w	r1, r1, #16
 8008e62:	f081 82b5 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e6a:	f1a1 0408 	sub.w	r4, r1, #8
 8008e6e:	ea50 0104 	orrs.w	r1, r0, r4
 8008e72:	f001 81fe 	beq.w	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8008e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e7a:	2801      	cmp	r0, #1
 8008e7c:	f171 0108 	sbcs.w	r1, r1, #8
 8008e80:	f081 82a6 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e88:	1f0c      	subs	r4, r1, #4
 8008e8a:	ea50 0104 	orrs.w	r1, r0, r4
 8008e8e:	f000 8753 	beq.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8008e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e96:	2801      	cmp	r0, #1
 8008e98:	f171 0104 	sbcs.w	r1, r1, #4
 8008e9c:	f081 8298 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ea4:	1e8c      	subs	r4, r1, #2
 8008ea6:	ea50 0104 	orrs.w	r1, r0, r4
 8008eaa:	f001 8173 	beq.w	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8008eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eb2:	2801      	cmp	r0, #1
 8008eb4:	f171 0102 	sbcs.w	r1, r1, #2
 8008eb8:	f081 828a 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ec0:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008ec4:	4321      	orrs	r1, r4
 8008ec6:	f001 80fe 	beq.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ece:	4ccb      	ldr	r4, [pc, #812]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008ed0:	42a0      	cmp	r0, r4
 8008ed2:	f171 0100 	sbcs.w	r1, r1, #0
 8008ed6:	f081 827b 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ede:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008ee2:	4321      	orrs	r1, r4
 8008ee4:	f001 8076 	beq.w	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eec:	4cc4      	ldr	r4, [pc, #784]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008eee:	42a0      	cmp	r0, r4
 8008ef0:	f171 0100 	sbcs.w	r1, r1, #0
 8008ef4:	f081 826c 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efc:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008f00:	4321      	orrs	r1, r4
 8008f02:	f000 87b5 	beq.w	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f0a:	4cbe      	ldr	r4, [pc, #760]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	f171 0100 	sbcs.w	r1, r1, #0
 8008f12:	f081 825d 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008f16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f1a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008f1e:	4321      	orrs	r1, r4
 8008f20:	f000 8738 	beq.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f28:	4cb7      	ldr	r4, [pc, #732]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008f2a:	42a0      	cmp	r0, r4
 8008f2c:	f171 0100 	sbcs.w	r1, r1, #0
 8008f30:	f081 824e 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f38:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008f3c:	4321      	orrs	r1, r4
 8008f3e:	f001 81cd 	beq.w	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8008f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f46:	4cb1      	ldr	r4, [pc, #708]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	f171 0100 	sbcs.w	r1, r1, #0
 8008f4e:	f081 823f 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f56:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008f5a:	4321      	orrs	r1, r4
 8008f5c:	f000 80d9 	beq.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f64:	4caa      	ldr	r4, [pc, #680]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8008f66:	42a0      	cmp	r0, r4
 8008f68:	f171 0100 	sbcs.w	r1, r1, #0
 8008f6c:	f081 8230 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f74:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008f78:	4321      	orrs	r1, r4
 8008f7a:	f000 83da 	beq.w	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f82:	4ca4      	ldr	r4, [pc, #656]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8008f84:	42a0      	cmp	r0, r4
 8008f86:	f171 0100 	sbcs.w	r1, r1, #0
 8008f8a:	f081 8221 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f92:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008f96:	4321      	orrs	r1, r4
 8008f98:	f000 8627 	beq.w	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8008f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fa0:	4c9d      	ldr	r4, [pc, #628]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8008fa2:	42a0      	cmp	r0, r4
 8008fa4:	f171 0100 	sbcs.w	r1, r1, #0
 8008fa8:	f081 8212 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008fac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fb0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008fb4:	4321      	orrs	r1, r4
 8008fb6:	f000 857a 	beq.w	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fbe:	4c97      	ldr	r4, [pc, #604]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	f171 0100 	sbcs.w	r1, r1, #0
 8008fc6:	f081 8203 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fce:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008fd2:	4321      	orrs	r1, r4
 8008fd4:	f000 84fb 	beq.w	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fdc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008fe0:	f171 0100 	sbcs.w	r1, r1, #0
 8008fe4:	f081 81f4 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fec:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008ff0:	4321      	orrs	r1, r4
 8008ff2:	f000 84a9 	beq.w	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffa:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008ffe:	42a0      	cmp	r0, r4
 8009000:	f171 0100 	sbcs.w	r1, r1, #0
 8009004:	f081 81e4 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8009008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009010:	4321      	orrs	r1, r4
 8009012:	f000 8456 	beq.w	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8009016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800901a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800901e:	42a0      	cmp	r0, r4
 8009020:	f171 0100 	sbcs.w	r1, r1, #0
 8009024:	f081 81d4 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8009028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009030:	4321      	orrs	r1, r4
 8009032:	f000 8403 	beq.w	800983c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8009036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800903a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800903e:	42a0      	cmp	r0, r4
 8009040:	f171 0100 	sbcs.w	r1, r1, #0
 8009044:	f081 81c4 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8009048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800904c:	2821      	cmp	r0, #33	@ 0x21
 800904e:	f171 0100 	sbcs.w	r1, r1, #0
 8009052:	d255      	bcs.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8009054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009058:	4301      	orrs	r1, r0
 800905a:	f001 81b9 	beq.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800905e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009062:	1e42      	subs	r2, r0, #1
 8009064:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009068:	2a20      	cmp	r2, #32
 800906a:	f173 0100 	sbcs.w	r1, r3, #0
 800906e:	f081 81af 	bcs.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8009072:	2a1f      	cmp	r2, #31
 8009074:	f201 81ac 	bhi.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8009078:	a101      	add	r1, pc, #4	@ (adr r1, 8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800907a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800907e:	bf00      	nop
 8009080:	08009157 	.word	0x08009157
 8009084:	08009255 	.word	0x08009255
 8009088:	0800a3d1 	.word	0x0800a3d1
 800908c:	08009315 	.word	0x08009315
 8009090:	0800a3d1 	.word	0x0800a3d1
 8009094:	0800a3d1 	.word	0x0800a3d1
 8009098:	0800a3d1 	.word	0x0800a3d1
 800909c:	080093e5 	.word	0x080093e5
 80090a0:	0800a3d1 	.word	0x0800a3d1
 80090a4:	0800a3d1 	.word	0x0800a3d1
 80090a8:	0800a3d1 	.word	0x0800a3d1
 80090ac:	0800a3d1 	.word	0x0800a3d1
 80090b0:	0800a3d1 	.word	0x0800a3d1
 80090b4:	0800a3d1 	.word	0x0800a3d1
 80090b8:	0800a3d1 	.word	0x0800a3d1
 80090bc:	080094c9 	.word	0x080094c9
 80090c0:	0800a3d1 	.word	0x0800a3d1
 80090c4:	0800a3d1 	.word	0x0800a3d1
 80090c8:	0800a3d1 	.word	0x0800a3d1
 80090cc:	0800a3d1 	.word	0x0800a3d1
 80090d0:	0800a3d1 	.word	0x0800a3d1
 80090d4:	0800a3d1 	.word	0x0800a3d1
 80090d8:	0800a3d1 	.word	0x0800a3d1
 80090dc:	0800a3d1 	.word	0x0800a3d1
 80090e0:	0800a3d1 	.word	0x0800a3d1
 80090e4:	0800a3d1 	.word	0x0800a3d1
 80090e8:	0800a3d1 	.word	0x0800a3d1
 80090ec:	0800a3d1 	.word	0x0800a3d1
 80090f0:	0800a3d1 	.word	0x0800a3d1
 80090f4:	0800a3d1 	.word	0x0800a3d1
 80090f8:	0800a3d1 	.word	0x0800a3d1
 80090fc:	0800959f 	.word	0x0800959f
 8009100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009104:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009108:	430b      	orrs	r3, r1
 800910a:	f000 82b3 	beq.w	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800910e:	f001 b95f 	b.w	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009112:	4b43      	ldr	r3, [pc, #268]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8009114:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b00      	cmp	r3, #0
 8009122:	d108      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009124:	f107 0320 	add.w	r3, r7, #32
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff f9d5 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009132:	f001 b950 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	2b40      	cmp	r3, #64	@ 0x40
 800913a:	d108      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fb33 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800914a:	f001 b944 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009152:	f001 b940 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009156:	4b32      	ldr	r3, [pc, #200]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8009158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009168:	f7fd ffca 	bl	8007100 <HAL_RCC_GetPCLK2Freq>
 800916c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800916e:	f001 b932 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009172:	4b2b      	ldr	r3, [pc, #172]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800917a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800917e:	d10a      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	2b01      	cmp	r3, #1
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009186:	f107 0314 	add.w	r3, r7, #20
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fb0e 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
 8009194:	e05c      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009196:	4b22      	ldr	r3, [pc, #136]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800919e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a2:	d10a      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d107      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091aa:	f107 0308 	add.w	r3, r7, #8
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fc66 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b8:	e04a      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80091ba:	4b19      	ldr	r3, [pc, #100]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d10c      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d109      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091cc:	4b14      	ldr	r3, [pc, #80]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	08db      	lsrs	r3, r3, #3
 80091d2:	f003 0303 	and.w	r3, r3, #3
 80091d6:	4a13      	ldr	r2, [pc, #76]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091de:	e037      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80091e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ec:	d11e      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d11b      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f8:	e02a      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80091fa:	bf00      	nop
 80091fc:	40000001 	.word	0x40000001
 8009200:	20000001 	.word	0x20000001
 8009204:	10000001 	.word	0x10000001
 8009208:	08000001 	.word	0x08000001
 800920c:	04000001 	.word	0x04000001
 8009210:	00400001 	.word	0x00400001
 8009214:	00200001 	.word	0x00200001
 8009218:	00040001 	.word	0x00040001
 800921c:	00020001 	.word	0x00020001
 8009220:	44020c00 	.word	0x44020c00
 8009224:	03d09000 	.word	0x03d09000
 8009228:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800922c:	4ba3      	ldr	r3, [pc, #652]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800922e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b02      	cmp	r3, #2
 8009238:	d106      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	2b05      	cmp	r3, #5
 800923e:	d103      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8009240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009244:	637b      	str	r3, [r7, #52]	@ 0x34
 8009246:	e003      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800924c:	f001 b8c3 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009250:	f001 b8c1 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009254:	4b99      	ldr	r3, [pc, #612]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009256:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800925a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800925e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	2b00      	cmp	r3, #0
 8009264:	d104      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009266:	f7fd ff35 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 800926a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800926c:	f001 b8b3 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009270:	4b92      	ldr	r3, [pc, #584]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009278:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800927c:	d10a      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	2b08      	cmp	r3, #8
 8009282:	d107      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fa8f 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
 8009292:	e03d      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	2b10      	cmp	r3, #16
 8009298:	d108      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fbee 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092a8:	f001 b895 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80092ac:	4b83      	ldr	r3, [pc, #524]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d10c      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	2b18      	cmp	r3, #24
 80092bc:	d109      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092be:	4b7f      	ldr	r3, [pc, #508]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	08db      	lsrs	r3, r3, #3
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	4a7d      	ldr	r2, [pc, #500]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80092ca:	fa22 f303 	lsr.w	r3, r2, r3
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	e01e      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80092d2:	4b7a      	ldr	r3, [pc, #488]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092de:	d105      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d102      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80092e6:	4b77      	ldr	r3, [pc, #476]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ea:	e011      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80092ec:	4b73      	ldr	r3, [pc, #460]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80092ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d106      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	2b28      	cmp	r3, #40	@ 0x28
 80092fe:	d103      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8009300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
 8009306:	e003      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930c:	f001 b863 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009310:	f001 b861 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009314:	4b69      	ldr	r3, [pc, #420]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800931a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009326:	f7fd fed5 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 800932a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800932c:	f001 b853 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009330:	4b62      	ldr	r3, [pc, #392]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009338:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800933c:	d10a      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b40      	cmp	r3, #64	@ 0x40
 8009342:	d107      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009344:	f107 0314 	add.w	r3, r7, #20
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fa2f 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
 8009352:	e045      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009354:	4b59      	ldr	r3, [pc, #356]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800935c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009360:	d10a      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	2b80      	cmp	r3, #128	@ 0x80
 8009366:	d107      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fb87 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	e033      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009378:	4b50      	ldr	r3, [pc, #320]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b02      	cmp	r3, #2
 8009382:	d10c      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	2bc0      	cmp	r3, #192	@ 0xc0
 8009388:	d109      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800938a:	4b4c      	ldr	r3, [pc, #304]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	4a4a      	ldr	r2, [pc, #296]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8009396:	fa22 f303 	lsr.w	r3, r2, r3
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
 800939c:	e020      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800939e:	4b47      	ldr	r3, [pc, #284]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093aa:	d106      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b2:	d102      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80093b4:	4b43      	ldr	r3, [pc, #268]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b8:	e012      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80093ba:	4b40      	ldr	r3, [pc, #256]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80093bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d107      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80093ce:	d103      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80093d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d6:	e003      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093dc:	f000 bffb 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80093e0:	f000 bff9 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80093e4:	4b35      	ldr	r3, [pc, #212]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80093e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093ea:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80093ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d104      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093f6:	f7fd fe6d 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80093fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80093fc:	f000 bfeb 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009400:	4b2e      	ldr	r3, [pc, #184]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800940c:	d10b      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009414:	d107      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff f9c6 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
 8009424:	e047      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009426:	4b25      	ldr	r3, [pc, #148]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800942e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009432:	d10b      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943c:	f107 0308 	add.w	r3, r7, #8
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fb1d 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	637b      	str	r3, [r7, #52]	@ 0x34
 800944a:	e034      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800944c:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d10d      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800945e:	d109      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009460:	4b16      	ldr	r3, [pc, #88]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	08db      	lsrs	r3, r3, #3
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	4a15      	ldr	r2, [pc, #84]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
 8009472:	e020      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009474:	4b11      	ldr	r3, [pc, #68]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800947c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009480:	d106      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009488:	d102      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800948a:	4b0e      	ldr	r3, [pc, #56]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e012      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b02      	cmp	r3, #2
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80094a4:	d103      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80094a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ac:	e003      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094b2:	f000 bf90 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094b6:	f000 bf8e 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094ba:	bf00      	nop
 80094bc:	44020c00 	.word	0x44020c00
 80094c0:	03d09000 	.word	0x03d09000
 80094c4:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80094c8:	4ba5      	ldr	r3, [pc, #660]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80094ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80094ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094da:	f7fd fdfb 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80094de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80094e0:	f000 bf79 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80094e4:	4b9e      	ldr	r3, [pc, #632]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f0:	d10b      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f8:	d107      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0314 	add.w	r3, r7, #20
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff f954 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
 8009508:	e047      	b.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800950a:	4b95      	ldr	r3, [pc, #596]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009516:	d10b      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800951e:	d107      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff faab 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	e034      	b.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009530:	4b8b      	ldr	r3, [pc, #556]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d10d      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009542:	d109      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009544:	4b86      	ldr	r3, [pc, #536]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	08db      	lsrs	r3, r3, #3
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	4a85      	ldr	r2, [pc, #532]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
 8009556:	e020      	b.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009558:	4b81      	ldr	r3, [pc, #516]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009564:	d106      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800956c:	d102      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 800956e:	4b7e      	ldr	r3, [pc, #504]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
 8009572:	e012      	b.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009574:	4b7a      	ldr	r3, [pc, #488]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b02      	cmp	r3, #2
 8009580:	d107      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009588:	d103      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800958a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009590:	e003      	b.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009596:	f000 bf1e 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800959a:	f000 bf1c 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800959e:	4b70      	ldr	r3, [pc, #448]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80095a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80095a4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80095a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fd fd90 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80095b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80095b6:	f000 bf0e 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80095ba:	4b69      	ldr	r3, [pc, #420]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c6:	d10b      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80095c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ce:	d107      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d0:	f107 0314 	add.w	r3, r7, #20
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff f8e9 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095de:	e047      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80095e0:	4b5f      	ldr	r3, [pc, #380]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ec:	d10b      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f4:	d107      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f6:	f107 0308 	add.w	r3, r7, #8
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fa40 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
 8009604:	e034      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009606:	4b56      	ldr	r3, [pc, #344]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d10d      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009618:	d109      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800961a:	4b51      	ldr	r3, [pc, #324]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	08db      	lsrs	r3, r3, #3
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	4a4f      	ldr	r2, [pc, #316]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	637b      	str	r3, [r7, #52]	@ 0x34
 800962c:	e020      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800962e:	4b4c      	ldr	r3, [pc, #304]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963a:	d106      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d102      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8009644:	4b48      	ldr	r3, [pc, #288]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009646:	637b      	str	r3, [r7, #52]	@ 0x34
 8009648:	e012      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800964a:	4b45      	ldr	r3, [pc, #276]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800964c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b02      	cmp	r3, #2
 8009656:	d107      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800965e:	d103      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800966c:	f000 beb3 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009670:	f000 beb1 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009674:	4b3a      	ldr	r3, [pc, #232]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800967a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800967e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009686:	f7fd fd51 	bl	800712c <HAL_RCC_GetPCLK3Freq>
 800968a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800968c:	f000 bea3 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009696:	d108      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff f885 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096a6:	f000 be96 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096b0:	d108      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b2:	f107 0308 	add.w	r3, r7, #8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff f9e2 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096c0:	f000 be89 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80096c4:	4b26      	ldr	r3, [pc, #152]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d10d      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80096d6:	d109      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096d8:	4b21      	ldr	r3, [pc, #132]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	08db      	lsrs	r3, r3, #3
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	4a20      	ldr	r2, [pc, #128]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ea:	e020      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80096ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f8:	d106      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009700:	d102      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8009702:	4b19      	ldr	r3, [pc, #100]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
 8009706:	e012      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009708:	4b15      	ldr	r3, [pc, #84]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800970a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d107      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800971c:	d103      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800971e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
 8009724:	e003      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800972a:	f000 be54 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800972e:	f000 be52 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009732:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009744:	f7fd fcaa 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8009748:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800974a:	f000 be44 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	2b01      	cmp	r3, #1
 8009752:	d10b      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8009754:	f7fd fb76 	bl	8006e44 <HAL_RCC_GetSysClockFreq>
 8009758:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800975a:	f000 be3c 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800975e:	bf00      	nop
 8009760:	44020c00 	.word	0x44020c00
 8009764:	03d09000 	.word	0x03d09000
 8009768:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	2b02      	cmp	r3, #2
 8009770:	d108      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009772:	f107 0314 	add.w	r3, r7, #20
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff f818 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009780:	f000 be29 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009784:	4b9f      	ldr	r3, [pc, #636]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009790:	d105      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	2b03      	cmp	r3, #3
 8009796:	d102      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8009798:	4b9b      	ldr	r3, [pc, #620]	@ (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	e023      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800979e:	4b99      	ldr	r3, [pc, #612]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d10c      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d109      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097b0:	4b94      	ldr	r3, [pc, #592]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	08db      	lsrs	r3, r3, #3
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	4a94      	ldr	r2, [pc, #592]	@ (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80097bc:	fa22 f303 	lsr.w	r3, r2, r3
 80097c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c2:	e010      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80097c4:	4b8f      	ldr	r3, [pc, #572]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d0:	d105      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	2b05      	cmp	r3, #5
 80097d6:	d102      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80097d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
 80097dc:	e003      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097e2:	f000 bdf8 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80097e6:	f000 bdf6 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80097ea:	4b86      	ldr	r3, [pc, #536]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80097ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80097f6:	4b83      	ldr	r3, [pc, #524]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80097f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b02      	cmp	r3, #2
 8009802:	d106      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009810:	e012      	b.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009812:	4b7c      	ldr	r3, [pc, #496]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800981c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009820:	d106      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	2b08      	cmp	r3, #8
 8009826:	d103      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8009828:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009834:	f000 bdcf 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009838:	f000 bdcd 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800983c:	4b71      	ldr	r3, [pc, #452]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800983e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009846:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800984e:	f7fd fc41 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009852:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009854:	f000 bdbf 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985e:	d108      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff f90b 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800986e:	f000 bdb2 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009872:	4b64      	ldr	r3, [pc, #400]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b02      	cmp	r3, #2
 800987c:	d10d      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009884:	d109      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009886:	4b5f      	ldr	r3, [pc, #380]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	08db      	lsrs	r3, r3, #3
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	4a5e      	ldr	r2, [pc, #376]	@ (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009892:	fa22 f303 	lsr.w	r3, r2, r3
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
 8009898:	e011      	b.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800989a:	4b5a      	ldr	r3, [pc, #360]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a6:	d106      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098ae:	d102      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80098b0:	4b57      	ldr	r3, [pc, #348]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e003      	b.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ba:	f000 bd8c 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80098be:	f000 bd8a 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80098c2:	4b50      	ldr	r3, [pc, #320]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80098c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098c8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80098cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d104      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80098d4:	f7fd fbfe 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80098d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80098da:	f000 bd7c 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098e4:	d108      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff f8c8 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f4:	f000 bd6f 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80098f8:	4b42      	ldr	r3, [pc, #264]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b02      	cmp	r3, #2
 8009902:	d10d      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800990a:	d109      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800990c:	4b3d      	ldr	r3, [pc, #244]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	08db      	lsrs	r3, r3, #3
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	4a3d      	ldr	r2, [pc, #244]	@ (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009918:	fa22 f303 	lsr.w	r3, r2, r3
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
 800991e:	e011      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009920:	4b38      	ldr	r3, [pc, #224]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800992c:	d106      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009934:	d102      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8009936:	4b36      	ldr	r3, [pc, #216]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	e003      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009940:	f000 bd49 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009944:	f000 bd47 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009948:	4b2e      	ldr	r3, [pc, #184]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800994a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800994e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009952:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	2b00      	cmp	r3, #0
 8009958:	d104      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800995a:	f7fd fbe7 	bl	800712c <HAL_RCC_GetPCLK3Freq>
 800995e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009960:	f000 bd39 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800996a:	d108      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff f885 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800997a:	f000 bd2c 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800997e:	4b21      	ldr	r3, [pc, #132]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b02      	cmp	r3, #2
 8009988:	d10d      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009990:	d109      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009992:	4b1c      	ldr	r3, [pc, #112]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	08db      	lsrs	r3, r3, #3
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	4a1b      	ldr	r2, [pc, #108]	@ (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800999e:	fa22 f303 	lsr.w	r3, r2, r3
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a4:	e011      	b.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80099a6:	4b17      	ldr	r3, [pc, #92]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b2:	d106      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ba:	d102      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80099bc:	4b14      	ldr	r3, [pc, #80]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c0:	e003      	b.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c6:	f000 bd06 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80099ca:	f000 bd04 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80099d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099d4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80099d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80099e0:	f7fd fb78 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80099e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80099e6:	f000 bcf6 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099f0:	d110      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099f2:	f107 0308 	add.w	r3, r7, #8
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff f842 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a00:	f000 bce9 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009a04:	44020c00 	.word	0x44020c00
 8009a08:	016e3600 	.word	0x016e3600
 8009a0c:	03d09000 	.word	0x03d09000
 8009a10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009a14:	4ba4      	ldr	r3, [pc, #656]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d10e      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a26:	d10a      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a28:	4b9f      	ldr	r3, [pc, #636]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	08db      	lsrs	r3, r3, #3
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	4a9e      	ldr	r2, [pc, #632]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a3a:	f000 bccc 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a42:	f000 bcc8 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8009a46:	4b98      	ldr	r3, [pc, #608]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a4c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009a50:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8009a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009a58:	f7fd fb68 	bl	800712c <HAL_RCC_GetPCLK3Freq>
 8009a5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a5e:	f000 bcba 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a68:	d108      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff f806 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a78:	f000 bcad 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8009a7c:	4b8a      	ldr	r3, [pc, #552]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d10e      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a90:	4b85      	ldr	r3, [pc, #532]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a84      	ldr	r2, [pc, #528]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aa2:	f000 bc98 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aaa:	f000 bc94 	b.w	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009aae:	4b7e      	ldr	r3, [pc, #504]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009ab0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009ab4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009ac0:	d056      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009ac8:	f200 808b 	bhi.w	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ad2:	d03e      	beq.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ada:	f200 8082 	bhi.w	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ae4:	d027      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aec:	d879      	bhi.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af4:	d017      	beq.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009afc:	d871      	bhi.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b0a:	d004      	beq.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8009b0c:	e069      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b0e:	f7fd fb0d 	bl	800712c <HAL_RCC_GetPCLK3Freq>
 8009b12:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009b14:	e068      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b16:	f107 0314 	add.w	r3, r7, #20
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fe46 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b24:	e060      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe ffa8 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b34:	e058      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b36:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d103      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8009b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b4a:	e04d      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b50:	e04a      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b52:	4b55      	ldr	r3, [pc, #340]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b60:	d103      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8009b62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b68:	e03e      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b6e:	e03b      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b70:	4b4d      	ldr	r3, [pc, #308]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d10c      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8009b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b8e:	4b46      	ldr	r3, [pc, #280]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	08db      	lsrs	r3, r3, #3
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	4a44      	ldr	r2, [pc, #272]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba0:	e01e      	b.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba2:	4b41      	ldr	r3, [pc, #260]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bae:	d106      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bb6:	d102      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbc:	e010      	b.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bca:	d106      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bd2:	d102      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009bd4:	4b37      	ldr	r3, [pc, #220]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8009bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bd8:	e002      	b.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009bde:	e003      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009be0:	e002      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009be6:	bf00      	nop
          }
        }
        break;
 8009be8:	e3f5      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009bea:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009bec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009bf0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009bfc:	d05f      	beq.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009c04:	f200 8094 	bhi.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c0e:	d03f      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c16:	f200 808b 	bhi.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c20:	d028      	beq.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c28:	f200 8082 	bhi.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c32:	d017      	beq.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c3a:	d879      	bhi.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c48:	d004      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8009c4a:	e071      	b.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fd fa42 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009c50:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009c52:	e070      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c54:	f107 0314 	add.w	r3, r7, #20
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe fda7 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c62:	e068      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c64:	f107 0308 	add.w	r3, r7, #8
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe ff09 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c72:	e060      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d103      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8009c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c86:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c88:	e055      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c8e:	e052      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009c90:	4b05      	ldr	r3, [pc, #20]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c9e:	d10b      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8009ca0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ca6:	e046      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009ca8:	44020c00 	.word	0x44020c00
 8009cac:	03d09000 	.word	0x03d09000
 8009cb0:	003d0900 	.word	0x003d0900
 8009cb4:	016e3600 	.word	0x016e3600
              frequency = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cbc:	e03b      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cbe:	4bae      	ldr	r3, [pc, #696]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cc4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cca:	4bab      	ldr	r3, [pc, #684]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d10c      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d109      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	4aa5      	ldr	r2, [pc, #660]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cee:	e01e      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cf0:	4ba1      	ldr	r3, [pc, #644]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfc:	d106      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8009cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d04:	d102      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d06:	4b9e      	ldr	r3, [pc, #632]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d0a:	e010      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d18:	d106      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d22:	4b98      	ldr	r3, [pc, #608]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d26:	e002      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d2c:	e003      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009d2e:	e002      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d34:	bf00      	nop
          }
        }
        break;
 8009d36:	e34e      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009d38:	4b8f      	ldr	r3, [pc, #572]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d42:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009d44:	4b8c      	ldr	r3, [pc, #560]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d50:	d105      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8009d58:	4b8a      	ldr	r3, [pc, #552]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009d5c:	e33b      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d64:	d107      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d66:	f107 0320 	add.w	r3, r7, #32
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fbb4 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d74:	e32f      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d7c:	d107      	bne.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d7e:	f107 0314 	add.w	r3, r7, #20
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fd12 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d8c:	e323      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d92:	e320      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009d94:	4b78      	ldr	r3, [pc, #480]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d860      	bhi.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dc1 	.word	0x08009dc1
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	08009df1 	.word	0x08009df1
 8009dbc:	08009df7 	.word	0x08009df7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc0:	f107 0320 	add.w	r3, r7, #32
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe fb87 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dce:	e04e      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd0:	f107 0314 	add.w	r3, r7, #20
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fce9 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dde:	e046      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de0:	f107 0308 	add.w	r3, r7, #8
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fe4b 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dee:	e03e      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009df0:	4b65      	ldr	r3, [pc, #404]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009df4:	e03b      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009df6:	4b60      	ldr	r3, [pc, #384]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dfc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e02:	4b5d      	ldr	r3, [pc, #372]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d10c      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8009e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e14:	4b58      	ldr	r3, [pc, #352]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	08db      	lsrs	r3, r3, #3
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	4a57      	ldr	r2, [pc, #348]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009e20:	fa22 f303 	lsr.w	r3, r2, r3
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e26:	e01e      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e28:	4b53      	ldr	r3, [pc, #332]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e34:	d106      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e3c:	d102      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e3e:	4b50      	ldr	r3, [pc, #320]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e42:	e010      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e44:	4b4c      	ldr	r3, [pc, #304]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e50:	d106      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8009e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e58:	d102      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5e:	e002      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8009e66:	e002      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e6c:	bf00      	nop
          }
        }
        break;
 8009e6e:	e2b2      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009e70:	4b41      	ldr	r3, [pc, #260]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	f200 80a4 	bhi.w	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8009e84:	a201      	add	r2, pc, #4	@ (adr r2, 8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009f11 	.word	0x08009f11
 8009e90:	08009fcd 	.word	0x08009fcd
 8009e94:	08009fcd 	.word	0x08009fcd
 8009e98:	08009fcd 	.word	0x08009fcd
 8009e9c:	08009fcd 	.word	0x08009fcd
 8009ea0:	08009fcd 	.word	0x08009fcd
 8009ea4:	08009fcd 	.word	0x08009fcd
 8009ea8:	08009fcd 	.word	0x08009fcd
 8009eac:	08009f21 	.word	0x08009f21
 8009eb0:	08009fcd 	.word	0x08009fcd
 8009eb4:	08009fcd 	.word	0x08009fcd
 8009eb8:	08009fcd 	.word	0x08009fcd
 8009ebc:	08009fcd 	.word	0x08009fcd
 8009ec0:	08009fcd 	.word	0x08009fcd
 8009ec4:	08009fcd 	.word	0x08009fcd
 8009ec8:	08009fcd 	.word	0x08009fcd
 8009ecc:	08009f31 	.word	0x08009f31
 8009ed0:	08009fcd 	.word	0x08009fcd
 8009ed4:	08009fcd 	.word	0x08009fcd
 8009ed8:	08009fcd 	.word	0x08009fcd
 8009edc:	08009fcd 	.word	0x08009fcd
 8009ee0:	08009fcd 	.word	0x08009fcd
 8009ee4:	08009fcd 	.word	0x08009fcd
 8009ee8:	08009fcd 	.word	0x08009fcd
 8009eec:	08009f41 	.word	0x08009f41
 8009ef0:	08009fcd 	.word	0x08009fcd
 8009ef4:	08009fcd 	.word	0x08009fcd
 8009ef8:	08009fcd 	.word	0x08009fcd
 8009efc:	08009fcd 	.word	0x08009fcd
 8009f00:	08009fcd 	.word	0x08009fcd
 8009f04:	08009fcd 	.word	0x08009fcd
 8009f08:	08009fcd 	.word	0x08009fcd
 8009f0c:	08009f47 	.word	0x08009f47
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f10:	f107 0320 	add.w	r3, r7, #32
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fadf 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f1e:	e058      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fc41 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f2e:	e050      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fda3 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f3e:	e048      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f40:	4b11      	ldr	r3, [pc, #68]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f44:	e045      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f46:	4b0c      	ldr	r3, [pc, #48]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f52:	4b09      	ldr	r3, [pc, #36]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d116      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8009f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d113      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	08db      	lsrs	r3, r3, #3
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	4a03      	ldr	r2, [pc, #12]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009f70:	fa22 f303 	lsr.w	r3, r2, r3
 8009f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f76:	e028      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009f78:	44020c00 	.word	0x44020c00
 8009f7c:	03d09000 	.word	0x03d09000
 8009f80:	003d0900 	.word	0x003d0900
 8009f84:	016e3600 	.word	0x016e3600
 8009f88:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8c:	4b95      	ldr	r3, [pc, #596]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f98:	d106      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8009f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa0:	d102      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009fa2:	4b91      	ldr	r3, [pc, #580]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa6:	e010      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fa8:	4b8e      	ldr	r3, [pc, #568]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb4:	d106      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8009fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fbc:	d102      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fbe:	4b8b      	ldr	r3, [pc, #556]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc2:	e002      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009fc8:	e003      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009fca:	e002      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fd0:	bf00      	nop
          }
        }
        break;
 8009fd2:	e200      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009fd4:	4b83      	ldr	r3, [pc, #524]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fda:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe6:	d031      	beq.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fee:	d866      	bhi.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ff4:	d027      	beq.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ffa:	d860      	bhi.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	2b80      	cmp	r3, #128	@ 0x80
 800a000:	d019      	beq.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	2b80      	cmp	r3, #128	@ 0x80
 800a006:	d85a      	bhi.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800a00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a010:	2b40      	cmp	r3, #64	@ 0x40
 800a012:	d008      	beq.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 800a014:	e053      	b.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a016:	f107 0320 	add.w	r3, r7, #32
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe fa5c 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a024:	e04e      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a026:	f107 0314 	add.w	r3, r7, #20
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fbbe 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a034:	e046      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a036:	f107 0308 	add.w	r3, r7, #8
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fd20 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a044:	e03e      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a046:	4b6a      	ldr	r3, [pc, #424]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800a048:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a04a:	e03b      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a04c:	4b65      	ldr	r3, [pc, #404]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a04e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a052:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a056:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a058:	4b62      	ldr	r3, [pc, #392]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b02      	cmp	r3, #2
 800a062:	d10c      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a06a:	4b5e      	ldr	r3, [pc, #376]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	08db      	lsrs	r3, r3, #3
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	4a5f      	ldr	r2, [pc, #380]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800a076:	fa22 f303 	lsr.w	r3, r2, r3
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a07c:	e01e      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a07e:	4b59      	ldr	r3, [pc, #356]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a08a:	d106      	bne.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a092:	d102      	bne.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a094:	4b54      	ldr	r3, [pc, #336]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800a096:	637b      	str	r3, [r7, #52]	@ 0x34
 800a098:	e010      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a09a:	4b52      	ldr	r3, [pc, #328]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0a6:	d106      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800a0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ae:	d102      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0b0:	4b4e      	ldr	r3, [pc, #312]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800a0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b4:	e002      	b.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a0ba:	e003      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0c2:	bf00      	nop
          }
        }
        break;
 800a0c4:	e187      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a0c6:	4b47      	ldr	r3, [pc, #284]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0cc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a0d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a0d8:	f7fd f812 	bl	8007100 <HAL_RCC_GetPCLK2Freq>
 800a0dc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a0de:	e17a      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a0e0:	4b40      	ldr	r3, [pc, #256]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0ec:	d10b      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0f4:	d107      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0f6:	f107 0314 	add.w	r3, r7, #20
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fb56 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	637b      	str	r3, [r7, #52]	@ 0x34
 800a104:	e045      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a106:	4b37      	ldr	r3, [pc, #220]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a10e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a112:	d10b      	bne.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a11a:	d107      	bne.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a11c:	f107 0308 	add.w	r3, r7, #8
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fcad 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
 800a12a:	e032      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a12c:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b02      	cmp	r3, #2
 800a136:	d10d      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a13e:	d109      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a140:	4b28      	ldr	r3, [pc, #160]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	08db      	lsrs	r3, r3, #3
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	4a2a      	ldr	r2, [pc, #168]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800a14c:	fa22 f303 	lsr.w	r3, r2, r3
 800a150:	637b      	str	r3, [r7, #52]	@ 0x34
 800a152:	e01e      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a154:	4b23      	ldr	r3, [pc, #140]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a160:	d106      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a168:	d102      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800a16a:	4b1f      	ldr	r3, [pc, #124]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800a16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a16e:	e010      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a170:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a17c:	d106      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a184:	d102      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800a186:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800a188:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18a:	e002      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a190:	e121      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800a192:	e120      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a194:	4b13      	ldr	r3, [pc, #76]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800a196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d861      	bhi.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800a1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a1bd 	.word	0x0800a1bd
 800a1b0:	0800a1c5 	.word	0x0800a1c5
 800a1b4:	0800a1d5 	.word	0x0800a1d5
 800a1b8:	0800a1f9 	.word	0x0800a1f9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a1bc:	f7fc ff6e 	bl	800709c <HAL_RCC_GetHCLKFreq>
 800a1c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a1c2:	e055      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c4:	f107 0320 	add.w	r3, r7, #32
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe f985 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d2:	e04d      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fae7 	bl	80087ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1e2:	e045      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800a1e4:	44020c00 	.word	0x44020c00
 800a1e8:	003d0900 	.word	0x003d0900
 800a1ec:	016e3600 	.word	0x016e3600
 800a1f0:	00bb8000 	.word	0x00bb8000
 800a1f4:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f8:	4b79      	ldr	r3, [pc, #484]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a1fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a202:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a204:	4b76      	ldr	r3, [pc, #472]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d10c      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a216:	4b72      	ldr	r3, [pc, #456]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	4a70      	ldr	r2, [pc, #448]	@ (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
 800a228:	e01e      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a22a:	4b6d      	ldr	r3, [pc, #436]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a236:	d106      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a23e:	d102      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a240:	4b69      	ldr	r3, [pc, #420]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34
 800a244:	e010      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a246:	4b66      	ldr	r3, [pc, #408]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d106      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25a:	d102      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a25c:	4b63      	ldr	r3, [pc, #396]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a266:	e003      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800a268:	e002      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a26e:	bf00      	nop
          }
        }
        break;
 800a270:	e0b1      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a272:	4b5b      	ldr	r3, [pc, #364]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a278:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a27c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a27e:	4b58      	ldr	r3, [pc, #352]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a284:	f003 0302 	and.w	r3, r3, #2
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d106      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d103      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800a292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a296:	637b      	str	r3, [r7, #52]	@ 0x34
 800a298:	e01f      	b.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a29a:	4b51      	ldr	r3, [pc, #324]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a29c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2a8:	d106      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2b40      	cmp	r3, #64	@ 0x40
 800a2ae:	d103      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 800a2b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b6:	e010      	b.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a2b8:	4b49      	ldr	r3, [pc, #292]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c4:	d106      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ca:	d103      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 800a2cc:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d2:	e002      	b.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a2d8:	e07d      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800a2da:	e07c      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a2dc:	4b40      	ldr	r3, [pc, #256]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a2de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a2e8:	4b3d      	ldr	r3, [pc, #244]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f4:	d105      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d102      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 800a2fc:	4b3c      	ldr	r3, [pc, #240]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800a2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a300:	e031      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a302:	4b37      	ldr	r3, [pc, #220]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a30a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a30e:	d10a      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800a310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a312:	2b10      	cmp	r3, #16
 800a314:	d107      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a316:	f107 0320 	add.w	r3, r7, #32
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe f8dc 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	637b      	str	r3, [r7, #52]	@ 0x34
 800a324:	e01f      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a326:	4b2e      	ldr	r3, [pc, #184]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b02      	cmp	r3, #2
 800a332:	d106      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	2b20      	cmp	r3, #32
 800a338:	d103      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800a33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a340:	e011      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a342:	4b27      	ldr	r3, [pc, #156]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a34c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a350:	d106      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	2b30      	cmp	r3, #48	@ 0x30
 800a356:	d103      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800a358:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35e:	e002      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a364:	e037      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800a366:	e036      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a368:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a36a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a36e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	2b10      	cmp	r3, #16
 800a378:	d107      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a37a:	f107 0320 	add.w	r3, r7, #32
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe f8aa 	bl	80084d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a388:	e025      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a38a:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a396:	d10a      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d107      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fb6c 	bl	8008a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ac:	e00f      	b.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ba:	d105      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	2b30      	cmp	r3, #48	@ 0x30
 800a3c0:	d102      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c6:	e002      	b.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a3cc:	e003      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800a3ce:	e002      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3d4:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	373c      	adds	r7, #60	@ 0x3c
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd90      	pop	{r4, r7, pc}
 800a3e0:	44020c00 	.word	0x44020c00
 800a3e4:	03d09000 	.word	0x03d09000
 800a3e8:	003d0900 	.word	0x003d0900
 800a3ec:	016e3600 	.word	0x016e3600
 800a3f0:	02dc6c00 	.word	0x02dc6c00

0800a3f4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a3fc:	4b48      	ldr	r3, [pc, #288]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a47      	ldr	r2, [pc, #284]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a406:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a408:	f7fb f9a4 	bl	8005754 <HAL_GetTick>
 800a40c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a40e:	e008      	b.n	800a422 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a410:	f7fb f9a0 	bl	8005754 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e07a      	b.n	800a518 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a422:	4b3f      	ldr	r3, [pc, #252]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f0      	bne.n	800a410 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a42e:	4b3c      	ldr	r3, [pc, #240]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a432:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a436:	f023 0303 	bic.w	r3, r3, #3
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6811      	ldr	r1, [r2, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6852      	ldr	r2, [r2, #4]
 800a442:	0212      	lsls	r2, r2, #8
 800a444:	430a      	orrs	r2, r1
 800a446:	4936      	ldr	r1, [pc, #216]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	3b01      	subs	r3, #1
 800a452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	b29b      	uxth	r3, r3
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	3b01      	subs	r3, #1
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	3b01      	subs	r3, #1
 800a476:	061b      	lsls	r3, r3, #24
 800a478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a47c:	4928      	ldr	r1, [pc, #160]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a482:	4b27      	ldr	r3, [pc, #156]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	f023 020c 	bic.w	r2, r3, #12
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	4924      	ldr	r1, [pc, #144]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a494:	4b22      	ldr	r3, [pc, #136]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	f023 0220 	bic.w	r2, r3, #32
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	491f      	ldr	r1, [pc, #124]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ae:	491c      	ldr	r1, [pc, #112]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b8:	4a19      	ldr	r2, [pc, #100]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4ba:	f023 0310 	bic.w	r3, r3, #16
 800a4be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a4c0:	4b17      	ldr	r3, [pc, #92]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6a12      	ldr	r2, [r2, #32]
 800a4d0:	00d2      	lsls	r2, r2, #3
 800a4d2:	4913      	ldr	r1, [pc, #76]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a4d8:	4b11      	ldr	r3, [pc, #68]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4dc:	4a10      	ldr	r2, [pc, #64]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4de:	f043 0310 	orr.w	r3, r3, #16
 800a4e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a4ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4f0:	f7fb f930 	bl	8005754 <HAL_GetTick>
 800a4f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4f6:	e008      	b.n	800a50a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4f8:	f7fb f92c 	bl	8005754 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e006      	b.n	800a518 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a50a:	4b05      	ldr	r3, [pc, #20]	@ (800a520 <RCCEx_PLL2_Config+0x12c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f0      	beq.n	800a4f8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0

}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	44020c00 	.word	0x44020c00

0800a524 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a52c:	4b48      	ldr	r3, [pc, #288]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a47      	ldr	r2, [pc, #284]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a536:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a538:	f7fb f90c 	bl	8005754 <HAL_GetTick>
 800a53c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a53e:	e008      	b.n	800a552 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a540:	f7fb f908 	bl	8005754 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d901      	bls.n	800a552 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e07a      	b.n	800a648 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a552:	4b3f      	ldr	r3, [pc, #252]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1f0      	bne.n	800a540 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a55e:	4b3c      	ldr	r3, [pc, #240]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a562:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a566:	f023 0303 	bic.w	r3, r3, #3
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6811      	ldr	r1, [r2, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6852      	ldr	r2, [r2, #4]
 800a572:	0212      	lsls	r2, r2, #8
 800a574:	430a      	orrs	r2, r1
 800a576:	4936      	ldr	r1, [pc, #216]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	630b      	str	r3, [r1, #48]	@ 0x30
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	3b01      	subs	r3, #1
 800a582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	025b      	lsls	r3, r3, #9
 800a58e:	b29b      	uxth	r3, r3
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	3b01      	subs	r3, #1
 800a598:	041b      	lsls	r3, r3, #16
 800a59a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	061b      	lsls	r3, r3, #24
 800a5a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a5ac:	4928      	ldr	r1, [pc, #160]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5b2:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b6:	f023 020c 	bic.w	r2, r3, #12
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	4924      	ldr	r1, [pc, #144]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a5c4:	4b22      	ldr	r3, [pc, #136]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c8:	f023 0220 	bic.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	491f      	ldr	r1, [pc, #124]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5de:	491c      	ldr	r1, [pc, #112]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a5e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e8:	4a19      	ldr	r2, [pc, #100]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5ea:	f023 0310 	bic.w	r3, r3, #16
 800a5ee:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a5f0:	4b17      	ldr	r3, [pc, #92]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a5f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6a12      	ldr	r2, [r2, #32]
 800a600:	00d2      	lsls	r2, r2, #3
 800a602:	4913      	ldr	r1, [pc, #76]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a604:	4313      	orrs	r3, r2
 800a606:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a608:	4b11      	ldr	r3, [pc, #68]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60c:	4a10      	ldr	r2, [pc, #64]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a60e:	f043 0310 	orr.w	r3, r3, #16
 800a612:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a614:	4b0e      	ldr	r3, [pc, #56]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a0d      	ldr	r2, [pc, #52]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a620:	f7fb f898 	bl	8005754 <HAL_GetTick>
 800a624:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a626:	e008      	b.n	800a63a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a628:	f7fb f894 	bl	8005754 <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	2b02      	cmp	r3, #2
 800a634:	d901      	bls.n	800a63a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e006      	b.n	800a648 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a63a:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <RCCEx_PLL3_Config+0x12c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0f0      	beq.n	800a628 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	44020c00 	.word	0x44020c00

0800a654 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e10d      	b.n	800a882 <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a88      	ldr	r2, [pc, #544]	@ (800a88c <HAL_SPI_Init+0x238>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d004      	beq.n	800a67a <HAL_SPI_Init+0x26>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a86      	ldr	r2, [pc, #536]	@ (800a890 <HAL_SPI_Init+0x23c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	e000      	b.n	800a67c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a67a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a81      	ldr	r2, [pc, #516]	@ (800a88c <HAL_SPI_Init+0x238>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d004      	beq.n	800a696 <HAL_SPI_Init+0x42>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a7f      	ldr	r2, [pc, #508]	@ (800a890 <HAL_SPI_Init+0x23c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d105      	bne.n	800a6a2 <HAL_SPI_Init+0x4e>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	2b0f      	cmp	r3, #15
 800a69c:	d901      	bls.n	800a6a2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e0ef      	b.n	800a882 <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fc3a 	bl	800af1c <SPI_GetPacketSize>
 800a6a8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a77      	ldr	r2, [pc, #476]	@ (800a88c <HAL_SPI_Init+0x238>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d004      	beq.n	800a6be <HAL_SPI_Init+0x6a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a75      	ldr	r2, [pc, #468]	@ (800a890 <HAL_SPI_Init+0x23c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d102      	bne.n	800a6c4 <HAL_SPI_Init+0x70>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d820      	bhi.n	800a706 <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6c8:	4a72      	ldr	r2, [pc, #456]	@ (800a894 <HAL_SPI_Init+0x240>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d018      	beq.n	800a700 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a71      	ldr	r2, [pc, #452]	@ (800a898 <HAL_SPI_Init+0x244>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d013      	beq.n	800a700 <HAL_SPI_Init+0xac>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a6f      	ldr	r2, [pc, #444]	@ (800a89c <HAL_SPI_Init+0x248>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d00e      	beq.n	800a700 <HAL_SPI_Init+0xac>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a6e      	ldr	r2, [pc, #440]	@ (800a8a0 <HAL_SPI_Init+0x24c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d009      	beq.n	800a700 <HAL_SPI_Init+0xac>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a6c      	ldr	r2, [pc, #432]	@ (800a8a4 <HAL_SPI_Init+0x250>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d004      	beq.n	800a700 <HAL_SPI_Init+0xac>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a6b      	ldr	r2, [pc, #428]	@ (800a8a8 <HAL_SPI_Init+0x254>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d104      	bne.n	800a70a <HAL_SPI_Init+0xb6>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b10      	cmp	r3, #16
 800a704:	d901      	bls.n	800a70a <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e0bb      	b.n	800a882 <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7fa fa5e 	bl	8004be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a746:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a750:	d119      	bne.n	800a786 <HAL_SPI_Init+0x132>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a75a:	d103      	bne.n	800a764 <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10c      	bne.n	800a786 <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a774:	d107      	bne.n	800a786 <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a784:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00f      	beq.n	800a7b2 <HAL_SPI_Init+0x15e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b06      	cmp	r3, #6
 800a798:	d90b      	bls.n	800a7b2 <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e007      	b.n	800a7c2 <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69da      	ldr	r2, [r3, #28]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d4:	ea42 0103 	orr.w	r1, r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	431a      	orrs	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	431a      	orrs	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a816:	431a      	orrs	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	431a      	orrs	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a828:	431a      	orrs	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a82e:	ea42 0103 	orr.w	r1, r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0201 	bic.w	r2, r2, #1
 800a84c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	40014c00 	.word	0x40014c00
 800a890:	50014c00 	.word	0x50014c00
 800a894:	40013000 	.word	0x40013000
 800a898:	50013000 	.word	0x50013000
 800a89c:	40003800 	.word	0x40003800
 800a8a0:	50003800 	.word	0x50003800
 800a8a4:	40003c00 	.word	0x40003c00
 800a8a8:	50003c00 	.word	0x50003c00

0800a8ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08c      	sub	sp, #48	@ 0x30
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3320      	adds	r3, #32
 800a8c0:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3330      	adds	r3, #48	@ 0x30
 800a8c8:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8ca:	f7fa ff43 	bl	8005754 <HAL_GetTick>
 800a8ce:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800a8d0:	887b      	ldrh	r3, [r7, #2]
 800a8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 800a8d4:	887b      	ldrh	r3, [r7, #2]
 800a8d6:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d001      	beq.n	800a8e8 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e247      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <HAL_SPI_TransmitReceive+0x4e>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <HAL_SPI_TransmitReceive+0x4e>
 800a8f4:	887b      	ldrh	r3, [r7, #2]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e23c      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_SPI_TransmitReceive+0x60>
 800a908:	2302      	movs	r3, #2
 800a90a:	e235      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2205      	movs	r2, #5
 800a918:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	887a      	ldrh	r2, [r7, #2]
 800a92e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	887a      	ldrh	r2, [r7, #2]
 800a936:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	887a      	ldrh	r2, [r7, #2]
 800a944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	887a      	ldrh	r2, [r7, #2]
 800a94c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a96a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a72      	ldr	r2, [pc, #456]	@ (800ab3c <HAL_SPI_TransmitReceive+0x290>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d018      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0xfc>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a71      	ldr	r2, [pc, #452]	@ (800ab40 <HAL_SPI_TransmitReceive+0x294>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d013      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0xfc>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a6f      	ldr	r2, [pc, #444]	@ (800ab44 <HAL_SPI_TransmitReceive+0x298>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00e      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0xfc>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a6e      	ldr	r2, [pc, #440]	@ (800ab48 <HAL_SPI_TransmitReceive+0x29c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0xfc>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a6c      	ldr	r2, [pc, #432]	@ (800ab4c <HAL_SPI_TransmitReceive+0x2a0>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d004      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0xfc>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a6b      	ldr	r2, [pc, #428]	@ (800ab50 <HAL_SPI_TransmitReceive+0x2a4>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d102      	bne.n	800a9ae <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ac:	e001      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a9ae:	2308      	movs	r3, #8
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	041b      	lsls	r3, r3, #16
 800a9bc:	8879      	ldrh	r1, [r7, #2]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f042 0201 	orr.w	r2, r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9de:	d107      	bne.n	800a9f0 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	2b0f      	cmp	r3, #15
 800a9f6:	f240 8098 	bls.w	800ab2a <HAL_SPI_TransmitReceive+0x27e>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a4f      	ldr	r2, [pc, #316]	@ (800ab3c <HAL_SPI_TransmitReceive+0x290>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d018      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x18a>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a4d      	ldr	r2, [pc, #308]	@ (800ab40 <HAL_SPI_TransmitReceive+0x294>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d013      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x18a>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a4c      	ldr	r2, [pc, #304]	@ (800ab44 <HAL_SPI_TransmitReceive+0x298>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00e      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x18a>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a4a      	ldr	r2, [pc, #296]	@ (800ab48 <HAL_SPI_TransmitReceive+0x29c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d009      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x18a>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a49      	ldr	r2, [pc, #292]	@ (800ab4c <HAL_SPI_TransmitReceive+0x2a0>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x18a>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a47      	ldr	r2, [pc, #284]	@ (800ab50 <HAL_SPI_TransmitReceive+0x2a4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d179      	bne.n	800ab2a <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa38:	089b      	lsrs	r3, r3, #2
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa3c:	e06e      	b.n	800ab1c <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d120      	bne.n	800aa8e <HAL_SPI_TransmitReceive+0x1e2>
 800aa4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d01d      	beq.n	800aa8e <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa52:	8c3a      	ldrh	r2, [r7, #32]
 800aa54:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa58:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d217      	bcs.n	800aa8e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6812      	ldr	r2, [r2, #0]
 800aa68:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa6e:	1d1a      	adds	r2, r3, #4
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa8c:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	695a      	ldr	r2, [r3, #20]
 800aa94:	f248 0308 	movw	r3, #32776	@ 0x8008
 800aa98:	4013      	ands	r3, r2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01a      	beq.n	800aad4 <HAL_SPI_TransmitReceive+0x228>
 800aa9e:	8c3b      	ldrh	r3, [r7, #32]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d017      	beq.n	800aad4 <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aaae:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab4:	1d1a      	adds	r2, r3, #4
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aad2:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aad4:	f7fa fe3e 	bl	8005754 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d803      	bhi.n	800aaec <HAL_SPI_TransmitReceive+0x240>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d102      	bne.n	800aaf2 <HAL_SPI_TransmitReceive+0x246>
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d114      	bne.n	800ab1c <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 f944 	bl	800ad80 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aafe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e12d      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d18d      	bne.n	800aa3e <HAL_SPI_TransmitReceive+0x192>
 800ab22:	8c3b      	ldrh	r3, [r7, #32]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d18a      	bne.n	800aa3e <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ab28:	e100      	b.n	800ad2c <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	2b07      	cmp	r3, #7
 800ab30:	f240 80f6 	bls.w	800ad20 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab3a:	e078      	b.n	800ac2e <HAL_SPI_TransmitReceive+0x382>
 800ab3c:	40013000 	.word	0x40013000
 800ab40:	50013000 	.word	0x50013000
 800ab44:	40003800 	.word	0x40003800
 800ab48:	50003800 	.word	0x50003800
 800ab4c:	40003c00 	.word	0x40003c00
 800ab50:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	f003 0302 	and.w	r3, r3, #2
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d11f      	bne.n	800aba2 <HAL_SPI_TransmitReceive+0x2f6>
 800ab62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01c      	beq.n	800aba2 <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ab68:	8c3a      	ldrh	r2, [r7, #32]
 800ab6a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d216      	bcs.n	800aba2 <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab78:	881a      	ldrh	r2, [r3, #0]
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab82:	1c9a      	adds	r2, r3, #2
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	3b01      	subs	r3, #1
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aba0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	d11a      	bne.n	800abe6 <HAL_SPI_TransmitReceive+0x33a>
 800abb0:	8c3b      	ldrh	r3, [r7, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d017      	beq.n	800abe6 <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	8812      	ldrh	r2, [r2, #0]
 800abbe:	b292      	uxth	r2, r2
 800abc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc6:	1c9a      	adds	r2, r3, #2
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800abe4:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abe6:	f7fa fdb5 	bl	8005754 <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d803      	bhi.n	800abfe <HAL_SPI_TransmitReceive+0x352>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d102      	bne.n	800ac04 <HAL_SPI_TransmitReceive+0x358>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d114      	bne.n	800ac2e <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f8bb 	bl	800ad80 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e0a4      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d18f      	bne.n	800ab54 <HAL_SPI_TransmitReceive+0x2a8>
 800ac34:	8c3b      	ldrh	r3, [r7, #32]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d18c      	bne.n	800ab54 <HAL_SPI_TransmitReceive+0x2a8>
 800ac3a:	e077      	b.n	800ad2c <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d121      	bne.n	800ac8e <HAL_SPI_TransmitReceive+0x3e2>
 800ac4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01e      	beq.n	800ac8e <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ac50:	8c3a      	ldrh	r2, [r7, #32]
 800ac52:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d218      	bcs.n	800ac8e <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3320      	adds	r3, #32
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac8c:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d11d      	bne.n	800acd8 <HAL_SPI_TransmitReceive+0x42c>
 800ac9c:	8c3b      	ldrh	r3, [r7, #32]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01a      	beq.n	800acd8 <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acae:	7812      	ldrb	r2, [r2, #0]
 800acb0:	b2d2      	uxtb	r2, r2
 800acb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	3b01      	subs	r3, #1
 800acc8:	b29a      	uxth	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800acd6:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acd8:	f7fa fd3c 	bl	8005754 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d803      	bhi.n	800acf0 <HAL_SPI_TransmitReceive+0x444>
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d102      	bne.n	800acf6 <HAL_SPI_TransmitReceive+0x44a>
 800acf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d114      	bne.n	800ad20 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f842 	bl	800ad80 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e02b      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d18a      	bne.n	800ac3c <HAL_SPI_TransmitReceive+0x390>
 800ad26:	8c3b      	ldrh	r3, [r7, #32]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d187      	bne.n	800ac3c <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	2200      	movs	r2, #0
 800ad34:	2108      	movs	r1, #8
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f8c2 	bl	800aec0 <SPI_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad48:	f043 0220 	orr.w	r2, r3, #32
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f000 f814 	bl	800ad80 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 800ad76:	2300      	movs	r3, #0
  }
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3728      	adds	r7, #40	@ 0x28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0208 	orr.w	r2, r2, #8
 800ad9e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	699a      	ldr	r2, [r3, #24]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f042 0210 	orr.w	r2, r2, #16
 800adae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ade2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b04      	cmp	r3, #4
 800adee:	d014      	beq.n	800ae1a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f003 0320 	and.w	r3, r3, #32
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	699a      	ldr	r2, [r3, #24]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f042 0220 	orr.w	r2, r2, #32
 800ae18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d014      	beq.n	800ae50 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00f      	beq.n	800ae50 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae36:	f043 0204 	orr.w	r2, r3, #4
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00f      	beq.n	800ae7a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae60:	f043 0201 	orr.w	r2, r3, #1
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	699a      	ldr	r2, [r3, #24]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00f      	beq.n	800aea4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae8a:	f043 0208 	orr.w	r2, r3, #8
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aea2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800aeb4:	bf00      	nop
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	4613      	mov	r3, r2
 800aece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aed0:	e010      	b.n	800aef4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aed2:	f7fa fc3f 	bl	8005754 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d803      	bhi.n	800aeea <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d102      	bne.n	800aef0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e00f      	b.n	800af14 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	695a      	ldr	r2, [r3, #20]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4013      	ands	r3, r2
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	429a      	cmp	r2, r3
 800af02:	bf0c      	ite	eq
 800af04:	2301      	moveq	r3, #1
 800af06:	2300      	movne	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d0df      	beq.n	800aed2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af28:	095b      	lsrs	r3, r3, #5
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3307      	adds	r3, #7
 800af3a:	08db      	lsrs	r3, r3, #3
 800af3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	fb02 f303 	mul.w	r3, r2, r3
}
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e049      	b.n	800aff8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d106      	bne.n	800af7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7f9 feaf 	bl	8004cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2202      	movs	r2, #2
 800af82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4619      	mov	r1, r3
 800af90:	4610      	mov	r0, r2
 800af92:	f000 ff09 	bl	800bda8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e07c      	b.n	800b112 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a3a      	ldr	r2, [pc, #232]	@ (800b120 <HAL_TIM_Base_Start_IT+0x120>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d04a      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a39      	ldr	r2, [pc, #228]	@ (800b124 <HAL_TIM_Base_Start_IT+0x124>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d045      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b04c:	d040      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b056:	d03b      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a32      	ldr	r2, [pc, #200]	@ (800b128 <HAL_TIM_Base_Start_IT+0x128>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d036      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a31      	ldr	r2, [pc, #196]	@ (800b12c <HAL_TIM_Base_Start_IT+0x12c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d031      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a2f      	ldr	r2, [pc, #188]	@ (800b130 <HAL_TIM_Base_Start_IT+0x130>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d02c      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a2e      	ldr	r2, [pc, #184]	@ (800b134 <HAL_TIM_Base_Start_IT+0x134>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d027      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a2c      	ldr	r2, [pc, #176]	@ (800b138 <HAL_TIM_Base_Start_IT+0x138>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d022      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a2b      	ldr	r2, [pc, #172]	@ (800b13c <HAL_TIM_Base_Start_IT+0x13c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d01d      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a29      	ldr	r2, [pc, #164]	@ (800b140 <HAL_TIM_Base_Start_IT+0x140>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d018      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a28      	ldr	r2, [pc, #160]	@ (800b144 <HAL_TIM_Base_Start_IT+0x144>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d013      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a26      	ldr	r2, [pc, #152]	@ (800b148 <HAL_TIM_Base_Start_IT+0x148>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00e      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a25      	ldr	r2, [pc, #148]	@ (800b14c <HAL_TIM_Base_Start_IT+0x14c>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d009      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a23      	ldr	r2, [pc, #140]	@ (800b150 <HAL_TIM_Base_Start_IT+0x150>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d004      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0xd0>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a22      	ldr	r2, [pc, #136]	@ (800b154 <HAL_TIM_Base_Start_IT+0x154>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d115      	bne.n	800b0fc <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	4b20      	ldr	r3, [pc, #128]	@ (800b158 <HAL_TIM_Base_Start_IT+0x158>)
 800b0d8:	4013      	ands	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b06      	cmp	r3, #6
 800b0e0:	d015      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0x10e>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0e8:	d011      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fa:	e008      	b.n	800b10e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e000      	b.n	800b110 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	40012c00 	.word	0x40012c00
 800b124:	50012c00 	.word	0x50012c00
 800b128:	40000400 	.word	0x40000400
 800b12c:	50000400 	.word	0x50000400
 800b130:	40000800 	.word	0x40000800
 800b134:	50000800 	.word	0x50000800
 800b138:	40000c00 	.word	0x40000c00
 800b13c:	50000c00 	.word	0x50000c00
 800b140:	40013400 	.word	0x40013400
 800b144:	50013400 	.word	0x50013400
 800b148:	40001800 	.word	0x40001800
 800b14c:	50001800 	.word	0x50001800
 800b150:	40014000 	.word	0x40014000
 800b154:	50014000 	.word	0x50014000
 800b158:	00010007 	.word	0x00010007

0800b15c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68da      	ldr	r2, [r3, #12]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0201 	bic.w	r2, r2, #1
 800b172:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6a1a      	ldr	r2, [r3, #32]
 800b17a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b17e:	4013      	ands	r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10f      	bne.n	800b1a4 <HAL_TIM_Base_Stop_IT+0x48>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6a1a      	ldr	r2, [r3, #32]
 800b18a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b18e:	4013      	ands	r3, r2
 800b190:	2b00      	cmp	r3, #0
 800b192:	d107      	bne.n	800b1a4 <HAL_TIM_Base_Stop_IT+0x48>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f022 0201 	bic.w	r2, r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e049      	b.n	800b260 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f841 	bl	800b268 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f000 fdd5 	bl	800bda8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d109      	bne.n	800b2a4 <HAL_TIM_OC_Start_IT+0x28>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	bf14      	ite	ne
 800b29c:	2301      	movne	r3, #1
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	e03c      	b.n	800b31e <HAL_TIM_OC_Start_IT+0xa2>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d109      	bne.n	800b2be <HAL_TIM_OC_Start_IT+0x42>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	bf14      	ite	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	2300      	moveq	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	e02f      	b.n	800b31e <HAL_TIM_OC_Start_IT+0xa2>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d109      	bne.n	800b2d8 <HAL_TIM_OC_Start_IT+0x5c>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	bf14      	ite	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	e022      	b.n	800b31e <HAL_TIM_OC_Start_IT+0xa2>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b0c      	cmp	r3, #12
 800b2dc:	d109      	bne.n	800b2f2 <HAL_TIM_OC_Start_IT+0x76>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	bf14      	ite	ne
 800b2ea:	2301      	movne	r3, #1
 800b2ec:	2300      	moveq	r3, #0
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	e015      	b.n	800b31e <HAL_TIM_OC_Start_IT+0xa2>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b10      	cmp	r3, #16
 800b2f6:	d109      	bne.n	800b30c <HAL_TIM_OC_Start_IT+0x90>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b01      	cmp	r3, #1
 800b302:	bf14      	ite	ne
 800b304:	2301      	movne	r3, #1
 800b306:	2300      	moveq	r3, #0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	e008      	b.n	800b31e <HAL_TIM_OC_Start_IT+0xa2>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	bf14      	ite	ne
 800b318:	2301      	movne	r3, #1
 800b31a:	2300      	moveq	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e11a      	b.n	800b55c <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d104      	bne.n	800b336 <HAL_TIM_OC_Start_IT+0xba>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b334:	e023      	b.n	800b37e <HAL_TIM_OC_Start_IT+0x102>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b04      	cmp	r3, #4
 800b33a:	d104      	bne.n	800b346 <HAL_TIM_OC_Start_IT+0xca>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b344:	e01b      	b.n	800b37e <HAL_TIM_OC_Start_IT+0x102>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d104      	bne.n	800b356 <HAL_TIM_OC_Start_IT+0xda>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2202      	movs	r2, #2
 800b350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b354:	e013      	b.n	800b37e <HAL_TIM_OC_Start_IT+0x102>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b0c      	cmp	r3, #12
 800b35a:	d104      	bne.n	800b366 <HAL_TIM_OC_Start_IT+0xea>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b364:	e00b      	b.n	800b37e <HAL_TIM_OC_Start_IT+0x102>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b10      	cmp	r3, #16
 800b36a:	d104      	bne.n	800b376 <HAL_TIM_OC_Start_IT+0xfa>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b374:	e003      	b.n	800b37e <HAL_TIM_OC_Start_IT+0x102>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2202      	movs	r2, #2
 800b37a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b0c      	cmp	r3, #12
 800b382:	d841      	bhi.n	800b408 <HAL_TIM_OC_Start_IT+0x18c>
 800b384:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <HAL_TIM_OC_Start_IT+0x110>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b3c1 	.word	0x0800b3c1
 800b390:	0800b409 	.word	0x0800b409
 800b394:	0800b409 	.word	0x0800b409
 800b398:	0800b409 	.word	0x0800b409
 800b39c:	0800b3d3 	.word	0x0800b3d3
 800b3a0:	0800b409 	.word	0x0800b409
 800b3a4:	0800b409 	.word	0x0800b409
 800b3a8:	0800b409 	.word	0x0800b409
 800b3ac:	0800b3e5 	.word	0x0800b3e5
 800b3b0:	0800b409 	.word	0x0800b409
 800b3b4:	0800b409 	.word	0x0800b409
 800b3b8:	0800b409 	.word	0x0800b409
 800b3bc:	0800b3f7 	.word	0x0800b3f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f042 0202 	orr.w	r2, r2, #2
 800b3ce:	60da      	str	r2, [r3, #12]
      break;
 800b3d0:	e01d      	b.n	800b40e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f042 0204 	orr.w	r2, r2, #4
 800b3e0:	60da      	str	r2, [r3, #12]
      break;
 800b3e2:	e014      	b.n	800b40e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0208 	orr.w	r2, r2, #8
 800b3f2:	60da      	str	r2, [r3, #12]
      break;
 800b3f4:	e00b      	b.n	800b40e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0210 	orr.w	r2, r2, #16
 800b404:	60da      	str	r2, [r3, #12]
      break;
 800b406:	e002      	b.n	800b40e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
      break;
 800b40c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f040 80a2 	bne.w	800b55a <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2201      	movs	r2, #1
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 f97e 	bl	800c720 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a4e      	ldr	r2, [pc, #312]	@ (800b564 <HAL_TIM_OC_Start_IT+0x2e8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d018      	beq.n	800b460 <HAL_TIM_OC_Start_IT+0x1e4>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a4d      	ldr	r2, [pc, #308]	@ (800b568 <HAL_TIM_OC_Start_IT+0x2ec>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d013      	beq.n	800b460 <HAL_TIM_OC_Start_IT+0x1e4>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a4b      	ldr	r2, [pc, #300]	@ (800b56c <HAL_TIM_OC_Start_IT+0x2f0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d00e      	beq.n	800b460 <HAL_TIM_OC_Start_IT+0x1e4>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a4a      	ldr	r2, [pc, #296]	@ (800b570 <HAL_TIM_OC_Start_IT+0x2f4>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d009      	beq.n	800b460 <HAL_TIM_OC_Start_IT+0x1e4>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a48      	ldr	r2, [pc, #288]	@ (800b574 <HAL_TIM_OC_Start_IT+0x2f8>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d004      	beq.n	800b460 <HAL_TIM_OC_Start_IT+0x1e4>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a47      	ldr	r2, [pc, #284]	@ (800b578 <HAL_TIM_OC_Start_IT+0x2fc>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d101      	bne.n	800b464 <HAL_TIM_OC_Start_IT+0x1e8>
 800b460:	2301      	movs	r3, #1
 800b462:	e000      	b.n	800b466 <HAL_TIM_OC_Start_IT+0x1ea>
 800b464:	2300      	movs	r3, #0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d007      	beq.n	800b47a <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a39      	ldr	r2, [pc, #228]	@ (800b564 <HAL_TIM_OC_Start_IT+0x2e8>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d04a      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a37      	ldr	r2, [pc, #220]	@ (800b568 <HAL_TIM_OC_Start_IT+0x2ec>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d045      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b496:	d040      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4a0:	d03b      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a35      	ldr	r2, [pc, #212]	@ (800b57c <HAL_TIM_OC_Start_IT+0x300>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d036      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a33      	ldr	r2, [pc, #204]	@ (800b580 <HAL_TIM_OC_Start_IT+0x304>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d031      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a32      	ldr	r2, [pc, #200]	@ (800b584 <HAL_TIM_OC_Start_IT+0x308>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d02c      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a30      	ldr	r2, [pc, #192]	@ (800b588 <HAL_TIM_OC_Start_IT+0x30c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d027      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a2f      	ldr	r2, [pc, #188]	@ (800b58c <HAL_TIM_OC_Start_IT+0x310>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d022      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a2d      	ldr	r2, [pc, #180]	@ (800b590 <HAL_TIM_OC_Start_IT+0x314>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d01d      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a22      	ldr	r2, [pc, #136]	@ (800b56c <HAL_TIM_OC_Start_IT+0x2f0>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d018      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a20      	ldr	r2, [pc, #128]	@ (800b570 <HAL_TIM_OC_Start_IT+0x2f4>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d013      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a27      	ldr	r2, [pc, #156]	@ (800b594 <HAL_TIM_OC_Start_IT+0x318>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d00e      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a25      	ldr	r2, [pc, #148]	@ (800b598 <HAL_TIM_OC_Start_IT+0x31c>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d009      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1a      	ldr	r2, [pc, #104]	@ (800b574 <HAL_TIM_OC_Start_IT+0x2f8>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d004      	beq.n	800b51a <HAL_TIM_OC_Start_IT+0x29e>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a18      	ldr	r2, [pc, #96]	@ (800b578 <HAL_TIM_OC_Start_IT+0x2fc>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d115      	bne.n	800b546 <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689a      	ldr	r2, [r3, #8]
 800b520:	4b1e      	ldr	r3, [pc, #120]	@ (800b59c <HAL_TIM_OC_Start_IT+0x320>)
 800b522:	4013      	ands	r3, r2
 800b524:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b06      	cmp	r3, #6
 800b52a:	d015      	beq.n	800b558 <HAL_TIM_OC_Start_IT+0x2dc>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b532:	d011      	beq.n	800b558 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f042 0201 	orr.w	r2, r2, #1
 800b542:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b544:	e008      	b.n	800b558 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0201 	orr.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	e000      	b.n	800b55a <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b558:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	40012c00 	.word	0x40012c00
 800b568:	50012c00 	.word	0x50012c00
 800b56c:	40013400 	.word	0x40013400
 800b570:	50013400 	.word	0x50013400
 800b574:	40014000 	.word	0x40014000
 800b578:	50014000 	.word	0x50014000
 800b57c:	40000400 	.word	0x40000400
 800b580:	50000400 	.word	0x50000400
 800b584:	40000800 	.word	0x40000800
 800b588:	50000800 	.word	0x50000800
 800b58c:	40000c00 	.word	0x40000c00
 800b590:	50000c00 	.word	0x50000c00
 800b594:	40001800 	.word	0x40001800
 800b598:	50001800 	.word	0x50001800
 800b59c:	00010007 	.word	0x00010007

0800b5a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b0c      	cmp	r3, #12
 800b5b2:	d841      	bhi.n	800b638 <HAL_TIM_OC_Stop_IT+0x98>
 800b5b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5bc <HAL_TIM_OC_Stop_IT+0x1c>)
 800b5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ba:	bf00      	nop
 800b5bc:	0800b5f1 	.word	0x0800b5f1
 800b5c0:	0800b639 	.word	0x0800b639
 800b5c4:	0800b639 	.word	0x0800b639
 800b5c8:	0800b639 	.word	0x0800b639
 800b5cc:	0800b603 	.word	0x0800b603
 800b5d0:	0800b639 	.word	0x0800b639
 800b5d4:	0800b639 	.word	0x0800b639
 800b5d8:	0800b639 	.word	0x0800b639
 800b5dc:	0800b615 	.word	0x0800b615
 800b5e0:	0800b639 	.word	0x0800b639
 800b5e4:	0800b639 	.word	0x0800b639
 800b5e8:	0800b639 	.word	0x0800b639
 800b5ec:	0800b627 	.word	0x0800b627
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0202 	bic.w	r2, r2, #2
 800b5fe:	60da      	str	r2, [r3, #12]
      break;
 800b600:	e01d      	b.n	800b63e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68da      	ldr	r2, [r3, #12]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 0204 	bic.w	r2, r2, #4
 800b610:	60da      	str	r2, [r3, #12]
      break;
 800b612:	e014      	b.n	800b63e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 0208 	bic.w	r2, r2, #8
 800b622:	60da      	str	r2, [r3, #12]
      break;
 800b624:	e00b      	b.n	800b63e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0210 	bic.w	r2, r2, #16
 800b634:	60da      	str	r2, [r3, #12]
      break;
 800b636:	e002      	b.n	800b63e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	73fb      	strb	r3, [r7, #15]
      break;
 800b63c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
 800b640:	2b00      	cmp	r3, #0
 800b642:	f040 8086 	bne.w	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2200      	movs	r2, #0
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 f866 	bl	800c720 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a40      	ldr	r2, [pc, #256]	@ (800b75c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d018      	beq.n	800b690 <HAL_TIM_OC_Stop_IT+0xf0>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a3f      	ldr	r2, [pc, #252]	@ (800b760 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d013      	beq.n	800b690 <HAL_TIM_OC_Stop_IT+0xf0>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a3d      	ldr	r2, [pc, #244]	@ (800b764 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d00e      	beq.n	800b690 <HAL_TIM_OC_Stop_IT+0xf0>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a3c      	ldr	r2, [pc, #240]	@ (800b768 <HAL_TIM_OC_Stop_IT+0x1c8>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d009      	beq.n	800b690 <HAL_TIM_OC_Stop_IT+0xf0>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a3a      	ldr	r2, [pc, #232]	@ (800b76c <HAL_TIM_OC_Stop_IT+0x1cc>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d004      	beq.n	800b690 <HAL_TIM_OC_Stop_IT+0xf0>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a39      	ldr	r2, [pc, #228]	@ (800b770 <HAL_TIM_OC_Stop_IT+0x1d0>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d101      	bne.n	800b694 <HAL_TIM_OC_Stop_IT+0xf4>
 800b690:	2301      	movs	r3, #1
 800b692:	e000      	b.n	800b696 <HAL_TIM_OC_Stop_IT+0xf6>
 800b694:	2300      	movs	r3, #0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d017      	beq.n	800b6ca <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6a1a      	ldr	r2, [r3, #32]
 800b6a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10f      	bne.n	800b6ca <HAL_TIM_OC_Stop_IT+0x12a>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6a1a      	ldr	r2, [r3, #32]
 800b6b0:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d107      	bne.n	800b6ca <HAL_TIM_OC_Stop_IT+0x12a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b6c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6a1a      	ldr	r2, [r3, #32]
 800b6d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10f      	bne.n	800b6fa <HAL_TIM_OC_Stop_IT+0x15a>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6a1a      	ldr	r2, [r3, #32]
 800b6e0:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <HAL_TIM_OC_Stop_IT+0x15a>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f022 0201 	bic.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <HAL_TIM_OC_Stop_IT+0x16a>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b708:	e023      	b.n	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	d104      	bne.n	800b71a <HAL_TIM_OC_Stop_IT+0x17a>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b718:	e01b      	b.n	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d104      	bne.n	800b72a <HAL_TIM_OC_Stop_IT+0x18a>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b728:	e013      	b.n	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b0c      	cmp	r3, #12
 800b72e:	d104      	bne.n	800b73a <HAL_TIM_OC_Stop_IT+0x19a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b738:	e00b      	b.n	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	d104      	bne.n	800b74a <HAL_TIM_OC_Stop_IT+0x1aa>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b748:	e003      	b.n	800b752 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b752:	7bfb      	ldrb	r3, [r7, #15]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	40012c00 	.word	0x40012c00
 800b760:	50012c00 	.word	0x50012c00
 800b764:	40013400 	.word	0x40013400
 800b768:	50013400 	.word	0x50013400
 800b76c:	40014000 	.word	0x40014000
 800b770:	50014000 	.word	0x50014000

0800b774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d020      	beq.n	800b7d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d01b      	beq.n	800b7d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f06f 0202 	mvn.w	r2, #2
 800b7a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fad4 	bl	800bd6c <HAL_TIM_IC_CaptureCallback>
 800b7c4:	e005      	b.n	800b7d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fac6 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fad7 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	f003 0304 	and.w	r3, r3, #4
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d020      	beq.n	800b824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01b      	beq.n	800b824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f06f 0204 	mvn.w	r2, #4
 800b7f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b806:	2b00      	cmp	r3, #0
 800b808:	d003      	beq.n	800b812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 faae 	bl	800bd6c <HAL_TIM_IC_CaptureCallback>
 800b810:	e005      	b.n	800b81e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 faa0 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fab1 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f003 0308 	and.w	r3, r3, #8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d020      	beq.n	800b870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f003 0308 	and.w	r3, r3, #8
 800b834:	2b00      	cmp	r3, #0
 800b836:	d01b      	beq.n	800b870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0208 	mvn.w	r2, #8
 800b840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2204      	movs	r2, #4
 800b846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fa88 	bl	800bd6c <HAL_TIM_IC_CaptureCallback>
 800b85c:	e005      	b.n	800b86a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fa7a 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fa8b 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f003 0310 	and.w	r3, r3, #16
 800b876:	2b00      	cmp	r3, #0
 800b878:	d020      	beq.n	800b8bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f003 0310 	and.w	r3, r3, #16
 800b880:	2b00      	cmp	r3, #0
 800b882:	d01b      	beq.n	800b8bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f06f 0210 	mvn.w	r2, #16
 800b88c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2208      	movs	r2, #8
 800b892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa62 	bl	800bd6c <HAL_TIM_IC_CaptureCallback>
 800b8a8:	e005      	b.n	800b8b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa54 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fa65 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00c      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f06f 0201 	mvn.w	r2, #1
 800b8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa32 	bl	800bd44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d104      	bne.n	800b8f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00c      	beq.n	800b90e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d007      	beq.n	800b90e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f809 	bl	800c920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00c      	beq.n	800b932 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d007      	beq.n	800b932 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b92a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f001 f801 	bl	800c934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa1f 	bl	800bd94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f003 0320 	and.w	r3, r3, #32
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00c      	beq.n	800b97a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f003 0320 	and.w	r3, r3, #32
 800b966:	2b00      	cmp	r3, #0
 800b968:	d007      	beq.n	800b97a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f06f 0220 	mvn.w	r2, #32
 800b972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 ffc9 	bl	800c90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00c      	beq.n	800b99e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 ffd5 	bl	800c948 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00c      	beq.n	800b9c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d007      	beq.n	800b9c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 ffcd 	bl	800c95c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00c      	beq.n	800b9e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b9de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 ffc5 	bl	800c970 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00c      	beq.n	800ba0a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d007      	beq.n	800ba0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ba02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 ffbd 	bl	800c984 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d101      	bne.n	800ba32 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ba2e:	2302      	movs	r3, #2
 800ba30:	e066      	b.n	800bb00 <HAL_TIM_OC_ConfigChannel+0xec>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b14      	cmp	r3, #20
 800ba3e:	d857      	bhi.n	800baf0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ba40:	a201      	add	r2, pc, #4	@ (adr r2, 800ba48 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba46:	bf00      	nop
 800ba48:	0800ba9d 	.word	0x0800ba9d
 800ba4c:	0800baf1 	.word	0x0800baf1
 800ba50:	0800baf1 	.word	0x0800baf1
 800ba54:	0800baf1 	.word	0x0800baf1
 800ba58:	0800baab 	.word	0x0800baab
 800ba5c:	0800baf1 	.word	0x0800baf1
 800ba60:	0800baf1 	.word	0x0800baf1
 800ba64:	0800baf1 	.word	0x0800baf1
 800ba68:	0800bab9 	.word	0x0800bab9
 800ba6c:	0800baf1 	.word	0x0800baf1
 800ba70:	0800baf1 	.word	0x0800baf1
 800ba74:	0800baf1 	.word	0x0800baf1
 800ba78:	0800bac7 	.word	0x0800bac7
 800ba7c:	0800baf1 	.word	0x0800baf1
 800ba80:	0800baf1 	.word	0x0800baf1
 800ba84:	0800baf1 	.word	0x0800baf1
 800ba88:	0800bad5 	.word	0x0800bad5
 800ba8c:	0800baf1 	.word	0x0800baf1
 800ba90:	0800baf1 	.word	0x0800baf1
 800ba94:	0800baf1 	.word	0x0800baf1
 800ba98:	0800bae3 	.word	0x0800bae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 fa6a 	bl	800bf7c <TIM_OC1_SetConfig>
      break;
 800baa8:	e025      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68b9      	ldr	r1, [r7, #8]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 fafd 	bl	800c0b0 <TIM_OC2_SetConfig>
      break;
 800bab6:	e01e      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 fb8e 	bl	800c1e0 <TIM_OC3_SetConfig>
      break;
 800bac4:	e017      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 fc1d 	bl	800c30c <TIM_OC4_SetConfig>
      break;
 800bad2:	e010      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	4618      	mov	r0, r3
 800badc:	f000 fcae 	bl	800c43c <TIM_OC5_SetConfig>
      break;
 800bae0:	e009      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68b9      	ldr	r1, [r7, #8]
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 fd11 	bl	800c510 <TIM_OC6_SetConfig>
      break;
 800baee:	e002      	b.n	800baf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	75fb      	strb	r3, [r7, #23]
      break;
 800baf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d101      	bne.n	800bb24 <HAL_TIM_ConfigClockSource+0x1c>
 800bb20:	2302      	movs	r3, #2
 800bb22:	e0fe      	b.n	800bd22 <HAL_TIM_ConfigClockSource+0x21a>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2202      	movs	r2, #2
 800bb30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bb42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb60:	f000 80c9 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bb64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb68:	f200 80ce 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bb6c:	4a6f      	ldr	r2, [pc, #444]	@ (800bd2c <HAL_TIM_ConfigClockSource+0x224>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f000 80c1 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bb74:	4a6d      	ldr	r2, [pc, #436]	@ (800bd2c <HAL_TIM_ConfigClockSource+0x224>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f200 80c6 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bb7c:	4a6c      	ldr	r2, [pc, #432]	@ (800bd30 <HAL_TIM_ConfigClockSource+0x228>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	f000 80b9 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bb84:	4a6a      	ldr	r2, [pc, #424]	@ (800bd30 <HAL_TIM_ConfigClockSource+0x228>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	f200 80be 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bb8c:	4a69      	ldr	r2, [pc, #420]	@ (800bd34 <HAL_TIM_ConfigClockSource+0x22c>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	f000 80b1 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bb94:	4a67      	ldr	r2, [pc, #412]	@ (800bd34 <HAL_TIM_ConfigClockSource+0x22c>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f200 80b6 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bb9c:	4a66      	ldr	r2, [pc, #408]	@ (800bd38 <HAL_TIM_ConfigClockSource+0x230>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	f000 80a9 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bba4:	4a64      	ldr	r2, [pc, #400]	@ (800bd38 <HAL_TIM_ConfigClockSource+0x230>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	f200 80ae 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbac:	4a63      	ldr	r2, [pc, #396]	@ (800bd3c <HAL_TIM_ConfigClockSource+0x234>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	f000 80a1 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bbb4:	4a61      	ldr	r2, [pc, #388]	@ (800bd3c <HAL_TIM_ConfigClockSource+0x234>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	f200 80a6 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbbc:	4a60      	ldr	r2, [pc, #384]	@ (800bd40 <HAL_TIM_ConfigClockSource+0x238>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	f000 8099 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bbc4:	4a5e      	ldr	r2, [pc, #376]	@ (800bd40 <HAL_TIM_ConfigClockSource+0x238>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	f200 809e 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbd0:	f000 8091 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bbd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbd8:	f200 8096 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbe0:	f000 8089 	beq.w	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bbe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbe8:	f200 808e 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbf0:	d03e      	beq.n	800bc70 <HAL_TIM_ConfigClockSource+0x168>
 800bbf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbf6:	f200 8087 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bbfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbfe:	f000 8086 	beq.w	800bd0e <HAL_TIM_ConfigClockSource+0x206>
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc06:	d87f      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc08:	2b70      	cmp	r3, #112	@ 0x70
 800bc0a:	d01a      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x13a>
 800bc0c:	2b70      	cmp	r3, #112	@ 0x70
 800bc0e:	d87b      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc10:	2b60      	cmp	r3, #96	@ 0x60
 800bc12:	d050      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x1ae>
 800bc14:	2b60      	cmp	r3, #96	@ 0x60
 800bc16:	d877      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc18:	2b50      	cmp	r3, #80	@ 0x50
 800bc1a:	d03c      	beq.n	800bc96 <HAL_TIM_ConfigClockSource+0x18e>
 800bc1c:	2b50      	cmp	r3, #80	@ 0x50
 800bc1e:	d873      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc20:	2b40      	cmp	r3, #64	@ 0x40
 800bc22:	d058      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1ce>
 800bc24:	2b40      	cmp	r3, #64	@ 0x40
 800bc26:	d86f      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc28:	2b30      	cmp	r3, #48	@ 0x30
 800bc2a:	d064      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bc2c:	2b30      	cmp	r3, #48	@ 0x30
 800bc2e:	d86b      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d060      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	d867      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d05c      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bc3c:	2b10      	cmp	r3, #16
 800bc3e:	d05a      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x1ee>
 800bc40:	e062      	b.n	800bd08 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc52:	f000 fd45 	bl	800c6e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	609a      	str	r2, [r3, #8]
      break;
 800bc6e:	e04f      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc80:	f000 fd2e 	bl	800c6e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc92:	609a      	str	r2, [r3, #8]
      break;
 800bc94:	e03c      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bca2:	461a      	mov	r2, r3
 800bca4:	f000 fca0 	bl	800c5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2150      	movs	r1, #80	@ 0x50
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 fcf9 	bl	800c6a6 <TIM_ITRx_SetConfig>
      break;
 800bcb4:	e02c      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f000 fcbf 	bl	800c646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2160      	movs	r1, #96	@ 0x60
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fce9 	bl	800c6a6 <TIM_ITRx_SetConfig>
      break;
 800bcd4:	e01c      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bce2:	461a      	mov	r2, r3
 800bce4:	f000 fc80 	bl	800c5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2140      	movs	r1, #64	@ 0x40
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 fcd9 	bl	800c6a6 <TIM_ITRx_SetConfig>
      break;
 800bcf4:	e00c      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f000 fcd0 	bl	800c6a6 <TIM_ITRx_SetConfig>
      break;
 800bd06:	e003      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0c:	e000      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800bd0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	00100070 	.word	0x00100070
 800bd30:	00100060 	.word	0x00100060
 800bd34:	00100050 	.word	0x00100050
 800bd38:	00100040 	.word	0x00100040
 800bd3c:	00100030 	.word	0x00100030
 800bd40:	00100020 	.word	0x00100020

0800bd44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a62      	ldr	r2, [pc, #392]	@ (800bf44 <TIM_Base_SetConfig+0x19c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d02b      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a61      	ldr	r2, [pc, #388]	@ (800bf48 <TIM_Base_SetConfig+0x1a0>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d027      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdce:	d023      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdd6:	d01f      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a5c      	ldr	r2, [pc, #368]	@ (800bf4c <TIM_Base_SetConfig+0x1a4>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d01b      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a5b      	ldr	r2, [pc, #364]	@ (800bf50 <TIM_Base_SetConfig+0x1a8>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d017      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a5a      	ldr	r2, [pc, #360]	@ (800bf54 <TIM_Base_SetConfig+0x1ac>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d013      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a59      	ldr	r2, [pc, #356]	@ (800bf58 <TIM_Base_SetConfig+0x1b0>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00f      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a58      	ldr	r2, [pc, #352]	@ (800bf5c <TIM_Base_SetConfig+0x1b4>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00b      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a57      	ldr	r2, [pc, #348]	@ (800bf60 <TIM_Base_SetConfig+0x1b8>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d007      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a56      	ldr	r2, [pc, #344]	@ (800bf64 <TIM_Base_SetConfig+0x1bc>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d003      	beq.n	800be18 <TIM_Base_SetConfig+0x70>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a55      	ldr	r2, [pc, #340]	@ (800bf68 <TIM_Base_SetConfig+0x1c0>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d108      	bne.n	800be2a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a45      	ldr	r2, [pc, #276]	@ (800bf44 <TIM_Base_SetConfig+0x19c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d03b      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a44      	ldr	r2, [pc, #272]	@ (800bf48 <TIM_Base_SetConfig+0x1a0>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d037      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be40:	d033      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be48:	d02f      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a3f      	ldr	r2, [pc, #252]	@ (800bf4c <TIM_Base_SetConfig+0x1a4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d02b      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a3e      	ldr	r2, [pc, #248]	@ (800bf50 <TIM_Base_SetConfig+0x1a8>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d027      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a3d      	ldr	r2, [pc, #244]	@ (800bf54 <TIM_Base_SetConfig+0x1ac>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d023      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a3c      	ldr	r2, [pc, #240]	@ (800bf58 <TIM_Base_SetConfig+0x1b0>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01f      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a3b      	ldr	r2, [pc, #236]	@ (800bf5c <TIM_Base_SetConfig+0x1b4>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d01b      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a3a      	ldr	r2, [pc, #232]	@ (800bf60 <TIM_Base_SetConfig+0x1b8>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d017      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a39      	ldr	r2, [pc, #228]	@ (800bf64 <TIM_Base_SetConfig+0x1bc>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d013      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a38      	ldr	r2, [pc, #224]	@ (800bf68 <TIM_Base_SetConfig+0x1c0>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00f      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a37      	ldr	r2, [pc, #220]	@ (800bf6c <TIM_Base_SetConfig+0x1c4>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00b      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a36      	ldr	r2, [pc, #216]	@ (800bf70 <TIM_Base_SetConfig+0x1c8>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d007      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a35      	ldr	r2, [pc, #212]	@ (800bf74 <TIM_Base_SetConfig+0x1cc>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d003      	beq.n	800beaa <TIM_Base_SetConfig+0x102>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a34      	ldr	r2, [pc, #208]	@ (800bf78 <TIM_Base_SetConfig+0x1d0>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d108      	bne.n	800bebc <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	4313      	orrs	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	689a      	ldr	r2, [r3, #8]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a18      	ldr	r2, [pc, #96]	@ (800bf44 <TIM_Base_SetConfig+0x19c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d013      	beq.n	800bf10 <TIM_Base_SetConfig+0x168>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a17      	ldr	r2, [pc, #92]	@ (800bf48 <TIM_Base_SetConfig+0x1a0>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d00f      	beq.n	800bf10 <TIM_Base_SetConfig+0x168>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a1c      	ldr	r2, [pc, #112]	@ (800bf64 <TIM_Base_SetConfig+0x1bc>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d00b      	beq.n	800bf10 <TIM_Base_SetConfig+0x168>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a1b      	ldr	r2, [pc, #108]	@ (800bf68 <TIM_Base_SetConfig+0x1c0>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d007      	beq.n	800bf10 <TIM_Base_SetConfig+0x168>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a1c      	ldr	r2, [pc, #112]	@ (800bf74 <TIM_Base_SetConfig+0x1cc>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d003      	beq.n	800bf10 <TIM_Base_SetConfig+0x168>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bf78 <TIM_Base_SetConfig+0x1d0>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d103      	bne.n	800bf18 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d105      	bne.n	800bf36 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	f023 0201 	bic.w	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	611a      	str	r2, [r3, #16]
  }
}
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	40012c00 	.word	0x40012c00
 800bf48:	50012c00 	.word	0x50012c00
 800bf4c:	40000400 	.word	0x40000400
 800bf50:	50000400 	.word	0x50000400
 800bf54:	40000800 	.word	0x40000800
 800bf58:	50000800 	.word	0x50000800
 800bf5c:	40000c00 	.word	0x40000c00
 800bf60:	50000c00 	.word	0x50000c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	50013400 	.word	0x50013400
 800bf6c:	40001800 	.word	0x40001800
 800bf70:	50001800 	.word	0x50001800
 800bf74:	40014000 	.word	0x40014000
 800bf78:	50014000 	.word	0x50014000

0800bf7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	f023 0201 	bic.w	r2, r3, #1
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f023 0303 	bic.w	r3, r3, #3
 800bfb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f023 0302 	bic.w	r3, r3, #2
 800bfc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a30      	ldr	r2, [pc, #192]	@ (800c098 <TIM_OC1_SetConfig+0x11c>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d013      	beq.n	800c004 <TIM_OC1_SetConfig+0x88>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a2f      	ldr	r2, [pc, #188]	@ (800c09c <TIM_OC1_SetConfig+0x120>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00f      	beq.n	800c004 <TIM_OC1_SetConfig+0x88>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a2e      	ldr	r2, [pc, #184]	@ (800c0a0 <TIM_OC1_SetConfig+0x124>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d00b      	beq.n	800c004 <TIM_OC1_SetConfig+0x88>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a2d      	ldr	r2, [pc, #180]	@ (800c0a4 <TIM_OC1_SetConfig+0x128>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d007      	beq.n	800c004 <TIM_OC1_SetConfig+0x88>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a2c      	ldr	r2, [pc, #176]	@ (800c0a8 <TIM_OC1_SetConfig+0x12c>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d003      	beq.n	800c004 <TIM_OC1_SetConfig+0x88>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a2b      	ldr	r2, [pc, #172]	@ (800c0ac <TIM_OC1_SetConfig+0x130>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d10c      	bne.n	800c01e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	f023 0308 	bic.w	r3, r3, #8
 800c00a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	4313      	orrs	r3, r2
 800c014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f023 0304 	bic.w	r3, r3, #4
 800c01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a1d      	ldr	r2, [pc, #116]	@ (800c098 <TIM_OC1_SetConfig+0x11c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d013      	beq.n	800c04e <TIM_OC1_SetConfig+0xd2>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a1c      	ldr	r2, [pc, #112]	@ (800c09c <TIM_OC1_SetConfig+0x120>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d00f      	beq.n	800c04e <TIM_OC1_SetConfig+0xd2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a1b      	ldr	r2, [pc, #108]	@ (800c0a0 <TIM_OC1_SetConfig+0x124>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d00b      	beq.n	800c04e <TIM_OC1_SetConfig+0xd2>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a1a      	ldr	r2, [pc, #104]	@ (800c0a4 <TIM_OC1_SetConfig+0x128>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d007      	beq.n	800c04e <TIM_OC1_SetConfig+0xd2>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a19      	ldr	r2, [pc, #100]	@ (800c0a8 <TIM_OC1_SetConfig+0x12c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d003      	beq.n	800c04e <TIM_OC1_SetConfig+0xd2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a18      	ldr	r2, [pc, #96]	@ (800c0ac <TIM_OC1_SetConfig+0x130>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d111      	bne.n	800c072 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	4313      	orrs	r3, r2
 800c066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	4313      	orrs	r3, r2
 800c070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	621a      	str	r2, [r3, #32]
}
 800c08c:	bf00      	nop
 800c08e:	371c      	adds	r7, #28
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	40012c00 	.word	0x40012c00
 800c09c:	50012c00 	.word	0x50012c00
 800c0a0:	40013400 	.word	0x40013400
 800c0a4:	50013400 	.word	0x50013400
 800c0a8:	40014000 	.word	0x40014000
 800c0ac:	50014000 	.word	0x50014000

0800c0b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	f023 0210 	bic.w	r2, r3, #16
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	021b      	lsls	r3, r3, #8
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f023 0320 	bic.w	r3, r3, #32
 800c0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	011b      	lsls	r3, r3, #4
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4313      	orrs	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a2e      	ldr	r2, [pc, #184]	@ (800c1c8 <TIM_OC2_SetConfig+0x118>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d00b      	beq.n	800c12c <TIM_OC2_SetConfig+0x7c>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a2d      	ldr	r2, [pc, #180]	@ (800c1cc <TIM_OC2_SetConfig+0x11c>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d007      	beq.n	800c12c <TIM_OC2_SetConfig+0x7c>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a2c      	ldr	r2, [pc, #176]	@ (800c1d0 <TIM_OC2_SetConfig+0x120>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d003      	beq.n	800c12c <TIM_OC2_SetConfig+0x7c>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a2b      	ldr	r2, [pc, #172]	@ (800c1d4 <TIM_OC2_SetConfig+0x124>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d10d      	bne.n	800c148 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	011b      	lsls	r3, r3, #4
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a1f      	ldr	r2, [pc, #124]	@ (800c1c8 <TIM_OC2_SetConfig+0x118>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d013      	beq.n	800c178 <TIM_OC2_SetConfig+0xc8>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a1e      	ldr	r2, [pc, #120]	@ (800c1cc <TIM_OC2_SetConfig+0x11c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00f      	beq.n	800c178 <TIM_OC2_SetConfig+0xc8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a1d      	ldr	r2, [pc, #116]	@ (800c1d0 <TIM_OC2_SetConfig+0x120>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00b      	beq.n	800c178 <TIM_OC2_SetConfig+0xc8>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d4 <TIM_OC2_SetConfig+0x124>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d007      	beq.n	800c178 <TIM_OC2_SetConfig+0xc8>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d8 <TIM_OC2_SetConfig+0x128>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d003      	beq.n	800c178 <TIM_OC2_SetConfig+0xc8>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a1a      	ldr	r2, [pc, #104]	@ (800c1dc <TIM_OC2_SetConfig+0x12c>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d113      	bne.n	800c1a0 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c17e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	4313      	orrs	r3, r2
 800c192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	621a      	str	r2, [r3, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	40012c00 	.word	0x40012c00
 800c1cc:	50012c00 	.word	0x50012c00
 800c1d0:	40013400 	.word	0x40013400
 800c1d4:	50013400 	.word	0x50013400
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	50014000 	.word	0x50014000

0800c1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c20e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f023 0303 	bic.w	r3, r3, #3
 800c21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c22c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	021b      	lsls	r3, r3, #8
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	4313      	orrs	r3, r2
 800c238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f4 <TIM_OC3_SetConfig+0x114>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00b      	beq.n	800c25a <TIM_OC3_SetConfig+0x7a>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a2c      	ldr	r2, [pc, #176]	@ (800c2f8 <TIM_OC3_SetConfig+0x118>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d007      	beq.n	800c25a <TIM_OC3_SetConfig+0x7a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a2b      	ldr	r2, [pc, #172]	@ (800c2fc <TIM_OC3_SetConfig+0x11c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d003      	beq.n	800c25a <TIM_OC3_SetConfig+0x7a>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a2a      	ldr	r2, [pc, #168]	@ (800c300 <TIM_OC3_SetConfig+0x120>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d10d      	bne.n	800c276 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a1e      	ldr	r2, [pc, #120]	@ (800c2f4 <TIM_OC3_SetConfig+0x114>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d013      	beq.n	800c2a6 <TIM_OC3_SetConfig+0xc6>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f8 <TIM_OC3_SetConfig+0x118>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d00f      	beq.n	800c2a6 <TIM_OC3_SetConfig+0xc6>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a1c      	ldr	r2, [pc, #112]	@ (800c2fc <TIM_OC3_SetConfig+0x11c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00b      	beq.n	800c2a6 <TIM_OC3_SetConfig+0xc6>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a1b      	ldr	r2, [pc, #108]	@ (800c300 <TIM_OC3_SetConfig+0x120>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d007      	beq.n	800c2a6 <TIM_OC3_SetConfig+0xc6>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a1a      	ldr	r2, [pc, #104]	@ (800c304 <TIM_OC3_SetConfig+0x124>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d003      	beq.n	800c2a6 <TIM_OC3_SetConfig+0xc6>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a19      	ldr	r2, [pc, #100]	@ (800c308 <TIM_OC3_SetConfig+0x128>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d113      	bne.n	800c2ce <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	621a      	str	r2, [r3, #32]
}
 800c2e8:	bf00      	nop
 800c2ea:	371c      	adds	r7, #28
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	40012c00 	.word	0x40012c00
 800c2f8:	50012c00 	.word	0x50012c00
 800c2fc:	40013400 	.word	0x40013400
 800c300:	50013400 	.word	0x50013400
 800c304:	40014000 	.word	0x40014000
 800c308:	50014000 	.word	0x50014000

0800c30c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c33a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4313      	orrs	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c35a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	031b      	lsls	r3, r3, #12
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	4313      	orrs	r3, r2
 800c366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a2e      	ldr	r2, [pc, #184]	@ (800c424 <TIM_OC4_SetConfig+0x118>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00b      	beq.n	800c388 <TIM_OC4_SetConfig+0x7c>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a2d      	ldr	r2, [pc, #180]	@ (800c428 <TIM_OC4_SetConfig+0x11c>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d007      	beq.n	800c388 <TIM_OC4_SetConfig+0x7c>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a2c      	ldr	r2, [pc, #176]	@ (800c42c <TIM_OC4_SetConfig+0x120>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d003      	beq.n	800c388 <TIM_OC4_SetConfig+0x7c>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a2b      	ldr	r2, [pc, #172]	@ (800c430 <TIM_OC4_SetConfig+0x124>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d10d      	bne.n	800c3a4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	031b      	lsls	r3, r3, #12
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	4313      	orrs	r3, r2
 800c39a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a1f      	ldr	r2, [pc, #124]	@ (800c424 <TIM_OC4_SetConfig+0x118>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d013      	beq.n	800c3d4 <TIM_OC4_SetConfig+0xc8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c428 <TIM_OC4_SetConfig+0x11c>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d00f      	beq.n	800c3d4 <TIM_OC4_SetConfig+0xc8>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a1d      	ldr	r2, [pc, #116]	@ (800c42c <TIM_OC4_SetConfig+0x120>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d00b      	beq.n	800c3d4 <TIM_OC4_SetConfig+0xc8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a1c      	ldr	r2, [pc, #112]	@ (800c430 <TIM_OC4_SetConfig+0x124>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d007      	beq.n	800c3d4 <TIM_OC4_SetConfig+0xc8>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a1b      	ldr	r2, [pc, #108]	@ (800c434 <TIM_OC4_SetConfig+0x128>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d003      	beq.n	800c3d4 <TIM_OC4_SetConfig+0xc8>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c438 <TIM_OC4_SetConfig+0x12c>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d113      	bne.n	800c3fc <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	019b      	lsls	r3, r3, #6
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	019b      	lsls	r3, r3, #6
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	621a      	str	r2, [r3, #32]
}
 800c416:	bf00      	nop
 800c418:	371c      	adds	r7, #28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	40012c00 	.word	0x40012c00
 800c428:	50012c00 	.word	0x50012c00
 800c42c:	40013400 	.word	0x40013400
 800c430:	50013400 	.word	0x50013400
 800c434:	40014000 	.word	0x40014000
 800c438:	50014000 	.word	0x50014000

0800c43c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b087      	sub	sp, #28
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	041b      	lsls	r3, r3, #16
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a19      	ldr	r2, [pc, #100]	@ (800c4f8 <TIM_OC5_SetConfig+0xbc>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d013      	beq.n	800c4be <TIM_OC5_SetConfig+0x82>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a18      	ldr	r2, [pc, #96]	@ (800c4fc <TIM_OC5_SetConfig+0xc0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00f      	beq.n	800c4be <TIM_OC5_SetConfig+0x82>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a17      	ldr	r2, [pc, #92]	@ (800c500 <TIM_OC5_SetConfig+0xc4>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00b      	beq.n	800c4be <TIM_OC5_SetConfig+0x82>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a16      	ldr	r2, [pc, #88]	@ (800c504 <TIM_OC5_SetConfig+0xc8>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d007      	beq.n	800c4be <TIM_OC5_SetConfig+0x82>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a15      	ldr	r2, [pc, #84]	@ (800c508 <TIM_OC5_SetConfig+0xcc>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d003      	beq.n	800c4be <TIM_OC5_SetConfig+0x82>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a14      	ldr	r2, [pc, #80]	@ (800c50c <TIM_OC5_SetConfig+0xd0>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d109      	bne.n	800c4d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	021b      	lsls	r3, r3, #8
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	621a      	str	r2, [r3, #32]
}
 800c4ec:	bf00      	nop
 800c4ee:	371c      	adds	r7, #28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	40012c00 	.word	0x40012c00
 800c4fc:	50012c00 	.word	0x50012c00
 800c500:	40013400 	.word	0x40013400
 800c504:	50013400 	.word	0x50013400
 800c508:	40014000 	.word	0x40014000
 800c50c:	50014000 	.word	0x50014000

0800c510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c53e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	021b      	lsls	r3, r3, #8
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	051b      	lsls	r3, r3, #20
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	4313      	orrs	r3, r2
 800c562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a1a      	ldr	r2, [pc, #104]	@ (800c5d0 <TIM_OC6_SetConfig+0xc0>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d013      	beq.n	800c594 <TIM_OC6_SetConfig+0x84>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a19      	ldr	r2, [pc, #100]	@ (800c5d4 <TIM_OC6_SetConfig+0xc4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00f      	beq.n	800c594 <TIM_OC6_SetConfig+0x84>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a18      	ldr	r2, [pc, #96]	@ (800c5d8 <TIM_OC6_SetConfig+0xc8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00b      	beq.n	800c594 <TIM_OC6_SetConfig+0x84>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a17      	ldr	r2, [pc, #92]	@ (800c5dc <TIM_OC6_SetConfig+0xcc>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d007      	beq.n	800c594 <TIM_OC6_SetConfig+0x84>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a16      	ldr	r2, [pc, #88]	@ (800c5e0 <TIM_OC6_SetConfig+0xd0>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_OC6_SetConfig+0x84>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a15      	ldr	r2, [pc, #84]	@ (800c5e4 <TIM_OC6_SetConfig+0xd4>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d109      	bne.n	800c5a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	029b      	lsls	r3, r3, #10
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	621a      	str	r2, [r3, #32]
}
 800c5c2:	bf00      	nop
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	40012c00 	.word	0x40012c00
 800c5d4:	50012c00 	.word	0x50012c00
 800c5d8:	40013400 	.word	0x40013400
 800c5dc:	50013400 	.word	0x50013400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	50014000 	.word	0x50014000

0800c5e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	f023 0201 	bic.w	r2, r3, #1
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	011b      	lsls	r3, r3, #4
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f023 030a 	bic.w	r3, r3, #10
 800c624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	621a      	str	r2, [r3, #32]
}
 800c63a:	bf00      	nop
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c646:	b480      	push	{r7}
 800c648:	b087      	sub	sp, #28
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	f023 0210 	bic.w	r2, r3, #16
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	031b      	lsls	r3, r3, #12
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c682:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	011b      	lsls	r3, r3, #4
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c6bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	f043 0307 	orr.w	r3, r3, #7
 800c6cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	609a      	str	r2, [r3, #8]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	021a      	lsls	r2, r3, #8
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	431a      	orrs	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4313      	orrs	r3, r2
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	609a      	str	r2, [r3, #8]
}
 800c714:	bf00      	nop
 800c716:	371c      	adds	r7, #28
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f003 031f 	and.w	r3, r3, #31
 800c732:	2201      	movs	r2, #1
 800c734:	fa02 f303 	lsl.w	r3, r2, r3
 800c738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6a1a      	ldr	r2, [r3, #32]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	43db      	mvns	r3, r3
 800c742:	401a      	ands	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6a1a      	ldr	r2, [r3, #32]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f003 031f 	and.w	r3, r3, #31
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	fa01 f303 	lsl.w	r3, r1, r3
 800c758:	431a      	orrs	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	621a      	str	r2, [r3, #32]
}
 800c75e:	bf00      	nop
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d101      	bne.n	800c784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c780:	2302      	movs	r3, #2
 800c782:	e0a1      	b.n	800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a4a      	ldr	r2, [pc, #296]	@ (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d00e      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a49      	ldr	r2, [pc, #292]	@ (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d009      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a47      	ldr	r2, [pc, #284]	@ (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d004      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a46      	ldr	r2, [pc, #280]	@ (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d108      	bne.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c7d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c7e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a34      	ldr	r2, [pc, #208]	@ (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d04a      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a33      	ldr	r2, [pc, #204]	@ (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d045      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c818:	d040      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c822:	d03b      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a2e      	ldr	r2, [pc, #184]	@ (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d036      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a2d      	ldr	r2, [pc, #180]	@ (800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d031      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a2b      	ldr	r2, [pc, #172]	@ (800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d02c      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a2a      	ldr	r2, [pc, #168]	@ (800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d027      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a28      	ldr	r2, [pc, #160]	@ (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d022      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a27      	ldr	r2, [pc, #156]	@ (800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d01d      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a1d      	ldr	r2, [pc, #116]	@ (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d018      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d013      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a20      	ldr	r2, [pc, #128]	@ (800c8fc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00e      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a1f      	ldr	r2, [pc, #124]	@ (800c900 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d009      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a1d      	ldr	r2, [pc, #116]	@ (800c904 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d004      	beq.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a1c      	ldr	r2, [pc, #112]	@ (800c908 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d10c      	bne.n	800c8b6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	40012c00 	.word	0x40012c00
 800c8d8:	50012c00 	.word	0x50012c00
 800c8dc:	40013400 	.word	0x40013400
 800c8e0:	50013400 	.word	0x50013400
 800c8e4:	40000400 	.word	0x40000400
 800c8e8:	50000400 	.word	0x50000400
 800c8ec:	40000800 	.word	0x40000800
 800c8f0:	50000800 	.word	0x50000800
 800c8f4:	40000c00 	.word	0x40000c00
 800c8f8:	50000c00 	.word	0x50000c00
 800c8fc:	40001800 	.word	0x40001800
 800c900:	50001800 	.word	0x50001800
 800c904:	40014000 	.word	0x40014000
 800c908:	50014000 	.word	0x50014000

0800c90c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c98c:	bf00      	nop
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e042      	b.n	800ca30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7f8 fa99 	bl	8004ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2224      	movs	r2, #36	@ 0x24
 800c9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0201 	bic.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fb4c 	bl	800d080 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 f99b 	bl	800cd24 <UART_SetConfig>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d101      	bne.n	800c9f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e01b      	b.n	800ca30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689a      	ldr	r2, [r3, #8]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fbcb 	bl	800d1c4 <UART_CheckIdleState>
 800ca2e:	4603      	mov	r3, r0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	@ 0x28
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	603b      	str	r3, [r7, #0]
 800ca44:	4613      	mov	r3, r2
 800ca46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca4e:	2b20      	cmp	r3, #32
 800ca50:	f040 808b 	bne.w	800cb6a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <HAL_UART_Transmit+0x28>
 800ca5a:	88fb      	ldrh	r3, [r7, #6]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e083      	b.n	800cb6c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca6e:	2b80      	cmp	r3, #128	@ 0x80
 800ca70:	d107      	bne.n	800ca82 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	689a      	ldr	r2, [r3, #8]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca80:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2221      	movs	r2, #33	@ 0x21
 800ca8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca92:	f7f8 fe5f 	bl	8005754 <HAL_GetTick>
 800ca96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	88fa      	ldrh	r2, [r7, #6]
 800ca9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	88fa      	ldrh	r2, [r7, #6]
 800caa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cab0:	d108      	bne.n	800cac4 <HAL_UART_Transmit+0x8c>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d104      	bne.n	800cac4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	61bb      	str	r3, [r7, #24]
 800cac2:	e003      	b.n	800cacc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cac8:	2300      	movs	r3, #0
 800caca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cacc:	e030      	b.n	800cb30 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	2200      	movs	r2, #0
 800cad6:	2180      	movs	r1, #128	@ 0x80
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f000 fc1d 	bl	800d318 <UART_WaitOnFlagUntilTimeout>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d005      	beq.n	800caf0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e03d      	b.n	800cb6c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10b      	bne.n	800cb0e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	3302      	adds	r3, #2
 800cb0a:	61bb      	str	r3, [r7, #24]
 800cb0c:	e007      	b.n	800cb1e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1c8      	bne.n	800cace <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2200      	movs	r2, #0
 800cb44:	2140      	movs	r1, #64	@ 0x40
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 fbe6 	bl	800d318 <UART_WaitOnFlagUntilTimeout>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d005      	beq.n	800cb5e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2220      	movs	r2, #32
 800cb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e006      	b.n	800cb6c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2220      	movs	r2, #32
 800cb62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	e000      	b.n	800cb6c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800cb6a:	2302      	movs	r3, #2
  }
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3720      	adds	r7, #32
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	4613      	mov	r3, r2
 800cb82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	f040 80c4 	bne.w	800cd18 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <HAL_UART_Receive+0x28>
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0bc      	b.n	800cd1a <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbaa:	2b40      	cmp	r3, #64	@ 0x40
 800cbac:	d107      	bne.n	800cbbe <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689a      	ldr	r2, [r3, #8]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbbc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2222      	movs	r2, #34	@ 0x22
 800cbca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbd4:	f7f8 fdbe 	bl	8005754 <HAL_GetTick>
 800cbd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	88fa      	ldrh	r2, [r7, #6]
 800cbde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	88fa      	ldrh	r2, [r7, #6]
 800cbe6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbf2:	d10e      	bne.n	800cc12 <HAL_UART_Receive+0x9e>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d105      	bne.n	800cc08 <HAL_UART_Receive+0x94>
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cc02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc06:	e02d      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	22ff      	movs	r2, #255	@ 0xff
 800cc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc10:	e028      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10d      	bne.n	800cc36 <HAL_UART_Receive+0xc2>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d104      	bne.n	800cc2c <HAL_UART_Receive+0xb8>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	22ff      	movs	r2, #255	@ 0xff
 800cc26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc2a:	e01b      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	227f      	movs	r2, #127	@ 0x7f
 800cc30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc34:	e016      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc3e:	d10d      	bne.n	800cc5c <HAL_UART_Receive+0xe8>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d104      	bne.n	800cc52 <HAL_UART_Receive+0xde>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	227f      	movs	r2, #127	@ 0x7f
 800cc4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc50:	e008      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	223f      	movs	r2, #63	@ 0x3f
 800cc56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc5a:	e003      	b.n	800cc64 <HAL_UART_Receive+0xf0>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc74:	d108      	bne.n	800cc88 <HAL_UART_Receive+0x114>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d104      	bne.n	800cc88 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	61bb      	str	r3, [r7, #24]
 800cc86:	e003      	b.n	800cc90 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cc90:	e036      	b.n	800cd00 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	2120      	movs	r1, #32
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f000 fb3b 	bl	800d318 <UART_WaitOnFlagUntilTimeout>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e032      	b.n	800cd1a <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10c      	bne.n	800ccd4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	8a7b      	ldrh	r3, [r7, #18]
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	3302      	adds	r3, #2
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	e00c      	b.n	800ccee <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccda:	b2da      	uxtb	r2, r3
 800ccdc:	8a7b      	ldrh	r3, [r7, #18]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	4013      	ands	r3, r2
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1c2      	bne.n	800cc92 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e000      	b.n	800cd1a <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800cd18:	2302      	movs	r3, #2
  }
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd28:	b094      	sub	sp, #80	@ 0x50
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	4b83      	ldr	r3, [pc, #524]	@ (800cf48 <UART_SetConfig+0x224>)
 800cd3a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	431a      	orrs	r2, r3
 800cd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	497c      	ldr	r1, [pc, #496]	@ (800cf4c <UART_SetConfig+0x228>)
 800cd5c:	4019      	ands	r1, r3
 800cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd64:	430b      	orrs	r3, r1
 800cd66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	68d9      	ldr	r1, [r3, #12]
 800cd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	ea40 0301 	orr.w	r3, r0, r1
 800cd7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	4b6f      	ldr	r3, [pc, #444]	@ (800cf48 <UART_SetConfig+0x224>)
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d009      	beq.n	800cda4 <UART_SetConfig+0x80>
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	4b6e      	ldr	r3, [pc, #440]	@ (800cf50 <UART_SetConfig+0x22c>)
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d004      	beq.n	800cda4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9c:	6a1a      	ldr	r2, [r3, #32]
 800cd9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cda0:	4313      	orrs	r3, r2
 800cda2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800cdae:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800cdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc2:	f023 000f 	bic.w	r0, r3, #15
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cdca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	ea40 0301 	orr.w	r3, r0, r1
 800cdd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	4b5e      	ldr	r3, [pc, #376]	@ (800cf54 <UART_SetConfig+0x230>)
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d102      	bne.n	800cde4 <UART_SetConfig+0xc0>
 800cdde:	2301      	movs	r3, #1
 800cde0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cde2:	e032      	b.n	800ce4a <UART_SetConfig+0x126>
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	4b5b      	ldr	r3, [pc, #364]	@ (800cf58 <UART_SetConfig+0x234>)
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d102      	bne.n	800cdf4 <UART_SetConfig+0xd0>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdf2:	e02a      	b.n	800ce4a <UART_SetConfig+0x126>
 800cdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	4b58      	ldr	r3, [pc, #352]	@ (800cf5c <UART_SetConfig+0x238>)
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d102      	bne.n	800ce04 <UART_SetConfig+0xe0>
 800cdfe:	2304      	movs	r3, #4
 800ce00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce02:	e022      	b.n	800ce4a <UART_SetConfig+0x126>
 800ce04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	4b55      	ldr	r3, [pc, #340]	@ (800cf60 <UART_SetConfig+0x23c>)
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d102      	bne.n	800ce14 <UART_SetConfig+0xf0>
 800ce0e:	2308      	movs	r3, #8
 800ce10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce12:	e01a      	b.n	800ce4a <UART_SetConfig+0x126>
 800ce14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	4b52      	ldr	r3, [pc, #328]	@ (800cf64 <UART_SetConfig+0x240>)
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d102      	bne.n	800ce24 <UART_SetConfig+0x100>
 800ce1e:	2310      	movs	r3, #16
 800ce20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce22:	e012      	b.n	800ce4a <UART_SetConfig+0x126>
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4b4f      	ldr	r3, [pc, #316]	@ (800cf68 <UART_SetConfig+0x244>)
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d102      	bne.n	800ce34 <UART_SetConfig+0x110>
 800ce2e:	2320      	movs	r3, #32
 800ce30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce32:	e00a      	b.n	800ce4a <UART_SetConfig+0x126>
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b43      	ldr	r3, [pc, #268]	@ (800cf48 <UART_SetConfig+0x224>)
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d103      	bne.n	800ce46 <UART_SetConfig+0x122>
 800ce3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce42:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce44:	e001      	b.n	800ce4a <UART_SetConfig+0x126>
 800ce46:	2300      	movs	r3, #0
 800ce48:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b3e      	ldr	r3, [pc, #248]	@ (800cf48 <UART_SetConfig+0x224>)
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d005      	beq.n	800ce60 <UART_SetConfig+0x13c>
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	4b3d      	ldr	r3, [pc, #244]	@ (800cf50 <UART_SetConfig+0x22c>)
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	f040 8088 	bne.w	800cf70 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ce60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce62:	2200      	movs	r2, #0
 800ce64:	623b      	str	r3, [r7, #32]
 800ce66:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce6c:	f7fb ff72 	bl	8008d54 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce70:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 80eb 	beq.w	800d050 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7e:	4a3b      	ldr	r2, [pc, #236]	@ (800cf6c <UART_SetConfig+0x248>)
 800ce80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce84:	461a      	mov	r2, r3
 800ce86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d305      	bcc.n	800ceaa <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d903      	bls.n	800ceb2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ceb0:	e048      	b.n	800cf44 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	61fa      	str	r2, [r7, #28]
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebe:	4a2b      	ldr	r2, [pc, #172]	@ (800cf6c <UART_SetConfig+0x248>)
 800cec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	2200      	movs	r2, #0
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	617a      	str	r2, [r7, #20]
 800cecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ced0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ced4:	f7f3 feec 	bl	8000cb0 <__aeabi_uldivmod>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4610      	mov	r0, r2
 800cede:	4619      	mov	r1, r3
 800cee0:	f04f 0200 	mov.w	r2, #0
 800cee4:	f04f 0300 	mov.w	r3, #0
 800cee8:	020b      	lsls	r3, r1, #8
 800ceea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ceee:	0202      	lsls	r2, r0, #8
 800cef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cef2:	6849      	ldr	r1, [r1, #4]
 800cef4:	0849      	lsrs	r1, r1, #1
 800cef6:	2000      	movs	r0, #0
 800cef8:	460c      	mov	r4, r1
 800cefa:	4605      	mov	r5, r0
 800cefc:	eb12 0804 	adds.w	r8, r2, r4
 800cf00:	eb43 0905 	adc.w	r9, r3, r5
 800cf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	60bb      	str	r3, [r7, #8]
 800cf0c:	60fa      	str	r2, [r7, #12]
 800cf0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 fecb 	bl	8000cb0 <__aeabi_uldivmod>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4613      	mov	r3, r2
 800cf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf28:	d308      	bcc.n	800cf3c <UART_SetConfig+0x218>
 800cf2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf30:	d204      	bcs.n	800cf3c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf38:	60da      	str	r2, [r3, #12]
 800cf3a:	e003      	b.n	800cf44 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800cf42:	e085      	b.n	800d050 <UART_SetConfig+0x32c>
 800cf44:	e084      	b.n	800d050 <UART_SetConfig+0x32c>
 800cf46:	bf00      	nop
 800cf48:	44002400 	.word	0x44002400
 800cf4c:	cfff69f3 	.word	0xcfff69f3
 800cf50:	54002400 	.word	0x54002400
 800cf54:	40013800 	.word	0x40013800
 800cf58:	40004400 	.word	0x40004400
 800cf5c:	40004800 	.word	0x40004800
 800cf60:	40004c00 	.word	0x40004c00
 800cf64:	40005000 	.word	0x40005000
 800cf68:	40006400 	.word	0x40006400
 800cf6c:	08014a98 	.word	0x08014a98
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf78:	d13c      	bne.n	800cff4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cf7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf86:	f7fb fee5 	bl	8008d54 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf8a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d05e      	beq.n	800d050 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf96:	4a39      	ldr	r2, [pc, #228]	@ (800d07c <UART_SetConfig+0x358>)
 800cf98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfa4:	005a      	lsls	r2, r3, #1
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	085b      	lsrs	r3, r3, #1
 800cfac:	441a      	add	r2, r3
 800cfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfba:	2b0f      	cmp	r3, #15
 800cfbc:	d916      	bls.n	800cfec <UART_SetConfig+0x2c8>
 800cfbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfc4:	d212      	bcs.n	800cfec <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f023 030f 	bic.w	r3, r3, #15
 800cfce:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd2:	085b      	lsrs	r3, r3, #1
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800cfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	e031      	b.n	800d050 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cff2:	e02d      	b.n	800d050 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cff6:	2200      	movs	r2, #0
 800cff8:	469a      	mov	sl, r3
 800cffa:	4693      	mov	fp, r2
 800cffc:	4650      	mov	r0, sl
 800cffe:	4659      	mov	r1, fp
 800d000:	f7fb fea8 	bl	8008d54 <HAL_RCCEx_GetPeriphCLKFreq>
 800d004:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d021      	beq.n	800d050 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d010:	4a1a      	ldr	r2, [pc, #104]	@ (800d07c <UART_SetConfig+0x358>)
 800d012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d016:	461a      	mov	r2, r3
 800d018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d01a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	085b      	lsrs	r3, r3, #1
 800d024:	441a      	add	r2, r3
 800d026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d032:	2b0f      	cmp	r3, #15
 800d034:	d909      	bls.n	800d04a <UART_SetConfig+0x326>
 800d036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d03c:	d205      	bcs.n	800d04a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d040:	b29a      	uxth	r2, r3
 800d042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	60da      	str	r2, [r3, #12]
 800d048:	e002      	b.n	800d050 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d052:	2201      	movs	r2, #1
 800d054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05a:	2201      	movs	r2, #1
 800d05c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	2200      	movs	r2, #0
 800d064:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d068:	2200      	movs	r2, #0
 800d06a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d06c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d070:	4618      	mov	r0, r3
 800d072:	3750      	adds	r7, #80	@ 0x50
 800d074:	46bd      	mov	sp, r7
 800d076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d07a:	bf00      	nop
 800d07c:	08014a98 	.word	0x08014a98

0800d080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d08c:	f003 0308 	and.w	r3, r3, #8
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00a      	beq.n	800d0aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00a      	beq.n	800d0cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d0:	f003 0302 	and.w	r3, r3, #2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00a      	beq.n	800d0ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	430a      	orrs	r2, r1
 800d0ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0f2:	f003 0304 	and.w	r3, r3, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	430a      	orrs	r2, r1
 800d10e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d114:	f003 0310 	and.w	r3, r3, #16
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d136:	f003 0320 	and.w	r3, r3, #32
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	430a      	orrs	r2, r1
 800d152:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d01a      	beq.n	800d196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	430a      	orrs	r2, r1
 800d174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d17a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d17e:	d10a      	bne.n	800d196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	430a      	orrs	r2, r1
 800d194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d19a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00a      	beq.n	800d1b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	605a      	str	r2, [r3, #4]
  }
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b098      	sub	sp, #96	@ 0x60
 800d1c8:	af02      	add	r7, sp, #8
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d1d4:	f7f8 fabe 	bl	8005754 <HAL_GetTick>
 800d1d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0308 	and.w	r3, r3, #8
 800d1e4:	2b08      	cmp	r3, #8
 800d1e6:	d12f      	bne.n	800d248 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f88e 	bl	800d318 <UART_WaitOnFlagUntilTimeout>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d022      	beq.n	800d248 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	e853 3f00 	ldrex	r3, [r3]
 800d20e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d216:	653b      	str	r3, [r7, #80]	@ 0x50
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	461a      	mov	r2, r3
 800d21e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d220:	647b      	str	r3, [r7, #68]	@ 0x44
 800d222:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d228:	e841 2300 	strex	r3, r2, [r1]
 800d22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1e6      	bne.n	800d202 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2220      	movs	r2, #32
 800d238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d244:	2303      	movs	r3, #3
 800d246:	e063      	b.n	800d310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0304 	and.w	r3, r3, #4
 800d252:	2b04      	cmp	r3, #4
 800d254:	d149      	bne.n	800d2ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d256:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d25e:	2200      	movs	r2, #0
 800d260:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f857 	bl	800d318 <UART_WaitOnFlagUntilTimeout>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d03c      	beq.n	800d2ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d278:	e853 3f00 	ldrex	r3, [r3]
 800d27c:	623b      	str	r3, [r7, #32]
   return(result);
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d28e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d290:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d296:	e841 2300 	strex	r3, r2, [r1]
 800d29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1e6      	bne.n	800d270 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f023 0301 	bic.w	r3, r3, #1
 800d2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3308      	adds	r3, #8
 800d2c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2c2:	61fa      	str	r2, [r7, #28]
 800d2c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c6:	69b9      	ldr	r1, [r7, #24]
 800d2c8:	69fa      	ldr	r2, [r7, #28]
 800d2ca:	e841 2300 	strex	r3, r2, [r1]
 800d2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1e5      	bne.n	800d2a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2220      	movs	r2, #32
 800d2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e012      	b.n	800d310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2220      	movs	r2, #32
 800d2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3758      	adds	r7, #88	@ 0x58
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	4613      	mov	r3, r2
 800d326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d328:	e04f      	b.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d04b      	beq.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d332:	f7f8 fa0f 	bl	8005754 <HAL_GetTick>
 800d336:	4602      	mov	r2, r0
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d302      	bcc.n	800d348 <UART_WaitOnFlagUntilTimeout+0x30>
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e04e      	b.n	800d3ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	2b00      	cmp	r3, #0
 800d358:	d037      	beq.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b80      	cmp	r3, #128	@ 0x80
 800d35e:	d034      	beq.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b40      	cmp	r3, #64	@ 0x40
 800d364:	d031      	beq.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	f003 0308 	and.w	r3, r3, #8
 800d370:	2b08      	cmp	r3, #8
 800d372:	d110      	bne.n	800d396 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2208      	movs	r2, #8
 800d37a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 f838 	bl	800d3f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2208      	movs	r2, #8
 800d386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e029      	b.n	800d3ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	69db      	ldr	r3, [r3, #28]
 800d39c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3a4:	d111      	bne.n	800d3ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 f81e 	bl	800d3f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e00f      	b.n	800d3ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	69da      	ldr	r2, [r3, #28]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	bf0c      	ite	eq
 800d3da:	2301      	moveq	r3, #1
 800d3dc:	2300      	movne	r3, #0
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	79fb      	ldrb	r3, [r7, #7]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d0a0      	beq.n	800d32a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b095      	sub	sp, #84	@ 0x54
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d418:	643b      	str	r3, [r7, #64]	@ 0x40
 800d41a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d41e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e6      	bne.n	800d3fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3308      	adds	r3, #8
 800d432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	e853 3f00 	ldrex	r3, [r3]
 800d43a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d442:	f023 0301 	bic.w	r3, r3, #1
 800d446:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3308      	adds	r3, #8
 800d44e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d458:	e841 2300 	strex	r3, r2, [r1]
 800d45c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1e3      	bne.n	800d42c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d118      	bne.n	800d49e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	e853 3f00 	ldrex	r3, [r3]
 800d478:	60bb      	str	r3, [r7, #8]
   return(result);
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f023 0310 	bic.w	r3, r3, #16
 800d480:	647b      	str	r3, [r7, #68]	@ 0x44
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d48a:	61bb      	str	r3, [r7, #24]
 800d48c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48e:	6979      	ldr	r1, [r7, #20]
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	e841 2300 	strex	r3, r2, [r1]
 800d496:	613b      	str	r3, [r7, #16]
   return(result);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1e6      	bne.n	800d46c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d4b2:	bf00      	nop
 800d4b4:	3754      	adds	r7, #84	@ 0x54
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b085      	sub	sp, #20
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d101      	bne.n	800d4d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	e027      	b.n	800d524 <HAL_UARTEx_DisableFifoMode+0x66>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2224      	movs	r2, #36	@ 0x24
 800d4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 0201 	bic.w	r2, r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d502:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2220      	movs	r2, #32
 800d516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d540:	2b01      	cmp	r3, #1
 800d542:	d101      	bne.n	800d548 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d544:	2302      	movs	r3, #2
 800d546:	e02d      	b.n	800d5a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2224      	movs	r2, #36	@ 0x24
 800d554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f022 0201 	bic.w	r2, r2, #1
 800d56e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	430a      	orrs	r2, r1
 800d582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f84f 	bl	800d628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2220      	movs	r2, #32
 800d596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d101      	bne.n	800d5c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e02d      	b.n	800d620 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2224      	movs	r2, #36	@ 0x24
 800d5d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f022 0201 	bic.w	r2, r2, #1
 800d5ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	430a      	orrs	r2, r1
 800d5fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f811 	bl	800d628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2220      	movs	r2, #32
 800d612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d634:	2b00      	cmp	r3, #0
 800d636:	d108      	bne.n	800d64a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d648:	e031      	b.n	800d6ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d64a:	2308      	movs	r3, #8
 800d64c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d64e:	2308      	movs	r3, #8
 800d650:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	0e5b      	lsrs	r3, r3, #25
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	f003 0307 	and.w	r3, r3, #7
 800d660:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	0f5b      	lsrs	r3, r3, #29
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	f003 0307 	and.w	r3, r3, #7
 800d670:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	7b3a      	ldrb	r2, [r7, #12]
 800d676:	4911      	ldr	r1, [pc, #68]	@ (800d6bc <UARTEx_SetNbDataToProcess+0x94>)
 800d678:	5c8a      	ldrb	r2, [r1, r2]
 800d67a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d67e:	7b3a      	ldrb	r2, [r7, #12]
 800d680:	490f      	ldr	r1, [pc, #60]	@ (800d6c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d682:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d684:	fb93 f3f2 	sdiv	r3, r3, r2
 800d688:	b29a      	uxth	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	7b7a      	ldrb	r2, [r7, #13]
 800d694:	4909      	ldr	r1, [pc, #36]	@ (800d6bc <UARTEx_SetNbDataToProcess+0x94>)
 800d696:	5c8a      	ldrb	r2, [r1, r2]
 800d698:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d69c:	7b7a      	ldrb	r2, [r7, #13]
 800d69e:	4908      	ldr	r1, [pc, #32]	@ (800d6c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d6a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d6ae:	bf00      	nop
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	08014ab0 	.word	0x08014ab0
 800d6c0:	08014ab8 	.word	0x08014ab8

0800d6c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d6cc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d6d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	43db      	mvns	r3, r3
 800d6da:	401a      	ands	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800d6fa:	78fb      	ldrb	r3, [r7, #3]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	641a      	str	r2, [r3, #64]	@ 0x40
 800d70c:	e00b      	b.n	800d726 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800d70e:	78fb      	ldrb	r3, [r7, #3]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d106      	bne.n	800d722 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d718:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	641a      	str	r2, [r3, #64]	@ 0x40
 800d720:	e001      	b.n	800d726 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e000      	b.n	800d728 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d734:	b084      	sub	sp, #16
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	f107 001c 	add.w	r0, r7, #28
 800d742:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2201      	movs	r2, #1
 800d74a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d750:	f023 0201 	bic.w	r2, r3, #1
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d758:	2100      	movs	r1, #0
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff ffc7 	bl	800d6ee <USB_SetCurrentMode>
 800d760:	4603      	mov	r3, r0
 800d762:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d776:	b004      	add	sp, #16
 800d778:	4770      	bx	lr

0800d77a <atoi>:
 800d77a:	220a      	movs	r2, #10
 800d77c:	2100      	movs	r1, #0
 800d77e:	f000 b87d 	b.w	800d87c <strtol>
	...

0800d784 <_strtol_l.constprop.0>:
 800d784:	2b24      	cmp	r3, #36	@ 0x24
 800d786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d78a:	4686      	mov	lr, r0
 800d78c:	4690      	mov	r8, r2
 800d78e:	d801      	bhi.n	800d794 <_strtol_l.constprop.0+0x10>
 800d790:	2b01      	cmp	r3, #1
 800d792:	d106      	bne.n	800d7a2 <_strtol_l.constprop.0+0x1e>
 800d794:	f001 f860 	bl	800e858 <__errno>
 800d798:	2316      	movs	r3, #22
 800d79a:	6003      	str	r3, [r0, #0]
 800d79c:	2000      	movs	r0, #0
 800d79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	4833      	ldr	r0, [pc, #204]	@ (800d874 <_strtol_l.constprop.0+0xf0>)
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7ac:	5d06      	ldrb	r6, [r0, r4]
 800d7ae:	f016 0608 	ands.w	r6, r6, #8
 800d7b2:	d1f8      	bne.n	800d7a6 <_strtol_l.constprop.0+0x22>
 800d7b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d7b6:	d12d      	bne.n	800d814 <_strtol_l.constprop.0+0x90>
 800d7b8:	782c      	ldrb	r4, [r5, #0]
 800d7ba:	2601      	movs	r6, #1
 800d7bc:	1c95      	adds	r5, r2, #2
 800d7be:	f033 0210 	bics.w	r2, r3, #16
 800d7c2:	d109      	bne.n	800d7d8 <_strtol_l.constprop.0+0x54>
 800d7c4:	2c30      	cmp	r4, #48	@ 0x30
 800d7c6:	d12a      	bne.n	800d81e <_strtol_l.constprop.0+0x9a>
 800d7c8:	782a      	ldrb	r2, [r5, #0]
 800d7ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d7ce:	2a58      	cmp	r2, #88	@ 0x58
 800d7d0:	d125      	bne.n	800d81e <_strtol_l.constprop.0+0x9a>
 800d7d2:	786c      	ldrb	r4, [r5, #1]
 800d7d4:	2310      	movs	r3, #16
 800d7d6:	3502      	adds	r5, #2
 800d7d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	fbbc f9f3 	udiv	r9, ip, r3
 800d7e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d7ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d7f0:	2f09      	cmp	r7, #9
 800d7f2:	d81b      	bhi.n	800d82c <_strtol_l.constprop.0+0xa8>
 800d7f4:	463c      	mov	r4, r7
 800d7f6:	42a3      	cmp	r3, r4
 800d7f8:	dd27      	ble.n	800d84a <_strtol_l.constprop.0+0xc6>
 800d7fa:	1c57      	adds	r7, r2, #1
 800d7fc:	d007      	beq.n	800d80e <_strtol_l.constprop.0+0x8a>
 800d7fe:	4581      	cmp	r9, r0
 800d800:	d320      	bcc.n	800d844 <_strtol_l.constprop.0+0xc0>
 800d802:	d101      	bne.n	800d808 <_strtol_l.constprop.0+0x84>
 800d804:	45a2      	cmp	sl, r4
 800d806:	db1d      	blt.n	800d844 <_strtol_l.constprop.0+0xc0>
 800d808:	fb00 4003 	mla	r0, r0, r3, r4
 800d80c:	2201      	movs	r2, #1
 800d80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d812:	e7eb      	b.n	800d7ec <_strtol_l.constprop.0+0x68>
 800d814:	2c2b      	cmp	r4, #43	@ 0x2b
 800d816:	bf04      	itt	eq
 800d818:	782c      	ldrbeq	r4, [r5, #0]
 800d81a:	1c95      	addeq	r5, r2, #2
 800d81c:	e7cf      	b.n	800d7be <_strtol_l.constprop.0+0x3a>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1da      	bne.n	800d7d8 <_strtol_l.constprop.0+0x54>
 800d822:	2c30      	cmp	r4, #48	@ 0x30
 800d824:	bf0c      	ite	eq
 800d826:	2308      	moveq	r3, #8
 800d828:	230a      	movne	r3, #10
 800d82a:	e7d5      	b.n	800d7d8 <_strtol_l.constprop.0+0x54>
 800d82c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d830:	2f19      	cmp	r7, #25
 800d832:	d801      	bhi.n	800d838 <_strtol_l.constprop.0+0xb4>
 800d834:	3c37      	subs	r4, #55	@ 0x37
 800d836:	e7de      	b.n	800d7f6 <_strtol_l.constprop.0+0x72>
 800d838:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d83c:	2f19      	cmp	r7, #25
 800d83e:	d804      	bhi.n	800d84a <_strtol_l.constprop.0+0xc6>
 800d840:	3c57      	subs	r4, #87	@ 0x57
 800d842:	e7d8      	b.n	800d7f6 <_strtol_l.constprop.0+0x72>
 800d844:	f04f 32ff 	mov.w	r2, #4294967295
 800d848:	e7e1      	b.n	800d80e <_strtol_l.constprop.0+0x8a>
 800d84a:	1c53      	adds	r3, r2, #1
 800d84c:	d108      	bne.n	800d860 <_strtol_l.constprop.0+0xdc>
 800d84e:	2322      	movs	r3, #34	@ 0x22
 800d850:	4660      	mov	r0, ip
 800d852:	f8ce 3000 	str.w	r3, [lr]
 800d856:	f1b8 0f00 	cmp.w	r8, #0
 800d85a:	d0a0      	beq.n	800d79e <_strtol_l.constprop.0+0x1a>
 800d85c:	1e69      	subs	r1, r5, #1
 800d85e:	e006      	b.n	800d86e <_strtol_l.constprop.0+0xea>
 800d860:	b106      	cbz	r6, 800d864 <_strtol_l.constprop.0+0xe0>
 800d862:	4240      	negs	r0, r0
 800d864:	f1b8 0f00 	cmp.w	r8, #0
 800d868:	d099      	beq.n	800d79e <_strtol_l.constprop.0+0x1a>
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	d1f6      	bne.n	800d85c <_strtol_l.constprop.0+0xd8>
 800d86e:	f8c8 1000 	str.w	r1, [r8]
 800d872:	e794      	b.n	800d79e <_strtol_l.constprop.0+0x1a>
 800d874:	08014ac1 	.word	0x08014ac1

0800d878 <_strtol_r>:
 800d878:	f7ff bf84 	b.w	800d784 <_strtol_l.constprop.0>

0800d87c <strtol>:
 800d87c:	4613      	mov	r3, r2
 800d87e:	460a      	mov	r2, r1
 800d880:	4601      	mov	r1, r0
 800d882:	4802      	ldr	r0, [pc, #8]	@ (800d88c <strtol+0x10>)
 800d884:	6800      	ldr	r0, [r0, #0]
 800d886:	f7ff bf7d 	b.w	800d784 <_strtol_l.constprop.0>
 800d88a:	bf00      	nop
 800d88c:	20000034 	.word	0x20000034

0800d890 <__cvt>:
 800d890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d894:	ec57 6b10 	vmov	r6, r7, d0
 800d898:	2f00      	cmp	r7, #0
 800d89a:	460c      	mov	r4, r1
 800d89c:	4619      	mov	r1, r3
 800d89e:	463b      	mov	r3, r7
 800d8a0:	bfb4      	ite	lt
 800d8a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d8a6:	2300      	movge	r3, #0
 800d8a8:	4691      	mov	r9, r2
 800d8aa:	bfbf      	itttt	lt
 800d8ac:	4632      	movlt	r2, r6
 800d8ae:	461f      	movlt	r7, r3
 800d8b0:	232d      	movlt	r3, #45	@ 0x2d
 800d8b2:	4616      	movlt	r6, r2
 800d8b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d8b8:	700b      	strb	r3, [r1, #0]
 800d8ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8bc:	f023 0820 	bic.w	r8, r3, #32
 800d8c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d8c4:	d005      	beq.n	800d8d2 <__cvt+0x42>
 800d8c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d8ca:	d100      	bne.n	800d8ce <__cvt+0x3e>
 800d8cc:	3401      	adds	r4, #1
 800d8ce:	2102      	movs	r1, #2
 800d8d0:	e000      	b.n	800d8d4 <__cvt+0x44>
 800d8d2:	2103      	movs	r1, #3
 800d8d4:	ab03      	add	r3, sp, #12
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	ab02      	add	r3, sp, #8
 800d8dc:	ec47 6b10 	vmov	d0, r6, r7
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	4653      	mov	r3, sl
 800d8e4:	f001 f894 	bl	800ea10 <_dtoa_r>
 800d8e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d8ec:	4605      	mov	r5, r0
 800d8ee:	d119      	bne.n	800d924 <__cvt+0x94>
 800d8f0:	f019 0f01 	tst.w	r9, #1
 800d8f4:	d00e      	beq.n	800d914 <__cvt+0x84>
 800d8f6:	eb00 0904 	add.w	r9, r0, r4
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f3 f8f5 	bl	8000af0 <__aeabi_dcmpeq>
 800d906:	b108      	cbz	r0, 800d90c <__cvt+0x7c>
 800d908:	f8cd 900c 	str.w	r9, [sp, #12]
 800d90c:	2230      	movs	r2, #48	@ 0x30
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	454b      	cmp	r3, r9
 800d912:	d31e      	bcc.n	800d952 <__cvt+0xc2>
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	4628      	mov	r0, r5
 800d918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d91a:	1b5b      	subs	r3, r3, r5
 800d91c:	6013      	str	r3, [r2, #0]
 800d91e:	b004      	add	sp, #16
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d928:	eb00 0904 	add.w	r9, r0, r4
 800d92c:	d1e5      	bne.n	800d8fa <__cvt+0x6a>
 800d92e:	7803      	ldrb	r3, [r0, #0]
 800d930:	2b30      	cmp	r3, #48	@ 0x30
 800d932:	d10a      	bne.n	800d94a <__cvt+0xba>
 800d934:	2200      	movs	r2, #0
 800d936:	2300      	movs	r3, #0
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f3 f8d8 	bl	8000af0 <__aeabi_dcmpeq>
 800d940:	b918      	cbnz	r0, 800d94a <__cvt+0xba>
 800d942:	f1c4 0401 	rsb	r4, r4, #1
 800d946:	f8ca 4000 	str.w	r4, [sl]
 800d94a:	f8da 3000 	ldr.w	r3, [sl]
 800d94e:	4499      	add	r9, r3
 800d950:	e7d3      	b.n	800d8fa <__cvt+0x6a>
 800d952:	1c59      	adds	r1, r3, #1
 800d954:	9103      	str	r1, [sp, #12]
 800d956:	701a      	strb	r2, [r3, #0]
 800d958:	e7d9      	b.n	800d90e <__cvt+0x7e>

0800d95a <__exponent>:
 800d95a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d95c:	2900      	cmp	r1, #0
 800d95e:	7002      	strb	r2, [r0, #0]
 800d960:	bfba      	itte	lt
 800d962:	4249      	neglt	r1, r1
 800d964:	232d      	movlt	r3, #45	@ 0x2d
 800d966:	232b      	movge	r3, #43	@ 0x2b
 800d968:	2909      	cmp	r1, #9
 800d96a:	7043      	strb	r3, [r0, #1]
 800d96c:	dd28      	ble.n	800d9c0 <__exponent+0x66>
 800d96e:	f10d 0307 	add.w	r3, sp, #7
 800d972:	270a      	movs	r7, #10
 800d974:	461d      	mov	r5, r3
 800d976:	461a      	mov	r2, r3
 800d978:	3b01      	subs	r3, #1
 800d97a:	fbb1 f6f7 	udiv	r6, r1, r7
 800d97e:	fb07 1416 	mls	r4, r7, r6, r1
 800d982:	3430      	adds	r4, #48	@ 0x30
 800d984:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d988:	460c      	mov	r4, r1
 800d98a:	4631      	mov	r1, r6
 800d98c:	2c63      	cmp	r4, #99	@ 0x63
 800d98e:	dcf2      	bgt.n	800d976 <__exponent+0x1c>
 800d990:	3130      	adds	r1, #48	@ 0x30
 800d992:	1e94      	subs	r4, r2, #2
 800d994:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d998:	1c41      	adds	r1, r0, #1
 800d99a:	4623      	mov	r3, r4
 800d99c:	42ab      	cmp	r3, r5
 800d99e:	d30a      	bcc.n	800d9b6 <__exponent+0x5c>
 800d9a0:	f10d 0309 	add.w	r3, sp, #9
 800d9a4:	1a9b      	subs	r3, r3, r2
 800d9a6:	42ac      	cmp	r4, r5
 800d9a8:	bf88      	it	hi
 800d9aa:	2300      	movhi	r3, #0
 800d9ac:	3302      	adds	r3, #2
 800d9ae:	4403      	add	r3, r0
 800d9b0:	1a18      	subs	r0, r3, r0
 800d9b2:	b003      	add	sp, #12
 800d9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d9ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d9be:	e7ed      	b.n	800d99c <__exponent+0x42>
 800d9c0:	2330      	movs	r3, #48	@ 0x30
 800d9c2:	3130      	adds	r1, #48	@ 0x30
 800d9c4:	7083      	strb	r3, [r0, #2]
 800d9c6:	1d03      	adds	r3, r0, #4
 800d9c8:	70c1      	strb	r1, [r0, #3]
 800d9ca:	e7f1      	b.n	800d9b0 <__exponent+0x56>

0800d9cc <_printf_float>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	b08d      	sub	sp, #52	@ 0x34
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	4616      	mov	r6, r2
 800d9d6:	461f      	mov	r7, r3
 800d9d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d9dc:	4605      	mov	r5, r0
 800d9de:	f000 fef1 	bl	800e7c4 <_localeconv_r>
 800d9e2:	6803      	ldr	r3, [r0, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	9304      	str	r3, [sp, #16]
 800d9e8:	f7f2 fc56 	bl	8000298 <strlen>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9005      	str	r0, [sp, #20]
 800d9f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9f6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d9fa:	3307      	adds	r3, #7
 800d9fc:	f8d4 b000 	ldr.w	fp, [r4]
 800da00:	f023 0307 	bic.w	r3, r3, #7
 800da04:	f103 0208 	add.w	r2, r3, #8
 800da08:	f8c8 2000 	str.w	r2, [r8]
 800da0c:	f04f 32ff 	mov.w	r2, #4294967295
 800da10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da18:	f8cd 8018 	str.w	r8, [sp, #24]
 800da1c:	9307      	str	r3, [sp, #28]
 800da1e:	4b9d      	ldr	r3, [pc, #628]	@ (800dc94 <_printf_float+0x2c8>)
 800da20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da24:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da28:	f7f3 f894 	bl	8000b54 <__aeabi_dcmpun>
 800da2c:	bb70      	cbnz	r0, 800da8c <_printf_float+0xc0>
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295
 800da32:	4b98      	ldr	r3, [pc, #608]	@ (800dc94 <_printf_float+0x2c8>)
 800da34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da38:	f7f3 f86e 	bl	8000b18 <__aeabi_dcmple>
 800da3c:	bb30      	cbnz	r0, 800da8c <_printf_float+0xc0>
 800da3e:	2200      	movs	r2, #0
 800da40:	2300      	movs	r3, #0
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f3 f85d 	bl	8000b04 <__aeabi_dcmplt>
 800da4a:	b110      	cbz	r0, 800da52 <_printf_float+0x86>
 800da4c:	232d      	movs	r3, #45	@ 0x2d
 800da4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da52:	4a91      	ldr	r2, [pc, #580]	@ (800dc98 <_printf_float+0x2cc>)
 800da54:	4b91      	ldr	r3, [pc, #580]	@ (800dc9c <_printf_float+0x2d0>)
 800da56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da5a:	bf94      	ite	ls
 800da5c:	4690      	movls	r8, r2
 800da5e:	4698      	movhi	r8, r3
 800da60:	2303      	movs	r3, #3
 800da62:	f04f 0900 	mov.w	r9, #0
 800da66:	6123      	str	r3, [r4, #16]
 800da68:	f02b 0304 	bic.w	r3, fp, #4
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	4633      	mov	r3, r6
 800da70:	aa0b      	add	r2, sp, #44	@ 0x2c
 800da72:	4621      	mov	r1, r4
 800da74:	4628      	mov	r0, r5
 800da76:	9700      	str	r7, [sp, #0]
 800da78:	f000 f9d2 	bl	800de20 <_printf_common>
 800da7c:	3001      	adds	r0, #1
 800da7e:	f040 808d 	bne.w	800db9c <_printf_float+0x1d0>
 800da82:	f04f 30ff 	mov.w	r0, #4294967295
 800da86:	b00d      	add	sp, #52	@ 0x34
 800da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f85e 	bl	8000b54 <__aeabi_dcmpun>
 800da98:	b140      	cbz	r0, 800daac <_printf_float+0xe0>
 800da9a:	464b      	mov	r3, r9
 800da9c:	4a80      	ldr	r2, [pc, #512]	@ (800dca0 <_printf_float+0x2d4>)
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bfbc      	itt	lt
 800daa2:	232d      	movlt	r3, #45	@ 0x2d
 800daa4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800daa8:	4b7e      	ldr	r3, [pc, #504]	@ (800dca4 <_printf_float+0x2d8>)
 800daaa:	e7d4      	b.n	800da56 <_printf_float+0x8a>
 800daac:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dab0:	6863      	ldr	r3, [r4, #4]
 800dab2:	9206      	str	r2, [sp, #24]
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	d13b      	bne.n	800db30 <_printf_float+0x164>
 800dab8:	2306      	movs	r3, #6
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dac0:	2300      	movs	r3, #0
 800dac2:	4628      	mov	r0, r5
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	ab0a      	add	r3, sp, #40	@ 0x28
 800daca:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dace:	ab09      	add	r3, sp, #36	@ 0x24
 800dad0:	ec49 8b10 	vmov	d0, r8, r9
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dada:	6861      	ldr	r1, [r4, #4]
 800dadc:	f7ff fed8 	bl	800d890 <__cvt>
 800dae0:	9b06      	ldr	r3, [sp, #24]
 800dae2:	4680      	mov	r8, r0
 800dae4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dae6:	2b47      	cmp	r3, #71	@ 0x47
 800dae8:	d129      	bne.n	800db3e <_printf_float+0x172>
 800daea:	1cc8      	adds	r0, r1, #3
 800daec:	db02      	blt.n	800daf4 <_printf_float+0x128>
 800daee:	6863      	ldr	r3, [r4, #4]
 800daf0:	4299      	cmp	r1, r3
 800daf2:	dd41      	ble.n	800db78 <_printf_float+0x1ac>
 800daf4:	f1aa 0a02 	sub.w	sl, sl, #2
 800daf8:	fa5f fa8a 	uxtb.w	sl, sl
 800dafc:	3901      	subs	r1, #1
 800dafe:	4652      	mov	r2, sl
 800db00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db04:	9109      	str	r1, [sp, #36]	@ 0x24
 800db06:	f7ff ff28 	bl	800d95a <__exponent>
 800db0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db0c:	4681      	mov	r9, r0
 800db0e:	1813      	adds	r3, r2, r0
 800db10:	2a01      	cmp	r2, #1
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	dc02      	bgt.n	800db1c <_printf_float+0x150>
 800db16:	6822      	ldr	r2, [r4, #0]
 800db18:	07d2      	lsls	r2, r2, #31
 800db1a:	d501      	bpl.n	800db20 <_printf_float+0x154>
 800db1c:	3301      	adds	r3, #1
 800db1e:	6123      	str	r3, [r4, #16]
 800db20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0a2      	beq.n	800da6e <_printf_float+0xa2>
 800db28:	232d      	movs	r3, #45	@ 0x2d
 800db2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db2e:	e79e      	b.n	800da6e <_printf_float+0xa2>
 800db30:	9a06      	ldr	r2, [sp, #24]
 800db32:	2a47      	cmp	r2, #71	@ 0x47
 800db34:	d1c2      	bne.n	800dabc <_printf_float+0xf0>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1c0      	bne.n	800dabc <_printf_float+0xf0>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e7bd      	b.n	800daba <_printf_float+0xee>
 800db3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db42:	d9db      	bls.n	800dafc <_printf_float+0x130>
 800db44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800db48:	d118      	bne.n	800db7c <_printf_float+0x1b0>
 800db4a:	2900      	cmp	r1, #0
 800db4c:	6863      	ldr	r3, [r4, #4]
 800db4e:	dd0b      	ble.n	800db68 <_printf_float+0x19c>
 800db50:	6121      	str	r1, [r4, #16]
 800db52:	b913      	cbnz	r3, 800db5a <_printf_float+0x18e>
 800db54:	6822      	ldr	r2, [r4, #0]
 800db56:	07d0      	lsls	r0, r2, #31
 800db58:	d502      	bpl.n	800db60 <_printf_float+0x194>
 800db5a:	3301      	adds	r3, #1
 800db5c:	440b      	add	r3, r1
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	f04f 0900 	mov.w	r9, #0
 800db64:	65a1      	str	r1, [r4, #88]	@ 0x58
 800db66:	e7db      	b.n	800db20 <_printf_float+0x154>
 800db68:	b913      	cbnz	r3, 800db70 <_printf_float+0x1a4>
 800db6a:	6822      	ldr	r2, [r4, #0]
 800db6c:	07d2      	lsls	r2, r2, #31
 800db6e:	d501      	bpl.n	800db74 <_printf_float+0x1a8>
 800db70:	3302      	adds	r3, #2
 800db72:	e7f4      	b.n	800db5e <_printf_float+0x192>
 800db74:	2301      	movs	r3, #1
 800db76:	e7f2      	b.n	800db5e <_printf_float+0x192>
 800db78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800db7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7e:	4299      	cmp	r1, r3
 800db80:	db05      	blt.n	800db8e <_printf_float+0x1c2>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	6121      	str	r1, [r4, #16]
 800db86:	07d8      	lsls	r0, r3, #31
 800db88:	d5ea      	bpl.n	800db60 <_printf_float+0x194>
 800db8a:	1c4b      	adds	r3, r1, #1
 800db8c:	e7e7      	b.n	800db5e <_printf_float+0x192>
 800db8e:	2900      	cmp	r1, #0
 800db90:	bfd4      	ite	le
 800db92:	f1c1 0202 	rsble	r2, r1, #2
 800db96:	2201      	movgt	r2, #1
 800db98:	4413      	add	r3, r2
 800db9a:	e7e0      	b.n	800db5e <_printf_float+0x192>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	055a      	lsls	r2, r3, #21
 800dba0:	d407      	bmi.n	800dbb2 <_printf_float+0x1e6>
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	4642      	mov	r2, r8
 800dba6:	4631      	mov	r1, r6
 800dba8:	4628      	mov	r0, r5
 800dbaa:	47b8      	blx	r7
 800dbac:	3001      	adds	r0, #1
 800dbae:	d12b      	bne.n	800dc08 <_printf_float+0x23c>
 800dbb0:	e767      	b.n	800da82 <_printf_float+0xb6>
 800dbb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dbb6:	f240 80dd 	bls.w	800dd74 <_printf_float+0x3a8>
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dbc2:	f7f2 ff95 	bl	8000af0 <__aeabi_dcmpeq>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d033      	beq.n	800dc32 <_printf_float+0x266>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	4a36      	ldr	r2, [pc, #216]	@ (800dca8 <_printf_float+0x2dc>)
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b8      	blx	r7
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	f43f af54 	beq.w	800da82 <_printf_float+0xb6>
 800dbda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dbde:	4543      	cmp	r3, r8
 800dbe0:	db02      	blt.n	800dbe8 <_printf_float+0x21c>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	07d8      	lsls	r0, r3, #31
 800dbe6:	d50f      	bpl.n	800dc08 <_printf_float+0x23c>
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbf0:	47b8      	blx	r7
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f43f af45 	beq.w	800da82 <_printf_float+0xb6>
 800dbf8:	f04f 0900 	mov.w	r9, #0
 800dbfc:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc00:	f104 0a1a 	add.w	sl, r4, #26
 800dc04:	45c8      	cmp	r8, r9
 800dc06:	dc09      	bgt.n	800dc1c <_printf_float+0x250>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	079b      	lsls	r3, r3, #30
 800dc0c:	f100 8103 	bmi.w	800de16 <_printf_float+0x44a>
 800dc10:	68e0      	ldr	r0, [r4, #12]
 800dc12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc14:	4298      	cmp	r0, r3
 800dc16:	bfb8      	it	lt
 800dc18:	4618      	movlt	r0, r3
 800dc1a:	e734      	b.n	800da86 <_printf_float+0xba>
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	4652      	mov	r2, sl
 800dc20:	4631      	mov	r1, r6
 800dc22:	4628      	mov	r0, r5
 800dc24:	47b8      	blx	r7
 800dc26:	3001      	adds	r0, #1
 800dc28:	f43f af2b 	beq.w	800da82 <_printf_float+0xb6>
 800dc2c:	f109 0901 	add.w	r9, r9, #1
 800dc30:	e7e8      	b.n	800dc04 <_printf_float+0x238>
 800dc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dc39      	bgt.n	800dcac <_printf_float+0x2e0>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dca8 <_printf_float+0x2dc>)
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b8      	blx	r7
 800dc42:	3001      	adds	r0, #1
 800dc44:	f43f af1d 	beq.w	800da82 <_printf_float+0xb6>
 800dc48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dc4c:	ea59 0303 	orrs.w	r3, r9, r3
 800dc50:	d102      	bne.n	800dc58 <_printf_float+0x28c>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	07d9      	lsls	r1, r3, #31
 800dc56:	d5d7      	bpl.n	800dc08 <_printf_float+0x23c>
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc60:	47b8      	blx	r7
 800dc62:	3001      	adds	r0, #1
 800dc64:	f43f af0d 	beq.w	800da82 <_printf_float+0xb6>
 800dc68:	f04f 0a00 	mov.w	sl, #0
 800dc6c:	f104 0b1a 	add.w	fp, r4, #26
 800dc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc72:	425b      	negs	r3, r3
 800dc74:	4553      	cmp	r3, sl
 800dc76:	dc01      	bgt.n	800dc7c <_printf_float+0x2b0>
 800dc78:	464b      	mov	r3, r9
 800dc7a:	e793      	b.n	800dba4 <_printf_float+0x1d8>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	465a      	mov	r2, fp
 800dc80:	4631      	mov	r1, r6
 800dc82:	4628      	mov	r0, r5
 800dc84:	47b8      	blx	r7
 800dc86:	3001      	adds	r0, #1
 800dc88:	f43f aefb 	beq.w	800da82 <_printf_float+0xb6>
 800dc8c:	f10a 0a01 	add.w	sl, sl, #1
 800dc90:	e7ee      	b.n	800dc70 <_printf_float+0x2a4>
 800dc92:	bf00      	nop
 800dc94:	7fefffff 	.word	0x7fefffff
 800dc98:	08014bc1 	.word	0x08014bc1
 800dc9c:	08014bc5 	.word	0x08014bc5
 800dca0:	08014bc9 	.word	0x08014bc9
 800dca4:	08014bcd 	.word	0x08014bcd
 800dca8:	08014bd1 	.word	0x08014bd1
 800dcac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dcae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dcb2:	4553      	cmp	r3, sl
 800dcb4:	bfa8      	it	ge
 800dcb6:	4653      	movge	r3, sl
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	4699      	mov	r9, r3
 800dcbc:	dc36      	bgt.n	800dd2c <_printf_float+0x360>
 800dcbe:	f04f 0b00 	mov.w	fp, #0
 800dcc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcc6:	f104 021a 	add.w	r2, r4, #26
 800dcca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dccc:	9306      	str	r3, [sp, #24]
 800dcce:	eba3 0309 	sub.w	r3, r3, r9
 800dcd2:	455b      	cmp	r3, fp
 800dcd4:	dc31      	bgt.n	800dd3a <_printf_float+0x36e>
 800dcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd8:	459a      	cmp	sl, r3
 800dcda:	dc3a      	bgt.n	800dd52 <_printf_float+0x386>
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	07da      	lsls	r2, r3, #31
 800dce0:	d437      	bmi.n	800dd52 <_printf_float+0x386>
 800dce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce4:	ebaa 0903 	sub.w	r9, sl, r3
 800dce8:	9b06      	ldr	r3, [sp, #24]
 800dcea:	ebaa 0303 	sub.w	r3, sl, r3
 800dcee:	4599      	cmp	r9, r3
 800dcf0:	bfa8      	it	ge
 800dcf2:	4699      	movge	r9, r3
 800dcf4:	f1b9 0f00 	cmp.w	r9, #0
 800dcf8:	dc33      	bgt.n	800dd62 <_printf_float+0x396>
 800dcfa:	f04f 0800 	mov.w	r8, #0
 800dcfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd02:	f104 0b1a 	add.w	fp, r4, #26
 800dd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd08:	ebaa 0303 	sub.w	r3, sl, r3
 800dd0c:	eba3 0309 	sub.w	r3, r3, r9
 800dd10:	4543      	cmp	r3, r8
 800dd12:	f77f af79 	ble.w	800dc08 <_printf_float+0x23c>
 800dd16:	2301      	movs	r3, #1
 800dd18:	465a      	mov	r2, fp
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b8      	blx	r7
 800dd20:	3001      	adds	r0, #1
 800dd22:	f43f aeae 	beq.w	800da82 <_printf_float+0xb6>
 800dd26:	f108 0801 	add.w	r8, r8, #1
 800dd2a:	e7ec      	b.n	800dd06 <_printf_float+0x33a>
 800dd2c:	4642      	mov	r2, r8
 800dd2e:	4631      	mov	r1, r6
 800dd30:	4628      	mov	r0, r5
 800dd32:	47b8      	blx	r7
 800dd34:	3001      	adds	r0, #1
 800dd36:	d1c2      	bne.n	800dcbe <_printf_float+0x2f2>
 800dd38:	e6a3      	b.n	800da82 <_printf_float+0xb6>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4628      	mov	r0, r5
 800dd40:	9206      	str	r2, [sp, #24]
 800dd42:	47b8      	blx	r7
 800dd44:	3001      	adds	r0, #1
 800dd46:	f43f ae9c 	beq.w	800da82 <_printf_float+0xb6>
 800dd4a:	f10b 0b01 	add.w	fp, fp, #1
 800dd4e:	9a06      	ldr	r2, [sp, #24]
 800dd50:	e7bb      	b.n	800dcca <_printf_float+0x2fe>
 800dd52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d1c0      	bne.n	800dce2 <_printf_float+0x316>
 800dd60:	e68f      	b.n	800da82 <_printf_float+0xb6>
 800dd62:	9a06      	ldr	r2, [sp, #24]
 800dd64:	464b      	mov	r3, r9
 800dd66:	4631      	mov	r1, r6
 800dd68:	4628      	mov	r0, r5
 800dd6a:	4442      	add	r2, r8
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d1c3      	bne.n	800dcfa <_printf_float+0x32e>
 800dd72:	e686      	b.n	800da82 <_printf_float+0xb6>
 800dd74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd78:	f1ba 0f01 	cmp.w	sl, #1
 800dd7c:	dc01      	bgt.n	800dd82 <_printf_float+0x3b6>
 800dd7e:	07db      	lsls	r3, r3, #31
 800dd80:	d536      	bpl.n	800ddf0 <_printf_float+0x424>
 800dd82:	2301      	movs	r3, #1
 800dd84:	4642      	mov	r2, r8
 800dd86:	4631      	mov	r1, r6
 800dd88:	4628      	mov	r0, r5
 800dd8a:	47b8      	blx	r7
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	f43f ae78 	beq.w	800da82 <_printf_float+0xb6>
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd9a:	47b8      	blx	r7
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	f43f ae70 	beq.w	800da82 <_printf_float+0xb6>
 800dda2:	2200      	movs	r2, #0
 800dda4:	2300      	movs	r3, #0
 800dda6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ddae:	f7f2 fe9f 	bl	8000af0 <__aeabi_dcmpeq>
 800ddb2:	b9c0      	cbnz	r0, 800dde6 <_printf_float+0x41a>
 800ddb4:	4653      	mov	r3, sl
 800ddb6:	f108 0201 	add.w	r2, r8, #1
 800ddba:	4631      	mov	r1, r6
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47b8      	blx	r7
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d10c      	bne.n	800ddde <_printf_float+0x412>
 800ddc4:	e65d      	b.n	800da82 <_printf_float+0xb6>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	465a      	mov	r2, fp
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4628      	mov	r0, r5
 800ddce:	47b8      	blx	r7
 800ddd0:	3001      	adds	r0, #1
 800ddd2:	f43f ae56 	beq.w	800da82 <_printf_float+0xb6>
 800ddd6:	f108 0801 	add.w	r8, r8, #1
 800ddda:	45d0      	cmp	r8, sl
 800dddc:	dbf3      	blt.n	800ddc6 <_printf_float+0x3fa>
 800ddde:	464b      	mov	r3, r9
 800dde0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dde4:	e6df      	b.n	800dba6 <_printf_float+0x1da>
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	f104 0b1a 	add.w	fp, r4, #26
 800ddee:	e7f4      	b.n	800ddda <_printf_float+0x40e>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4642      	mov	r2, r8
 800ddf4:	e7e1      	b.n	800ddba <_printf_float+0x3ee>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae3e 	beq.w	800da82 <_printf_float+0xb6>
 800de06:	f108 0801 	add.w	r8, r8, #1
 800de0a:	68e3      	ldr	r3, [r4, #12]
 800de0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de0e:	1a5b      	subs	r3, r3, r1
 800de10:	4543      	cmp	r3, r8
 800de12:	dcf0      	bgt.n	800ddf6 <_printf_float+0x42a>
 800de14:	e6fc      	b.n	800dc10 <_printf_float+0x244>
 800de16:	f04f 0800 	mov.w	r8, #0
 800de1a:	f104 0919 	add.w	r9, r4, #25
 800de1e:	e7f4      	b.n	800de0a <_printf_float+0x43e>

0800de20 <_printf_common>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	4616      	mov	r6, r2
 800de26:	4698      	mov	r8, r3
 800de28:	688a      	ldr	r2, [r1, #8]
 800de2a:	4607      	mov	r7, r0
 800de2c:	690b      	ldr	r3, [r1, #16]
 800de2e:	460c      	mov	r4, r1
 800de30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de34:	4293      	cmp	r3, r2
 800de36:	bfb8      	it	lt
 800de38:	4613      	movlt	r3, r2
 800de3a:	6033      	str	r3, [r6, #0]
 800de3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de40:	b10a      	cbz	r2, 800de46 <_printf_common+0x26>
 800de42:	3301      	adds	r3, #1
 800de44:	6033      	str	r3, [r6, #0]
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	0699      	lsls	r1, r3, #26
 800de4a:	bf42      	ittt	mi
 800de4c:	6833      	ldrmi	r3, [r6, #0]
 800de4e:	3302      	addmi	r3, #2
 800de50:	6033      	strmi	r3, [r6, #0]
 800de52:	6825      	ldr	r5, [r4, #0]
 800de54:	f015 0506 	ands.w	r5, r5, #6
 800de58:	d106      	bne.n	800de68 <_printf_common+0x48>
 800de5a:	f104 0a19 	add.w	sl, r4, #25
 800de5e:	68e3      	ldr	r3, [r4, #12]
 800de60:	6832      	ldr	r2, [r6, #0]
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	42ab      	cmp	r3, r5
 800de66:	dc2b      	bgt.n	800dec0 <_printf_common+0xa0>
 800de68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	3b00      	subs	r3, #0
 800de70:	bf18      	it	ne
 800de72:	2301      	movne	r3, #1
 800de74:	0692      	lsls	r2, r2, #26
 800de76:	d430      	bmi.n	800deda <_printf_common+0xba>
 800de78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de7c:	4641      	mov	r1, r8
 800de7e:	4638      	mov	r0, r7
 800de80:	47c8      	blx	r9
 800de82:	3001      	adds	r0, #1
 800de84:	d023      	beq.n	800dece <_printf_common+0xae>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	341a      	adds	r4, #26
 800de8a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800de8e:	f003 0306 	and.w	r3, r3, #6
 800de92:	2b04      	cmp	r3, #4
 800de94:	bf0a      	itet	eq
 800de96:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800de9a:	2500      	movne	r5, #0
 800de9c:	6833      	ldreq	r3, [r6, #0]
 800de9e:	f04f 0600 	mov.w	r6, #0
 800dea2:	bf08      	it	eq
 800dea4:	1aed      	subeq	r5, r5, r3
 800dea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800deaa:	bf08      	it	eq
 800deac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800deb0:	4293      	cmp	r3, r2
 800deb2:	bfc4      	itt	gt
 800deb4:	1a9b      	subgt	r3, r3, r2
 800deb6:	18ed      	addgt	r5, r5, r3
 800deb8:	42b5      	cmp	r5, r6
 800deba:	d11a      	bne.n	800def2 <_printf_common+0xd2>
 800debc:	2000      	movs	r0, #0
 800debe:	e008      	b.n	800ded2 <_printf_common+0xb2>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4652      	mov	r2, sl
 800dec4:	4641      	mov	r1, r8
 800dec6:	4638      	mov	r0, r7
 800dec8:	47c8      	blx	r9
 800deca:	3001      	adds	r0, #1
 800decc:	d103      	bne.n	800ded6 <_printf_common+0xb6>
 800dece:	f04f 30ff 	mov.w	r0, #4294967295
 800ded2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded6:	3501      	adds	r5, #1
 800ded8:	e7c1      	b.n	800de5e <_printf_common+0x3e>
 800deda:	18e1      	adds	r1, r4, r3
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	2030      	movs	r0, #48	@ 0x30
 800dee0:	3302      	adds	r3, #2
 800dee2:	4422      	add	r2, r4
 800dee4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800deec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800def0:	e7c2      	b.n	800de78 <_printf_common+0x58>
 800def2:	2301      	movs	r3, #1
 800def4:	4622      	mov	r2, r4
 800def6:	4641      	mov	r1, r8
 800def8:	4638      	mov	r0, r7
 800defa:	47c8      	blx	r9
 800defc:	3001      	adds	r0, #1
 800defe:	d0e6      	beq.n	800dece <_printf_common+0xae>
 800df00:	3601      	adds	r6, #1
 800df02:	e7d9      	b.n	800deb8 <_printf_common+0x98>

0800df04 <_printf_i>:
 800df04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df08:	7e0f      	ldrb	r7, [r1, #24]
 800df0a:	4691      	mov	r9, r2
 800df0c:	4680      	mov	r8, r0
 800df0e:	460c      	mov	r4, r1
 800df10:	2f78      	cmp	r7, #120	@ 0x78
 800df12:	469a      	mov	sl, r3
 800df14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df1a:	d807      	bhi.n	800df2c <_printf_i+0x28>
 800df1c:	2f62      	cmp	r7, #98	@ 0x62
 800df1e:	d80a      	bhi.n	800df36 <_printf_i+0x32>
 800df20:	2f00      	cmp	r7, #0
 800df22:	f000 80d2 	beq.w	800e0ca <_printf_i+0x1c6>
 800df26:	2f58      	cmp	r7, #88	@ 0x58
 800df28:	f000 80b9 	beq.w	800e09e <_printf_i+0x19a>
 800df2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df34:	e03a      	b.n	800dfac <_printf_i+0xa8>
 800df36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df3a:	2b15      	cmp	r3, #21
 800df3c:	d8f6      	bhi.n	800df2c <_printf_i+0x28>
 800df3e:	a101      	add	r1, pc, #4	@ (adr r1, 800df44 <_printf_i+0x40>)
 800df40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df44:	0800df9d 	.word	0x0800df9d
 800df48:	0800dfb1 	.word	0x0800dfb1
 800df4c:	0800df2d 	.word	0x0800df2d
 800df50:	0800df2d 	.word	0x0800df2d
 800df54:	0800df2d 	.word	0x0800df2d
 800df58:	0800df2d 	.word	0x0800df2d
 800df5c:	0800dfb1 	.word	0x0800dfb1
 800df60:	0800df2d 	.word	0x0800df2d
 800df64:	0800df2d 	.word	0x0800df2d
 800df68:	0800df2d 	.word	0x0800df2d
 800df6c:	0800df2d 	.word	0x0800df2d
 800df70:	0800e0b1 	.word	0x0800e0b1
 800df74:	0800dfdb 	.word	0x0800dfdb
 800df78:	0800e06b 	.word	0x0800e06b
 800df7c:	0800df2d 	.word	0x0800df2d
 800df80:	0800df2d 	.word	0x0800df2d
 800df84:	0800e0d3 	.word	0x0800e0d3
 800df88:	0800df2d 	.word	0x0800df2d
 800df8c:	0800dfdb 	.word	0x0800dfdb
 800df90:	0800df2d 	.word	0x0800df2d
 800df94:	0800df2d 	.word	0x0800df2d
 800df98:	0800e073 	.word	0x0800e073
 800df9c:	6833      	ldr	r3, [r6, #0]
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6032      	str	r2, [r6, #0]
 800dfa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dfac:	2301      	movs	r3, #1
 800dfae:	e09d      	b.n	800e0ec <_printf_i+0x1e8>
 800dfb0:	6833      	ldr	r3, [r6, #0]
 800dfb2:	6820      	ldr	r0, [r4, #0]
 800dfb4:	1d19      	adds	r1, r3, #4
 800dfb6:	6031      	str	r1, [r6, #0]
 800dfb8:	0606      	lsls	r6, r0, #24
 800dfba:	d501      	bpl.n	800dfc0 <_printf_i+0xbc>
 800dfbc:	681d      	ldr	r5, [r3, #0]
 800dfbe:	e003      	b.n	800dfc8 <_printf_i+0xc4>
 800dfc0:	0645      	lsls	r5, r0, #25
 800dfc2:	d5fb      	bpl.n	800dfbc <_printf_i+0xb8>
 800dfc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dfc8:	2d00      	cmp	r5, #0
 800dfca:	da03      	bge.n	800dfd4 <_printf_i+0xd0>
 800dfcc:	232d      	movs	r3, #45	@ 0x2d
 800dfce:	426d      	negs	r5, r5
 800dfd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfd4:	4859      	ldr	r0, [pc, #356]	@ (800e13c <_printf_i+0x238>)
 800dfd6:	230a      	movs	r3, #10
 800dfd8:	e011      	b.n	800dffe <_printf_i+0xfa>
 800dfda:	6821      	ldr	r1, [r4, #0]
 800dfdc:	6833      	ldr	r3, [r6, #0]
 800dfde:	0608      	lsls	r0, r1, #24
 800dfe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfe4:	d402      	bmi.n	800dfec <_printf_i+0xe8>
 800dfe6:	0649      	lsls	r1, r1, #25
 800dfe8:	bf48      	it	mi
 800dfea:	b2ad      	uxthmi	r5, r5
 800dfec:	2f6f      	cmp	r7, #111	@ 0x6f
 800dfee:	6033      	str	r3, [r6, #0]
 800dff0:	4852      	ldr	r0, [pc, #328]	@ (800e13c <_printf_i+0x238>)
 800dff2:	bf14      	ite	ne
 800dff4:	230a      	movne	r3, #10
 800dff6:	2308      	moveq	r3, #8
 800dff8:	2100      	movs	r1, #0
 800dffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dffe:	6866      	ldr	r6, [r4, #4]
 800e000:	2e00      	cmp	r6, #0
 800e002:	60a6      	str	r6, [r4, #8]
 800e004:	bfa2      	ittt	ge
 800e006:	6821      	ldrge	r1, [r4, #0]
 800e008:	f021 0104 	bicge.w	r1, r1, #4
 800e00c:	6021      	strge	r1, [r4, #0]
 800e00e:	b90d      	cbnz	r5, 800e014 <_printf_i+0x110>
 800e010:	2e00      	cmp	r6, #0
 800e012:	d04b      	beq.n	800e0ac <_printf_i+0x1a8>
 800e014:	4616      	mov	r6, r2
 800e016:	fbb5 f1f3 	udiv	r1, r5, r3
 800e01a:	fb03 5711 	mls	r7, r3, r1, r5
 800e01e:	5dc7      	ldrb	r7, [r0, r7]
 800e020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e024:	462f      	mov	r7, r5
 800e026:	460d      	mov	r5, r1
 800e028:	42bb      	cmp	r3, r7
 800e02a:	d9f4      	bls.n	800e016 <_printf_i+0x112>
 800e02c:	2b08      	cmp	r3, #8
 800e02e:	d10b      	bne.n	800e048 <_printf_i+0x144>
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	07df      	lsls	r7, r3, #31
 800e034:	d508      	bpl.n	800e048 <_printf_i+0x144>
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	6861      	ldr	r1, [r4, #4]
 800e03a:	4299      	cmp	r1, r3
 800e03c:	bfde      	ittt	le
 800e03e:	2330      	movle	r3, #48	@ 0x30
 800e040:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e044:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e048:	1b92      	subs	r2, r2, r6
 800e04a:	6122      	str	r2, [r4, #16]
 800e04c:	464b      	mov	r3, r9
 800e04e:	aa03      	add	r2, sp, #12
 800e050:	4621      	mov	r1, r4
 800e052:	4640      	mov	r0, r8
 800e054:	f8cd a000 	str.w	sl, [sp]
 800e058:	f7ff fee2 	bl	800de20 <_printf_common>
 800e05c:	3001      	adds	r0, #1
 800e05e:	d14a      	bne.n	800e0f6 <_printf_i+0x1f2>
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	b004      	add	sp, #16
 800e066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	f043 0320 	orr.w	r3, r3, #32
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	2778      	movs	r7, #120	@ 0x78
 800e074:	4832      	ldr	r0, [pc, #200]	@ (800e140 <_printf_i+0x23c>)
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e07c:	061f      	lsls	r7, r3, #24
 800e07e:	6831      	ldr	r1, [r6, #0]
 800e080:	f851 5b04 	ldr.w	r5, [r1], #4
 800e084:	d402      	bmi.n	800e08c <_printf_i+0x188>
 800e086:	065f      	lsls	r7, r3, #25
 800e088:	bf48      	it	mi
 800e08a:	b2ad      	uxthmi	r5, r5
 800e08c:	6031      	str	r1, [r6, #0]
 800e08e:	07d9      	lsls	r1, r3, #31
 800e090:	bf44      	itt	mi
 800e092:	f043 0320 	orrmi.w	r3, r3, #32
 800e096:	6023      	strmi	r3, [r4, #0]
 800e098:	b11d      	cbz	r5, 800e0a2 <_printf_i+0x19e>
 800e09a:	2310      	movs	r3, #16
 800e09c:	e7ac      	b.n	800dff8 <_printf_i+0xf4>
 800e09e:	4827      	ldr	r0, [pc, #156]	@ (800e13c <_printf_i+0x238>)
 800e0a0:	e7e9      	b.n	800e076 <_printf_i+0x172>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	f023 0320 	bic.w	r3, r3, #32
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	e7f6      	b.n	800e09a <_printf_i+0x196>
 800e0ac:	4616      	mov	r6, r2
 800e0ae:	e7bd      	b.n	800e02c <_printf_i+0x128>
 800e0b0:	6833      	ldr	r3, [r6, #0]
 800e0b2:	6825      	ldr	r5, [r4, #0]
 800e0b4:	1d18      	adds	r0, r3, #4
 800e0b6:	6961      	ldr	r1, [r4, #20]
 800e0b8:	6030      	str	r0, [r6, #0]
 800e0ba:	062e      	lsls	r6, r5, #24
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	d501      	bpl.n	800e0c4 <_printf_i+0x1c0>
 800e0c0:	6019      	str	r1, [r3, #0]
 800e0c2:	e002      	b.n	800e0ca <_printf_i+0x1c6>
 800e0c4:	0668      	lsls	r0, r5, #25
 800e0c6:	d5fb      	bpl.n	800e0c0 <_printf_i+0x1bc>
 800e0c8:	8019      	strh	r1, [r3, #0]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4616      	mov	r6, r2
 800e0ce:	6123      	str	r3, [r4, #16]
 800e0d0:	e7bc      	b.n	800e04c <_printf_i+0x148>
 800e0d2:	6833      	ldr	r3, [r6, #0]
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	1d1a      	adds	r2, r3, #4
 800e0d8:	6032      	str	r2, [r6, #0]
 800e0da:	681e      	ldr	r6, [r3, #0]
 800e0dc:	6862      	ldr	r2, [r4, #4]
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f000 fbe7 	bl	800e8b2 <memchr>
 800e0e4:	b108      	cbz	r0, 800e0ea <_printf_i+0x1e6>
 800e0e6:	1b80      	subs	r0, r0, r6
 800e0e8:	6060      	str	r0, [r4, #4]
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	6123      	str	r3, [r4, #16]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0f4:	e7aa      	b.n	800e04c <_printf_i+0x148>
 800e0f6:	6923      	ldr	r3, [r4, #16]
 800e0f8:	4632      	mov	r2, r6
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	47d0      	blx	sl
 800e100:	3001      	adds	r0, #1
 800e102:	d0ad      	beq.n	800e060 <_printf_i+0x15c>
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	079b      	lsls	r3, r3, #30
 800e108:	d413      	bmi.n	800e132 <_printf_i+0x22e>
 800e10a:	68e0      	ldr	r0, [r4, #12]
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	4298      	cmp	r0, r3
 800e110:	bfb8      	it	lt
 800e112:	4618      	movlt	r0, r3
 800e114:	e7a6      	b.n	800e064 <_printf_i+0x160>
 800e116:	2301      	movs	r3, #1
 800e118:	4632      	mov	r2, r6
 800e11a:	4649      	mov	r1, r9
 800e11c:	4640      	mov	r0, r8
 800e11e:	47d0      	blx	sl
 800e120:	3001      	adds	r0, #1
 800e122:	d09d      	beq.n	800e060 <_printf_i+0x15c>
 800e124:	3501      	adds	r5, #1
 800e126:	68e3      	ldr	r3, [r4, #12]
 800e128:	9903      	ldr	r1, [sp, #12]
 800e12a:	1a5b      	subs	r3, r3, r1
 800e12c:	42ab      	cmp	r3, r5
 800e12e:	dcf2      	bgt.n	800e116 <_printf_i+0x212>
 800e130:	e7eb      	b.n	800e10a <_printf_i+0x206>
 800e132:	2500      	movs	r5, #0
 800e134:	f104 0619 	add.w	r6, r4, #25
 800e138:	e7f5      	b.n	800e126 <_printf_i+0x222>
 800e13a:	bf00      	nop
 800e13c:	08014bd3 	.word	0x08014bd3
 800e140:	08014be4 	.word	0x08014be4

0800e144 <_scanf_float>:
 800e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	b087      	sub	sp, #28
 800e14a:	4617      	mov	r7, r2
 800e14c:	4680      	mov	r8, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	9303      	str	r3, [sp, #12]
 800e152:	688b      	ldr	r3, [r1, #8]
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e15a:	460a      	mov	r2, r1
 800e15c:	bf89      	itett	hi
 800e15e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e162:	f04f 0b00 	movls.w	fp, #0
 800e166:	eb03 0b05 	addhi.w	fp, r3, r5
 800e16a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e16e:	f04f 0500 	mov.w	r5, #0
 800e172:	bf88      	it	hi
 800e174:	608b      	strhi	r3, [r1, #8]
 800e176:	680b      	ldr	r3, [r1, #0]
 800e178:	46aa      	mov	sl, r5
 800e17a:	46a9      	mov	r9, r5
 800e17c:	9502      	str	r5, [sp, #8]
 800e17e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e182:	f842 3b1c 	str.w	r3, [r2], #28
 800e186:	4616      	mov	r6, r2
 800e188:	9201      	str	r2, [sp, #4]
 800e18a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e18e:	68a2      	ldr	r2, [r4, #8]
 800e190:	b152      	cbz	r2, 800e1a8 <_scanf_float+0x64>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b4e      	cmp	r3, #78	@ 0x4e
 800e198:	d864      	bhi.n	800e264 <_scanf_float+0x120>
 800e19a:	2b40      	cmp	r3, #64	@ 0x40
 800e19c:	d83c      	bhi.n	800e218 <_scanf_float+0xd4>
 800e19e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e1a2:	b2c8      	uxtb	r0, r1
 800e1a4:	280e      	cmp	r0, #14
 800e1a6:	d93a      	bls.n	800e21e <_scanf_float+0xda>
 800e1a8:	f1b9 0f00 	cmp.w	r9, #0
 800e1ac:	d003      	beq.n	800e1b6 <_scanf_float+0x72>
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1ba:	f1ba 0f01 	cmp.w	sl, #1
 800e1be:	f200 8117 	bhi.w	800e3f0 <_scanf_float+0x2ac>
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	429e      	cmp	r6, r3
 800e1c6:	f200 8108 	bhi.w	800e3da <_scanf_float+0x296>
 800e1ca:	2001      	movs	r0, #1
 800e1cc:	b007      	add	sp, #28
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e1d6:	2a0d      	cmp	r2, #13
 800e1d8:	d8e6      	bhi.n	800e1a8 <_scanf_float+0x64>
 800e1da:	a101      	add	r1, pc, #4	@ (adr r1, 800e1e0 <_scanf_float+0x9c>)
 800e1dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e1e0:	0800e327 	.word	0x0800e327
 800e1e4:	0800e1a9 	.word	0x0800e1a9
 800e1e8:	0800e1a9 	.word	0x0800e1a9
 800e1ec:	0800e1a9 	.word	0x0800e1a9
 800e1f0:	0800e387 	.word	0x0800e387
 800e1f4:	0800e35f 	.word	0x0800e35f
 800e1f8:	0800e1a9 	.word	0x0800e1a9
 800e1fc:	0800e1a9 	.word	0x0800e1a9
 800e200:	0800e335 	.word	0x0800e335
 800e204:	0800e1a9 	.word	0x0800e1a9
 800e208:	0800e1a9 	.word	0x0800e1a9
 800e20c:	0800e1a9 	.word	0x0800e1a9
 800e210:	0800e1a9 	.word	0x0800e1a9
 800e214:	0800e2ed 	.word	0x0800e2ed
 800e218:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e21c:	e7db      	b.n	800e1d6 <_scanf_float+0x92>
 800e21e:	290e      	cmp	r1, #14
 800e220:	d8c2      	bhi.n	800e1a8 <_scanf_float+0x64>
 800e222:	a001      	add	r0, pc, #4	@ (adr r0, 800e228 <_scanf_float+0xe4>)
 800e224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e228:	0800e2dd 	.word	0x0800e2dd
 800e22c:	0800e1a9 	.word	0x0800e1a9
 800e230:	0800e2dd 	.word	0x0800e2dd
 800e234:	0800e373 	.word	0x0800e373
 800e238:	0800e1a9 	.word	0x0800e1a9
 800e23c:	0800e285 	.word	0x0800e285
 800e240:	0800e2c3 	.word	0x0800e2c3
 800e244:	0800e2c3 	.word	0x0800e2c3
 800e248:	0800e2c3 	.word	0x0800e2c3
 800e24c:	0800e2c3 	.word	0x0800e2c3
 800e250:	0800e2c3 	.word	0x0800e2c3
 800e254:	0800e2c3 	.word	0x0800e2c3
 800e258:	0800e2c3 	.word	0x0800e2c3
 800e25c:	0800e2c3 	.word	0x0800e2c3
 800e260:	0800e2c3 	.word	0x0800e2c3
 800e264:	2b6e      	cmp	r3, #110	@ 0x6e
 800e266:	d809      	bhi.n	800e27c <_scanf_float+0x138>
 800e268:	2b60      	cmp	r3, #96	@ 0x60
 800e26a:	d8b2      	bhi.n	800e1d2 <_scanf_float+0x8e>
 800e26c:	2b54      	cmp	r3, #84	@ 0x54
 800e26e:	d07b      	beq.n	800e368 <_scanf_float+0x224>
 800e270:	2b59      	cmp	r3, #89	@ 0x59
 800e272:	d199      	bne.n	800e1a8 <_scanf_float+0x64>
 800e274:	2d07      	cmp	r5, #7
 800e276:	d197      	bne.n	800e1a8 <_scanf_float+0x64>
 800e278:	2508      	movs	r5, #8
 800e27a:	e02c      	b.n	800e2d6 <_scanf_float+0x192>
 800e27c:	2b74      	cmp	r3, #116	@ 0x74
 800e27e:	d073      	beq.n	800e368 <_scanf_float+0x224>
 800e280:	2b79      	cmp	r3, #121	@ 0x79
 800e282:	e7f6      	b.n	800e272 <_scanf_float+0x12e>
 800e284:	6821      	ldr	r1, [r4, #0]
 800e286:	05c8      	lsls	r0, r1, #23
 800e288:	d51b      	bpl.n	800e2c2 <_scanf_float+0x17e>
 800e28a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e28e:	f109 0901 	add.w	r9, r9, #1
 800e292:	6021      	str	r1, [r4, #0]
 800e294:	f1bb 0f00 	cmp.w	fp, #0
 800e298:	d003      	beq.n	800e2a2 <_scanf_float+0x15e>
 800e29a:	3201      	adds	r2, #1
 800e29c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2a0:	60a2      	str	r2, [r4, #8]
 800e2a2:	68a3      	ldr	r3, [r4, #8]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	60a3      	str	r3, [r4, #8]
 800e2a8:	6923      	ldr	r3, [r4, #16]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	6123      	str	r3, [r4, #16]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	607b      	str	r3, [r7, #4]
 800e2b6:	f340 8087 	ble.w	800e3c8 <_scanf_float+0x284>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	e765      	b.n	800e18e <_scanf_float+0x4a>
 800e2c2:	eb1a 0105 	adds.w	r1, sl, r5
 800e2c6:	f47f af6f 	bne.w	800e1a8 <_scanf_float+0x64>
 800e2ca:	6822      	ldr	r2, [r4, #0]
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	468a      	mov	sl, r1
 800e2d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e2d4:	6022      	str	r2, [r4, #0]
 800e2d6:	f806 3b01 	strb.w	r3, [r6], #1
 800e2da:	e7e2      	b.n	800e2a2 <_scanf_float+0x15e>
 800e2dc:	6822      	ldr	r2, [r4, #0]
 800e2de:	0610      	lsls	r0, r2, #24
 800e2e0:	f57f af62 	bpl.w	800e1a8 <_scanf_float+0x64>
 800e2e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e2e8:	6022      	str	r2, [r4, #0]
 800e2ea:	e7f4      	b.n	800e2d6 <_scanf_float+0x192>
 800e2ec:	f1ba 0f00 	cmp.w	sl, #0
 800e2f0:	d10e      	bne.n	800e310 <_scanf_float+0x1cc>
 800e2f2:	f1b9 0f00 	cmp.w	r9, #0
 800e2f6:	d10e      	bne.n	800e316 <_scanf_float+0x1d2>
 800e2f8:	6822      	ldr	r2, [r4, #0]
 800e2fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e2fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e302:	d108      	bne.n	800e316 <_scanf_float+0x1d2>
 800e304:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e308:	f04f 0a01 	mov.w	sl, #1
 800e30c:	6022      	str	r2, [r4, #0]
 800e30e:	e7e2      	b.n	800e2d6 <_scanf_float+0x192>
 800e310:	f1ba 0f02 	cmp.w	sl, #2
 800e314:	d055      	beq.n	800e3c2 <_scanf_float+0x27e>
 800e316:	2d01      	cmp	r5, #1
 800e318:	d002      	beq.n	800e320 <_scanf_float+0x1dc>
 800e31a:	2d04      	cmp	r5, #4
 800e31c:	f47f af44 	bne.w	800e1a8 <_scanf_float+0x64>
 800e320:	3501      	adds	r5, #1
 800e322:	b2ed      	uxtb	r5, r5
 800e324:	e7d7      	b.n	800e2d6 <_scanf_float+0x192>
 800e326:	f1ba 0f01 	cmp.w	sl, #1
 800e32a:	f47f af3d 	bne.w	800e1a8 <_scanf_float+0x64>
 800e32e:	f04f 0a02 	mov.w	sl, #2
 800e332:	e7d0      	b.n	800e2d6 <_scanf_float+0x192>
 800e334:	b97d      	cbnz	r5, 800e356 <_scanf_float+0x212>
 800e336:	f1b9 0f00 	cmp.w	r9, #0
 800e33a:	f47f af38 	bne.w	800e1ae <_scanf_float+0x6a>
 800e33e:	6822      	ldr	r2, [r4, #0]
 800e340:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e344:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e348:	f040 8107 	bne.w	800e55a <_scanf_float+0x416>
 800e34c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e350:	2501      	movs	r5, #1
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	e7bf      	b.n	800e2d6 <_scanf_float+0x192>
 800e356:	2d03      	cmp	r5, #3
 800e358:	d0e2      	beq.n	800e320 <_scanf_float+0x1dc>
 800e35a:	2d05      	cmp	r5, #5
 800e35c:	e7de      	b.n	800e31c <_scanf_float+0x1d8>
 800e35e:	2d02      	cmp	r5, #2
 800e360:	f47f af22 	bne.w	800e1a8 <_scanf_float+0x64>
 800e364:	2503      	movs	r5, #3
 800e366:	e7b6      	b.n	800e2d6 <_scanf_float+0x192>
 800e368:	2d06      	cmp	r5, #6
 800e36a:	f47f af1d 	bne.w	800e1a8 <_scanf_float+0x64>
 800e36e:	2507      	movs	r5, #7
 800e370:	e7b1      	b.n	800e2d6 <_scanf_float+0x192>
 800e372:	6822      	ldr	r2, [r4, #0]
 800e374:	0591      	lsls	r1, r2, #22
 800e376:	f57f af17 	bpl.w	800e1a8 <_scanf_float+0x64>
 800e37a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e37e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e382:	6022      	str	r2, [r4, #0]
 800e384:	e7a7      	b.n	800e2d6 <_scanf_float+0x192>
 800e386:	6822      	ldr	r2, [r4, #0]
 800e388:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e38c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e390:	d006      	beq.n	800e3a0 <_scanf_float+0x25c>
 800e392:	0550      	lsls	r0, r2, #21
 800e394:	f57f af08 	bpl.w	800e1a8 <_scanf_float+0x64>
 800e398:	f1b9 0f00 	cmp.w	r9, #0
 800e39c:	f000 80dd 	beq.w	800e55a <_scanf_float+0x416>
 800e3a0:	0591      	lsls	r1, r2, #22
 800e3a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3a6:	bf58      	it	pl
 800e3a8:	9902      	ldrpl	r1, [sp, #8]
 800e3aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e3ae:	bf58      	it	pl
 800e3b0:	eba9 0101 	subpl.w	r1, r9, r1
 800e3b4:	6022      	str	r2, [r4, #0]
 800e3b6:	f04f 0900 	mov.w	r9, #0
 800e3ba:	bf58      	it	pl
 800e3bc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e3c0:	e789      	b.n	800e2d6 <_scanf_float+0x192>
 800e3c2:	f04f 0a03 	mov.w	sl, #3
 800e3c6:	e786      	b.n	800e2d6 <_scanf_float+0x192>
 800e3c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4640      	mov	r0, r8
 800e3d0:	4798      	blx	r3
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	f43f aedb 	beq.w	800e18e <_scanf_float+0x4a>
 800e3d8:	e6e6      	b.n	800e1a8 <_scanf_float+0x64>
 800e3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3de:	463a      	mov	r2, r7
 800e3e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4798      	blx	r3
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	e6e8      	b.n	800e1c2 <_scanf_float+0x7e>
 800e3f0:	1e6b      	subs	r3, r5, #1
 800e3f2:	2b06      	cmp	r3, #6
 800e3f4:	d824      	bhi.n	800e440 <_scanf_float+0x2fc>
 800e3f6:	2d02      	cmp	r5, #2
 800e3f8:	d836      	bhi.n	800e468 <_scanf_float+0x324>
 800e3fa:	9b01      	ldr	r3, [sp, #4]
 800e3fc:	429e      	cmp	r6, r3
 800e3fe:	f67f aee4 	bls.w	800e1ca <_scanf_float+0x86>
 800e402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e406:	463a      	mov	r2, r7
 800e408:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e40c:	4640      	mov	r0, r8
 800e40e:	4798      	blx	r3
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	3b01      	subs	r3, #1
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	e7f0      	b.n	800e3fa <_scanf_float+0x2b6>
 800e418:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e41c:	463a      	mov	r2, r7
 800e41e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e422:	4640      	mov	r0, r8
 800e424:	4798      	blx	r3
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	3b01      	subs	r3, #1
 800e42a:	6123      	str	r3, [r4, #16]
 800e42c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e430:	fa5f fa8a 	uxtb.w	sl, sl
 800e434:	f1ba 0f02 	cmp.w	sl, #2
 800e438:	d1ee      	bne.n	800e418 <_scanf_float+0x2d4>
 800e43a:	3d03      	subs	r5, #3
 800e43c:	b2ed      	uxtb	r5, r5
 800e43e:	1b76      	subs	r6, r6, r5
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	05da      	lsls	r2, r3, #23
 800e444:	d52f      	bpl.n	800e4a6 <_scanf_float+0x362>
 800e446:	055b      	lsls	r3, r3, #21
 800e448:	d511      	bpl.n	800e46e <_scanf_float+0x32a>
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	429e      	cmp	r6, r3
 800e44e:	f67f aebc 	bls.w	800e1ca <_scanf_float+0x86>
 800e452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e456:	463a      	mov	r2, r7
 800e458:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e45c:	4640      	mov	r0, r8
 800e45e:	4798      	blx	r3
 800e460:	6923      	ldr	r3, [r4, #16]
 800e462:	3b01      	subs	r3, #1
 800e464:	6123      	str	r3, [r4, #16]
 800e466:	e7f0      	b.n	800e44a <_scanf_float+0x306>
 800e468:	46aa      	mov	sl, r5
 800e46a:	46b3      	mov	fp, r6
 800e46c:	e7de      	b.n	800e42c <_scanf_float+0x2e8>
 800e46e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e472:	1e75      	subs	r5, r6, #1
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	2965      	cmp	r1, #101	@ 0x65
 800e478:	f103 33ff 	add.w	r3, r3, #4294967295
 800e47c:	6123      	str	r3, [r4, #16]
 800e47e:	d00c      	beq.n	800e49a <_scanf_float+0x356>
 800e480:	2945      	cmp	r1, #69	@ 0x45
 800e482:	d00a      	beq.n	800e49a <_scanf_float+0x356>
 800e484:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e488:	463a      	mov	r2, r7
 800e48a:	4640      	mov	r0, r8
 800e48c:	1eb5      	subs	r5, r6, #2
 800e48e:	4798      	blx	r3
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e496:	3b01      	subs	r3, #1
 800e498:	6123      	str	r3, [r4, #16]
 800e49a:	462e      	mov	r6, r5
 800e49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4a0:	463a      	mov	r2, r7
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4798      	blx	r3
 800e4a6:	6822      	ldr	r2, [r4, #0]
 800e4a8:	f012 0210 	ands.w	r2, r2, #16
 800e4ac:	d001      	beq.n	800e4b2 <_scanf_float+0x36e>
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	e68c      	b.n	800e1cc <_scanf_float+0x88>
 800e4b2:	7032      	strb	r2, [r6, #0]
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e4ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4be:	d11c      	bne.n	800e4fa <_scanf_float+0x3b6>
 800e4c0:	9b02      	ldr	r3, [sp, #8]
 800e4c2:	454b      	cmp	r3, r9
 800e4c4:	eba3 0209 	sub.w	r2, r3, r9
 800e4c8:	d123      	bne.n	800e512 <_scanf_float+0x3ce>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	9901      	ldr	r1, [sp, #4]
 800e4ce:	4640      	mov	r0, r8
 800e4d0:	f002 fc22 	bl	8010d18 <_strtod_r>
 800e4d4:	6821      	ldr	r1, [r4, #0]
 800e4d6:	9b03      	ldr	r3, [sp, #12]
 800e4d8:	f011 0f02 	tst.w	r1, #2
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	ec57 6b10 	vmov	r6, r7, d0
 800e4e2:	f103 0204 	add.w	r2, r3, #4
 800e4e6:	d01f      	beq.n	800e528 <_scanf_float+0x3e4>
 800e4e8:	9903      	ldr	r1, [sp, #12]
 800e4ea:	600a      	str	r2, [r1, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	e9c3 6700 	strd	r6, r7, [r3]
 800e4f2:	68e3      	ldr	r3, [r4, #12]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	60e3      	str	r3, [r4, #12]
 800e4f8:	e7d9      	b.n	800e4ae <_scanf_float+0x36a>
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d0e4      	beq.n	800e4ca <_scanf_float+0x386>
 800e500:	9905      	ldr	r1, [sp, #20]
 800e502:	230a      	movs	r3, #10
 800e504:	4640      	mov	r0, r8
 800e506:	3101      	adds	r1, #1
 800e508:	f7ff f9b6 	bl	800d878 <_strtol_r>
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	9e05      	ldr	r6, [sp, #20]
 800e510:	1ac2      	subs	r2, r0, r3
 800e512:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e516:	4912      	ldr	r1, [pc, #72]	@ (800e560 <_scanf_float+0x41c>)
 800e518:	429e      	cmp	r6, r3
 800e51a:	bf28      	it	cs
 800e51c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e520:	4630      	mov	r0, r6
 800e522:	f000 f8e3 	bl	800e6ec <siprintf>
 800e526:	e7d0      	b.n	800e4ca <_scanf_float+0x386>
 800e528:	f011 0f04 	tst.w	r1, #4
 800e52c:	9903      	ldr	r1, [sp, #12]
 800e52e:	600a      	str	r2, [r1, #0]
 800e530:	d1dc      	bne.n	800e4ec <_scanf_float+0x3a8>
 800e532:	681d      	ldr	r5, [r3, #0]
 800e534:	4632      	mov	r2, r6
 800e536:	463b      	mov	r3, r7
 800e538:	4630      	mov	r0, r6
 800e53a:	4639      	mov	r1, r7
 800e53c:	f7f2 fb0a 	bl	8000b54 <__aeabi_dcmpun>
 800e540:	b128      	cbz	r0, 800e54e <_scanf_float+0x40a>
 800e542:	4808      	ldr	r0, [pc, #32]	@ (800e564 <_scanf_float+0x420>)
 800e544:	f000 f9d0 	bl	800e8e8 <nanf>
 800e548:	ed85 0a00 	vstr	s0, [r5]
 800e54c:	e7d1      	b.n	800e4f2 <_scanf_float+0x3ae>
 800e54e:	4630      	mov	r0, r6
 800e550:	4639      	mov	r1, r7
 800e552:	f7f2 fb5d 	bl	8000c10 <__aeabi_d2f>
 800e556:	6028      	str	r0, [r5, #0]
 800e558:	e7cb      	b.n	800e4f2 <_scanf_float+0x3ae>
 800e55a:	f04f 0900 	mov.w	r9, #0
 800e55e:	e62a      	b.n	800e1b6 <_scanf_float+0x72>
 800e560:	08014bf5 	.word	0x08014bf5
 800e564:	08014e8c 	.word	0x08014e8c

0800e568 <std>:
 800e568:	2300      	movs	r3, #0
 800e56a:	b510      	push	{r4, lr}
 800e56c:	4604      	mov	r4, r0
 800e56e:	6083      	str	r3, [r0, #8]
 800e570:	8181      	strh	r1, [r0, #12]
 800e572:	4619      	mov	r1, r3
 800e574:	6643      	str	r3, [r0, #100]	@ 0x64
 800e576:	81c2      	strh	r2, [r0, #14]
 800e578:	2208      	movs	r2, #8
 800e57a:	6183      	str	r3, [r0, #24]
 800e57c:	e9c0 3300 	strd	r3, r3, [r0]
 800e580:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e584:	305c      	adds	r0, #92	@ 0x5c
 800e586:	f000 f914 	bl	800e7b2 <memset>
 800e58a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c0 <std+0x58>)
 800e58c:	6224      	str	r4, [r4, #32]
 800e58e:	6263      	str	r3, [r4, #36]	@ 0x24
 800e590:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c4 <std+0x5c>)
 800e592:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e594:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c8 <std+0x60>)
 800e596:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e598:	4b0c      	ldr	r3, [pc, #48]	@ (800e5cc <std+0x64>)
 800e59a:	6323      	str	r3, [r4, #48]	@ 0x30
 800e59c:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d0 <std+0x68>)
 800e59e:	429c      	cmp	r4, r3
 800e5a0:	d006      	beq.n	800e5b0 <std+0x48>
 800e5a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5a6:	4294      	cmp	r4, r2
 800e5a8:	d002      	beq.n	800e5b0 <std+0x48>
 800e5aa:	33d0      	adds	r3, #208	@ 0xd0
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	d105      	bne.n	800e5bc <std+0x54>
 800e5b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5b8:	f000 b978 	b.w	800e8ac <__retarget_lock_init_recursive>
 800e5bc:	bd10      	pop	{r4, pc}
 800e5be:	bf00      	nop
 800e5c0:	0800e72d 	.word	0x0800e72d
 800e5c4:	0800e74f 	.word	0x0800e74f
 800e5c8:	0800e787 	.word	0x0800e787
 800e5cc:	0800e7ab 	.word	0x0800e7ab
 800e5d0:	2003b278 	.word	0x2003b278

0800e5d4 <stdio_exit_handler>:
 800e5d4:	4a02      	ldr	r2, [pc, #8]	@ (800e5e0 <stdio_exit_handler+0xc>)
 800e5d6:	4903      	ldr	r1, [pc, #12]	@ (800e5e4 <stdio_exit_handler+0x10>)
 800e5d8:	4803      	ldr	r0, [pc, #12]	@ (800e5e8 <stdio_exit_handler+0x14>)
 800e5da:	f000 b869 	b.w	800e6b0 <_fwalk_sglue>
 800e5de:	bf00      	nop
 800e5e0:	20000028 	.word	0x20000028
 800e5e4:	080110dd 	.word	0x080110dd
 800e5e8:	20000038 	.word	0x20000038

0800e5ec <cleanup_stdio>:
 800e5ec:	6841      	ldr	r1, [r0, #4]
 800e5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e620 <cleanup_stdio+0x34>)
 800e5f0:	4299      	cmp	r1, r3
 800e5f2:	b510      	push	{r4, lr}
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	d001      	beq.n	800e5fc <cleanup_stdio+0x10>
 800e5f8:	f002 fd70 	bl	80110dc <_fflush_r>
 800e5fc:	68a1      	ldr	r1, [r4, #8]
 800e5fe:	4b09      	ldr	r3, [pc, #36]	@ (800e624 <cleanup_stdio+0x38>)
 800e600:	4299      	cmp	r1, r3
 800e602:	d002      	beq.n	800e60a <cleanup_stdio+0x1e>
 800e604:	4620      	mov	r0, r4
 800e606:	f002 fd69 	bl	80110dc <_fflush_r>
 800e60a:	68e1      	ldr	r1, [r4, #12]
 800e60c:	4b06      	ldr	r3, [pc, #24]	@ (800e628 <cleanup_stdio+0x3c>)
 800e60e:	4299      	cmp	r1, r3
 800e610:	d004      	beq.n	800e61c <cleanup_stdio+0x30>
 800e612:	4620      	mov	r0, r4
 800e614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e618:	f002 bd60 	b.w	80110dc <_fflush_r>
 800e61c:	bd10      	pop	{r4, pc}
 800e61e:	bf00      	nop
 800e620:	2003b278 	.word	0x2003b278
 800e624:	2003b2e0 	.word	0x2003b2e0
 800e628:	2003b348 	.word	0x2003b348

0800e62c <global_stdio_init.part.0>:
 800e62c:	b510      	push	{r4, lr}
 800e62e:	4b0b      	ldr	r3, [pc, #44]	@ (800e65c <global_stdio_init.part.0+0x30>)
 800e630:	2104      	movs	r1, #4
 800e632:	4c0b      	ldr	r4, [pc, #44]	@ (800e660 <global_stdio_init.part.0+0x34>)
 800e634:	4a0b      	ldr	r2, [pc, #44]	@ (800e664 <global_stdio_init.part.0+0x38>)
 800e636:	4620      	mov	r0, r4
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f7ff ff94 	bl	800e568 <std>
 800e640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e644:	2201      	movs	r2, #1
 800e646:	2109      	movs	r1, #9
 800e648:	f7ff ff8e 	bl	800e568 <std>
 800e64c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e650:	2202      	movs	r2, #2
 800e652:	2112      	movs	r1, #18
 800e654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e658:	f7ff bf86 	b.w	800e568 <std>
 800e65c:	2003b3b0 	.word	0x2003b3b0
 800e660:	2003b278 	.word	0x2003b278
 800e664:	0800e5d5 	.word	0x0800e5d5

0800e668 <__sfp_lock_acquire>:
 800e668:	4801      	ldr	r0, [pc, #4]	@ (800e670 <__sfp_lock_acquire+0x8>)
 800e66a:	f000 b920 	b.w	800e8ae <__retarget_lock_acquire_recursive>
 800e66e:	bf00      	nop
 800e670:	2003b3b9 	.word	0x2003b3b9

0800e674 <__sfp_lock_release>:
 800e674:	4801      	ldr	r0, [pc, #4]	@ (800e67c <__sfp_lock_release+0x8>)
 800e676:	f000 b91b 	b.w	800e8b0 <__retarget_lock_release_recursive>
 800e67a:	bf00      	nop
 800e67c:	2003b3b9 	.word	0x2003b3b9

0800e680 <__sinit>:
 800e680:	b510      	push	{r4, lr}
 800e682:	4604      	mov	r4, r0
 800e684:	f7ff fff0 	bl	800e668 <__sfp_lock_acquire>
 800e688:	6a23      	ldr	r3, [r4, #32]
 800e68a:	b11b      	cbz	r3, 800e694 <__sinit+0x14>
 800e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e690:	f7ff bff0 	b.w	800e674 <__sfp_lock_release>
 800e694:	4b04      	ldr	r3, [pc, #16]	@ (800e6a8 <__sinit+0x28>)
 800e696:	6223      	str	r3, [r4, #32]
 800e698:	4b04      	ldr	r3, [pc, #16]	@ (800e6ac <__sinit+0x2c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1f5      	bne.n	800e68c <__sinit+0xc>
 800e6a0:	f7ff ffc4 	bl	800e62c <global_stdio_init.part.0>
 800e6a4:	e7f2      	b.n	800e68c <__sinit+0xc>
 800e6a6:	bf00      	nop
 800e6a8:	0800e5ed 	.word	0x0800e5ed
 800e6ac:	2003b3b0 	.word	0x2003b3b0

0800e6b0 <_fwalk_sglue>:
 800e6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b4:	4607      	mov	r7, r0
 800e6b6:	4688      	mov	r8, r1
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	2600      	movs	r6, #0
 800e6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e6c4:	d505      	bpl.n	800e6d2 <_fwalk_sglue+0x22>
 800e6c6:	6824      	ldr	r4, [r4, #0]
 800e6c8:	2c00      	cmp	r4, #0
 800e6ca:	d1f7      	bne.n	800e6bc <_fwalk_sglue+0xc>
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	89ab      	ldrh	r3, [r5, #12]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d907      	bls.n	800e6e8 <_fwalk_sglue+0x38>
 800e6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	d003      	beq.n	800e6e8 <_fwalk_sglue+0x38>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	4638      	mov	r0, r7
 800e6e4:	47c0      	blx	r8
 800e6e6:	4306      	orrs	r6, r0
 800e6e8:	3568      	adds	r5, #104	@ 0x68
 800e6ea:	e7e9      	b.n	800e6c0 <_fwalk_sglue+0x10>

0800e6ec <siprintf>:
 800e6ec:	b40e      	push	{r1, r2, r3}
 800e6ee:	b500      	push	{lr}
 800e6f0:	b09c      	sub	sp, #112	@ 0x70
 800e6f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e6f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e6f8:	9002      	str	r0, [sp, #8]
 800e6fa:	9006      	str	r0, [sp, #24]
 800e6fc:	9107      	str	r1, [sp, #28]
 800e6fe:	9104      	str	r1, [sp, #16]
 800e700:	4808      	ldr	r0, [pc, #32]	@ (800e724 <siprintf+0x38>)
 800e702:	4909      	ldr	r1, [pc, #36]	@ (800e728 <siprintf+0x3c>)
 800e704:	f853 2b04 	ldr.w	r2, [r3], #4
 800e708:	9105      	str	r1, [sp, #20]
 800e70a:	a902      	add	r1, sp, #8
 800e70c:	6800      	ldr	r0, [r0, #0]
 800e70e:	9301      	str	r3, [sp, #4]
 800e710:	f002 fb64 	bl	8010ddc <_svfiprintf_r>
 800e714:	9b02      	ldr	r3, [sp, #8]
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
 800e71a:	b01c      	add	sp, #112	@ 0x70
 800e71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e720:	b003      	add	sp, #12
 800e722:	4770      	bx	lr
 800e724:	20000034 	.word	0x20000034
 800e728:	ffff0208 	.word	0xffff0208

0800e72c <__sread>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	460c      	mov	r4, r1
 800e730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e734:	f000 f86c 	bl	800e810 <_read_r>
 800e738:	2800      	cmp	r0, #0
 800e73a:	bfab      	itete	ge
 800e73c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e73e:	89a3      	ldrhlt	r3, [r4, #12]
 800e740:	181b      	addge	r3, r3, r0
 800e742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e746:	bfac      	ite	ge
 800e748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e74a:	81a3      	strhlt	r3, [r4, #12]
 800e74c:	bd10      	pop	{r4, pc}

0800e74e <__swrite>:
 800e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e752:	461f      	mov	r7, r3
 800e754:	898b      	ldrh	r3, [r1, #12]
 800e756:	4605      	mov	r5, r0
 800e758:	460c      	mov	r4, r1
 800e75a:	05db      	lsls	r3, r3, #23
 800e75c:	4616      	mov	r6, r2
 800e75e:	d505      	bpl.n	800e76c <__swrite+0x1e>
 800e760:	2302      	movs	r3, #2
 800e762:	2200      	movs	r2, #0
 800e764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e768:	f000 f840 	bl	800e7ec <_lseek_r>
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	4632      	mov	r2, r6
 800e770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e774:	4628      	mov	r0, r5
 800e776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e77a:	81a3      	strh	r3, [r4, #12]
 800e77c:	463b      	mov	r3, r7
 800e77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e782:	f000 b857 	b.w	800e834 <_write_r>

0800e786 <__sseek>:
 800e786:	b510      	push	{r4, lr}
 800e788:	460c      	mov	r4, r1
 800e78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78e:	f000 f82d 	bl	800e7ec <_lseek_r>
 800e792:	1c43      	adds	r3, r0, #1
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	bf15      	itete	ne
 800e798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e79a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e79e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e7a2:	81a3      	strheq	r3, [r4, #12]
 800e7a4:	bf18      	it	ne
 800e7a6:	81a3      	strhne	r3, [r4, #12]
 800e7a8:	bd10      	pop	{r4, pc}

0800e7aa <__sclose>:
 800e7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ae:	f000 b80d 	b.w	800e7cc <_close_r>

0800e7b2 <memset>:
 800e7b2:	4402      	add	r2, r0
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d100      	bne.n	800e7bc <memset+0xa>
 800e7ba:	4770      	bx	lr
 800e7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c0:	e7f9      	b.n	800e7b6 <memset+0x4>
	...

0800e7c4 <_localeconv_r>:
 800e7c4:	4800      	ldr	r0, [pc, #0]	@ (800e7c8 <_localeconv_r+0x4>)
 800e7c6:	4770      	bx	lr
 800e7c8:	20000174 	.word	0x20000174

0800e7cc <_close_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4d05      	ldr	r5, [pc, #20]	@ (800e7e8 <_close_r+0x1c>)
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	602b      	str	r3, [r5, #0]
 800e7d8:	f7f6 fdfa 	bl	80053d0 <_close>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_close_r+0x1a>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_close_r+0x1a>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	2003b3b4 	.word	0x2003b3b4

0800e7ec <_lseek_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	4d06      	ldr	r5, [pc, #24]	@ (800e80c <_lseek_r+0x20>)
 800e7f2:	4608      	mov	r0, r1
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	602a      	str	r2, [r5, #0]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	f7f6 fe0f 	bl	800541e <_lseek>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_lseek_r+0x1e>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_lseek_r+0x1e>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	2003b3b4 	.word	0x2003b3b4

0800e810 <_read_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4604      	mov	r4, r0
 800e814:	4d06      	ldr	r5, [pc, #24]	@ (800e830 <_read_r+0x20>)
 800e816:	4608      	mov	r0, r1
 800e818:	4611      	mov	r1, r2
 800e81a:	2200      	movs	r2, #0
 800e81c:	602a      	str	r2, [r5, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	f7f6 fd9d 	bl	800535e <_read>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_read_r+0x1e>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_read_r+0x1e>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	2003b3b4 	.word	0x2003b3b4

0800e834 <_write_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4604      	mov	r4, r0
 800e838:	4d06      	ldr	r5, [pc, #24]	@ (800e854 <_write_r+0x20>)
 800e83a:	4608      	mov	r0, r1
 800e83c:	4611      	mov	r1, r2
 800e83e:	2200      	movs	r2, #0
 800e840:	602a      	str	r2, [r5, #0]
 800e842:	461a      	mov	r2, r3
 800e844:	f7f6 fda8 	bl	8005398 <_write>
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	d102      	bne.n	800e852 <_write_r+0x1e>
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	b103      	cbz	r3, 800e852 <_write_r+0x1e>
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	2003b3b4 	.word	0x2003b3b4

0800e858 <__errno>:
 800e858:	4b01      	ldr	r3, [pc, #4]	@ (800e860 <__errno+0x8>)
 800e85a:	6818      	ldr	r0, [r3, #0]
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	20000034 	.word	0x20000034

0800e864 <__libc_init_array>:
 800e864:	b570      	push	{r4, r5, r6, lr}
 800e866:	4d0d      	ldr	r5, [pc, #52]	@ (800e89c <__libc_init_array+0x38>)
 800e868:	2600      	movs	r6, #0
 800e86a:	4c0d      	ldr	r4, [pc, #52]	@ (800e8a0 <__libc_init_array+0x3c>)
 800e86c:	1b64      	subs	r4, r4, r5
 800e86e:	10a4      	asrs	r4, r4, #2
 800e870:	42a6      	cmp	r6, r4
 800e872:	d109      	bne.n	800e888 <__libc_init_array+0x24>
 800e874:	4d0b      	ldr	r5, [pc, #44]	@ (800e8a4 <__libc_init_array+0x40>)
 800e876:	2600      	movs	r6, #0
 800e878:	4c0b      	ldr	r4, [pc, #44]	@ (800e8a8 <__libc_init_array+0x44>)
 800e87a:	f005 fcfd 	bl	8014278 <_init>
 800e87e:	1b64      	subs	r4, r4, r5
 800e880:	10a4      	asrs	r4, r4, #2
 800e882:	42a6      	cmp	r6, r4
 800e884:	d105      	bne.n	800e892 <__libc_init_array+0x2e>
 800e886:	bd70      	pop	{r4, r5, r6, pc}
 800e888:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88c:	3601      	adds	r6, #1
 800e88e:	4798      	blx	r3
 800e890:	e7ee      	b.n	800e870 <__libc_init_array+0xc>
 800e892:	f855 3b04 	ldr.w	r3, [r5], #4
 800e896:	3601      	adds	r6, #1
 800e898:	4798      	blx	r3
 800e89a:	e7f2      	b.n	800e882 <__libc_init_array+0x1e>
 800e89c:	08015170 	.word	0x08015170
 800e8a0:	08015170 	.word	0x08015170
 800e8a4:	08015170 	.word	0x08015170
 800e8a8:	08015174 	.word	0x08015174

0800e8ac <__retarget_lock_init_recursive>:
 800e8ac:	4770      	bx	lr

0800e8ae <__retarget_lock_acquire_recursive>:
 800e8ae:	4770      	bx	lr

0800e8b0 <__retarget_lock_release_recursive>:
 800e8b0:	4770      	bx	lr

0800e8b2 <memchr>:
 800e8b2:	b2c9      	uxtb	r1, r1
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	4402      	add	r2, r0
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	d101      	bne.n	800e8c4 <memchr+0x12>
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	e003      	b.n	800e8cc <memchr+0x1a>
 800e8c4:	7804      	ldrb	r4, [r0, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	428c      	cmp	r4, r1
 800e8ca:	d1f6      	bne.n	800e8ba <memchr+0x8>
 800e8cc:	bd10      	pop	{r4, pc}

0800e8ce <memcpy>:
 800e8ce:	440a      	add	r2, r1
 800e8d0:	1e43      	subs	r3, r0, #1
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	d100      	bne.n	800e8d8 <memcpy+0xa>
 800e8d6:	4770      	bx	lr
 800e8d8:	b510      	push	{r4, lr}
 800e8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8de:	4291      	cmp	r1, r2
 800e8e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8e4:	d1f9      	bne.n	800e8da <memcpy+0xc>
 800e8e6:	bd10      	pop	{r4, pc}

0800e8e8 <nanf>:
 800e8e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e8f0 <nanf+0x8>
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	7fc00000 	.word	0x7fc00000

0800e8f4 <quorem>:
 800e8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	6903      	ldr	r3, [r0, #16]
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	690c      	ldr	r4, [r1, #16]
 800e8fe:	42a3      	cmp	r3, r4
 800e900:	f2c0 8083 	blt.w	800ea0a <quorem+0x116>
 800e904:	3c01      	subs	r4, #1
 800e906:	f100 0514 	add.w	r5, r0, #20
 800e90a:	f101 0814 	add.w	r8, r1, #20
 800e90e:	00a3      	lsls	r3, r4, #2
 800e910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e914:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e924:	3301      	adds	r3, #1
 800e926:	429a      	cmp	r2, r3
 800e928:	fbb2 f6f3 	udiv	r6, r2, r3
 800e92c:	d331      	bcc.n	800e992 <quorem+0x9e>
 800e92e:	f04f 0a00 	mov.w	sl, #0
 800e932:	46c4      	mov	ip, r8
 800e934:	46ae      	mov	lr, r5
 800e936:	46d3      	mov	fp, sl
 800e938:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e93c:	b298      	uxth	r0, r3
 800e93e:	45e1      	cmp	r9, ip
 800e940:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e944:	fb06 a000 	mla	r0, r6, r0, sl
 800e948:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e94c:	b280      	uxth	r0, r0
 800e94e:	fb06 2303 	mla	r3, r6, r3, r2
 800e952:	f8de 2000 	ldr.w	r2, [lr]
 800e956:	b292      	uxth	r2, r2
 800e958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e95c:	eba2 0200 	sub.w	r2, r2, r0
 800e960:	b29b      	uxth	r3, r3
 800e962:	f8de 0000 	ldr.w	r0, [lr]
 800e966:	445a      	add	r2, fp
 800e968:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e96c:	b292      	uxth	r2, r2
 800e96e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e972:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e976:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e97a:	f84e 2b04 	str.w	r2, [lr], #4
 800e97e:	d2db      	bcs.n	800e938 <quorem+0x44>
 800e980:	9b00      	ldr	r3, [sp, #0]
 800e982:	58eb      	ldr	r3, [r5, r3]
 800e984:	b92b      	cbnz	r3, 800e992 <quorem+0x9e>
 800e986:	9b01      	ldr	r3, [sp, #4]
 800e988:	3b04      	subs	r3, #4
 800e98a:	429d      	cmp	r5, r3
 800e98c:	461a      	mov	r2, r3
 800e98e:	d330      	bcc.n	800e9f2 <quorem+0xfe>
 800e990:	613c      	str	r4, [r7, #16]
 800e992:	4638      	mov	r0, r7
 800e994:	f001 f9c6 	bl	800fd24 <__mcmp>
 800e998:	2800      	cmp	r0, #0
 800e99a:	db26      	blt.n	800e9ea <quorem+0xf6>
 800e99c:	4629      	mov	r1, r5
 800e99e:	2000      	movs	r0, #0
 800e9a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9a4:	f8d1 c000 	ldr.w	ip, [r1]
 800e9a8:	fa1f fe82 	uxth.w	lr, r2
 800e9ac:	45c1      	cmp	r9, r8
 800e9ae:	fa1f f38c 	uxth.w	r3, ip
 800e9b2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e9b6:	eba3 030e 	sub.w	r3, r3, lr
 800e9ba:	4403      	add	r3, r0
 800e9bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e9ce:	f841 3b04 	str.w	r3, [r1], #4
 800e9d2:	d2e5      	bcs.n	800e9a0 <quorem+0xac>
 800e9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9dc:	b922      	cbnz	r2, 800e9e8 <quorem+0xf4>
 800e9de:	3b04      	subs	r3, #4
 800e9e0:	429d      	cmp	r5, r3
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	d30b      	bcc.n	800e9fe <quorem+0x10a>
 800e9e6:	613c      	str	r4, [r7, #16]
 800e9e8:	3601      	adds	r6, #1
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	b003      	add	sp, #12
 800e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f2:	6812      	ldr	r2, [r2, #0]
 800e9f4:	3b04      	subs	r3, #4
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	d1ca      	bne.n	800e990 <quorem+0x9c>
 800e9fa:	3c01      	subs	r4, #1
 800e9fc:	e7c5      	b.n	800e98a <quorem+0x96>
 800e9fe:	6812      	ldr	r2, [r2, #0]
 800ea00:	3b04      	subs	r3, #4
 800ea02:	2a00      	cmp	r2, #0
 800ea04:	d1ef      	bne.n	800e9e6 <quorem+0xf2>
 800ea06:	3c01      	subs	r4, #1
 800ea08:	e7ea      	b.n	800e9e0 <quorem+0xec>
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	e7ee      	b.n	800e9ec <quorem+0xf8>
	...

0800ea10 <_dtoa_r>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	69c7      	ldr	r7, [r0, #28]
 800ea16:	b099      	sub	sp, #100	@ 0x64
 800ea18:	4683      	mov	fp, r0
 800ea1a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ea1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea22:	ec55 4b10 	vmov	r4, r5, d0
 800ea26:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea2a:	b97f      	cbnz	r7, 800ea4c <_dtoa_r+0x3c>
 800ea2c:	2010      	movs	r0, #16
 800ea2e:	f000 fdfd 	bl	800f62c <malloc>
 800ea32:	4602      	mov	r2, r0
 800ea34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ea38:	b920      	cbnz	r0, 800ea44 <_dtoa_r+0x34>
 800ea3a:	4ba7      	ldr	r3, [pc, #668]	@ (800ecd8 <_dtoa_r+0x2c8>)
 800ea3c:	21ef      	movs	r1, #239	@ 0xef
 800ea3e:	48a7      	ldr	r0, [pc, #668]	@ (800ecdc <_dtoa_r+0x2cc>)
 800ea40:	f002 fbba 	bl	80111b8 <__assert_func>
 800ea44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ea48:	6007      	str	r7, [r0, #0]
 800ea4a:	60c7      	str	r7, [r0, #12]
 800ea4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	b159      	cbz	r1, 800ea6c <_dtoa_r+0x5c>
 800ea54:	685a      	ldr	r2, [r3, #4]
 800ea56:	2301      	movs	r3, #1
 800ea58:	4658      	mov	r0, fp
 800ea5a:	4093      	lsls	r3, r2
 800ea5c:	604a      	str	r2, [r1, #4]
 800ea5e:	608b      	str	r3, [r1, #8]
 800ea60:	f000 feda 	bl	800f818 <_Bfree>
 800ea64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	1e2b      	subs	r3, r5, #0
 800ea6e:	bfb7      	itett	lt
 800ea70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ea74:	2300      	movge	r3, #0
 800ea76:	2201      	movlt	r2, #1
 800ea78:	9303      	strlt	r3, [sp, #12]
 800ea7a:	bfa8      	it	ge
 800ea7c:	6033      	strge	r3, [r6, #0]
 800ea7e:	9f03      	ldr	r7, [sp, #12]
 800ea80:	4b97      	ldr	r3, [pc, #604]	@ (800ece0 <_dtoa_r+0x2d0>)
 800ea82:	bfb8      	it	lt
 800ea84:	6032      	strlt	r2, [r6, #0]
 800ea86:	43bb      	bics	r3, r7
 800ea88:	d112      	bne.n	800eab0 <_dtoa_r+0xa0>
 800ea8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ea8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea96:	4323      	orrs	r3, r4
 800ea98:	f000 854c 	beq.w	800f534 <_dtoa_r+0xb24>
 800ea9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea9e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ecf4 <_dtoa_r+0x2e4>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f000 854e 	beq.w	800f544 <_dtoa_r+0xb34>
 800eaa8:	f10a 0303 	add.w	r3, sl, #3
 800eaac:	f000 bd48 	b.w	800f540 <_dtoa_r+0xb30>
 800eab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eab4:	2200      	movs	r2, #0
 800eab6:	2300      	movs	r3, #0
 800eab8:	ec51 0b17 	vmov	r0, r1, d7
 800eabc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eac0:	f7f2 f816 	bl	8000af0 <__aeabi_dcmpeq>
 800eac4:	4680      	mov	r8, r0
 800eac6:	b158      	cbz	r0, 800eae0 <_dtoa_r+0xd0>
 800eac8:	2301      	movs	r3, #1
 800eaca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eacc:	6013      	str	r3, [r2, #0]
 800eace:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ead0:	b113      	cbz	r3, 800ead8 <_dtoa_r+0xc8>
 800ead2:	4b84      	ldr	r3, [pc, #528]	@ (800ece4 <_dtoa_r+0x2d4>)
 800ead4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ead6:	6013      	str	r3, [r2, #0]
 800ead8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ecf8 <_dtoa_r+0x2e8>
 800eadc:	f000 bd32 	b.w	800f544 <_dtoa_r+0xb34>
 800eae0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eae4:	aa16      	add	r2, sp, #88	@ 0x58
 800eae6:	a917      	add	r1, sp, #92	@ 0x5c
 800eae8:	4658      	mov	r0, fp
 800eaea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eaee:	f001 fa41 	bl	800ff74 <__d2b>
 800eaf2:	4681      	mov	r9, r0
 800eaf4:	2e00      	cmp	r6, #0
 800eaf6:	d075      	beq.n	800ebe4 <_dtoa_r+0x1d4>
 800eaf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eafa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eafe:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eb02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb06:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eb0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb0e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eb12:	4619      	mov	r1, r3
 800eb14:	2200      	movs	r2, #0
 800eb16:	4b74      	ldr	r3, [pc, #464]	@ (800ece8 <_dtoa_r+0x2d8>)
 800eb18:	f7f1 fbca 	bl	80002b0 <__aeabi_dsub>
 800eb1c:	a368      	add	r3, pc, #416	@ (adr r3, 800ecc0 <_dtoa_r+0x2b0>)
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	f7f1 fd7d 	bl	8000620 <__aeabi_dmul>
 800eb26:	a368      	add	r3, pc, #416	@ (adr r3, 800ecc8 <_dtoa_r+0x2b8>)
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f7f1 fbc2 	bl	80002b4 <__adddf3>
 800eb30:	4604      	mov	r4, r0
 800eb32:	460d      	mov	r5, r1
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7f1 fd09 	bl	800054c <__aeabi_i2d>
 800eb3a:	a365      	add	r3, pc, #404	@ (adr r3, 800ecd0 <_dtoa_r+0x2c0>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	f7f1 fd6e 	bl	8000620 <__aeabi_dmul>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4620      	mov	r0, r4
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	f7f1 fbb2 	bl	80002b4 <__adddf3>
 800eb50:	4604      	mov	r4, r0
 800eb52:	460d      	mov	r5, r1
 800eb54:	f7f2 f814 	bl	8000b80 <__aeabi_d2iz>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4607      	mov	r7, r0
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4620      	mov	r0, r4
 800eb60:	4629      	mov	r1, r5
 800eb62:	f7f1 ffcf 	bl	8000b04 <__aeabi_dcmplt>
 800eb66:	b140      	cbz	r0, 800eb7a <_dtoa_r+0x16a>
 800eb68:	4638      	mov	r0, r7
 800eb6a:	f7f1 fcef 	bl	800054c <__aeabi_i2d>
 800eb6e:	4622      	mov	r2, r4
 800eb70:	462b      	mov	r3, r5
 800eb72:	f7f1 ffbd 	bl	8000af0 <__aeabi_dcmpeq>
 800eb76:	b900      	cbnz	r0, 800eb7a <_dtoa_r+0x16a>
 800eb78:	3f01      	subs	r7, #1
 800eb7a:	2f16      	cmp	r7, #22
 800eb7c:	d851      	bhi.n	800ec22 <_dtoa_r+0x212>
 800eb7e:	4b5b      	ldr	r3, [pc, #364]	@ (800ecec <_dtoa_r+0x2dc>)
 800eb80:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	f7f1 ffba 	bl	8000b04 <__aeabi_dcmplt>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d048      	beq.n	800ec26 <_dtoa_r+0x216>
 800eb94:	3f01      	subs	r7, #1
 800eb96:	2300      	movs	r3, #0
 800eb98:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb9a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eb9c:	1b9b      	subs	r3, r3, r6
 800eb9e:	1e5a      	subs	r2, r3, #1
 800eba0:	bf46      	itte	mi
 800eba2:	f1c3 0801 	rsbmi	r8, r3, #1
 800eba6:	2300      	movmi	r3, #0
 800eba8:	f04f 0800 	movpl.w	r8, #0
 800ebac:	9208      	str	r2, [sp, #32]
 800ebae:	bf48      	it	mi
 800ebb0:	9308      	strmi	r3, [sp, #32]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	db39      	blt.n	800ec2a <_dtoa_r+0x21a>
 800ebb6:	9b08      	ldr	r3, [sp, #32]
 800ebb8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ebba:	443b      	add	r3, r7
 800ebbc:	9308      	str	r3, [sp, #32]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc4:	2b09      	cmp	r3, #9
 800ebc6:	d864      	bhi.n	800ec92 <_dtoa_r+0x282>
 800ebc8:	2b05      	cmp	r3, #5
 800ebca:	bfc5      	ittet	gt
 800ebcc:	3b04      	subgt	r3, #4
 800ebce:	2400      	movgt	r4, #0
 800ebd0:	2401      	movle	r4, #1
 800ebd2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ebd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd6:	3b02      	subs	r3, #2
 800ebd8:	2b03      	cmp	r3, #3
 800ebda:	d865      	bhi.n	800eca8 <_dtoa_r+0x298>
 800ebdc:	e8df f003 	tbb	[pc, r3]
 800ebe0:	5737392c 	.word	0x5737392c
 800ebe4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ebe8:	441e      	add	r6, r3
 800ebea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ebee:	2b20      	cmp	r3, #32
 800ebf0:	bfc9      	itett	gt
 800ebf2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ebf6:	f1c3 0320 	rsble	r3, r3, #32
 800ebfa:	409f      	lslgt	r7, r3
 800ebfc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ec00:	bfd8      	it	le
 800ec02:	fa04 f003 	lslle.w	r0, r4, r3
 800ec06:	f106 36ff 	add.w	r6, r6, #4294967295
 800ec0a:	bfc4      	itt	gt
 800ec0c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec10:	ea47 0003 	orrgt.w	r0, r7, r3
 800ec14:	f7f1 fc8a 	bl	800052c <__aeabi_ui2d>
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ec1e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ec20:	e777      	b.n	800eb12 <_dtoa_r+0x102>
 800ec22:	2301      	movs	r3, #1
 800ec24:	e7b8      	b.n	800eb98 <_dtoa_r+0x188>
 800ec26:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec28:	e7b7      	b.n	800eb9a <_dtoa_r+0x18a>
 800ec2a:	427b      	negs	r3, r7
 800ec2c:	eba8 0807 	sub.w	r8, r8, r7
 800ec30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec32:	2300      	movs	r3, #0
 800ec34:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec36:	e7c4      	b.n	800ebc2 <_dtoa_r+0x1b2>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	dc35      	bgt.n	800ecae <_dtoa_r+0x29e>
 800ec42:	2301      	movs	r3, #1
 800ec44:	461a      	mov	r2, r3
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	9307      	str	r3, [sp, #28]
 800ec4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec4c:	e00b      	b.n	800ec66 <_dtoa_r+0x256>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e7f3      	b.n	800ec3a <_dtoa_r+0x22a>
 800ec52:	2300      	movs	r3, #0
 800ec54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec58:	18fb      	adds	r3, r7, r3
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	9307      	str	r3, [sp, #28]
 800ec62:	bfb8      	it	lt
 800ec64:	2301      	movlt	r3, #1
 800ec66:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	2204      	movs	r2, #4
 800ec6e:	f102 0514 	add.w	r5, r2, #20
 800ec72:	429d      	cmp	r5, r3
 800ec74:	d91f      	bls.n	800ecb6 <_dtoa_r+0x2a6>
 800ec76:	6041      	str	r1, [r0, #4]
 800ec78:	4658      	mov	r0, fp
 800ec7a:	f000 fd8d 	bl	800f798 <_Balloc>
 800ec7e:	4682      	mov	sl, r0
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d13b      	bne.n	800ecfc <_dtoa_r+0x2ec>
 800ec84:	4b1a      	ldr	r3, [pc, #104]	@ (800ecf0 <_dtoa_r+0x2e0>)
 800ec86:	4602      	mov	r2, r0
 800ec88:	f240 11af 	movw	r1, #431	@ 0x1af
 800ec8c:	e6d7      	b.n	800ea3e <_dtoa_r+0x2e>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e7e0      	b.n	800ec54 <_dtoa_r+0x244>
 800ec92:	2401      	movs	r4, #1
 800ec94:	2300      	movs	r3, #0
 800ec96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9e:	2200      	movs	r2, #0
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	9307      	str	r3, [sp, #28]
 800eca4:	2312      	movs	r3, #18
 800eca6:	e7d0      	b.n	800ec4a <_dtoa_r+0x23a>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecac:	e7f5      	b.n	800ec9a <_dtoa_r+0x28a>
 800ecae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	9307      	str	r3, [sp, #28]
 800ecb4:	e7d7      	b.n	800ec66 <_dtoa_r+0x256>
 800ecb6:	3101      	adds	r1, #1
 800ecb8:	0052      	lsls	r2, r2, #1
 800ecba:	e7d8      	b.n	800ec6e <_dtoa_r+0x25e>
 800ecbc:	f3af 8000 	nop.w
 800ecc0:	636f4361 	.word	0x636f4361
 800ecc4:	3fd287a7 	.word	0x3fd287a7
 800ecc8:	8b60c8b3 	.word	0x8b60c8b3
 800eccc:	3fc68a28 	.word	0x3fc68a28
 800ecd0:	509f79fb 	.word	0x509f79fb
 800ecd4:	3fd34413 	.word	0x3fd34413
 800ecd8:	08014c07 	.word	0x08014c07
 800ecdc:	08014c1e 	.word	0x08014c1e
 800ece0:	7ff00000 	.word	0x7ff00000
 800ece4:	08014bd2 	.word	0x08014bd2
 800ece8:	3ff80000 	.word	0x3ff80000
 800ecec:	08014d18 	.word	0x08014d18
 800ecf0:	08014c76 	.word	0x08014c76
 800ecf4:	08014c03 	.word	0x08014c03
 800ecf8:	08014bd1 	.word	0x08014bd1
 800ecfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed00:	6018      	str	r0, [r3, #0]
 800ed02:	9b07      	ldr	r3, [sp, #28]
 800ed04:	2b0e      	cmp	r3, #14
 800ed06:	f200 80a4 	bhi.w	800ee52 <_dtoa_r+0x442>
 800ed0a:	2c00      	cmp	r4, #0
 800ed0c:	f000 80a1 	beq.w	800ee52 <_dtoa_r+0x442>
 800ed10:	2f00      	cmp	r7, #0
 800ed12:	dd33      	ble.n	800ed7c <_dtoa_r+0x36c>
 800ed14:	f007 020f 	and.w	r2, r7, #15
 800ed18:	4bac      	ldr	r3, [pc, #688]	@ (800efcc <_dtoa_r+0x5bc>)
 800ed1a:	05f8      	lsls	r0, r7, #23
 800ed1c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ed20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed24:	ed93 7b00 	vldr	d7, [r3]
 800ed28:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ed2c:	d516      	bpl.n	800ed5c <_dtoa_r+0x34c>
 800ed2e:	4ba8      	ldr	r3, [pc, #672]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed30:	f004 040f 	and.w	r4, r4, #15
 800ed34:	2603      	movs	r6, #3
 800ed36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed3e:	f7f1 fd99 	bl	8000874 <__aeabi_ddiv>
 800ed42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed46:	4da2      	ldr	r5, [pc, #648]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed48:	b954      	cbnz	r4, 800ed60 <_dtoa_r+0x350>
 800ed4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed52:	f7f1 fd8f 	bl	8000874 <__aeabi_ddiv>
 800ed56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed5a:	e028      	b.n	800edae <_dtoa_r+0x39e>
 800ed5c:	2602      	movs	r6, #2
 800ed5e:	e7f2      	b.n	800ed46 <_dtoa_r+0x336>
 800ed60:	07e1      	lsls	r1, r4, #31
 800ed62:	d508      	bpl.n	800ed76 <_dtoa_r+0x366>
 800ed64:	3601      	adds	r6, #1
 800ed66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed6e:	f7f1 fc57 	bl	8000620 <__aeabi_dmul>
 800ed72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed76:	1064      	asrs	r4, r4, #1
 800ed78:	3508      	adds	r5, #8
 800ed7a:	e7e5      	b.n	800ed48 <_dtoa_r+0x338>
 800ed7c:	f000 80d2 	beq.w	800ef24 <_dtoa_r+0x514>
 800ed80:	427c      	negs	r4, r7
 800ed82:	4b92      	ldr	r3, [pc, #584]	@ (800efcc <_dtoa_r+0x5bc>)
 800ed84:	4d92      	ldr	r5, [pc, #584]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed86:	2602      	movs	r6, #2
 800ed88:	f004 020f 	and.w	r2, r4, #15
 800ed8c:	1124      	asrs	r4, r4, #4
 800ed8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	f7f1 fc41 	bl	8000620 <__aeabi_dmul>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eda4:	2c00      	cmp	r4, #0
 800eda6:	f040 80b2 	bne.w	800ef0e <_dtoa_r+0x4fe>
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1d3      	bne.n	800ed56 <_dtoa_r+0x346>
 800edae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f000 80b7 	beq.w	800ef28 <_dtoa_r+0x518>
 800edba:	2200      	movs	r2, #0
 800edbc:	4b85      	ldr	r3, [pc, #532]	@ (800efd4 <_dtoa_r+0x5c4>)
 800edbe:	4620      	mov	r0, r4
 800edc0:	4629      	mov	r1, r5
 800edc2:	f7f1 fe9f 	bl	8000b04 <__aeabi_dcmplt>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	f000 80ae 	beq.w	800ef28 <_dtoa_r+0x518>
 800edcc:	9b07      	ldr	r3, [sp, #28]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80aa 	beq.w	800ef28 <_dtoa_r+0x518>
 800edd4:	9b00      	ldr	r3, [sp, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dd37      	ble.n	800ee4a <_dtoa_r+0x43a>
 800edda:	1e7b      	subs	r3, r7, #1
 800eddc:	4620      	mov	r0, r4
 800edde:	2200      	movs	r2, #0
 800ede0:	4629      	mov	r1, r5
 800ede2:	9304      	str	r3, [sp, #16]
 800ede4:	3601      	adds	r6, #1
 800ede6:	4b7c      	ldr	r3, [pc, #496]	@ (800efd8 <_dtoa_r+0x5c8>)
 800ede8:	f7f1 fc1a 	bl	8000620 <__aeabi_dmul>
 800edec:	9c00      	ldr	r4, [sp, #0]
 800edee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 fbaa 	bl	800054c <__aeabi_i2d>
 800edf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edfc:	f7f1 fc10 	bl	8000620 <__aeabi_dmul>
 800ee00:	2200      	movs	r2, #0
 800ee02:	4b76      	ldr	r3, [pc, #472]	@ (800efdc <_dtoa_r+0x5cc>)
 800ee04:	f7f1 fa56 	bl	80002b4 <__adddf3>
 800ee08:	4605      	mov	r5, r0
 800ee0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	f040 808d 	bne.w	800ef2e <_dtoa_r+0x51e>
 800ee14:	2200      	movs	r2, #0
 800ee16:	4b72      	ldr	r3, [pc, #456]	@ (800efe0 <_dtoa_r+0x5d0>)
 800ee18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee1c:	f7f1 fa48 	bl	80002b0 <__aeabi_dsub>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee28:	462a      	mov	r2, r5
 800ee2a:	4633      	mov	r3, r6
 800ee2c:	f7f1 fe88 	bl	8000b40 <__aeabi_dcmpgt>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	f040 828b 	bne.w	800f34c <_dtoa_r+0x93c>
 800ee36:	462a      	mov	r2, r5
 800ee38:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ee3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee40:	f7f1 fe60 	bl	8000b04 <__aeabi_dcmplt>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	f040 8128 	bne.w	800f09a <_dtoa_r+0x68a>
 800ee4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ee4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ee52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f2c0 815a 	blt.w	800f10e <_dtoa_r+0x6fe>
 800ee5a:	2f0e      	cmp	r7, #14
 800ee5c:	f300 8157 	bgt.w	800f10e <_dtoa_r+0x6fe>
 800ee60:	4b5a      	ldr	r3, [pc, #360]	@ (800efcc <_dtoa_r+0x5bc>)
 800ee62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee66:	ed93 7b00 	vldr	d7, [r3]
 800ee6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	ed8d 7b00 	vstr	d7, [sp]
 800ee72:	da03      	bge.n	800ee7c <_dtoa_r+0x46c>
 800ee74:	9b07      	ldr	r3, [sp, #28]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f340 8101 	ble.w	800f07e <_dtoa_r+0x66e>
 800ee7c:	4656      	mov	r6, sl
 800ee7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ee82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee86:	4620      	mov	r0, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	f7f1 fcf3 	bl	8000874 <__aeabi_ddiv>
 800ee8e:	f7f1 fe77 	bl	8000b80 <__aeabi_d2iz>
 800ee92:	4680      	mov	r8, r0
 800ee94:	f7f1 fb5a 	bl	800054c <__aeabi_i2d>
 800ee98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee9c:	f7f1 fbc0 	bl	8000620 <__aeabi_dmul>
 800eea0:	4602      	mov	r2, r0
 800eea2:	4620      	mov	r0, r4
 800eea4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4629      	mov	r1, r5
 800eeac:	f7f1 fa00 	bl	80002b0 <__aeabi_dsub>
 800eeb0:	9d07      	ldr	r5, [sp, #28]
 800eeb2:	f806 4b01 	strb.w	r4, [r6], #1
 800eeb6:	eba6 040a 	sub.w	r4, r6, sl
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	42a5      	cmp	r5, r4
 800eec0:	f040 8117 	bne.w	800f0f2 <_dtoa_r+0x6e2>
 800eec4:	f7f1 f9f6 	bl	80002b4 <__adddf3>
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eed0:	f7f1 fe36 	bl	8000b40 <__aeabi_dcmpgt>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	f040 80f9 	bne.w	800f0cc <_dtoa_r+0x6bc>
 800eeda:	4620      	mov	r0, r4
 800eedc:	4629      	mov	r1, r5
 800eede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eee2:	f7f1 fe05 	bl	8000af0 <__aeabi_dcmpeq>
 800eee6:	b118      	cbz	r0, 800eef0 <_dtoa_r+0x4e0>
 800eee8:	f018 0f01 	tst.w	r8, #1
 800eeec:	f040 80ee 	bne.w	800f0cc <_dtoa_r+0x6bc>
 800eef0:	4649      	mov	r1, r9
 800eef2:	4658      	mov	r0, fp
 800eef4:	f000 fc90 	bl	800f818 <_Bfree>
 800eef8:	2300      	movs	r3, #0
 800eefa:	3701      	adds	r7, #1
 800eefc:	7033      	strb	r3, [r6, #0]
 800eefe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ef00:	601f      	str	r7, [r3, #0]
 800ef02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 831d 	beq.w	800f544 <_dtoa_r+0xb34>
 800ef0a:	601e      	str	r6, [r3, #0]
 800ef0c:	e31a      	b.n	800f544 <_dtoa_r+0xb34>
 800ef0e:	07e2      	lsls	r2, r4, #31
 800ef10:	d505      	bpl.n	800ef1e <_dtoa_r+0x50e>
 800ef12:	3601      	adds	r6, #1
 800ef14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef18:	f7f1 fb82 	bl	8000620 <__aeabi_dmul>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	1064      	asrs	r4, r4, #1
 800ef20:	3508      	adds	r5, #8
 800ef22:	e73f      	b.n	800eda4 <_dtoa_r+0x394>
 800ef24:	2602      	movs	r6, #2
 800ef26:	e742      	b.n	800edae <_dtoa_r+0x39e>
 800ef28:	9c07      	ldr	r4, [sp, #28]
 800ef2a:	9704      	str	r7, [sp, #16]
 800ef2c:	e761      	b.n	800edf2 <_dtoa_r+0x3e2>
 800ef2e:	4b27      	ldr	r3, [pc, #156]	@ (800efcc <_dtoa_r+0x5bc>)
 800ef30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef36:	4454      	add	r4, sl
 800ef38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	d053      	beq.n	800efe8 <_dtoa_r+0x5d8>
 800ef40:	2000      	movs	r0, #0
 800ef42:	4928      	ldr	r1, [pc, #160]	@ (800efe4 <_dtoa_r+0x5d4>)
 800ef44:	f7f1 fc96 	bl	8000874 <__aeabi_ddiv>
 800ef48:	4633      	mov	r3, r6
 800ef4a:	4656      	mov	r6, sl
 800ef4c:	462a      	mov	r2, r5
 800ef4e:	f7f1 f9af 	bl	80002b0 <__aeabi_dsub>
 800ef52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef5a:	f7f1 fe11 	bl	8000b80 <__aeabi_d2iz>
 800ef5e:	4605      	mov	r5, r0
 800ef60:	f7f1 faf4 	bl	800054c <__aeabi_i2d>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	3530      	adds	r5, #48	@ 0x30
 800ef6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef6e:	f7f1 f99f 	bl	80002b0 <__aeabi_dsub>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	f806 5b01 	strb.w	r5, [r6], #1
 800ef7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef82:	f7f1 fdbf 	bl	8000b04 <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d171      	bne.n	800f06e <_dtoa_r+0x65e>
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	4911      	ldr	r1, [pc, #68]	@ (800efd4 <_dtoa_r+0x5c4>)
 800ef8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef92:	f7f1 f98d 	bl	80002b0 <__aeabi_dsub>
 800ef96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef9a:	f7f1 fdb3 	bl	8000b04 <__aeabi_dcmplt>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	f040 8095 	bne.w	800f0ce <_dtoa_r+0x6be>
 800efa4:	42a6      	cmp	r6, r4
 800efa6:	f43f af50 	beq.w	800ee4a <_dtoa_r+0x43a>
 800efaa:	2200      	movs	r2, #0
 800efac:	4b0a      	ldr	r3, [pc, #40]	@ (800efd8 <_dtoa_r+0x5c8>)
 800efae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800efb2:	f7f1 fb35 	bl	8000620 <__aeabi_dmul>
 800efb6:	2200      	movs	r2, #0
 800efb8:	4b07      	ldr	r3, [pc, #28]	@ (800efd8 <_dtoa_r+0x5c8>)
 800efba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800efbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efc2:	f7f1 fb2d 	bl	8000620 <__aeabi_dmul>
 800efc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efca:	e7c4      	b.n	800ef56 <_dtoa_r+0x546>
 800efcc:	08014d18 	.word	0x08014d18
 800efd0:	08014cf0 	.word	0x08014cf0
 800efd4:	3ff00000 	.word	0x3ff00000
 800efd8:	40240000 	.word	0x40240000
 800efdc:	401c0000 	.word	0x401c0000
 800efe0:	40140000 	.word	0x40140000
 800efe4:	3fe00000 	.word	0x3fe00000
 800efe8:	4631      	mov	r1, r6
 800efea:	4656      	mov	r6, sl
 800efec:	4628      	mov	r0, r5
 800efee:	f7f1 fb17 	bl	8000620 <__aeabi_dmul>
 800eff2:	9415      	str	r4, [sp, #84]	@ 0x54
 800eff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800effc:	f7f1 fdc0 	bl	8000b80 <__aeabi_d2iz>
 800f000:	4605      	mov	r5, r0
 800f002:	f7f1 faa3 	bl	800054c <__aeabi_i2d>
 800f006:	4602      	mov	r2, r0
 800f008:	3530      	adds	r5, #48	@ 0x30
 800f00a:	460b      	mov	r3, r1
 800f00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f010:	f7f1 f94e 	bl	80002b0 <__aeabi_dsub>
 800f014:	f806 5b01 	strb.w	r5, [r6], #1
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	42a6      	cmp	r6, r4
 800f01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f022:	f04f 0200 	mov.w	r2, #0
 800f026:	d124      	bne.n	800f072 <_dtoa_r+0x662>
 800f028:	4bac      	ldr	r3, [pc, #688]	@ (800f2dc <_dtoa_r+0x8cc>)
 800f02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f02e:	f7f1 f941 	bl	80002b4 <__adddf3>
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03a:	f7f1 fd81 	bl	8000b40 <__aeabi_dcmpgt>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d145      	bne.n	800f0ce <_dtoa_r+0x6be>
 800f042:	2000      	movs	r0, #0
 800f044:	49a5      	ldr	r1, [pc, #660]	@ (800f2dc <_dtoa_r+0x8cc>)
 800f046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f04a:	f7f1 f931 	bl	80002b0 <__aeabi_dsub>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f056:	f7f1 fd55 	bl	8000b04 <__aeabi_dcmplt>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f43f aef5 	beq.w	800ee4a <_dtoa_r+0x43a>
 800f060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f062:	1e73      	subs	r3, r6, #1
 800f064:	9315      	str	r3, [sp, #84]	@ 0x54
 800f066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f06a:	2b30      	cmp	r3, #48	@ 0x30
 800f06c:	d0f8      	beq.n	800f060 <_dtoa_r+0x650>
 800f06e:	9f04      	ldr	r7, [sp, #16]
 800f070:	e73e      	b.n	800eef0 <_dtoa_r+0x4e0>
 800f072:	4b9b      	ldr	r3, [pc, #620]	@ (800f2e0 <_dtoa_r+0x8d0>)
 800f074:	f7f1 fad4 	bl	8000620 <__aeabi_dmul>
 800f078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f07c:	e7bc      	b.n	800eff8 <_dtoa_r+0x5e8>
 800f07e:	d10c      	bne.n	800f09a <_dtoa_r+0x68a>
 800f080:	2200      	movs	r2, #0
 800f082:	4b98      	ldr	r3, [pc, #608]	@ (800f2e4 <_dtoa_r+0x8d4>)
 800f084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f088:	f7f1 faca 	bl	8000620 <__aeabi_dmul>
 800f08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f090:	f7f1 fd4c 	bl	8000b2c <__aeabi_dcmpge>
 800f094:	2800      	cmp	r0, #0
 800f096:	f000 8157 	beq.w	800f348 <_dtoa_r+0x938>
 800f09a:	2400      	movs	r4, #0
 800f09c:	4625      	mov	r5, r4
 800f09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0a0:	4656      	mov	r6, sl
 800f0a2:	43db      	mvns	r3, r3
 800f0a4:	9304      	str	r3, [sp, #16]
 800f0a6:	2700      	movs	r7, #0
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 fbb4 	bl	800f818 <_Bfree>
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	d0dc      	beq.n	800f06e <_dtoa_r+0x65e>
 800f0b4:	b12f      	cbz	r7, 800f0c2 <_dtoa_r+0x6b2>
 800f0b6:	42af      	cmp	r7, r5
 800f0b8:	d003      	beq.n	800f0c2 <_dtoa_r+0x6b2>
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	4658      	mov	r0, fp
 800f0be:	f000 fbab 	bl	800f818 <_Bfree>
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	4658      	mov	r0, fp
 800f0c6:	f000 fba7 	bl	800f818 <_Bfree>
 800f0ca:	e7d0      	b.n	800f06e <_dtoa_r+0x65e>
 800f0cc:	9704      	str	r7, [sp, #16]
 800f0ce:	4633      	mov	r3, r6
 800f0d0:	461e      	mov	r6, r3
 800f0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0d6:	2a39      	cmp	r2, #57	@ 0x39
 800f0d8:	d107      	bne.n	800f0ea <_dtoa_r+0x6da>
 800f0da:	459a      	cmp	sl, r3
 800f0dc:	d1f8      	bne.n	800f0d0 <_dtoa_r+0x6c0>
 800f0de:	9a04      	ldr	r2, [sp, #16]
 800f0e0:	3201      	adds	r2, #1
 800f0e2:	9204      	str	r2, [sp, #16]
 800f0e4:	2230      	movs	r2, #48	@ 0x30
 800f0e6:	f88a 2000 	strb.w	r2, [sl]
 800f0ea:	781a      	ldrb	r2, [r3, #0]
 800f0ec:	3201      	adds	r2, #1
 800f0ee:	701a      	strb	r2, [r3, #0]
 800f0f0:	e7bd      	b.n	800f06e <_dtoa_r+0x65e>
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	4b7a      	ldr	r3, [pc, #488]	@ (800f2e0 <_dtoa_r+0x8d0>)
 800f0f6:	f7f1 fa93 	bl	8000620 <__aeabi_dmul>
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4604      	mov	r4, r0
 800f100:	460d      	mov	r5, r1
 800f102:	f7f1 fcf5 	bl	8000af0 <__aeabi_dcmpeq>
 800f106:	2800      	cmp	r0, #0
 800f108:	f43f aebb 	beq.w	800ee82 <_dtoa_r+0x472>
 800f10c:	e6f0      	b.n	800eef0 <_dtoa_r+0x4e0>
 800f10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f110:	2a00      	cmp	r2, #0
 800f112:	f000 80db 	beq.w	800f2cc <_dtoa_r+0x8bc>
 800f116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f118:	2a01      	cmp	r2, #1
 800f11a:	f300 80bf 	bgt.w	800f29c <_dtoa_r+0x88c>
 800f11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f120:	2a00      	cmp	r2, #0
 800f122:	f000 80b7 	beq.w	800f294 <_dtoa_r+0x884>
 800f126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f12a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f12c:	4646      	mov	r6, r8
 800f12e:	9a08      	ldr	r2, [sp, #32]
 800f130:	2101      	movs	r1, #1
 800f132:	4658      	mov	r0, fp
 800f134:	4498      	add	r8, r3
 800f136:	441a      	add	r2, r3
 800f138:	9208      	str	r2, [sp, #32]
 800f13a:	f000 fc6d 	bl	800fa18 <__i2b>
 800f13e:	4605      	mov	r5, r0
 800f140:	b15e      	cbz	r6, 800f15a <_dtoa_r+0x74a>
 800f142:	9b08      	ldr	r3, [sp, #32]
 800f144:	2b00      	cmp	r3, #0
 800f146:	dd08      	ble.n	800f15a <_dtoa_r+0x74a>
 800f148:	42b3      	cmp	r3, r6
 800f14a:	9a08      	ldr	r2, [sp, #32]
 800f14c:	bfa8      	it	ge
 800f14e:	4633      	movge	r3, r6
 800f150:	eba8 0803 	sub.w	r8, r8, r3
 800f154:	1af6      	subs	r6, r6, r3
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	9308      	str	r3, [sp, #32]
 800f15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f15c:	b1f3      	cbz	r3, 800f19c <_dtoa_r+0x78c>
 800f15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 80b7 	beq.w	800f2d4 <_dtoa_r+0x8c4>
 800f166:	b18c      	cbz	r4, 800f18c <_dtoa_r+0x77c>
 800f168:	4629      	mov	r1, r5
 800f16a:	4622      	mov	r2, r4
 800f16c:	4658      	mov	r0, fp
 800f16e:	f000 fd13 	bl	800fb98 <__pow5mult>
 800f172:	464a      	mov	r2, r9
 800f174:	4601      	mov	r1, r0
 800f176:	4605      	mov	r5, r0
 800f178:	4658      	mov	r0, fp
 800f17a:	f000 fc63 	bl	800fa44 <__multiply>
 800f17e:	4649      	mov	r1, r9
 800f180:	9004      	str	r0, [sp, #16]
 800f182:	4658      	mov	r0, fp
 800f184:	f000 fb48 	bl	800f818 <_Bfree>
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	4699      	mov	r9, r3
 800f18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f18e:	1b1a      	subs	r2, r3, r4
 800f190:	d004      	beq.n	800f19c <_dtoa_r+0x78c>
 800f192:	4649      	mov	r1, r9
 800f194:	4658      	mov	r0, fp
 800f196:	f000 fcff 	bl	800fb98 <__pow5mult>
 800f19a:	4681      	mov	r9, r0
 800f19c:	2101      	movs	r1, #1
 800f19e:	4658      	mov	r0, fp
 800f1a0:	f000 fc3a 	bl	800fa18 <__i2b>
 800f1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 81cf 	beq.w	800f54c <_dtoa_r+0xb3c>
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4658      	mov	r0, fp
 800f1b4:	f000 fcf0 	bl	800fb98 <__pow5mult>
 800f1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	f300 8095 	bgt.w	800f2ec <_dtoa_r+0x8dc>
 800f1c2:	9b02      	ldr	r3, [sp, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f040 8087 	bne.w	800f2d8 <_dtoa_r+0x8c8>
 800f1ca:	9b03      	ldr	r3, [sp, #12]
 800f1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f040 8089 	bne.w	800f2e8 <_dtoa_r+0x8d8>
 800f1d6:	9b03      	ldr	r3, [sp, #12]
 800f1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1dc:	0d1b      	lsrs	r3, r3, #20
 800f1de:	051b      	lsls	r3, r3, #20
 800f1e0:	b12b      	cbz	r3, 800f1ee <_dtoa_r+0x7de>
 800f1e2:	9b08      	ldr	r3, [sp, #32]
 800f1e4:	f108 0801 	add.w	r8, r8, #1
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	9308      	str	r3, [sp, #32]
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 81b0 	beq.w	800f558 <_dtoa_r+0xb48>
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1fe:	6918      	ldr	r0, [r3, #16]
 800f200:	f000 fbbe 	bl	800f980 <__hi0bits>
 800f204:	f1c0 0020 	rsb	r0, r0, #32
 800f208:	9b08      	ldr	r3, [sp, #32]
 800f20a:	4418      	add	r0, r3
 800f20c:	f010 001f 	ands.w	r0, r0, #31
 800f210:	d077      	beq.n	800f302 <_dtoa_r+0x8f2>
 800f212:	f1c0 0320 	rsb	r3, r0, #32
 800f216:	2b04      	cmp	r3, #4
 800f218:	dd6b      	ble.n	800f2f2 <_dtoa_r+0x8e2>
 800f21a:	f1c0 001c 	rsb	r0, r0, #28
 800f21e:	9b08      	ldr	r3, [sp, #32]
 800f220:	4480      	add	r8, r0
 800f222:	4403      	add	r3, r0
 800f224:	4406      	add	r6, r0
 800f226:	9308      	str	r3, [sp, #32]
 800f228:	f1b8 0f00 	cmp.w	r8, #0
 800f22c:	dd05      	ble.n	800f23a <_dtoa_r+0x82a>
 800f22e:	4649      	mov	r1, r9
 800f230:	4642      	mov	r2, r8
 800f232:	4658      	mov	r0, fp
 800f234:	f000 fd0a 	bl	800fc4c <__lshift>
 800f238:	4681      	mov	r9, r0
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd05      	ble.n	800f24c <_dtoa_r+0x83c>
 800f240:	4621      	mov	r1, r4
 800f242:	461a      	mov	r2, r3
 800f244:	4658      	mov	r0, fp
 800f246:	f000 fd01 	bl	800fc4c <__lshift>
 800f24a:	4604      	mov	r4, r0
 800f24c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d059      	beq.n	800f306 <_dtoa_r+0x8f6>
 800f252:	4621      	mov	r1, r4
 800f254:	4648      	mov	r0, r9
 800f256:	f000 fd65 	bl	800fd24 <__mcmp>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	da53      	bge.n	800f306 <_dtoa_r+0x8f6>
 800f25e:	1e7b      	subs	r3, r7, #1
 800f260:	4649      	mov	r1, r9
 800f262:	220a      	movs	r2, #10
 800f264:	4658      	mov	r0, fp
 800f266:	9304      	str	r3, [sp, #16]
 800f268:	2300      	movs	r3, #0
 800f26a:	f000 faf7 	bl	800f85c <__multadd>
 800f26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f270:	4681      	mov	r9, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	f000 8172 	beq.w	800f55c <_dtoa_r+0xb4c>
 800f278:	2300      	movs	r3, #0
 800f27a:	4629      	mov	r1, r5
 800f27c:	220a      	movs	r2, #10
 800f27e:	4658      	mov	r0, fp
 800f280:	f000 faec 	bl	800f85c <__multadd>
 800f284:	9b00      	ldr	r3, [sp, #0]
 800f286:	4605      	mov	r5, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	dc67      	bgt.n	800f35c <_dtoa_r+0x94c>
 800f28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28e:	2b02      	cmp	r3, #2
 800f290:	dc41      	bgt.n	800f316 <_dtoa_r+0x906>
 800f292:	e063      	b.n	800f35c <_dtoa_r+0x94c>
 800f294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f29a:	e746      	b.n	800f12a <_dtoa_r+0x71a>
 800f29c:	9b07      	ldr	r3, [sp, #28]
 800f29e:	1e5c      	subs	r4, r3, #1
 800f2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2a2:	42a3      	cmp	r3, r4
 800f2a4:	bfb7      	itett	lt
 800f2a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f2a8:	1b1c      	subge	r4, r3, r4
 800f2aa:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f2ac:	1ae3      	sublt	r3, r4, r3
 800f2ae:	bfbe      	ittt	lt
 800f2b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f2b2:	2400      	movlt	r4, #0
 800f2b4:	18d2      	addlt	r2, r2, r3
 800f2b6:	9b07      	ldr	r3, [sp, #28]
 800f2b8:	bfb8      	it	lt
 800f2ba:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	bfb5      	itete	lt
 800f2c0:	eba8 0603 	sublt.w	r6, r8, r3
 800f2c4:	4646      	movge	r6, r8
 800f2c6:	2300      	movlt	r3, #0
 800f2c8:	9b07      	ldrge	r3, [sp, #28]
 800f2ca:	e730      	b.n	800f12e <_dtoa_r+0x71e>
 800f2cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f2ce:	4646      	mov	r6, r8
 800f2d0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f2d2:	e735      	b.n	800f140 <_dtoa_r+0x730>
 800f2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2d6:	e75c      	b.n	800f192 <_dtoa_r+0x782>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e788      	b.n	800f1ee <_dtoa_r+0x7de>
 800f2dc:	3fe00000 	.word	0x3fe00000
 800f2e0:	40240000 	.word	0x40240000
 800f2e4:	40140000 	.word	0x40140000
 800f2e8:	9b02      	ldr	r3, [sp, #8]
 800f2ea:	e780      	b.n	800f1ee <_dtoa_r+0x7de>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2f0:	e782      	b.n	800f1f8 <_dtoa_r+0x7e8>
 800f2f2:	d099      	beq.n	800f228 <_dtoa_r+0x818>
 800f2f4:	331c      	adds	r3, #28
 800f2f6:	9a08      	ldr	r2, [sp, #32]
 800f2f8:	441a      	add	r2, r3
 800f2fa:	4498      	add	r8, r3
 800f2fc:	441e      	add	r6, r3
 800f2fe:	9208      	str	r2, [sp, #32]
 800f300:	e792      	b.n	800f228 <_dtoa_r+0x818>
 800f302:	4603      	mov	r3, r0
 800f304:	e7f6      	b.n	800f2f4 <_dtoa_r+0x8e4>
 800f306:	9b07      	ldr	r3, [sp, #28]
 800f308:	9704      	str	r7, [sp, #16]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	dc20      	bgt.n	800f350 <_dtoa_r+0x940>
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f312:	2b02      	cmp	r3, #2
 800f314:	dd1e      	ble.n	800f354 <_dtoa_r+0x944>
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f47f aec0 	bne.w	800f09e <_dtoa_r+0x68e>
 800f31e:	4621      	mov	r1, r4
 800f320:	2205      	movs	r2, #5
 800f322:	4658      	mov	r0, fp
 800f324:	f000 fa9a 	bl	800f85c <__multadd>
 800f328:	4601      	mov	r1, r0
 800f32a:	4604      	mov	r4, r0
 800f32c:	4648      	mov	r0, r9
 800f32e:	f000 fcf9 	bl	800fd24 <__mcmp>
 800f332:	2800      	cmp	r0, #0
 800f334:	f77f aeb3 	ble.w	800f09e <_dtoa_r+0x68e>
 800f338:	2331      	movs	r3, #49	@ 0x31
 800f33a:	4656      	mov	r6, sl
 800f33c:	f806 3b01 	strb.w	r3, [r6], #1
 800f340:	9b04      	ldr	r3, [sp, #16]
 800f342:	3301      	adds	r3, #1
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	e6ae      	b.n	800f0a6 <_dtoa_r+0x696>
 800f348:	9c07      	ldr	r4, [sp, #28]
 800f34a:	9704      	str	r7, [sp, #16]
 800f34c:	4625      	mov	r5, r4
 800f34e:	e7f3      	b.n	800f338 <_dtoa_r+0x928>
 800f350:	9b07      	ldr	r3, [sp, #28]
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8104 	beq.w	800f564 <_dtoa_r+0xb54>
 800f35c:	2e00      	cmp	r6, #0
 800f35e:	dd05      	ble.n	800f36c <_dtoa_r+0x95c>
 800f360:	4629      	mov	r1, r5
 800f362:	4632      	mov	r2, r6
 800f364:	4658      	mov	r0, fp
 800f366:	f000 fc71 	bl	800fc4c <__lshift>
 800f36a:	4605      	mov	r5, r0
 800f36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d05a      	beq.n	800f428 <_dtoa_r+0xa18>
 800f372:	6869      	ldr	r1, [r5, #4]
 800f374:	4658      	mov	r0, fp
 800f376:	f000 fa0f 	bl	800f798 <_Balloc>
 800f37a:	4606      	mov	r6, r0
 800f37c:	b928      	cbnz	r0, 800f38a <_dtoa_r+0x97a>
 800f37e:	4b84      	ldr	r3, [pc, #528]	@ (800f590 <_dtoa_r+0xb80>)
 800f380:	4602      	mov	r2, r0
 800f382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f386:	f7ff bb5a 	b.w	800ea3e <_dtoa_r+0x2e>
 800f38a:	692a      	ldr	r2, [r5, #16]
 800f38c:	f105 010c 	add.w	r1, r5, #12
 800f390:	300c      	adds	r0, #12
 800f392:	3202      	adds	r2, #2
 800f394:	0092      	lsls	r2, r2, #2
 800f396:	f7ff fa9a 	bl	800e8ce <memcpy>
 800f39a:	2201      	movs	r2, #1
 800f39c:	4631      	mov	r1, r6
 800f39e:	4658      	mov	r0, fp
 800f3a0:	f000 fc54 	bl	800fc4c <__lshift>
 800f3a4:	f10a 0301 	add.w	r3, sl, #1
 800f3a8:	462f      	mov	r7, r5
 800f3aa:	4605      	mov	r5, r0
 800f3ac:	9307      	str	r3, [sp, #28]
 800f3ae:	9b00      	ldr	r3, [sp, #0]
 800f3b0:	4453      	add	r3, sl
 800f3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3b4:	9b02      	ldr	r3, [sp, #8]
 800f3b6:	f003 0301 	and.w	r3, r3, #1
 800f3ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	4621      	mov	r1, r4
 800f3c0:	4648      	mov	r0, r9
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	f7ff fa95 	bl	800e8f4 <quorem>
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	9002      	str	r0, [sp, #8]
 800f3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	f000 fca6 	bl	800fd24 <__mcmp>
 800f3d8:	462a      	mov	r2, r5
 800f3da:	9008      	str	r0, [sp, #32]
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f000 fcbc 	bl	800fd5c <__mdiff>
 800f3e4:	68c2      	ldr	r2, [r0, #12]
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	bb02      	cbnz	r2, 800f42c <_dtoa_r+0xa1c>
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f000 fc99 	bl	800fd24 <__mcmp>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4658      	mov	r0, fp
 800f3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3fa:	f000 fa0d 	bl	800f818 <_Bfree>
 800f3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f402:	9e07      	ldr	r6, [sp, #28]
 800f404:	ea43 0102 	orr.w	r1, r3, r2
 800f408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f40a:	4319      	orrs	r1, r3
 800f40c:	d110      	bne.n	800f430 <_dtoa_r+0xa20>
 800f40e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f412:	d029      	beq.n	800f468 <_dtoa_r+0xa58>
 800f414:	9b08      	ldr	r3, [sp, #32]
 800f416:	2b00      	cmp	r3, #0
 800f418:	dd02      	ble.n	800f420 <_dtoa_r+0xa10>
 800f41a:	9b02      	ldr	r3, [sp, #8]
 800f41c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f420:	9b00      	ldr	r3, [sp, #0]
 800f422:	f883 8000 	strb.w	r8, [r3]
 800f426:	e63f      	b.n	800f0a8 <_dtoa_r+0x698>
 800f428:	4628      	mov	r0, r5
 800f42a:	e7bb      	b.n	800f3a4 <_dtoa_r+0x994>
 800f42c:	2201      	movs	r2, #1
 800f42e:	e7e1      	b.n	800f3f4 <_dtoa_r+0x9e4>
 800f430:	9b08      	ldr	r3, [sp, #32]
 800f432:	2b00      	cmp	r3, #0
 800f434:	db04      	blt.n	800f440 <_dtoa_r+0xa30>
 800f436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f438:	430b      	orrs	r3, r1
 800f43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f43c:	430b      	orrs	r3, r1
 800f43e:	d120      	bne.n	800f482 <_dtoa_r+0xa72>
 800f440:	2a00      	cmp	r2, #0
 800f442:	dded      	ble.n	800f420 <_dtoa_r+0xa10>
 800f444:	4649      	mov	r1, r9
 800f446:	2201      	movs	r2, #1
 800f448:	4658      	mov	r0, fp
 800f44a:	f000 fbff 	bl	800fc4c <__lshift>
 800f44e:	4621      	mov	r1, r4
 800f450:	4681      	mov	r9, r0
 800f452:	f000 fc67 	bl	800fd24 <__mcmp>
 800f456:	2800      	cmp	r0, #0
 800f458:	dc03      	bgt.n	800f462 <_dtoa_r+0xa52>
 800f45a:	d1e1      	bne.n	800f420 <_dtoa_r+0xa10>
 800f45c:	f018 0f01 	tst.w	r8, #1
 800f460:	d0de      	beq.n	800f420 <_dtoa_r+0xa10>
 800f462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f466:	d1d8      	bne.n	800f41a <_dtoa_r+0xa0a>
 800f468:	2339      	movs	r3, #57	@ 0x39
 800f46a:	9a00      	ldr	r2, [sp, #0]
 800f46c:	7013      	strb	r3, [r2, #0]
 800f46e:	4633      	mov	r3, r6
 800f470:	461e      	mov	r6, r3
 800f472:	3b01      	subs	r3, #1
 800f474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f478:	2a39      	cmp	r2, #57	@ 0x39
 800f47a:	d052      	beq.n	800f522 <_dtoa_r+0xb12>
 800f47c:	3201      	adds	r2, #1
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	e612      	b.n	800f0a8 <_dtoa_r+0x698>
 800f482:	2a00      	cmp	r2, #0
 800f484:	dd07      	ble.n	800f496 <_dtoa_r+0xa86>
 800f486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f48a:	d0ed      	beq.n	800f468 <_dtoa_r+0xa58>
 800f48c:	f108 0301 	add.w	r3, r8, #1
 800f490:	9a00      	ldr	r2, [sp, #0]
 800f492:	7013      	strb	r3, [r2, #0]
 800f494:	e608      	b.n	800f0a8 <_dtoa_r+0x698>
 800f496:	9b07      	ldr	r3, [sp, #28]
 800f498:	9a07      	ldr	r2, [sp, #28]
 800f49a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d028      	beq.n	800f4f6 <_dtoa_r+0xae6>
 800f4a4:	4649      	mov	r1, r9
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	4658      	mov	r0, fp
 800f4ac:	f000 f9d6 	bl	800f85c <__multadd>
 800f4b0:	42af      	cmp	r7, r5
 800f4b2:	4681      	mov	r9, r0
 800f4b4:	f04f 0300 	mov.w	r3, #0
 800f4b8:	f04f 020a 	mov.w	r2, #10
 800f4bc:	4639      	mov	r1, r7
 800f4be:	4658      	mov	r0, fp
 800f4c0:	d107      	bne.n	800f4d2 <_dtoa_r+0xac2>
 800f4c2:	f000 f9cb 	bl	800f85c <__multadd>
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	9b07      	ldr	r3, [sp, #28]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	9307      	str	r3, [sp, #28]
 800f4d0:	e774      	b.n	800f3bc <_dtoa_r+0x9ac>
 800f4d2:	f000 f9c3 	bl	800f85c <__multadd>
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	4607      	mov	r7, r0
 800f4da:	2300      	movs	r3, #0
 800f4dc:	220a      	movs	r2, #10
 800f4de:	4658      	mov	r0, fp
 800f4e0:	f000 f9bc 	bl	800f85c <__multadd>
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	e7f0      	b.n	800f4ca <_dtoa_r+0xaba>
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	2700      	movs	r7, #0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	bfcc      	ite	gt
 800f4f0:	461e      	movgt	r6, r3
 800f4f2:	2601      	movle	r6, #1
 800f4f4:	4456      	add	r6, sl
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	4658      	mov	r0, fp
 800f4fc:	f000 fba6 	bl	800fc4c <__lshift>
 800f500:	4621      	mov	r1, r4
 800f502:	4681      	mov	r9, r0
 800f504:	f000 fc0e 	bl	800fd24 <__mcmp>
 800f508:	2800      	cmp	r0, #0
 800f50a:	dcb0      	bgt.n	800f46e <_dtoa_r+0xa5e>
 800f50c:	d102      	bne.n	800f514 <_dtoa_r+0xb04>
 800f50e:	f018 0f01 	tst.w	r8, #1
 800f512:	d1ac      	bne.n	800f46e <_dtoa_r+0xa5e>
 800f514:	4633      	mov	r3, r6
 800f516:	461e      	mov	r6, r3
 800f518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f51c:	2a30      	cmp	r2, #48	@ 0x30
 800f51e:	d0fa      	beq.n	800f516 <_dtoa_r+0xb06>
 800f520:	e5c2      	b.n	800f0a8 <_dtoa_r+0x698>
 800f522:	459a      	cmp	sl, r3
 800f524:	d1a4      	bne.n	800f470 <_dtoa_r+0xa60>
 800f526:	9b04      	ldr	r3, [sp, #16]
 800f528:	3301      	adds	r3, #1
 800f52a:	9304      	str	r3, [sp, #16]
 800f52c:	2331      	movs	r3, #49	@ 0x31
 800f52e:	f88a 3000 	strb.w	r3, [sl]
 800f532:	e5b9      	b.n	800f0a8 <_dtoa_r+0x698>
 800f534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f594 <_dtoa_r+0xb84>
 800f53a:	b11b      	cbz	r3, 800f544 <_dtoa_r+0xb34>
 800f53c:	f10a 0308 	add.w	r3, sl, #8
 800f540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	4650      	mov	r0, sl
 800f546:	b019      	add	sp, #100	@ 0x64
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f54e:	2b01      	cmp	r3, #1
 800f550:	f77f ae37 	ble.w	800f1c2 <_dtoa_r+0x7b2>
 800f554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f556:	930a      	str	r3, [sp, #40]	@ 0x28
 800f558:	2001      	movs	r0, #1
 800f55a:	e655      	b.n	800f208 <_dtoa_r+0x7f8>
 800f55c:	9b00      	ldr	r3, [sp, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f77f aed6 	ble.w	800f310 <_dtoa_r+0x900>
 800f564:	4656      	mov	r6, sl
 800f566:	4621      	mov	r1, r4
 800f568:	4648      	mov	r0, r9
 800f56a:	f7ff f9c3 	bl	800e8f4 <quorem>
 800f56e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f572:	9b00      	ldr	r3, [sp, #0]
 800f574:	f806 8b01 	strb.w	r8, [r6], #1
 800f578:	eba6 020a 	sub.w	r2, r6, sl
 800f57c:	4293      	cmp	r3, r2
 800f57e:	ddb3      	ble.n	800f4e8 <_dtoa_r+0xad8>
 800f580:	4649      	mov	r1, r9
 800f582:	2300      	movs	r3, #0
 800f584:	220a      	movs	r2, #10
 800f586:	4658      	mov	r0, fp
 800f588:	f000 f968 	bl	800f85c <__multadd>
 800f58c:	4681      	mov	r9, r0
 800f58e:	e7ea      	b.n	800f566 <_dtoa_r+0xb56>
 800f590:	08014c76 	.word	0x08014c76
 800f594:	08014bfa 	.word	0x08014bfa

0800f598 <_free_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4605      	mov	r5, r0
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d041      	beq.n	800f624 <_free_r+0x8c>
 800f5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a4:	1f0c      	subs	r4, r1, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bfb8      	it	lt
 800f5aa:	18e4      	addlt	r4, r4, r3
 800f5ac:	f000 f8e8 	bl	800f780 <__malloc_lock>
 800f5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f628 <_free_r+0x90>)
 800f5b2:	6813      	ldr	r3, [r2, #0]
 800f5b4:	b933      	cbnz	r3, 800f5c4 <_free_r+0x2c>
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	6014      	str	r4, [r2, #0]
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5c0:	f000 b8e4 	b.w	800f78c <__malloc_unlock>
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	d908      	bls.n	800f5da <_free_r+0x42>
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	1821      	adds	r1, r4, r0
 800f5cc:	428b      	cmp	r3, r1
 800f5ce:	bf01      	itttt	eq
 800f5d0:	6819      	ldreq	r1, [r3, #0]
 800f5d2:	685b      	ldreq	r3, [r3, #4]
 800f5d4:	1809      	addeq	r1, r1, r0
 800f5d6:	6021      	streq	r1, [r4, #0]
 800f5d8:	e7ed      	b.n	800f5b6 <_free_r+0x1e>
 800f5da:	461a      	mov	r2, r3
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	b10b      	cbz	r3, 800f5e4 <_free_r+0x4c>
 800f5e0:	42a3      	cmp	r3, r4
 800f5e2:	d9fa      	bls.n	800f5da <_free_r+0x42>
 800f5e4:	6811      	ldr	r1, [r2, #0]
 800f5e6:	1850      	adds	r0, r2, r1
 800f5e8:	42a0      	cmp	r0, r4
 800f5ea:	d10b      	bne.n	800f604 <_free_r+0x6c>
 800f5ec:	6820      	ldr	r0, [r4, #0]
 800f5ee:	4401      	add	r1, r0
 800f5f0:	1850      	adds	r0, r2, r1
 800f5f2:	6011      	str	r1, [r2, #0]
 800f5f4:	4283      	cmp	r3, r0
 800f5f6:	d1e0      	bne.n	800f5ba <_free_r+0x22>
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	4408      	add	r0, r1
 800f5fe:	6053      	str	r3, [r2, #4]
 800f600:	6010      	str	r0, [r2, #0]
 800f602:	e7da      	b.n	800f5ba <_free_r+0x22>
 800f604:	d902      	bls.n	800f60c <_free_r+0x74>
 800f606:	230c      	movs	r3, #12
 800f608:	602b      	str	r3, [r5, #0]
 800f60a:	e7d6      	b.n	800f5ba <_free_r+0x22>
 800f60c:	6820      	ldr	r0, [r4, #0]
 800f60e:	1821      	adds	r1, r4, r0
 800f610:	428b      	cmp	r3, r1
 800f612:	bf02      	ittt	eq
 800f614:	6819      	ldreq	r1, [r3, #0]
 800f616:	685b      	ldreq	r3, [r3, #4]
 800f618:	1809      	addeq	r1, r1, r0
 800f61a:	6063      	str	r3, [r4, #4]
 800f61c:	bf08      	it	eq
 800f61e:	6021      	streq	r1, [r4, #0]
 800f620:	6054      	str	r4, [r2, #4]
 800f622:	e7ca      	b.n	800f5ba <_free_r+0x22>
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	2003b3c0 	.word	0x2003b3c0

0800f62c <malloc>:
 800f62c:	4b02      	ldr	r3, [pc, #8]	@ (800f638 <malloc+0xc>)
 800f62e:	4601      	mov	r1, r0
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	f000 b825 	b.w	800f680 <_malloc_r>
 800f636:	bf00      	nop
 800f638:	20000034 	.word	0x20000034

0800f63c <sbrk_aligned>:
 800f63c:	b570      	push	{r4, r5, r6, lr}
 800f63e:	4e0f      	ldr	r6, [pc, #60]	@ (800f67c <sbrk_aligned+0x40>)
 800f640:	460c      	mov	r4, r1
 800f642:	4605      	mov	r5, r0
 800f644:	6831      	ldr	r1, [r6, #0]
 800f646:	b911      	cbnz	r1, 800f64e <sbrk_aligned+0x12>
 800f648:	f001 fd9c 	bl	8011184 <_sbrk_r>
 800f64c:	6030      	str	r0, [r6, #0]
 800f64e:	4621      	mov	r1, r4
 800f650:	4628      	mov	r0, r5
 800f652:	f001 fd97 	bl	8011184 <_sbrk_r>
 800f656:	1c43      	adds	r3, r0, #1
 800f658:	d103      	bne.n	800f662 <sbrk_aligned+0x26>
 800f65a:	f04f 34ff 	mov.w	r4, #4294967295
 800f65e:	4620      	mov	r0, r4
 800f660:	bd70      	pop	{r4, r5, r6, pc}
 800f662:	1cc4      	adds	r4, r0, #3
 800f664:	f024 0403 	bic.w	r4, r4, #3
 800f668:	42a0      	cmp	r0, r4
 800f66a:	d0f8      	beq.n	800f65e <sbrk_aligned+0x22>
 800f66c:	1a21      	subs	r1, r4, r0
 800f66e:	4628      	mov	r0, r5
 800f670:	f001 fd88 	bl	8011184 <_sbrk_r>
 800f674:	3001      	adds	r0, #1
 800f676:	d1f2      	bne.n	800f65e <sbrk_aligned+0x22>
 800f678:	e7ef      	b.n	800f65a <sbrk_aligned+0x1e>
 800f67a:	bf00      	nop
 800f67c:	2003b3bc 	.word	0x2003b3bc

0800f680 <_malloc_r>:
 800f680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f684:	1ccd      	adds	r5, r1, #3
 800f686:	4606      	mov	r6, r0
 800f688:	f025 0503 	bic.w	r5, r5, #3
 800f68c:	3508      	adds	r5, #8
 800f68e:	2d0c      	cmp	r5, #12
 800f690:	bf38      	it	cc
 800f692:	250c      	movcc	r5, #12
 800f694:	2d00      	cmp	r5, #0
 800f696:	db01      	blt.n	800f69c <_malloc_r+0x1c>
 800f698:	42a9      	cmp	r1, r5
 800f69a:	d904      	bls.n	800f6a6 <_malloc_r+0x26>
 800f69c:	230c      	movs	r3, #12
 800f69e:	6033      	str	r3, [r6, #0]
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f77c <_malloc_r+0xfc>
 800f6aa:	f000 f869 	bl	800f780 <__malloc_lock>
 800f6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	bb44      	cbnz	r4, 800f708 <_malloc_r+0x88>
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f7ff ffbf 	bl	800f63c <sbrk_aligned>
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	d158      	bne.n	800f776 <_malloc_r+0xf6>
 800f6c4:	f8d8 4000 	ldr.w	r4, [r8]
 800f6c8:	4627      	mov	r7, r4
 800f6ca:	2f00      	cmp	r7, #0
 800f6cc:	d143      	bne.n	800f756 <_malloc_r+0xd6>
 800f6ce:	2c00      	cmp	r4, #0
 800f6d0:	d04b      	beq.n	800f76a <_malloc_r+0xea>
 800f6d2:	6823      	ldr	r3, [r4, #0]
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	eb04 0903 	add.w	r9, r4, r3
 800f6dc:	f001 fd52 	bl	8011184 <_sbrk_r>
 800f6e0:	4581      	cmp	r9, r0
 800f6e2:	d142      	bne.n	800f76a <_malloc_r+0xea>
 800f6e4:	6821      	ldr	r1, [r4, #0]
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	1a6d      	subs	r5, r5, r1
 800f6ea:	4629      	mov	r1, r5
 800f6ec:	f7ff ffa6 	bl	800f63c <sbrk_aligned>
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	d03a      	beq.n	800f76a <_malloc_r+0xea>
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	442b      	add	r3, r5
 800f6f8:	6023      	str	r3, [r4, #0]
 800f6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	bb62      	cbnz	r2, 800f75c <_malloc_r+0xdc>
 800f702:	f8c8 7000 	str.w	r7, [r8]
 800f706:	e00f      	b.n	800f728 <_malloc_r+0xa8>
 800f708:	6822      	ldr	r2, [r4, #0]
 800f70a:	1b52      	subs	r2, r2, r5
 800f70c:	d420      	bmi.n	800f750 <_malloc_r+0xd0>
 800f70e:	2a0b      	cmp	r2, #11
 800f710:	d917      	bls.n	800f742 <_malloc_r+0xc2>
 800f712:	1961      	adds	r1, r4, r5
 800f714:	42a3      	cmp	r3, r4
 800f716:	6025      	str	r5, [r4, #0]
 800f718:	bf18      	it	ne
 800f71a:	6059      	strne	r1, [r3, #4]
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	bf08      	it	eq
 800f720:	f8c8 1000 	streq.w	r1, [r8]
 800f724:	5162      	str	r2, [r4, r5]
 800f726:	604b      	str	r3, [r1, #4]
 800f728:	4630      	mov	r0, r6
 800f72a:	f000 f82f 	bl	800f78c <__malloc_unlock>
 800f72e:	f104 000b 	add.w	r0, r4, #11
 800f732:	1d23      	adds	r3, r4, #4
 800f734:	f020 0007 	bic.w	r0, r0, #7
 800f738:	1ac2      	subs	r2, r0, r3
 800f73a:	bf1c      	itt	ne
 800f73c:	1a1b      	subne	r3, r3, r0
 800f73e:	50a3      	strne	r3, [r4, r2]
 800f740:	e7af      	b.n	800f6a2 <_malloc_r+0x22>
 800f742:	6862      	ldr	r2, [r4, #4]
 800f744:	42a3      	cmp	r3, r4
 800f746:	bf0c      	ite	eq
 800f748:	f8c8 2000 	streq.w	r2, [r8]
 800f74c:	605a      	strne	r2, [r3, #4]
 800f74e:	e7eb      	b.n	800f728 <_malloc_r+0xa8>
 800f750:	4623      	mov	r3, r4
 800f752:	6864      	ldr	r4, [r4, #4]
 800f754:	e7ae      	b.n	800f6b4 <_malloc_r+0x34>
 800f756:	463c      	mov	r4, r7
 800f758:	687f      	ldr	r7, [r7, #4]
 800f75a:	e7b6      	b.n	800f6ca <_malloc_r+0x4a>
 800f75c:	461a      	mov	r2, r3
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	42a3      	cmp	r3, r4
 800f762:	d1fb      	bne.n	800f75c <_malloc_r+0xdc>
 800f764:	2300      	movs	r3, #0
 800f766:	6053      	str	r3, [r2, #4]
 800f768:	e7de      	b.n	800f728 <_malloc_r+0xa8>
 800f76a:	230c      	movs	r3, #12
 800f76c:	4630      	mov	r0, r6
 800f76e:	6033      	str	r3, [r6, #0]
 800f770:	f000 f80c 	bl	800f78c <__malloc_unlock>
 800f774:	e794      	b.n	800f6a0 <_malloc_r+0x20>
 800f776:	6005      	str	r5, [r0, #0]
 800f778:	e7d6      	b.n	800f728 <_malloc_r+0xa8>
 800f77a:	bf00      	nop
 800f77c:	2003b3c0 	.word	0x2003b3c0

0800f780 <__malloc_lock>:
 800f780:	4801      	ldr	r0, [pc, #4]	@ (800f788 <__malloc_lock+0x8>)
 800f782:	f7ff b894 	b.w	800e8ae <__retarget_lock_acquire_recursive>
 800f786:	bf00      	nop
 800f788:	2003b3b8 	.word	0x2003b3b8

0800f78c <__malloc_unlock>:
 800f78c:	4801      	ldr	r0, [pc, #4]	@ (800f794 <__malloc_unlock+0x8>)
 800f78e:	f7ff b88f 	b.w	800e8b0 <__retarget_lock_release_recursive>
 800f792:	bf00      	nop
 800f794:	2003b3b8 	.word	0x2003b3b8

0800f798 <_Balloc>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	69c6      	ldr	r6, [r0, #28]
 800f79c:	4604      	mov	r4, r0
 800f79e:	460d      	mov	r5, r1
 800f7a0:	b976      	cbnz	r6, 800f7c0 <_Balloc+0x28>
 800f7a2:	2010      	movs	r0, #16
 800f7a4:	f7ff ff42 	bl	800f62c <malloc>
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	61e0      	str	r0, [r4, #28]
 800f7ac:	b920      	cbnz	r0, 800f7b8 <_Balloc+0x20>
 800f7ae:	4b18      	ldr	r3, [pc, #96]	@ (800f810 <_Balloc+0x78>)
 800f7b0:	216b      	movs	r1, #107	@ 0x6b
 800f7b2:	4818      	ldr	r0, [pc, #96]	@ (800f814 <_Balloc+0x7c>)
 800f7b4:	f001 fd00 	bl	80111b8 <__assert_func>
 800f7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7bc:	6006      	str	r6, [r0, #0]
 800f7be:	60c6      	str	r6, [r0, #12]
 800f7c0:	69e6      	ldr	r6, [r4, #28]
 800f7c2:	68f3      	ldr	r3, [r6, #12]
 800f7c4:	b183      	cbz	r3, 800f7e8 <_Balloc+0x50>
 800f7c6:	69e3      	ldr	r3, [r4, #28]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7ce:	b9b8      	cbnz	r0, 800f800 <_Balloc+0x68>
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	fa01 f605 	lsl.w	r6, r1, r5
 800f7d8:	1d72      	adds	r2, r6, #5
 800f7da:	0092      	lsls	r2, r2, #2
 800f7dc:	f001 fd0a 	bl	80111f4 <_calloc_r>
 800f7e0:	b160      	cbz	r0, 800f7fc <_Balloc+0x64>
 800f7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7e6:	e00e      	b.n	800f806 <_Balloc+0x6e>
 800f7e8:	2221      	movs	r2, #33	@ 0x21
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f001 fd01 	bl	80111f4 <_calloc_r>
 800f7f2:	69e3      	ldr	r3, [r4, #28]
 800f7f4:	60f0      	str	r0, [r6, #12]
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e4      	bne.n	800f7c6 <_Balloc+0x2e>
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	6802      	ldr	r2, [r0, #0]
 800f802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f806:	2300      	movs	r3, #0
 800f808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f80c:	e7f7      	b.n	800f7fe <_Balloc+0x66>
 800f80e:	bf00      	nop
 800f810:	08014c07 	.word	0x08014c07
 800f814:	08014c87 	.word	0x08014c87

0800f818 <_Bfree>:
 800f818:	b570      	push	{r4, r5, r6, lr}
 800f81a:	69c6      	ldr	r6, [r0, #28]
 800f81c:	4605      	mov	r5, r0
 800f81e:	460c      	mov	r4, r1
 800f820:	b976      	cbnz	r6, 800f840 <_Bfree+0x28>
 800f822:	2010      	movs	r0, #16
 800f824:	f7ff ff02 	bl	800f62c <malloc>
 800f828:	4602      	mov	r2, r0
 800f82a:	61e8      	str	r0, [r5, #28]
 800f82c:	b920      	cbnz	r0, 800f838 <_Bfree+0x20>
 800f82e:	4b09      	ldr	r3, [pc, #36]	@ (800f854 <_Bfree+0x3c>)
 800f830:	218f      	movs	r1, #143	@ 0x8f
 800f832:	4809      	ldr	r0, [pc, #36]	@ (800f858 <_Bfree+0x40>)
 800f834:	f001 fcc0 	bl	80111b8 <__assert_func>
 800f838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f83c:	6006      	str	r6, [r0, #0]
 800f83e:	60c6      	str	r6, [r0, #12]
 800f840:	b13c      	cbz	r4, 800f852 <_Bfree+0x3a>
 800f842:	69eb      	ldr	r3, [r5, #28]
 800f844:	6862      	ldr	r2, [r4, #4]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f84c:	6021      	str	r1, [r4, #0]
 800f84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	08014c07 	.word	0x08014c07
 800f858:	08014c87 	.word	0x08014c87

0800f85c <__multadd>:
 800f85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f860:	f101 0c14 	add.w	ip, r1, #20
 800f864:	4607      	mov	r7, r0
 800f866:	460c      	mov	r4, r1
 800f868:	461e      	mov	r6, r3
 800f86a:	690d      	ldr	r5, [r1, #16]
 800f86c:	2000      	movs	r0, #0
 800f86e:	f8dc 3000 	ldr.w	r3, [ip]
 800f872:	3001      	adds	r0, #1
 800f874:	b299      	uxth	r1, r3
 800f876:	4285      	cmp	r5, r0
 800f878:	fb02 6101 	mla	r1, r2, r1, r6
 800f87c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f880:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f884:	b289      	uxth	r1, r1
 800f886:	fb02 3306 	mla	r3, r2, r6, r3
 800f88a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f892:	f84c 1b04 	str.w	r1, [ip], #4
 800f896:	dcea      	bgt.n	800f86e <__multadd+0x12>
 800f898:	b30e      	cbz	r6, 800f8de <__multadd+0x82>
 800f89a:	68a3      	ldr	r3, [r4, #8]
 800f89c:	42ab      	cmp	r3, r5
 800f89e:	dc19      	bgt.n	800f8d4 <__multadd+0x78>
 800f8a0:	6861      	ldr	r1, [r4, #4]
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	3101      	adds	r1, #1
 800f8a6:	f7ff ff77 	bl	800f798 <_Balloc>
 800f8aa:	4680      	mov	r8, r0
 800f8ac:	b928      	cbnz	r0, 800f8ba <__multadd+0x5e>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f8e4 <__multadd+0x88>)
 800f8b2:	21ba      	movs	r1, #186	@ 0xba
 800f8b4:	480c      	ldr	r0, [pc, #48]	@ (800f8e8 <__multadd+0x8c>)
 800f8b6:	f001 fc7f 	bl	80111b8 <__assert_func>
 800f8ba:	6922      	ldr	r2, [r4, #16]
 800f8bc:	f104 010c 	add.w	r1, r4, #12
 800f8c0:	300c      	adds	r0, #12
 800f8c2:	3202      	adds	r2, #2
 800f8c4:	0092      	lsls	r2, r2, #2
 800f8c6:	f7ff f802 	bl	800e8ce <memcpy>
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	4644      	mov	r4, r8
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7ff ffa2 	bl	800f818 <_Bfree>
 800f8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f8d8:	3501      	adds	r5, #1
 800f8da:	615e      	str	r6, [r3, #20]
 800f8dc:	6125      	str	r5, [r4, #16]
 800f8de:	4620      	mov	r0, r4
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	08014c76 	.word	0x08014c76
 800f8e8:	08014c87 	.word	0x08014c87

0800f8ec <__s2b>:
 800f8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f0:	4615      	mov	r5, r2
 800f8f2:	461f      	mov	r7, r3
 800f8f4:	2209      	movs	r2, #9
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	460c      	mov	r4, r1
 800f8fa:	4606      	mov	r6, r0
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800f902:	2201      	movs	r2, #1
 800f904:	429a      	cmp	r2, r3
 800f906:	db09      	blt.n	800f91c <__s2b+0x30>
 800f908:	4630      	mov	r0, r6
 800f90a:	f7ff ff45 	bl	800f798 <_Balloc>
 800f90e:	b940      	cbnz	r0, 800f922 <__s2b+0x36>
 800f910:	4602      	mov	r2, r0
 800f912:	4b19      	ldr	r3, [pc, #100]	@ (800f978 <__s2b+0x8c>)
 800f914:	21d3      	movs	r1, #211	@ 0xd3
 800f916:	4819      	ldr	r0, [pc, #100]	@ (800f97c <__s2b+0x90>)
 800f918:	f001 fc4e 	bl	80111b8 <__assert_func>
 800f91c:	0052      	lsls	r2, r2, #1
 800f91e:	3101      	adds	r1, #1
 800f920:	e7f0      	b.n	800f904 <__s2b+0x18>
 800f922:	9b08      	ldr	r3, [sp, #32]
 800f924:	2d09      	cmp	r5, #9
 800f926:	6143      	str	r3, [r0, #20]
 800f928:	f04f 0301 	mov.w	r3, #1
 800f92c:	6103      	str	r3, [r0, #16]
 800f92e:	dd16      	ble.n	800f95e <__s2b+0x72>
 800f930:	f104 0909 	add.w	r9, r4, #9
 800f934:	442c      	add	r4, r5
 800f936:	46c8      	mov	r8, r9
 800f938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f93c:	4601      	mov	r1, r0
 800f93e:	220a      	movs	r2, #10
 800f940:	4630      	mov	r0, r6
 800f942:	3b30      	subs	r3, #48	@ 0x30
 800f944:	f7ff ff8a 	bl	800f85c <__multadd>
 800f948:	45a0      	cmp	r8, r4
 800f94a:	d1f5      	bne.n	800f938 <__s2b+0x4c>
 800f94c:	f1a5 0408 	sub.w	r4, r5, #8
 800f950:	444c      	add	r4, r9
 800f952:	1b2d      	subs	r5, r5, r4
 800f954:	1963      	adds	r3, r4, r5
 800f956:	42bb      	cmp	r3, r7
 800f958:	db04      	blt.n	800f964 <__s2b+0x78>
 800f95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f95e:	340a      	adds	r4, #10
 800f960:	2509      	movs	r5, #9
 800f962:	e7f6      	b.n	800f952 <__s2b+0x66>
 800f964:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f968:	4601      	mov	r1, r0
 800f96a:	220a      	movs	r2, #10
 800f96c:	4630      	mov	r0, r6
 800f96e:	3b30      	subs	r3, #48	@ 0x30
 800f970:	f7ff ff74 	bl	800f85c <__multadd>
 800f974:	e7ee      	b.n	800f954 <__s2b+0x68>
 800f976:	bf00      	nop
 800f978:	08014c76 	.word	0x08014c76
 800f97c:	08014c87 	.word	0x08014c87

0800f980 <__hi0bits>:
 800f980:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f984:	4603      	mov	r3, r0
 800f986:	bf36      	itet	cc
 800f988:	0403      	lslcc	r3, r0, #16
 800f98a:	2000      	movcs	r0, #0
 800f98c:	2010      	movcc	r0, #16
 800f98e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f992:	bf3c      	itt	cc
 800f994:	021b      	lslcc	r3, r3, #8
 800f996:	3008      	addcc	r0, #8
 800f998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f99c:	bf3c      	itt	cc
 800f99e:	011b      	lslcc	r3, r3, #4
 800f9a0:	3004      	addcc	r0, #4
 800f9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9a6:	bf3c      	itt	cc
 800f9a8:	009b      	lslcc	r3, r3, #2
 800f9aa:	3002      	addcc	r0, #2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	db05      	blt.n	800f9bc <__hi0bits+0x3c>
 800f9b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f9b4:	f100 0001 	add.w	r0, r0, #1
 800f9b8:	bf08      	it	eq
 800f9ba:	2020      	moveq	r0, #32
 800f9bc:	4770      	bx	lr

0800f9be <__lo0bits>:
 800f9be:	6803      	ldr	r3, [r0, #0]
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	f013 0007 	ands.w	r0, r3, #7
 800f9c6:	d00b      	beq.n	800f9e0 <__lo0bits+0x22>
 800f9c8:	07d9      	lsls	r1, r3, #31
 800f9ca:	d421      	bmi.n	800fa10 <__lo0bits+0x52>
 800f9cc:	0798      	lsls	r0, r3, #30
 800f9ce:	bf47      	ittee	mi
 800f9d0:	085b      	lsrmi	r3, r3, #1
 800f9d2:	2001      	movmi	r0, #1
 800f9d4:	089b      	lsrpl	r3, r3, #2
 800f9d6:	2002      	movpl	r0, #2
 800f9d8:	bf4c      	ite	mi
 800f9da:	6013      	strmi	r3, [r2, #0]
 800f9dc:	6013      	strpl	r3, [r2, #0]
 800f9de:	4770      	bx	lr
 800f9e0:	b299      	uxth	r1, r3
 800f9e2:	b909      	cbnz	r1, 800f9e8 <__lo0bits+0x2a>
 800f9e4:	0c1b      	lsrs	r3, r3, #16
 800f9e6:	2010      	movs	r0, #16
 800f9e8:	b2d9      	uxtb	r1, r3
 800f9ea:	b909      	cbnz	r1, 800f9f0 <__lo0bits+0x32>
 800f9ec:	3008      	adds	r0, #8
 800f9ee:	0a1b      	lsrs	r3, r3, #8
 800f9f0:	0719      	lsls	r1, r3, #28
 800f9f2:	bf04      	itt	eq
 800f9f4:	091b      	lsreq	r3, r3, #4
 800f9f6:	3004      	addeq	r0, #4
 800f9f8:	0799      	lsls	r1, r3, #30
 800f9fa:	bf04      	itt	eq
 800f9fc:	089b      	lsreq	r3, r3, #2
 800f9fe:	3002      	addeq	r0, #2
 800fa00:	07d9      	lsls	r1, r3, #31
 800fa02:	d403      	bmi.n	800fa0c <__lo0bits+0x4e>
 800fa04:	085b      	lsrs	r3, r3, #1
 800fa06:	f100 0001 	add.w	r0, r0, #1
 800fa0a:	d003      	beq.n	800fa14 <__lo0bits+0x56>
 800fa0c:	6013      	str	r3, [r2, #0]
 800fa0e:	4770      	bx	lr
 800fa10:	2000      	movs	r0, #0
 800fa12:	4770      	bx	lr
 800fa14:	2020      	movs	r0, #32
 800fa16:	4770      	bx	lr

0800fa18 <__i2b>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	f7ff febb 	bl	800f798 <_Balloc>
 800fa22:	4602      	mov	r2, r0
 800fa24:	b928      	cbnz	r0, 800fa32 <__i2b+0x1a>
 800fa26:	4b05      	ldr	r3, [pc, #20]	@ (800fa3c <__i2b+0x24>)
 800fa28:	f240 1145 	movw	r1, #325	@ 0x145
 800fa2c:	4804      	ldr	r0, [pc, #16]	@ (800fa40 <__i2b+0x28>)
 800fa2e:	f001 fbc3 	bl	80111b8 <__assert_func>
 800fa32:	2301      	movs	r3, #1
 800fa34:	6144      	str	r4, [r0, #20]
 800fa36:	6103      	str	r3, [r0, #16]
 800fa38:	bd10      	pop	{r4, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08014c76 	.word	0x08014c76
 800fa40:	08014c87 	.word	0x08014c87

0800fa44 <__multiply>:
 800fa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa48:	4614      	mov	r4, r2
 800fa4a:	690a      	ldr	r2, [r1, #16]
 800fa4c:	460f      	mov	r7, r1
 800fa4e:	b085      	sub	sp, #20
 800fa50:	6923      	ldr	r3, [r4, #16]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	bfa2      	ittt	ge
 800fa56:	4623      	movge	r3, r4
 800fa58:	460c      	movge	r4, r1
 800fa5a:	461f      	movge	r7, r3
 800fa5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fa66:	6861      	ldr	r1, [r4, #4]
 800fa68:	eb0a 0609 	add.w	r6, sl, r9
 800fa6c:	42b3      	cmp	r3, r6
 800fa6e:	bfb8      	it	lt
 800fa70:	3101      	addlt	r1, #1
 800fa72:	f7ff fe91 	bl	800f798 <_Balloc>
 800fa76:	b930      	cbnz	r0, 800fa86 <__multiply+0x42>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	4b45      	ldr	r3, [pc, #276]	@ (800fb90 <__multiply+0x14c>)
 800fa7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fa80:	4844      	ldr	r0, [pc, #272]	@ (800fb94 <__multiply+0x150>)
 800fa82:	f001 fb99 	bl	80111b8 <__assert_func>
 800fa86:	f100 0514 	add.w	r5, r0, #20
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa90:	462b      	mov	r3, r5
 800fa92:	4543      	cmp	r3, r8
 800fa94:	d321      	bcc.n	800fada <__multiply+0x96>
 800fa96:	f107 0114 	add.w	r1, r7, #20
 800fa9a:	f104 0214 	add.w	r2, r4, #20
 800fa9e:	f104 0715 	add.w	r7, r4, #21
 800faa2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800faa6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800faaa:	9302      	str	r3, [sp, #8]
 800faac:	1b13      	subs	r3, r2, r4
 800faae:	3b15      	subs	r3, #21
 800fab0:	f023 0303 	bic.w	r3, r3, #3
 800fab4:	3304      	adds	r3, #4
 800fab6:	42ba      	cmp	r2, r7
 800fab8:	bf38      	it	cc
 800faba:	2304      	movcc	r3, #4
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	9b02      	ldr	r3, [sp, #8]
 800fac0:	9103      	str	r1, [sp, #12]
 800fac2:	428b      	cmp	r3, r1
 800fac4:	d80c      	bhi.n	800fae0 <__multiply+0x9c>
 800fac6:	2e00      	cmp	r6, #0
 800fac8:	dd03      	ble.n	800fad2 <__multiply+0x8e>
 800faca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800face:	2b00      	cmp	r3, #0
 800fad0:	d05b      	beq.n	800fb8a <__multiply+0x146>
 800fad2:	6106      	str	r6, [r0, #16]
 800fad4:	b005      	add	sp, #20
 800fad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fada:	f843 2b04 	str.w	r2, [r3], #4
 800fade:	e7d8      	b.n	800fa92 <__multiply+0x4e>
 800fae0:	f8b1 a000 	ldrh.w	sl, [r1]
 800fae4:	f1ba 0f00 	cmp.w	sl, #0
 800fae8:	d024      	beq.n	800fb34 <__multiply+0xf0>
 800faea:	f104 0e14 	add.w	lr, r4, #20
 800faee:	46a9      	mov	r9, r5
 800faf0:	f04f 0c00 	mov.w	ip, #0
 800faf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800faf8:	f8d9 3000 	ldr.w	r3, [r9]
 800fafc:	fa1f fb87 	uxth.w	fp, r7
 800fb00:	4572      	cmp	r2, lr
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fb0c:	f8d9 7000 	ldr.w	r7, [r9]
 800fb10:	4463      	add	r3, ip
 800fb12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb16:	fb0a c70b 	mla	r7, sl, fp, ip
 800fb1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb28:	f849 3b04 	str.w	r3, [r9], #4
 800fb2c:	d8e2      	bhi.n	800faf4 <__multiply+0xb0>
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	f845 c003 	str.w	ip, [r5, r3]
 800fb34:	9b03      	ldr	r3, [sp, #12]
 800fb36:	3104      	adds	r1, #4
 800fb38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb3c:	f1b9 0f00 	cmp.w	r9, #0
 800fb40:	d021      	beq.n	800fb86 <__multiply+0x142>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	f104 0c14 	add.w	ip, r4, #20
 800fb48:	46ae      	mov	lr, r5
 800fb4a:	f04f 0a00 	mov.w	sl, #0
 800fb4e:	f8bc b000 	ldrh.w	fp, [ip]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fb58:	fb09 770b 	mla	r7, r9, fp, r7
 800fb5c:	4457      	add	r7, sl
 800fb5e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb62:	f84e 3b04 	str.w	r3, [lr], #4
 800fb66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb6e:	f8be 3000 	ldrh.w	r3, [lr]
 800fb72:	4562      	cmp	r2, ip
 800fb74:	fb09 330a 	mla	r3, r9, sl, r3
 800fb78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fb7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb80:	d8e5      	bhi.n	800fb4e <__multiply+0x10a>
 800fb82:	9f01      	ldr	r7, [sp, #4]
 800fb84:	51eb      	str	r3, [r5, r7]
 800fb86:	3504      	adds	r5, #4
 800fb88:	e799      	b.n	800fabe <__multiply+0x7a>
 800fb8a:	3e01      	subs	r6, #1
 800fb8c:	e79b      	b.n	800fac6 <__multiply+0x82>
 800fb8e:	bf00      	nop
 800fb90:	08014c76 	.word	0x08014c76
 800fb94:	08014c87 	.word	0x08014c87

0800fb98 <__pow5mult>:
 800fb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	4615      	mov	r5, r2
 800fb9e:	f012 0203 	ands.w	r2, r2, #3
 800fba2:	4607      	mov	r7, r0
 800fba4:	460e      	mov	r6, r1
 800fba6:	d007      	beq.n	800fbb8 <__pow5mult+0x20>
 800fba8:	3a01      	subs	r2, #1
 800fbaa:	4c25      	ldr	r4, [pc, #148]	@ (800fc40 <__pow5mult+0xa8>)
 800fbac:	2300      	movs	r3, #0
 800fbae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbb2:	f7ff fe53 	bl	800f85c <__multadd>
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	10ad      	asrs	r5, r5, #2
 800fbba:	d03d      	beq.n	800fc38 <__pow5mult+0xa0>
 800fbbc:	69fc      	ldr	r4, [r7, #28]
 800fbbe:	b97c      	cbnz	r4, 800fbe0 <__pow5mult+0x48>
 800fbc0:	2010      	movs	r0, #16
 800fbc2:	f7ff fd33 	bl	800f62c <malloc>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	61f8      	str	r0, [r7, #28]
 800fbca:	b928      	cbnz	r0, 800fbd8 <__pow5mult+0x40>
 800fbcc:	4b1d      	ldr	r3, [pc, #116]	@ (800fc44 <__pow5mult+0xac>)
 800fbce:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fbd2:	481d      	ldr	r0, [pc, #116]	@ (800fc48 <__pow5mult+0xb0>)
 800fbd4:	f001 faf0 	bl	80111b8 <__assert_func>
 800fbd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbdc:	6004      	str	r4, [r0, #0]
 800fbde:	60c4      	str	r4, [r0, #12]
 800fbe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fbe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbe8:	b94c      	cbnz	r4, 800fbfe <__pow5mult+0x66>
 800fbea:	f240 2171 	movw	r1, #625	@ 0x271
 800fbee:	4638      	mov	r0, r7
 800fbf0:	f7ff ff12 	bl	800fa18 <__i2b>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbfc:	6003      	str	r3, [r0, #0]
 800fbfe:	f04f 0900 	mov.w	r9, #0
 800fc02:	07eb      	lsls	r3, r5, #31
 800fc04:	d50a      	bpl.n	800fc1c <__pow5mult+0x84>
 800fc06:	4631      	mov	r1, r6
 800fc08:	4622      	mov	r2, r4
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	f7ff ff1a 	bl	800fa44 <__multiply>
 800fc10:	4680      	mov	r8, r0
 800fc12:	4631      	mov	r1, r6
 800fc14:	4638      	mov	r0, r7
 800fc16:	4646      	mov	r6, r8
 800fc18:	f7ff fdfe 	bl	800f818 <_Bfree>
 800fc1c:	106d      	asrs	r5, r5, #1
 800fc1e:	d00b      	beq.n	800fc38 <__pow5mult+0xa0>
 800fc20:	6820      	ldr	r0, [r4, #0]
 800fc22:	b938      	cbnz	r0, 800fc34 <__pow5mult+0x9c>
 800fc24:	4622      	mov	r2, r4
 800fc26:	4621      	mov	r1, r4
 800fc28:	4638      	mov	r0, r7
 800fc2a:	f7ff ff0b 	bl	800fa44 <__multiply>
 800fc2e:	6020      	str	r0, [r4, #0]
 800fc30:	f8c0 9000 	str.w	r9, [r0]
 800fc34:	4604      	mov	r4, r0
 800fc36:	e7e4      	b.n	800fc02 <__pow5mult+0x6a>
 800fc38:	4630      	mov	r0, r6
 800fc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3e:	bf00      	nop
 800fc40:	08014ce0 	.word	0x08014ce0
 800fc44:	08014c07 	.word	0x08014c07
 800fc48:	08014c87 	.word	0x08014c87

0800fc4c <__lshift>:
 800fc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc50:	460c      	mov	r4, r1
 800fc52:	4607      	mov	r7, r0
 800fc54:	4691      	mov	r9, r2
 800fc56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc5a:	6923      	ldr	r3, [r4, #16]
 800fc5c:	6849      	ldr	r1, [r1, #4]
 800fc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	f108 0601 	add.w	r6, r8, #1
 800fc68:	42b3      	cmp	r3, r6
 800fc6a:	db0b      	blt.n	800fc84 <__lshift+0x38>
 800fc6c:	4638      	mov	r0, r7
 800fc6e:	f7ff fd93 	bl	800f798 <_Balloc>
 800fc72:	4605      	mov	r5, r0
 800fc74:	b948      	cbnz	r0, 800fc8a <__lshift+0x3e>
 800fc76:	4602      	mov	r2, r0
 800fc78:	4b28      	ldr	r3, [pc, #160]	@ (800fd1c <__lshift+0xd0>)
 800fc7a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fc7e:	4828      	ldr	r0, [pc, #160]	@ (800fd20 <__lshift+0xd4>)
 800fc80:	f001 fa9a 	bl	80111b8 <__assert_func>
 800fc84:	3101      	adds	r1, #1
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	e7ee      	b.n	800fc68 <__lshift+0x1c>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f100 0114 	add.w	r1, r0, #20
 800fc90:	f100 0210 	add.w	r2, r0, #16
 800fc94:	4618      	mov	r0, r3
 800fc96:	4553      	cmp	r3, sl
 800fc98:	db33      	blt.n	800fd02 <__lshift+0xb6>
 800fc9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc9e:	f104 0314 	add.w	r3, r4, #20
 800fca2:	6920      	ldr	r0, [r4, #16]
 800fca4:	f019 091f 	ands.w	r9, r9, #31
 800fca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcb0:	d02b      	beq.n	800fd0a <__lshift+0xbe>
 800fcb2:	f1c9 0e20 	rsb	lr, r9, #32
 800fcb6:	468a      	mov	sl, r1
 800fcb8:	2200      	movs	r2, #0
 800fcba:	6818      	ldr	r0, [r3, #0]
 800fcbc:	fa00 f009 	lsl.w	r0, r0, r9
 800fcc0:	4310      	orrs	r0, r2
 800fcc2:	f84a 0b04 	str.w	r0, [sl], #4
 800fcc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcca:	459c      	cmp	ip, r3
 800fccc:	fa22 f20e 	lsr.w	r2, r2, lr
 800fcd0:	d8f3      	bhi.n	800fcba <__lshift+0x6e>
 800fcd2:	ebac 0304 	sub.w	r3, ip, r4
 800fcd6:	f104 0015 	add.w	r0, r4, #21
 800fcda:	3b15      	subs	r3, #21
 800fcdc:	f023 0303 	bic.w	r3, r3, #3
 800fce0:	3304      	adds	r3, #4
 800fce2:	4584      	cmp	ip, r0
 800fce4:	bf38      	it	cc
 800fce6:	2304      	movcc	r3, #4
 800fce8:	50ca      	str	r2, [r1, r3]
 800fcea:	b10a      	cbz	r2, 800fcf0 <__lshift+0xa4>
 800fcec:	f108 0602 	add.w	r6, r8, #2
 800fcf0:	3e01      	subs	r6, #1
 800fcf2:	4638      	mov	r0, r7
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	612e      	str	r6, [r5, #16]
 800fcf8:	f7ff fd8e 	bl	800f818 <_Bfree>
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd02:	3301      	adds	r3, #1
 800fd04:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd08:	e7c5      	b.n	800fc96 <__lshift+0x4a>
 800fd0a:	3904      	subs	r1, #4
 800fd0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd10:	459c      	cmp	ip, r3
 800fd12:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd16:	d8f9      	bhi.n	800fd0c <__lshift+0xc0>
 800fd18:	e7ea      	b.n	800fcf0 <__lshift+0xa4>
 800fd1a:	bf00      	nop
 800fd1c:	08014c76 	.word	0x08014c76
 800fd20:	08014c87 	.word	0x08014c87

0800fd24 <__mcmp>:
 800fd24:	4603      	mov	r3, r0
 800fd26:	690a      	ldr	r2, [r1, #16]
 800fd28:	6900      	ldr	r0, [r0, #16]
 800fd2a:	1a80      	subs	r0, r0, r2
 800fd2c:	b530      	push	{r4, r5, lr}
 800fd2e:	d10e      	bne.n	800fd4e <__mcmp+0x2a>
 800fd30:	3314      	adds	r3, #20
 800fd32:	3114      	adds	r1, #20
 800fd34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd44:	4295      	cmp	r5, r2
 800fd46:	d003      	beq.n	800fd50 <__mcmp+0x2c>
 800fd48:	d205      	bcs.n	800fd56 <__mcmp+0x32>
 800fd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4e:	bd30      	pop	{r4, r5, pc}
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	d3f3      	bcc.n	800fd3c <__mcmp+0x18>
 800fd54:	e7fb      	b.n	800fd4e <__mcmp+0x2a>
 800fd56:	2001      	movs	r0, #1
 800fd58:	e7f9      	b.n	800fd4e <__mcmp+0x2a>
	...

0800fd5c <__mdiff>:
 800fd5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd60:	4689      	mov	r9, r1
 800fd62:	4606      	mov	r6, r0
 800fd64:	4611      	mov	r1, r2
 800fd66:	4614      	mov	r4, r2
 800fd68:	4648      	mov	r0, r9
 800fd6a:	f7ff ffdb 	bl	800fd24 <__mcmp>
 800fd6e:	1e05      	subs	r5, r0, #0
 800fd70:	d112      	bne.n	800fd98 <__mdiff+0x3c>
 800fd72:	4629      	mov	r1, r5
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7ff fd0f 	bl	800f798 <_Balloc>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	b928      	cbnz	r0, 800fd8a <__mdiff+0x2e>
 800fd7e:	4b41      	ldr	r3, [pc, #260]	@ (800fe84 <__mdiff+0x128>)
 800fd80:	f240 2137 	movw	r1, #567	@ 0x237
 800fd84:	4840      	ldr	r0, [pc, #256]	@ (800fe88 <__mdiff+0x12c>)
 800fd86:	f001 fa17 	bl	80111b8 <__assert_func>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd90:	4610      	mov	r0, r2
 800fd92:	b003      	add	sp, #12
 800fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd98:	bfbc      	itt	lt
 800fd9a:	464b      	movlt	r3, r9
 800fd9c:	46a1      	movlt	r9, r4
 800fd9e:	4630      	mov	r0, r6
 800fda0:	bfb8      	it	lt
 800fda2:	2501      	movlt	r5, #1
 800fda4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fda8:	bfb4      	ite	lt
 800fdaa:	461c      	movlt	r4, r3
 800fdac:	2500      	movge	r5, #0
 800fdae:	f7ff fcf3 	bl	800f798 <_Balloc>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	b918      	cbnz	r0, 800fdbe <__mdiff+0x62>
 800fdb6:	4b33      	ldr	r3, [pc, #204]	@ (800fe84 <__mdiff+0x128>)
 800fdb8:	f240 2145 	movw	r1, #581	@ 0x245
 800fdbc:	e7e2      	b.n	800fd84 <__mdiff+0x28>
 800fdbe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fdc2:	f104 0e14 	add.w	lr, r4, #20
 800fdc6:	6926      	ldr	r6, [r4, #16]
 800fdc8:	f100 0b14 	add.w	fp, r0, #20
 800fdcc:	60c5      	str	r5, [r0, #12]
 800fdce:	f109 0514 	add.w	r5, r9, #20
 800fdd2:	f109 0310 	add.w	r3, r9, #16
 800fdd6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fdda:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fdde:	46d9      	mov	r9, fp
 800fde0:	f04f 0c00 	mov.w	ip, #0
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	9b01      	ldr	r3, [sp, #4]
 800fde8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fdec:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fdf0:	4576      	cmp	r6, lr
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	fa1f f38a 	uxth.w	r3, sl
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	b283      	uxth	r3, r0
 800fdfc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800fe00:	eba1 0303 	sub.w	r3, r1, r3
 800fe04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe08:	4463      	add	r3, ip
 800fe0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe18:	f849 3b04 	str.w	r3, [r9], #4
 800fe1c:	d8e3      	bhi.n	800fde6 <__mdiff+0x8a>
 800fe1e:	1b33      	subs	r3, r6, r4
 800fe20:	3415      	adds	r4, #21
 800fe22:	3b15      	subs	r3, #21
 800fe24:	f023 0303 	bic.w	r3, r3, #3
 800fe28:	3304      	adds	r3, #4
 800fe2a:	42a6      	cmp	r6, r4
 800fe2c:	bf38      	it	cc
 800fe2e:	2304      	movcc	r3, #4
 800fe30:	441d      	add	r5, r3
 800fe32:	445b      	add	r3, fp
 800fe34:	462c      	mov	r4, r5
 800fe36:	461e      	mov	r6, r3
 800fe38:	4544      	cmp	r4, r8
 800fe3a:	d30e      	bcc.n	800fe5a <__mdiff+0xfe>
 800fe3c:	f108 0103 	add.w	r1, r8, #3
 800fe40:	1b49      	subs	r1, r1, r5
 800fe42:	3d03      	subs	r5, #3
 800fe44:	f021 0103 	bic.w	r1, r1, #3
 800fe48:	45a8      	cmp	r8, r5
 800fe4a:	bf38      	it	cc
 800fe4c:	2100      	movcc	r1, #0
 800fe4e:	440b      	add	r3, r1
 800fe50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe54:	b199      	cbz	r1, 800fe7e <__mdiff+0x122>
 800fe56:	6117      	str	r7, [r2, #16]
 800fe58:	e79a      	b.n	800fd90 <__mdiff+0x34>
 800fe5a:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe5e:	46e6      	mov	lr, ip
 800fe60:	fa1f fc81 	uxth.w	ip, r1
 800fe64:	0c08      	lsrs	r0, r1, #16
 800fe66:	4471      	add	r1, lr
 800fe68:	44f4      	add	ip, lr
 800fe6a:	b289      	uxth	r1, r1
 800fe6c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fe70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fe74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe78:	f846 1b04 	str.w	r1, [r6], #4
 800fe7c:	e7dc      	b.n	800fe38 <__mdiff+0xdc>
 800fe7e:	3f01      	subs	r7, #1
 800fe80:	e7e6      	b.n	800fe50 <__mdiff+0xf4>
 800fe82:	bf00      	nop
 800fe84:	08014c76 	.word	0x08014c76
 800fe88:	08014c87 	.word	0x08014c87

0800fe8c <__ulp>:
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	4b11      	ldr	r3, [pc, #68]	@ (800fed4 <__ulp+0x48>)
 800fe90:	ed8d 0b00 	vstr	d0, [sp]
 800fe94:	9a01      	ldr	r2, [sp, #4]
 800fe96:	4013      	ands	r3, r2
 800fe98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	dc08      	bgt.n	800feb2 <__ulp+0x26>
 800fea0:	425b      	negs	r3, r3
 800fea2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fea6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800feaa:	da04      	bge.n	800feb6 <__ulp+0x2a>
 800feac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800feb0:	4113      	asrs	r3, r2
 800feb2:	2200      	movs	r2, #0
 800feb4:	e008      	b.n	800fec8 <__ulp+0x3c>
 800feb6:	f1a2 0314 	sub.w	r3, r2, #20
 800feba:	2b1e      	cmp	r3, #30
 800febc:	bfd6      	itet	le
 800febe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fec2:	2201      	movgt	r2, #1
 800fec4:	40da      	lsrle	r2, r3
 800fec6:	2300      	movs	r3, #0
 800fec8:	4619      	mov	r1, r3
 800feca:	4610      	mov	r0, r2
 800fecc:	ec41 0b10 	vmov	d0, r0, r1
 800fed0:	b002      	add	sp, #8
 800fed2:	4770      	bx	lr
 800fed4:	7ff00000 	.word	0x7ff00000

0800fed8 <__b2d>:
 800fed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fedc:	6906      	ldr	r6, [r0, #16]
 800fede:	f100 0814 	add.w	r8, r0, #20
 800fee2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fee6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800feea:	1f37      	subs	r7, r6, #4
 800feec:	4610      	mov	r0, r2
 800feee:	f7ff fd47 	bl	800f980 <__hi0bits>
 800fef2:	f1c0 0320 	rsb	r3, r0, #32
 800fef6:	280a      	cmp	r0, #10
 800fef8:	600b      	str	r3, [r1, #0]
 800fefa:	491d      	ldr	r1, [pc, #116]	@ (800ff70 <__b2d+0x98>)
 800fefc:	dc16      	bgt.n	800ff2c <__b2d+0x54>
 800fefe:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff02:	45b8      	cmp	r8, r7
 800ff04:	f100 0015 	add.w	r0, r0, #21
 800ff08:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff0c:	fa02 f000 	lsl.w	r0, r2, r0
 800ff10:	ea43 0501 	orr.w	r5, r3, r1
 800ff14:	bf34      	ite	cc
 800ff16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff1a:	2300      	movcs	r3, #0
 800ff1c:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff20:	4303      	orrs	r3, r0
 800ff22:	461c      	mov	r4, r3
 800ff24:	ec45 4b10 	vmov	d0, r4, r5
 800ff28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff2c:	45b8      	cmp	r8, r7
 800ff2e:	bf3a      	itte	cc
 800ff30:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff34:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff38:	2300      	movcs	r3, #0
 800ff3a:	380b      	subs	r0, #11
 800ff3c:	d014      	beq.n	800ff68 <__b2d+0x90>
 800ff3e:	f1c0 0120 	rsb	r1, r0, #32
 800ff42:	4082      	lsls	r2, r0
 800ff44:	4547      	cmp	r7, r8
 800ff46:	fa23 f401 	lsr.w	r4, r3, r1
 800ff4a:	fa03 f300 	lsl.w	r3, r3, r0
 800ff4e:	ea42 0204 	orr.w	r2, r2, r4
 800ff52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff56:	bf8c      	ite	hi
 800ff58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff5c:	2200      	movls	r2, #0
 800ff5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff62:	40ca      	lsrs	r2, r1
 800ff64:	4313      	orrs	r3, r2
 800ff66:	e7dc      	b.n	800ff22 <__b2d+0x4a>
 800ff68:	ea42 0501 	orr.w	r5, r2, r1
 800ff6c:	e7d9      	b.n	800ff22 <__b2d+0x4a>
 800ff6e:	bf00      	nop
 800ff70:	3ff00000 	.word	0x3ff00000

0800ff74 <__d2b>:
 800ff74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff78:	460f      	mov	r7, r1
 800ff7a:	2101      	movs	r1, #1
 800ff7c:	4616      	mov	r6, r2
 800ff7e:	ec59 8b10 	vmov	r8, r9, d0
 800ff82:	f7ff fc09 	bl	800f798 <_Balloc>
 800ff86:	4604      	mov	r4, r0
 800ff88:	b930      	cbnz	r0, 800ff98 <__d2b+0x24>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	4b23      	ldr	r3, [pc, #140]	@ (801001c <__d2b+0xa8>)
 800ff8e:	f240 310f 	movw	r1, #783	@ 0x30f
 800ff92:	4823      	ldr	r0, [pc, #140]	@ (8010020 <__d2b+0xac>)
 800ff94:	f001 f910 	bl	80111b8 <__assert_func>
 800ff98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffa0:	b10d      	cbz	r5, 800ffa6 <__d2b+0x32>
 800ffa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffa6:	9301      	str	r3, [sp, #4]
 800ffa8:	f1b8 0300 	subs.w	r3, r8, #0
 800ffac:	d023      	beq.n	800fff6 <__d2b+0x82>
 800ffae:	4668      	mov	r0, sp
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	f7ff fd04 	bl	800f9be <__lo0bits>
 800ffb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ffba:	b1d0      	cbz	r0, 800fff2 <__d2b+0x7e>
 800ffbc:	f1c0 0320 	rsb	r3, r0, #32
 800ffc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffc4:	40c2      	lsrs	r2, r0
 800ffc6:	430b      	orrs	r3, r1
 800ffc8:	9201      	str	r2, [sp, #4]
 800ffca:	6163      	str	r3, [r4, #20]
 800ffcc:	9b01      	ldr	r3, [sp, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	61a3      	str	r3, [r4, #24]
 800ffd2:	bf0c      	ite	eq
 800ffd4:	2201      	moveq	r2, #1
 800ffd6:	2202      	movne	r2, #2
 800ffd8:	6122      	str	r2, [r4, #16]
 800ffda:	b1a5      	cbz	r5, 8010006 <__d2b+0x92>
 800ffdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ffe0:	4405      	add	r5, r0
 800ffe2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ffe6:	603d      	str	r5, [r7, #0]
 800ffe8:	6030      	str	r0, [r6, #0]
 800ffea:	4620      	mov	r0, r4
 800ffec:	b003      	add	sp, #12
 800ffee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fff2:	6161      	str	r1, [r4, #20]
 800fff4:	e7ea      	b.n	800ffcc <__d2b+0x58>
 800fff6:	a801      	add	r0, sp, #4
 800fff8:	f7ff fce1 	bl	800f9be <__lo0bits>
 800fffc:	9b01      	ldr	r3, [sp, #4]
 800fffe:	3020      	adds	r0, #32
 8010000:	2201      	movs	r2, #1
 8010002:	6163      	str	r3, [r4, #20]
 8010004:	e7e8      	b.n	800ffd8 <__d2b+0x64>
 8010006:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801000a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801000e:	6038      	str	r0, [r7, #0]
 8010010:	6918      	ldr	r0, [r3, #16]
 8010012:	f7ff fcb5 	bl	800f980 <__hi0bits>
 8010016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801001a:	e7e5      	b.n	800ffe8 <__d2b+0x74>
 801001c:	08014c76 	.word	0x08014c76
 8010020:	08014c87 	.word	0x08014c87

08010024 <__ratio>:
 8010024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	b085      	sub	sp, #20
 801002a:	e9cd 1000 	strd	r1, r0, [sp]
 801002e:	a902      	add	r1, sp, #8
 8010030:	f7ff ff52 	bl	800fed8 <__b2d>
 8010034:	a903      	add	r1, sp, #12
 8010036:	9800      	ldr	r0, [sp, #0]
 8010038:	ec55 4b10 	vmov	r4, r5, d0
 801003c:	f7ff ff4c 	bl	800fed8 <__b2d>
 8010040:	9b01      	ldr	r3, [sp, #4]
 8010042:	462f      	mov	r7, r5
 8010044:	4620      	mov	r0, r4
 8010046:	6919      	ldr	r1, [r3, #16]
 8010048:	9b00      	ldr	r3, [sp, #0]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	1ac9      	subs	r1, r1, r3
 801004e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010052:	ec5b ab10 	vmov	sl, fp, d0
 8010056:	1a9b      	subs	r3, r3, r2
 8010058:	46d9      	mov	r9, fp
 801005a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfcd      	iteet	gt
 8010062:	462a      	movgt	r2, r5
 8010064:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010068:	465a      	movle	r2, fp
 801006a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801006e:	bfd8      	it	le
 8010070:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010074:	4652      	mov	r2, sl
 8010076:	4639      	mov	r1, r7
 8010078:	464b      	mov	r3, r9
 801007a:	f7f0 fbfb 	bl	8000874 <__aeabi_ddiv>
 801007e:	ec41 0b10 	vmov	d0, r0, r1
 8010082:	b005      	add	sp, #20
 8010084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010088 <__copybits>:
 8010088:	3901      	subs	r1, #1
 801008a:	f102 0314 	add.w	r3, r2, #20
 801008e:	1149      	asrs	r1, r1, #5
 8010090:	b570      	push	{r4, r5, r6, lr}
 8010092:	3101      	adds	r1, #1
 8010094:	6914      	ldr	r4, [r2, #16]
 8010096:	1f05      	subs	r5, r0, #4
 8010098:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801009c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100a0:	42a3      	cmp	r3, r4
 80100a2:	d30c      	bcc.n	80100be <__copybits+0x36>
 80100a4:	1aa3      	subs	r3, r4, r2
 80100a6:	3211      	adds	r2, #17
 80100a8:	3b11      	subs	r3, #17
 80100aa:	f023 0303 	bic.w	r3, r3, #3
 80100ae:	42a2      	cmp	r2, r4
 80100b0:	bf88      	it	hi
 80100b2:	2300      	movhi	r3, #0
 80100b4:	4418      	add	r0, r3
 80100b6:	2300      	movs	r3, #0
 80100b8:	4288      	cmp	r0, r1
 80100ba:	d305      	bcc.n	80100c8 <__copybits+0x40>
 80100bc:	bd70      	pop	{r4, r5, r6, pc}
 80100be:	f853 6b04 	ldr.w	r6, [r3], #4
 80100c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80100c6:	e7eb      	b.n	80100a0 <__copybits+0x18>
 80100c8:	f840 3b04 	str.w	r3, [r0], #4
 80100cc:	e7f4      	b.n	80100b8 <__copybits+0x30>

080100ce <__any_on>:
 80100ce:	f100 0214 	add.w	r2, r0, #20
 80100d2:	114b      	asrs	r3, r1, #5
 80100d4:	6900      	ldr	r0, [r0, #16]
 80100d6:	4298      	cmp	r0, r3
 80100d8:	b510      	push	{r4, lr}
 80100da:	db11      	blt.n	8010100 <__any_on+0x32>
 80100dc:	dd0a      	ble.n	80100f4 <__any_on+0x26>
 80100de:	f011 011f 	ands.w	r1, r1, #31
 80100e2:	d007      	beq.n	80100f4 <__any_on+0x26>
 80100e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80100e8:	fa24 f001 	lsr.w	r0, r4, r1
 80100ec:	fa00 f101 	lsl.w	r1, r0, r1
 80100f0:	428c      	cmp	r4, r1
 80100f2:	d10b      	bne.n	801010c <__any_on+0x3e>
 80100f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d803      	bhi.n	8010104 <__any_on+0x36>
 80100fc:	2000      	movs	r0, #0
 80100fe:	bd10      	pop	{r4, pc}
 8010100:	4603      	mov	r3, r0
 8010102:	e7f7      	b.n	80100f4 <__any_on+0x26>
 8010104:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010108:	2900      	cmp	r1, #0
 801010a:	d0f5      	beq.n	80100f8 <__any_on+0x2a>
 801010c:	2001      	movs	r0, #1
 801010e:	e7f6      	b.n	80100fe <__any_on+0x30>

08010110 <sulp>:
 8010110:	b570      	push	{r4, r5, r6, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	460d      	mov	r5, r1
 8010116:	4616      	mov	r6, r2
 8010118:	ec45 4b10 	vmov	d0, r4, r5
 801011c:	f7ff feb6 	bl	800fe8c <__ulp>
 8010120:	ec51 0b10 	vmov	r0, r1, d0
 8010124:	b17e      	cbz	r6, 8010146 <sulp+0x36>
 8010126:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801012a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd09      	ble.n	8010146 <sulp+0x36>
 8010132:	051b      	lsls	r3, r3, #20
 8010134:	2400      	movs	r4, #0
 8010136:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801013a:	4622      	mov	r2, r4
 801013c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010140:	462b      	mov	r3, r5
 8010142:	f7f0 fa6d 	bl	8000620 <__aeabi_dmul>
 8010146:	ec41 0b10 	vmov	d0, r0, r1
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	0000      	movs	r0, r0
	...

08010150 <_strtod_l>:
 8010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	b09f      	sub	sp, #124	@ 0x7c
 8010156:	460c      	mov	r4, r1
 8010158:	f04f 0a00 	mov.w	sl, #0
 801015c:	f04f 0b00 	mov.w	fp, #0
 8010160:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010162:	2200      	movs	r2, #0
 8010164:	9005      	str	r0, [sp, #20]
 8010166:	921a      	str	r2, [sp, #104]	@ 0x68
 8010168:	460a      	mov	r2, r1
 801016a:	9219      	str	r2, [sp, #100]	@ 0x64
 801016c:	7811      	ldrb	r1, [r2, #0]
 801016e:	292b      	cmp	r1, #43	@ 0x2b
 8010170:	d04a      	beq.n	8010208 <_strtod_l+0xb8>
 8010172:	d838      	bhi.n	80101e6 <_strtod_l+0x96>
 8010174:	290d      	cmp	r1, #13
 8010176:	d832      	bhi.n	80101de <_strtod_l+0x8e>
 8010178:	2908      	cmp	r1, #8
 801017a:	d832      	bhi.n	80101e2 <_strtod_l+0x92>
 801017c:	2900      	cmp	r1, #0
 801017e:	d03b      	beq.n	80101f8 <_strtod_l+0xa8>
 8010180:	2200      	movs	r2, #0
 8010182:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010184:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010186:	782a      	ldrb	r2, [r5, #0]
 8010188:	2a30      	cmp	r2, #48	@ 0x30
 801018a:	f040 80b3 	bne.w	80102f4 <_strtod_l+0x1a4>
 801018e:	786a      	ldrb	r2, [r5, #1]
 8010190:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010194:	2a58      	cmp	r2, #88	@ 0x58
 8010196:	d16e      	bne.n	8010276 <_strtod_l+0x126>
 8010198:	9302      	str	r3, [sp, #8]
 801019a:	a919      	add	r1, sp, #100	@ 0x64
 801019c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801019e:	4a90      	ldr	r2, [pc, #576]	@ (80103e0 <_strtod_l+0x290>)
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	ab1a      	add	r3, sp, #104	@ 0x68
 80101a4:	9805      	ldr	r0, [sp, #20]
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80101aa:	f001 f89d 	bl	80112e8 <__gethex>
 80101ae:	f010 060f 	ands.w	r6, r0, #15
 80101b2:	4604      	mov	r4, r0
 80101b4:	d005      	beq.n	80101c2 <_strtod_l+0x72>
 80101b6:	2e06      	cmp	r6, #6
 80101b8:	d128      	bne.n	801020c <_strtod_l+0xbc>
 80101ba:	3501      	adds	r5, #1
 80101bc:	2300      	movs	r3, #0
 80101be:	9519      	str	r5, [sp, #100]	@ 0x64
 80101c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f040 858e 	bne.w	8010ce6 <_strtod_l+0xb96>
 80101ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101cc:	b1cb      	cbz	r3, 8010202 <_strtod_l+0xb2>
 80101ce:	4652      	mov	r2, sl
 80101d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80101d4:	ec43 2b10 	vmov	d0, r2, r3
 80101d8:	b01f      	add	sp, #124	@ 0x7c
 80101da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101de:	2920      	cmp	r1, #32
 80101e0:	d1ce      	bne.n	8010180 <_strtod_l+0x30>
 80101e2:	3201      	adds	r2, #1
 80101e4:	e7c1      	b.n	801016a <_strtod_l+0x1a>
 80101e6:	292d      	cmp	r1, #45	@ 0x2d
 80101e8:	d1ca      	bne.n	8010180 <_strtod_l+0x30>
 80101ea:	2101      	movs	r1, #1
 80101ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80101ee:	1c51      	adds	r1, r2, #1
 80101f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80101f2:	7852      	ldrb	r2, [r2, #1]
 80101f4:	2a00      	cmp	r2, #0
 80101f6:	d1c5      	bne.n	8010184 <_strtod_l+0x34>
 80101f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80101fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f040 8570 	bne.w	8010ce2 <_strtod_l+0xb92>
 8010202:	4652      	mov	r2, sl
 8010204:	465b      	mov	r3, fp
 8010206:	e7e5      	b.n	80101d4 <_strtod_l+0x84>
 8010208:	2100      	movs	r1, #0
 801020a:	e7ef      	b.n	80101ec <_strtod_l+0x9c>
 801020c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801020e:	b13a      	cbz	r2, 8010220 <_strtod_l+0xd0>
 8010210:	2135      	movs	r1, #53	@ 0x35
 8010212:	a81c      	add	r0, sp, #112	@ 0x70
 8010214:	f7ff ff38 	bl	8010088 <__copybits>
 8010218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801021a:	9805      	ldr	r0, [sp, #20]
 801021c:	f7ff fafc 	bl	800f818 <_Bfree>
 8010220:	3e01      	subs	r6, #1
 8010222:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010224:	2e04      	cmp	r6, #4
 8010226:	d806      	bhi.n	8010236 <_strtod_l+0xe6>
 8010228:	e8df f006 	tbb	[pc, r6]
 801022c:	201d0314 	.word	0x201d0314
 8010230:	14          	.byte	0x14
 8010231:	00          	.byte	0x00
 8010232:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010236:	05e1      	lsls	r1, r4, #23
 8010238:	bf48      	it	mi
 801023a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801023e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010242:	0d1b      	lsrs	r3, r3, #20
 8010244:	051b      	lsls	r3, r3, #20
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1bb      	bne.n	80101c2 <_strtod_l+0x72>
 801024a:	f7fe fb05 	bl	800e858 <__errno>
 801024e:	2322      	movs	r3, #34	@ 0x22
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	e7b6      	b.n	80101c2 <_strtod_l+0x72>
 8010254:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010258:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801025c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010260:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010264:	e7e7      	b.n	8010236 <_strtod_l+0xe6>
 8010266:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80103e8 <_strtod_l+0x298>
 801026a:	e7e4      	b.n	8010236 <_strtod_l+0xe6>
 801026c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010270:	f04f 3aff 	mov.w	sl, #4294967295
 8010274:	e7df      	b.n	8010236 <_strtod_l+0xe6>
 8010276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	9219      	str	r2, [sp, #100]	@ 0x64
 801027c:	785b      	ldrb	r3, [r3, #1]
 801027e:	2b30      	cmp	r3, #48	@ 0x30
 8010280:	d0f9      	beq.n	8010276 <_strtod_l+0x126>
 8010282:	2b00      	cmp	r3, #0
 8010284:	d09d      	beq.n	80101c2 <_strtod_l+0x72>
 8010286:	2301      	movs	r3, #1
 8010288:	9309      	str	r3, [sp, #36]	@ 0x24
 801028a:	220a      	movs	r2, #10
 801028c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801028e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010290:	2300      	movs	r3, #0
 8010292:	461f      	mov	r7, r3
 8010294:	9308      	str	r3, [sp, #32]
 8010296:	930a      	str	r3, [sp, #40]	@ 0x28
 8010298:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801029a:	7805      	ldrb	r5, [r0, #0]
 801029c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80102a0:	b2d9      	uxtb	r1, r3
 80102a2:	2909      	cmp	r1, #9
 80102a4:	d928      	bls.n	80102f8 <_strtod_l+0x1a8>
 80102a6:	2201      	movs	r2, #1
 80102a8:	494e      	ldr	r1, [pc, #312]	@ (80103e4 <_strtod_l+0x294>)
 80102aa:	f000 ff59 	bl	8011160 <strncmp>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d033      	beq.n	801031a <_strtod_l+0x1ca>
 80102b2:	2000      	movs	r0, #0
 80102b4:	462a      	mov	r2, r5
 80102b6:	463d      	mov	r5, r7
 80102b8:	4681      	mov	r9, r0
 80102ba:	4603      	mov	r3, r0
 80102bc:	2a65      	cmp	r2, #101	@ 0x65
 80102be:	d001      	beq.n	80102c4 <_strtod_l+0x174>
 80102c0:	2a45      	cmp	r2, #69	@ 0x45
 80102c2:	d114      	bne.n	80102ee <_strtod_l+0x19e>
 80102c4:	b91d      	cbnz	r5, 80102ce <_strtod_l+0x17e>
 80102c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102c8:	4302      	orrs	r2, r0
 80102ca:	d095      	beq.n	80101f8 <_strtod_l+0xa8>
 80102cc:	2500      	movs	r5, #0
 80102ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80102d0:	1c62      	adds	r2, r4, #1
 80102d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80102d4:	7862      	ldrb	r2, [r4, #1]
 80102d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80102d8:	d078      	beq.n	80103cc <_strtod_l+0x27c>
 80102da:	2a2d      	cmp	r2, #45	@ 0x2d
 80102dc:	d07c      	beq.n	80103d8 <_strtod_l+0x288>
 80102de:	f04f 0c00 	mov.w	ip, #0
 80102e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80102e6:	2909      	cmp	r1, #9
 80102e8:	f240 8084 	bls.w	80103f4 <_strtod_l+0x2a4>
 80102ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80102ee:	f04f 0800 	mov.w	r8, #0
 80102f2:	e0a4      	b.n	801043e <_strtod_l+0x2ee>
 80102f4:	2300      	movs	r3, #0
 80102f6:	e7c7      	b.n	8010288 <_strtod_l+0x138>
 80102f8:	2f08      	cmp	r7, #8
 80102fa:	f100 0001 	add.w	r0, r0, #1
 80102fe:	f107 0701 	add.w	r7, r7, #1
 8010302:	bfd5      	itete	le
 8010304:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010306:	9908      	ldrgt	r1, [sp, #32]
 8010308:	fb02 3301 	mlale	r3, r2, r1, r3
 801030c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010310:	bfd4      	ite	le
 8010312:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010314:	9308      	strgt	r3, [sp, #32]
 8010316:	9019      	str	r0, [sp, #100]	@ 0x64
 8010318:	e7be      	b.n	8010298 <_strtod_l+0x148>
 801031a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801031c:	1c5a      	adds	r2, r3, #1
 801031e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010320:	785a      	ldrb	r2, [r3, #1]
 8010322:	b37f      	cbz	r7, 8010384 <_strtod_l+0x234>
 8010324:	4681      	mov	r9, r0
 8010326:	463d      	mov	r5, r7
 8010328:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801032c:	2b09      	cmp	r3, #9
 801032e:	d912      	bls.n	8010356 <_strtod_l+0x206>
 8010330:	2301      	movs	r3, #1
 8010332:	e7c3      	b.n	80102bc <_strtod_l+0x16c>
 8010334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010336:	3001      	adds	r0, #1
 8010338:	1c5a      	adds	r2, r3, #1
 801033a:	9219      	str	r2, [sp, #100]	@ 0x64
 801033c:	785a      	ldrb	r2, [r3, #1]
 801033e:	2a30      	cmp	r2, #48	@ 0x30
 8010340:	d0f8      	beq.n	8010334 <_strtod_l+0x1e4>
 8010342:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010346:	2b08      	cmp	r3, #8
 8010348:	f200 84d2 	bhi.w	8010cf0 <_strtod_l+0xba0>
 801034c:	4681      	mov	r9, r0
 801034e:	2000      	movs	r0, #0
 8010350:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010352:	4605      	mov	r5, r0
 8010354:	930c      	str	r3, [sp, #48]	@ 0x30
 8010356:	3a30      	subs	r2, #48	@ 0x30
 8010358:	f100 0301 	add.w	r3, r0, #1
 801035c:	d02a      	beq.n	80103b4 <_strtod_l+0x264>
 801035e:	4499      	add	r9, r3
 8010360:	eb00 0c05 	add.w	ip, r0, r5
 8010364:	462b      	mov	r3, r5
 8010366:	210a      	movs	r1, #10
 8010368:	4563      	cmp	r3, ip
 801036a:	d10d      	bne.n	8010388 <_strtod_l+0x238>
 801036c:	1c69      	adds	r1, r5, #1
 801036e:	4401      	add	r1, r0
 8010370:	4428      	add	r0, r5
 8010372:	2808      	cmp	r0, #8
 8010374:	dc16      	bgt.n	80103a4 <_strtod_l+0x254>
 8010376:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010378:	230a      	movs	r3, #10
 801037a:	fb03 2300 	mla	r3, r3, r0, r2
 801037e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010380:	2300      	movs	r3, #0
 8010382:	e018      	b.n	80103b6 <_strtod_l+0x266>
 8010384:	4638      	mov	r0, r7
 8010386:	e7da      	b.n	801033e <_strtod_l+0x1ee>
 8010388:	2b08      	cmp	r3, #8
 801038a:	f103 0301 	add.w	r3, r3, #1
 801038e:	dc03      	bgt.n	8010398 <_strtod_l+0x248>
 8010390:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010392:	434e      	muls	r6, r1
 8010394:	960a      	str	r6, [sp, #40]	@ 0x28
 8010396:	e7e7      	b.n	8010368 <_strtod_l+0x218>
 8010398:	2b10      	cmp	r3, #16
 801039a:	bfde      	ittt	le
 801039c:	9e08      	ldrle	r6, [sp, #32]
 801039e:	434e      	mulle	r6, r1
 80103a0:	9608      	strle	r6, [sp, #32]
 80103a2:	e7e1      	b.n	8010368 <_strtod_l+0x218>
 80103a4:	280f      	cmp	r0, #15
 80103a6:	dceb      	bgt.n	8010380 <_strtod_l+0x230>
 80103a8:	9808      	ldr	r0, [sp, #32]
 80103aa:	230a      	movs	r3, #10
 80103ac:	fb03 2300 	mla	r3, r3, r0, r2
 80103b0:	9308      	str	r3, [sp, #32]
 80103b2:	e7e5      	b.n	8010380 <_strtod_l+0x230>
 80103b4:	4629      	mov	r1, r5
 80103b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80103b8:	460d      	mov	r5, r1
 80103ba:	1c50      	adds	r0, r2, #1
 80103bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80103be:	4618      	mov	r0, r3
 80103c0:	7852      	ldrb	r2, [r2, #1]
 80103c2:	e7b1      	b.n	8010328 <_strtod_l+0x1d8>
 80103c4:	f04f 0900 	mov.w	r9, #0
 80103c8:	2301      	movs	r3, #1
 80103ca:	e77c      	b.n	80102c6 <_strtod_l+0x176>
 80103cc:	f04f 0c00 	mov.w	ip, #0
 80103d0:	1ca2      	adds	r2, r4, #2
 80103d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80103d4:	78a2      	ldrb	r2, [r4, #2]
 80103d6:	e784      	b.n	80102e2 <_strtod_l+0x192>
 80103d8:	f04f 0c01 	mov.w	ip, #1
 80103dc:	e7f8      	b.n	80103d0 <_strtod_l+0x280>
 80103de:	bf00      	nop
 80103e0:	08014df8 	.word	0x08014df8
 80103e4:	08014de0 	.word	0x08014de0
 80103e8:	7ff00000 	.word	0x7ff00000
 80103ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80103ee:	1c51      	adds	r1, r2, #1
 80103f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80103f2:	7852      	ldrb	r2, [r2, #1]
 80103f4:	2a30      	cmp	r2, #48	@ 0x30
 80103f6:	d0f9      	beq.n	80103ec <_strtod_l+0x29c>
 80103f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80103fc:	2908      	cmp	r1, #8
 80103fe:	f63f af76 	bhi.w	80102ee <_strtod_l+0x19e>
 8010402:	3a30      	subs	r2, #48	@ 0x30
 8010404:	f04f 080a 	mov.w	r8, #10
 8010408:	920e      	str	r2, [sp, #56]	@ 0x38
 801040a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801040c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801040e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010410:	1c56      	adds	r6, r2, #1
 8010412:	9619      	str	r6, [sp, #100]	@ 0x64
 8010414:	7852      	ldrb	r2, [r2, #1]
 8010416:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801041a:	f1be 0f09 	cmp.w	lr, #9
 801041e:	d939      	bls.n	8010494 <_strtod_l+0x344>
 8010420:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010422:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010426:	1a76      	subs	r6, r6, r1
 8010428:	2e08      	cmp	r6, #8
 801042a:	dc03      	bgt.n	8010434 <_strtod_l+0x2e4>
 801042c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801042e:	4588      	cmp	r8, r1
 8010430:	bfa8      	it	ge
 8010432:	4688      	movge	r8, r1
 8010434:	f1bc 0f00 	cmp.w	ip, #0
 8010438:	d001      	beq.n	801043e <_strtod_l+0x2ee>
 801043a:	f1c8 0800 	rsb	r8, r8, #0
 801043e:	2d00      	cmp	r5, #0
 8010440:	d14e      	bne.n	80104e0 <_strtod_l+0x390>
 8010442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010444:	4308      	orrs	r0, r1
 8010446:	f47f aebc 	bne.w	80101c2 <_strtod_l+0x72>
 801044a:	2b00      	cmp	r3, #0
 801044c:	f47f aed4 	bne.w	80101f8 <_strtod_l+0xa8>
 8010450:	2a69      	cmp	r2, #105	@ 0x69
 8010452:	d028      	beq.n	80104a6 <_strtod_l+0x356>
 8010454:	dc25      	bgt.n	80104a2 <_strtod_l+0x352>
 8010456:	2a49      	cmp	r2, #73	@ 0x49
 8010458:	d025      	beq.n	80104a6 <_strtod_l+0x356>
 801045a:	2a4e      	cmp	r2, #78	@ 0x4e
 801045c:	f47f aecc 	bne.w	80101f8 <_strtod_l+0xa8>
 8010460:	499b      	ldr	r1, [pc, #620]	@ (80106d0 <_strtod_l+0x580>)
 8010462:	a819      	add	r0, sp, #100	@ 0x64
 8010464:	f001 f960 	bl	8011728 <__match>
 8010468:	2800      	cmp	r0, #0
 801046a:	f43f aec5 	beq.w	80101f8 <_strtod_l+0xa8>
 801046e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b28      	cmp	r3, #40	@ 0x28
 8010474:	d12e      	bne.n	80104d4 <_strtod_l+0x384>
 8010476:	aa1c      	add	r2, sp, #112	@ 0x70
 8010478:	4996      	ldr	r1, [pc, #600]	@ (80106d4 <_strtod_l+0x584>)
 801047a:	a819      	add	r0, sp, #100	@ 0x64
 801047c:	f001 f968 	bl	8011750 <__hexnan>
 8010480:	2805      	cmp	r0, #5
 8010482:	d127      	bne.n	80104d4 <_strtod_l+0x384>
 8010484:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010486:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801048a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801048e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010492:	e696      	b.n	80101c2 <_strtod_l+0x72>
 8010494:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010496:	fb08 2101 	mla	r1, r8, r1, r2
 801049a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801049e:	920e      	str	r2, [sp, #56]	@ 0x38
 80104a0:	e7b5      	b.n	801040e <_strtod_l+0x2be>
 80104a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80104a4:	e7da      	b.n	801045c <_strtod_l+0x30c>
 80104a6:	498c      	ldr	r1, [pc, #560]	@ (80106d8 <_strtod_l+0x588>)
 80104a8:	a819      	add	r0, sp, #100	@ 0x64
 80104aa:	f001 f93d 	bl	8011728 <__match>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	f43f aea2 	beq.w	80101f8 <_strtod_l+0xa8>
 80104b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104b6:	a819      	add	r0, sp, #100	@ 0x64
 80104b8:	4988      	ldr	r1, [pc, #544]	@ (80106dc <_strtod_l+0x58c>)
 80104ba:	3b01      	subs	r3, #1
 80104bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80104be:	f001 f933 	bl	8011728 <__match>
 80104c2:	b910      	cbnz	r0, 80104ca <_strtod_l+0x37a>
 80104c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104c6:	3301      	adds	r3, #1
 80104c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80104ca:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80106ec <_strtod_l+0x59c>
 80104ce:	f04f 0a00 	mov.w	sl, #0
 80104d2:	e676      	b.n	80101c2 <_strtod_l+0x72>
 80104d4:	4882      	ldr	r0, [pc, #520]	@ (80106e0 <_strtod_l+0x590>)
 80104d6:	f000 fe67 	bl	80111a8 <nan>
 80104da:	ec5b ab10 	vmov	sl, fp, d0
 80104de:	e670      	b.n	80101c2 <_strtod_l+0x72>
 80104e0:	eba8 0309 	sub.w	r3, r8, r9
 80104e4:	2f00      	cmp	r7, #0
 80104e6:	bf08      	it	eq
 80104e8:	462f      	moveq	r7, r5
 80104ea:	2d10      	cmp	r5, #16
 80104ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104ee:	462c      	mov	r4, r5
 80104f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80104f2:	bfa8      	it	ge
 80104f4:	2410      	movge	r4, #16
 80104f6:	f7f0 f819 	bl	800052c <__aeabi_ui2d>
 80104fa:	2d09      	cmp	r5, #9
 80104fc:	4682      	mov	sl, r0
 80104fe:	468b      	mov	fp, r1
 8010500:	dc13      	bgt.n	801052a <_strtod_l+0x3da>
 8010502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	f43f ae5c 	beq.w	80101c2 <_strtod_l+0x72>
 801050a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801050c:	dd78      	ble.n	8010600 <_strtod_l+0x4b0>
 801050e:	2b16      	cmp	r3, #22
 8010510:	dc5f      	bgt.n	80105d2 <_strtod_l+0x482>
 8010512:	4974      	ldr	r1, [pc, #464]	@ (80106e4 <_strtod_l+0x594>)
 8010514:	4652      	mov	r2, sl
 8010516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801051a:	465b      	mov	r3, fp
 801051c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010520:	f7f0 f87e 	bl	8000620 <__aeabi_dmul>
 8010524:	4682      	mov	sl, r0
 8010526:	468b      	mov	fp, r1
 8010528:	e64b      	b.n	80101c2 <_strtod_l+0x72>
 801052a:	4b6e      	ldr	r3, [pc, #440]	@ (80106e4 <_strtod_l+0x594>)
 801052c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010530:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010534:	f7f0 f874 	bl	8000620 <__aeabi_dmul>
 8010538:	4682      	mov	sl, r0
 801053a:	468b      	mov	fp, r1
 801053c:	9808      	ldr	r0, [sp, #32]
 801053e:	f7ef fff5 	bl	800052c <__aeabi_ui2d>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	4650      	mov	r0, sl
 8010548:	4659      	mov	r1, fp
 801054a:	f7ef feb3 	bl	80002b4 <__adddf3>
 801054e:	2d0f      	cmp	r5, #15
 8010550:	4682      	mov	sl, r0
 8010552:	468b      	mov	fp, r1
 8010554:	ddd5      	ble.n	8010502 <_strtod_l+0x3b2>
 8010556:	1b2c      	subs	r4, r5, r4
 8010558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801055a:	441c      	add	r4, r3
 801055c:	2c00      	cmp	r4, #0
 801055e:	f340 8096 	ble.w	801068e <_strtod_l+0x53e>
 8010562:	f014 030f 	ands.w	r3, r4, #15
 8010566:	d00a      	beq.n	801057e <_strtod_l+0x42e>
 8010568:	495e      	ldr	r1, [pc, #376]	@ (80106e4 <_strtod_l+0x594>)
 801056a:	4652      	mov	r2, sl
 801056c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010570:	465b      	mov	r3, fp
 8010572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010576:	f7f0 f853 	bl	8000620 <__aeabi_dmul>
 801057a:	4682      	mov	sl, r0
 801057c:	468b      	mov	fp, r1
 801057e:	f034 040f 	bics.w	r4, r4, #15
 8010582:	d073      	beq.n	801066c <_strtod_l+0x51c>
 8010584:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010588:	dd48      	ble.n	801061c <_strtod_l+0x4cc>
 801058a:	2400      	movs	r4, #0
 801058c:	46a0      	mov	r8, r4
 801058e:	46a1      	mov	r9, r4
 8010590:	940a      	str	r4, [sp, #40]	@ 0x28
 8010592:	2322      	movs	r3, #34	@ 0x22
 8010594:	9a05      	ldr	r2, [sp, #20]
 8010596:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80106ec <_strtod_l+0x59c>
 801059a:	f04f 0a00 	mov.w	sl, #0
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f43f ae0d 	beq.w	80101c2 <_strtod_l+0x72>
 80105a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80105aa:	9805      	ldr	r0, [sp, #20]
 80105ac:	f7ff f934 	bl	800f818 <_Bfree>
 80105b0:	4649      	mov	r1, r9
 80105b2:	9805      	ldr	r0, [sp, #20]
 80105b4:	f7ff f930 	bl	800f818 <_Bfree>
 80105b8:	4641      	mov	r1, r8
 80105ba:	9805      	ldr	r0, [sp, #20]
 80105bc:	f7ff f92c 	bl	800f818 <_Bfree>
 80105c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80105c2:	9805      	ldr	r0, [sp, #20]
 80105c4:	f7ff f928 	bl	800f818 <_Bfree>
 80105c8:	4621      	mov	r1, r4
 80105ca:	9805      	ldr	r0, [sp, #20]
 80105cc:	f7ff f924 	bl	800f818 <_Bfree>
 80105d0:	e5f7      	b.n	80101c2 <_strtod_l+0x72>
 80105d2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80105d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105d8:	4293      	cmp	r3, r2
 80105da:	dbbc      	blt.n	8010556 <_strtod_l+0x406>
 80105dc:	f1c5 050f 	rsb	r5, r5, #15
 80105e0:	4c40      	ldr	r4, [pc, #256]	@ (80106e4 <_strtod_l+0x594>)
 80105e2:	4652      	mov	r2, sl
 80105e4:	465b      	mov	r3, fp
 80105e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80105ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ee:	f7f0 f817 	bl	8000620 <__aeabi_dmul>
 80105f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105f4:	1b5d      	subs	r5, r3, r5
 80105f6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80105fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80105fe:	e78f      	b.n	8010520 <_strtod_l+0x3d0>
 8010600:	3316      	adds	r3, #22
 8010602:	dba8      	blt.n	8010556 <_strtod_l+0x406>
 8010604:	eba9 0808 	sub.w	r8, r9, r8
 8010608:	4b36      	ldr	r3, [pc, #216]	@ (80106e4 <_strtod_l+0x594>)
 801060a:	4650      	mov	r0, sl
 801060c:	4659      	mov	r1, fp
 801060e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010612:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010616:	f7f0 f92d 	bl	8000874 <__aeabi_ddiv>
 801061a:	e783      	b.n	8010524 <_strtod_l+0x3d4>
 801061c:	4b32      	ldr	r3, [pc, #200]	@ (80106e8 <_strtod_l+0x598>)
 801061e:	1124      	asrs	r4, r4, #4
 8010620:	4650      	mov	r0, sl
 8010622:	4659      	mov	r1, fp
 8010624:	9308      	str	r3, [sp, #32]
 8010626:	2300      	movs	r3, #0
 8010628:	461e      	mov	r6, r3
 801062a:	2c01      	cmp	r4, #1
 801062c:	dc21      	bgt.n	8010672 <_strtod_l+0x522>
 801062e:	b10b      	cbz	r3, 8010634 <_strtod_l+0x4e4>
 8010630:	4682      	mov	sl, r0
 8010632:	468b      	mov	fp, r1
 8010634:	492c      	ldr	r1, [pc, #176]	@ (80106e8 <_strtod_l+0x598>)
 8010636:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801063a:	4652      	mov	r2, sl
 801063c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010640:	465b      	mov	r3, fp
 8010642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010646:	f7ef ffeb 	bl	8000620 <__aeabi_dmul>
 801064a:	4b28      	ldr	r3, [pc, #160]	@ (80106ec <_strtod_l+0x59c>)
 801064c:	460a      	mov	r2, r1
 801064e:	4682      	mov	sl, r0
 8010650:	400b      	ands	r3, r1
 8010652:	4927      	ldr	r1, [pc, #156]	@ (80106f0 <_strtod_l+0x5a0>)
 8010654:	428b      	cmp	r3, r1
 8010656:	d898      	bhi.n	801058a <_strtod_l+0x43a>
 8010658:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801065c:	428b      	cmp	r3, r1
 801065e:	bf86      	itte	hi
 8010660:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80106f4 <_strtod_l+0x5a4>
 8010664:	f04f 3aff 	movhi.w	sl, #4294967295
 8010668:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801066c:	2300      	movs	r3, #0
 801066e:	9308      	str	r3, [sp, #32]
 8010670:	e07a      	b.n	8010768 <_strtod_l+0x618>
 8010672:	07e2      	lsls	r2, r4, #31
 8010674:	d505      	bpl.n	8010682 <_strtod_l+0x532>
 8010676:	9b08      	ldr	r3, [sp, #32]
 8010678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067c:	f7ef ffd0 	bl	8000620 <__aeabi_dmul>
 8010680:	2301      	movs	r3, #1
 8010682:	9a08      	ldr	r2, [sp, #32]
 8010684:	3601      	adds	r6, #1
 8010686:	1064      	asrs	r4, r4, #1
 8010688:	3208      	adds	r2, #8
 801068a:	9208      	str	r2, [sp, #32]
 801068c:	e7cd      	b.n	801062a <_strtod_l+0x4da>
 801068e:	d0ed      	beq.n	801066c <_strtod_l+0x51c>
 8010690:	4264      	negs	r4, r4
 8010692:	f014 020f 	ands.w	r2, r4, #15
 8010696:	d00a      	beq.n	80106ae <_strtod_l+0x55e>
 8010698:	4b12      	ldr	r3, [pc, #72]	@ (80106e4 <_strtod_l+0x594>)
 801069a:	4650      	mov	r0, sl
 801069c:	4659      	mov	r1, fp
 801069e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a6:	f7f0 f8e5 	bl	8000874 <__aeabi_ddiv>
 80106aa:	4682      	mov	sl, r0
 80106ac:	468b      	mov	fp, r1
 80106ae:	1124      	asrs	r4, r4, #4
 80106b0:	d0dc      	beq.n	801066c <_strtod_l+0x51c>
 80106b2:	2c1f      	cmp	r4, #31
 80106b4:	dd20      	ble.n	80106f8 <_strtod_l+0x5a8>
 80106b6:	2400      	movs	r4, #0
 80106b8:	46a0      	mov	r8, r4
 80106ba:	46a1      	mov	r9, r4
 80106bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80106be:	2322      	movs	r3, #34	@ 0x22
 80106c0:	9a05      	ldr	r2, [sp, #20]
 80106c2:	f04f 0a00 	mov.w	sl, #0
 80106c6:	f04f 0b00 	mov.w	fp, #0
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	e768      	b.n	80105a0 <_strtod_l+0x450>
 80106ce:	bf00      	nop
 80106d0:	08014bce 	.word	0x08014bce
 80106d4:	08014de4 	.word	0x08014de4
 80106d8:	08014bc6 	.word	0x08014bc6
 80106dc:	08014bfd 	.word	0x08014bfd
 80106e0:	08014e8c 	.word	0x08014e8c
 80106e4:	08014d18 	.word	0x08014d18
 80106e8:	08014cf0 	.word	0x08014cf0
 80106ec:	7ff00000 	.word	0x7ff00000
 80106f0:	7ca00000 	.word	0x7ca00000
 80106f4:	7fefffff 	.word	0x7fefffff
 80106f8:	f014 0310 	ands.w	r3, r4, #16
 80106fc:	4650      	mov	r0, sl
 80106fe:	4659      	mov	r1, fp
 8010700:	4ea9      	ldr	r6, [pc, #676]	@ (80109a8 <_strtod_l+0x858>)
 8010702:	bf18      	it	ne
 8010704:	236a      	movne	r3, #106	@ 0x6a
 8010706:	9308      	str	r3, [sp, #32]
 8010708:	2300      	movs	r3, #0
 801070a:	07e2      	lsls	r2, r4, #31
 801070c:	d504      	bpl.n	8010718 <_strtod_l+0x5c8>
 801070e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010712:	f7ef ff85 	bl	8000620 <__aeabi_dmul>
 8010716:	2301      	movs	r3, #1
 8010718:	1064      	asrs	r4, r4, #1
 801071a:	f106 0608 	add.w	r6, r6, #8
 801071e:	d1f4      	bne.n	801070a <_strtod_l+0x5ba>
 8010720:	b10b      	cbz	r3, 8010726 <_strtod_l+0x5d6>
 8010722:	4682      	mov	sl, r0
 8010724:	468b      	mov	fp, r1
 8010726:	9b08      	ldr	r3, [sp, #32]
 8010728:	b1b3      	cbz	r3, 8010758 <_strtod_l+0x608>
 801072a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801072e:	4659      	mov	r1, fp
 8010730:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010734:	2b00      	cmp	r3, #0
 8010736:	dd0f      	ble.n	8010758 <_strtod_l+0x608>
 8010738:	2b1f      	cmp	r3, #31
 801073a:	dd55      	ble.n	80107e8 <_strtod_l+0x698>
 801073c:	2b34      	cmp	r3, #52	@ 0x34
 801073e:	f04f 0a00 	mov.w	sl, #0
 8010742:	bfdb      	ittet	le
 8010744:	f04f 33ff 	movle.w	r3, #4294967295
 8010748:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801074c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010750:	4093      	lslle	r3, r2
 8010752:	bfd8      	it	le
 8010754:	ea03 0b01 	andle.w	fp, r3, r1
 8010758:	2200      	movs	r2, #0
 801075a:	2300      	movs	r3, #0
 801075c:	4650      	mov	r0, sl
 801075e:	4659      	mov	r1, fp
 8010760:	f7f0 f9c6 	bl	8000af0 <__aeabi_dcmpeq>
 8010764:	2800      	cmp	r0, #0
 8010766:	d1a6      	bne.n	80106b6 <_strtod_l+0x566>
 8010768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801076a:	463a      	mov	r2, r7
 801076c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	462b      	mov	r3, r5
 8010772:	9805      	ldr	r0, [sp, #20]
 8010774:	f7ff f8ba 	bl	800f8ec <__s2b>
 8010778:	900a      	str	r0, [sp, #40]	@ 0x28
 801077a:	2800      	cmp	r0, #0
 801077c:	f43f af05 	beq.w	801058a <_strtod_l+0x43a>
 8010780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010782:	eba9 0308 	sub.w	r3, r9, r8
 8010786:	2400      	movs	r4, #0
 8010788:	2a00      	cmp	r2, #0
 801078a:	46a0      	mov	r8, r4
 801078c:	bfa8      	it	ge
 801078e:	2300      	movge	r3, #0
 8010790:	9312      	str	r3, [sp, #72]	@ 0x48
 8010792:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010796:	9316      	str	r3, [sp, #88]	@ 0x58
 8010798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801079a:	9805      	ldr	r0, [sp, #20]
 801079c:	6859      	ldr	r1, [r3, #4]
 801079e:	f7fe fffb 	bl	800f798 <_Balloc>
 80107a2:	4681      	mov	r9, r0
 80107a4:	2800      	cmp	r0, #0
 80107a6:	f43f aef4 	beq.w	8010592 <_strtod_l+0x442>
 80107aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ac:	300c      	adds	r0, #12
 80107ae:	691a      	ldr	r2, [r3, #16]
 80107b0:	f103 010c 	add.w	r1, r3, #12
 80107b4:	3202      	adds	r2, #2
 80107b6:	0092      	lsls	r2, r2, #2
 80107b8:	f7fe f889 	bl	800e8ce <memcpy>
 80107bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80107be:	a91b      	add	r1, sp, #108	@ 0x6c
 80107c0:	9805      	ldr	r0, [sp, #20]
 80107c2:	ec4b ab10 	vmov	d0, sl, fp
 80107c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80107ca:	f7ff fbd3 	bl	800ff74 <__d2b>
 80107ce:	901a      	str	r0, [sp, #104]	@ 0x68
 80107d0:	2800      	cmp	r0, #0
 80107d2:	f43f aede 	beq.w	8010592 <_strtod_l+0x442>
 80107d6:	2101      	movs	r1, #1
 80107d8:	9805      	ldr	r0, [sp, #20]
 80107da:	f7ff f91d 	bl	800fa18 <__i2b>
 80107de:	4680      	mov	r8, r0
 80107e0:	b948      	cbnz	r0, 80107f6 <_strtod_l+0x6a6>
 80107e2:	f04f 0800 	mov.w	r8, #0
 80107e6:	e6d4      	b.n	8010592 <_strtod_l+0x442>
 80107e8:	f04f 32ff 	mov.w	r2, #4294967295
 80107ec:	fa02 f303 	lsl.w	r3, r2, r3
 80107f0:	ea03 0a0a 	and.w	sl, r3, sl
 80107f4:	e7b0      	b.n	8010758 <_strtod_l+0x608>
 80107f6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80107f8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80107fa:	2d00      	cmp	r5, #0
 80107fc:	bfa9      	itett	ge
 80107fe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010800:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010802:	18ef      	addge	r7, r5, r3
 8010804:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010806:	bfb8      	it	lt
 8010808:	1b5e      	sublt	r6, r3, r5
 801080a:	9b08      	ldr	r3, [sp, #32]
 801080c:	bfb8      	it	lt
 801080e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010810:	1aed      	subs	r5, r5, r3
 8010812:	4b66      	ldr	r3, [pc, #408]	@ (80109ac <_strtod_l+0x85c>)
 8010814:	4415      	add	r5, r2
 8010816:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801081a:	3d01      	subs	r5, #1
 801081c:	429d      	cmp	r5, r3
 801081e:	da4f      	bge.n	80108c0 <_strtod_l+0x770>
 8010820:	1b5b      	subs	r3, r3, r5
 8010822:	2101      	movs	r1, #1
 8010824:	2b1f      	cmp	r3, #31
 8010826:	eba2 0203 	sub.w	r2, r2, r3
 801082a:	dc3d      	bgt.n	80108a8 <_strtod_l+0x758>
 801082c:	fa01 f303 	lsl.w	r3, r1, r3
 8010830:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010832:	2300      	movs	r3, #0
 8010834:	9310      	str	r3, [sp, #64]	@ 0x40
 8010836:	18bd      	adds	r5, r7, r2
 8010838:	9b08      	ldr	r3, [sp, #32]
 801083a:	4416      	add	r6, r2
 801083c:	42af      	cmp	r7, r5
 801083e:	441e      	add	r6, r3
 8010840:	463b      	mov	r3, r7
 8010842:	bfa8      	it	ge
 8010844:	462b      	movge	r3, r5
 8010846:	42b3      	cmp	r3, r6
 8010848:	bfa8      	it	ge
 801084a:	4633      	movge	r3, r6
 801084c:	2b00      	cmp	r3, #0
 801084e:	bfc2      	ittt	gt
 8010850:	1aed      	subgt	r5, r5, r3
 8010852:	1af6      	subgt	r6, r6, r3
 8010854:	1aff      	subgt	r7, r7, r3
 8010856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010858:	2b00      	cmp	r3, #0
 801085a:	dd16      	ble.n	801088a <_strtod_l+0x73a>
 801085c:	4641      	mov	r1, r8
 801085e:	461a      	mov	r2, r3
 8010860:	9805      	ldr	r0, [sp, #20]
 8010862:	f7ff f999 	bl	800fb98 <__pow5mult>
 8010866:	4680      	mov	r8, r0
 8010868:	2800      	cmp	r0, #0
 801086a:	d0ba      	beq.n	80107e2 <_strtod_l+0x692>
 801086c:	4601      	mov	r1, r0
 801086e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010870:	9805      	ldr	r0, [sp, #20]
 8010872:	f7ff f8e7 	bl	800fa44 <__multiply>
 8010876:	900e      	str	r0, [sp, #56]	@ 0x38
 8010878:	2800      	cmp	r0, #0
 801087a:	f43f ae8a 	beq.w	8010592 <_strtod_l+0x442>
 801087e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010880:	9805      	ldr	r0, [sp, #20]
 8010882:	f7fe ffc9 	bl	800f818 <_Bfree>
 8010886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010888:	931a      	str	r3, [sp, #104]	@ 0x68
 801088a:	2d00      	cmp	r5, #0
 801088c:	dc1d      	bgt.n	80108ca <_strtod_l+0x77a>
 801088e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010890:	2b00      	cmp	r3, #0
 8010892:	dd23      	ble.n	80108dc <_strtod_l+0x78c>
 8010894:	4649      	mov	r1, r9
 8010896:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010898:	9805      	ldr	r0, [sp, #20]
 801089a:	f7ff f97d 	bl	800fb98 <__pow5mult>
 801089e:	4681      	mov	r9, r0
 80108a0:	b9e0      	cbnz	r0, 80108dc <_strtod_l+0x78c>
 80108a2:	f04f 0900 	mov.w	r9, #0
 80108a6:	e674      	b.n	8010592 <_strtod_l+0x442>
 80108a8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80108ac:	9113      	str	r1, [sp, #76]	@ 0x4c
 80108ae:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80108b2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80108b6:	35e2      	adds	r5, #226	@ 0xe2
 80108b8:	fa01 f305 	lsl.w	r3, r1, r5
 80108bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80108be:	e7ba      	b.n	8010836 <_strtod_l+0x6e6>
 80108c0:	2300      	movs	r3, #0
 80108c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80108c4:	2301      	movs	r3, #1
 80108c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80108c8:	e7b5      	b.n	8010836 <_strtod_l+0x6e6>
 80108ca:	462a      	mov	r2, r5
 80108cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80108ce:	9805      	ldr	r0, [sp, #20]
 80108d0:	f7ff f9bc 	bl	800fc4c <__lshift>
 80108d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d1d9      	bne.n	801088e <_strtod_l+0x73e>
 80108da:	e65a      	b.n	8010592 <_strtod_l+0x442>
 80108dc:	2e00      	cmp	r6, #0
 80108de:	dd07      	ble.n	80108f0 <_strtod_l+0x7a0>
 80108e0:	4649      	mov	r1, r9
 80108e2:	4632      	mov	r2, r6
 80108e4:	9805      	ldr	r0, [sp, #20]
 80108e6:	f7ff f9b1 	bl	800fc4c <__lshift>
 80108ea:	4681      	mov	r9, r0
 80108ec:	2800      	cmp	r0, #0
 80108ee:	d0d8      	beq.n	80108a2 <_strtod_l+0x752>
 80108f0:	2f00      	cmp	r7, #0
 80108f2:	dd08      	ble.n	8010906 <_strtod_l+0x7b6>
 80108f4:	4641      	mov	r1, r8
 80108f6:	463a      	mov	r2, r7
 80108f8:	9805      	ldr	r0, [sp, #20]
 80108fa:	f7ff f9a7 	bl	800fc4c <__lshift>
 80108fe:	4680      	mov	r8, r0
 8010900:	2800      	cmp	r0, #0
 8010902:	f43f ae46 	beq.w	8010592 <_strtod_l+0x442>
 8010906:	464a      	mov	r2, r9
 8010908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801090a:	9805      	ldr	r0, [sp, #20]
 801090c:	f7ff fa26 	bl	800fd5c <__mdiff>
 8010910:	4604      	mov	r4, r0
 8010912:	2800      	cmp	r0, #0
 8010914:	f43f ae3d 	beq.w	8010592 <_strtod_l+0x442>
 8010918:	68c3      	ldr	r3, [r0, #12]
 801091a:	4641      	mov	r1, r8
 801091c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801091e:	2300      	movs	r3, #0
 8010920:	60c3      	str	r3, [r0, #12]
 8010922:	f7ff f9ff 	bl	800fd24 <__mcmp>
 8010926:	2800      	cmp	r0, #0
 8010928:	da46      	bge.n	80109b8 <_strtod_l+0x868>
 801092a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801092c:	ea53 030a 	orrs.w	r3, r3, sl
 8010930:	d16c      	bne.n	8010a0c <_strtod_l+0x8bc>
 8010932:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010936:	2b00      	cmp	r3, #0
 8010938:	d168      	bne.n	8010a0c <_strtod_l+0x8bc>
 801093a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801093e:	0d1b      	lsrs	r3, r3, #20
 8010940:	051b      	lsls	r3, r3, #20
 8010942:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010946:	d961      	bls.n	8010a0c <_strtod_l+0x8bc>
 8010948:	6963      	ldr	r3, [r4, #20]
 801094a:	b913      	cbnz	r3, 8010952 <_strtod_l+0x802>
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	2b01      	cmp	r3, #1
 8010950:	dd5c      	ble.n	8010a0c <_strtod_l+0x8bc>
 8010952:	4621      	mov	r1, r4
 8010954:	2201      	movs	r2, #1
 8010956:	9805      	ldr	r0, [sp, #20]
 8010958:	f7ff f978 	bl	800fc4c <__lshift>
 801095c:	4641      	mov	r1, r8
 801095e:	4604      	mov	r4, r0
 8010960:	f7ff f9e0 	bl	800fd24 <__mcmp>
 8010964:	2800      	cmp	r0, #0
 8010966:	dd51      	ble.n	8010a0c <_strtod_l+0x8bc>
 8010968:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801096c:	9a08      	ldr	r2, [sp, #32]
 801096e:	0d1b      	lsrs	r3, r3, #20
 8010970:	051b      	lsls	r3, r3, #20
 8010972:	2a00      	cmp	r2, #0
 8010974:	d06b      	beq.n	8010a4e <_strtod_l+0x8fe>
 8010976:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801097a:	d868      	bhi.n	8010a4e <_strtod_l+0x8fe>
 801097c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010980:	f67f ae9d 	bls.w	80106be <_strtod_l+0x56e>
 8010984:	4b0a      	ldr	r3, [pc, #40]	@ (80109b0 <_strtod_l+0x860>)
 8010986:	4650      	mov	r0, sl
 8010988:	4659      	mov	r1, fp
 801098a:	2200      	movs	r2, #0
 801098c:	f7ef fe48 	bl	8000620 <__aeabi_dmul>
 8010990:	4b08      	ldr	r3, [pc, #32]	@ (80109b4 <_strtod_l+0x864>)
 8010992:	4682      	mov	sl, r0
 8010994:	468b      	mov	fp, r1
 8010996:	400b      	ands	r3, r1
 8010998:	2b00      	cmp	r3, #0
 801099a:	f47f ae05 	bne.w	80105a8 <_strtod_l+0x458>
 801099e:	2322      	movs	r3, #34	@ 0x22
 80109a0:	9a05      	ldr	r2, [sp, #20]
 80109a2:	6013      	str	r3, [r2, #0]
 80109a4:	e600      	b.n	80105a8 <_strtod_l+0x458>
 80109a6:	bf00      	nop
 80109a8:	08014e10 	.word	0x08014e10
 80109ac:	fffffc02 	.word	0xfffffc02
 80109b0:	39500000 	.word	0x39500000
 80109b4:	7ff00000 	.word	0x7ff00000
 80109b8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80109bc:	d165      	bne.n	8010a8a <_strtod_l+0x93a>
 80109be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109c4:	b35a      	cbz	r2, 8010a1e <_strtod_l+0x8ce>
 80109c6:	4a9e      	ldr	r2, [pc, #632]	@ (8010c40 <_strtod_l+0xaf0>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d12b      	bne.n	8010a24 <_strtod_l+0x8d4>
 80109cc:	9b08      	ldr	r3, [sp, #32]
 80109ce:	4651      	mov	r1, sl
 80109d0:	b303      	cbz	r3, 8010a14 <_strtod_l+0x8c4>
 80109d2:	465a      	mov	r2, fp
 80109d4:	4b9b      	ldr	r3, [pc, #620]	@ (8010c44 <_strtod_l+0xaf4>)
 80109d6:	4013      	ands	r3, r2
 80109d8:	f04f 32ff 	mov.w	r2, #4294967295
 80109dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80109e0:	d81b      	bhi.n	8010a1a <_strtod_l+0x8ca>
 80109e2:	0d1b      	lsrs	r3, r3, #20
 80109e4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80109e8:	fa02 f303 	lsl.w	r3, r2, r3
 80109ec:	4299      	cmp	r1, r3
 80109ee:	d119      	bne.n	8010a24 <_strtod_l+0x8d4>
 80109f0:	4b95      	ldr	r3, [pc, #596]	@ (8010c48 <_strtod_l+0xaf8>)
 80109f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d102      	bne.n	80109fe <_strtod_l+0x8ae>
 80109f8:	3101      	adds	r1, #1
 80109fa:	f43f adca 	beq.w	8010592 <_strtod_l+0x442>
 80109fe:	4b91      	ldr	r3, [pc, #580]	@ (8010c44 <_strtod_l+0xaf4>)
 8010a00:	f04f 0a00 	mov.w	sl, #0
 8010a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a06:	401a      	ands	r2, r3
 8010a08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010a0c:	9b08      	ldr	r3, [sp, #32]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1b8      	bne.n	8010984 <_strtod_l+0x834>
 8010a12:	e5c9      	b.n	80105a8 <_strtod_l+0x458>
 8010a14:	f04f 33ff 	mov.w	r3, #4294967295
 8010a18:	e7e8      	b.n	80109ec <_strtod_l+0x89c>
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	e7e6      	b.n	80109ec <_strtod_l+0x89c>
 8010a1e:	ea53 030a 	orrs.w	r3, r3, sl
 8010a22:	d0a1      	beq.n	8010968 <_strtod_l+0x818>
 8010a24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a26:	b1db      	cbz	r3, 8010a60 <_strtod_l+0x910>
 8010a28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a2a:	4213      	tst	r3, r2
 8010a2c:	d0ee      	beq.n	8010a0c <_strtod_l+0x8bc>
 8010a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a30:	4650      	mov	r0, sl
 8010a32:	9a08      	ldr	r2, [sp, #32]
 8010a34:	4659      	mov	r1, fp
 8010a36:	b1bb      	cbz	r3, 8010a68 <_strtod_l+0x918>
 8010a38:	f7ff fb6a 	bl	8010110 <sulp>
 8010a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a40:	ec53 2b10 	vmov	r2, r3, d0
 8010a44:	f7ef fc36 	bl	80002b4 <__adddf3>
 8010a48:	4682      	mov	sl, r0
 8010a4a:	468b      	mov	fp, r1
 8010a4c:	e7de      	b.n	8010a0c <_strtod_l+0x8bc>
 8010a4e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010a52:	f04f 3aff 	mov.w	sl, #4294967295
 8010a56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010a5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010a5e:	e7d5      	b.n	8010a0c <_strtod_l+0x8bc>
 8010a60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010a62:	ea13 0f0a 	tst.w	r3, sl
 8010a66:	e7e1      	b.n	8010a2c <_strtod_l+0x8dc>
 8010a68:	f7ff fb52 	bl	8010110 <sulp>
 8010a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a70:	ec53 2b10 	vmov	r2, r3, d0
 8010a74:	f7ef fc1c 	bl	80002b0 <__aeabi_dsub>
 8010a78:	2200      	movs	r2, #0
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	4682      	mov	sl, r0
 8010a7e:	468b      	mov	fp, r1
 8010a80:	f7f0 f836 	bl	8000af0 <__aeabi_dcmpeq>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d0c1      	beq.n	8010a0c <_strtod_l+0x8bc>
 8010a88:	e619      	b.n	80106be <_strtod_l+0x56e>
 8010a8a:	4641      	mov	r1, r8
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f7ff fac9 	bl	8010024 <__ratio>
 8010a92:	2200      	movs	r2, #0
 8010a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010a98:	ec57 6b10 	vmov	r6, r7, d0
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	f7f0 f83a 	bl	8000b18 <__aeabi_dcmple>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d06f      	beq.n	8010b88 <_strtod_l+0xa38>
 8010aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d17a      	bne.n	8010ba4 <_strtod_l+0xa54>
 8010aae:	f1ba 0f00 	cmp.w	sl, #0
 8010ab2:	d158      	bne.n	8010b66 <_strtod_l+0xa16>
 8010ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d15a      	bne.n	8010b74 <_strtod_l+0xa24>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	4b62      	ldr	r3, [pc, #392]	@ (8010c4c <_strtod_l+0xafc>)
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	f7f0 f81d 	bl	8000b04 <__aeabi_dcmplt>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d159      	bne.n	8010b82 <_strtod_l+0xa32>
 8010ace:	4630      	mov	r0, r6
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8010c50 <_strtod_l+0xb00>)
 8010ad6:	f7ef fda3 	bl	8000620 <__aeabi_dmul>
 8010ada:	4606      	mov	r6, r0
 8010adc:	460f      	mov	r7, r1
 8010ade:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010ae2:	9606      	str	r6, [sp, #24]
 8010ae4:	9307      	str	r3, [sp, #28]
 8010ae6:	4d57      	ldr	r5, [pc, #348]	@ (8010c44 <_strtod_l+0xaf4>)
 8010ae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010aec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010af2:	401d      	ands	r5, r3
 8010af4:	4b57      	ldr	r3, [pc, #348]	@ (8010c54 <_strtod_l+0xb04>)
 8010af6:	429d      	cmp	r5, r3
 8010af8:	f040 80b0 	bne.w	8010c5c <_strtod_l+0xb0c>
 8010afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010afe:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010b02:	ec4b ab10 	vmov	d0, sl, fp
 8010b06:	f7ff f9c1 	bl	800fe8c <__ulp>
 8010b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b0e:	ec51 0b10 	vmov	r0, r1, d0
 8010b12:	f7ef fd85 	bl	8000620 <__aeabi_dmul>
 8010b16:	4652      	mov	r2, sl
 8010b18:	465b      	mov	r3, fp
 8010b1a:	f7ef fbcb 	bl	80002b4 <__adddf3>
 8010b1e:	460b      	mov	r3, r1
 8010b20:	4948      	ldr	r1, [pc, #288]	@ (8010c44 <_strtod_l+0xaf4>)
 8010b22:	4682      	mov	sl, r0
 8010b24:	4a4c      	ldr	r2, [pc, #304]	@ (8010c58 <_strtod_l+0xb08>)
 8010b26:	4019      	ands	r1, r3
 8010b28:	4291      	cmp	r1, r2
 8010b2a:	d942      	bls.n	8010bb2 <_strtod_l+0xa62>
 8010b2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b2e:	4b46      	ldr	r3, [pc, #280]	@ (8010c48 <_strtod_l+0xaf8>)
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d103      	bne.n	8010b3c <_strtod_l+0x9ec>
 8010b34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b36:	3301      	adds	r3, #1
 8010b38:	f43f ad2b 	beq.w	8010592 <_strtod_l+0x442>
 8010b3c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8010c48 <_strtod_l+0xaf8>
 8010b40:	f04f 3aff 	mov.w	sl, #4294967295
 8010b44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b46:	9805      	ldr	r0, [sp, #20]
 8010b48:	f7fe fe66 	bl	800f818 <_Bfree>
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	9805      	ldr	r0, [sp, #20]
 8010b50:	f7fe fe62 	bl	800f818 <_Bfree>
 8010b54:	4641      	mov	r1, r8
 8010b56:	9805      	ldr	r0, [sp, #20]
 8010b58:	f7fe fe5e 	bl	800f818 <_Bfree>
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	9805      	ldr	r0, [sp, #20]
 8010b60:	f7fe fe5a 	bl	800f818 <_Bfree>
 8010b64:	e618      	b.n	8010798 <_strtod_l+0x648>
 8010b66:	f1ba 0f01 	cmp.w	sl, #1
 8010b6a:	d103      	bne.n	8010b74 <_strtod_l+0xa24>
 8010b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f43f ada5 	beq.w	80106be <_strtod_l+0x56e>
 8010b74:	2600      	movs	r6, #0
 8010b76:	4f35      	ldr	r7, [pc, #212]	@ (8010c4c <_strtod_l+0xafc>)
 8010b78:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8010c20 <_strtod_l+0xad0>
 8010b7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b80:	e7b1      	b.n	8010ae6 <_strtod_l+0x996>
 8010b82:	2600      	movs	r6, #0
 8010b84:	4f32      	ldr	r7, [pc, #200]	@ (8010c50 <_strtod_l+0xb00>)
 8010b86:	e7aa      	b.n	8010ade <_strtod_l+0x98e>
 8010b88:	4b31      	ldr	r3, [pc, #196]	@ (8010c50 <_strtod_l+0xb00>)
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f7ef fd46 	bl	8000620 <__aeabi_dmul>
 8010b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b96:	4606      	mov	r6, r0
 8010b98:	460f      	mov	r7, r1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d09f      	beq.n	8010ade <_strtod_l+0x98e>
 8010b9e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010ba2:	e7a0      	b.n	8010ae6 <_strtod_l+0x996>
 8010ba4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8010c28 <_strtod_l+0xad8>
 8010ba8:	ec57 6b17 	vmov	r6, r7, d7
 8010bac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010bb0:	e799      	b.n	8010ae6 <_strtod_l+0x996>
 8010bb2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010bb6:	9b08      	ldr	r3, [sp, #32]
 8010bb8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d1c1      	bne.n	8010b44 <_strtod_l+0x9f4>
 8010bc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010bc4:	0d1b      	lsrs	r3, r3, #20
 8010bc6:	051b      	lsls	r3, r3, #20
 8010bc8:	429d      	cmp	r5, r3
 8010bca:	d1bb      	bne.n	8010b44 <_strtod_l+0x9f4>
 8010bcc:	4630      	mov	r0, r6
 8010bce:	4639      	mov	r1, r7
 8010bd0:	f7f0 f886 	bl	8000ce0 <__aeabi_d2lz>
 8010bd4:	f7ef fcf6 	bl	80005c4 <__aeabi_l2d>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	460b      	mov	r3, r1
 8010bdc:	4630      	mov	r0, r6
 8010bde:	4639      	mov	r1, r7
 8010be0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010be4:	f7ef fb64 	bl	80002b0 <__aeabi_dsub>
 8010be8:	460b      	mov	r3, r1
 8010bea:	4602      	mov	r2, r0
 8010bec:	ea46 060a 	orr.w	r6, r6, sl
 8010bf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bf6:	431e      	orrs	r6, r3
 8010bf8:	d06d      	beq.n	8010cd6 <_strtod_l+0xb86>
 8010bfa:	a30d      	add	r3, pc, #52	@ (adr r3, 8010c30 <_strtod_l+0xae0>)
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	f7ef ff80 	bl	8000b04 <__aeabi_dcmplt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f47f accf 	bne.w	80105a8 <_strtod_l+0x458>
 8010c0a:	a30b      	add	r3, pc, #44	@ (adr r3, 8010c38 <_strtod_l+0xae8>)
 8010c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c14:	f7ef ff94 	bl	8000b40 <__aeabi_dcmpgt>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d093      	beq.n	8010b44 <_strtod_l+0x9f4>
 8010c1c:	e4c4      	b.n	80105a8 <_strtod_l+0x458>
 8010c1e:	bf00      	nop
 8010c20:	00000000 	.word	0x00000000
 8010c24:	bff00000 	.word	0xbff00000
 8010c28:	00000000 	.word	0x00000000
 8010c2c:	3ff00000 	.word	0x3ff00000
 8010c30:	94a03595 	.word	0x94a03595
 8010c34:	3fdfffff 	.word	0x3fdfffff
 8010c38:	35afe535 	.word	0x35afe535
 8010c3c:	3fe00000 	.word	0x3fe00000
 8010c40:	000fffff 	.word	0x000fffff
 8010c44:	7ff00000 	.word	0x7ff00000
 8010c48:	7fefffff 	.word	0x7fefffff
 8010c4c:	3ff00000 	.word	0x3ff00000
 8010c50:	3fe00000 	.word	0x3fe00000
 8010c54:	7fe00000 	.word	0x7fe00000
 8010c58:	7c9fffff 	.word	0x7c9fffff
 8010c5c:	9b08      	ldr	r3, [sp, #32]
 8010c5e:	b323      	cbz	r3, 8010caa <_strtod_l+0xb5a>
 8010c60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010c64:	d821      	bhi.n	8010caa <_strtod_l+0xb5a>
 8010c66:	4630      	mov	r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	a327      	add	r3, pc, #156	@ (adr r3, 8010d08 <_strtod_l+0xbb8>)
 8010c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c70:	f7ef ff52 	bl	8000b18 <__aeabi_dcmple>
 8010c74:	b1a0      	cbz	r0, 8010ca0 <_strtod_l+0xb50>
 8010c76:	4639      	mov	r1, r7
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f7ef ffa9 	bl	8000bd0 <__aeabi_d2uiz>
 8010c7e:	2801      	cmp	r0, #1
 8010c80:	bf38      	it	cc
 8010c82:	2001      	movcc	r0, #1
 8010c84:	f7ef fc52 	bl	800052c <__aeabi_ui2d>
 8010c88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c8a:	4606      	mov	r6, r0
 8010c8c:	460f      	mov	r7, r1
 8010c8e:	b9fb      	cbnz	r3, 8010cd0 <_strtod_l+0xb80>
 8010c90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c94:	9014      	str	r0, [sp, #80]	@ 0x50
 8010c96:	9315      	str	r3, [sp, #84]	@ 0x54
 8010c98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010c9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010ca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ca2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010ca6:	1b5b      	subs	r3, r3, r5
 8010ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010caa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010cae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010cb2:	f7ff f8eb 	bl	800fe8c <__ulp>
 8010cb6:	4650      	mov	r0, sl
 8010cb8:	4659      	mov	r1, fp
 8010cba:	ec53 2b10 	vmov	r2, r3, d0
 8010cbe:	f7ef fcaf 	bl	8000620 <__aeabi_dmul>
 8010cc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010cc6:	f7ef faf5 	bl	80002b4 <__adddf3>
 8010cca:	4682      	mov	sl, r0
 8010ccc:	468b      	mov	fp, r1
 8010cce:	e772      	b.n	8010bb6 <_strtod_l+0xa66>
 8010cd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010cd4:	e7e0      	b.n	8010c98 <_strtod_l+0xb48>
 8010cd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010d10 <_strtod_l+0xbc0>)
 8010cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cdc:	f7ef ff12 	bl	8000b04 <__aeabi_dcmplt>
 8010ce0:	e79a      	b.n	8010c18 <_strtod_l+0xac8>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ce6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ce8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010cea:	6013      	str	r3, [r2, #0]
 8010cec:	f7ff ba6d 	b.w	80101ca <_strtod_l+0x7a>
 8010cf0:	2a65      	cmp	r2, #101	@ 0x65
 8010cf2:	f43f ab67 	beq.w	80103c4 <_strtod_l+0x274>
 8010cf6:	2a45      	cmp	r2, #69	@ 0x45
 8010cf8:	f43f ab64 	beq.w	80103c4 <_strtod_l+0x274>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	f7ff bba0 	b.w	8010442 <_strtod_l+0x2f2>
 8010d02:	bf00      	nop
 8010d04:	f3af 8000 	nop.w
 8010d08:	ffc00000 	.word	0xffc00000
 8010d0c:	41dfffff 	.word	0x41dfffff
 8010d10:	94a03595 	.word	0x94a03595
 8010d14:	3fcfffff 	.word	0x3fcfffff

08010d18 <_strtod_r>:
 8010d18:	4b01      	ldr	r3, [pc, #4]	@ (8010d20 <_strtod_r+0x8>)
 8010d1a:	f7ff ba19 	b.w	8010150 <_strtod_l>
 8010d1e:	bf00      	nop
 8010d20:	20000084 	.word	0x20000084

08010d24 <__ssputs_r>:
 8010d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d28:	461f      	mov	r7, r3
 8010d2a:	688e      	ldr	r6, [r1, #8]
 8010d2c:	4682      	mov	sl, r0
 8010d2e:	460c      	mov	r4, r1
 8010d30:	42be      	cmp	r6, r7
 8010d32:	4690      	mov	r8, r2
 8010d34:	680b      	ldr	r3, [r1, #0]
 8010d36:	d82d      	bhi.n	8010d94 <__ssputs_r+0x70>
 8010d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d40:	d026      	beq.n	8010d90 <__ssputs_r+0x6c>
 8010d42:	6965      	ldr	r5, [r4, #20]
 8010d44:	6909      	ldr	r1, [r1, #16]
 8010d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d4a:	eba3 0901 	sub.w	r9, r3, r1
 8010d4e:	1c7b      	adds	r3, r7, #1
 8010d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d54:	444b      	add	r3, r9
 8010d56:	106d      	asrs	r5, r5, #1
 8010d58:	429d      	cmp	r5, r3
 8010d5a:	bf38      	it	cc
 8010d5c:	461d      	movcc	r5, r3
 8010d5e:	0553      	lsls	r3, r2, #21
 8010d60:	d527      	bpl.n	8010db2 <__ssputs_r+0x8e>
 8010d62:	4629      	mov	r1, r5
 8010d64:	f7fe fc8c 	bl	800f680 <_malloc_r>
 8010d68:	4606      	mov	r6, r0
 8010d6a:	b360      	cbz	r0, 8010dc6 <__ssputs_r+0xa2>
 8010d6c:	464a      	mov	r2, r9
 8010d6e:	6921      	ldr	r1, [r4, #16]
 8010d70:	f7fd fdad 	bl	800e8ce <memcpy>
 8010d74:	89a3      	ldrh	r3, [r4, #12]
 8010d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d7e:	81a3      	strh	r3, [r4, #12]
 8010d80:	6126      	str	r6, [r4, #16]
 8010d82:	444e      	add	r6, r9
 8010d84:	6165      	str	r5, [r4, #20]
 8010d86:	eba5 0509 	sub.w	r5, r5, r9
 8010d8a:	6026      	str	r6, [r4, #0]
 8010d8c:	463e      	mov	r6, r7
 8010d8e:	60a5      	str	r5, [r4, #8]
 8010d90:	42be      	cmp	r6, r7
 8010d92:	d900      	bls.n	8010d96 <__ssputs_r+0x72>
 8010d94:	463e      	mov	r6, r7
 8010d96:	4632      	mov	r2, r6
 8010d98:	4641      	mov	r1, r8
 8010d9a:	6820      	ldr	r0, [r4, #0]
 8010d9c:	f000 f9c6 	bl	801112c <memmove>
 8010da0:	68a3      	ldr	r3, [r4, #8]
 8010da2:	2000      	movs	r0, #0
 8010da4:	1b9b      	subs	r3, r3, r6
 8010da6:	60a3      	str	r3, [r4, #8]
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	4433      	add	r3, r6
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db2:	462a      	mov	r2, r5
 8010db4:	f000 fd79 	bl	80118aa <_realloc_r>
 8010db8:	4606      	mov	r6, r0
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d1e0      	bne.n	8010d80 <__ssputs_r+0x5c>
 8010dbe:	6921      	ldr	r1, [r4, #16]
 8010dc0:	4650      	mov	r0, sl
 8010dc2:	f7fe fbe9 	bl	800f598 <_free_r>
 8010dc6:	230c      	movs	r3, #12
 8010dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dcc:	f8ca 3000 	str.w	r3, [sl]
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	e7e9      	b.n	8010dae <__ssputs_r+0x8a>
	...

08010ddc <_svfiprintf_r>:
 8010ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de0:	4698      	mov	r8, r3
 8010de2:	898b      	ldrh	r3, [r1, #12]
 8010de4:	b09d      	sub	sp, #116	@ 0x74
 8010de6:	4607      	mov	r7, r0
 8010de8:	061b      	lsls	r3, r3, #24
 8010dea:	460d      	mov	r5, r1
 8010dec:	4614      	mov	r4, r2
 8010dee:	d510      	bpl.n	8010e12 <_svfiprintf_r+0x36>
 8010df0:	690b      	ldr	r3, [r1, #16]
 8010df2:	b973      	cbnz	r3, 8010e12 <_svfiprintf_r+0x36>
 8010df4:	2140      	movs	r1, #64	@ 0x40
 8010df6:	f7fe fc43 	bl	800f680 <_malloc_r>
 8010dfa:	6028      	str	r0, [r5, #0]
 8010dfc:	6128      	str	r0, [r5, #16]
 8010dfe:	b930      	cbnz	r0, 8010e0e <_svfiprintf_r+0x32>
 8010e00:	230c      	movs	r3, #12
 8010e02:	603b      	str	r3, [r7, #0]
 8010e04:	f04f 30ff 	mov.w	r0, #4294967295
 8010e08:	b01d      	add	sp, #116	@ 0x74
 8010e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0e:	2340      	movs	r3, #64	@ 0x40
 8010e10:	616b      	str	r3, [r5, #20]
 8010e12:	2300      	movs	r3, #0
 8010e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e18:	f04f 0901 	mov.w	r9, #1
 8010e1c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010fc0 <_svfiprintf_r+0x1e4>
 8010e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e22:	2320      	movs	r3, #32
 8010e24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e28:	2330      	movs	r3, #48	@ 0x30
 8010e2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e2e:	4623      	mov	r3, r4
 8010e30:	469a      	mov	sl, r3
 8010e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e36:	b10a      	cbz	r2, 8010e3c <_svfiprintf_r+0x60>
 8010e38:	2a25      	cmp	r2, #37	@ 0x25
 8010e3a:	d1f9      	bne.n	8010e30 <_svfiprintf_r+0x54>
 8010e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e40:	d00b      	beq.n	8010e5a <_svfiprintf_r+0x7e>
 8010e42:	465b      	mov	r3, fp
 8010e44:	4622      	mov	r2, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	4638      	mov	r0, r7
 8010e4a:	f7ff ff6b 	bl	8010d24 <__ssputs_r>
 8010e4e:	3001      	adds	r0, #1
 8010e50:	f000 80a7 	beq.w	8010fa2 <_svfiprintf_r+0x1c6>
 8010e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e56:	445a      	add	r2, fp
 8010e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 809f 	beq.w	8010fa2 <_svfiprintf_r+0x1c6>
 8010e64:	2300      	movs	r3, #0
 8010e66:	f04f 32ff 	mov.w	r2, #4294967295
 8010e6a:	f10a 0a01 	add.w	sl, sl, #1
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	9307      	str	r3, [sp, #28]
 8010e72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e7c:	4654      	mov	r4, sl
 8010e7e:	2205      	movs	r2, #5
 8010e80:	484f      	ldr	r0, [pc, #316]	@ (8010fc0 <_svfiprintf_r+0x1e4>)
 8010e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e86:	f7fd fd14 	bl	800e8b2 <memchr>
 8010e8a:	9a04      	ldr	r2, [sp, #16]
 8010e8c:	b9d8      	cbnz	r0, 8010ec6 <_svfiprintf_r+0xea>
 8010e8e:	06d0      	lsls	r0, r2, #27
 8010e90:	bf44      	itt	mi
 8010e92:	2320      	movmi	r3, #32
 8010e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e98:	0711      	lsls	r1, r2, #28
 8010e9a:	bf44      	itt	mi
 8010e9c:	232b      	movmi	r3, #43	@ 0x2b
 8010e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ea8:	d015      	beq.n	8010ed6 <_svfiprintf_r+0xfa>
 8010eaa:	9a07      	ldr	r2, [sp, #28]
 8010eac:	4654      	mov	r4, sl
 8010eae:	2000      	movs	r0, #0
 8010eb0:	f04f 0c0a 	mov.w	ip, #10
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eba:	3b30      	subs	r3, #48	@ 0x30
 8010ebc:	2b09      	cmp	r3, #9
 8010ebe:	d94b      	bls.n	8010f58 <_svfiprintf_r+0x17c>
 8010ec0:	b1b0      	cbz	r0, 8010ef0 <_svfiprintf_r+0x114>
 8010ec2:	9207      	str	r2, [sp, #28]
 8010ec4:	e014      	b.n	8010ef0 <_svfiprintf_r+0x114>
 8010ec6:	eba0 0308 	sub.w	r3, r0, r8
 8010eca:	46a2      	mov	sl, r4
 8010ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8010ed0:	4313      	orrs	r3, r2
 8010ed2:	9304      	str	r3, [sp, #16]
 8010ed4:	e7d2      	b.n	8010e7c <_svfiprintf_r+0xa0>
 8010ed6:	9b03      	ldr	r3, [sp, #12]
 8010ed8:	1d19      	adds	r1, r3, #4
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	9103      	str	r1, [sp, #12]
 8010ee0:	bfbb      	ittet	lt
 8010ee2:	425b      	neglt	r3, r3
 8010ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8010ee8:	9307      	strge	r3, [sp, #28]
 8010eea:	9307      	strlt	r3, [sp, #28]
 8010eec:	bfb8      	it	lt
 8010eee:	9204      	strlt	r2, [sp, #16]
 8010ef0:	7823      	ldrb	r3, [r4, #0]
 8010ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ef4:	d10a      	bne.n	8010f0c <_svfiprintf_r+0x130>
 8010ef6:	7863      	ldrb	r3, [r4, #1]
 8010ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010efa:	d132      	bne.n	8010f62 <_svfiprintf_r+0x186>
 8010efc:	9b03      	ldr	r3, [sp, #12]
 8010efe:	3402      	adds	r4, #2
 8010f00:	1d1a      	adds	r2, r3, #4
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f08:	9203      	str	r2, [sp, #12]
 8010f0a:	9305      	str	r3, [sp, #20]
 8010f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010fd0 <_svfiprintf_r+0x1f4>
 8010f10:	2203      	movs	r2, #3
 8010f12:	7821      	ldrb	r1, [r4, #0]
 8010f14:	4650      	mov	r0, sl
 8010f16:	f7fd fccc 	bl	800e8b2 <memchr>
 8010f1a:	b138      	cbz	r0, 8010f2c <_svfiprintf_r+0x150>
 8010f1c:	eba0 000a 	sub.w	r0, r0, sl
 8010f20:	2240      	movs	r2, #64	@ 0x40
 8010f22:	9b04      	ldr	r3, [sp, #16]
 8010f24:	3401      	adds	r4, #1
 8010f26:	4082      	lsls	r2, r0
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	9304      	str	r3, [sp, #16]
 8010f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f30:	2206      	movs	r2, #6
 8010f32:	4824      	ldr	r0, [pc, #144]	@ (8010fc4 <_svfiprintf_r+0x1e8>)
 8010f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f38:	f7fd fcbb 	bl	800e8b2 <memchr>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d036      	beq.n	8010fae <_svfiprintf_r+0x1d2>
 8010f40:	4b21      	ldr	r3, [pc, #132]	@ (8010fc8 <_svfiprintf_r+0x1ec>)
 8010f42:	bb1b      	cbnz	r3, 8010f8c <_svfiprintf_r+0x1b0>
 8010f44:	9b03      	ldr	r3, [sp, #12]
 8010f46:	3307      	adds	r3, #7
 8010f48:	f023 0307 	bic.w	r3, r3, #7
 8010f4c:	3308      	adds	r3, #8
 8010f4e:	9303      	str	r3, [sp, #12]
 8010f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f52:	4433      	add	r3, r6
 8010f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f56:	e76a      	b.n	8010e2e <_svfiprintf_r+0x52>
 8010f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	2001      	movs	r0, #1
 8010f60:	e7a8      	b.n	8010eb4 <_svfiprintf_r+0xd8>
 8010f62:	2300      	movs	r3, #0
 8010f64:	3401      	adds	r4, #1
 8010f66:	f04f 0c0a 	mov.w	ip, #10
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	9305      	str	r3, [sp, #20]
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f74:	3a30      	subs	r2, #48	@ 0x30
 8010f76:	2a09      	cmp	r2, #9
 8010f78:	d903      	bls.n	8010f82 <_svfiprintf_r+0x1a6>
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d0c6      	beq.n	8010f0c <_svfiprintf_r+0x130>
 8010f7e:	9105      	str	r1, [sp, #20]
 8010f80:	e7c4      	b.n	8010f0c <_svfiprintf_r+0x130>
 8010f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f86:	4604      	mov	r4, r0
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e7f0      	b.n	8010f6e <_svfiprintf_r+0x192>
 8010f8c:	ab03      	add	r3, sp, #12
 8010f8e:	462a      	mov	r2, r5
 8010f90:	a904      	add	r1, sp, #16
 8010f92:	4638      	mov	r0, r7
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	4b0d      	ldr	r3, [pc, #52]	@ (8010fcc <_svfiprintf_r+0x1f0>)
 8010f98:	f7fc fd18 	bl	800d9cc <_printf_float>
 8010f9c:	1c42      	adds	r2, r0, #1
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	d1d6      	bne.n	8010f50 <_svfiprintf_r+0x174>
 8010fa2:	89ab      	ldrh	r3, [r5, #12]
 8010fa4:	065b      	lsls	r3, r3, #25
 8010fa6:	f53f af2d 	bmi.w	8010e04 <_svfiprintf_r+0x28>
 8010faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fac:	e72c      	b.n	8010e08 <_svfiprintf_r+0x2c>
 8010fae:	ab03      	add	r3, sp, #12
 8010fb0:	462a      	mov	r2, r5
 8010fb2:	a904      	add	r1, sp, #16
 8010fb4:	4638      	mov	r0, r7
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	4b04      	ldr	r3, [pc, #16]	@ (8010fcc <_svfiprintf_r+0x1f0>)
 8010fba:	f7fc ffa3 	bl	800df04 <_printf_i>
 8010fbe:	e7ed      	b.n	8010f9c <_svfiprintf_r+0x1c0>
 8010fc0:	08014e38 	.word	0x08014e38
 8010fc4:	08014e42 	.word	0x08014e42
 8010fc8:	0800d9cd 	.word	0x0800d9cd
 8010fcc:	08010d25 	.word	0x08010d25
 8010fd0:	08014e3e 	.word	0x08014e3e

08010fd4 <__sflush_r>:
 8010fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fdc:	0716      	lsls	r6, r2, #28
 8010fde:	4605      	mov	r5, r0
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	d454      	bmi.n	801108e <__sflush_r+0xba>
 8010fe4:	684b      	ldr	r3, [r1, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	dc02      	bgt.n	8010ff0 <__sflush_r+0x1c>
 8010fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	dd48      	ble.n	8011082 <__sflush_r+0xae>
 8010ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ff2:	2e00      	cmp	r6, #0
 8010ff4:	d045      	beq.n	8011082 <__sflush_r+0xae>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ffc:	682f      	ldr	r7, [r5, #0]
 8010ffe:	6a21      	ldr	r1, [r4, #32]
 8011000:	602b      	str	r3, [r5, #0]
 8011002:	d030      	beq.n	8011066 <__sflush_r+0x92>
 8011004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011006:	89a3      	ldrh	r3, [r4, #12]
 8011008:	0759      	lsls	r1, r3, #29
 801100a:	d505      	bpl.n	8011018 <__sflush_r+0x44>
 801100c:	6863      	ldr	r3, [r4, #4]
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011012:	b10b      	cbz	r3, 8011018 <__sflush_r+0x44>
 8011014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011016:	1ad2      	subs	r2, r2, r3
 8011018:	2300      	movs	r3, #0
 801101a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801101c:	6a21      	ldr	r1, [r4, #32]
 801101e:	4628      	mov	r0, r5
 8011020:	47b0      	blx	r6
 8011022:	1c43      	adds	r3, r0, #1
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	d106      	bne.n	8011036 <__sflush_r+0x62>
 8011028:	6829      	ldr	r1, [r5, #0]
 801102a:	291d      	cmp	r1, #29
 801102c:	d82b      	bhi.n	8011086 <__sflush_r+0xb2>
 801102e:	4a2a      	ldr	r2, [pc, #168]	@ (80110d8 <__sflush_r+0x104>)
 8011030:	410a      	asrs	r2, r1
 8011032:	07d6      	lsls	r6, r2, #31
 8011034:	d427      	bmi.n	8011086 <__sflush_r+0xb2>
 8011036:	2200      	movs	r2, #0
 8011038:	04d9      	lsls	r1, r3, #19
 801103a:	6062      	str	r2, [r4, #4]
 801103c:	6922      	ldr	r2, [r4, #16]
 801103e:	6022      	str	r2, [r4, #0]
 8011040:	d504      	bpl.n	801104c <__sflush_r+0x78>
 8011042:	1c42      	adds	r2, r0, #1
 8011044:	d101      	bne.n	801104a <__sflush_r+0x76>
 8011046:	682b      	ldr	r3, [r5, #0]
 8011048:	b903      	cbnz	r3, 801104c <__sflush_r+0x78>
 801104a:	6560      	str	r0, [r4, #84]	@ 0x54
 801104c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801104e:	602f      	str	r7, [r5, #0]
 8011050:	b1b9      	cbz	r1, 8011082 <__sflush_r+0xae>
 8011052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011056:	4299      	cmp	r1, r3
 8011058:	d002      	beq.n	8011060 <__sflush_r+0x8c>
 801105a:	4628      	mov	r0, r5
 801105c:	f7fe fa9c 	bl	800f598 <_free_r>
 8011060:	2300      	movs	r3, #0
 8011062:	6363      	str	r3, [r4, #52]	@ 0x34
 8011064:	e00d      	b.n	8011082 <__sflush_r+0xae>
 8011066:	2301      	movs	r3, #1
 8011068:	4628      	mov	r0, r5
 801106a:	47b0      	blx	r6
 801106c:	4602      	mov	r2, r0
 801106e:	1c50      	adds	r0, r2, #1
 8011070:	d1c9      	bne.n	8011006 <__sflush_r+0x32>
 8011072:	682b      	ldr	r3, [r5, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d0c6      	beq.n	8011006 <__sflush_r+0x32>
 8011078:	2b1d      	cmp	r3, #29
 801107a:	d001      	beq.n	8011080 <__sflush_r+0xac>
 801107c:	2b16      	cmp	r3, #22
 801107e:	d11d      	bne.n	80110bc <__sflush_r+0xe8>
 8011080:	602f      	str	r7, [r5, #0]
 8011082:	2000      	movs	r0, #0
 8011084:	e021      	b.n	80110ca <__sflush_r+0xf6>
 8011086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801108a:	b21b      	sxth	r3, r3
 801108c:	e01a      	b.n	80110c4 <__sflush_r+0xf0>
 801108e:	690f      	ldr	r7, [r1, #16]
 8011090:	2f00      	cmp	r7, #0
 8011092:	d0f6      	beq.n	8011082 <__sflush_r+0xae>
 8011094:	0793      	lsls	r3, r2, #30
 8011096:	680e      	ldr	r6, [r1, #0]
 8011098:	600f      	str	r7, [r1, #0]
 801109a:	bf0c      	ite	eq
 801109c:	694b      	ldreq	r3, [r1, #20]
 801109e:	2300      	movne	r3, #0
 80110a0:	eba6 0807 	sub.w	r8, r6, r7
 80110a4:	608b      	str	r3, [r1, #8]
 80110a6:	f1b8 0f00 	cmp.w	r8, #0
 80110aa:	ddea      	ble.n	8011082 <__sflush_r+0xae>
 80110ac:	4643      	mov	r3, r8
 80110ae:	463a      	mov	r2, r7
 80110b0:	6a21      	ldr	r1, [r4, #32]
 80110b2:	4628      	mov	r0, r5
 80110b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80110b6:	47b0      	blx	r6
 80110b8:	2800      	cmp	r0, #0
 80110ba:	dc08      	bgt.n	80110ce <__sflush_r+0xfa>
 80110bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ce:	4407      	add	r7, r0
 80110d0:	eba8 0800 	sub.w	r8, r8, r0
 80110d4:	e7e7      	b.n	80110a6 <__sflush_r+0xd2>
 80110d6:	bf00      	nop
 80110d8:	dfbffffe 	.word	0xdfbffffe

080110dc <_fflush_r>:
 80110dc:	b538      	push	{r3, r4, r5, lr}
 80110de:	690b      	ldr	r3, [r1, #16]
 80110e0:	4605      	mov	r5, r0
 80110e2:	460c      	mov	r4, r1
 80110e4:	b913      	cbnz	r3, 80110ec <_fflush_r+0x10>
 80110e6:	2500      	movs	r5, #0
 80110e8:	4628      	mov	r0, r5
 80110ea:	bd38      	pop	{r3, r4, r5, pc}
 80110ec:	b118      	cbz	r0, 80110f6 <_fflush_r+0x1a>
 80110ee:	6a03      	ldr	r3, [r0, #32]
 80110f0:	b90b      	cbnz	r3, 80110f6 <_fflush_r+0x1a>
 80110f2:	f7fd fac5 	bl	800e680 <__sinit>
 80110f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d0f3      	beq.n	80110e6 <_fflush_r+0xa>
 80110fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011100:	07d0      	lsls	r0, r2, #31
 8011102:	d404      	bmi.n	801110e <_fflush_r+0x32>
 8011104:	0599      	lsls	r1, r3, #22
 8011106:	d402      	bmi.n	801110e <_fflush_r+0x32>
 8011108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801110a:	f7fd fbd0 	bl	800e8ae <__retarget_lock_acquire_recursive>
 801110e:	4628      	mov	r0, r5
 8011110:	4621      	mov	r1, r4
 8011112:	f7ff ff5f 	bl	8010fd4 <__sflush_r>
 8011116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011118:	4605      	mov	r5, r0
 801111a:	07da      	lsls	r2, r3, #31
 801111c:	d4e4      	bmi.n	80110e8 <_fflush_r+0xc>
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	059b      	lsls	r3, r3, #22
 8011122:	d4e1      	bmi.n	80110e8 <_fflush_r+0xc>
 8011124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011126:	f7fd fbc3 	bl	800e8b0 <__retarget_lock_release_recursive>
 801112a:	e7dd      	b.n	80110e8 <_fflush_r+0xc>

0801112c <memmove>:
 801112c:	4288      	cmp	r0, r1
 801112e:	b510      	push	{r4, lr}
 8011130:	eb01 0402 	add.w	r4, r1, r2
 8011134:	d902      	bls.n	801113c <memmove+0x10>
 8011136:	4284      	cmp	r4, r0
 8011138:	4623      	mov	r3, r4
 801113a:	d807      	bhi.n	801114c <memmove+0x20>
 801113c:	1e43      	subs	r3, r0, #1
 801113e:	42a1      	cmp	r1, r4
 8011140:	d008      	beq.n	8011154 <memmove+0x28>
 8011142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011146:	f803 2f01 	strb.w	r2, [r3, #1]!
 801114a:	e7f8      	b.n	801113e <memmove+0x12>
 801114c:	4402      	add	r2, r0
 801114e:	4601      	mov	r1, r0
 8011150:	428a      	cmp	r2, r1
 8011152:	d100      	bne.n	8011156 <memmove+0x2a>
 8011154:	bd10      	pop	{r4, pc}
 8011156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801115a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801115e:	e7f7      	b.n	8011150 <memmove+0x24>

08011160 <strncmp>:
 8011160:	b510      	push	{r4, lr}
 8011162:	b16a      	cbz	r2, 8011180 <strncmp+0x20>
 8011164:	3901      	subs	r1, #1
 8011166:	1884      	adds	r4, r0, r2
 8011168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801116c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011170:	429a      	cmp	r2, r3
 8011172:	d103      	bne.n	801117c <strncmp+0x1c>
 8011174:	42a0      	cmp	r0, r4
 8011176:	d001      	beq.n	801117c <strncmp+0x1c>
 8011178:	2a00      	cmp	r2, #0
 801117a:	d1f5      	bne.n	8011168 <strncmp+0x8>
 801117c:	1ad0      	subs	r0, r2, r3
 801117e:	bd10      	pop	{r4, pc}
 8011180:	4610      	mov	r0, r2
 8011182:	e7fc      	b.n	801117e <strncmp+0x1e>

08011184 <_sbrk_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	2300      	movs	r3, #0
 8011188:	4d05      	ldr	r5, [pc, #20]	@ (80111a0 <_sbrk_r+0x1c>)
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	602b      	str	r3, [r5, #0]
 8011190:	f7f4 f952 	bl	8005438 <_sbrk>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_sbrk_r+0x1a>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_sbrk_r+0x1a>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	2003b3b4 	.word	0x2003b3b4
 80111a4:	00000000 	.word	0x00000000

080111a8 <nan>:
 80111a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111b0 <nan+0x8>
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	00000000 	.word	0x00000000
 80111b4:	7ff80000 	.word	0x7ff80000

080111b8 <__assert_func>:
 80111b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ba:	4614      	mov	r4, r2
 80111bc:	461a      	mov	r2, r3
 80111be:	4b09      	ldr	r3, [pc, #36]	@ (80111e4 <__assert_func+0x2c>)
 80111c0:	4605      	mov	r5, r0
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	68d8      	ldr	r0, [r3, #12]
 80111c6:	b954      	cbnz	r4, 80111de <__assert_func+0x26>
 80111c8:	4b07      	ldr	r3, [pc, #28]	@ (80111e8 <__assert_func+0x30>)
 80111ca:	461c      	mov	r4, r3
 80111cc:	9100      	str	r1, [sp, #0]
 80111ce:	4907      	ldr	r1, [pc, #28]	@ (80111ec <__assert_func+0x34>)
 80111d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111d4:	462b      	mov	r3, r5
 80111d6:	f000 fba3 	bl	8011920 <fiprintf>
 80111da:	f000 fbb3 	bl	8011944 <abort>
 80111de:	4b04      	ldr	r3, [pc, #16]	@ (80111f0 <__assert_func+0x38>)
 80111e0:	e7f4      	b.n	80111cc <__assert_func+0x14>
 80111e2:	bf00      	nop
 80111e4:	20000034 	.word	0x20000034
 80111e8:	08014e8c 	.word	0x08014e8c
 80111ec:	08014e5e 	.word	0x08014e5e
 80111f0:	08014e51 	.word	0x08014e51

080111f4 <_calloc_r>:
 80111f4:	b570      	push	{r4, r5, r6, lr}
 80111f6:	fba1 5402 	umull	r5, r4, r1, r2
 80111fa:	b93c      	cbnz	r4, 801120c <_calloc_r+0x18>
 80111fc:	4629      	mov	r1, r5
 80111fe:	f7fe fa3f 	bl	800f680 <_malloc_r>
 8011202:	4606      	mov	r6, r0
 8011204:	b928      	cbnz	r0, 8011212 <_calloc_r+0x1e>
 8011206:	2600      	movs	r6, #0
 8011208:	4630      	mov	r0, r6
 801120a:	bd70      	pop	{r4, r5, r6, pc}
 801120c:	220c      	movs	r2, #12
 801120e:	6002      	str	r2, [r0, #0]
 8011210:	e7f9      	b.n	8011206 <_calloc_r+0x12>
 8011212:	462a      	mov	r2, r5
 8011214:	4621      	mov	r1, r4
 8011216:	f7fd facc 	bl	800e7b2 <memset>
 801121a:	e7f5      	b.n	8011208 <_calloc_r+0x14>

0801121c <rshift>:
 801121c:	6903      	ldr	r3, [r0, #16]
 801121e:	114a      	asrs	r2, r1, #5
 8011220:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011228:	f100 0414 	add.w	r4, r0, #20
 801122c:	dd45      	ble.n	80112ba <rshift+0x9e>
 801122e:	f011 011f 	ands.w	r1, r1, #31
 8011232:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011236:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801123a:	d10c      	bne.n	8011256 <rshift+0x3a>
 801123c:	f100 0710 	add.w	r7, r0, #16
 8011240:	4629      	mov	r1, r5
 8011242:	42b1      	cmp	r1, r6
 8011244:	d334      	bcc.n	80112b0 <rshift+0x94>
 8011246:	1a9b      	subs	r3, r3, r2
 8011248:	1eea      	subs	r2, r5, #3
 801124a:	009b      	lsls	r3, r3, #2
 801124c:	4296      	cmp	r6, r2
 801124e:	bf38      	it	cc
 8011250:	2300      	movcc	r3, #0
 8011252:	4423      	add	r3, r4
 8011254:	e015      	b.n	8011282 <rshift+0x66>
 8011256:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801125a:	f1c1 0820 	rsb	r8, r1, #32
 801125e:	f105 0e04 	add.w	lr, r5, #4
 8011262:	46a1      	mov	r9, r4
 8011264:	40cf      	lsrs	r7, r1
 8011266:	4576      	cmp	r6, lr
 8011268:	46f4      	mov	ip, lr
 801126a:	d815      	bhi.n	8011298 <rshift+0x7c>
 801126c:	1a9a      	subs	r2, r3, r2
 801126e:	3501      	adds	r5, #1
 8011270:	0092      	lsls	r2, r2, #2
 8011272:	3a04      	subs	r2, #4
 8011274:	42ae      	cmp	r6, r5
 8011276:	bf38      	it	cc
 8011278:	2200      	movcc	r2, #0
 801127a:	18a3      	adds	r3, r4, r2
 801127c:	50a7      	str	r7, [r4, r2]
 801127e:	b107      	cbz	r7, 8011282 <rshift+0x66>
 8011280:	3304      	adds	r3, #4
 8011282:	1b1a      	subs	r2, r3, r4
 8011284:	42a3      	cmp	r3, r4
 8011286:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801128a:	bf08      	it	eq
 801128c:	2300      	moveq	r3, #0
 801128e:	6102      	str	r2, [r0, #16]
 8011290:	bf08      	it	eq
 8011292:	6143      	streq	r3, [r0, #20]
 8011294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011298:	f8dc c000 	ldr.w	ip, [ip]
 801129c:	fa0c fc08 	lsl.w	ip, ip, r8
 80112a0:	ea4c 0707 	orr.w	r7, ip, r7
 80112a4:	f849 7b04 	str.w	r7, [r9], #4
 80112a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112ac:	40cf      	lsrs	r7, r1
 80112ae:	e7da      	b.n	8011266 <rshift+0x4a>
 80112b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80112b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80112b8:	e7c3      	b.n	8011242 <rshift+0x26>
 80112ba:	4623      	mov	r3, r4
 80112bc:	e7e1      	b.n	8011282 <rshift+0x66>

080112be <__hexdig_fun>:
 80112be:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80112c2:	2b09      	cmp	r3, #9
 80112c4:	d802      	bhi.n	80112cc <__hexdig_fun+0xe>
 80112c6:	3820      	subs	r0, #32
 80112c8:	b2c0      	uxtb	r0, r0
 80112ca:	4770      	bx	lr
 80112cc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80112d0:	2b05      	cmp	r3, #5
 80112d2:	d801      	bhi.n	80112d8 <__hexdig_fun+0x1a>
 80112d4:	3847      	subs	r0, #71	@ 0x47
 80112d6:	e7f7      	b.n	80112c8 <__hexdig_fun+0xa>
 80112d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80112dc:	2b05      	cmp	r3, #5
 80112de:	d801      	bhi.n	80112e4 <__hexdig_fun+0x26>
 80112e0:	3827      	subs	r0, #39	@ 0x27
 80112e2:	e7f1      	b.n	80112c8 <__hexdig_fun+0xa>
 80112e4:	2000      	movs	r0, #0
 80112e6:	4770      	bx	lr

080112e8 <__gethex>:
 80112e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ec:	b085      	sub	sp, #20
 80112ee:	468a      	mov	sl, r1
 80112f0:	4690      	mov	r8, r2
 80112f2:	9302      	str	r3, [sp, #8]
 80112f4:	680b      	ldr	r3, [r1, #0]
 80112f6:	9001      	str	r0, [sp, #4]
 80112f8:	1c9c      	adds	r4, r3, #2
 80112fa:	46a1      	mov	r9, r4
 80112fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011300:	2830      	cmp	r0, #48	@ 0x30
 8011302:	d0fa      	beq.n	80112fa <__gethex+0x12>
 8011304:	eba9 0303 	sub.w	r3, r9, r3
 8011308:	f1a3 0b02 	sub.w	fp, r3, #2
 801130c:	f7ff ffd7 	bl	80112be <__hexdig_fun>
 8011310:	4605      	mov	r5, r0
 8011312:	2800      	cmp	r0, #0
 8011314:	d166      	bne.n	80113e4 <__gethex+0xfc>
 8011316:	2201      	movs	r2, #1
 8011318:	499e      	ldr	r1, [pc, #632]	@ (8011594 <__gethex+0x2ac>)
 801131a:	4648      	mov	r0, r9
 801131c:	f7ff ff20 	bl	8011160 <strncmp>
 8011320:	4607      	mov	r7, r0
 8011322:	2800      	cmp	r0, #0
 8011324:	d165      	bne.n	80113f2 <__gethex+0x10a>
 8011326:	f899 0001 	ldrb.w	r0, [r9, #1]
 801132a:	4626      	mov	r6, r4
 801132c:	f7ff ffc7 	bl	80112be <__hexdig_fun>
 8011330:	2800      	cmp	r0, #0
 8011332:	d060      	beq.n	80113f6 <__gethex+0x10e>
 8011334:	4623      	mov	r3, r4
 8011336:	7818      	ldrb	r0, [r3, #0]
 8011338:	4699      	mov	r9, r3
 801133a:	3301      	adds	r3, #1
 801133c:	2830      	cmp	r0, #48	@ 0x30
 801133e:	d0fa      	beq.n	8011336 <__gethex+0x4e>
 8011340:	f7ff ffbd 	bl	80112be <__hexdig_fun>
 8011344:	fab0 f580 	clz	r5, r0
 8011348:	f04f 0b01 	mov.w	fp, #1
 801134c:	096d      	lsrs	r5, r5, #5
 801134e:	464a      	mov	r2, r9
 8011350:	4616      	mov	r6, r2
 8011352:	3201      	adds	r2, #1
 8011354:	7830      	ldrb	r0, [r6, #0]
 8011356:	f7ff ffb2 	bl	80112be <__hexdig_fun>
 801135a:	2800      	cmp	r0, #0
 801135c:	d1f8      	bne.n	8011350 <__gethex+0x68>
 801135e:	2201      	movs	r2, #1
 8011360:	498c      	ldr	r1, [pc, #560]	@ (8011594 <__gethex+0x2ac>)
 8011362:	4630      	mov	r0, r6
 8011364:	f7ff fefc 	bl	8011160 <strncmp>
 8011368:	2800      	cmp	r0, #0
 801136a:	d13e      	bne.n	80113ea <__gethex+0x102>
 801136c:	b944      	cbnz	r4, 8011380 <__gethex+0x98>
 801136e:	1c74      	adds	r4, r6, #1
 8011370:	4622      	mov	r2, r4
 8011372:	4616      	mov	r6, r2
 8011374:	3201      	adds	r2, #1
 8011376:	7830      	ldrb	r0, [r6, #0]
 8011378:	f7ff ffa1 	bl	80112be <__hexdig_fun>
 801137c:	2800      	cmp	r0, #0
 801137e:	d1f8      	bne.n	8011372 <__gethex+0x8a>
 8011380:	1ba4      	subs	r4, r4, r6
 8011382:	00a7      	lsls	r7, r4, #2
 8011384:	7833      	ldrb	r3, [r6, #0]
 8011386:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801138a:	2b50      	cmp	r3, #80	@ 0x50
 801138c:	d13d      	bne.n	801140a <__gethex+0x122>
 801138e:	7873      	ldrb	r3, [r6, #1]
 8011390:	2b2b      	cmp	r3, #43	@ 0x2b
 8011392:	d032      	beq.n	80113fa <__gethex+0x112>
 8011394:	2b2d      	cmp	r3, #45	@ 0x2d
 8011396:	d033      	beq.n	8011400 <__gethex+0x118>
 8011398:	1c71      	adds	r1, r6, #1
 801139a:	2400      	movs	r4, #0
 801139c:	7808      	ldrb	r0, [r1, #0]
 801139e:	f7ff ff8e 	bl	80112be <__hexdig_fun>
 80113a2:	1e43      	subs	r3, r0, #1
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b18      	cmp	r3, #24
 80113a8:	d82f      	bhi.n	801140a <__gethex+0x122>
 80113aa:	f1a0 0210 	sub.w	r2, r0, #16
 80113ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80113b2:	f7ff ff84 	bl	80112be <__hexdig_fun>
 80113b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80113ba:	230a      	movs	r3, #10
 80113bc:	fa5f fc8c 	uxtb.w	ip, ip
 80113c0:	f1bc 0f18 	cmp.w	ip, #24
 80113c4:	d91e      	bls.n	8011404 <__gethex+0x11c>
 80113c6:	b104      	cbz	r4, 80113ca <__gethex+0xe2>
 80113c8:	4252      	negs	r2, r2
 80113ca:	4417      	add	r7, r2
 80113cc:	f8ca 1000 	str.w	r1, [sl]
 80113d0:	b1ed      	cbz	r5, 801140e <__gethex+0x126>
 80113d2:	f1bb 0f00 	cmp.w	fp, #0
 80113d6:	bf0c      	ite	eq
 80113d8:	2506      	moveq	r5, #6
 80113da:	2500      	movne	r5, #0
 80113dc:	4628      	mov	r0, r5
 80113de:	b005      	add	sp, #20
 80113e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e4:	2500      	movs	r5, #0
 80113e6:	462c      	mov	r4, r5
 80113e8:	e7b1      	b.n	801134e <__gethex+0x66>
 80113ea:	2c00      	cmp	r4, #0
 80113ec:	d1c8      	bne.n	8011380 <__gethex+0x98>
 80113ee:	4627      	mov	r7, r4
 80113f0:	e7c8      	b.n	8011384 <__gethex+0x9c>
 80113f2:	464e      	mov	r6, r9
 80113f4:	462f      	mov	r7, r5
 80113f6:	2501      	movs	r5, #1
 80113f8:	e7c4      	b.n	8011384 <__gethex+0x9c>
 80113fa:	2400      	movs	r4, #0
 80113fc:	1cb1      	adds	r1, r6, #2
 80113fe:	e7cd      	b.n	801139c <__gethex+0xb4>
 8011400:	2401      	movs	r4, #1
 8011402:	e7fb      	b.n	80113fc <__gethex+0x114>
 8011404:	fb03 0002 	mla	r0, r3, r2, r0
 8011408:	e7cf      	b.n	80113aa <__gethex+0xc2>
 801140a:	4631      	mov	r1, r6
 801140c:	e7de      	b.n	80113cc <__gethex+0xe4>
 801140e:	eba6 0309 	sub.w	r3, r6, r9
 8011412:	4629      	mov	r1, r5
 8011414:	3b01      	subs	r3, #1
 8011416:	2b07      	cmp	r3, #7
 8011418:	dc0a      	bgt.n	8011430 <__gethex+0x148>
 801141a:	9801      	ldr	r0, [sp, #4]
 801141c:	f7fe f9bc 	bl	800f798 <_Balloc>
 8011420:	4604      	mov	r4, r0
 8011422:	b940      	cbnz	r0, 8011436 <__gethex+0x14e>
 8011424:	4b5c      	ldr	r3, [pc, #368]	@ (8011598 <__gethex+0x2b0>)
 8011426:	4602      	mov	r2, r0
 8011428:	21e4      	movs	r1, #228	@ 0xe4
 801142a:	485c      	ldr	r0, [pc, #368]	@ (801159c <__gethex+0x2b4>)
 801142c:	f7ff fec4 	bl	80111b8 <__assert_func>
 8011430:	3101      	adds	r1, #1
 8011432:	105b      	asrs	r3, r3, #1
 8011434:	e7ef      	b.n	8011416 <__gethex+0x12e>
 8011436:	f100 0a14 	add.w	sl, r0, #20
 801143a:	2300      	movs	r3, #0
 801143c:	4655      	mov	r5, sl
 801143e:	469b      	mov	fp, r3
 8011440:	45b1      	cmp	r9, r6
 8011442:	d337      	bcc.n	80114b4 <__gethex+0x1cc>
 8011444:	f845 bb04 	str.w	fp, [r5], #4
 8011448:	eba5 050a 	sub.w	r5, r5, sl
 801144c:	4658      	mov	r0, fp
 801144e:	10ad      	asrs	r5, r5, #2
 8011450:	6125      	str	r5, [r4, #16]
 8011452:	016d      	lsls	r5, r5, #5
 8011454:	f7fe fa94 	bl	800f980 <__hi0bits>
 8011458:	f8d8 6000 	ldr.w	r6, [r8]
 801145c:	1a2d      	subs	r5, r5, r0
 801145e:	42b5      	cmp	r5, r6
 8011460:	dd54      	ble.n	801150c <__gethex+0x224>
 8011462:	1bad      	subs	r5, r5, r6
 8011464:	4620      	mov	r0, r4
 8011466:	4629      	mov	r1, r5
 8011468:	f7fe fe31 	bl	80100ce <__any_on>
 801146c:	4681      	mov	r9, r0
 801146e:	b178      	cbz	r0, 8011490 <__gethex+0x1a8>
 8011470:	1e6b      	subs	r3, r5, #1
 8011472:	f04f 0901 	mov.w	r9, #1
 8011476:	1159      	asrs	r1, r3, #5
 8011478:	f003 021f 	and.w	r2, r3, #31
 801147c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011480:	fa09 f202 	lsl.w	r2, r9, r2
 8011484:	420a      	tst	r2, r1
 8011486:	d003      	beq.n	8011490 <__gethex+0x1a8>
 8011488:	454b      	cmp	r3, r9
 801148a:	dc36      	bgt.n	80114fa <__gethex+0x212>
 801148c:	f04f 0902 	mov.w	r9, #2
 8011490:	442f      	add	r7, r5
 8011492:	4629      	mov	r1, r5
 8011494:	4620      	mov	r0, r4
 8011496:	f7ff fec1 	bl	801121c <rshift>
 801149a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801149e:	42bb      	cmp	r3, r7
 80114a0:	da42      	bge.n	8011528 <__gethex+0x240>
 80114a2:	4621      	mov	r1, r4
 80114a4:	9801      	ldr	r0, [sp, #4]
 80114a6:	f7fe f9b7 	bl	800f818 <_Bfree>
 80114aa:	2300      	movs	r3, #0
 80114ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114ae:	25a3      	movs	r5, #163	@ 0xa3
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	e793      	b.n	80113dc <__gethex+0xf4>
 80114b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80114b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80114ba:	d012      	beq.n	80114e2 <__gethex+0x1fa>
 80114bc:	2b20      	cmp	r3, #32
 80114be:	d104      	bne.n	80114ca <__gethex+0x1e2>
 80114c0:	f845 bb04 	str.w	fp, [r5], #4
 80114c4:	f04f 0b00 	mov.w	fp, #0
 80114c8:	465b      	mov	r3, fp
 80114ca:	7830      	ldrb	r0, [r6, #0]
 80114cc:	9303      	str	r3, [sp, #12]
 80114ce:	f7ff fef6 	bl	80112be <__hexdig_fun>
 80114d2:	9b03      	ldr	r3, [sp, #12]
 80114d4:	f000 000f 	and.w	r0, r0, #15
 80114d8:	4098      	lsls	r0, r3
 80114da:	3304      	adds	r3, #4
 80114dc:	ea4b 0b00 	orr.w	fp, fp, r0
 80114e0:	e7ae      	b.n	8011440 <__gethex+0x158>
 80114e2:	45b1      	cmp	r9, r6
 80114e4:	d8ea      	bhi.n	80114bc <__gethex+0x1d4>
 80114e6:	2201      	movs	r2, #1
 80114e8:	492a      	ldr	r1, [pc, #168]	@ (8011594 <__gethex+0x2ac>)
 80114ea:	4630      	mov	r0, r6
 80114ec:	9303      	str	r3, [sp, #12]
 80114ee:	f7ff fe37 	bl	8011160 <strncmp>
 80114f2:	9b03      	ldr	r3, [sp, #12]
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d1e1      	bne.n	80114bc <__gethex+0x1d4>
 80114f8:	e7a2      	b.n	8011440 <__gethex+0x158>
 80114fa:	1ea9      	subs	r1, r5, #2
 80114fc:	4620      	mov	r0, r4
 80114fe:	f7fe fde6 	bl	80100ce <__any_on>
 8011502:	2800      	cmp	r0, #0
 8011504:	d0c2      	beq.n	801148c <__gethex+0x1a4>
 8011506:	f04f 0903 	mov.w	r9, #3
 801150a:	e7c1      	b.n	8011490 <__gethex+0x1a8>
 801150c:	da09      	bge.n	8011522 <__gethex+0x23a>
 801150e:	1b75      	subs	r5, r6, r5
 8011510:	4621      	mov	r1, r4
 8011512:	9801      	ldr	r0, [sp, #4]
 8011514:	462a      	mov	r2, r5
 8011516:	1b7f      	subs	r7, r7, r5
 8011518:	f7fe fb98 	bl	800fc4c <__lshift>
 801151c:	4604      	mov	r4, r0
 801151e:	f100 0a14 	add.w	sl, r0, #20
 8011522:	f04f 0900 	mov.w	r9, #0
 8011526:	e7b8      	b.n	801149a <__gethex+0x1b2>
 8011528:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801152c:	42bd      	cmp	r5, r7
 801152e:	dd6f      	ble.n	8011610 <__gethex+0x328>
 8011530:	1bed      	subs	r5, r5, r7
 8011532:	42ae      	cmp	r6, r5
 8011534:	dc34      	bgt.n	80115a0 <__gethex+0x2b8>
 8011536:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801153a:	2b02      	cmp	r3, #2
 801153c:	d022      	beq.n	8011584 <__gethex+0x29c>
 801153e:	2b03      	cmp	r3, #3
 8011540:	d024      	beq.n	801158c <__gethex+0x2a4>
 8011542:	2b01      	cmp	r3, #1
 8011544:	d115      	bne.n	8011572 <__gethex+0x28a>
 8011546:	42ae      	cmp	r6, r5
 8011548:	d113      	bne.n	8011572 <__gethex+0x28a>
 801154a:	2e01      	cmp	r6, #1
 801154c:	d10b      	bne.n	8011566 <__gethex+0x27e>
 801154e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011552:	2562      	movs	r5, #98	@ 0x62
 8011554:	9a02      	ldr	r2, [sp, #8]
 8011556:	6013      	str	r3, [r2, #0]
 8011558:	2301      	movs	r3, #1
 801155a:	6123      	str	r3, [r4, #16]
 801155c:	f8ca 3000 	str.w	r3, [sl]
 8011560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011562:	601c      	str	r4, [r3, #0]
 8011564:	e73a      	b.n	80113dc <__gethex+0xf4>
 8011566:	1e71      	subs	r1, r6, #1
 8011568:	4620      	mov	r0, r4
 801156a:	f7fe fdb0 	bl	80100ce <__any_on>
 801156e:	2800      	cmp	r0, #0
 8011570:	d1ed      	bne.n	801154e <__gethex+0x266>
 8011572:	4621      	mov	r1, r4
 8011574:	9801      	ldr	r0, [sp, #4]
 8011576:	f7fe f94f 	bl	800f818 <_Bfree>
 801157a:	2300      	movs	r3, #0
 801157c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801157e:	2550      	movs	r5, #80	@ 0x50
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	e72b      	b.n	80113dc <__gethex+0xf4>
 8011584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1f3      	bne.n	8011572 <__gethex+0x28a>
 801158a:	e7e0      	b.n	801154e <__gethex+0x266>
 801158c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1dd      	bne.n	801154e <__gethex+0x266>
 8011592:	e7ee      	b.n	8011572 <__gethex+0x28a>
 8011594:	08014de0 	.word	0x08014de0
 8011598:	08014c76 	.word	0x08014c76
 801159c:	08014e8d 	.word	0x08014e8d
 80115a0:	1e6f      	subs	r7, r5, #1
 80115a2:	f1b9 0f00 	cmp.w	r9, #0
 80115a6:	d130      	bne.n	801160a <__gethex+0x322>
 80115a8:	b127      	cbz	r7, 80115b4 <__gethex+0x2cc>
 80115aa:	4639      	mov	r1, r7
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7fe fd8e 	bl	80100ce <__any_on>
 80115b2:	4681      	mov	r9, r0
 80115b4:	117a      	asrs	r2, r7, #5
 80115b6:	2301      	movs	r3, #1
 80115b8:	f007 071f 	and.w	r7, r7, #31
 80115bc:	4629      	mov	r1, r5
 80115be:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80115c2:	4620      	mov	r0, r4
 80115c4:	40bb      	lsls	r3, r7
 80115c6:	1b76      	subs	r6, r6, r5
 80115c8:	2502      	movs	r5, #2
 80115ca:	4213      	tst	r3, r2
 80115cc:	bf18      	it	ne
 80115ce:	f049 0902 	orrne.w	r9, r9, #2
 80115d2:	f7ff fe23 	bl	801121c <rshift>
 80115d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80115da:	f1b9 0f00 	cmp.w	r9, #0
 80115de:	d047      	beq.n	8011670 <__gethex+0x388>
 80115e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d015      	beq.n	8011614 <__gethex+0x32c>
 80115e8:	2b03      	cmp	r3, #3
 80115ea:	d017      	beq.n	801161c <__gethex+0x334>
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d109      	bne.n	8011604 <__gethex+0x31c>
 80115f0:	f019 0f02 	tst.w	r9, #2
 80115f4:	d006      	beq.n	8011604 <__gethex+0x31c>
 80115f6:	f8da 3000 	ldr.w	r3, [sl]
 80115fa:	ea49 0903 	orr.w	r9, r9, r3
 80115fe:	f019 0f01 	tst.w	r9, #1
 8011602:	d10e      	bne.n	8011622 <__gethex+0x33a>
 8011604:	f045 0510 	orr.w	r5, r5, #16
 8011608:	e032      	b.n	8011670 <__gethex+0x388>
 801160a:	f04f 0901 	mov.w	r9, #1
 801160e:	e7d1      	b.n	80115b4 <__gethex+0x2cc>
 8011610:	2501      	movs	r5, #1
 8011612:	e7e2      	b.n	80115da <__gethex+0x2f2>
 8011614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011616:	f1c3 0301 	rsb	r3, r3, #1
 801161a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801161c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801161e:	2b00      	cmp	r3, #0
 8011620:	d0f0      	beq.n	8011604 <__gethex+0x31c>
 8011622:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011626:	f104 0314 	add.w	r3, r4, #20
 801162a:	f04f 0c00 	mov.w	ip, #0
 801162e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011632:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011636:	4618      	mov	r0, r3
 8011638:	f853 2b04 	ldr.w	r2, [r3], #4
 801163c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011640:	d01b      	beq.n	801167a <__gethex+0x392>
 8011642:	3201      	adds	r2, #1
 8011644:	6002      	str	r2, [r0, #0]
 8011646:	2d02      	cmp	r5, #2
 8011648:	f104 0314 	add.w	r3, r4, #20
 801164c:	d13c      	bne.n	80116c8 <__gethex+0x3e0>
 801164e:	f8d8 2000 	ldr.w	r2, [r8]
 8011652:	3a01      	subs	r2, #1
 8011654:	42b2      	cmp	r2, r6
 8011656:	d109      	bne.n	801166c <__gethex+0x384>
 8011658:	1171      	asrs	r1, r6, #5
 801165a:	2201      	movs	r2, #1
 801165c:	f006 061f 	and.w	r6, r6, #31
 8011660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011664:	fa02 f606 	lsl.w	r6, r2, r6
 8011668:	421e      	tst	r6, r3
 801166a:	d13a      	bne.n	80116e2 <__gethex+0x3fa>
 801166c:	f045 0520 	orr.w	r5, r5, #32
 8011670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011672:	601c      	str	r4, [r3, #0]
 8011674:	9b02      	ldr	r3, [sp, #8]
 8011676:	601f      	str	r7, [r3, #0]
 8011678:	e6b0      	b.n	80113dc <__gethex+0xf4>
 801167a:	4299      	cmp	r1, r3
 801167c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011680:	d8d9      	bhi.n	8011636 <__gethex+0x34e>
 8011682:	68a3      	ldr	r3, [r4, #8]
 8011684:	459b      	cmp	fp, r3
 8011686:	db17      	blt.n	80116b8 <__gethex+0x3d0>
 8011688:	6861      	ldr	r1, [r4, #4]
 801168a:	9801      	ldr	r0, [sp, #4]
 801168c:	3101      	adds	r1, #1
 801168e:	f7fe f883 	bl	800f798 <_Balloc>
 8011692:	4681      	mov	r9, r0
 8011694:	b918      	cbnz	r0, 801169e <__gethex+0x3b6>
 8011696:	4b1a      	ldr	r3, [pc, #104]	@ (8011700 <__gethex+0x418>)
 8011698:	4602      	mov	r2, r0
 801169a:	2184      	movs	r1, #132	@ 0x84
 801169c:	e6c5      	b.n	801142a <__gethex+0x142>
 801169e:	6922      	ldr	r2, [r4, #16]
 80116a0:	f104 010c 	add.w	r1, r4, #12
 80116a4:	300c      	adds	r0, #12
 80116a6:	3202      	adds	r2, #2
 80116a8:	0092      	lsls	r2, r2, #2
 80116aa:	f7fd f910 	bl	800e8ce <memcpy>
 80116ae:	4621      	mov	r1, r4
 80116b0:	464c      	mov	r4, r9
 80116b2:	9801      	ldr	r0, [sp, #4]
 80116b4:	f7fe f8b0 	bl	800f818 <_Bfree>
 80116b8:	6923      	ldr	r3, [r4, #16]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116c0:	6122      	str	r2, [r4, #16]
 80116c2:	2201      	movs	r2, #1
 80116c4:	615a      	str	r2, [r3, #20]
 80116c6:	e7be      	b.n	8011646 <__gethex+0x35e>
 80116c8:	6922      	ldr	r2, [r4, #16]
 80116ca:	455a      	cmp	r2, fp
 80116cc:	dd0b      	ble.n	80116e6 <__gethex+0x3fe>
 80116ce:	2101      	movs	r1, #1
 80116d0:	4620      	mov	r0, r4
 80116d2:	f7ff fda3 	bl	801121c <rshift>
 80116d6:	3701      	adds	r7, #1
 80116d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116dc:	42bb      	cmp	r3, r7
 80116de:	f6ff aee0 	blt.w	80114a2 <__gethex+0x1ba>
 80116e2:	2501      	movs	r5, #1
 80116e4:	e7c2      	b.n	801166c <__gethex+0x384>
 80116e6:	f016 061f 	ands.w	r6, r6, #31
 80116ea:	d0fa      	beq.n	80116e2 <__gethex+0x3fa>
 80116ec:	4453      	add	r3, sl
 80116ee:	f1c6 0620 	rsb	r6, r6, #32
 80116f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116f6:	f7fe f943 	bl	800f980 <__hi0bits>
 80116fa:	42b0      	cmp	r0, r6
 80116fc:	dbe7      	blt.n	80116ce <__gethex+0x3e6>
 80116fe:	e7f0      	b.n	80116e2 <__gethex+0x3fa>
 8011700:	08014c76 	.word	0x08014c76

08011704 <L_shift>:
 8011704:	f1c2 0208 	rsb	r2, r2, #8
 8011708:	0092      	lsls	r2, r2, #2
 801170a:	b570      	push	{r4, r5, r6, lr}
 801170c:	f1c2 0620 	rsb	r6, r2, #32
 8011710:	6843      	ldr	r3, [r0, #4]
 8011712:	6804      	ldr	r4, [r0, #0]
 8011714:	fa03 f506 	lsl.w	r5, r3, r6
 8011718:	40d3      	lsrs	r3, r2
 801171a:	432c      	orrs	r4, r5
 801171c:	6004      	str	r4, [r0, #0]
 801171e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011722:	4288      	cmp	r0, r1
 8011724:	d3f4      	bcc.n	8011710 <L_shift+0xc>
 8011726:	bd70      	pop	{r4, r5, r6, pc}

08011728 <__match>:
 8011728:	6803      	ldr	r3, [r0, #0]
 801172a:	3301      	adds	r3, #1
 801172c:	b530      	push	{r4, r5, lr}
 801172e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011732:	b914      	cbnz	r4, 801173a <__match+0x12>
 8011734:	6003      	str	r3, [r0, #0]
 8011736:	2001      	movs	r0, #1
 8011738:	bd30      	pop	{r4, r5, pc}
 801173a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801173e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011742:	2d19      	cmp	r5, #25
 8011744:	bf98      	it	ls
 8011746:	3220      	addls	r2, #32
 8011748:	42a2      	cmp	r2, r4
 801174a:	d0f0      	beq.n	801172e <__match+0x6>
 801174c:	2000      	movs	r0, #0
 801174e:	e7f3      	b.n	8011738 <__match+0x10>

08011750 <__hexnan>:
 8011750:	680b      	ldr	r3, [r1, #0]
 8011752:	6801      	ldr	r1, [r0, #0]
 8011754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	115e      	asrs	r6, r3, #5
 801175a:	f013 031f 	ands.w	r3, r3, #31
 801175e:	f04f 0500 	mov.w	r5, #0
 8011762:	b087      	sub	sp, #28
 8011764:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011768:	4682      	mov	sl, r0
 801176a:	4690      	mov	r8, r2
 801176c:	46ab      	mov	fp, r5
 801176e:	bf18      	it	ne
 8011770:	3604      	addne	r6, #4
 8011772:	9301      	str	r3, [sp, #4]
 8011774:	9502      	str	r5, [sp, #8]
 8011776:	1f37      	subs	r7, r6, #4
 8011778:	f846 5c04 	str.w	r5, [r6, #-4]
 801177c:	46b9      	mov	r9, r7
 801177e:	463c      	mov	r4, r7
 8011780:	1c4b      	adds	r3, r1, #1
 8011782:	784a      	ldrb	r2, [r1, #1]
 8011784:	9303      	str	r3, [sp, #12]
 8011786:	b342      	cbz	r2, 80117da <__hexnan+0x8a>
 8011788:	4610      	mov	r0, r2
 801178a:	9105      	str	r1, [sp, #20]
 801178c:	9204      	str	r2, [sp, #16]
 801178e:	f7ff fd96 	bl	80112be <__hexdig_fun>
 8011792:	2800      	cmp	r0, #0
 8011794:	d151      	bne.n	801183a <__hexnan+0xea>
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	9905      	ldr	r1, [sp, #20]
 801179a:	2a20      	cmp	r2, #32
 801179c:	d818      	bhi.n	80117d0 <__hexnan+0x80>
 801179e:	9b02      	ldr	r3, [sp, #8]
 80117a0:	459b      	cmp	fp, r3
 80117a2:	dd13      	ble.n	80117cc <__hexnan+0x7c>
 80117a4:	454c      	cmp	r4, r9
 80117a6:	d206      	bcs.n	80117b6 <__hexnan+0x66>
 80117a8:	2d07      	cmp	r5, #7
 80117aa:	dc04      	bgt.n	80117b6 <__hexnan+0x66>
 80117ac:	462a      	mov	r2, r5
 80117ae:	4649      	mov	r1, r9
 80117b0:	4620      	mov	r0, r4
 80117b2:	f7ff ffa7 	bl	8011704 <L_shift>
 80117b6:	4544      	cmp	r4, r8
 80117b8:	d951      	bls.n	801185e <__hexnan+0x10e>
 80117ba:	2300      	movs	r3, #0
 80117bc:	f1a4 0904 	sub.w	r9, r4, #4
 80117c0:	f8cd b008 	str.w	fp, [sp, #8]
 80117c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80117c8:	461d      	mov	r5, r3
 80117ca:	464c      	mov	r4, r9
 80117cc:	9903      	ldr	r1, [sp, #12]
 80117ce:	e7d7      	b.n	8011780 <__hexnan+0x30>
 80117d0:	2a29      	cmp	r2, #41	@ 0x29
 80117d2:	d156      	bne.n	8011882 <__hexnan+0x132>
 80117d4:	3102      	adds	r1, #2
 80117d6:	f8ca 1000 	str.w	r1, [sl]
 80117da:	f1bb 0f00 	cmp.w	fp, #0
 80117de:	d050      	beq.n	8011882 <__hexnan+0x132>
 80117e0:	454c      	cmp	r4, r9
 80117e2:	d206      	bcs.n	80117f2 <__hexnan+0xa2>
 80117e4:	2d07      	cmp	r5, #7
 80117e6:	dc04      	bgt.n	80117f2 <__hexnan+0xa2>
 80117e8:	462a      	mov	r2, r5
 80117ea:	4649      	mov	r1, r9
 80117ec:	4620      	mov	r0, r4
 80117ee:	f7ff ff89 	bl	8011704 <L_shift>
 80117f2:	4544      	cmp	r4, r8
 80117f4:	d935      	bls.n	8011862 <__hexnan+0x112>
 80117f6:	f1a8 0204 	sub.w	r2, r8, #4
 80117fa:	4623      	mov	r3, r4
 80117fc:	f853 1b04 	ldr.w	r1, [r3], #4
 8011800:	429f      	cmp	r7, r3
 8011802:	f842 1f04 	str.w	r1, [r2, #4]!
 8011806:	d2f9      	bcs.n	80117fc <__hexnan+0xac>
 8011808:	1b3b      	subs	r3, r7, r4
 801180a:	3e03      	subs	r6, #3
 801180c:	3401      	adds	r4, #1
 801180e:	2200      	movs	r2, #0
 8011810:	f023 0303 	bic.w	r3, r3, #3
 8011814:	3304      	adds	r3, #4
 8011816:	42b4      	cmp	r4, r6
 8011818:	bf88      	it	hi
 801181a:	2304      	movhi	r3, #4
 801181c:	4443      	add	r3, r8
 801181e:	f843 2b04 	str.w	r2, [r3], #4
 8011822:	429f      	cmp	r7, r3
 8011824:	d2fb      	bcs.n	801181e <__hexnan+0xce>
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	b91b      	cbnz	r3, 8011832 <__hexnan+0xe2>
 801182a:	4547      	cmp	r7, r8
 801182c:	d127      	bne.n	801187e <__hexnan+0x12e>
 801182e:	2301      	movs	r3, #1
 8011830:	603b      	str	r3, [r7, #0]
 8011832:	2005      	movs	r0, #5
 8011834:	b007      	add	sp, #28
 8011836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801183a:	3501      	adds	r5, #1
 801183c:	f10b 0b01 	add.w	fp, fp, #1
 8011840:	2d08      	cmp	r5, #8
 8011842:	dd05      	ble.n	8011850 <__hexnan+0x100>
 8011844:	4544      	cmp	r4, r8
 8011846:	d9c1      	bls.n	80117cc <__hexnan+0x7c>
 8011848:	2300      	movs	r3, #0
 801184a:	3c04      	subs	r4, #4
 801184c:	2501      	movs	r5, #1
 801184e:	6023      	str	r3, [r4, #0]
 8011850:	6822      	ldr	r2, [r4, #0]
 8011852:	f000 000f 	and.w	r0, r0, #15
 8011856:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801185a:	6020      	str	r0, [r4, #0]
 801185c:	e7b6      	b.n	80117cc <__hexnan+0x7c>
 801185e:	2508      	movs	r5, #8
 8011860:	e7b4      	b.n	80117cc <__hexnan+0x7c>
 8011862:	9b01      	ldr	r3, [sp, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d0de      	beq.n	8011826 <__hexnan+0xd6>
 8011868:	f1c3 0320 	rsb	r3, r3, #32
 801186c:	f04f 32ff 	mov.w	r2, #4294967295
 8011870:	40da      	lsrs	r2, r3
 8011872:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011876:	4013      	ands	r3, r2
 8011878:	f846 3c04 	str.w	r3, [r6, #-4]
 801187c:	e7d3      	b.n	8011826 <__hexnan+0xd6>
 801187e:	3f04      	subs	r7, #4
 8011880:	e7d1      	b.n	8011826 <__hexnan+0xd6>
 8011882:	2004      	movs	r0, #4
 8011884:	e7d6      	b.n	8011834 <__hexnan+0xe4>

08011886 <__ascii_mbtowc>:
 8011886:	b082      	sub	sp, #8
 8011888:	b901      	cbnz	r1, 801188c <__ascii_mbtowc+0x6>
 801188a:	a901      	add	r1, sp, #4
 801188c:	b142      	cbz	r2, 80118a0 <__ascii_mbtowc+0x1a>
 801188e:	b14b      	cbz	r3, 80118a4 <__ascii_mbtowc+0x1e>
 8011890:	7813      	ldrb	r3, [r2, #0]
 8011892:	600b      	str	r3, [r1, #0]
 8011894:	7812      	ldrb	r2, [r2, #0]
 8011896:	1e10      	subs	r0, r2, #0
 8011898:	bf18      	it	ne
 801189a:	2001      	movne	r0, #1
 801189c:	b002      	add	sp, #8
 801189e:	4770      	bx	lr
 80118a0:	4610      	mov	r0, r2
 80118a2:	e7fb      	b.n	801189c <__ascii_mbtowc+0x16>
 80118a4:	f06f 0001 	mvn.w	r0, #1
 80118a8:	e7f8      	b.n	801189c <__ascii_mbtowc+0x16>

080118aa <_realloc_r>:
 80118aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ae:	4680      	mov	r8, r0
 80118b0:	4615      	mov	r5, r2
 80118b2:	460c      	mov	r4, r1
 80118b4:	b921      	cbnz	r1, 80118c0 <_realloc_r+0x16>
 80118b6:	4611      	mov	r1, r2
 80118b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118bc:	f7fd bee0 	b.w	800f680 <_malloc_r>
 80118c0:	b92a      	cbnz	r2, 80118ce <_realloc_r+0x24>
 80118c2:	f7fd fe69 	bl	800f598 <_free_r>
 80118c6:	2400      	movs	r4, #0
 80118c8:	4620      	mov	r0, r4
 80118ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ce:	f000 f840 	bl	8011952 <_malloc_usable_size_r>
 80118d2:	4285      	cmp	r5, r0
 80118d4:	4606      	mov	r6, r0
 80118d6:	d802      	bhi.n	80118de <_realloc_r+0x34>
 80118d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80118dc:	d8f4      	bhi.n	80118c8 <_realloc_r+0x1e>
 80118de:	4629      	mov	r1, r5
 80118e0:	4640      	mov	r0, r8
 80118e2:	f7fd fecd 	bl	800f680 <_malloc_r>
 80118e6:	4607      	mov	r7, r0
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d0ec      	beq.n	80118c6 <_realloc_r+0x1c>
 80118ec:	42b5      	cmp	r5, r6
 80118ee:	462a      	mov	r2, r5
 80118f0:	4621      	mov	r1, r4
 80118f2:	bf28      	it	cs
 80118f4:	4632      	movcs	r2, r6
 80118f6:	f7fc ffea 	bl	800e8ce <memcpy>
 80118fa:	4621      	mov	r1, r4
 80118fc:	4640      	mov	r0, r8
 80118fe:	463c      	mov	r4, r7
 8011900:	f7fd fe4a 	bl	800f598 <_free_r>
 8011904:	e7e0      	b.n	80118c8 <_realloc_r+0x1e>

08011906 <__ascii_wctomb>:
 8011906:	4603      	mov	r3, r0
 8011908:	4608      	mov	r0, r1
 801190a:	b141      	cbz	r1, 801191e <__ascii_wctomb+0x18>
 801190c:	2aff      	cmp	r2, #255	@ 0xff
 801190e:	d904      	bls.n	801191a <__ascii_wctomb+0x14>
 8011910:	228a      	movs	r2, #138	@ 0x8a
 8011912:	f04f 30ff 	mov.w	r0, #4294967295
 8011916:	601a      	str	r2, [r3, #0]
 8011918:	4770      	bx	lr
 801191a:	2001      	movs	r0, #1
 801191c:	700a      	strb	r2, [r1, #0]
 801191e:	4770      	bx	lr

08011920 <fiprintf>:
 8011920:	b40e      	push	{r1, r2, r3}
 8011922:	b503      	push	{r0, r1, lr}
 8011924:	ab03      	add	r3, sp, #12
 8011926:	4601      	mov	r1, r0
 8011928:	4805      	ldr	r0, [pc, #20]	@ (8011940 <fiprintf+0x20>)
 801192a:	f853 2b04 	ldr.w	r2, [r3], #4
 801192e:	6800      	ldr	r0, [r0, #0]
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	f000 f83f 	bl	80119b4 <_vfiprintf_r>
 8011936:	b002      	add	sp, #8
 8011938:	f85d eb04 	ldr.w	lr, [sp], #4
 801193c:	b003      	add	sp, #12
 801193e:	4770      	bx	lr
 8011940:	20000034 	.word	0x20000034

08011944 <abort>:
 8011944:	2006      	movs	r0, #6
 8011946:	b508      	push	{r3, lr}
 8011948:	f000 fa08 	bl	8011d5c <raise>
 801194c:	2001      	movs	r0, #1
 801194e:	f7f3 fcfb 	bl	8005348 <_exit>

08011952 <_malloc_usable_size_r>:
 8011952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011956:	1f18      	subs	r0, r3, #4
 8011958:	2b00      	cmp	r3, #0
 801195a:	bfbc      	itt	lt
 801195c:	580b      	ldrlt	r3, [r1, r0]
 801195e:	18c0      	addlt	r0, r0, r3
 8011960:	4770      	bx	lr

08011962 <__sfputc_r>:
 8011962:	6893      	ldr	r3, [r2, #8]
 8011964:	3b01      	subs	r3, #1
 8011966:	2b00      	cmp	r3, #0
 8011968:	6093      	str	r3, [r2, #8]
 801196a:	b410      	push	{r4}
 801196c:	da08      	bge.n	8011980 <__sfputc_r+0x1e>
 801196e:	6994      	ldr	r4, [r2, #24]
 8011970:	42a3      	cmp	r3, r4
 8011972:	db01      	blt.n	8011978 <__sfputc_r+0x16>
 8011974:	290a      	cmp	r1, #10
 8011976:	d103      	bne.n	8011980 <__sfputc_r+0x1e>
 8011978:	f85d 4b04 	ldr.w	r4, [sp], #4
 801197c:	f000 b932 	b.w	8011be4 <__swbuf_r>
 8011980:	6813      	ldr	r3, [r2, #0]
 8011982:	1c58      	adds	r0, r3, #1
 8011984:	6010      	str	r0, [r2, #0]
 8011986:	4608      	mov	r0, r1
 8011988:	7019      	strb	r1, [r3, #0]
 801198a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801198e:	4770      	bx	lr

08011990 <__sfputs_r>:
 8011990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011992:	4606      	mov	r6, r0
 8011994:	460f      	mov	r7, r1
 8011996:	4614      	mov	r4, r2
 8011998:	18d5      	adds	r5, r2, r3
 801199a:	42ac      	cmp	r4, r5
 801199c:	d101      	bne.n	80119a2 <__sfputs_r+0x12>
 801199e:	2000      	movs	r0, #0
 80119a0:	e007      	b.n	80119b2 <__sfputs_r+0x22>
 80119a2:	463a      	mov	r2, r7
 80119a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119a8:	4630      	mov	r0, r6
 80119aa:	f7ff ffda 	bl	8011962 <__sfputc_r>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d1f3      	bne.n	801199a <__sfputs_r+0xa>
 80119b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119b4 <_vfiprintf_r>:
 80119b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b8:	460d      	mov	r5, r1
 80119ba:	b09d      	sub	sp, #116	@ 0x74
 80119bc:	4614      	mov	r4, r2
 80119be:	4698      	mov	r8, r3
 80119c0:	4606      	mov	r6, r0
 80119c2:	b118      	cbz	r0, 80119cc <_vfiprintf_r+0x18>
 80119c4:	6a03      	ldr	r3, [r0, #32]
 80119c6:	b90b      	cbnz	r3, 80119cc <_vfiprintf_r+0x18>
 80119c8:	f7fc fe5a 	bl	800e680 <__sinit>
 80119cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ce:	07d9      	lsls	r1, r3, #31
 80119d0:	d405      	bmi.n	80119de <_vfiprintf_r+0x2a>
 80119d2:	89ab      	ldrh	r3, [r5, #12]
 80119d4:	059a      	lsls	r2, r3, #22
 80119d6:	d402      	bmi.n	80119de <_vfiprintf_r+0x2a>
 80119d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119da:	f7fc ff68 	bl	800e8ae <__retarget_lock_acquire_recursive>
 80119de:	89ab      	ldrh	r3, [r5, #12]
 80119e0:	071b      	lsls	r3, r3, #28
 80119e2:	d501      	bpl.n	80119e8 <_vfiprintf_r+0x34>
 80119e4:	692b      	ldr	r3, [r5, #16]
 80119e6:	b99b      	cbnz	r3, 8011a10 <_vfiprintf_r+0x5c>
 80119e8:	4629      	mov	r1, r5
 80119ea:	4630      	mov	r0, r6
 80119ec:	f000 f938 	bl	8011c60 <__swsetup_r>
 80119f0:	b170      	cbz	r0, 8011a10 <_vfiprintf_r+0x5c>
 80119f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119f4:	07dc      	lsls	r4, r3, #31
 80119f6:	d504      	bpl.n	8011a02 <_vfiprintf_r+0x4e>
 80119f8:	f04f 30ff 	mov.w	r0, #4294967295
 80119fc:	b01d      	add	sp, #116	@ 0x74
 80119fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a02:	89ab      	ldrh	r3, [r5, #12]
 8011a04:	0598      	lsls	r0, r3, #22
 8011a06:	d4f7      	bmi.n	80119f8 <_vfiprintf_r+0x44>
 8011a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a0a:	f7fc ff51 	bl	800e8b0 <__retarget_lock_release_recursive>
 8011a0e:	e7f3      	b.n	80119f8 <_vfiprintf_r+0x44>
 8011a10:	2300      	movs	r3, #0
 8011a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a16:	f04f 0901 	mov.w	r9, #1
 8011a1a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011bd0 <_vfiprintf_r+0x21c>
 8011a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a20:	2320      	movs	r3, #32
 8011a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a26:	2330      	movs	r3, #48	@ 0x30
 8011a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a2c:	4623      	mov	r3, r4
 8011a2e:	469a      	mov	sl, r3
 8011a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a34:	b10a      	cbz	r2, 8011a3a <_vfiprintf_r+0x86>
 8011a36:	2a25      	cmp	r2, #37	@ 0x25
 8011a38:	d1f9      	bne.n	8011a2e <_vfiprintf_r+0x7a>
 8011a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8011a3e:	d00b      	beq.n	8011a58 <_vfiprintf_r+0xa4>
 8011a40:	465b      	mov	r3, fp
 8011a42:	4622      	mov	r2, r4
 8011a44:	4629      	mov	r1, r5
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff ffa2 	bl	8011990 <__sfputs_r>
 8011a4c:	3001      	adds	r0, #1
 8011a4e:	f000 80a7 	beq.w	8011ba0 <_vfiprintf_r+0x1ec>
 8011a52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a54:	445a      	add	r2, fp
 8011a56:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a58:	f89a 3000 	ldrb.w	r3, [sl]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 809f 	beq.w	8011ba0 <_vfiprintf_r+0x1ec>
 8011a62:	2300      	movs	r3, #0
 8011a64:	f04f 32ff 	mov.w	r2, #4294967295
 8011a68:	f10a 0a01 	add.w	sl, sl, #1
 8011a6c:	9304      	str	r3, [sp, #16]
 8011a6e:	9307      	str	r3, [sp, #28]
 8011a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a7a:	4654      	mov	r4, sl
 8011a7c:	2205      	movs	r2, #5
 8011a7e:	4854      	ldr	r0, [pc, #336]	@ (8011bd0 <_vfiprintf_r+0x21c>)
 8011a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a84:	f7fc ff15 	bl	800e8b2 <memchr>
 8011a88:	9a04      	ldr	r2, [sp, #16]
 8011a8a:	b9d8      	cbnz	r0, 8011ac4 <_vfiprintf_r+0x110>
 8011a8c:	06d1      	lsls	r1, r2, #27
 8011a8e:	bf44      	itt	mi
 8011a90:	2320      	movmi	r3, #32
 8011a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a96:	0713      	lsls	r3, r2, #28
 8011a98:	bf44      	itt	mi
 8011a9a:	232b      	movmi	r3, #43	@ 0x2b
 8011a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8011aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aa6:	d015      	beq.n	8011ad4 <_vfiprintf_r+0x120>
 8011aa8:	9a07      	ldr	r2, [sp, #28]
 8011aaa:	4654      	mov	r4, sl
 8011aac:	2000      	movs	r0, #0
 8011aae:	f04f 0c0a 	mov.w	ip, #10
 8011ab2:	4621      	mov	r1, r4
 8011ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ab8:	3b30      	subs	r3, #48	@ 0x30
 8011aba:	2b09      	cmp	r3, #9
 8011abc:	d94b      	bls.n	8011b56 <_vfiprintf_r+0x1a2>
 8011abe:	b1b0      	cbz	r0, 8011aee <_vfiprintf_r+0x13a>
 8011ac0:	9207      	str	r2, [sp, #28]
 8011ac2:	e014      	b.n	8011aee <_vfiprintf_r+0x13a>
 8011ac4:	eba0 0308 	sub.w	r3, r0, r8
 8011ac8:	46a2      	mov	sl, r4
 8011aca:	fa09 f303 	lsl.w	r3, r9, r3
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	9304      	str	r3, [sp, #16]
 8011ad2:	e7d2      	b.n	8011a7a <_vfiprintf_r+0xc6>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	1d19      	adds	r1, r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	9103      	str	r1, [sp, #12]
 8011ade:	bfbb      	ittet	lt
 8011ae0:	425b      	neglt	r3, r3
 8011ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8011ae6:	9307      	strge	r3, [sp, #28]
 8011ae8:	9307      	strlt	r3, [sp, #28]
 8011aea:	bfb8      	it	lt
 8011aec:	9204      	strlt	r2, [sp, #16]
 8011aee:	7823      	ldrb	r3, [r4, #0]
 8011af0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011af2:	d10a      	bne.n	8011b0a <_vfiprintf_r+0x156>
 8011af4:	7863      	ldrb	r3, [r4, #1]
 8011af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011af8:	d132      	bne.n	8011b60 <_vfiprintf_r+0x1ac>
 8011afa:	9b03      	ldr	r3, [sp, #12]
 8011afc:	3402      	adds	r4, #2
 8011afe:	1d1a      	adds	r2, r3, #4
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b06:	9203      	str	r2, [sp, #12]
 8011b08:	9305      	str	r3, [sp, #20]
 8011b0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011be0 <_vfiprintf_r+0x22c>
 8011b0e:	2203      	movs	r2, #3
 8011b10:	7821      	ldrb	r1, [r4, #0]
 8011b12:	4650      	mov	r0, sl
 8011b14:	f7fc fecd 	bl	800e8b2 <memchr>
 8011b18:	b138      	cbz	r0, 8011b2a <_vfiprintf_r+0x176>
 8011b1a:	eba0 000a 	sub.w	r0, r0, sl
 8011b1e:	2240      	movs	r2, #64	@ 0x40
 8011b20:	9b04      	ldr	r3, [sp, #16]
 8011b22:	3401      	adds	r4, #1
 8011b24:	4082      	lsls	r2, r0
 8011b26:	4313      	orrs	r3, r2
 8011b28:	9304      	str	r3, [sp, #16]
 8011b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b2e:	2206      	movs	r2, #6
 8011b30:	4828      	ldr	r0, [pc, #160]	@ (8011bd4 <_vfiprintf_r+0x220>)
 8011b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b36:	f7fc febc 	bl	800e8b2 <memchr>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d03f      	beq.n	8011bbe <_vfiprintf_r+0x20a>
 8011b3e:	4b26      	ldr	r3, [pc, #152]	@ (8011bd8 <_vfiprintf_r+0x224>)
 8011b40:	bb1b      	cbnz	r3, 8011b8a <_vfiprintf_r+0x1d6>
 8011b42:	9b03      	ldr	r3, [sp, #12]
 8011b44:	3307      	adds	r3, #7
 8011b46:	f023 0307 	bic.w	r3, r3, #7
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	9303      	str	r3, [sp, #12]
 8011b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b50:	443b      	add	r3, r7
 8011b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b54:	e76a      	b.n	8011a2c <_vfiprintf_r+0x78>
 8011b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b5a:	460c      	mov	r4, r1
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	e7a8      	b.n	8011ab2 <_vfiprintf_r+0xfe>
 8011b60:	2300      	movs	r3, #0
 8011b62:	3401      	adds	r4, #1
 8011b64:	f04f 0c0a 	mov.w	ip, #10
 8011b68:	4619      	mov	r1, r3
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b72:	3a30      	subs	r2, #48	@ 0x30
 8011b74:	2a09      	cmp	r2, #9
 8011b76:	d903      	bls.n	8011b80 <_vfiprintf_r+0x1cc>
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d0c6      	beq.n	8011b0a <_vfiprintf_r+0x156>
 8011b7c:	9105      	str	r1, [sp, #20]
 8011b7e:	e7c4      	b.n	8011b0a <_vfiprintf_r+0x156>
 8011b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b84:	4604      	mov	r4, r0
 8011b86:	2301      	movs	r3, #1
 8011b88:	e7f0      	b.n	8011b6c <_vfiprintf_r+0x1b8>
 8011b8a:	ab03      	add	r3, sp, #12
 8011b8c:	462a      	mov	r2, r5
 8011b8e:	a904      	add	r1, sp, #16
 8011b90:	4630      	mov	r0, r6
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	4b11      	ldr	r3, [pc, #68]	@ (8011bdc <_vfiprintf_r+0x228>)
 8011b96:	f7fb ff19 	bl	800d9cc <_printf_float>
 8011b9a:	4607      	mov	r7, r0
 8011b9c:	1c78      	adds	r0, r7, #1
 8011b9e:	d1d6      	bne.n	8011b4e <_vfiprintf_r+0x19a>
 8011ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ba2:	07d9      	lsls	r1, r3, #31
 8011ba4:	d405      	bmi.n	8011bb2 <_vfiprintf_r+0x1fe>
 8011ba6:	89ab      	ldrh	r3, [r5, #12]
 8011ba8:	059a      	lsls	r2, r3, #22
 8011baa:	d402      	bmi.n	8011bb2 <_vfiprintf_r+0x1fe>
 8011bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bae:	f7fc fe7f 	bl	800e8b0 <__retarget_lock_release_recursive>
 8011bb2:	89ab      	ldrh	r3, [r5, #12]
 8011bb4:	065b      	lsls	r3, r3, #25
 8011bb6:	f53f af1f 	bmi.w	80119f8 <_vfiprintf_r+0x44>
 8011bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bbc:	e71e      	b.n	80119fc <_vfiprintf_r+0x48>
 8011bbe:	ab03      	add	r3, sp, #12
 8011bc0:	462a      	mov	r2, r5
 8011bc2:	a904      	add	r1, sp, #16
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	9300      	str	r3, [sp, #0]
 8011bc8:	4b04      	ldr	r3, [pc, #16]	@ (8011bdc <_vfiprintf_r+0x228>)
 8011bca:	f7fc f99b 	bl	800df04 <_printf_i>
 8011bce:	e7e4      	b.n	8011b9a <_vfiprintf_r+0x1e6>
 8011bd0:	08014e38 	.word	0x08014e38
 8011bd4:	08014e42 	.word	0x08014e42
 8011bd8:	0800d9cd 	.word	0x0800d9cd
 8011bdc:	08011991 	.word	0x08011991
 8011be0:	08014e3e 	.word	0x08014e3e

08011be4 <__swbuf_r>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	460e      	mov	r6, r1
 8011be8:	4614      	mov	r4, r2
 8011bea:	4605      	mov	r5, r0
 8011bec:	b118      	cbz	r0, 8011bf6 <__swbuf_r+0x12>
 8011bee:	6a03      	ldr	r3, [r0, #32]
 8011bf0:	b90b      	cbnz	r3, 8011bf6 <__swbuf_r+0x12>
 8011bf2:	f7fc fd45 	bl	800e680 <__sinit>
 8011bf6:	69a3      	ldr	r3, [r4, #24]
 8011bf8:	60a3      	str	r3, [r4, #8]
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	071a      	lsls	r2, r3, #28
 8011bfe:	d501      	bpl.n	8011c04 <__swbuf_r+0x20>
 8011c00:	6923      	ldr	r3, [r4, #16]
 8011c02:	b943      	cbnz	r3, 8011c16 <__swbuf_r+0x32>
 8011c04:	4621      	mov	r1, r4
 8011c06:	4628      	mov	r0, r5
 8011c08:	f000 f82a 	bl	8011c60 <__swsetup_r>
 8011c0c:	b118      	cbz	r0, 8011c16 <__swbuf_r+0x32>
 8011c0e:	f04f 37ff 	mov.w	r7, #4294967295
 8011c12:	4638      	mov	r0, r7
 8011c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c16:	6823      	ldr	r3, [r4, #0]
 8011c18:	b2f6      	uxtb	r6, r6
 8011c1a:	6922      	ldr	r2, [r4, #16]
 8011c1c:	4637      	mov	r7, r6
 8011c1e:	1a98      	subs	r0, r3, r2
 8011c20:	6963      	ldr	r3, [r4, #20]
 8011c22:	4283      	cmp	r3, r0
 8011c24:	dc05      	bgt.n	8011c32 <__swbuf_r+0x4e>
 8011c26:	4621      	mov	r1, r4
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f7ff fa57 	bl	80110dc <_fflush_r>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d1ed      	bne.n	8011c0e <__swbuf_r+0x2a>
 8011c32:	68a3      	ldr	r3, [r4, #8]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	60a3      	str	r3, [r4, #8]
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	6022      	str	r2, [r4, #0]
 8011c3e:	701e      	strb	r6, [r3, #0]
 8011c40:	1c43      	adds	r3, r0, #1
 8011c42:	6962      	ldr	r2, [r4, #20]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d004      	beq.n	8011c52 <__swbuf_r+0x6e>
 8011c48:	89a3      	ldrh	r3, [r4, #12]
 8011c4a:	07db      	lsls	r3, r3, #31
 8011c4c:	d5e1      	bpl.n	8011c12 <__swbuf_r+0x2e>
 8011c4e:	2e0a      	cmp	r6, #10
 8011c50:	d1df      	bne.n	8011c12 <__swbuf_r+0x2e>
 8011c52:	4621      	mov	r1, r4
 8011c54:	4628      	mov	r0, r5
 8011c56:	f7ff fa41 	bl	80110dc <_fflush_r>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d0d9      	beq.n	8011c12 <__swbuf_r+0x2e>
 8011c5e:	e7d6      	b.n	8011c0e <__swbuf_r+0x2a>

08011c60 <__swsetup_r>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4b29      	ldr	r3, [pc, #164]	@ (8011d08 <__swsetup_r+0xa8>)
 8011c64:	4605      	mov	r5, r0
 8011c66:	460c      	mov	r4, r1
 8011c68:	6818      	ldr	r0, [r3, #0]
 8011c6a:	b118      	cbz	r0, 8011c74 <__swsetup_r+0x14>
 8011c6c:	6a03      	ldr	r3, [r0, #32]
 8011c6e:	b90b      	cbnz	r3, 8011c74 <__swsetup_r+0x14>
 8011c70:	f7fc fd06 	bl	800e680 <__sinit>
 8011c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c78:	0719      	lsls	r1, r3, #28
 8011c7a:	d422      	bmi.n	8011cc2 <__swsetup_r+0x62>
 8011c7c:	06da      	lsls	r2, r3, #27
 8011c7e:	d407      	bmi.n	8011c90 <__swsetup_r+0x30>
 8011c80:	2209      	movs	r2, #9
 8011c82:	602a      	str	r2, [r5, #0]
 8011c84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c88:	f04f 30ff 	mov.w	r0, #4294967295
 8011c8c:	81a3      	strh	r3, [r4, #12]
 8011c8e:	e033      	b.n	8011cf8 <__swsetup_r+0x98>
 8011c90:	0758      	lsls	r0, r3, #29
 8011c92:	d512      	bpl.n	8011cba <__swsetup_r+0x5a>
 8011c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c96:	b141      	cbz	r1, 8011caa <__swsetup_r+0x4a>
 8011c98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c9c:	4299      	cmp	r1, r3
 8011c9e:	d002      	beq.n	8011ca6 <__swsetup_r+0x46>
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	f7fd fc79 	bl	800f598 <_free_r>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011caa:	89a3      	ldrh	r3, [r4, #12]
 8011cac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	6063      	str	r3, [r4, #4]
 8011cb6:	6923      	ldr	r3, [r4, #16]
 8011cb8:	6023      	str	r3, [r4, #0]
 8011cba:	89a3      	ldrh	r3, [r4, #12]
 8011cbc:	f043 0308 	orr.w	r3, r3, #8
 8011cc0:	81a3      	strh	r3, [r4, #12]
 8011cc2:	6923      	ldr	r3, [r4, #16]
 8011cc4:	b94b      	cbnz	r3, 8011cda <__swsetup_r+0x7a>
 8011cc6:	89a3      	ldrh	r3, [r4, #12]
 8011cc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cd0:	d003      	beq.n	8011cda <__swsetup_r+0x7a>
 8011cd2:	4621      	mov	r1, r4
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f000 f882 	bl	8011dde <__smakebuf_r>
 8011cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cde:	f013 0201 	ands.w	r2, r3, #1
 8011ce2:	d00a      	beq.n	8011cfa <__swsetup_r+0x9a>
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	60a2      	str	r2, [r4, #8]
 8011ce8:	6962      	ldr	r2, [r4, #20]
 8011cea:	4252      	negs	r2, r2
 8011cec:	61a2      	str	r2, [r4, #24]
 8011cee:	6922      	ldr	r2, [r4, #16]
 8011cf0:	b942      	cbnz	r2, 8011d04 <__swsetup_r+0xa4>
 8011cf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011cf6:	d1c5      	bne.n	8011c84 <__swsetup_r+0x24>
 8011cf8:	bd38      	pop	{r3, r4, r5, pc}
 8011cfa:	0799      	lsls	r1, r3, #30
 8011cfc:	bf58      	it	pl
 8011cfe:	6962      	ldrpl	r2, [r4, #20]
 8011d00:	60a2      	str	r2, [r4, #8]
 8011d02:	e7f4      	b.n	8011cee <__swsetup_r+0x8e>
 8011d04:	2000      	movs	r0, #0
 8011d06:	e7f7      	b.n	8011cf8 <__swsetup_r+0x98>
 8011d08:	20000034 	.word	0x20000034

08011d0c <_raise_r>:
 8011d0c:	291f      	cmp	r1, #31
 8011d0e:	b538      	push	{r3, r4, r5, lr}
 8011d10:	4605      	mov	r5, r0
 8011d12:	460c      	mov	r4, r1
 8011d14:	d904      	bls.n	8011d20 <_raise_r+0x14>
 8011d16:	2316      	movs	r3, #22
 8011d18:	6003      	str	r3, [r0, #0]
 8011d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1e:	bd38      	pop	{r3, r4, r5, pc}
 8011d20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d22:	b112      	cbz	r2, 8011d2a <_raise_r+0x1e>
 8011d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d28:	b94b      	cbnz	r3, 8011d3e <_raise_r+0x32>
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	f000 f830 	bl	8011d90 <_getpid_r>
 8011d30:	4622      	mov	r2, r4
 8011d32:	4601      	mov	r1, r0
 8011d34:	4628      	mov	r0, r5
 8011d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d3a:	f000 b817 	b.w	8011d6c <_kill_r>
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d00a      	beq.n	8011d58 <_raise_r+0x4c>
 8011d42:	1c59      	adds	r1, r3, #1
 8011d44:	d103      	bne.n	8011d4e <_raise_r+0x42>
 8011d46:	2316      	movs	r3, #22
 8011d48:	6003      	str	r3, [r0, #0]
 8011d4a:	2001      	movs	r0, #1
 8011d4c:	e7e7      	b.n	8011d1e <_raise_r+0x12>
 8011d4e:	2100      	movs	r1, #0
 8011d50:	4620      	mov	r0, r4
 8011d52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d56:	4798      	blx	r3
 8011d58:	2000      	movs	r0, #0
 8011d5a:	e7e0      	b.n	8011d1e <_raise_r+0x12>

08011d5c <raise>:
 8011d5c:	4b02      	ldr	r3, [pc, #8]	@ (8011d68 <raise+0xc>)
 8011d5e:	4601      	mov	r1, r0
 8011d60:	6818      	ldr	r0, [r3, #0]
 8011d62:	f7ff bfd3 	b.w	8011d0c <_raise_r>
 8011d66:	bf00      	nop
 8011d68:	20000034 	.word	0x20000034

08011d6c <_kill_r>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	2300      	movs	r3, #0
 8011d70:	4d06      	ldr	r5, [pc, #24]	@ (8011d8c <_kill_r+0x20>)
 8011d72:	4604      	mov	r4, r0
 8011d74:	4608      	mov	r0, r1
 8011d76:	4611      	mov	r1, r2
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	f7f3 fad5 	bl	8005328 <_kill>
 8011d7e:	1c43      	adds	r3, r0, #1
 8011d80:	d102      	bne.n	8011d88 <_kill_r+0x1c>
 8011d82:	682b      	ldr	r3, [r5, #0]
 8011d84:	b103      	cbz	r3, 8011d88 <_kill_r+0x1c>
 8011d86:	6023      	str	r3, [r4, #0]
 8011d88:	bd38      	pop	{r3, r4, r5, pc}
 8011d8a:	bf00      	nop
 8011d8c:	2003b3b4 	.word	0x2003b3b4

08011d90 <_getpid_r>:
 8011d90:	f7f3 bac2 	b.w	8005318 <_getpid>

08011d94 <__swhatbuf_r>:
 8011d94:	b570      	push	{r4, r5, r6, lr}
 8011d96:	460c      	mov	r4, r1
 8011d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d9c:	b096      	sub	sp, #88	@ 0x58
 8011d9e:	4615      	mov	r5, r2
 8011da0:	2900      	cmp	r1, #0
 8011da2:	461e      	mov	r6, r3
 8011da4:	da0c      	bge.n	8011dc0 <__swhatbuf_r+0x2c>
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	2100      	movs	r1, #0
 8011daa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011dae:	bf14      	ite	ne
 8011db0:	2340      	movne	r3, #64	@ 0x40
 8011db2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011db6:	2000      	movs	r0, #0
 8011db8:	6031      	str	r1, [r6, #0]
 8011dba:	602b      	str	r3, [r5, #0]
 8011dbc:	b016      	add	sp, #88	@ 0x58
 8011dbe:	bd70      	pop	{r4, r5, r6, pc}
 8011dc0:	466a      	mov	r2, sp
 8011dc2:	f000 f849 	bl	8011e58 <_fstat_r>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	dbed      	blt.n	8011da6 <__swhatbuf_r+0x12>
 8011dca:	9901      	ldr	r1, [sp, #4]
 8011dcc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011dd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011dd4:	4259      	negs	r1, r3
 8011dd6:	4159      	adcs	r1, r3
 8011dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ddc:	e7eb      	b.n	8011db6 <__swhatbuf_r+0x22>

08011dde <__smakebuf_r>:
 8011dde:	898b      	ldrh	r3, [r1, #12]
 8011de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011de2:	079d      	lsls	r5, r3, #30
 8011de4:	4606      	mov	r6, r0
 8011de6:	460c      	mov	r4, r1
 8011de8:	d507      	bpl.n	8011dfa <__smakebuf_r+0x1c>
 8011dea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011dee:	6023      	str	r3, [r4, #0]
 8011df0:	6123      	str	r3, [r4, #16]
 8011df2:	2301      	movs	r3, #1
 8011df4:	6163      	str	r3, [r4, #20]
 8011df6:	b003      	add	sp, #12
 8011df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dfa:	ab01      	add	r3, sp, #4
 8011dfc:	466a      	mov	r2, sp
 8011dfe:	f7ff ffc9 	bl	8011d94 <__swhatbuf_r>
 8011e02:	9f00      	ldr	r7, [sp, #0]
 8011e04:	4605      	mov	r5, r0
 8011e06:	4630      	mov	r0, r6
 8011e08:	4639      	mov	r1, r7
 8011e0a:	f7fd fc39 	bl	800f680 <_malloc_r>
 8011e0e:	b948      	cbnz	r0, 8011e24 <__smakebuf_r+0x46>
 8011e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e14:	059a      	lsls	r2, r3, #22
 8011e16:	d4ee      	bmi.n	8011df6 <__smakebuf_r+0x18>
 8011e18:	f023 0303 	bic.w	r3, r3, #3
 8011e1c:	f043 0302 	orr.w	r3, r3, #2
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	e7e2      	b.n	8011dea <__smakebuf_r+0xc>
 8011e24:	89a3      	ldrh	r3, [r4, #12]
 8011e26:	6020      	str	r0, [r4, #0]
 8011e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e2c:	81a3      	strh	r3, [r4, #12]
 8011e2e:	9b01      	ldr	r3, [sp, #4]
 8011e30:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e34:	b15b      	cbz	r3, 8011e4e <__smakebuf_r+0x70>
 8011e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	f000 f81e 	bl	8011e7c <_isatty_r>
 8011e40:	b128      	cbz	r0, 8011e4e <__smakebuf_r+0x70>
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	f023 0303 	bic.w	r3, r3, #3
 8011e48:	f043 0301 	orr.w	r3, r3, #1
 8011e4c:	81a3      	strh	r3, [r4, #12]
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	431d      	orrs	r5, r3
 8011e52:	81a5      	strh	r5, [r4, #12]
 8011e54:	e7cf      	b.n	8011df6 <__smakebuf_r+0x18>
	...

08011e58 <_fstat_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	4d06      	ldr	r5, [pc, #24]	@ (8011e78 <_fstat_r+0x20>)
 8011e5e:	4604      	mov	r4, r0
 8011e60:	4608      	mov	r0, r1
 8011e62:	4611      	mov	r1, r2
 8011e64:	602b      	str	r3, [r5, #0]
 8011e66:	f7f3 fabf 	bl	80053e8 <_fstat>
 8011e6a:	1c43      	adds	r3, r0, #1
 8011e6c:	d102      	bne.n	8011e74 <_fstat_r+0x1c>
 8011e6e:	682b      	ldr	r3, [r5, #0]
 8011e70:	b103      	cbz	r3, 8011e74 <_fstat_r+0x1c>
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	bd38      	pop	{r3, r4, r5, pc}
 8011e76:	bf00      	nop
 8011e78:	2003b3b4 	.word	0x2003b3b4

08011e7c <_isatty_r>:
 8011e7c:	b538      	push	{r3, r4, r5, lr}
 8011e7e:	2300      	movs	r3, #0
 8011e80:	4d05      	ldr	r5, [pc, #20]	@ (8011e98 <_isatty_r+0x1c>)
 8011e82:	4604      	mov	r4, r0
 8011e84:	4608      	mov	r0, r1
 8011e86:	602b      	str	r3, [r5, #0]
 8011e88:	f7f3 fabe 	bl	8005408 <_isatty>
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	d102      	bne.n	8011e96 <_isatty_r+0x1a>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	b103      	cbz	r3, 8011e96 <_isatty_r+0x1a>
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	bd38      	pop	{r3, r4, r5, pc}
 8011e98:	2003b3b4 	.word	0x2003b3b4

08011e9c <atan2>:
 8011e9c:	f000 bbb4 	b.w	8012608 <__ieee754_atan2>

08011ea0 <pow>:
 8011ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea2:	ec55 4b11 	vmov	r4, r5, d1
 8011ea6:	ed2d 8b02 	vpush	{d8}
 8011eaa:	eeb0 8a40 	vmov.f32	s16, s0
 8011eae:	eef0 8a60 	vmov.f32	s17, s1
 8011eb2:	f000 fc71 	bl	8012798 <__ieee754_pow>
 8011eb6:	4622      	mov	r2, r4
 8011eb8:	462b      	mov	r3, r5
 8011eba:	4620      	mov	r0, r4
 8011ebc:	4629      	mov	r1, r5
 8011ebe:	ec57 6b10 	vmov	r6, r7, d0
 8011ec2:	f7ee fe47 	bl	8000b54 <__aeabi_dcmpun>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d13b      	bne.n	8011f42 <pow+0xa2>
 8011eca:	2200      	movs	r2, #0
 8011ecc:	2300      	movs	r3, #0
 8011ece:	ec51 0b18 	vmov	r0, r1, d8
 8011ed2:	f7ee fe0d 	bl	8000af0 <__aeabi_dcmpeq>
 8011ed6:	b1b8      	cbz	r0, 8011f08 <pow+0x68>
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2300      	movs	r3, #0
 8011edc:	4620      	mov	r0, r4
 8011ede:	4629      	mov	r1, r5
 8011ee0:	f7ee fe06 	bl	8000af0 <__aeabi_dcmpeq>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d146      	bne.n	8011f76 <pow+0xd6>
 8011ee8:	ec45 4b10 	vmov	d0, r4, r5
 8011eec:	f000 f91c 	bl	8012128 <finite>
 8011ef0:	b338      	cbz	r0, 8011f42 <pow+0xa2>
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	4629      	mov	r1, r5
 8011efa:	f7ee fe03 	bl	8000b04 <__aeabi_dcmplt>
 8011efe:	b300      	cbz	r0, 8011f42 <pow+0xa2>
 8011f00:	f7fc fcaa 	bl	800e858 <__errno>
 8011f04:	2322      	movs	r3, #34	@ 0x22
 8011f06:	e01b      	b.n	8011f40 <pow+0xa0>
 8011f08:	ec47 6b10 	vmov	d0, r6, r7
 8011f0c:	f000 f90c 	bl	8012128 <finite>
 8011f10:	b9e0      	cbnz	r0, 8011f4c <pow+0xac>
 8011f12:	eeb0 0a48 	vmov.f32	s0, s16
 8011f16:	eef0 0a68 	vmov.f32	s1, s17
 8011f1a:	f000 f905 	bl	8012128 <finite>
 8011f1e:	b1a8      	cbz	r0, 8011f4c <pow+0xac>
 8011f20:	ec45 4b10 	vmov	d0, r4, r5
 8011f24:	f000 f900 	bl	8012128 <finite>
 8011f28:	b180      	cbz	r0, 8011f4c <pow+0xac>
 8011f2a:	4632      	mov	r2, r6
 8011f2c:	463b      	mov	r3, r7
 8011f2e:	4630      	mov	r0, r6
 8011f30:	4639      	mov	r1, r7
 8011f32:	f7ee fe0f 	bl	8000b54 <__aeabi_dcmpun>
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0e2      	beq.n	8011f00 <pow+0x60>
 8011f3a:	f7fc fc8d 	bl	800e858 <__errno>
 8011f3e:	2321      	movs	r3, #33	@ 0x21
 8011f40:	6003      	str	r3, [r0, #0]
 8011f42:	ecbd 8b02 	vpop	{d8}
 8011f46:	ec47 6b10 	vmov	d0, r6, r7
 8011f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2300      	movs	r3, #0
 8011f50:	4630      	mov	r0, r6
 8011f52:	4639      	mov	r1, r7
 8011f54:	f7ee fdcc 	bl	8000af0 <__aeabi_dcmpeq>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d0f2      	beq.n	8011f42 <pow+0xa2>
 8011f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8011f60:	eef0 0a68 	vmov.f32	s1, s17
 8011f64:	f000 f8e0 	bl	8012128 <finite>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d0ea      	beq.n	8011f42 <pow+0xa2>
 8011f6c:	ec45 4b10 	vmov	d0, r4, r5
 8011f70:	f000 f8da 	bl	8012128 <finite>
 8011f74:	e7c3      	b.n	8011efe <pow+0x5e>
 8011f76:	2600      	movs	r6, #0
 8011f78:	4f00      	ldr	r7, [pc, #0]	@ (8011f7c <pow+0xdc>)
 8011f7a:	e7e2      	b.n	8011f42 <pow+0xa2>
 8011f7c:	3ff00000 	.word	0x3ff00000

08011f80 <sqrt>:
 8011f80:	b538      	push	{r3, r4, r5, lr}
 8011f82:	ec55 4b10 	vmov	r4, r5, d0
 8011f86:	ed2d 8b02 	vpush	{d8}
 8011f8a:	f000 f8d9 	bl	8012140 <__ieee754_sqrt>
 8011f8e:	4622      	mov	r2, r4
 8011f90:	462b      	mov	r3, r5
 8011f92:	4620      	mov	r0, r4
 8011f94:	4629      	mov	r1, r5
 8011f96:	eeb0 8a40 	vmov.f32	s16, s0
 8011f9a:	eef0 8a60 	vmov.f32	s17, s1
 8011f9e:	f7ee fdd9 	bl	8000b54 <__aeabi_dcmpun>
 8011fa2:	b990      	cbnz	r0, 8011fca <sqrt+0x4a>
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	4620      	mov	r0, r4
 8011faa:	4629      	mov	r1, r5
 8011fac:	f7ee fdaa 	bl	8000b04 <__aeabi_dcmplt>
 8011fb0:	b158      	cbz	r0, 8011fca <sqrt+0x4a>
 8011fb2:	f7fc fc51 	bl	800e858 <__errno>
 8011fb6:	2321      	movs	r3, #33	@ 0x21
 8011fb8:	2200      	movs	r2, #0
 8011fba:	6003      	str	r3, [r0, #0]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f7ee fc57 	bl	8000874 <__aeabi_ddiv>
 8011fc6:	ec41 0b18 	vmov	d8, r0, r1
 8011fca:	eeb0 0a48 	vmov.f32	s0, s16
 8011fce:	eef0 0a68 	vmov.f32	s1, s17
 8011fd2:	ecbd 8b02 	vpop	{d8}
 8011fd6:	bd38      	pop	{r3, r4, r5, pc}

08011fd8 <cos>:
 8011fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fda:	ec53 2b10 	vmov	r2, r3, d0
 8011fde:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011fe2:	4825      	ldr	r0, [pc, #148]	@ (8012078 <cos+0xa0>)
 8011fe4:	4281      	cmp	r1, r0
 8011fe6:	d806      	bhi.n	8011ff6 <cos+0x1e>
 8011fe8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012070 <cos+0x98>
 8011fec:	b005      	add	sp, #20
 8011fee:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ff2:	f000 b985 	b.w	8012300 <__kernel_cos>
 8011ff6:	4821      	ldr	r0, [pc, #132]	@ (801207c <cos+0xa4>)
 8011ff8:	4281      	cmp	r1, r0
 8011ffa:	d908      	bls.n	801200e <cos+0x36>
 8011ffc:	4610      	mov	r0, r2
 8011ffe:	4619      	mov	r1, r3
 8012000:	f7ee f956 	bl	80002b0 <__aeabi_dsub>
 8012004:	ec41 0b10 	vmov	d0, r0, r1
 8012008:	b005      	add	sp, #20
 801200a:	f85d fb04 	ldr.w	pc, [sp], #4
 801200e:	4668      	mov	r0, sp
 8012010:	f001 f902 	bl	8013218 <__ieee754_rem_pio2>
 8012014:	f000 0003 	and.w	r0, r0, #3
 8012018:	2801      	cmp	r0, #1
 801201a:	d00b      	beq.n	8012034 <cos+0x5c>
 801201c:	2802      	cmp	r0, #2
 801201e:	d015      	beq.n	801204c <cos+0x74>
 8012020:	b9d8      	cbnz	r0, 801205a <cos+0x82>
 8012022:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012026:	ed9d 0b00 	vldr	d0, [sp]
 801202a:	f000 f969 	bl	8012300 <__kernel_cos>
 801202e:	ec51 0b10 	vmov	r0, r1, d0
 8012032:	e7e7      	b.n	8012004 <cos+0x2c>
 8012034:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012038:	ed9d 0b00 	vldr	d0, [sp]
 801203c:	f000 fa28 	bl	8012490 <__kernel_sin>
 8012040:	ec53 2b10 	vmov	r2, r3, d0
 8012044:	4610      	mov	r0, r2
 8012046:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801204a:	e7db      	b.n	8012004 <cos+0x2c>
 801204c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012050:	ed9d 0b00 	vldr	d0, [sp]
 8012054:	f000 f954 	bl	8012300 <__kernel_cos>
 8012058:	e7f2      	b.n	8012040 <cos+0x68>
 801205a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801205e:	ed9d 0b00 	vldr	d0, [sp]
 8012062:	2001      	movs	r0, #1
 8012064:	f000 fa14 	bl	8012490 <__kernel_sin>
 8012068:	e7e1      	b.n	801202e <cos+0x56>
 801206a:	bf00      	nop
 801206c:	f3af 8000 	nop.w
	...
 8012078:	3fe921fb 	.word	0x3fe921fb
 801207c:	7fefffff 	.word	0x7fefffff

08012080 <sin>:
 8012080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012082:	ec53 2b10 	vmov	r2, r3, d0
 8012086:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801208a:	4825      	ldr	r0, [pc, #148]	@ (8012120 <sin+0xa0>)
 801208c:	4281      	cmp	r1, r0
 801208e:	d807      	bhi.n	80120a0 <sin+0x20>
 8012090:	2000      	movs	r0, #0
 8012092:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012118 <sin+0x98>
 8012096:	b005      	add	sp, #20
 8012098:	f85d eb04 	ldr.w	lr, [sp], #4
 801209c:	f000 b9f8 	b.w	8012490 <__kernel_sin>
 80120a0:	4820      	ldr	r0, [pc, #128]	@ (8012124 <sin+0xa4>)
 80120a2:	4281      	cmp	r1, r0
 80120a4:	d908      	bls.n	80120b8 <sin+0x38>
 80120a6:	4610      	mov	r0, r2
 80120a8:	4619      	mov	r1, r3
 80120aa:	f7ee f901 	bl	80002b0 <__aeabi_dsub>
 80120ae:	ec41 0b10 	vmov	d0, r0, r1
 80120b2:	b005      	add	sp, #20
 80120b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80120b8:	4668      	mov	r0, sp
 80120ba:	f001 f8ad 	bl	8013218 <__ieee754_rem_pio2>
 80120be:	f000 0003 	and.w	r0, r0, #3
 80120c2:	2801      	cmp	r0, #1
 80120c4:	d00c      	beq.n	80120e0 <sin+0x60>
 80120c6:	2802      	cmp	r0, #2
 80120c8:	d011      	beq.n	80120ee <sin+0x6e>
 80120ca:	b9e8      	cbnz	r0, 8012108 <sin+0x88>
 80120cc:	2001      	movs	r0, #1
 80120ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120d2:	ed9d 0b00 	vldr	d0, [sp]
 80120d6:	f000 f9db 	bl	8012490 <__kernel_sin>
 80120da:	ec51 0b10 	vmov	r0, r1, d0
 80120de:	e7e6      	b.n	80120ae <sin+0x2e>
 80120e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120e4:	ed9d 0b00 	vldr	d0, [sp]
 80120e8:	f000 f90a 	bl	8012300 <__kernel_cos>
 80120ec:	e7f5      	b.n	80120da <sin+0x5a>
 80120ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120f2:	ed9d 0b00 	vldr	d0, [sp]
 80120f6:	2001      	movs	r0, #1
 80120f8:	f000 f9ca 	bl	8012490 <__kernel_sin>
 80120fc:	ec53 2b10 	vmov	r2, r3, d0
 8012100:	4610      	mov	r0, r2
 8012102:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012106:	e7d2      	b.n	80120ae <sin+0x2e>
 8012108:	ed9d 1b02 	vldr	d1, [sp, #8]
 801210c:	ed9d 0b00 	vldr	d0, [sp]
 8012110:	f000 f8f6 	bl	8012300 <__kernel_cos>
 8012114:	e7f2      	b.n	80120fc <sin+0x7c>
 8012116:	bf00      	nop
	...
 8012120:	3fe921fb 	.word	0x3fe921fb
 8012124:	7fefffff 	.word	0x7fefffff

08012128 <finite>:
 8012128:	b082      	sub	sp, #8
 801212a:	ed8d 0b00 	vstr	d0, [sp]
 801212e:	9801      	ldr	r0, [sp, #4]
 8012130:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012134:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012138:	0fc0      	lsrs	r0, r0, #31
 801213a:	b002      	add	sp, #8
 801213c:	4770      	bx	lr
	...

08012140 <__ieee754_sqrt>:
 8012140:	4a6b      	ldr	r2, [pc, #428]	@ (80122f0 <__ieee754_sqrt+0x1b0>)
 8012142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012146:	ec55 4b10 	vmov	r4, r5, d0
 801214a:	43aa      	bics	r2, r5
 801214c:	462b      	mov	r3, r5
 801214e:	4621      	mov	r1, r4
 8012150:	d110      	bne.n	8012174 <__ieee754_sqrt+0x34>
 8012152:	4622      	mov	r2, r4
 8012154:	4620      	mov	r0, r4
 8012156:	4629      	mov	r1, r5
 8012158:	f7ee fa62 	bl	8000620 <__aeabi_dmul>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4620      	mov	r0, r4
 8012162:	4629      	mov	r1, r5
 8012164:	f7ee f8a6 	bl	80002b4 <__adddf3>
 8012168:	4604      	mov	r4, r0
 801216a:	460d      	mov	r5, r1
 801216c:	ec45 4b10 	vmov	d0, r4, r5
 8012170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012174:	2d00      	cmp	r5, #0
 8012176:	dc0e      	bgt.n	8012196 <__ieee754_sqrt+0x56>
 8012178:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801217c:	4322      	orrs	r2, r4
 801217e:	d0f5      	beq.n	801216c <__ieee754_sqrt+0x2c>
 8012180:	b19d      	cbz	r5, 80121aa <__ieee754_sqrt+0x6a>
 8012182:	4622      	mov	r2, r4
 8012184:	4620      	mov	r0, r4
 8012186:	4629      	mov	r1, r5
 8012188:	f7ee f892 	bl	80002b0 <__aeabi_dsub>
 801218c:	4602      	mov	r2, r0
 801218e:	460b      	mov	r3, r1
 8012190:	f7ee fb70 	bl	8000874 <__aeabi_ddiv>
 8012194:	e7e8      	b.n	8012168 <__ieee754_sqrt+0x28>
 8012196:	152a      	asrs	r2, r5, #20
 8012198:	d115      	bne.n	80121c6 <__ieee754_sqrt+0x86>
 801219a:	2000      	movs	r0, #0
 801219c:	e009      	b.n	80121b2 <__ieee754_sqrt+0x72>
 801219e:	0acb      	lsrs	r3, r1, #11
 80121a0:	3a15      	subs	r2, #21
 80121a2:	0549      	lsls	r1, r1, #21
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d0fa      	beq.n	801219e <__ieee754_sqrt+0x5e>
 80121a8:	e7f7      	b.n	801219a <__ieee754_sqrt+0x5a>
 80121aa:	462a      	mov	r2, r5
 80121ac:	e7fa      	b.n	80121a4 <__ieee754_sqrt+0x64>
 80121ae:	005b      	lsls	r3, r3, #1
 80121b0:	3001      	adds	r0, #1
 80121b2:	02dc      	lsls	r4, r3, #11
 80121b4:	d5fb      	bpl.n	80121ae <__ieee754_sqrt+0x6e>
 80121b6:	1e44      	subs	r4, r0, #1
 80121b8:	1b12      	subs	r2, r2, r4
 80121ba:	f1c0 0420 	rsb	r4, r0, #32
 80121be:	fa21 f404 	lsr.w	r4, r1, r4
 80121c2:	4081      	lsls	r1, r0
 80121c4:	4323      	orrs	r3, r4
 80121c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80121ce:	07d2      	lsls	r2, r2, #31
 80121d0:	f04f 0600 	mov.w	r6, #0
 80121d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121d8:	ea4f 0565 	mov.w	r5, r5, asr #1
 80121dc:	f04f 0016 	mov.w	r0, #22
 80121e0:	4632      	mov	r2, r6
 80121e2:	bf58      	it	pl
 80121e4:	005b      	lslpl	r3, r3, #1
 80121e6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80121ea:	bf5c      	itt	pl
 80121ec:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80121f0:	0049      	lslpl	r1, r1, #1
 80121f2:	005b      	lsls	r3, r3, #1
 80121f4:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80121f8:	0049      	lsls	r1, r1, #1
 80121fa:	1917      	adds	r7, r2, r4
 80121fc:	429f      	cmp	r7, r3
 80121fe:	bfde      	ittt	le
 8012200:	193a      	addle	r2, r7, r4
 8012202:	1bdb      	suble	r3, r3, r7
 8012204:	1936      	addle	r6, r6, r4
 8012206:	0fcf      	lsrs	r7, r1, #31
 8012208:	3801      	subs	r0, #1
 801220a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801220e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012212:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012216:	d1f0      	bne.n	80121fa <__ieee754_sqrt+0xba>
 8012218:	4604      	mov	r4, r0
 801221a:	2720      	movs	r7, #32
 801221c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012220:	429a      	cmp	r2, r3
 8012222:	eb00 0e0c 	add.w	lr, r0, ip
 8012226:	db02      	blt.n	801222e <__ieee754_sqrt+0xee>
 8012228:	d113      	bne.n	8012252 <__ieee754_sqrt+0x112>
 801222a:	458e      	cmp	lr, r1
 801222c:	d811      	bhi.n	8012252 <__ieee754_sqrt+0x112>
 801222e:	f1be 0f00 	cmp.w	lr, #0
 8012232:	eb0e 000c 	add.w	r0, lr, ip
 8012236:	da43      	bge.n	80122c0 <__ieee754_sqrt+0x180>
 8012238:	2800      	cmp	r0, #0
 801223a:	db41      	blt.n	80122c0 <__ieee754_sqrt+0x180>
 801223c:	f102 0801 	add.w	r8, r2, #1
 8012240:	1a9b      	subs	r3, r3, r2
 8012242:	458e      	cmp	lr, r1
 8012244:	4464      	add	r4, ip
 8012246:	eba1 010e 	sub.w	r1, r1, lr
 801224a:	bf88      	it	hi
 801224c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012250:	4642      	mov	r2, r8
 8012252:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012256:	3f01      	subs	r7, #1
 8012258:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801225c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012260:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012264:	d1dc      	bne.n	8012220 <__ieee754_sqrt+0xe0>
 8012266:	4319      	orrs	r1, r3
 8012268:	d01b      	beq.n	80122a2 <__ieee754_sqrt+0x162>
 801226a:	f8df a088 	ldr.w	sl, [pc, #136]	@ 80122f4 <__ieee754_sqrt+0x1b4>
 801226e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 80122f8 <__ieee754_sqrt+0x1b8>
 8012272:	e9da 0100 	ldrd	r0, r1, [sl]
 8012276:	e9db 2300 	ldrd	r2, r3, [fp]
 801227a:	e9da 8900 	ldrd	r8, r9, [sl]
 801227e:	f7ee f817 	bl	80002b0 <__aeabi_dsub>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4640      	mov	r0, r8
 8012288:	4649      	mov	r1, r9
 801228a:	f7ee fc45 	bl	8000b18 <__aeabi_dcmple>
 801228e:	b140      	cbz	r0, 80122a2 <__ieee754_sqrt+0x162>
 8012290:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012294:	e9da 0100 	ldrd	r0, r1, [sl]
 8012298:	e9db 2300 	ldrd	r2, r3, [fp]
 801229c:	d112      	bne.n	80122c4 <__ieee754_sqrt+0x184>
 801229e:	3601      	adds	r6, #1
 80122a0:	463c      	mov	r4, r7
 80122a2:	1072      	asrs	r2, r6, #1
 80122a4:	07f1      	lsls	r1, r6, #31
 80122a6:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80122aa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80122ae:	bf48      	it	mi
 80122b0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80122b4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80122b8:	4618      	mov	r0, r3
 80122ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80122be:	e753      	b.n	8012168 <__ieee754_sqrt+0x28>
 80122c0:	4690      	mov	r8, r2
 80122c2:	e7bd      	b.n	8012240 <__ieee754_sqrt+0x100>
 80122c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80122c8:	f7ed fff4 	bl	80002b4 <__adddf3>
 80122cc:	4602      	mov	r2, r0
 80122ce:	460b      	mov	r3, r1
 80122d0:	4640      	mov	r0, r8
 80122d2:	4649      	mov	r1, r9
 80122d4:	f7ee fc16 	bl	8000b04 <__aeabi_dcmplt>
 80122d8:	b128      	cbz	r0, 80122e6 <__ieee754_sqrt+0x1a6>
 80122da:	1ca0      	adds	r0, r4, #2
 80122dc:	f104 0402 	add.w	r4, r4, #2
 80122e0:	bf08      	it	eq
 80122e2:	3601      	addeq	r6, #1
 80122e4:	e7dd      	b.n	80122a2 <__ieee754_sqrt+0x162>
 80122e6:	1c63      	adds	r3, r4, #1
 80122e8:	f023 0401 	bic.w	r4, r3, #1
 80122ec:	e7d9      	b.n	80122a2 <__ieee754_sqrt+0x162>
 80122ee:	bf00      	nop
 80122f0:	7ff00000 	.word	0x7ff00000
 80122f4:	200001f8 	.word	0x200001f8
 80122f8:	200001f0 	.word	0x200001f0
 80122fc:	00000000 	.word	0x00000000

08012300 <__kernel_cos>:
 8012300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	ec57 6b10 	vmov	r6, r7, d0
 8012308:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801230c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012310:	ed8d 1b00 	vstr	d1, [sp]
 8012314:	d206      	bcs.n	8012324 <__kernel_cos+0x24>
 8012316:	4630      	mov	r0, r6
 8012318:	4639      	mov	r1, r7
 801231a:	f7ee fc31 	bl	8000b80 <__aeabi_d2iz>
 801231e:	2800      	cmp	r0, #0
 8012320:	f000 8088 	beq.w	8012434 <__kernel_cos+0x134>
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	4630      	mov	r0, r6
 801232a:	4639      	mov	r1, r7
 801232c:	f7ee f978 	bl	8000620 <__aeabi_dmul>
 8012330:	4604      	mov	r4, r0
 8012332:	460d      	mov	r5, r1
 8012334:	2200      	movs	r2, #0
 8012336:	4b50      	ldr	r3, [pc, #320]	@ (8012478 <__kernel_cos+0x178>)
 8012338:	f7ee f972 	bl	8000620 <__aeabi_dmul>
 801233c:	4682      	mov	sl, r0
 801233e:	468b      	mov	fp, r1
 8012340:	4620      	mov	r0, r4
 8012342:	4629      	mov	r1, r5
 8012344:	a33e      	add	r3, pc, #248	@ (adr r3, 8012440 <__kernel_cos+0x140>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ee f969 	bl	8000620 <__aeabi_dmul>
 801234e:	a33e      	add	r3, pc, #248	@ (adr r3, 8012448 <__kernel_cos+0x148>)
 8012350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012354:	f7ed ffae 	bl	80002b4 <__adddf3>
 8012358:	4622      	mov	r2, r4
 801235a:	462b      	mov	r3, r5
 801235c:	f7ee f960 	bl	8000620 <__aeabi_dmul>
 8012360:	a33b      	add	r3, pc, #236	@ (adr r3, 8012450 <__kernel_cos+0x150>)
 8012362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012366:	f7ed ffa3 	bl	80002b0 <__aeabi_dsub>
 801236a:	4622      	mov	r2, r4
 801236c:	462b      	mov	r3, r5
 801236e:	f7ee f957 	bl	8000620 <__aeabi_dmul>
 8012372:	a339      	add	r3, pc, #228	@ (adr r3, 8012458 <__kernel_cos+0x158>)
 8012374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012378:	f7ed ff9c 	bl	80002b4 <__adddf3>
 801237c:	4622      	mov	r2, r4
 801237e:	462b      	mov	r3, r5
 8012380:	f7ee f94e 	bl	8000620 <__aeabi_dmul>
 8012384:	a336      	add	r3, pc, #216	@ (adr r3, 8012460 <__kernel_cos+0x160>)
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	f7ed ff91 	bl	80002b0 <__aeabi_dsub>
 801238e:	4622      	mov	r2, r4
 8012390:	462b      	mov	r3, r5
 8012392:	f7ee f945 	bl	8000620 <__aeabi_dmul>
 8012396:	a334      	add	r3, pc, #208	@ (adr r3, 8012468 <__kernel_cos+0x168>)
 8012398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239c:	f7ed ff8a 	bl	80002b4 <__adddf3>
 80123a0:	4622      	mov	r2, r4
 80123a2:	462b      	mov	r3, r5
 80123a4:	f7ee f93c 	bl	8000620 <__aeabi_dmul>
 80123a8:	4622      	mov	r2, r4
 80123aa:	462b      	mov	r3, r5
 80123ac:	f7ee f938 	bl	8000620 <__aeabi_dmul>
 80123b0:	4604      	mov	r4, r0
 80123b2:	460d      	mov	r5, r1
 80123b4:	4630      	mov	r0, r6
 80123b6:	4639      	mov	r1, r7
 80123b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123bc:	f7ee f930 	bl	8000620 <__aeabi_dmul>
 80123c0:	460b      	mov	r3, r1
 80123c2:	4602      	mov	r2, r0
 80123c4:	4629      	mov	r1, r5
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7ed ff72 	bl	80002b0 <__aeabi_dsub>
 80123cc:	4b2b      	ldr	r3, [pc, #172]	@ (801247c <__kernel_cos+0x17c>)
 80123ce:	4606      	mov	r6, r0
 80123d0:	460f      	mov	r7, r1
 80123d2:	4598      	cmp	r8, r3
 80123d4:	d810      	bhi.n	80123f8 <__kernel_cos+0xf8>
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4650      	mov	r0, sl
 80123dc:	4659      	mov	r1, fp
 80123de:	f7ed ff67 	bl	80002b0 <__aeabi_dsub>
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	2000      	movs	r0, #0
 80123e8:	4925      	ldr	r1, [pc, #148]	@ (8012480 <__kernel_cos+0x180>)
 80123ea:	f7ed ff61 	bl	80002b0 <__aeabi_dsub>
 80123ee:	ec41 0b10 	vmov	d0, r0, r1
 80123f2:	b003      	add	sp, #12
 80123f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f8:	4b22      	ldr	r3, [pc, #136]	@ (8012484 <__kernel_cos+0x184>)
 80123fa:	2400      	movs	r4, #0
 80123fc:	2000      	movs	r0, #0
 80123fe:	4920      	ldr	r1, [pc, #128]	@ (8012480 <__kernel_cos+0x180>)
 8012400:	4598      	cmp	r8, r3
 8012402:	4622      	mov	r2, r4
 8012404:	bf94      	ite	ls
 8012406:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801240a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8012488 <__kernel_cos+0x188>)
 801240c:	462b      	mov	r3, r5
 801240e:	f7ed ff4f 	bl	80002b0 <__aeabi_dsub>
 8012412:	4622      	mov	r2, r4
 8012414:	4680      	mov	r8, r0
 8012416:	4689      	mov	r9, r1
 8012418:	462b      	mov	r3, r5
 801241a:	4650      	mov	r0, sl
 801241c:	4659      	mov	r1, fp
 801241e:	f7ed ff47 	bl	80002b0 <__aeabi_dsub>
 8012422:	4632      	mov	r2, r6
 8012424:	463b      	mov	r3, r7
 8012426:	f7ed ff43 	bl	80002b0 <__aeabi_dsub>
 801242a:	4602      	mov	r2, r0
 801242c:	460b      	mov	r3, r1
 801242e:	4640      	mov	r0, r8
 8012430:	4649      	mov	r1, r9
 8012432:	e7da      	b.n	80123ea <__kernel_cos+0xea>
 8012434:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012470 <__kernel_cos+0x170>
 8012438:	e7db      	b.n	80123f2 <__kernel_cos+0xf2>
 801243a:	bf00      	nop
 801243c:	f3af 8000 	nop.w
 8012440:	be8838d4 	.word	0xbe8838d4
 8012444:	bda8fae9 	.word	0xbda8fae9
 8012448:	bdb4b1c4 	.word	0xbdb4b1c4
 801244c:	3e21ee9e 	.word	0x3e21ee9e
 8012450:	809c52ad 	.word	0x809c52ad
 8012454:	3e927e4f 	.word	0x3e927e4f
 8012458:	19cb1590 	.word	0x19cb1590
 801245c:	3efa01a0 	.word	0x3efa01a0
 8012460:	16c15177 	.word	0x16c15177
 8012464:	3f56c16c 	.word	0x3f56c16c
 8012468:	5555554c 	.word	0x5555554c
 801246c:	3fa55555 	.word	0x3fa55555
 8012470:	00000000 	.word	0x00000000
 8012474:	3ff00000 	.word	0x3ff00000
 8012478:	3fe00000 	.word	0x3fe00000
 801247c:	3fd33332 	.word	0x3fd33332
 8012480:	3ff00000 	.word	0x3ff00000
 8012484:	3fe90000 	.word	0x3fe90000
 8012488:	3fd20000 	.word	0x3fd20000
 801248c:	00000000 	.word	0x00000000

08012490 <__kernel_sin>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	ec55 4b10 	vmov	r4, r5, d0
 8012498:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801249c:	b085      	sub	sp, #20
 801249e:	4680      	mov	r8, r0
 80124a0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80124a4:	ed8d 1b02 	vstr	d1, [sp, #8]
 80124a8:	d205      	bcs.n	80124b6 <__kernel_sin+0x26>
 80124aa:	4620      	mov	r0, r4
 80124ac:	4629      	mov	r1, r5
 80124ae:	f7ee fb67 	bl	8000b80 <__aeabi_d2iz>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	d052      	beq.n	801255c <__kernel_sin+0xcc>
 80124b6:	4622      	mov	r2, r4
 80124b8:	462b      	mov	r3, r5
 80124ba:	4620      	mov	r0, r4
 80124bc:	4629      	mov	r1, r5
 80124be:	f7ee f8af 	bl	8000620 <__aeabi_dmul>
 80124c2:	4682      	mov	sl, r0
 80124c4:	468b      	mov	fp, r1
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	4620      	mov	r0, r4
 80124cc:	4629      	mov	r1, r5
 80124ce:	f7ee f8a7 	bl	8000620 <__aeabi_dmul>
 80124d2:	a342      	add	r3, pc, #264	@ (adr r3, 80125dc <__kernel_sin+0x14c>)
 80124d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d8:	e9cd 0100 	strd	r0, r1, [sp]
 80124dc:	4650      	mov	r0, sl
 80124de:	4659      	mov	r1, fp
 80124e0:	f7ee f89e 	bl	8000620 <__aeabi_dmul>
 80124e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80125e4 <__kernel_sin+0x154>)
 80124e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ea:	f7ed fee1 	bl	80002b0 <__aeabi_dsub>
 80124ee:	4652      	mov	r2, sl
 80124f0:	465b      	mov	r3, fp
 80124f2:	f7ee f895 	bl	8000620 <__aeabi_dmul>
 80124f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80125ec <__kernel_sin+0x15c>)
 80124f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fc:	f7ed feda 	bl	80002b4 <__adddf3>
 8012500:	4652      	mov	r2, sl
 8012502:	465b      	mov	r3, fp
 8012504:	f7ee f88c 	bl	8000620 <__aeabi_dmul>
 8012508:	a33a      	add	r3, pc, #232	@ (adr r3, 80125f4 <__kernel_sin+0x164>)
 801250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250e:	f7ed fecf 	bl	80002b0 <__aeabi_dsub>
 8012512:	4652      	mov	r2, sl
 8012514:	465b      	mov	r3, fp
 8012516:	f7ee f883 	bl	8000620 <__aeabi_dmul>
 801251a:	a338      	add	r3, pc, #224	@ (adr r3, 80125fc <__kernel_sin+0x16c>)
 801251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012520:	f7ed fec8 	bl	80002b4 <__adddf3>
 8012524:	4606      	mov	r6, r0
 8012526:	460f      	mov	r7, r1
 8012528:	f1b8 0f00 	cmp.w	r8, #0
 801252c:	d11b      	bne.n	8012566 <__kernel_sin+0xd6>
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	4650      	mov	r0, sl
 8012534:	4659      	mov	r1, fp
 8012536:	f7ee f873 	bl	8000620 <__aeabi_dmul>
 801253a:	a325      	add	r3, pc, #148	@ (adr r3, 80125d0 <__kernel_sin+0x140>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	f7ed feb6 	bl	80002b0 <__aeabi_dsub>
 8012544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012548:	f7ee f86a 	bl	8000620 <__aeabi_dmul>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	4620      	mov	r0, r4
 8012552:	4629      	mov	r1, r5
 8012554:	f7ed feae 	bl	80002b4 <__adddf3>
 8012558:	4604      	mov	r4, r0
 801255a:	460d      	mov	r5, r1
 801255c:	ec45 4b10 	vmov	d0, r4, r5
 8012560:	b005      	add	sp, #20
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	2200      	movs	r2, #0
 8012568:	4b1b      	ldr	r3, [pc, #108]	@ (80125d8 <__kernel_sin+0x148>)
 801256a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801256e:	f7ee f857 	bl	8000620 <__aeabi_dmul>
 8012572:	4680      	mov	r8, r0
 8012574:	4689      	mov	r9, r1
 8012576:	4632      	mov	r2, r6
 8012578:	463b      	mov	r3, r7
 801257a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801257e:	f7ee f84f 	bl	8000620 <__aeabi_dmul>
 8012582:	4602      	mov	r2, r0
 8012584:	460b      	mov	r3, r1
 8012586:	4640      	mov	r0, r8
 8012588:	4649      	mov	r1, r9
 801258a:	f7ed fe91 	bl	80002b0 <__aeabi_dsub>
 801258e:	4652      	mov	r2, sl
 8012590:	465b      	mov	r3, fp
 8012592:	f7ee f845 	bl	8000620 <__aeabi_dmul>
 8012596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801259a:	f7ed fe89 	bl	80002b0 <__aeabi_dsub>
 801259e:	4606      	mov	r6, r0
 80125a0:	460f      	mov	r7, r1
 80125a2:	a30b      	add	r3, pc, #44	@ (adr r3, 80125d0 <__kernel_sin+0x140>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125ac:	f7ee f838 	bl	8000620 <__aeabi_dmul>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	4630      	mov	r0, r6
 80125b6:	4639      	mov	r1, r7
 80125b8:	f7ed fe7c 	bl	80002b4 <__adddf3>
 80125bc:	4602      	mov	r2, r0
 80125be:	460b      	mov	r3, r1
 80125c0:	4620      	mov	r0, r4
 80125c2:	4629      	mov	r1, r5
 80125c4:	f7ed fe74 	bl	80002b0 <__aeabi_dsub>
 80125c8:	e7c6      	b.n	8012558 <__kernel_sin+0xc8>
 80125ca:	bf00      	nop
 80125cc:	f3af 8000 	nop.w
 80125d0:	55555549 	.word	0x55555549
 80125d4:	3fc55555 	.word	0x3fc55555
 80125d8:	3fe00000 	.word	0x3fe00000
 80125dc:	5acfd57c 	.word	0x5acfd57c
 80125e0:	3de5d93a 	.word	0x3de5d93a
 80125e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80125e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80125ec:	57b1fe7d 	.word	0x57b1fe7d
 80125f0:	3ec71de3 	.word	0x3ec71de3
 80125f4:	19c161d5 	.word	0x19c161d5
 80125f8:	3f2a01a0 	.word	0x3f2a01a0
 80125fc:	1110f8a6 	.word	0x1110f8a6
 8012600:	3f811111 	.word	0x3f811111
 8012604:	00000000 	.word	0x00000000

08012608 <__ieee754_atan2>:
 8012608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801260c:	ec57 6b11 	vmov	r6, r7, d1
 8012610:	4273      	negs	r3, r6
 8012612:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8012616:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 8012790 <__ieee754_atan2+0x188>
 801261a:	4635      	mov	r5, r6
 801261c:	4333      	orrs	r3, r6
 801261e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012622:	4543      	cmp	r3, r8
 8012624:	ec51 0b10 	vmov	r0, r1, d0
 8012628:	d809      	bhi.n	801263e <__ieee754_atan2+0x36>
 801262a:	4244      	negs	r4, r0
 801262c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012630:	468e      	mov	lr, r1
 8012632:	4681      	mov	r9, r0
 8012634:	4304      	orrs	r4, r0
 8012636:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801263a:	4544      	cmp	r4, r8
 801263c:	d907      	bls.n	801264e <__ieee754_atan2+0x46>
 801263e:	4632      	mov	r2, r6
 8012640:	463b      	mov	r3, r7
 8012642:	f7ed fe37 	bl	80002b4 <__adddf3>
 8012646:	ec41 0b10 	vmov	d0, r0, r1
 801264a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801264e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012652:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012656:	4334      	orrs	r4, r6
 8012658:	d103      	bne.n	8012662 <__ieee754_atan2+0x5a>
 801265a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801265e:	f000 bfd7 	b.w	8013610 <atan>
 8012662:	17bc      	asrs	r4, r7, #30
 8012664:	ea53 0909 	orrs.w	r9, r3, r9
 8012668:	f004 0402 	and.w	r4, r4, #2
 801266c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012670:	d107      	bne.n	8012682 <__ieee754_atan2+0x7a>
 8012672:	2c02      	cmp	r4, #2
 8012674:	d05f      	beq.n	8012736 <__ieee754_atan2+0x12e>
 8012676:	2c03      	cmp	r4, #3
 8012678:	d1e5      	bne.n	8012646 <__ieee754_atan2+0x3e>
 801267a:	a141      	add	r1, pc, #260	@ (adr r1, 8012780 <__ieee754_atan2+0x178>)
 801267c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012680:	e7e1      	b.n	8012646 <__ieee754_atan2+0x3e>
 8012682:	4315      	orrs	r5, r2
 8012684:	d106      	bne.n	8012694 <__ieee754_atan2+0x8c>
 8012686:	f1be 0f00 	cmp.w	lr, #0
 801268a:	da5f      	bge.n	801274c <__ieee754_atan2+0x144>
 801268c:	a13e      	add	r1, pc, #248	@ (adr r1, 8012788 <__ieee754_atan2+0x180>)
 801268e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012692:	e7d8      	b.n	8012646 <__ieee754_atan2+0x3e>
 8012694:	4542      	cmp	r2, r8
 8012696:	d10f      	bne.n	80126b8 <__ieee754_atan2+0xb0>
 8012698:	4293      	cmp	r3, r2
 801269a:	f104 34ff 	add.w	r4, r4, #4294967295
 801269e:	d107      	bne.n	80126b0 <__ieee754_atan2+0xa8>
 80126a0:	2c02      	cmp	r4, #2
 80126a2:	d84c      	bhi.n	801273e <__ieee754_atan2+0x136>
 80126a4:	4b34      	ldr	r3, [pc, #208]	@ (8012778 <__ieee754_atan2+0x170>)
 80126a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80126ae:	e7ca      	b.n	8012646 <__ieee754_atan2+0x3e>
 80126b0:	2c02      	cmp	r4, #2
 80126b2:	d848      	bhi.n	8012746 <__ieee754_atan2+0x13e>
 80126b4:	4b31      	ldr	r3, [pc, #196]	@ (801277c <__ieee754_atan2+0x174>)
 80126b6:	e7f6      	b.n	80126a6 <__ieee754_atan2+0x9e>
 80126b8:	4543      	cmp	r3, r8
 80126ba:	d0e4      	beq.n	8012686 <__ieee754_atan2+0x7e>
 80126bc:	1a9b      	subs	r3, r3, r2
 80126be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80126c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80126c6:	da1e      	bge.n	8012706 <__ieee754_atan2+0xfe>
 80126c8:	2f00      	cmp	r7, #0
 80126ca:	da01      	bge.n	80126d0 <__ieee754_atan2+0xc8>
 80126cc:	323c      	adds	r2, #60	@ 0x3c
 80126ce:	db1e      	blt.n	801270e <__ieee754_atan2+0x106>
 80126d0:	4632      	mov	r2, r6
 80126d2:	463b      	mov	r3, r7
 80126d4:	f7ee f8ce 	bl	8000874 <__aeabi_ddiv>
 80126d8:	ec41 0b10 	vmov	d0, r0, r1
 80126dc:	f001 f930 	bl	8013940 <fabs>
 80126e0:	f000 ff96 	bl	8013610 <atan>
 80126e4:	ec51 0b10 	vmov	r0, r1, d0
 80126e8:	2c01      	cmp	r4, #1
 80126ea:	d013      	beq.n	8012714 <__ieee754_atan2+0x10c>
 80126ec:	2c02      	cmp	r4, #2
 80126ee:	d015      	beq.n	801271c <__ieee754_atan2+0x114>
 80126f0:	2c00      	cmp	r4, #0
 80126f2:	d0a8      	beq.n	8012646 <__ieee754_atan2+0x3e>
 80126f4:	a318      	add	r3, pc, #96	@ (adr r3, 8012758 <__ieee754_atan2+0x150>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	f7ed fdd9 	bl	80002b0 <__aeabi_dsub>
 80126fe:	a318      	add	r3, pc, #96	@ (adr r3, 8012760 <__ieee754_atan2+0x158>)
 8012700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012704:	e014      	b.n	8012730 <__ieee754_atan2+0x128>
 8012706:	a118      	add	r1, pc, #96	@ (adr r1, 8012768 <__ieee754_atan2+0x160>)
 8012708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801270c:	e7ec      	b.n	80126e8 <__ieee754_atan2+0xe0>
 801270e:	2000      	movs	r0, #0
 8012710:	2100      	movs	r1, #0
 8012712:	e7e9      	b.n	80126e8 <__ieee754_atan2+0xe0>
 8012714:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012718:	4619      	mov	r1, r3
 801271a:	e794      	b.n	8012646 <__ieee754_atan2+0x3e>
 801271c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012758 <__ieee754_atan2+0x150>)
 801271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012722:	f7ed fdc5 	bl	80002b0 <__aeabi_dsub>
 8012726:	4602      	mov	r2, r0
 8012728:	460b      	mov	r3, r1
 801272a:	a10d      	add	r1, pc, #52	@ (adr r1, 8012760 <__ieee754_atan2+0x158>)
 801272c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012730:	f7ed fdbe 	bl	80002b0 <__aeabi_dsub>
 8012734:	e787      	b.n	8012646 <__ieee754_atan2+0x3e>
 8012736:	a10a      	add	r1, pc, #40	@ (adr r1, 8012760 <__ieee754_atan2+0x158>)
 8012738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801273c:	e783      	b.n	8012646 <__ieee754_atan2+0x3e>
 801273e:	a10c      	add	r1, pc, #48	@ (adr r1, 8012770 <__ieee754_atan2+0x168>)
 8012740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012744:	e77f      	b.n	8012646 <__ieee754_atan2+0x3e>
 8012746:	2000      	movs	r0, #0
 8012748:	2100      	movs	r1, #0
 801274a:	e77c      	b.n	8012646 <__ieee754_atan2+0x3e>
 801274c:	a106      	add	r1, pc, #24	@ (adr r1, 8012768 <__ieee754_atan2+0x160>)
 801274e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012752:	e778      	b.n	8012646 <__ieee754_atan2+0x3e>
 8012754:	f3af 8000 	nop.w
 8012758:	33145c07 	.word	0x33145c07
 801275c:	3ca1a626 	.word	0x3ca1a626
 8012760:	54442d18 	.word	0x54442d18
 8012764:	400921fb 	.word	0x400921fb
 8012768:	54442d18 	.word	0x54442d18
 801276c:	3ff921fb 	.word	0x3ff921fb
 8012770:	54442d18 	.word	0x54442d18
 8012774:	3fe921fb 	.word	0x3fe921fb
 8012778:	08014f08 	.word	0x08014f08
 801277c:	08014ef0 	.word	0x08014ef0
 8012780:	54442d18 	.word	0x54442d18
 8012784:	c00921fb 	.word	0xc00921fb
 8012788:	54442d18 	.word	0x54442d18
 801278c:	bff921fb 	.word	0xbff921fb
 8012790:	7ff00000 	.word	0x7ff00000
 8012794:	00000000 	.word	0x00000000

08012798 <__ieee754_pow>:
 8012798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801279c:	b091      	sub	sp, #68	@ 0x44
 801279e:	ed8d 1b00 	vstr	d1, [sp]
 80127a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80127a6:	ec57 6b10 	vmov	r6, r7, d0
 80127aa:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80127ae:	ea5a 0001 	orrs.w	r0, sl, r1
 80127b2:	d113      	bne.n	80127dc <__ieee754_pow+0x44>
 80127b4:	19b3      	adds	r3, r6, r6
 80127b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80127ba:	4152      	adcs	r2, r2
 80127bc:	4298      	cmp	r0, r3
 80127be:	4b96      	ldr	r3, [pc, #600]	@ (8012a18 <__ieee754_pow+0x280>)
 80127c0:	4193      	sbcs	r3, r2
 80127c2:	f080 84e7 	bcs.w	8013194 <__ieee754_pow+0x9fc>
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ce:	f7ed fd71 	bl	80002b4 <__adddf3>
 80127d2:	ec41 0b10 	vmov	d0, r0, r1
 80127d6:	b011      	add	sp, #68	@ 0x44
 80127d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80127e0:	4a8e      	ldr	r2, [pc, #568]	@ (8012a1c <__ieee754_pow+0x284>)
 80127e2:	463d      	mov	r5, r7
 80127e4:	4633      	mov	r3, r6
 80127e6:	4590      	cmp	r8, r2
 80127e8:	d806      	bhi.n	80127f8 <__ieee754_pow+0x60>
 80127ea:	d101      	bne.n	80127f0 <__ieee754_pow+0x58>
 80127ec:	2e00      	cmp	r6, #0
 80127ee:	d1ea      	bne.n	80127c6 <__ieee754_pow+0x2e>
 80127f0:	4592      	cmp	sl, r2
 80127f2:	d801      	bhi.n	80127f8 <__ieee754_pow+0x60>
 80127f4:	d10e      	bne.n	8012814 <__ieee754_pow+0x7c>
 80127f6:	b169      	cbz	r1, 8012814 <__ieee754_pow+0x7c>
 80127f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80127fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012800:	431d      	orrs	r5, r3
 8012802:	d1e0      	bne.n	80127c6 <__ieee754_pow+0x2e>
 8012804:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012808:	18db      	adds	r3, r3, r3
 801280a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801280e:	4152      	adcs	r2, r2
 8012810:	429d      	cmp	r5, r3
 8012812:	e7d4      	b.n	80127be <__ieee754_pow+0x26>
 8012814:	2d00      	cmp	r5, #0
 8012816:	46c3      	mov	fp, r8
 8012818:	da3a      	bge.n	8012890 <__ieee754_pow+0xf8>
 801281a:	4a81      	ldr	r2, [pc, #516]	@ (8012a20 <__ieee754_pow+0x288>)
 801281c:	4592      	cmp	sl, r2
 801281e:	d84d      	bhi.n	80128bc <__ieee754_pow+0x124>
 8012820:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012824:	4592      	cmp	sl, r2
 8012826:	f240 84c4 	bls.w	80131b2 <__ieee754_pow+0xa1a>
 801282a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801282e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012832:	2a14      	cmp	r2, #20
 8012834:	dd0f      	ble.n	8012856 <__ieee754_pow+0xbe>
 8012836:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801283a:	fa21 f402 	lsr.w	r4, r1, r2
 801283e:	fa04 f202 	lsl.w	r2, r4, r2
 8012842:	428a      	cmp	r2, r1
 8012844:	f040 84b5 	bne.w	80131b2 <__ieee754_pow+0xa1a>
 8012848:	f004 0401 	and.w	r4, r4, #1
 801284c:	f1c4 0402 	rsb	r4, r4, #2
 8012850:	2900      	cmp	r1, #0
 8012852:	d158      	bne.n	8012906 <__ieee754_pow+0x16e>
 8012854:	e00e      	b.n	8012874 <__ieee754_pow+0xdc>
 8012856:	2900      	cmp	r1, #0
 8012858:	d154      	bne.n	8012904 <__ieee754_pow+0x16c>
 801285a:	f1c2 0214 	rsb	r2, r2, #20
 801285e:	fa4a f402 	asr.w	r4, sl, r2
 8012862:	fa04 f202 	lsl.w	r2, r4, r2
 8012866:	4552      	cmp	r2, sl
 8012868:	f040 84a0 	bne.w	80131ac <__ieee754_pow+0xa14>
 801286c:	f004 0401 	and.w	r4, r4, #1
 8012870:	f1c4 0402 	rsb	r4, r4, #2
 8012874:	4a6b      	ldr	r2, [pc, #428]	@ (8012a24 <__ieee754_pow+0x28c>)
 8012876:	4592      	cmp	sl, r2
 8012878:	d12e      	bne.n	80128d8 <__ieee754_pow+0x140>
 801287a:	f1b9 0f00 	cmp.w	r9, #0
 801287e:	f280 8491 	bge.w	80131a4 <__ieee754_pow+0xa0c>
 8012882:	4632      	mov	r2, r6
 8012884:	463b      	mov	r3, r7
 8012886:	2000      	movs	r0, #0
 8012888:	4966      	ldr	r1, [pc, #408]	@ (8012a24 <__ieee754_pow+0x28c>)
 801288a:	f7ed fff3 	bl	8000874 <__aeabi_ddiv>
 801288e:	e7a0      	b.n	80127d2 <__ieee754_pow+0x3a>
 8012890:	2400      	movs	r4, #0
 8012892:	bbc1      	cbnz	r1, 8012906 <__ieee754_pow+0x16e>
 8012894:	4a61      	ldr	r2, [pc, #388]	@ (8012a1c <__ieee754_pow+0x284>)
 8012896:	4592      	cmp	sl, r2
 8012898:	d1ec      	bne.n	8012874 <__ieee754_pow+0xdc>
 801289a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801289e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80128a2:	431a      	orrs	r2, r3
 80128a4:	f000 8476 	beq.w	8013194 <__ieee754_pow+0x9fc>
 80128a8:	4b5f      	ldr	r3, [pc, #380]	@ (8012a28 <__ieee754_pow+0x290>)
 80128aa:	4598      	cmp	r8, r3
 80128ac:	d908      	bls.n	80128c0 <__ieee754_pow+0x128>
 80128ae:	f1b9 0f00 	cmp.w	r9, #0
 80128b2:	f2c0 8473 	blt.w	801319c <__ieee754_pow+0xa04>
 80128b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128ba:	e78a      	b.n	80127d2 <__ieee754_pow+0x3a>
 80128bc:	2402      	movs	r4, #2
 80128be:	e7e8      	b.n	8012892 <__ieee754_pow+0xfa>
 80128c0:	f1b9 0f00 	cmp.w	r9, #0
 80128c4:	f04f 0000 	mov.w	r0, #0
 80128c8:	f04f 0100 	mov.w	r1, #0
 80128cc:	da81      	bge.n	80127d2 <__ieee754_pow+0x3a>
 80128ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80128d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80128d6:	e77c      	b.n	80127d2 <__ieee754_pow+0x3a>
 80128d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80128dc:	d106      	bne.n	80128ec <__ieee754_pow+0x154>
 80128de:	4632      	mov	r2, r6
 80128e0:	463b      	mov	r3, r7
 80128e2:	4630      	mov	r0, r6
 80128e4:	4639      	mov	r1, r7
 80128e6:	f7ed fe9b 	bl	8000620 <__aeabi_dmul>
 80128ea:	e772      	b.n	80127d2 <__ieee754_pow+0x3a>
 80128ec:	4a4f      	ldr	r2, [pc, #316]	@ (8012a2c <__ieee754_pow+0x294>)
 80128ee:	4591      	cmp	r9, r2
 80128f0:	d109      	bne.n	8012906 <__ieee754_pow+0x16e>
 80128f2:	2d00      	cmp	r5, #0
 80128f4:	db07      	blt.n	8012906 <__ieee754_pow+0x16e>
 80128f6:	ec47 6b10 	vmov	d0, r6, r7
 80128fa:	b011      	add	sp, #68	@ 0x44
 80128fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012900:	f7ff bc1e 	b.w	8012140 <__ieee754_sqrt>
 8012904:	2400      	movs	r4, #0
 8012906:	9302      	str	r3, [sp, #8]
 8012908:	ec47 6b10 	vmov	d0, r6, r7
 801290c:	f001 f818 	bl	8013940 <fabs>
 8012910:	9b02      	ldr	r3, [sp, #8]
 8012912:	ec51 0b10 	vmov	r0, r1, d0
 8012916:	bb53      	cbnz	r3, 801296e <__ieee754_pow+0x1d6>
 8012918:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801291c:	4b41      	ldr	r3, [pc, #260]	@ (8012a24 <__ieee754_pow+0x28c>)
 801291e:	429a      	cmp	r2, r3
 8012920:	d002      	beq.n	8012928 <__ieee754_pow+0x190>
 8012922:	f1b8 0f00 	cmp.w	r8, #0
 8012926:	d122      	bne.n	801296e <__ieee754_pow+0x1d6>
 8012928:	f1b9 0f00 	cmp.w	r9, #0
 801292c:	da05      	bge.n	801293a <__ieee754_pow+0x1a2>
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	2000      	movs	r0, #0
 8012934:	493b      	ldr	r1, [pc, #236]	@ (8012a24 <__ieee754_pow+0x28c>)
 8012936:	f7ed ff9d 	bl	8000874 <__aeabi_ddiv>
 801293a:	2d00      	cmp	r5, #0
 801293c:	f6bf af49 	bge.w	80127d2 <__ieee754_pow+0x3a>
 8012940:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012944:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012948:	ea58 0804 	orrs.w	r8, r8, r4
 801294c:	d108      	bne.n	8012960 <__ieee754_pow+0x1c8>
 801294e:	4602      	mov	r2, r0
 8012950:	460b      	mov	r3, r1
 8012952:	4610      	mov	r0, r2
 8012954:	4619      	mov	r1, r3
 8012956:	f7ed fcab 	bl	80002b0 <__aeabi_dsub>
 801295a:	4602      	mov	r2, r0
 801295c:	460b      	mov	r3, r1
 801295e:	e794      	b.n	801288a <__ieee754_pow+0xf2>
 8012960:	2c01      	cmp	r4, #1
 8012962:	f47f af36 	bne.w	80127d2 <__ieee754_pow+0x3a>
 8012966:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801296a:	4619      	mov	r1, r3
 801296c:	e731      	b.n	80127d2 <__ieee754_pow+0x3a>
 801296e:	0feb      	lsrs	r3, r5, #31
 8012970:	3b01      	subs	r3, #1
 8012972:	ea53 0204 	orrs.w	r2, r3, r4
 8012976:	d102      	bne.n	801297e <__ieee754_pow+0x1e6>
 8012978:	4632      	mov	r2, r6
 801297a:	463b      	mov	r3, r7
 801297c:	e7e9      	b.n	8012952 <__ieee754_pow+0x1ba>
 801297e:	3c01      	subs	r4, #1
 8012980:	431c      	orrs	r4, r3
 8012982:	d016      	beq.n	80129b2 <__ieee754_pow+0x21a>
 8012984:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8012a08 <__ieee754_pow+0x270>
 8012988:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801298c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012990:	f240 810e 	bls.w	8012bb0 <__ieee754_pow+0x418>
 8012994:	4b26      	ldr	r3, [pc, #152]	@ (8012a30 <__ieee754_pow+0x298>)
 8012996:	459a      	cmp	sl, r3
 8012998:	4b23      	ldr	r3, [pc, #140]	@ (8012a28 <__ieee754_pow+0x290>)
 801299a:	d916      	bls.n	80129ca <__ieee754_pow+0x232>
 801299c:	4598      	cmp	r8, r3
 801299e:	d80b      	bhi.n	80129b8 <__ieee754_pow+0x220>
 80129a0:	f1b9 0f00 	cmp.w	r9, #0
 80129a4:	da0b      	bge.n	80129be <__ieee754_pow+0x226>
 80129a6:	2000      	movs	r0, #0
 80129a8:	b011      	add	sp, #68	@ 0x44
 80129aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ae:	f001 b883 	b.w	8013ab8 <__math_oflow>
 80129b2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8012a10 <__ieee754_pow+0x278>
 80129b6:	e7e7      	b.n	8012988 <__ieee754_pow+0x1f0>
 80129b8:	f1b9 0f00 	cmp.w	r9, #0
 80129bc:	dcf3      	bgt.n	80129a6 <__ieee754_pow+0x20e>
 80129be:	2000      	movs	r0, #0
 80129c0:	b011      	add	sp, #68	@ 0x44
 80129c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c6:	f001 b86f 	b.w	8013aa8 <__math_uflow>
 80129ca:	4598      	cmp	r8, r3
 80129cc:	d20c      	bcs.n	80129e8 <__ieee754_pow+0x250>
 80129ce:	2200      	movs	r2, #0
 80129d0:	2300      	movs	r3, #0
 80129d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129d6:	f7ee f895 	bl	8000b04 <__aeabi_dcmplt>
 80129da:	3800      	subs	r0, #0
 80129dc:	bf18      	it	ne
 80129de:	2001      	movne	r0, #1
 80129e0:	f1b9 0f00 	cmp.w	r9, #0
 80129e4:	daec      	bge.n	80129c0 <__ieee754_pow+0x228>
 80129e6:	e7df      	b.n	80129a8 <__ieee754_pow+0x210>
 80129e8:	4b0e      	ldr	r3, [pc, #56]	@ (8012a24 <__ieee754_pow+0x28c>)
 80129ea:	2200      	movs	r2, #0
 80129ec:	4598      	cmp	r8, r3
 80129ee:	d921      	bls.n	8012a34 <__ieee754_pow+0x29c>
 80129f0:	2300      	movs	r3, #0
 80129f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129f6:	f7ee f885 	bl	8000b04 <__aeabi_dcmplt>
 80129fa:	3800      	subs	r0, #0
 80129fc:	bf18      	it	ne
 80129fe:	2001      	movne	r0, #1
 8012a00:	f1b9 0f00 	cmp.w	r9, #0
 8012a04:	dcd0      	bgt.n	80129a8 <__ieee754_pow+0x210>
 8012a06:	e7db      	b.n	80129c0 <__ieee754_pow+0x228>
 8012a08:	00000000 	.word	0x00000000
 8012a0c:	3ff00000 	.word	0x3ff00000
 8012a10:	00000000 	.word	0x00000000
 8012a14:	bff00000 	.word	0xbff00000
 8012a18:	fff00000 	.word	0xfff00000
 8012a1c:	7ff00000 	.word	0x7ff00000
 8012a20:	433fffff 	.word	0x433fffff
 8012a24:	3ff00000 	.word	0x3ff00000
 8012a28:	3fefffff 	.word	0x3fefffff
 8012a2c:	3fe00000 	.word	0x3fe00000
 8012a30:	43f00000 	.word	0x43f00000
 8012a34:	4b5a      	ldr	r3, [pc, #360]	@ (8012ba0 <__ieee754_pow+0x408>)
 8012a36:	f7ed fc3b 	bl	80002b0 <__aeabi_dsub>
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	460d      	mov	r5, r1
 8012a3e:	a350      	add	r3, pc, #320	@ (adr r3, 8012b80 <__ieee754_pow+0x3e8>)
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a44:	f7ed fdec 	bl	8000620 <__aeabi_dmul>
 8012a48:	4606      	mov	r6, r0
 8012a4a:	460f      	mov	r7, r1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	4629      	mov	r1, r5
 8012a50:	a34d      	add	r3, pc, #308	@ (adr r3, 8012b88 <__ieee754_pow+0x3f0>)
 8012a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a56:	f7ed fde3 	bl	8000620 <__aeabi_dmul>
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	4682      	mov	sl, r0
 8012a5e:	468b      	mov	fp, r1
 8012a60:	4b50      	ldr	r3, [pc, #320]	@ (8012ba4 <__ieee754_pow+0x40c>)
 8012a62:	4620      	mov	r0, r4
 8012a64:	4629      	mov	r1, r5
 8012a66:	f7ed fddb 	bl	8000620 <__aeabi_dmul>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	a148      	add	r1, pc, #288	@ (adr r1, 8012b90 <__ieee754_pow+0x3f8>)
 8012a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a74:	f7ed fc1c 	bl	80002b0 <__aeabi_dsub>
 8012a78:	4622      	mov	r2, r4
 8012a7a:	462b      	mov	r3, r5
 8012a7c:	f7ed fdd0 	bl	8000620 <__aeabi_dmul>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	2000      	movs	r0, #0
 8012a86:	4948      	ldr	r1, [pc, #288]	@ (8012ba8 <__ieee754_pow+0x410>)
 8012a88:	f7ed fc12 	bl	80002b0 <__aeabi_dsub>
 8012a8c:	4680      	mov	r8, r0
 8012a8e:	4689      	mov	r9, r1
 8012a90:	4622      	mov	r2, r4
 8012a92:	462b      	mov	r3, r5
 8012a94:	4620      	mov	r0, r4
 8012a96:	4629      	mov	r1, r5
 8012a98:	2400      	movs	r4, #0
 8012a9a:	f7ed fdc1 	bl	8000620 <__aeabi_dmul>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	4640      	mov	r0, r8
 8012aa4:	4649      	mov	r1, r9
 8012aa6:	f7ed fdbb 	bl	8000620 <__aeabi_dmul>
 8012aaa:	a33b      	add	r3, pc, #236	@ (adr r3, 8012b98 <__ieee754_pow+0x400>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7ed fdb6 	bl	8000620 <__aeabi_dmul>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4650      	mov	r0, sl
 8012aba:	4659      	mov	r1, fp
 8012abc:	f7ed fbf8 	bl	80002b0 <__aeabi_dsub>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	4680      	mov	r8, r0
 8012ac6:	4689      	mov	r9, r1
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ed fbf2 	bl	80002b4 <__adddf3>
 8012ad0:	4632      	mov	r2, r6
 8012ad2:	463b      	mov	r3, r7
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	f7ed fbea 	bl	80002b0 <__aeabi_dsub>
 8012adc:	4602      	mov	r2, r0
 8012ade:	460b      	mov	r3, r1
 8012ae0:	4640      	mov	r0, r8
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	f7ed fbe4 	bl	80002b0 <__aeabi_dsub>
 8012ae8:	4606      	mov	r6, r0
 8012aea:	460f      	mov	r7, r1
 8012aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012af4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012af8:	2300      	movs	r3, #0
 8012afa:	9304      	str	r3, [sp, #16]
 8012afc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012b00:	4652      	mov	r2, sl
 8012b02:	465b      	mov	r3, fp
 8012b04:	f7ed fbd4 	bl	80002b0 <__aeabi_dsub>
 8012b08:	4622      	mov	r2, r4
 8012b0a:	462b      	mov	r3, r5
 8012b0c:	f7ed fd88 	bl	8000620 <__aeabi_dmul>
 8012b10:	4680      	mov	r8, r0
 8012b12:	4689      	mov	r9, r1
 8012b14:	4630      	mov	r0, r6
 8012b16:	4639      	mov	r1, r7
 8012b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b1c:	f7ed fd80 	bl	8000620 <__aeabi_dmul>
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	4640      	mov	r0, r8
 8012b26:	4649      	mov	r1, r9
 8012b28:	f7ed fbc4 	bl	80002b4 <__adddf3>
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	460f      	mov	r7, r1
 8012b30:	4652      	mov	r2, sl
 8012b32:	465b      	mov	r3, fp
 8012b34:	4620      	mov	r0, r4
 8012b36:	4629      	mov	r1, r5
 8012b38:	f7ed fd72 	bl	8000620 <__aeabi_dmul>
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	4602      	mov	r2, r0
 8012b40:	4680      	mov	r8, r0
 8012b42:	4689      	mov	r9, r1
 8012b44:	4630      	mov	r0, r6
 8012b46:	4639      	mov	r1, r7
 8012b48:	f7ed fbb4 	bl	80002b4 <__adddf3>
 8012b4c:	4b17      	ldr	r3, [pc, #92]	@ (8012bac <__ieee754_pow+0x414>)
 8012b4e:	4604      	mov	r4, r0
 8012b50:	460d      	mov	r5, r1
 8012b52:	4299      	cmp	r1, r3
 8012b54:	468a      	mov	sl, r1
 8012b56:	468b      	mov	fp, r1
 8012b58:	f340 82f0 	ble.w	801313c <__ieee754_pow+0x9a4>
 8012b5c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012b60:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012b64:	4303      	orrs	r3, r0
 8012b66:	f000 81e8 	beq.w	8012f3a <__ieee754_pow+0x7a2>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b72:	f7ed ffc7 	bl	8000b04 <__aeabi_dcmplt>
 8012b76:	3800      	subs	r0, #0
 8012b78:	bf18      	it	ne
 8012b7a:	2001      	movne	r0, #1
 8012b7c:	e714      	b.n	80129a8 <__ieee754_pow+0x210>
 8012b7e:	bf00      	nop
 8012b80:	60000000 	.word	0x60000000
 8012b84:	3ff71547 	.word	0x3ff71547
 8012b88:	f85ddf44 	.word	0xf85ddf44
 8012b8c:	3e54ae0b 	.word	0x3e54ae0b
 8012b90:	55555555 	.word	0x55555555
 8012b94:	3fd55555 	.word	0x3fd55555
 8012b98:	652b82fe 	.word	0x652b82fe
 8012b9c:	3ff71547 	.word	0x3ff71547
 8012ba0:	3ff00000 	.word	0x3ff00000
 8012ba4:	3fd00000 	.word	0x3fd00000
 8012ba8:	3fe00000 	.word	0x3fe00000
 8012bac:	408fffff 	.word	0x408fffff
 8012bb0:	4bd5      	ldr	r3, [pc, #852]	@ (8012f08 <__ieee754_pow+0x770>)
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	402b      	ands	r3, r5
 8012bb6:	b92b      	cbnz	r3, 8012bc4 <__ieee754_pow+0x42c>
 8012bb8:	4bd4      	ldr	r3, [pc, #848]	@ (8012f0c <__ieee754_pow+0x774>)
 8012bba:	f7ed fd31 	bl	8000620 <__aeabi_dmul>
 8012bbe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012bc2:	468b      	mov	fp, r1
 8012bc4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012bc8:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012bcc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012bd0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bdc:	4bcc      	ldr	r3, [pc, #816]	@ (8012f10 <__ieee754_pow+0x778>)
 8012bde:	459b      	cmp	fp, r3
 8012be0:	dd08      	ble.n	8012bf4 <__ieee754_pow+0x45c>
 8012be2:	4bcc      	ldr	r3, [pc, #816]	@ (8012f14 <__ieee754_pow+0x77c>)
 8012be4:	459b      	cmp	fp, r3
 8012be6:	f340 81a5 	ble.w	8012f34 <__ieee754_pow+0x79c>
 8012bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bec:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bf4:	f04f 0a00 	mov.w	sl, #0
 8012bf8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	106d      	asrs	r5, r5, #1
 8012c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c02:	4bc5      	ldr	r3, [pc, #788]	@ (8012f18 <__ieee754_pow+0x780>)
 8012c04:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012c08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c0c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012c10:	ed93 7b00 	vldr	d7, [r3]
 8012c14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012c18:	ec53 2b17 	vmov	r2, r3, d7
 8012c1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c20:	f7ed fb46 	bl	80002b0 <__aeabi_dsub>
 8012c24:	4606      	mov	r6, r0
 8012c26:	460f      	mov	r7, r1
 8012c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c30:	f7ed fb40 	bl	80002b4 <__adddf3>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	2000      	movs	r0, #0
 8012c3a:	49b8      	ldr	r1, [pc, #736]	@ (8012f1c <__ieee754_pow+0x784>)
 8012c3c:	f7ed fe1a 	bl	8000874 <__aeabi_ddiv>
 8012c40:	4602      	mov	r2, r0
 8012c42:	460b      	mov	r3, r1
 8012c44:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012c48:	4630      	mov	r0, r6
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	f7ed fce8 	bl	8000620 <__aeabi_dmul>
 8012c50:	2200      	movs	r2, #0
 8012c52:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012c56:	4614      	mov	r4, r2
 8012c58:	461d      	mov	r5, r3
 8012c5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c5e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012c62:	f04f 0b00 	mov.w	fp, #0
 8012c66:	4661      	mov	r1, ip
 8012c68:	46e1      	mov	r9, ip
 8012c6a:	4658      	mov	r0, fp
 8012c6c:	46d8      	mov	r8, fp
 8012c6e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012c72:	f7ed fcd5 	bl	8000620 <__aeabi_dmul>
 8012c76:	4602      	mov	r2, r0
 8012c78:	460b      	mov	r3, r1
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed fb17 	bl	80002b0 <__aeabi_dsub>
 8012c82:	4606      	mov	r6, r0
 8012c84:	460f      	mov	r7, r1
 8012c86:	4620      	mov	r0, r4
 8012c88:	4629      	mov	r1, r5
 8012c8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c8e:	f7ed fb0f 	bl	80002b0 <__aeabi_dsub>
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c9a:	f7ed fb09 	bl	80002b0 <__aeabi_dsub>
 8012c9e:	465a      	mov	r2, fp
 8012ca0:	464b      	mov	r3, r9
 8012ca2:	f7ed fcbd 	bl	8000620 <__aeabi_dmul>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4630      	mov	r0, r6
 8012cac:	4639      	mov	r1, r7
 8012cae:	f7ed faff 	bl	80002b0 <__aeabi_dsub>
 8012cb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012cb6:	f7ed fcb3 	bl	8000620 <__aeabi_dmul>
 8012cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012cc2:	4610      	mov	r0, r2
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	f7ed fcab 	bl	8000620 <__aeabi_dmul>
 8012cca:	4604      	mov	r4, r0
 8012ccc:	460d      	mov	r5, r1
 8012cce:	a37c      	add	r3, pc, #496	@ (adr r3, 8012ec0 <__ieee754_pow+0x728>)
 8012cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd4:	f7ed fca4 	bl	8000620 <__aeabi_dmul>
 8012cd8:	a37b      	add	r3, pc, #492	@ (adr r3, 8012ec8 <__ieee754_pow+0x730>)
 8012cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cde:	f7ed fae9 	bl	80002b4 <__adddf3>
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	f7ed fc9b 	bl	8000620 <__aeabi_dmul>
 8012cea:	a379      	add	r3, pc, #484	@ (adr r3, 8012ed0 <__ieee754_pow+0x738>)
 8012cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf0:	f7ed fae0 	bl	80002b4 <__adddf3>
 8012cf4:	4622      	mov	r2, r4
 8012cf6:	462b      	mov	r3, r5
 8012cf8:	f7ed fc92 	bl	8000620 <__aeabi_dmul>
 8012cfc:	a376      	add	r3, pc, #472	@ (adr r3, 8012ed8 <__ieee754_pow+0x740>)
 8012cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d02:	f7ed fad7 	bl	80002b4 <__adddf3>
 8012d06:	4622      	mov	r2, r4
 8012d08:	462b      	mov	r3, r5
 8012d0a:	f7ed fc89 	bl	8000620 <__aeabi_dmul>
 8012d0e:	a374      	add	r3, pc, #464	@ (adr r3, 8012ee0 <__ieee754_pow+0x748>)
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	f7ed face 	bl	80002b4 <__adddf3>
 8012d18:	4622      	mov	r2, r4
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	f7ed fc80 	bl	8000620 <__aeabi_dmul>
 8012d20:	a371      	add	r3, pc, #452	@ (adr r3, 8012ee8 <__ieee754_pow+0x750>)
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	f7ed fac5 	bl	80002b4 <__adddf3>
 8012d2a:	4606      	mov	r6, r0
 8012d2c:	460f      	mov	r7, r1
 8012d2e:	4622      	mov	r2, r4
 8012d30:	462b      	mov	r3, r5
 8012d32:	4620      	mov	r0, r4
 8012d34:	4629      	mov	r1, r5
 8012d36:	f7ed fc73 	bl	8000620 <__aeabi_dmul>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	4630      	mov	r0, r6
 8012d40:	4639      	mov	r1, r7
 8012d42:	f7ed fc6d 	bl	8000620 <__aeabi_dmul>
 8012d46:	465a      	mov	r2, fp
 8012d48:	4604      	mov	r4, r0
 8012d4a:	460d      	mov	r5, r1
 8012d4c:	464b      	mov	r3, r9
 8012d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d52:	f7ed faaf 	bl	80002b4 <__adddf3>
 8012d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d5a:	f7ed fc61 	bl	8000620 <__aeabi_dmul>
 8012d5e:	4622      	mov	r2, r4
 8012d60:	462b      	mov	r3, r5
 8012d62:	f7ed faa7 	bl	80002b4 <__adddf3>
 8012d66:	465a      	mov	r2, fp
 8012d68:	464b      	mov	r3, r9
 8012d6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d6e:	4658      	mov	r0, fp
 8012d70:	4649      	mov	r1, r9
 8012d72:	f7ed fc55 	bl	8000620 <__aeabi_dmul>
 8012d76:	2200      	movs	r2, #0
 8012d78:	4b69      	ldr	r3, [pc, #420]	@ (8012f20 <__ieee754_pow+0x788>)
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	460f      	mov	r7, r1
 8012d7e:	f7ed fa99 	bl	80002b4 <__adddf3>
 8012d82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d86:	f7ed fa95 	bl	80002b4 <__adddf3>
 8012d8a:	460d      	mov	r5, r1
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4640      	mov	r0, r8
 8012d90:	4649      	mov	r1, r9
 8012d92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012d96:	465c      	mov	r4, fp
 8012d98:	465a      	mov	r2, fp
 8012d9a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012d9e:	f7ed fc3f 	bl	8000620 <__aeabi_dmul>
 8012da2:	2200      	movs	r2, #0
 8012da4:	4680      	mov	r8, r0
 8012da6:	4689      	mov	r9, r1
 8012da8:	4b5d      	ldr	r3, [pc, #372]	@ (8012f20 <__ieee754_pow+0x788>)
 8012daa:	4620      	mov	r0, r4
 8012dac:	4629      	mov	r1, r5
 8012dae:	f7ed fa7f 	bl	80002b0 <__aeabi_dsub>
 8012db2:	4632      	mov	r2, r6
 8012db4:	463b      	mov	r3, r7
 8012db6:	f7ed fa7b 	bl	80002b0 <__aeabi_dsub>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012dc2:	f7ed fa75 	bl	80002b0 <__aeabi_dsub>
 8012dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dca:	f7ed fc29 	bl	8000620 <__aeabi_dmul>
 8012dce:	4606      	mov	r6, r0
 8012dd0:	460f      	mov	r7, r1
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dda:	f7ed fc21 	bl	8000620 <__aeabi_dmul>
 8012dde:	4602      	mov	r2, r0
 8012de0:	460b      	mov	r3, r1
 8012de2:	4630      	mov	r0, r6
 8012de4:	4639      	mov	r1, r7
 8012de6:	f7ed fa65 	bl	80002b4 <__adddf3>
 8012dea:	4606      	mov	r6, r0
 8012dec:	460f      	mov	r7, r1
 8012dee:	4602      	mov	r2, r0
 8012df0:	460b      	mov	r3, r1
 8012df2:	4640      	mov	r0, r8
 8012df4:	4649      	mov	r1, r9
 8012df6:	f7ed fa5d 	bl	80002b4 <__adddf3>
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012e00:	a33b      	add	r3, pc, #236	@ (adr r3, 8012ef0 <__ieee754_pow+0x758>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	465c      	mov	r4, fp
 8012e08:	4658      	mov	r0, fp
 8012e0a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012e0e:	f7ed fc07 	bl	8000620 <__aeabi_dmul>
 8012e12:	4642      	mov	r2, r8
 8012e14:	464b      	mov	r3, r9
 8012e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	f7ed fa47 	bl	80002b0 <__aeabi_dsub>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	4630      	mov	r0, r6
 8012e28:	4639      	mov	r1, r7
 8012e2a:	f7ed fa41 	bl	80002b0 <__aeabi_dsub>
 8012e2e:	a332      	add	r3, pc, #200	@ (adr r3, 8012ef8 <__ieee754_pow+0x760>)
 8012e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e34:	f7ed fbf4 	bl	8000620 <__aeabi_dmul>
 8012e38:	4606      	mov	r6, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	4629      	mov	r1, r5
 8012e40:	a32f      	add	r3, pc, #188	@ (adr r3, 8012f00 <__ieee754_pow+0x768>)
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	f7ed fbeb 	bl	8000620 <__aeabi_dmul>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4630      	mov	r0, r6
 8012e50:	4639      	mov	r1, r7
 8012e52:	f7ed fa2f 	bl	80002b4 <__adddf3>
 8012e56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012e58:	4b32      	ldr	r3, [pc, #200]	@ (8012f24 <__ieee754_pow+0x78c>)
 8012e5a:	4413      	add	r3, r2
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	f7ed fa28 	bl	80002b4 <__adddf3>
 8012e64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012e6a:	f7ed fb6f 	bl	800054c <__aeabi_i2d>
 8012e6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012e70:	4b2d      	ldr	r3, [pc, #180]	@ (8012f28 <__ieee754_pow+0x790>)
 8012e72:	4606      	mov	r6, r0
 8012e74:	460f      	mov	r7, r1
 8012e76:	4413      	add	r3, r2
 8012e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e84:	f7ed fa16 	bl	80002b4 <__adddf3>
 8012e88:	4642      	mov	r2, r8
 8012e8a:	464b      	mov	r3, r9
 8012e8c:	f7ed fa12 	bl	80002b4 <__adddf3>
 8012e90:	4632      	mov	r2, r6
 8012e92:	463b      	mov	r3, r7
 8012e94:	f7ed fa0e 	bl	80002b4 <__adddf3>
 8012e98:	4632      	mov	r2, r6
 8012e9a:	463b      	mov	r3, r7
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012ea2:	4658      	mov	r0, fp
 8012ea4:	465c      	mov	r4, fp
 8012ea6:	f7ed fa03 	bl	80002b0 <__aeabi_dsub>
 8012eaa:	4642      	mov	r2, r8
 8012eac:	464b      	mov	r3, r9
 8012eae:	f7ed f9ff 	bl	80002b0 <__aeabi_dsub>
 8012eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012eb6:	f7ed f9fb 	bl	80002b0 <__aeabi_dsub>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	e036      	b.n	8012f2c <__ieee754_pow+0x794>
 8012ebe:	bf00      	nop
 8012ec0:	4a454eef 	.word	0x4a454eef
 8012ec4:	3fca7e28 	.word	0x3fca7e28
 8012ec8:	93c9db65 	.word	0x93c9db65
 8012ecc:	3fcd864a 	.word	0x3fcd864a
 8012ed0:	a91d4101 	.word	0xa91d4101
 8012ed4:	3fd17460 	.word	0x3fd17460
 8012ed8:	518f264d 	.word	0x518f264d
 8012edc:	3fd55555 	.word	0x3fd55555
 8012ee0:	db6fabff 	.word	0xdb6fabff
 8012ee4:	3fdb6db6 	.word	0x3fdb6db6
 8012ee8:	33333303 	.word	0x33333303
 8012eec:	3fe33333 	.word	0x3fe33333
 8012ef0:	e0000000 	.word	0xe0000000
 8012ef4:	3feec709 	.word	0x3feec709
 8012ef8:	dc3a03fd 	.word	0xdc3a03fd
 8012efc:	3feec709 	.word	0x3feec709
 8012f00:	145b01f5 	.word	0x145b01f5
 8012f04:	be3e2fe0 	.word	0xbe3e2fe0
 8012f08:	7ff00000 	.word	0x7ff00000
 8012f0c:	43400000 	.word	0x43400000
 8012f10:	0003988e 	.word	0x0003988e
 8012f14:	000bb679 	.word	0x000bb679
 8012f18:	08014f40 	.word	0x08014f40
 8012f1c:	3ff00000 	.word	0x3ff00000
 8012f20:	40080000 	.word	0x40080000
 8012f24:	08014f20 	.word	0x08014f20
 8012f28:	08014f30 	.word	0x08014f30
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f32:	e5d7      	b.n	8012ae4 <__ieee754_pow+0x34c>
 8012f34:	f04f 0a01 	mov.w	sl, #1
 8012f38:	e65e      	b.n	8012bf8 <__ieee754_pow+0x460>
 8012f3a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801320c <__ieee754_pow+0xa74>)
 8012f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f40:	4630      	mov	r0, r6
 8012f42:	4639      	mov	r1, r7
 8012f44:	f7ed f9b6 	bl	80002b4 <__adddf3>
 8012f48:	4642      	mov	r2, r8
 8012f4a:	464b      	mov	r3, r9
 8012f4c:	e9cd 0100 	strd	r0, r1, [sp]
 8012f50:	4620      	mov	r0, r4
 8012f52:	4629      	mov	r1, r5
 8012f54:	f7ed f9ac 	bl	80002b0 <__aeabi_dsub>
 8012f58:	4602      	mov	r2, r0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f60:	f7ed fdee 	bl	8000b40 <__aeabi_dcmpgt>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	f47f ae00 	bne.w	8012b6a <__ieee754_pow+0x3d2>
 8012f6a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8012f6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012f72:	48a1      	ldr	r0, [pc, #644]	@ (80131f8 <__ieee754_pow+0xa60>)
 8012f74:	f1bb 0f00 	cmp.w	fp, #0
 8012f78:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012f7c:	f04f 0200 	mov.w	r2, #0
 8012f80:	fa43 fa0a 	asr.w	sl, r3, sl
 8012f84:	44da      	add	sl, fp
 8012f86:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012f8a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012f8e:	fa40 f001 	asr.w	r0, r0, r1
 8012f92:	f1c1 0114 	rsb	r1, r1, #20
 8012f96:	ea00 030a 	and.w	r3, r0, sl
 8012f9a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012f9e:	4640      	mov	r0, r8
 8012fa0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012fa4:	fa4a fa01 	asr.w	sl, sl, r1
 8012fa8:	4649      	mov	r1, r9
 8012faa:	bfb8      	it	lt
 8012fac:	f1ca 0a00 	rsblt	sl, sl, #0
 8012fb0:	f7ed f97e 	bl	80002b0 <__aeabi_dsub>
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	4689      	mov	r9, r1
 8012fb8:	2400      	movs	r4, #0
 8012fba:	4632      	mov	r2, r6
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	f7ed f977 	bl	80002b4 <__adddf3>
 8012fc6:	460d      	mov	r5, r1
 8012fc8:	4620      	mov	r0, r4
 8012fca:	a37b      	add	r3, pc, #492	@ (adr r3, 80131b8 <__ieee754_pow+0xa20>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed fb26 	bl	8000620 <__aeabi_dmul>
 8012fd4:	4642      	mov	r2, r8
 8012fd6:	464b      	mov	r3, r9
 8012fd8:	e9cd 0100 	strd	r0, r1, [sp]
 8012fdc:	4620      	mov	r0, r4
 8012fde:	4629      	mov	r1, r5
 8012fe0:	f7ed f966 	bl	80002b0 <__aeabi_dsub>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4639      	mov	r1, r7
 8012fec:	f7ed f960 	bl	80002b0 <__aeabi_dsub>
 8012ff0:	a373      	add	r3, pc, #460	@ (adr r3, 80131c0 <__ieee754_pow+0xa28>)
 8012ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff6:	f7ed fb13 	bl	8000620 <__aeabi_dmul>
 8012ffa:	4680      	mov	r8, r0
 8012ffc:	4689      	mov	r9, r1
 8012ffe:	4620      	mov	r0, r4
 8013000:	4629      	mov	r1, r5
 8013002:	a371      	add	r3, pc, #452	@ (adr r3, 80131c8 <__ieee754_pow+0xa30>)
 8013004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013008:	f7ed fb0a 	bl	8000620 <__aeabi_dmul>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	4640      	mov	r0, r8
 8013012:	4649      	mov	r1, r9
 8013014:	f7ed f94e 	bl	80002b4 <__adddf3>
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013024:	f7ed f946 	bl	80002b4 <__adddf3>
 8013028:	4680      	mov	r8, r0
 801302a:	4689      	mov	r9, r1
 801302c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013030:	f7ed f93e 	bl	80002b0 <__aeabi_dsub>
 8013034:	4602      	mov	r2, r0
 8013036:	460b      	mov	r3, r1
 8013038:	4620      	mov	r0, r4
 801303a:	4629      	mov	r1, r5
 801303c:	f7ed f938 	bl	80002b0 <__aeabi_dsub>
 8013040:	4642      	mov	r2, r8
 8013042:	4606      	mov	r6, r0
 8013044:	460f      	mov	r7, r1
 8013046:	464b      	mov	r3, r9
 8013048:	4640      	mov	r0, r8
 801304a:	4649      	mov	r1, r9
 801304c:	f7ed fae8 	bl	8000620 <__aeabi_dmul>
 8013050:	4604      	mov	r4, r0
 8013052:	460d      	mov	r5, r1
 8013054:	a35e      	add	r3, pc, #376	@ (adr r3, 80131d0 <__ieee754_pow+0xa38>)
 8013056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305a:	f7ed fae1 	bl	8000620 <__aeabi_dmul>
 801305e:	a35e      	add	r3, pc, #376	@ (adr r3, 80131d8 <__ieee754_pow+0xa40>)
 8013060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013064:	f7ed f924 	bl	80002b0 <__aeabi_dsub>
 8013068:	4622      	mov	r2, r4
 801306a:	462b      	mov	r3, r5
 801306c:	f7ed fad8 	bl	8000620 <__aeabi_dmul>
 8013070:	a35b      	add	r3, pc, #364	@ (adr r3, 80131e0 <__ieee754_pow+0xa48>)
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	f7ed f91d 	bl	80002b4 <__adddf3>
 801307a:	4622      	mov	r2, r4
 801307c:	462b      	mov	r3, r5
 801307e:	f7ed facf 	bl	8000620 <__aeabi_dmul>
 8013082:	a359      	add	r3, pc, #356	@ (adr r3, 80131e8 <__ieee754_pow+0xa50>)
 8013084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013088:	f7ed f912 	bl	80002b0 <__aeabi_dsub>
 801308c:	4622      	mov	r2, r4
 801308e:	462b      	mov	r3, r5
 8013090:	f7ed fac6 	bl	8000620 <__aeabi_dmul>
 8013094:	a356      	add	r3, pc, #344	@ (adr r3, 80131f0 <__ieee754_pow+0xa58>)
 8013096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309a:	f7ed f90b 	bl	80002b4 <__adddf3>
 801309e:	4622      	mov	r2, r4
 80130a0:	462b      	mov	r3, r5
 80130a2:	f7ed fabd 	bl	8000620 <__aeabi_dmul>
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	4640      	mov	r0, r8
 80130ac:	4649      	mov	r1, r9
 80130ae:	f7ed f8ff 	bl	80002b0 <__aeabi_dsub>
 80130b2:	4604      	mov	r4, r0
 80130b4:	460d      	mov	r5, r1
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4640      	mov	r0, r8
 80130bc:	4649      	mov	r1, r9
 80130be:	f7ed faaf 	bl	8000620 <__aeabi_dmul>
 80130c2:	2200      	movs	r2, #0
 80130c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80130c8:	e9cd 0100 	strd	r0, r1, [sp]
 80130cc:	4620      	mov	r0, r4
 80130ce:	4629      	mov	r1, r5
 80130d0:	f7ed f8ee 	bl	80002b0 <__aeabi_dsub>
 80130d4:	4602      	mov	r2, r0
 80130d6:	460b      	mov	r3, r1
 80130d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130dc:	f7ed fbca 	bl	8000874 <__aeabi_ddiv>
 80130e0:	4632      	mov	r2, r6
 80130e2:	4604      	mov	r4, r0
 80130e4:	460d      	mov	r5, r1
 80130e6:	463b      	mov	r3, r7
 80130e8:	4640      	mov	r0, r8
 80130ea:	4649      	mov	r1, r9
 80130ec:	f7ed fa98 	bl	8000620 <__aeabi_dmul>
 80130f0:	4632      	mov	r2, r6
 80130f2:	463b      	mov	r3, r7
 80130f4:	f7ed f8de 	bl	80002b4 <__adddf3>
 80130f8:	4602      	mov	r2, r0
 80130fa:	460b      	mov	r3, r1
 80130fc:	4620      	mov	r0, r4
 80130fe:	4629      	mov	r1, r5
 8013100:	f7ed f8d6 	bl	80002b0 <__aeabi_dsub>
 8013104:	4642      	mov	r2, r8
 8013106:	464b      	mov	r3, r9
 8013108:	f7ed f8d2 	bl	80002b0 <__aeabi_dsub>
 801310c:	460b      	mov	r3, r1
 801310e:	4602      	mov	r2, r0
 8013110:	493a      	ldr	r1, [pc, #232]	@ (80131fc <__ieee754_pow+0xa64>)
 8013112:	2000      	movs	r0, #0
 8013114:	f7ed f8cc 	bl	80002b0 <__aeabi_dsub>
 8013118:	ec41 0b10 	vmov	d0, r0, r1
 801311c:	ee10 3a90 	vmov	r3, s1
 8013120:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013128:	da30      	bge.n	801318c <__ieee754_pow+0x9f4>
 801312a:	4650      	mov	r0, sl
 801312c:	f000 fc10 	bl	8013950 <scalbn>
 8013130:	ec51 0b10 	vmov	r0, r1, d0
 8013134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013138:	f7ff bbd5 	b.w	80128e6 <__ieee754_pow+0x14e>
 801313c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013140:	4c2f      	ldr	r4, [pc, #188]	@ (8013200 <__ieee754_pow+0xa68>)
 8013142:	42a3      	cmp	r3, r4
 8013144:	d91a      	bls.n	801317c <__ieee754_pow+0x9e4>
 8013146:	4b2f      	ldr	r3, [pc, #188]	@ (8013204 <__ieee754_pow+0xa6c>)
 8013148:	440b      	add	r3, r1
 801314a:	4303      	orrs	r3, r0
 801314c:	d009      	beq.n	8013162 <__ieee754_pow+0x9ca>
 801314e:	2200      	movs	r2, #0
 8013150:	2300      	movs	r3, #0
 8013152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013156:	f7ed fcd5 	bl	8000b04 <__aeabi_dcmplt>
 801315a:	3800      	subs	r0, #0
 801315c:	bf18      	it	ne
 801315e:	2001      	movne	r0, #1
 8013160:	e42e      	b.n	80129c0 <__ieee754_pow+0x228>
 8013162:	4642      	mov	r2, r8
 8013164:	464b      	mov	r3, r9
 8013166:	f7ed f8a3 	bl	80002b0 <__aeabi_dsub>
 801316a:	4632      	mov	r2, r6
 801316c:	463b      	mov	r3, r7
 801316e:	f7ed fcdd 	bl	8000b2c <__aeabi_dcmpge>
 8013172:	2800      	cmp	r0, #0
 8013174:	d1eb      	bne.n	801314e <__ieee754_pow+0x9b6>
 8013176:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013214 <__ieee754_pow+0xa7c>
 801317a:	e6f6      	b.n	8012f6a <__ieee754_pow+0x7d2>
 801317c:	469a      	mov	sl, r3
 801317e:	4b22      	ldr	r3, [pc, #136]	@ (8013208 <__ieee754_pow+0xa70>)
 8013180:	459a      	cmp	sl, r3
 8013182:	f63f aef2 	bhi.w	8012f6a <__ieee754_pow+0x7d2>
 8013186:	f8dd a010 	ldr.w	sl, [sp, #16]
 801318a:	e715      	b.n	8012fb8 <__ieee754_pow+0x820>
 801318c:	ec51 0b10 	vmov	r0, r1, d0
 8013190:	4619      	mov	r1, r3
 8013192:	e7cf      	b.n	8013134 <__ieee754_pow+0x99c>
 8013194:	2000      	movs	r0, #0
 8013196:	4919      	ldr	r1, [pc, #100]	@ (80131fc <__ieee754_pow+0xa64>)
 8013198:	f7ff bb1b 	b.w	80127d2 <__ieee754_pow+0x3a>
 801319c:	2000      	movs	r0, #0
 801319e:	2100      	movs	r1, #0
 80131a0:	f7ff bb17 	b.w	80127d2 <__ieee754_pow+0x3a>
 80131a4:	4630      	mov	r0, r6
 80131a6:	4639      	mov	r1, r7
 80131a8:	f7ff bb13 	b.w	80127d2 <__ieee754_pow+0x3a>
 80131ac:	460c      	mov	r4, r1
 80131ae:	f7ff bb61 	b.w	8012874 <__ieee754_pow+0xdc>
 80131b2:	2400      	movs	r4, #0
 80131b4:	f7ff bb4c 	b.w	8012850 <__ieee754_pow+0xb8>
 80131b8:	00000000 	.word	0x00000000
 80131bc:	3fe62e43 	.word	0x3fe62e43
 80131c0:	fefa39ef 	.word	0xfefa39ef
 80131c4:	3fe62e42 	.word	0x3fe62e42
 80131c8:	0ca86c39 	.word	0x0ca86c39
 80131cc:	be205c61 	.word	0xbe205c61
 80131d0:	72bea4d0 	.word	0x72bea4d0
 80131d4:	3e663769 	.word	0x3e663769
 80131d8:	c5d26bf1 	.word	0xc5d26bf1
 80131dc:	3ebbbd41 	.word	0x3ebbbd41
 80131e0:	af25de2c 	.word	0xaf25de2c
 80131e4:	3f11566a 	.word	0x3f11566a
 80131e8:	16bebd93 	.word	0x16bebd93
 80131ec:	3f66c16c 	.word	0x3f66c16c
 80131f0:	5555553e 	.word	0x5555553e
 80131f4:	3fc55555 	.word	0x3fc55555
 80131f8:	fff00000 	.word	0xfff00000
 80131fc:	3ff00000 	.word	0x3ff00000
 8013200:	4090cbff 	.word	0x4090cbff
 8013204:	3f6f3400 	.word	0x3f6f3400
 8013208:	3fe00000 	.word	0x3fe00000
 801320c:	652b82fe 	.word	0x652b82fe
 8013210:	3c971547 	.word	0x3c971547
 8013214:	4090cc00 	.word	0x4090cc00

08013218 <__ieee754_rem_pio2>:
 8013218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801321c:	ec57 6b10 	vmov	r6, r7, d0
 8013220:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013224:	4bc4      	ldr	r3, [pc, #784]	@ (8013538 <__ieee754_rem_pio2+0x320>)
 8013226:	b08d      	sub	sp, #52	@ 0x34
 8013228:	4604      	mov	r4, r0
 801322a:	4598      	cmp	r8, r3
 801322c:	9704      	str	r7, [sp, #16]
 801322e:	d807      	bhi.n	8013240 <__ieee754_rem_pio2+0x28>
 8013230:	2200      	movs	r2, #0
 8013232:	2300      	movs	r3, #0
 8013234:	ed80 0b00 	vstr	d0, [r0]
 8013238:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801323c:	2500      	movs	r5, #0
 801323e:	e028      	b.n	8013292 <__ieee754_rem_pio2+0x7a>
 8013240:	4bbe      	ldr	r3, [pc, #760]	@ (801353c <__ieee754_rem_pio2+0x324>)
 8013242:	4598      	cmp	r8, r3
 8013244:	d878      	bhi.n	8013338 <__ieee754_rem_pio2+0x120>
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	4630      	mov	r0, r6
 801324a:	4dbd      	ldr	r5, [pc, #756]	@ (8013540 <__ieee754_rem_pio2+0x328>)
 801324c:	4639      	mov	r1, r7
 801324e:	2b00      	cmp	r3, #0
 8013250:	a3ab      	add	r3, pc, #684	@ (adr r3, 8013500 <__ieee754_rem_pio2+0x2e8>)
 8013252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013256:	dd38      	ble.n	80132ca <__ieee754_rem_pio2+0xb2>
 8013258:	f7ed f82a 	bl	80002b0 <__aeabi_dsub>
 801325c:	45a8      	cmp	r8, r5
 801325e:	4606      	mov	r6, r0
 8013260:	460f      	mov	r7, r1
 8013262:	d01a      	beq.n	801329a <__ieee754_rem_pio2+0x82>
 8013264:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013508 <__ieee754_rem_pio2+0x2f0>)
 8013266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326a:	f7ed f821 	bl	80002b0 <__aeabi_dsub>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4680      	mov	r8, r0
 8013274:	4689      	mov	r9, r1
 8013276:	4630      	mov	r0, r6
 8013278:	4639      	mov	r1, r7
 801327a:	f7ed f819 	bl	80002b0 <__aeabi_dsub>
 801327e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013508 <__ieee754_rem_pio2+0x2f0>)
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	2501      	movs	r5, #1
 8013286:	f7ed f813 	bl	80002b0 <__aeabi_dsub>
 801328a:	e9c4 8900 	strd	r8, r9, [r4]
 801328e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013292:	4628      	mov	r0, r5
 8013294:	b00d      	add	sp, #52	@ 0x34
 8013296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329a:	a39d      	add	r3, pc, #628	@ (adr r3, 8013510 <__ieee754_rem_pio2+0x2f8>)
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f7ed f806 	bl	80002b0 <__aeabi_dsub>
 80132a4:	4606      	mov	r6, r0
 80132a6:	460f      	mov	r7, r1
 80132a8:	a39b      	add	r3, pc, #620	@ (adr r3, 8013518 <__ieee754_rem_pio2+0x300>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ec ffff 	bl	80002b0 <__aeabi_dsub>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4680      	mov	r8, r0
 80132b8:	4689      	mov	r9, r1
 80132ba:	4630      	mov	r0, r6
 80132bc:	4639      	mov	r1, r7
 80132be:	f7ec fff7 	bl	80002b0 <__aeabi_dsub>
 80132c2:	a395      	add	r3, pc, #596	@ (adr r3, 8013518 <__ieee754_rem_pio2+0x300>)
 80132c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c8:	e7dc      	b.n	8013284 <__ieee754_rem_pio2+0x6c>
 80132ca:	f7ec fff3 	bl	80002b4 <__adddf3>
 80132ce:	45a8      	cmp	r8, r5
 80132d0:	4606      	mov	r6, r0
 80132d2:	460f      	mov	r7, r1
 80132d4:	d018      	beq.n	8013308 <__ieee754_rem_pio2+0xf0>
 80132d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8013508 <__ieee754_rem_pio2+0x2f0>)
 80132d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132dc:	f7ec ffea 	bl	80002b4 <__adddf3>
 80132e0:	4602      	mov	r2, r0
 80132e2:	460b      	mov	r3, r1
 80132e4:	4680      	mov	r8, r0
 80132e6:	4689      	mov	r9, r1
 80132e8:	4630      	mov	r0, r6
 80132ea:	4639      	mov	r1, r7
 80132ec:	f7ec ffe0 	bl	80002b0 <__aeabi_dsub>
 80132f0:	a385      	add	r3, pc, #532	@ (adr r3, 8013508 <__ieee754_rem_pio2+0x2f0>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	f7ec ffdd 	bl	80002b4 <__adddf3>
 80132fa:	f04f 35ff 	mov.w	r5, #4294967295
 80132fe:	e9c4 8900 	strd	r8, r9, [r4]
 8013302:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013306:	e7c4      	b.n	8013292 <__ieee754_rem_pio2+0x7a>
 8013308:	a381      	add	r3, pc, #516	@ (adr r3, 8013510 <__ieee754_rem_pio2+0x2f8>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ec ffd1 	bl	80002b4 <__adddf3>
 8013312:	4606      	mov	r6, r0
 8013314:	460f      	mov	r7, r1
 8013316:	a380      	add	r3, pc, #512	@ (adr r3, 8013518 <__ieee754_rem_pio2+0x300>)
 8013318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331c:	f7ec ffca 	bl	80002b4 <__adddf3>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4680      	mov	r8, r0
 8013326:	4689      	mov	r9, r1
 8013328:	4630      	mov	r0, r6
 801332a:	4639      	mov	r1, r7
 801332c:	f7ec ffc0 	bl	80002b0 <__aeabi_dsub>
 8013330:	a379      	add	r3, pc, #484	@ (adr r3, 8013518 <__ieee754_rem_pio2+0x300>)
 8013332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013336:	e7de      	b.n	80132f6 <__ieee754_rem_pio2+0xde>
 8013338:	4b82      	ldr	r3, [pc, #520]	@ (8013544 <__ieee754_rem_pio2+0x32c>)
 801333a:	4598      	cmp	r8, r3
 801333c:	f200 80d1 	bhi.w	80134e2 <__ieee754_rem_pio2+0x2ca>
 8013340:	f000 fafe 	bl	8013940 <fabs>
 8013344:	ec57 6b10 	vmov	r6, r7, d0
 8013348:	a375      	add	r3, pc, #468	@ (adr r3, 8013520 <__ieee754_rem_pio2+0x308>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	4630      	mov	r0, r6
 8013350:	4639      	mov	r1, r7
 8013352:	f7ed f965 	bl	8000620 <__aeabi_dmul>
 8013356:	2200      	movs	r2, #0
 8013358:	4b7b      	ldr	r3, [pc, #492]	@ (8013548 <__ieee754_rem_pio2+0x330>)
 801335a:	f7ec ffab 	bl	80002b4 <__adddf3>
 801335e:	f7ed fc0f 	bl	8000b80 <__aeabi_d2iz>
 8013362:	4605      	mov	r5, r0
 8013364:	f7ed f8f2 	bl	800054c <__aeabi_i2d>
 8013368:	4602      	mov	r2, r0
 801336a:	460b      	mov	r3, r1
 801336c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013370:	a363      	add	r3, pc, #396	@ (adr r3, 8013500 <__ieee754_rem_pio2+0x2e8>)
 8013372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013376:	f7ed f953 	bl	8000620 <__aeabi_dmul>
 801337a:	4602      	mov	r2, r0
 801337c:	460b      	mov	r3, r1
 801337e:	4630      	mov	r0, r6
 8013380:	4639      	mov	r1, r7
 8013382:	f7ec ff95 	bl	80002b0 <__aeabi_dsub>
 8013386:	4682      	mov	sl, r0
 8013388:	468b      	mov	fp, r1
 801338a:	a35f      	add	r3, pc, #380	@ (adr r3, 8013508 <__ieee754_rem_pio2+0x2f0>)
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013394:	f7ed f944 	bl	8000620 <__aeabi_dmul>
 8013398:	2d1f      	cmp	r5, #31
 801339a:	4606      	mov	r6, r0
 801339c:	460f      	mov	r7, r1
 801339e:	dc0c      	bgt.n	80133ba <__ieee754_rem_pio2+0x1a2>
 80133a0:	1e6a      	subs	r2, r5, #1
 80133a2:	4b6a      	ldr	r3, [pc, #424]	@ (801354c <__ieee754_rem_pio2+0x334>)
 80133a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a8:	4543      	cmp	r3, r8
 80133aa:	d006      	beq.n	80133ba <__ieee754_rem_pio2+0x1a2>
 80133ac:	4632      	mov	r2, r6
 80133ae:	463b      	mov	r3, r7
 80133b0:	4650      	mov	r0, sl
 80133b2:	4659      	mov	r1, fp
 80133b4:	f7ec ff7c 	bl	80002b0 <__aeabi_dsub>
 80133b8:	e00e      	b.n	80133d8 <__ieee754_rem_pio2+0x1c0>
 80133ba:	463b      	mov	r3, r7
 80133bc:	4632      	mov	r2, r6
 80133be:	4650      	mov	r0, sl
 80133c0:	4659      	mov	r1, fp
 80133c2:	f7ec ff75 	bl	80002b0 <__aeabi_dsub>
 80133c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80133ca:	9305      	str	r3, [sp, #20]
 80133cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80133d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80133d4:	2b10      	cmp	r3, #16
 80133d6:	dc02      	bgt.n	80133de <__ieee754_rem_pio2+0x1c6>
 80133d8:	e9c4 0100 	strd	r0, r1, [r4]
 80133dc:	e039      	b.n	8013452 <__ieee754_rem_pio2+0x23a>
 80133de:	a34c      	add	r3, pc, #304	@ (adr r3, 8013510 <__ieee754_rem_pio2+0x2f8>)
 80133e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133e8:	f7ed f91a 	bl	8000620 <__aeabi_dmul>
 80133ec:	4606      	mov	r6, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	4602      	mov	r2, r0
 80133f2:	460b      	mov	r3, r1
 80133f4:	4650      	mov	r0, sl
 80133f6:	4659      	mov	r1, fp
 80133f8:	f7ec ff5a 	bl	80002b0 <__aeabi_dsub>
 80133fc:	4602      	mov	r2, r0
 80133fe:	460b      	mov	r3, r1
 8013400:	4680      	mov	r8, r0
 8013402:	4689      	mov	r9, r1
 8013404:	4650      	mov	r0, sl
 8013406:	4659      	mov	r1, fp
 8013408:	f7ec ff52 	bl	80002b0 <__aeabi_dsub>
 801340c:	4632      	mov	r2, r6
 801340e:	463b      	mov	r3, r7
 8013410:	f7ec ff4e 	bl	80002b0 <__aeabi_dsub>
 8013414:	4606      	mov	r6, r0
 8013416:	460f      	mov	r7, r1
 8013418:	a33f      	add	r3, pc, #252	@ (adr r3, 8013518 <__ieee754_rem_pio2+0x300>)
 801341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013422:	f7ed f8fd 	bl	8000620 <__aeabi_dmul>
 8013426:	4632      	mov	r2, r6
 8013428:	463b      	mov	r3, r7
 801342a:	f7ec ff41 	bl	80002b0 <__aeabi_dsub>
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	4606      	mov	r6, r0
 8013434:	460f      	mov	r7, r1
 8013436:	4640      	mov	r0, r8
 8013438:	4649      	mov	r1, r9
 801343a:	f7ec ff39 	bl	80002b0 <__aeabi_dsub>
 801343e:	9a05      	ldr	r2, [sp, #20]
 8013440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013444:	1ad3      	subs	r3, r2, r3
 8013446:	2b31      	cmp	r3, #49	@ 0x31
 8013448:	dc20      	bgt.n	801348c <__ieee754_rem_pio2+0x274>
 801344a:	46c2      	mov	sl, r8
 801344c:	46cb      	mov	fp, r9
 801344e:	e9c4 0100 	strd	r0, r1, [r4]
 8013452:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013456:	4650      	mov	r0, sl
 8013458:	4659      	mov	r1, fp
 801345a:	4642      	mov	r2, r8
 801345c:	464b      	mov	r3, r9
 801345e:	f7ec ff27 	bl	80002b0 <__aeabi_dsub>
 8013462:	463b      	mov	r3, r7
 8013464:	4632      	mov	r2, r6
 8013466:	f7ec ff23 	bl	80002b0 <__aeabi_dsub>
 801346a:	9b04      	ldr	r3, [sp, #16]
 801346c:	2b00      	cmp	r3, #0
 801346e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013472:	f6bf af0e 	bge.w	8013292 <__ieee754_rem_pio2+0x7a>
 8013476:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801347a:	f8c4 8000 	str.w	r8, [r4]
 801347e:	60a0      	str	r0, [r4, #8]
 8013480:	6063      	str	r3, [r4, #4]
 8013482:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013486:	60e3      	str	r3, [r4, #12]
 8013488:	426d      	negs	r5, r5
 801348a:	e702      	b.n	8013292 <__ieee754_rem_pio2+0x7a>
 801348c:	a326      	add	r3, pc, #152	@ (adr r3, 8013528 <__ieee754_rem_pio2+0x310>)
 801348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013496:	f7ed f8c3 	bl	8000620 <__aeabi_dmul>
 801349a:	4606      	mov	r6, r0
 801349c:	460f      	mov	r7, r1
 801349e:	4602      	mov	r2, r0
 80134a0:	460b      	mov	r3, r1
 80134a2:	4640      	mov	r0, r8
 80134a4:	4649      	mov	r1, r9
 80134a6:	f7ec ff03 	bl	80002b0 <__aeabi_dsub>
 80134aa:	4602      	mov	r2, r0
 80134ac:	460b      	mov	r3, r1
 80134ae:	4682      	mov	sl, r0
 80134b0:	468b      	mov	fp, r1
 80134b2:	4640      	mov	r0, r8
 80134b4:	4649      	mov	r1, r9
 80134b6:	f7ec fefb 	bl	80002b0 <__aeabi_dsub>
 80134ba:	4632      	mov	r2, r6
 80134bc:	463b      	mov	r3, r7
 80134be:	f7ec fef7 	bl	80002b0 <__aeabi_dsub>
 80134c2:	4606      	mov	r6, r0
 80134c4:	460f      	mov	r7, r1
 80134c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8013530 <__ieee754_rem_pio2+0x318>)
 80134c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134d0:	f7ed f8a6 	bl	8000620 <__aeabi_dmul>
 80134d4:	4632      	mov	r2, r6
 80134d6:	463b      	mov	r3, r7
 80134d8:	f7ec feea 	bl	80002b0 <__aeabi_dsub>
 80134dc:	4606      	mov	r6, r0
 80134de:	460f      	mov	r7, r1
 80134e0:	e764      	b.n	80133ac <__ieee754_rem_pio2+0x194>
 80134e2:	4b1b      	ldr	r3, [pc, #108]	@ (8013550 <__ieee754_rem_pio2+0x338>)
 80134e4:	4598      	cmp	r8, r3
 80134e6:	d935      	bls.n	8013554 <__ieee754_rem_pio2+0x33c>
 80134e8:	4632      	mov	r2, r6
 80134ea:	463b      	mov	r3, r7
 80134ec:	4630      	mov	r0, r6
 80134ee:	4639      	mov	r1, r7
 80134f0:	f7ec fede 	bl	80002b0 <__aeabi_dsub>
 80134f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80134f8:	e9c4 0100 	strd	r0, r1, [r4]
 80134fc:	e69e      	b.n	801323c <__ieee754_rem_pio2+0x24>
 80134fe:	bf00      	nop
 8013500:	54400000 	.word	0x54400000
 8013504:	3ff921fb 	.word	0x3ff921fb
 8013508:	1a626331 	.word	0x1a626331
 801350c:	3dd0b461 	.word	0x3dd0b461
 8013510:	1a600000 	.word	0x1a600000
 8013514:	3dd0b461 	.word	0x3dd0b461
 8013518:	2e037073 	.word	0x2e037073
 801351c:	3ba3198a 	.word	0x3ba3198a
 8013520:	6dc9c883 	.word	0x6dc9c883
 8013524:	3fe45f30 	.word	0x3fe45f30
 8013528:	2e000000 	.word	0x2e000000
 801352c:	3ba3198a 	.word	0x3ba3198a
 8013530:	252049c1 	.word	0x252049c1
 8013534:	397b839a 	.word	0x397b839a
 8013538:	3fe921fb 	.word	0x3fe921fb
 801353c:	4002d97b 	.word	0x4002d97b
 8013540:	3ff921fb 	.word	0x3ff921fb
 8013544:	413921fb 	.word	0x413921fb
 8013548:	3fe00000 	.word	0x3fe00000
 801354c:	08014f50 	.word	0x08014f50
 8013550:	7fefffff 	.word	0x7fefffff
 8013554:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013558:	4630      	mov	r0, r6
 801355a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801355e:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013562:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013566:	f04f 0803 	mov.w	r8, #3
 801356a:	460f      	mov	r7, r1
 801356c:	f7ed fb08 	bl	8000b80 <__aeabi_d2iz>
 8013570:	f7ec ffec 	bl	800054c <__aeabi_i2d>
 8013574:	4602      	mov	r2, r0
 8013576:	460b      	mov	r3, r1
 8013578:	4630      	mov	r0, r6
 801357a:	4639      	mov	r1, r7
 801357c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013580:	f7ec fe96 	bl	80002b0 <__aeabi_dsub>
 8013584:	2200      	movs	r2, #0
 8013586:	4b20      	ldr	r3, [pc, #128]	@ (8013608 <__ieee754_rem_pio2+0x3f0>)
 8013588:	f7ed f84a 	bl	8000620 <__aeabi_dmul>
 801358c:	460f      	mov	r7, r1
 801358e:	4606      	mov	r6, r0
 8013590:	f7ed faf6 	bl	8000b80 <__aeabi_d2iz>
 8013594:	f7ec ffda 	bl	800054c <__aeabi_i2d>
 8013598:	4602      	mov	r2, r0
 801359a:	460b      	mov	r3, r1
 801359c:	4630      	mov	r0, r6
 801359e:	4639      	mov	r1, r7
 80135a0:	2600      	movs	r6, #0
 80135a2:	2700      	movs	r7, #0
 80135a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80135a8:	f7ec fe82 	bl	80002b0 <__aeabi_dsub>
 80135ac:	2200      	movs	r2, #0
 80135ae:	4b16      	ldr	r3, [pc, #88]	@ (8013608 <__ieee754_rem_pio2+0x3f0>)
 80135b0:	f7ed f836 	bl	8000620 <__aeabi_dmul>
 80135b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80135b8:	4632      	mov	r2, r6
 80135ba:	463b      	mov	r3, r7
 80135bc:	46c2      	mov	sl, r8
 80135be:	f108 38ff 	add.w	r8, r8, #4294967295
 80135c2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80135c6:	f7ed fa93 	bl	8000af0 <__aeabi_dcmpeq>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d1f4      	bne.n	80135b8 <__ieee754_rem_pio2+0x3a0>
 80135ce:	4b0f      	ldr	r3, [pc, #60]	@ (801360c <__ieee754_rem_pio2+0x3f4>)
 80135d0:	462a      	mov	r2, r5
 80135d2:	4621      	mov	r1, r4
 80135d4:	a806      	add	r0, sp, #24
 80135d6:	9301      	str	r3, [sp, #4]
 80135d8:	2302      	movs	r3, #2
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	4653      	mov	r3, sl
 80135de:	f000 fa73 	bl	8013ac8 <__kernel_rem_pio2>
 80135e2:	9b04      	ldr	r3, [sp, #16]
 80135e4:	4605      	mov	r5, r0
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f6bf ae53 	bge.w	8013292 <__ieee754_rem_pio2+0x7a>
 80135ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80135f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135f4:	e9c4 2300 	strd	r2, r3, [r4]
 80135f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80135fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013600:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013604:	e740      	b.n	8013488 <__ieee754_rem_pio2+0x270>
 8013606:	bf00      	nop
 8013608:	41700000 	.word	0x41700000
 801360c:	08014fd0 	.word	0x08014fd0

08013610 <atan>:
 8013610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	ec55 4b10 	vmov	r4, r5, d0
 8013618:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801361c:	4bbe      	ldr	r3, [pc, #760]	@ (8013918 <atan+0x308>)
 801361e:	46ab      	mov	fp, r5
 8013620:	429e      	cmp	r6, r3
 8013622:	d918      	bls.n	8013656 <atan+0x46>
 8013624:	4bbd      	ldr	r3, [pc, #756]	@ (801391c <atan+0x30c>)
 8013626:	429e      	cmp	r6, r3
 8013628:	d801      	bhi.n	801362e <atan+0x1e>
 801362a:	d109      	bne.n	8013640 <atan+0x30>
 801362c:	b144      	cbz	r4, 8013640 <atan+0x30>
 801362e:	4622      	mov	r2, r4
 8013630:	462b      	mov	r3, r5
 8013632:	4620      	mov	r0, r4
 8013634:	4629      	mov	r1, r5
 8013636:	f7ec fe3d 	bl	80002b4 <__adddf3>
 801363a:	4604      	mov	r4, r0
 801363c:	460d      	mov	r5, r1
 801363e:	e006      	b.n	801364e <atan+0x3e>
 8013640:	f1bb 0f00 	cmp.w	fp, #0
 8013644:	f340 812b 	ble.w	801389e <atan+0x28e>
 8013648:	a597      	add	r5, pc, #604	@ (adr r5, 80138a8 <atan+0x298>)
 801364a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801364e:	ec45 4b10 	vmov	d0, r4, r5
 8013652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013656:	4bb2      	ldr	r3, [pc, #712]	@ (8013920 <atan+0x310>)
 8013658:	429e      	cmp	r6, r3
 801365a:	d813      	bhi.n	8013684 <atan+0x74>
 801365c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013660:	429e      	cmp	r6, r3
 8013662:	d80c      	bhi.n	801367e <atan+0x6e>
 8013664:	4620      	mov	r0, r4
 8013666:	4629      	mov	r1, r5
 8013668:	a391      	add	r3, pc, #580	@ (adr r3, 80138b0 <atan+0x2a0>)
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	f7ec fe21 	bl	80002b4 <__adddf3>
 8013672:	2200      	movs	r2, #0
 8013674:	4bab      	ldr	r3, [pc, #684]	@ (8013924 <atan+0x314>)
 8013676:	f7ed fa63 	bl	8000b40 <__aeabi_dcmpgt>
 801367a:	2800      	cmp	r0, #0
 801367c:	d1e7      	bne.n	801364e <atan+0x3e>
 801367e:	f04f 3aff 	mov.w	sl, #4294967295
 8013682:	e029      	b.n	80136d8 <atan+0xc8>
 8013684:	f000 f95c 	bl	8013940 <fabs>
 8013688:	4ba7      	ldr	r3, [pc, #668]	@ (8013928 <atan+0x318>)
 801368a:	429e      	cmp	r6, r3
 801368c:	ec55 4b10 	vmov	r4, r5, d0
 8013690:	f200 80bc 	bhi.w	801380c <atan+0x1fc>
 8013694:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013698:	429e      	cmp	r6, r3
 801369a:	f200 809e 	bhi.w	80137da <atan+0x1ca>
 801369e:	4622      	mov	r2, r4
 80136a0:	462b      	mov	r3, r5
 80136a2:	4620      	mov	r0, r4
 80136a4:	4629      	mov	r1, r5
 80136a6:	f7ec fe05 	bl	80002b4 <__adddf3>
 80136aa:	2200      	movs	r2, #0
 80136ac:	4b9d      	ldr	r3, [pc, #628]	@ (8013924 <atan+0x314>)
 80136ae:	f04f 0a00 	mov.w	sl, #0
 80136b2:	f7ec fdfd 	bl	80002b0 <__aeabi_dsub>
 80136b6:	4606      	mov	r6, r0
 80136b8:	460f      	mov	r7, r1
 80136ba:	2200      	movs	r2, #0
 80136bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80136c0:	4620      	mov	r0, r4
 80136c2:	4629      	mov	r1, r5
 80136c4:	f7ec fdf6 	bl	80002b4 <__adddf3>
 80136c8:	4602      	mov	r2, r0
 80136ca:	460b      	mov	r3, r1
 80136cc:	4630      	mov	r0, r6
 80136ce:	4639      	mov	r1, r7
 80136d0:	f7ed f8d0 	bl	8000874 <__aeabi_ddiv>
 80136d4:	4604      	mov	r4, r0
 80136d6:	460d      	mov	r5, r1
 80136d8:	4622      	mov	r2, r4
 80136da:	462b      	mov	r3, r5
 80136dc:	4620      	mov	r0, r4
 80136de:	4629      	mov	r1, r5
 80136e0:	f7ec ff9e 	bl	8000620 <__aeabi_dmul>
 80136e4:	4602      	mov	r2, r0
 80136e6:	460b      	mov	r3, r1
 80136e8:	4680      	mov	r8, r0
 80136ea:	4689      	mov	r9, r1
 80136ec:	f7ec ff98 	bl	8000620 <__aeabi_dmul>
 80136f0:	4606      	mov	r6, r0
 80136f2:	460f      	mov	r7, r1
 80136f4:	a370      	add	r3, pc, #448	@ (adr r3, 80138b8 <atan+0x2a8>)
 80136f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fa:	f7ec ff91 	bl	8000620 <__aeabi_dmul>
 80136fe:	a370      	add	r3, pc, #448	@ (adr r3, 80138c0 <atan+0x2b0>)
 8013700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013704:	f7ec fdd6 	bl	80002b4 <__adddf3>
 8013708:	4632      	mov	r2, r6
 801370a:	463b      	mov	r3, r7
 801370c:	f7ec ff88 	bl	8000620 <__aeabi_dmul>
 8013710:	a36d      	add	r3, pc, #436	@ (adr r3, 80138c8 <atan+0x2b8>)
 8013712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013716:	f7ec fdcd 	bl	80002b4 <__adddf3>
 801371a:	4632      	mov	r2, r6
 801371c:	463b      	mov	r3, r7
 801371e:	f7ec ff7f 	bl	8000620 <__aeabi_dmul>
 8013722:	a36b      	add	r3, pc, #428	@ (adr r3, 80138d0 <atan+0x2c0>)
 8013724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013728:	f7ec fdc4 	bl	80002b4 <__adddf3>
 801372c:	4632      	mov	r2, r6
 801372e:	463b      	mov	r3, r7
 8013730:	f7ec ff76 	bl	8000620 <__aeabi_dmul>
 8013734:	a368      	add	r3, pc, #416	@ (adr r3, 80138d8 <atan+0x2c8>)
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	f7ec fdbb 	bl	80002b4 <__adddf3>
 801373e:	4632      	mov	r2, r6
 8013740:	463b      	mov	r3, r7
 8013742:	f7ec ff6d 	bl	8000620 <__aeabi_dmul>
 8013746:	a366      	add	r3, pc, #408	@ (adr r3, 80138e0 <atan+0x2d0>)
 8013748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374c:	f7ec fdb2 	bl	80002b4 <__adddf3>
 8013750:	4642      	mov	r2, r8
 8013752:	464b      	mov	r3, r9
 8013754:	f7ec ff64 	bl	8000620 <__aeabi_dmul>
 8013758:	4680      	mov	r8, r0
 801375a:	4689      	mov	r9, r1
 801375c:	4630      	mov	r0, r6
 801375e:	4639      	mov	r1, r7
 8013760:	a361      	add	r3, pc, #388	@ (adr r3, 80138e8 <atan+0x2d8>)
 8013762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013766:	f7ec ff5b 	bl	8000620 <__aeabi_dmul>
 801376a:	a361      	add	r3, pc, #388	@ (adr r3, 80138f0 <atan+0x2e0>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	f7ec fd9e 	bl	80002b0 <__aeabi_dsub>
 8013774:	4632      	mov	r2, r6
 8013776:	463b      	mov	r3, r7
 8013778:	f7ec ff52 	bl	8000620 <__aeabi_dmul>
 801377c:	a35e      	add	r3, pc, #376	@ (adr r3, 80138f8 <atan+0x2e8>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	f7ec fd95 	bl	80002b0 <__aeabi_dsub>
 8013786:	4632      	mov	r2, r6
 8013788:	463b      	mov	r3, r7
 801378a:	f7ec ff49 	bl	8000620 <__aeabi_dmul>
 801378e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013900 <atan+0x2f0>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	f7ec fd8c 	bl	80002b0 <__aeabi_dsub>
 8013798:	4632      	mov	r2, r6
 801379a:	463b      	mov	r3, r7
 801379c:	f7ec ff40 	bl	8000620 <__aeabi_dmul>
 80137a0:	a359      	add	r3, pc, #356	@ (adr r3, 8013908 <atan+0x2f8>)
 80137a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a6:	f7ec fd83 	bl	80002b0 <__aeabi_dsub>
 80137aa:	4632      	mov	r2, r6
 80137ac:	463b      	mov	r3, r7
 80137ae:	f7ec ff37 	bl	8000620 <__aeabi_dmul>
 80137b2:	4602      	mov	r2, r0
 80137b4:	460b      	mov	r3, r1
 80137b6:	4640      	mov	r0, r8
 80137b8:	4649      	mov	r1, r9
 80137ba:	f7ec fd7b 	bl	80002b4 <__adddf3>
 80137be:	4622      	mov	r2, r4
 80137c0:	462b      	mov	r3, r5
 80137c2:	f7ec ff2d 	bl	8000620 <__aeabi_dmul>
 80137c6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80137ca:	4602      	mov	r2, r0
 80137cc:	460b      	mov	r3, r1
 80137ce:	d148      	bne.n	8013862 <atan+0x252>
 80137d0:	4620      	mov	r0, r4
 80137d2:	4629      	mov	r1, r5
 80137d4:	f7ec fd6c 	bl	80002b0 <__aeabi_dsub>
 80137d8:	e72f      	b.n	801363a <atan+0x2a>
 80137da:	2200      	movs	r2, #0
 80137dc:	4b51      	ldr	r3, [pc, #324]	@ (8013924 <atan+0x314>)
 80137de:	4620      	mov	r0, r4
 80137e0:	4629      	mov	r1, r5
 80137e2:	f7ec fd65 	bl	80002b0 <__aeabi_dsub>
 80137e6:	4606      	mov	r6, r0
 80137e8:	460f      	mov	r7, r1
 80137ea:	2200      	movs	r2, #0
 80137ec:	4b4d      	ldr	r3, [pc, #308]	@ (8013924 <atan+0x314>)
 80137ee:	4620      	mov	r0, r4
 80137f0:	4629      	mov	r1, r5
 80137f2:	f04f 0a01 	mov.w	sl, #1
 80137f6:	f7ec fd5d 	bl	80002b4 <__adddf3>
 80137fa:	4602      	mov	r2, r0
 80137fc:	460b      	mov	r3, r1
 80137fe:	4630      	mov	r0, r6
 8013800:	4639      	mov	r1, r7
 8013802:	f7ed f837 	bl	8000874 <__aeabi_ddiv>
 8013806:	4604      	mov	r4, r0
 8013808:	460d      	mov	r5, r1
 801380a:	e765      	b.n	80136d8 <atan+0xc8>
 801380c:	4b47      	ldr	r3, [pc, #284]	@ (801392c <atan+0x31c>)
 801380e:	429e      	cmp	r6, r3
 8013810:	d21c      	bcs.n	801384c <atan+0x23c>
 8013812:	2200      	movs	r2, #0
 8013814:	4b46      	ldr	r3, [pc, #280]	@ (8013930 <atan+0x320>)
 8013816:	4620      	mov	r0, r4
 8013818:	4629      	mov	r1, r5
 801381a:	f7ec fd49 	bl	80002b0 <__aeabi_dsub>
 801381e:	2200      	movs	r2, #0
 8013820:	4606      	mov	r6, r0
 8013822:	460f      	mov	r7, r1
 8013824:	4b42      	ldr	r3, [pc, #264]	@ (8013930 <atan+0x320>)
 8013826:	4620      	mov	r0, r4
 8013828:	4629      	mov	r1, r5
 801382a:	f04f 0a02 	mov.w	sl, #2
 801382e:	f7ec fef7 	bl	8000620 <__aeabi_dmul>
 8013832:	2200      	movs	r2, #0
 8013834:	4b3b      	ldr	r3, [pc, #236]	@ (8013924 <atan+0x314>)
 8013836:	f7ec fd3d 	bl	80002b4 <__adddf3>
 801383a:	4602      	mov	r2, r0
 801383c:	460b      	mov	r3, r1
 801383e:	4630      	mov	r0, r6
 8013840:	4639      	mov	r1, r7
 8013842:	f7ed f817 	bl	8000874 <__aeabi_ddiv>
 8013846:	4604      	mov	r4, r0
 8013848:	460d      	mov	r5, r1
 801384a:	e745      	b.n	80136d8 <atan+0xc8>
 801384c:	4622      	mov	r2, r4
 801384e:	462b      	mov	r3, r5
 8013850:	2000      	movs	r0, #0
 8013852:	4938      	ldr	r1, [pc, #224]	@ (8013934 <atan+0x324>)
 8013854:	f7ed f80e 	bl	8000874 <__aeabi_ddiv>
 8013858:	f04f 0a03 	mov.w	sl, #3
 801385c:	4604      	mov	r4, r0
 801385e:	460d      	mov	r5, r1
 8013860:	e73a      	b.n	80136d8 <atan+0xc8>
 8013862:	4b35      	ldr	r3, [pc, #212]	@ (8013938 <atan+0x328>)
 8013864:	4e35      	ldr	r6, [pc, #212]	@ (801393c <atan+0x32c>)
 8013866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801386a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013872:	f7ec fd1d 	bl	80002b0 <__aeabi_dsub>
 8013876:	4622      	mov	r2, r4
 8013878:	462b      	mov	r3, r5
 801387a:	f7ec fd19 	bl	80002b0 <__aeabi_dsub>
 801387e:	4602      	mov	r2, r0
 8013880:	460b      	mov	r3, r1
 8013882:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013886:	f7ec fd13 	bl	80002b0 <__aeabi_dsub>
 801388a:	f1bb 0f00 	cmp.w	fp, #0
 801388e:	4604      	mov	r4, r0
 8013890:	460d      	mov	r5, r1
 8013892:	f6bf aedc 	bge.w	801364e <atan+0x3e>
 8013896:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801389a:	461d      	mov	r5, r3
 801389c:	e6d7      	b.n	801364e <atan+0x3e>
 801389e:	a51c      	add	r5, pc, #112	@ (adr r5, 8013910 <atan+0x300>)
 80138a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80138a4:	e6d3      	b.n	801364e <atan+0x3e>
 80138a6:	bf00      	nop
 80138a8:	54442d18 	.word	0x54442d18
 80138ac:	3ff921fb 	.word	0x3ff921fb
 80138b0:	8800759c 	.word	0x8800759c
 80138b4:	7e37e43c 	.word	0x7e37e43c
 80138b8:	e322da11 	.word	0xe322da11
 80138bc:	3f90ad3a 	.word	0x3f90ad3a
 80138c0:	24760deb 	.word	0x24760deb
 80138c4:	3fa97b4b 	.word	0x3fa97b4b
 80138c8:	a0d03d51 	.word	0xa0d03d51
 80138cc:	3fb10d66 	.word	0x3fb10d66
 80138d0:	c54c206e 	.word	0xc54c206e
 80138d4:	3fb745cd 	.word	0x3fb745cd
 80138d8:	920083ff 	.word	0x920083ff
 80138dc:	3fc24924 	.word	0x3fc24924
 80138e0:	5555550d 	.word	0x5555550d
 80138e4:	3fd55555 	.word	0x3fd55555
 80138e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80138ec:	bfa2b444 	.word	0xbfa2b444
 80138f0:	52defd9a 	.word	0x52defd9a
 80138f4:	3fadde2d 	.word	0x3fadde2d
 80138f8:	af749a6d 	.word	0xaf749a6d
 80138fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8013900:	fe231671 	.word	0xfe231671
 8013904:	3fbc71c6 	.word	0x3fbc71c6
 8013908:	9998ebc4 	.word	0x9998ebc4
 801390c:	3fc99999 	.word	0x3fc99999
 8013910:	54442d18 	.word	0x54442d18
 8013914:	bff921fb 	.word	0xbff921fb
 8013918:	440fffff 	.word	0x440fffff
 801391c:	7ff00000 	.word	0x7ff00000
 8013920:	3fdbffff 	.word	0x3fdbffff
 8013924:	3ff00000 	.word	0x3ff00000
 8013928:	3ff2ffff 	.word	0x3ff2ffff
 801392c:	40038000 	.word	0x40038000
 8013930:	3ff80000 	.word	0x3ff80000
 8013934:	bff00000 	.word	0xbff00000
 8013938:	080150d8 	.word	0x080150d8
 801393c:	080150f8 	.word	0x080150f8

08013940 <fabs>:
 8013940:	ec51 0b10 	vmov	r0, r1, d0
 8013944:	4602      	mov	r2, r0
 8013946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801394a:	ec43 2b10 	vmov	d0, r2, r3
 801394e:	4770      	bx	lr

08013950 <scalbn>:
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	ec55 4b10 	vmov	r4, r5, d0
 8013956:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801395a:	4606      	mov	r6, r0
 801395c:	462b      	mov	r3, r5
 801395e:	b991      	cbnz	r1, 8013986 <scalbn+0x36>
 8013960:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013964:	4323      	orrs	r3, r4
 8013966:	d03d      	beq.n	80139e4 <scalbn+0x94>
 8013968:	4b35      	ldr	r3, [pc, #212]	@ (8013a40 <scalbn+0xf0>)
 801396a:	4620      	mov	r0, r4
 801396c:	4629      	mov	r1, r5
 801396e:	2200      	movs	r2, #0
 8013970:	f7ec fe56 	bl	8000620 <__aeabi_dmul>
 8013974:	4b33      	ldr	r3, [pc, #204]	@ (8013a44 <scalbn+0xf4>)
 8013976:	4604      	mov	r4, r0
 8013978:	460d      	mov	r5, r1
 801397a:	429e      	cmp	r6, r3
 801397c:	da0f      	bge.n	801399e <scalbn+0x4e>
 801397e:	a328      	add	r3, pc, #160	@ (adr r3, 8013a20 <scalbn+0xd0>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	e01e      	b.n	80139c4 <scalbn+0x74>
 8013986:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801398a:	4291      	cmp	r1, r2
 801398c:	d10b      	bne.n	80139a6 <scalbn+0x56>
 801398e:	4622      	mov	r2, r4
 8013990:	4620      	mov	r0, r4
 8013992:	4629      	mov	r1, r5
 8013994:	f7ec fc8e 	bl	80002b4 <__adddf3>
 8013998:	4604      	mov	r4, r0
 801399a:	460d      	mov	r5, r1
 801399c:	e022      	b.n	80139e4 <scalbn+0x94>
 801399e:	460b      	mov	r3, r1
 80139a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80139a4:	3936      	subs	r1, #54	@ 0x36
 80139a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80139aa:	4296      	cmp	r6, r2
 80139ac:	dd0d      	ble.n	80139ca <scalbn+0x7a>
 80139ae:	2d00      	cmp	r5, #0
 80139b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013a28 <scalbn+0xd8>)
 80139b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139b6:	da02      	bge.n	80139be <scalbn+0x6e>
 80139b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013a30 <scalbn+0xe0>)
 80139ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139be:	a31a      	add	r3, pc, #104	@ (adr r3, 8013a28 <scalbn+0xd8>)
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	f7ec fe2c 	bl	8000620 <__aeabi_dmul>
 80139c8:	e7e6      	b.n	8013998 <scalbn+0x48>
 80139ca:	1872      	adds	r2, r6, r1
 80139cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80139d0:	428a      	cmp	r2, r1
 80139d2:	dcec      	bgt.n	80139ae <scalbn+0x5e>
 80139d4:	2a00      	cmp	r2, #0
 80139d6:	dd08      	ble.n	80139ea <scalbn+0x9a>
 80139d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80139dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80139e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80139e4:	ec45 4b10 	vmov	d0, r4, r5
 80139e8:	bd70      	pop	{r4, r5, r6, pc}
 80139ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80139ee:	da08      	bge.n	8013a02 <scalbn+0xb2>
 80139f0:	2d00      	cmp	r5, #0
 80139f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8013a20 <scalbn+0xd0>)
 80139f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139f8:	dac1      	bge.n	801397e <scalbn+0x2e>
 80139fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8013a38 <scalbn+0xe8>)
 80139fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a00:	e7bd      	b.n	801397e <scalbn+0x2e>
 8013a02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a06:	3236      	adds	r2, #54	@ 0x36
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013a0e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a12:	2200      	movs	r2, #0
 8013a14:	4b0c      	ldr	r3, [pc, #48]	@ (8013a48 <scalbn+0xf8>)
 8013a16:	4629      	mov	r1, r5
 8013a18:	e7d4      	b.n	80139c4 <scalbn+0x74>
 8013a1a:	bf00      	nop
 8013a1c:	f3af 8000 	nop.w
 8013a20:	c2f8f359 	.word	0xc2f8f359
 8013a24:	01a56e1f 	.word	0x01a56e1f
 8013a28:	8800759c 	.word	0x8800759c
 8013a2c:	7e37e43c 	.word	0x7e37e43c
 8013a30:	8800759c 	.word	0x8800759c
 8013a34:	fe37e43c 	.word	0xfe37e43c
 8013a38:	c2f8f359 	.word	0xc2f8f359
 8013a3c:	81a56e1f 	.word	0x81a56e1f
 8013a40:	43500000 	.word	0x43500000
 8013a44:	ffff3cb0 	.word	0xffff3cb0
 8013a48:	3c900000 	.word	0x3c900000

08013a4c <with_errno>:
 8013a4c:	b510      	push	{r4, lr}
 8013a4e:	ed2d 8b02 	vpush	{d8}
 8013a52:	eeb0 8a40 	vmov.f32	s16, s0
 8013a56:	eef0 8a60 	vmov.f32	s17, s1
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	f7fa fefc 	bl	800e858 <__errno>
 8013a60:	6004      	str	r4, [r0, #0]
 8013a62:	eeb0 0a48 	vmov.f32	s0, s16
 8013a66:	eef0 0a68 	vmov.f32	s1, s17
 8013a6a:	ecbd 8b02 	vpop	{d8}
 8013a6e:	bd10      	pop	{r4, pc}

08013a70 <xflow>:
 8013a70:	4603      	mov	r3, r0
 8013a72:	b507      	push	{r0, r1, r2, lr}
 8013a74:	ec51 0b10 	vmov	r0, r1, d0
 8013a78:	b183      	cbz	r3, 8013a9c <xflow+0x2c>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a80:	e9cd 2300 	strd	r2, r3, [sp]
 8013a84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a88:	f7ec fdca 	bl	8000620 <__aeabi_dmul>
 8013a8c:	ec41 0b10 	vmov	d0, r0, r1
 8013a90:	2022      	movs	r0, #34	@ 0x22
 8013a92:	b003      	add	sp, #12
 8013a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a98:	f7ff bfd8 	b.w	8013a4c <with_errno>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	e7ee      	b.n	8013a80 <xflow+0x10>
 8013aa2:	0000      	movs	r0, r0
 8013aa4:	0000      	movs	r0, r0
	...

08013aa8 <__math_uflow>:
 8013aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013ab0 <__math_uflow+0x8>
 8013aac:	f7ff bfe0 	b.w	8013a70 <xflow>
 8013ab0:	00000000 	.word	0x00000000
 8013ab4:	10000000 	.word	0x10000000

08013ab8 <__math_oflow>:
 8013ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013ac0 <__math_oflow+0x8>
 8013abc:	f7ff bfd8 	b.w	8013a70 <xflow>
 8013ac0:	00000000 	.word	0x00000000
 8013ac4:	70000000 	.word	0x70000000

08013ac8 <__kernel_rem_pio2>:
 8013ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013acc:	ed2d 8b02 	vpush	{d8}
 8013ad0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013ad4:	f112 0f14 	cmn.w	r2, #20
 8013ad8:	f04f 0500 	mov.w	r5, #0
 8013adc:	9306      	str	r3, [sp, #24]
 8013ade:	bfa8      	it	ge
 8013ae0:	1ed4      	subge	r4, r2, #3
 8013ae2:	4bbd      	ldr	r3, [pc, #756]	@ (8013dd8 <__kernel_rem_pio2+0x310>)
 8013ae4:	bfb8      	it	lt
 8013ae6:	2400      	movlt	r4, #0
 8013ae8:	9104      	str	r1, [sp, #16]
 8013aea:	ae20      	add	r6, sp, #128	@ 0x80
 8013aec:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013aee:	9008      	str	r0, [sp, #32]
 8013af0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	9b06      	ldr	r3, [sp, #24]
 8013af8:	f103 33ff 	add.w	r3, r3, #4294967295
 8013afc:	9305      	str	r3, [sp, #20]
 8013afe:	bfa4      	itt	ge
 8013b00:	2318      	movge	r3, #24
 8013b02:	fb94 f4f3 	sdivge	r4, r4, r3
 8013b06:	f06f 0317 	mvn.w	r3, #23
 8013b0a:	fb04 3303 	mla	r3, r4, r3, r3
 8013b0e:	eb03 0b02 	add.w	fp, r3, r2
 8013b12:	9b00      	ldr	r3, [sp, #0]
 8013b14:	9a05      	ldr	r2, [sp, #20]
 8013b16:	eb03 0802 	add.w	r8, r3, r2
 8013b1a:	1aa7      	subs	r7, r4, r2
 8013b1c:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013b1e:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8013dc8 <__kernel_rem_pio2+0x300>
 8013b22:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013b26:	4545      	cmp	r5, r8
 8013b28:	dd13      	ble.n	8013b52 <__kernel_rem_pio2+0x8a>
 8013b2a:	aa20      	add	r2, sp, #128	@ 0x80
 8013b2c:	9b06      	ldr	r3, [sp, #24]
 8013b2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013b32:	f04f 0800 	mov.w	r8, #0
 8013b36:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013b3a:	9b00      	ldr	r3, [sp, #0]
 8013b3c:	4598      	cmp	r8, r3
 8013b3e:	dc30      	bgt.n	8013ba2 <__kernel_rem_pio2+0xda>
 8013b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b44:	462f      	mov	r7, r5
 8013b46:	2600      	movs	r6, #0
 8013b48:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013dc8 <__kernel_rem_pio2+0x300>
 8013b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b50:	e01b      	b.n	8013b8a <__kernel_rem_pio2+0xc2>
 8013b52:	42ef      	cmn	r7, r5
 8013b54:	d407      	bmi.n	8013b66 <__kernel_rem_pio2+0x9e>
 8013b56:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013b5a:	f7ec fcf7 	bl	800054c <__aeabi_i2d>
 8013b5e:	3501      	adds	r5, #1
 8013b60:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013b64:	e7df      	b.n	8013b26 <__kernel_rem_pio2+0x5e>
 8013b66:	ec51 0b18 	vmov	r0, r1, d8
 8013b6a:	e7f8      	b.n	8013b5e <__kernel_rem_pio2+0x96>
 8013b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b70:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013b74:	3601      	adds	r6, #1
 8013b76:	f7ec fd53 	bl	8000620 <__aeabi_dmul>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b82:	f7ec fb97 	bl	80002b4 <__adddf3>
 8013b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b8a:	9b05      	ldr	r3, [sp, #20]
 8013b8c:	3f08      	subs	r7, #8
 8013b8e:	429e      	cmp	r6, r3
 8013b90:	ddec      	ble.n	8013b6c <__kernel_rem_pio2+0xa4>
 8013b92:	f108 0801 	add.w	r8, r8, #1
 8013b96:	3508      	adds	r5, #8
 8013b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b9c:	ecaa 7b02 	vstmia	sl!, {d7}
 8013ba0:	e7cb      	b.n	8013b3a <__kernel_rem_pio2+0x72>
 8013ba2:	9b00      	ldr	r3, [sp, #0]
 8013ba4:	aa0c      	add	r2, sp, #48	@ 0x30
 8013ba6:	f8dd 8000 	ldr.w	r8, [sp]
 8013baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bb0:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013bb2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bb8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013bbc:	ac0c      	add	r4, sp, #48	@ 0x30
 8013bbe:	46c2      	mov	sl, r8
 8013bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bc2:	ab98      	add	r3, sp, #608	@ 0x260
 8013bc4:	46a1      	mov	r9, r4
 8013bc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013bca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013bce:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013bd0:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bd8:	f1ba 0f00 	cmp.w	sl, #0
 8013bdc:	f1a5 0508 	sub.w	r5, r5, #8
 8013be0:	dc77      	bgt.n	8013cd2 <__kernel_rem_pio2+0x20a>
 8013be2:	4658      	mov	r0, fp
 8013be4:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013be8:	f7ff feb2 	bl	8013950 <scalbn>
 8013bec:	2200      	movs	r2, #0
 8013bee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013bf2:	ec57 6b10 	vmov	r6, r7, d0
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	4639      	mov	r1, r7
 8013bfa:	f7ec fd11 	bl	8000620 <__aeabi_dmul>
 8013bfe:	ec41 0b10 	vmov	d0, r0, r1
 8013c02:	f000 fab9 	bl	8014178 <floor>
 8013c06:	2200      	movs	r2, #0
 8013c08:	4b74      	ldr	r3, [pc, #464]	@ (8013ddc <__kernel_rem_pio2+0x314>)
 8013c0a:	ec51 0b10 	vmov	r0, r1, d0
 8013c0e:	f7ec fd07 	bl	8000620 <__aeabi_dmul>
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	4630      	mov	r0, r6
 8013c18:	4639      	mov	r1, r7
 8013c1a:	f7ec fb49 	bl	80002b0 <__aeabi_dsub>
 8013c1e:	460f      	mov	r7, r1
 8013c20:	4606      	mov	r6, r0
 8013c22:	f7ec ffad 	bl	8000b80 <__aeabi_d2iz>
 8013c26:	9002      	str	r0, [sp, #8]
 8013c28:	f7ec fc90 	bl	800054c <__aeabi_i2d>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	460b      	mov	r3, r1
 8013c30:	4630      	mov	r0, r6
 8013c32:	4639      	mov	r1, r7
 8013c34:	f7ec fb3c 	bl	80002b0 <__aeabi_dsub>
 8013c38:	f1bb 0f00 	cmp.w	fp, #0
 8013c3c:	4606      	mov	r6, r0
 8013c3e:	460f      	mov	r7, r1
 8013c40:	dd6c      	ble.n	8013d1c <__kernel_rem_pio2+0x254>
 8013c42:	f108 31ff 	add.w	r1, r8, #4294967295
 8013c46:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c48:	f1cb 0018 	rsb	r0, fp, #24
 8013c4c:	9d02      	ldr	r5, [sp, #8]
 8013c4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c52:	fa43 f200 	asr.w	r2, r3, r0
 8013c56:	4415      	add	r5, r2
 8013c58:	4082      	lsls	r2, r0
 8013c5a:	1a9b      	subs	r3, r3, r2
 8013c5c:	aa0c      	add	r2, sp, #48	@ 0x30
 8013c5e:	9502      	str	r5, [sp, #8]
 8013c60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013c64:	f1cb 0217 	rsb	r2, fp, #23
 8013c68:	fa43 f902 	asr.w	r9, r3, r2
 8013c6c:	f1b9 0f00 	cmp.w	r9, #0
 8013c70:	dd64      	ble.n	8013d3c <__kernel_rem_pio2+0x274>
 8013c72:	9b02      	ldr	r3, [sp, #8]
 8013c74:	2200      	movs	r2, #0
 8013c76:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	4615      	mov	r5, r2
 8013c7e:	9302      	str	r3, [sp, #8]
 8013c80:	4590      	cmp	r8, r2
 8013c82:	f300 80b7 	bgt.w	8013df4 <__kernel_rem_pio2+0x32c>
 8013c86:	f1bb 0f00 	cmp.w	fp, #0
 8013c8a:	dd07      	ble.n	8013c9c <__kernel_rem_pio2+0x1d4>
 8013c8c:	f1bb 0f01 	cmp.w	fp, #1
 8013c90:	f000 80be 	beq.w	8013e10 <__kernel_rem_pio2+0x348>
 8013c94:	f1bb 0f02 	cmp.w	fp, #2
 8013c98:	f000 80c5 	beq.w	8013e26 <__kernel_rem_pio2+0x35e>
 8013c9c:	f1b9 0f02 	cmp.w	r9, #2
 8013ca0:	d14c      	bne.n	8013d3c <__kernel_rem_pio2+0x274>
 8013ca2:	4632      	mov	r2, r6
 8013ca4:	463b      	mov	r3, r7
 8013ca6:	2000      	movs	r0, #0
 8013ca8:	494d      	ldr	r1, [pc, #308]	@ (8013de0 <__kernel_rem_pio2+0x318>)
 8013caa:	f7ec fb01 	bl	80002b0 <__aeabi_dsub>
 8013cae:	4606      	mov	r6, r0
 8013cb0:	460f      	mov	r7, r1
 8013cb2:	2d00      	cmp	r5, #0
 8013cb4:	d042      	beq.n	8013d3c <__kernel_rem_pio2+0x274>
 8013cb6:	4658      	mov	r0, fp
 8013cb8:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8013dd0 <__kernel_rem_pio2+0x308>
 8013cbc:	f7ff fe48 	bl	8013950 <scalbn>
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	4639      	mov	r1, r7
 8013cc4:	ec53 2b10 	vmov	r2, r3, d0
 8013cc8:	f7ec faf2 	bl	80002b0 <__aeabi_dsub>
 8013ccc:	4606      	mov	r6, r0
 8013cce:	460f      	mov	r7, r1
 8013cd0:	e034      	b.n	8013d3c <__kernel_rem_pio2+0x274>
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	4b43      	ldr	r3, [pc, #268]	@ (8013de4 <__kernel_rem_pio2+0x31c>)
 8013cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cde:	f7ec fc9f 	bl	8000620 <__aeabi_dmul>
 8013ce2:	f7ec ff4d 	bl	8000b80 <__aeabi_d2iz>
 8013ce6:	f7ec fc31 	bl	800054c <__aeabi_i2d>
 8013cea:	2200      	movs	r2, #0
 8013cec:	4b3e      	ldr	r3, [pc, #248]	@ (8013de8 <__kernel_rem_pio2+0x320>)
 8013cee:	4606      	mov	r6, r0
 8013cf0:	460f      	mov	r7, r1
 8013cf2:	f7ec fc95 	bl	8000620 <__aeabi_dmul>
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cfe:	f7ec fad7 	bl	80002b0 <__aeabi_dsub>
 8013d02:	f7ec ff3d 	bl	8000b80 <__aeabi_d2iz>
 8013d06:	4639      	mov	r1, r7
 8013d08:	f849 0b04 	str.w	r0, [r9], #4
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d12:	f7ec facf 	bl	80002b4 <__adddf3>
 8013d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d1a:	e75d      	b.n	8013bd8 <__kernel_rem_pio2+0x110>
 8013d1c:	d107      	bne.n	8013d2e <__kernel_rem_pio2+0x266>
 8013d1e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d22:	aa0c      	add	r2, sp, #48	@ 0x30
 8013d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d28:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013d2c:	e79e      	b.n	8013c6c <__kernel_rem_pio2+0x1a4>
 8013d2e:	2200      	movs	r2, #0
 8013d30:	4b2e      	ldr	r3, [pc, #184]	@ (8013dec <__kernel_rem_pio2+0x324>)
 8013d32:	f7ec fefb 	bl	8000b2c <__aeabi_dcmpge>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d143      	bne.n	8013dc2 <__kernel_rem_pio2+0x2fa>
 8013d3a:	4681      	mov	r9, r0
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	2300      	movs	r3, #0
 8013d40:	4630      	mov	r0, r6
 8013d42:	4639      	mov	r1, r7
 8013d44:	f7ec fed4 	bl	8000af0 <__aeabi_dcmpeq>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	f000 80be 	beq.w	8013eca <__kernel_rem_pio2+0x402>
 8013d4e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d52:	2200      	movs	r2, #0
 8013d54:	9900      	ldr	r1, [sp, #0]
 8013d56:	428b      	cmp	r3, r1
 8013d58:	da6d      	bge.n	8013e36 <__kernel_rem_pio2+0x36e>
 8013d5a:	2a00      	cmp	r2, #0
 8013d5c:	f000 8088 	beq.w	8013e70 <__kernel_rem_pio2+0x3a8>
 8013d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d64:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d66:	f1ab 0b18 	sub.w	fp, fp, #24
 8013d6a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0f6      	beq.n	8013d60 <__kernel_rem_pio2+0x298>
 8013d72:	4658      	mov	r0, fp
 8013d74:	4646      	mov	r6, r8
 8013d76:	f04f 0a00 	mov.w	sl, #0
 8013d7a:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8013de4 <__kernel_rem_pio2+0x31c>
 8013d7e:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8013dd0 <__kernel_rem_pio2+0x308>
 8013d82:	f7ff fde5 	bl	8013950 <scalbn>
 8013d86:	f108 0301 	add.w	r3, r8, #1
 8013d8a:	00da      	lsls	r2, r3, #3
 8013d8c:	9205      	str	r2, [sp, #20]
 8013d8e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013d90:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013d94:	ec55 4b10 	vmov	r4, r5, d0
 8013d98:	2e00      	cmp	r6, #0
 8013d9a:	f280 80ce 	bge.w	8013f3a <__kernel_rem_pio2+0x472>
 8013d9e:	4644      	mov	r4, r8
 8013da0:	2c00      	cmp	r4, #0
 8013da2:	f2c0 80fc 	blt.w	8013f9e <__kernel_rem_pio2+0x4d6>
 8013da6:	4b12      	ldr	r3, [pc, #72]	@ (8013df0 <__kernel_rem_pio2+0x328>)
 8013da8:	f04f 0a00 	mov.w	sl, #0
 8013dac:	f04f 0b00 	mov.w	fp, #0
 8013db0:	2600      	movs	r6, #0
 8013db2:	461f      	mov	r7, r3
 8013db4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013db6:	eba8 0504 	sub.w	r5, r8, r4
 8013dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013dbe:	9306      	str	r3, [sp, #24]
 8013dc0:	e0e1      	b.n	8013f86 <__kernel_rem_pio2+0x4be>
 8013dc2:	f04f 0902 	mov.w	r9, #2
 8013dc6:	e754      	b.n	8013c72 <__kernel_rem_pio2+0x1aa>
	...
 8013dd4:	3ff00000 	.word	0x3ff00000
 8013dd8:	08015158 	.word	0x08015158
 8013ddc:	40200000 	.word	0x40200000
 8013de0:	3ff00000 	.word	0x3ff00000
 8013de4:	3e700000 	.word	0x3e700000
 8013de8:	41700000 	.word	0x41700000
 8013dec:	3fe00000 	.word	0x3fe00000
 8013df0:	08015118 	.word	0x08015118
 8013df4:	f854 3b04 	ldr.w	r3, [r4], #4
 8013df8:	b945      	cbnz	r5, 8013e0c <__kernel_rem_pio2+0x344>
 8013dfa:	b123      	cbz	r3, 8013e06 <__kernel_rem_pio2+0x33e>
 8013dfc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013e00:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e04:	2301      	movs	r3, #1
 8013e06:	3201      	adds	r2, #1
 8013e08:	461d      	mov	r5, r3
 8013e0a:	e739      	b.n	8013c80 <__kernel_rem_pio2+0x1b8>
 8013e0c:	1acb      	subs	r3, r1, r3
 8013e0e:	e7f7      	b.n	8013e00 <__kernel_rem_pio2+0x338>
 8013e10:	f108 32ff 	add.w	r2, r8, #4294967295
 8013e14:	ab0c      	add	r3, sp, #48	@ 0x30
 8013e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013e1e:	a90c      	add	r1, sp, #48	@ 0x30
 8013e20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013e24:	e73a      	b.n	8013c9c <__kernel_rem_pio2+0x1d4>
 8013e26:	f108 32ff 	add.w	r2, r8, #4294967295
 8013e2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013e34:	e7f3      	b.n	8013e1e <__kernel_rem_pio2+0x356>
 8013e36:	a90c      	add	r1, sp, #48	@ 0x30
 8013e38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	430a      	orrs	r2, r1
 8013e40:	e788      	b.n	8013d54 <__kernel_rem_pio2+0x28c>
 8013e42:	3401      	adds	r4, #1
 8013e44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013e48:	2a00      	cmp	r2, #0
 8013e4a:	d0fa      	beq.n	8013e42 <__kernel_rem_pio2+0x37a>
 8013e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e4e:	aa20      	add	r2, sp, #128	@ 0x80
 8013e50:	f108 0701 	add.w	r7, r8, #1
 8013e54:	4444      	add	r4, r8
 8013e56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013e5a:	eb0d 0503 	add.w	r5, sp, r3
 8013e5e:	9b06      	ldr	r3, [sp, #24]
 8013e60:	4443      	add	r3, r8
 8013e62:	3d98      	subs	r5, #152	@ 0x98
 8013e64:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013e68:	42bc      	cmp	r4, r7
 8013e6a:	da04      	bge.n	8013e76 <__kernel_rem_pio2+0x3ae>
 8013e6c:	46a0      	mov	r8, r4
 8013e6e:	e6a3      	b.n	8013bb8 <__kernel_rem_pio2+0xf0>
 8013e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e72:	2401      	movs	r4, #1
 8013e74:	e7e6      	b.n	8013e44 <__kernel_rem_pio2+0x37c>
 8013e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e78:	f04f 0800 	mov.w	r8, #0
 8013e7c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013e80:	f7ec fb64 	bl	800054c <__aeabi_i2d>
 8013e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e88:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8014148 <__kernel_rem_pio2+0x680>
 8013e8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013e90:	46b2      	mov	sl, r6
 8013e92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e96:	9b05      	ldr	r3, [sp, #20]
 8013e98:	4598      	cmp	r8, r3
 8013e9a:	dd05      	ble.n	8013ea8 <__kernel_rem_pio2+0x3e0>
 8013e9c:	3701      	adds	r7, #1
 8013e9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ea2:	eca5 7b02 	vstmia	r5!, {d7}
 8013ea6:	e7df      	b.n	8013e68 <__kernel_rem_pio2+0x3a0>
 8013ea8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013eac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013eb0:	f7ec fbb6 	bl	8000620 <__aeabi_dmul>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	f108 0801 	add.w	r8, r8, #1
 8013ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ec0:	f7ec f9f8 	bl	80002b4 <__adddf3>
 8013ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ec8:	e7e5      	b.n	8013e96 <__kernel_rem_pio2+0x3ce>
 8013eca:	f1cb 0000 	rsb	r0, fp, #0
 8013ece:	ec47 6b10 	vmov	d0, r6, r7
 8013ed2:	f7ff fd3d 	bl	8013950 <scalbn>
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	4b9d      	ldr	r3, [pc, #628]	@ (8014150 <__kernel_rem_pio2+0x688>)
 8013eda:	ec55 4b10 	vmov	r4, r5, d0
 8013ede:	4620      	mov	r0, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	f7ec fe23 	bl	8000b2c <__aeabi_dcmpge>
 8013ee6:	b300      	cbz	r0, 8013f2a <__kernel_rem_pio2+0x462>
 8013ee8:	2200      	movs	r2, #0
 8013eea:	4b9a      	ldr	r3, [pc, #616]	@ (8014154 <__kernel_rem_pio2+0x68c>)
 8013eec:	4620      	mov	r0, r4
 8013eee:	4629      	mov	r1, r5
 8013ef0:	f7ec fb96 	bl	8000620 <__aeabi_dmul>
 8013ef4:	f10b 0b18 	add.w	fp, fp, #24
 8013ef8:	f7ec fe42 	bl	8000b80 <__aeabi_d2iz>
 8013efc:	4606      	mov	r6, r0
 8013efe:	f7ec fb25 	bl	800054c <__aeabi_i2d>
 8013f02:	2200      	movs	r2, #0
 8013f04:	4b92      	ldr	r3, [pc, #584]	@ (8014150 <__kernel_rem_pio2+0x688>)
 8013f06:	f7ec fb8b 	bl	8000620 <__aeabi_dmul>
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	4629      	mov	r1, r5
 8013f10:	4620      	mov	r0, r4
 8013f12:	f7ec f9cd 	bl	80002b0 <__aeabi_dsub>
 8013f16:	f7ec fe33 	bl	8000b80 <__aeabi_d2iz>
 8013f1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013f20:	f108 0801 	add.w	r8, r8, #1
 8013f24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013f28:	e723      	b.n	8013d72 <__kernel_rem_pio2+0x2aa>
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	f7ec fe27 	bl	8000b80 <__aeabi_d2iz>
 8013f32:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013f38:	e71b      	b.n	8013d72 <__kernel_rem_pio2+0x2aa>
 8013f3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013f40:	3e01      	subs	r6, #1
 8013f42:	f7ec fb03 	bl	800054c <__aeabi_i2d>
 8013f46:	4622      	mov	r2, r4
 8013f48:	462b      	mov	r3, r5
 8013f4a:	f7ec fb69 	bl	8000620 <__aeabi_dmul>
 8013f4e:	4652      	mov	r2, sl
 8013f50:	465b      	mov	r3, fp
 8013f52:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013f56:	4620      	mov	r0, r4
 8013f58:	4629      	mov	r1, r5
 8013f5a:	f7ec fb61 	bl	8000620 <__aeabi_dmul>
 8013f5e:	4604      	mov	r4, r0
 8013f60:	460d      	mov	r5, r1
 8013f62:	e719      	b.n	8013d98 <__kernel_rem_pio2+0x2d0>
 8013f64:	9906      	ldr	r1, [sp, #24]
 8013f66:	3601      	adds	r6, #1
 8013f68:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013f6c:	9106      	str	r1, [sp, #24]
 8013f6e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013f72:	f7ec fb55 	bl	8000620 <__aeabi_dmul>
 8013f76:	4602      	mov	r2, r0
 8013f78:	460b      	mov	r3, r1
 8013f7a:	4650      	mov	r0, sl
 8013f7c:	4659      	mov	r1, fp
 8013f7e:	f7ec f999 	bl	80002b4 <__adddf3>
 8013f82:	4682      	mov	sl, r0
 8013f84:	468b      	mov	fp, r1
 8013f86:	9b00      	ldr	r3, [sp, #0]
 8013f88:	429e      	cmp	r6, r3
 8013f8a:	dc01      	bgt.n	8013f90 <__kernel_rem_pio2+0x4c8>
 8013f8c:	42b5      	cmp	r5, r6
 8013f8e:	dae9      	bge.n	8013f64 <__kernel_rem_pio2+0x49c>
 8013f90:	ab48      	add	r3, sp, #288	@ 0x120
 8013f92:	3c01      	subs	r4, #1
 8013f94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013f98:	e9c5 ab00 	strd	sl, fp, [r5]
 8013f9c:	e700      	b.n	8013da0 <__kernel_rem_pio2+0x2d8>
 8013f9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013fa0:	2b02      	cmp	r3, #2
 8013fa2:	dc0b      	bgt.n	8013fbc <__kernel_rem_pio2+0x4f4>
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	dc39      	bgt.n	801401c <__kernel_rem_pio2+0x554>
 8013fa8:	d05d      	beq.n	8014066 <__kernel_rem_pio2+0x59e>
 8013faa:	9b02      	ldr	r3, [sp, #8]
 8013fac:	f003 0007 	and.w	r0, r3, #7
 8013fb0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013fb4:	ecbd 8b02 	vpop	{d8}
 8013fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fbc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013fbe:	2b03      	cmp	r3, #3
 8013fc0:	d1f3      	bne.n	8013faa <__kernel_rem_pio2+0x4e2>
 8013fc2:	9b05      	ldr	r3, [sp, #20]
 8013fc4:	46c2      	mov	sl, r8
 8013fc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013fca:	eb0d 0403 	add.w	r4, sp, r3
 8013fce:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013fd2:	4625      	mov	r5, r4
 8013fd4:	f1ba 0f00 	cmp.w	sl, #0
 8013fd8:	f1a5 0508 	sub.w	r5, r5, #8
 8013fdc:	dc6b      	bgt.n	80140b6 <__kernel_rem_pio2+0x5ee>
 8013fde:	4645      	mov	r5, r8
 8013fe0:	2d01      	cmp	r5, #1
 8013fe2:	f1a4 0408 	sub.w	r4, r4, #8
 8013fe6:	f300 8087 	bgt.w	80140f8 <__kernel_rem_pio2+0x630>
 8013fea:	9c05      	ldr	r4, [sp, #20]
 8013fec:	ab48      	add	r3, sp, #288	@ 0x120
 8013fee:	2000      	movs	r0, #0
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	441c      	add	r4, r3
 8013ff4:	f1b8 0f01 	cmp.w	r8, #1
 8013ff8:	f300 809c 	bgt.w	8014134 <__kernel_rem_pio2+0x66c>
 8013ffc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014000:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8014004:	f1b9 0f00 	cmp.w	r9, #0
 8014008:	f040 80a6 	bne.w	8014158 <__kernel_rem_pio2+0x690>
 801400c:	9b04      	ldr	r3, [sp, #16]
 801400e:	e9c3 7800 	strd	r7, r8, [r3]
 8014012:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014016:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801401a:	e7c6      	b.n	8013faa <__kernel_rem_pio2+0x4e2>
 801401c:	9d05      	ldr	r5, [sp, #20]
 801401e:	ab48      	add	r3, sp, #288	@ 0x120
 8014020:	4644      	mov	r4, r8
 8014022:	2000      	movs	r0, #0
 8014024:	441d      	add	r5, r3
 8014026:	2100      	movs	r1, #0
 8014028:	2c00      	cmp	r4, #0
 801402a:	da35      	bge.n	8014098 <__kernel_rem_pio2+0x5d0>
 801402c:	f1b9 0f00 	cmp.w	r9, #0
 8014030:	d038      	beq.n	80140a4 <__kernel_rem_pio2+0x5dc>
 8014032:	4602      	mov	r2, r0
 8014034:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014038:	9c04      	ldr	r4, [sp, #16]
 801403a:	ad4a      	add	r5, sp, #296	@ 0x128
 801403c:	e9c4 2300 	strd	r2, r3, [r4]
 8014040:	2401      	movs	r4, #1
 8014042:	4602      	mov	r2, r0
 8014044:	460b      	mov	r3, r1
 8014046:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801404a:	f7ec f931 	bl	80002b0 <__aeabi_dsub>
 801404e:	45a0      	cmp	r8, r4
 8014050:	da2b      	bge.n	80140aa <__kernel_rem_pio2+0x5e2>
 8014052:	f1b9 0f00 	cmp.w	r9, #0
 8014056:	d002      	beq.n	801405e <__kernel_rem_pio2+0x596>
 8014058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801405c:	4619      	mov	r1, r3
 801405e:	9b04      	ldr	r3, [sp, #16]
 8014060:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014064:	e7a1      	b.n	8013faa <__kernel_rem_pio2+0x4e2>
 8014066:	9c05      	ldr	r4, [sp, #20]
 8014068:	ab48      	add	r3, sp, #288	@ 0x120
 801406a:	2000      	movs	r0, #0
 801406c:	2100      	movs	r1, #0
 801406e:	441c      	add	r4, r3
 8014070:	f1b8 0f00 	cmp.w	r8, #0
 8014074:	da09      	bge.n	801408a <__kernel_rem_pio2+0x5c2>
 8014076:	f1b9 0f00 	cmp.w	r9, #0
 801407a:	d002      	beq.n	8014082 <__kernel_rem_pio2+0x5ba>
 801407c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014080:	4619      	mov	r1, r3
 8014082:	9b04      	ldr	r3, [sp, #16]
 8014084:	e9c3 0100 	strd	r0, r1, [r3]
 8014088:	e78f      	b.n	8013faa <__kernel_rem_pio2+0x4e2>
 801408a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801408e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014092:	f7ec f90f 	bl	80002b4 <__adddf3>
 8014096:	e7eb      	b.n	8014070 <__kernel_rem_pio2+0x5a8>
 8014098:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801409c:	3c01      	subs	r4, #1
 801409e:	f7ec f909 	bl	80002b4 <__adddf3>
 80140a2:	e7c1      	b.n	8014028 <__kernel_rem_pio2+0x560>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	e7c6      	b.n	8014038 <__kernel_rem_pio2+0x570>
 80140aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80140ae:	3401      	adds	r4, #1
 80140b0:	f7ec f900 	bl	80002b4 <__adddf3>
 80140b4:	e7cb      	b.n	801404e <__kernel_rem_pio2+0x586>
 80140b6:	ed95 7b00 	vldr	d7, [r5]
 80140ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140be:	ed8d 7b00 	vstr	d7, [sp]
 80140c2:	ed95 7b02 	vldr	d7, [r5, #8]
 80140c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140ca:	ec53 2b17 	vmov	r2, r3, d7
 80140ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140d2:	f7ec f8ef 	bl	80002b4 <__adddf3>
 80140d6:	4602      	mov	r2, r0
 80140d8:	460b      	mov	r3, r1
 80140da:	4606      	mov	r6, r0
 80140dc:	460f      	mov	r7, r1
 80140de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140e2:	f7ec f8e5 	bl	80002b0 <__aeabi_dsub>
 80140e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140ea:	f7ec f8e3 	bl	80002b4 <__adddf3>
 80140ee:	e9c5 6700 	strd	r6, r7, [r5]
 80140f2:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80140f6:	e76d      	b.n	8013fd4 <__kernel_rem_pio2+0x50c>
 80140f8:	ed94 7b00 	vldr	d7, [r4]
 80140fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014100:	3d01      	subs	r5, #1
 8014102:	4652      	mov	r2, sl
 8014104:	465b      	mov	r3, fp
 8014106:	ec51 0b17 	vmov	r0, r1, d7
 801410a:	ed8d 7b00 	vstr	d7, [sp]
 801410e:	f7ec f8d1 	bl	80002b4 <__adddf3>
 8014112:	4602      	mov	r2, r0
 8014114:	460b      	mov	r3, r1
 8014116:	4606      	mov	r6, r0
 8014118:	460f      	mov	r7, r1
 801411a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801411e:	f7ec f8c7 	bl	80002b0 <__aeabi_dsub>
 8014122:	4652      	mov	r2, sl
 8014124:	465b      	mov	r3, fp
 8014126:	f7ec f8c5 	bl	80002b4 <__adddf3>
 801412a:	e9c4 6700 	strd	r6, r7, [r4]
 801412e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014132:	e755      	b.n	8013fe0 <__kernel_rem_pio2+0x518>
 8014134:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014138:	f108 38ff 	add.w	r8, r8, #4294967295
 801413c:	f7ec f8ba 	bl	80002b4 <__adddf3>
 8014140:	e758      	b.n	8013ff4 <__kernel_rem_pio2+0x52c>
 8014142:	bf00      	nop
 8014144:	f3af 8000 	nop.w
	...
 8014150:	41700000 	.word	0x41700000
 8014154:	3e700000 	.word	0x3e700000
 8014158:	9b04      	ldr	r3, [sp, #16]
 801415a:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801415e:	9a04      	ldr	r2, [sp, #16]
 8014160:	601f      	str	r7, [r3, #0]
 8014162:	605c      	str	r4, [r3, #4]
 8014164:	609d      	str	r5, [r3, #8]
 8014166:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801416a:	6110      	str	r0, [r2, #16]
 801416c:	60d3      	str	r3, [r2, #12]
 801416e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014172:	6153      	str	r3, [r2, #20]
 8014174:	e719      	b.n	8013faa <__kernel_rem_pio2+0x4e2>
 8014176:	bf00      	nop

08014178 <floor>:
 8014178:	ec51 0b10 	vmov	r0, r1, d0
 801417c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014184:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014188:	460c      	mov	r4, r1
 801418a:	4605      	mov	r5, r0
 801418c:	4680      	mov	r8, r0
 801418e:	2e13      	cmp	r6, #19
 8014190:	dc35      	bgt.n	80141fe <floor+0x86>
 8014192:	2e00      	cmp	r6, #0
 8014194:	da17      	bge.n	80141c6 <floor+0x4e>
 8014196:	a334      	add	r3, pc, #208	@ (adr r3, 8014268 <floor+0xf0>)
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	f7ec f88a 	bl	80002b4 <__adddf3>
 80141a0:	2200      	movs	r2, #0
 80141a2:	2300      	movs	r3, #0
 80141a4:	f7ec fccc 	bl	8000b40 <__aeabi_dcmpgt>
 80141a8:	b150      	cbz	r0, 80141c0 <floor+0x48>
 80141aa:	2c00      	cmp	r4, #0
 80141ac:	da56      	bge.n	801425c <floor+0xe4>
 80141ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80141b2:	432c      	orrs	r4, r5
 80141b4:	2500      	movs	r5, #0
 80141b6:	42ac      	cmp	r4, r5
 80141b8:	4c2d      	ldr	r4, [pc, #180]	@ (8014270 <floor+0xf8>)
 80141ba:	bf08      	it	eq
 80141bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80141c0:	4621      	mov	r1, r4
 80141c2:	4628      	mov	r0, r5
 80141c4:	e024      	b.n	8014210 <floor+0x98>
 80141c6:	4f2b      	ldr	r7, [pc, #172]	@ (8014274 <floor+0xfc>)
 80141c8:	4137      	asrs	r7, r6
 80141ca:	ea01 0307 	and.w	r3, r1, r7
 80141ce:	4303      	orrs	r3, r0
 80141d0:	d01e      	beq.n	8014210 <floor+0x98>
 80141d2:	a325      	add	r3, pc, #148	@ (adr r3, 8014268 <floor+0xf0>)
 80141d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d8:	f7ec f86c 	bl	80002b4 <__adddf3>
 80141dc:	2200      	movs	r2, #0
 80141de:	2300      	movs	r3, #0
 80141e0:	f7ec fcae 	bl	8000b40 <__aeabi_dcmpgt>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d0eb      	beq.n	80141c0 <floor+0x48>
 80141e8:	2c00      	cmp	r4, #0
 80141ea:	f04f 0500 	mov.w	r5, #0
 80141ee:	bfbe      	ittt	lt
 80141f0:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80141f4:	4133      	asrlt	r3, r6
 80141f6:	18e4      	addlt	r4, r4, r3
 80141f8:	ea24 0407 	bic.w	r4, r4, r7
 80141fc:	e7e0      	b.n	80141c0 <floor+0x48>
 80141fe:	2e33      	cmp	r6, #51	@ 0x33
 8014200:	dd0a      	ble.n	8014218 <floor+0xa0>
 8014202:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014206:	d103      	bne.n	8014210 <floor+0x98>
 8014208:	4602      	mov	r2, r0
 801420a:	460b      	mov	r3, r1
 801420c:	f7ec f852 	bl	80002b4 <__adddf3>
 8014210:	ec41 0b10 	vmov	d0, r0, r1
 8014214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014218:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801421c:	f04f 37ff 	mov.w	r7, #4294967295
 8014220:	40df      	lsrs	r7, r3
 8014222:	4207      	tst	r7, r0
 8014224:	d0f4      	beq.n	8014210 <floor+0x98>
 8014226:	a310      	add	r3, pc, #64	@ (adr r3, 8014268 <floor+0xf0>)
 8014228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422c:	f7ec f842 	bl	80002b4 <__adddf3>
 8014230:	2200      	movs	r2, #0
 8014232:	2300      	movs	r3, #0
 8014234:	f7ec fc84 	bl	8000b40 <__aeabi_dcmpgt>
 8014238:	2800      	cmp	r0, #0
 801423a:	d0c1      	beq.n	80141c0 <floor+0x48>
 801423c:	2c00      	cmp	r4, #0
 801423e:	da0a      	bge.n	8014256 <floor+0xde>
 8014240:	2e14      	cmp	r6, #20
 8014242:	d101      	bne.n	8014248 <floor+0xd0>
 8014244:	3401      	adds	r4, #1
 8014246:	e006      	b.n	8014256 <floor+0xde>
 8014248:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801424c:	2301      	movs	r3, #1
 801424e:	40b3      	lsls	r3, r6
 8014250:	441d      	add	r5, r3
 8014252:	4545      	cmp	r5, r8
 8014254:	d3f6      	bcc.n	8014244 <floor+0xcc>
 8014256:	ea25 0507 	bic.w	r5, r5, r7
 801425a:	e7b1      	b.n	80141c0 <floor+0x48>
 801425c:	2500      	movs	r5, #0
 801425e:	462c      	mov	r4, r5
 8014260:	e7ae      	b.n	80141c0 <floor+0x48>
 8014262:	bf00      	nop
 8014264:	f3af 8000 	nop.w
 8014268:	8800759c 	.word	0x8800759c
 801426c:	7e37e43c 	.word	0x7e37e43c
 8014270:	bff00000 	.word	0xbff00000
 8014274:	000fffff 	.word	0x000fffff

08014278 <_init>:
 8014278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427a:	bf00      	nop
 801427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801427e:	bc08      	pop	{r3}
 8014280:	469e      	mov	lr, r3
 8014282:	4770      	bx	lr

08014284 <_fini>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	bf00      	nop
 8014288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801428a:	bc08      	pop	{r3}
 801428c:	469e      	mov	lr, r3
 801428e:	4770      	bx	lr
