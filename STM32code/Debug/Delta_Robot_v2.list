
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e634  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800e890  0800e890  0000f890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f000  0800f000  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f000  0800f000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f008  0800f008  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f008  0800f008  00010008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f00c  0800f00c  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800f010  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  200001e4  0800f1f4  000111e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003b3a8  0800f1f4  000113a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200f6  00000000  00000000  0001121a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c95  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000152a  00000000  00000000  00036ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000597a  00000000  00000000  00038002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c06  00000000  00000000  0003d97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126f99  00000000  00000000  00061582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018851b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a44  00000000  00000000  00188560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00190fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001e4 	.word	0x200001e4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800e874 	.word	0x0800e874

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001e8 	.word	0x200001e8
 8000294:	0800e874 	.word	0x0800e874

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <Relay_0_Set+0x14>)
 800103e:	f002 f875 	bl	800312c <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	42020800 	.word	0x42020800

0800104c <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2110      	movs	r1, #16
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <Relay_0_Reset+0x14>)
 8001056:	f002 f869 	bl	800312c <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	42020800 	.word	0x42020800

08001064 <Relay_1_Set>:

void Relay_1_Set(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106e:	4802      	ldr	r0, [pc, #8]	@ (8001078 <Relay_1_Set+0x14>)
 8001070:	f002 f85c 	bl	800312c <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	42020400 	.word	0x42020400

0800107c <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <Relay_1_Reset+0x14>)
 8001088:	f002 f850 	bl	800312c <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	42020400 	.word	0x42020400

08001094 <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0f0      	sub	sp, #448	@ 0x1c0
 8001098:	af00      	add	r7, sp, #0
 800109a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800109e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80010a2:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 80010a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010a8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80010ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <Menu_UART_Start+0x84>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	4611      	mov	r1, r2
 80010b2:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80010b6:	461a      	mov	r2, r3
 80010b8:	f00a f877 	bl	800b1aa <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80010c2:	e013      	b.n	80010ec <Menu_UART_Start+0x58>
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010d2:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	2201      	movs	r2, #1
 80010dc:	6800      	ldr	r0, [r0, #0]
 80010de:	f008 f9a3 	bl	8009428 <HAL_UART_Transmit>
 80010e2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80010e6:	3301      	adds	r3, #1
 80010e8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80010ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010f0:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 80010f4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e1      	bne.n	80010c4 <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 8001100:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001104:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	f000 f807 	bl	800111c <Menu_UART_Update>
}
 800110e:	bf00      	nop
 8001110:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800e890 	.word	0x0800e890

0800111c <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <Menu_UART_Update+0x18>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000

08001138 <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uint8_t *Menu_Main[] = {
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <Menu_UART_Main+0x90>)
 8001142:	f107 0410 	add.w	r4, r7, #16
 8001146:	461d      	mov	r5, r3
 8001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001150:	e884 0003 	stmia.w	r4, {r0, r1}
			"Set a",
			"Set theta1, theta2, theta3",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2206      	movs	r2, #6
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8d7 	bl	8001310 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8001162:	2300      	movs	r3, #0
 8001164:	81bb      	strh	r3, [r7, #12]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001166:	f107 010c 	add.w	r1, r7, #12
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	2201      	movs	r2, #1
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f008 f9f7 	bl	8009564 <HAL_UART_Receive>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d11d      	bne.n	80011b8 <Menu_UART_Main+0x80>
		{
			switch (rx_buff[0])
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	3b30      	subs	r3, #48	@ 0x30
 8001180:	2b05      	cmp	r3, #5
 8001182:	d81b      	bhi.n	80011bc <Menu_UART_Main+0x84>
 8001184:	a201      	add	r2, pc, #4	@ (adr r2, 800118c <Menu_UART_Main+0x54>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011b5 	.word	0x080011b5
 8001190:	080011b5 	.word	0x080011b5
 8001194:	080011b5 	.word	0x080011b5
 8001198:	080011b5 	.word	0x080011b5
 800119c:	080011a5 	.word	0x080011a5
 80011a0:	080011ad 	.word	0x080011ad
				case '2':
					break;
				case '3':
					break;
				case '4':
					Menu_State = Menu_UART_Relay;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <Menu_UART_Main+0x94>)
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <Menu_UART_Main+0x98>)
 80011a8:	601a      	str	r2, [r3, #0]
					break;
 80011aa:	e004      	b.n	80011b6 <Menu_UART_Main+0x7e>
				case '5':
					Menu_State = Menu_UART_Sensors;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <Menu_UART_Main+0x94>)
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <Menu_UART_Main+0x9c>)
 80011b0:	601a      	str	r2, [r3, #0]
					break;
 80011b2:	e000      	b.n	80011b6 <Menu_UART_Main+0x7e>
					break;
 80011b4:	bf00      	nop
			}
			break;
 80011b6:	e001      	b.n	80011bc <Menu_UART_Main+0x84>
		} else {
			__NOP();
 80011b8:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80011ba:	e7d4      	b.n	8001166 <Menu_UART_Main+0x2e>
			break;
 80011bc:	bf00      	nop
		}
	}
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdb0      	pop	{r4, r5, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800ea9c 	.word	0x0800ea9c
 80011cc:	20000000 	.word	0x20000000
 80011d0:	08001271 	.word	0x08001271
 80011d4:	080011d9 	.word	0x080011d9

080011d8 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	uint8_t *Menu_Sensor[] = {
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <Menu_UART_Sensors+0x8c>)
 80011e2:	f107 040c 	add.w	r4, r7, #12
 80011e6:	461d      	mov	r5, r3
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2207      	movs	r2, #7
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f887 	bl	8001310 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8001202:	2300      	movs	r3, #0
 8001204:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001206:	f107 0108 	add.w	r1, r7, #8
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f008 f9a7 	bl	8009564 <HAL_UART_Receive>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d11b      	bne.n	8001254 <Menu_UART_Sensors+0x7c>
			{
				switch (rx_buff[0])
 800121c:	7a3b      	ldrb	r3, [r7, #8]
 800121e:	3b30      	subs	r3, #48	@ 0x30
 8001220:	2b06      	cmp	r3, #6
 8001222:	d819      	bhi.n	8001258 <Menu_UART_Sensors+0x80>
 8001224:	a201      	add	r2, pc, #4	@ (adr r2, 800122c <Menu_UART_Sensors+0x54>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	08001251 	.word	0x08001251
 8001230:	08001251 	.word	0x08001251
 8001234:	08001251 	.word	0x08001251
 8001238:	08001251 	.word	0x08001251
 800123c:	08001251 	.word	0x08001251
 8001240:	08001251 	.word	0x08001251
 8001244:	08001249 	.word	0x08001249
					case '4':
						break;
					case '5':
						break;
					case '6':
						Menu_State = Menu_UART_Main;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <Menu_UART_Sensors+0x90>)
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <Menu_UART_Sensors+0x94>)
 800124c:	601a      	str	r2, [r3, #0]
						break;
 800124e:	e000      	b.n	8001252 <Menu_UART_Sensors+0x7a>
						break;
 8001250:	bf00      	nop
				}
				break;
 8001252:	e001      	b.n	8001258 <Menu_UART_Sensors+0x80>
			} else {
				__NOP();
 8001254:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8001256:	e7d6      	b.n	8001206 <Menu_UART_Sensors+0x2e>
				break;
 8001258:	bf00      	nop
			}
		}
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	0800eb14 	.word	0x0800eb14
 8001268:	20000000 	.word	0x20000000
 800126c:	08001139 	.word	0x08001139

08001270 <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	uint8_t *Menu_Relay[] = {
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <Menu_UART_Relay+0x94>)
 800127a:	f107 040c 	add.w	r4, r7, #12
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2205      	movs	r2, #5
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f83d 	bl	8001310 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8001296:	2300      	movs	r3, #0
 8001298:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800129a:	f107 0108 	add.w	r1, r7, #8
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	2201      	movs	r2, #1
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f008 f95d 	bl	8009564 <HAL_UART_Receive>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d122      	bne.n	80012f6 <Menu_UART_Relay+0x86>
			{
				switch (rx_buff[0])
 80012b0:	7a3b      	ldrb	r3, [r7, #8]
 80012b2:	3b30      	subs	r3, #48	@ 0x30
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d820      	bhi.n	80012fa <Menu_UART_Relay+0x8a>
 80012b8:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <Menu_UART_Relay+0x50>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d5 	.word	0x080012d5
 80012c4:	080012db 	.word	0x080012db
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	080012e7 	.word	0x080012e7
 80012d0:	080012ed 	.word	0x080012ed
				{
					case '0':
						Relay_0_Set();
 80012d4:	f7ff feae 	bl	8001034 <Relay_0_Set>
						break;
 80012d8:	e00c      	b.n	80012f4 <Menu_UART_Relay+0x84>
					case '1':
						Relay_0_Reset();
 80012da:	f7ff feb7 	bl	800104c <Relay_0_Reset>
						break;
 80012de:	e009      	b.n	80012f4 <Menu_UART_Relay+0x84>
					case '2':
						Relay_1_Set();
 80012e0:	f7ff fec0 	bl	8001064 <Relay_1_Set>
						break;
 80012e4:	e006      	b.n	80012f4 <Menu_UART_Relay+0x84>
					case '3':
						Relay_1_Reset();
 80012e6:	f7ff fec9 	bl	800107c <Relay_1_Reset>
						break;
 80012ea:	e003      	b.n	80012f4 <Menu_UART_Relay+0x84>
					case '4':
						Menu_State = Menu_UART_Main;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <Menu_UART_Relay+0x98>)
 80012ee:	4a07      	ldr	r2, [pc, #28]	@ (800130c <Menu_UART_Relay+0x9c>)
 80012f0:	601a      	str	r2, [r3, #0]
						break;
 80012f2:	bf00      	nop
				}
				break;
 80012f4:	e001      	b.n	80012fa <Menu_UART_Relay+0x8a>
			} else {
				__NOP();
 80012f6:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80012f8:	e7cf      	b.n	800129a <Menu_UART_Relay+0x2a>
				break;
 80012fa:	bf00      	nop
			}
		}
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	0800eb68 	.word	0x0800eb68
 8001308:	20000000 	.word	0x20000000
 800130c:	08001139 	.word	0x08001139

08001310 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	@ 0x40
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 800131c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2224      	movs	r2, #36	@ 0x24
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f009 feaf 	bl	800b08e <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8001330:	f107 0114 	add.w	r1, r7, #20
 8001334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001338:	2204      	movs	r2, #4
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f008 f874 	bl	8009428 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 8001340:	2300      	movs	r3, #0
 8001342:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001346:	e02e      	b.n	80013a6 <Menu_UART_Out+0x96>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 8001348:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800134c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f107 0014 	add.w	r0, r7, #20
 800135c:	460a      	mov	r2, r1
 800135e:	4917      	ldr	r1, [pc, #92]	@ (80013bc <Menu_UART_Out+0xac>)
 8001360:	f009 fe32 	bl	800afc8 <siprintf>
		for(uint8_t j=0;tx_buff[j];j++) HAL_UART_Transmit(huart, (tx_buff+j), 1, 1000);
 8001364:	2300      	movs	r3, #0
 8001366:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800136a:	e00f      	b.n	800138c <Menu_UART_Out+0x7c>
 800136c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001370:	f107 0214 	add.w	r2, r7, #20
 8001374:	18d1      	adds	r1, r2, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137a:	2201      	movs	r2, #1
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f008 f853 	bl	8009428 <HAL_UART_Transmit>
 8001382:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001386:	3301      	adds	r3, #1
 8001388:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800138c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001390:	3340      	adds	r3, #64	@ 0x40
 8001392:	443b      	add	r3, r7
 8001394:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e7      	bne.n	800136c <Menu_UART_Out+0x5c>
	for(uint8_t i=0;i<size;i++)
 800139c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013a0:	3301      	adds	r3, #1
 80013a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8cb      	bhi.n	8001348 <Menu_UART_Out+0x38>
	}
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3740      	adds	r7, #64	@ 0x40
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800eb7c 	.word	0x0800eb7c

080013c0 <Period_Out>:
{
	return (Timer_F/((Devider+1)*f*2)-1);
}

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f006 fd50 	bl	8007e70 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f006 fc98 	bl	8007d14 <HAL_TIM_Base_Start_IT>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 80013f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <Mototr_Poz_Inc+0x48>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <Mototr_Poz_Inc+0x4c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	490b      	ldr	r1, [pc, #44]	@ (8001438 <Mototr_Poz_Inc+0x4c>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 8001412:	e008      	b.n	8001426 <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 8001414:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <Mototr_Poz_Inc+0x4c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	4906      	ldr	r1, [pc, #24]	@ (8001438 <Mototr_Poz_Inc+0x4c>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000004 	.word	0x20000004
 8001438:	20000200 	.word	0x20000200

0800143c <Ramp_Out>:
		Period_ramp[M][i] = Frequency_To_Period(tmp);
	}
}

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <Ramp_Out+0x68>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	4915      	ldr	r1, [pc, #84]	@ (80014a8 <Ramp_Out+0x6c>)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001458:	4293      	cmp	r3, r2
 800145a:	d304      	bcc.n	8001466 <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f006 fd96 	bl	8007f90 <HAL_TIM_OC_Stop_IT>
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);

		M_move_poz[M]++;
	}
}
 8001464:	e019      	b.n	800149a <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 8001466:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <Ramp_Out+0x68>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	490f      	ldr	r1, [pc, #60]	@ (80014ac <Ramp_Out+0x70>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8001476:	fb00 f202 	mul.w	r2, r0, r2
 800147a:	4413      	add	r3, r2
 800147c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ff9c 	bl	80013c0 <Period_Out>
		M_move_poz[M]++;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <Ramp_Out+0x68>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4904      	ldr	r1, [pc, #16]	@ (80014a4 <Ramp_Out+0x68>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2003ab98 	.word	0x2003ab98
 80014a8:	2003ab8c 	.word	0x2003ab8c
 80014ac:	2000020c 	.word	0x2000020c

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	@ 0x40
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f001 fa5d 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f845 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f000 fc23 	bl	8001d08 <MX_GPIO_Init>
  MX_UART5_Init();
 80014c2:	f000 fb09 	bl	8001ad8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014c6:	f000 fb55 	bl	8001b74 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80014ca:	f000 fbeb 	bl	8001ca4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80014ce:	f000 f8af 	bl	8001630 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014d2:	f000 f8f9 	bl	80016c8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80014d6:	f000 fb99 	bl	8001c0c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80014da:	f000 f94b 	bl	8001774 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014de:	f000 f9bf 	bl	8001860 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014e2:	f000 fa33 	bl	800194c <MX_TIM5_Init>
  MX_TIM15_Init();
 80014e6:	f000 faa7 	bl	8001a38 <MX_TIM15_Init>
  MX_ICACHE_Init();
 80014ea:	f000 f8e1 	bl	80016b0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <main+0x8c>)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	6851      	ldr	r1, [r2, #4]
 80014f6:	c303      	stmia	r3!, {r0, r1}
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2234      	movs	r2, #52	@ 0x34
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 fdc4 	bl	800b08e <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 8001506:	f7ff fd95 	bl	8001034 <Relay_0_Set>
  HAL_Delay(200);
 800150a:	20c8      	movs	r0, #200	@ 0xc8
 800150c:	f001 faf0 	bl	8002af0 <HAL_Delay>
  Relay_1_Set();
 8001510:	f7ff fda8 	bl	8001064 <Relay_1_Set>
  HAL_Delay(200);
 8001514:	20c8      	movs	r0, #200	@ 0xc8
 8001516:	f001 faeb 	bl	8002af0 <HAL_Delay>
  Relay_0_Reset();
 800151a:	f7ff fd97 	bl	800104c <Relay_0_Reset>
  HAL_Delay(200);
 800151e:	20c8      	movs	r0, #200	@ 0xc8
 8001520:	f001 fae6 	bl	8002af0 <HAL_Delay>
  Relay_1_Reset();
 8001524:	f7ff fdaa 	bl	800107c <Relay_1_Reset>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <main+0x90>)
 800152a:	f006 fbf3 	bl	8007d14 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <main+0x94>)
 8001530:	f7ff fdb0 	bl	8001094 <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <main+0x94>)
 8001536:	f7ff fdf1 	bl	800111c <Menu_UART_Update>
 800153a:	e7fb      	b.n	8001534 <main+0x84>
 800153c:	0800eb8c 	.word	0x0800eb8c
 8001540:	2003ad6c 	.word	0x2003ad6c
 8001544:	2003ae4c 	.word	0x2003ae4c

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09c      	sub	sp, #112	@ 0x70
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2250      	movs	r2, #80	@ 0x50
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f009 fd99 	bl	800b08e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800156e:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <SystemClock_Config+0xe0>)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <SystemClock_Config+0xe0>)
 8001574:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001578:	6113      	str	r3, [r2, #16]
 800157a:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <SystemClock_Config+0xe0>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001586:	bf00      	nop
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <SystemClock_Config+0xe0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b08      	cmp	r3, #8
 8001592:	d1f9      	bne.n	8001588 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001594:	2321      	movs	r3, #33	@ 0x21
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80015a8:	2303      	movs	r3, #3
 80015aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015ac:	2306      	movs	r3, #6
 80015ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80015b0:	237d      	movs	r3, #125	@ 0x7d
 80015b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80015c0:	2308      	movs	r3, #8
 80015c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 f809 	bl	80035e8 <HAL_RCC_OscConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015dc:	f000 fc4c 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e0:	231f      	movs	r3, #31
 80015e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	2303      	movs	r3, #3
 80015e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ec:	2350      	movs	r3, #80	@ 0x50
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015f0:	2350      	movs	r3, #80	@ 0x50
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 80015f4:	2350      	movs	r3, #80	@ 0x50
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2105      	movs	r1, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fc2a 	bl	8003e58 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800160a:	f000 fc35 	bl	8001e78 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <SystemClock_Config+0xe4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <SystemClock_Config+0xe4>)
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	3770      	adds	r7, #112	@ 0x70
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	44020800 	.word	0x44020800
 800162c:	40022000 	.word	0x40022000

08001630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <MX_I2C1_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_I2C1_Init+0x74>)
 800163c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ac <MX_I2C1_Init+0x7c>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001648:	2201      	movs	r2, #1
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <MX_I2C1_Init+0x74>)
 800166c:	f001 fd76 	bl	800315c <HAL_I2C_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001676:	f000 fbff 	bl	8001e78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <MX_I2C1_Init+0x74>)
 800167e:	f001 fe08 	bl	8003292 <HAL_I2CEx_ConfigAnalogFilter>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001688:	f000 fbf6 	bl	8001e78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800168c:	2100      	movs	r1, #0
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_I2C1_Init+0x74>)
 8001690:	f001 fe4a 	bl	8003328 <HAL_I2CEx_ConfigDigitalFilter>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f000 fbed 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2003aba4 	.word	0x2003aba4
 80016a8:	40005400 	.word	0x40005400
 80016ac:	2050517a 	.word	0x2050517a

080016b0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80016b4:	f001 fe84 	bl	80033c0 <HAL_ICACHE_Enable>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80016be:	f000 fbdb 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016ce:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <MX_SPI1_Init+0xa8>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016e2:	220f      	movs	r2, #15
 80016e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_SPI1_Init+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001718:	2207      	movs	r2, #7
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_SPI1_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_SPI1_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_SPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_SPI1_Init+0xa4>)
 800175a:	f006 f93d 	bl	80079d8 <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001764:	f000 fb88 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2003abf8 	.word	0x2003abf8
 8001770:	40013000 	.word	0x40013000

08001774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	@ 0x38
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017b0:	22f9      	movs	r2, #249	@ 0xf9
 80017b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017cc:	4823      	ldr	r0, [pc, #140]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017ce:	f006 fa4a 	bl	8007c66 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017d8:	f000 fb4e 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e6:	4619      	mov	r1, r3
 80017e8:	481c      	ldr	r0, [pc, #112]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017ea:	f006 fe85 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017f4:	f000 fb40 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017f8:	4818      	ldr	r0, [pc, #96]	@ (800185c <MX_TIM2_Init+0xe8>)
 80017fa:	f006 fb68 	bl	8007ece <HAL_TIM_OC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001804:	f000 fb38 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_TIM2_Init+0xe8>)
 8001818:	f007 fca0 	bl	800915c <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001822:	f000 fb29 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001826:	2330      	movs	r3, #48	@ 0x30
 8001828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	2204      	movs	r2, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4807      	ldr	r0, [pc, #28]	@ (800185c <MX_TIM2_Init+0xe8>)
 800183e:	f006 fde1 	bl	8008404 <HAL_TIM_OC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001848:	f000 fb16 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800184c:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_TIM2_Init+0xe8>)
 800184e:	f000 fc8b 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001852:	bf00      	nop
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2003ac88 	.word	0x2003ac88

08001860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001892:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <MX_TIM3_Init+0xe4>)
 8001894:	4a2c      	ldr	r2, [pc, #176]	@ (8001948 <MX_TIM3_Init+0xe8>)
 8001896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <MX_TIM3_Init+0xe4>)
 800189a:	22f9      	movs	r2, #249	@ 0xf9
 800189c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018aa:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b0:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b6:	4823      	ldr	r0, [pc, #140]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018b8:	f006 f9d5 	bl	8007c66 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018c2:	f000 fad9 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d0:	4619      	mov	r1, r3
 80018d2:	481c      	ldr	r0, [pc, #112]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018d4:	f006 fe10 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018de:	f000 facb 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80018e2:	4818      	ldr	r0, [pc, #96]	@ (8001944 <MX_TIM3_Init+0xe4>)
 80018e4:	f006 faf3 	bl	8007ece <HAL_TIM_OC_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018ee:	f000 fac3 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4810      	ldr	r0, [pc, #64]	@ (8001944 <MX_TIM3_Init+0xe4>)
 8001902:	f007 fc2b 	bl	800915c <HAL_TIMEx_MasterConfigSynchronization>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800190c:	f000 fab4 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001910:	2330      	movs	r3, #48	@ 0x30
 8001912:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	220c      	movs	r2, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4807      	ldr	r0, [pc, #28]	@ (8001944 <MX_TIM3_Init+0xe4>)
 8001928:	f006 fd6c 	bl	8008404 <HAL_TIM_OC_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001932:	f000 faa1 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001936:	4803      	ldr	r0, [pc, #12]	@ (8001944 <MX_TIM3_Init+0xe4>)
 8001938:	f000 fc16 	bl	8002168 <HAL_TIM_MspPostInit>

}
 800193c:	bf00      	nop
 800193e:	3738      	adds	r7, #56	@ 0x38
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2003acd4 	.word	0x2003acd4
 8001948:	40000400 	.word	0x40000400

0800194c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	@ 0x38
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800197e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001980:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <MX_TIM5_Init+0xe8>)
 8001982:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001986:	22f9      	movs	r2, #249	@ 0xf9
 8001988:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 8001990:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001992:	2201      	movs	r2, #1
 8001994:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019a2:	4823      	ldr	r0, [pc, #140]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 80019a4:	f006 f95f 	bl	8007c66 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80019ae:	f000 fa63 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019bc:	4619      	mov	r1, r3
 80019be:	481c      	ldr	r0, [pc, #112]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 80019c0:	f006 fd9a 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80019ca:	f000 fa55 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80019ce:	4818      	ldr	r0, [pc, #96]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 80019d0:	f006 fa7d 	bl	8007ece <HAL_TIM_OC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80019da:	f000 fa4d 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4810      	ldr	r0, [pc, #64]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 80019ee:	f007 fbb5 	bl	800915c <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80019f8:	f000 fa3e 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80019fc:	2330      	movs	r3, #48	@ 0x30
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001a14:	f006 fcf6 	bl	8008404 <HAL_TIM_OC_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001a1e:	f000 fa2b 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a22:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <MX_TIM5_Init+0xe4>)
 8001a24:	f000 fba0 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	@ 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2003ad20 	.word	0x2003ad20
 8001a34:	40000c00 	.word	0x40000c00

08001a38 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <MX_TIM15_Init+0x9c>)
 8001a5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a5e:	220a      	movs	r2, #10
 8001a60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a6a:	227c      	movs	r2, #124	@ 0x7c
 8001a6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a80:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a82:	f006 f8f0 	bl	8007c66 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001a8c:	f000 f9f4 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001a9e:	f006 fd2b 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001aa8:	f000 f9e6 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_TIM15_Init+0x98>)
 8001aba:	f007 fb4f 	bl	800915c <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001ac4:	f000 f9d8 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2003ad6c 	.word	0x2003ad6c
 8001ad4:	40014000 	.word	0x40014000

08001ad8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001ade:	4a24      	ldr	r2, [pc, #144]	@ (8001b70 <MX_UART5_Init+0x98>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b04:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b08:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b22:	4812      	ldr	r0, [pc, #72]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b24:	f007 fc30 	bl	8009388 <HAL_UART_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001b2e:	f000 f9a3 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b36:	f008 f9f3 	bl	8009f20 <HAL_UARTEx_SetTxFifoThreshold>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 8001b40:	f000 f99a 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b44:	2100      	movs	r1, #0
 8001b46:	4809      	ldr	r0, [pc, #36]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b48:	f008 fa28 	bl	8009f9c <HAL_UARTEx_SetRxFifoThreshold>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 8001b52:	f000 f991 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_UART5_Init+0x94>)
 8001b58:	f008 f9a9 	bl	8009eae <HAL_UARTEx_DisableFifoMode>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f000 f989 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2003adb8 	.word	0x2003adb8
 8001b70:	40005000 	.word	0x40005000

08001b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b7a:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <MX_USART1_UART_Init+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bbc:	4811      	ldr	r0, [pc, #68]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bbe:	f007 fbe3 	bl	8009388 <HAL_UART_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bc8:	f000 f956 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bd0:	f008 f9a6 	bl	8009f20 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bda:	f000 f94d 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001be2:	f008 f9db 	bl	8009f9c <HAL_UARTEx_SetRxFifoThreshold>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bec:	f000 f944 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_USART1_UART_Init+0x90>)
 8001bf2:	f008 f95c 	bl	8009eae <HAL_UARTEx_DisableFifoMode>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f93c 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2003ae4c 	.word	0x2003ae4c
 8001c08:	40013800 	.word	0x40013800

08001c0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c12:	4a23      	ldr	r2, [pc, #140]	@ (8001ca0 <MX_USART6_UART_Init+0x94>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c16:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c54:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c56:	f007 fb97 	bl	8009388 <HAL_UART_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001c60:	f000 f90a 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c68:	f008 f95a 	bl	8009f20 <HAL_UARTEx_SetTxFifoThreshold>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001c72:	f000 f901 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c7a:	f008 f98f 	bl	8009f9c <HAL_UARTEx_SetRxFifoThreshold>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 f8f8 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <MX_USART6_UART_Init+0x90>)
 8001c8a:	f008 f910 	bl	8009eae <HAL_UARTEx_DisableFifoMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 f8f0 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2003aee0 	.word	0x2003aee0
 8001ca0:	40006400 	.word	0x40006400

08001ca4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001caa:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <MX_USB_PCD_Init+0x60>)
 8001cac:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_USB_PCD_Init+0x5c>)
 8001cec:	f001 fb78 	bl	80033e0 <HAL_PCD_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f000 f8bf 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2003af74 	.word	0x2003af74
 8001d04:	40016000 	.word	0x40016000

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d24:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3c:	4b49      	ldr	r3, [pc, #292]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d42:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d4c:	4b45      	ldr	r3, [pc, #276]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d60:	4a40      	ldr	r2, [pc, #256]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7e:	4a39      	ldr	r2, [pc, #228]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d88:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <MX_GPIO_Init+0x15c>)
 8001d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001d96:	2200      	movs	r2, #0
 8001d98:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8001d9c:	4832      	ldr	r0, [pc, #200]	@ (8001e68 <MX_GPIO_Init+0x160>)
 8001d9e:	f001 f9c5 	bl	800312c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f240 1101 	movw	r1, #257	@ 0x101
 8001da8:	4830      	ldr	r0, [pc, #192]	@ (8001e6c <MX_GPIO_Init+0x164>)
 8001daa:	f001 f9bf 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001db4:	482d      	ldr	r0, [pc, #180]	@ (8001e6c <MX_GPIO_Init+0x164>)
 8001db6:	f001 f9b9 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc0:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <MX_GPIO_Init+0x168>)
 8001dc2:	f001 f9b3 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001dc6:	f24a 0313 	movw	r3, #40979	@ 0xa013
 8001dca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4822      	ldr	r0, [pc, #136]	@ (8001e68 <MX_GPIO_Init+0x160>)
 8001de0:	f001 f83a 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001de4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dea:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <MX_GPIO_Init+0x16c>)
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	481b      	ldr	r0, [pc, #108]	@ (8001e68 <MX_GPIO_Init+0x160>)
 8001dfa:	f001 f82d 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <MX_GPIO_Init+0x160>)
 8001e1a:	f001 f81d 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 8001e1e:	f240 5321 	movw	r3, #1313	@ 0x521
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <MX_GPIO_Init+0x164>)
 8001e38:	f001 f80e 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <MX_GPIO_Init+0x168>)
 8001e56:	f000 ffff 	bl	8002e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	44020c00 	.word	0x44020c00
 8001e68:	42020800 	.word	0x42020800
 8001e6c:	42020400 	.word	0x42020400
 8001e70:	42020000 	.word	0x42020000
 8001e74:	10110000 	.word	0x10110000

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <Error_Handler+0x8>

08001e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0be      	sub	sp, #248	@ 0xf8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	22d0      	movs	r2, #208	@ 0xd0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f009 f8ea 	bl	800b08e <memset>
  if(hi2c->Instance==I2C1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_I2C_MspInit+0xc4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d145      	bne.n	8001f50 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fafe 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ee6:	f7ff ffc7 	bl	8001e78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f08:	23c0      	movs	r3, #192	@ 0xc0
 8001f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <HAL_I2C_MspInit+0xcc>)
 8001f2e:	f000 ff93 	bl	8002e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f38:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f3e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_I2C_MspInit+0xc8>)
 8001f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f50:	bf00      	nop
 8001f52:	37f8      	adds	r7, #248	@ 0xf8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	44020c00 	.word	0x44020c00
 8001f60:	42020400 	.word	0x42020400

08001f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0be      	sub	sp, #248	@ 0xf8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	22d0      	movs	r2, #208	@ 0xd0
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f009 f882 	bl	800b08e <memset>
  if(hspi->Instance==SPI1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a31      	ldr	r2, [pc, #196]	@ (8002054 <HAL_SPI_MspInit+0xf0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d15a      	bne.n	800204a <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fa96 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001fb6:	f7ff ff5f 	bl	8001e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fba:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fc0:	4a25      	ldr	r2, [pc, #148]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fc6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fca:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_SPI_MspInit+0xf4>)
 8001fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ff6:	23a0      	movs	r3, #160	@ 0xa0
 8001ff8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002018:	4619      	mov	r1, r3
 800201a:	4810      	ldr	r0, [pc, #64]	@ (800205c <HAL_SPI_MspInit+0xf8>)
 800201c:	f000 ff1c 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002020:	2340      	movs	r3, #64	@ 0x40
 8002022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002038:	2305      	movs	r3, #5
 800203a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	@ (800205c <HAL_SPI_MspInit+0xf8>)
 8002046:	f000 ff07 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800204a:	bf00      	nop
 800204c:	37f8      	adds	r7, #248	@ 0xf8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40013000 	.word	0x40013000
 8002058:	44020c00 	.word	0x44020c00
 800205c:	42020000 	.word	0x42020000

08002060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002070:	d117      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 8002074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002078:	4a37      	ldr	r2, [pc, #220]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002082:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 8002084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	202d      	movs	r0, #45	@ 0x2d
 8002096:	f000 fe07 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800209a:	202d      	movs	r0, #45	@ 0x2d
 800209c:	f000 fe1e 	bl	8002cdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80020a0:	e055      	b.n	800214e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <HAL_TIM_Base_MspInit+0xfc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d117      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020b2:	4a29      	ldr	r2, [pc, #164]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020bc:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	202e      	movs	r0, #46	@ 0x2e
 80020d0:	f000 fdea 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d4:	202e      	movs	r0, #46	@ 0x2e
 80020d6:	f000 fe01 	bl	8002cdc <HAL_NVIC_EnableIRQ>
}
 80020da:	e038      	b.n	800214e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_TIM_Base_MspInit+0x100>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d117      	bne.n	8002116 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 80020f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	2030      	movs	r0, #48	@ 0x30
 800210a:	f000 fdcd 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800210e:	2030      	movs	r0, #48	@ 0x30
 8002110:	f000 fde4 	bl	8002cdc <HAL_NVIC_EnableIRQ>
}
 8002114:	e01b      	b.n	800214e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <HAL_TIM_Base_MspInit+0x104>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d116      	bne.n	800214e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 8002122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002126:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_TIM_Base_MspInit+0xf8>)
 8002132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2047      	movs	r0, #71	@ 0x47
 8002144:	f000 fdb0 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002148:	2047      	movs	r0, #71	@ 0x47
 800214a:	f000 fdc7 	bl	8002cdc <HAL_NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	44020c00 	.word	0x44020c00
 800215c:	40000400 	.word	0x40000400
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40014000 	.word	0x40014000

08002168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d11f      	bne.n	80021ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 800218c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002190:	4a34      	ldr	r2, [pc, #208]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800219a:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021a8:	2302      	movs	r3, #2
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b8:	2301      	movs	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4829      	ldr	r0, [pc, #164]	@ (8002268 <HAL_TIM_MspPostInit+0x100>)
 80021c4:	f000 fe48 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021c8:	e048      	b.n	800225c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a27      	ldr	r2, [pc, #156]	@ (800226c <HAL_TIM_MspPostInit+0x104>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11f      	bne.n	8002214 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 80021d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021da:	4a22      	ldr	r2, [pc, #136]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 80021e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021f2:	2302      	movs	r3, #2
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002202:	2302      	movs	r3, #2
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4818      	ldr	r0, [pc, #96]	@ (8002270 <HAL_TIM_MspPostInit+0x108>)
 800220e:	f000 fe23 	bl	8002e58 <HAL_GPIO_Init>
}
 8002212:	e023      	b.n	800225c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_TIM_MspPostInit+0x10c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11e      	bne.n	800225c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002224:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_TIM_MspPostInit+0xfc>)
 8002230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800224c:	2302      	movs	r3, #2
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4804      	ldr	r0, [pc, #16]	@ (8002268 <HAL_TIM_MspPostInit+0x100>)
 8002258:	f000 fdfe 	bl	8002e58 <HAL_GPIO_Init>
}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	44020c00 	.word	0x44020c00
 8002268:	42020000 	.word	0x42020000
 800226c:	40000400 	.word	0x40000400
 8002270:	42020400 	.word	0x42020400
 8002274:	40000c00 	.word	0x40000c00

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0c4      	sub	sp, #272	@ 0x110
 800227c:	af00      	add	r7, sp, #0
 800227e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002286:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002298:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800229c:	22d0      	movs	r2, #208	@ 0xd0
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f008 fef4 	bl	800b08e <memset>
  if(huart->Instance==UART5)
 80022a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a92      	ldr	r2, [pc, #584]	@ (80024fc <HAL_UART_MspInit+0x284>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d16c      	bne.n	8002392 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80022b8:	f04f 0210 	mov.w	r2, #16
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 f904 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80022da:	f7ff fdcd 	bl	8001e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80022e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e4:	4a86      	ldr	r2, [pc, #536]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022ee:	4b84      	ldr	r3, [pc, #528]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80022f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002302:	4a7f      	ldr	r2, [pc, #508]	@ (8002500 <HAL_UART_MspInit+0x288>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800230c:	4b7c      	ldr	r3, [pc, #496]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800230e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b79      	ldr	r3, [pc, #484]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002320:	4a77      	ldr	r2, [pc, #476]	@ (8002500 <HAL_UART_MspInit+0x288>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800232a:	4b75      	ldr	r3, [pc, #468]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800232c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002338:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800233c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002352:	230e      	movs	r3, #14
 8002354:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800235c:	4619      	mov	r1, r3
 800235e:	4869      	ldr	r0, [pc, #420]	@ (8002504 <HAL_UART_MspInit+0x28c>)
 8002360:	f000 fd7a 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002368:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800237e:	2308      	movs	r3, #8
 8002380:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002388:	4619      	mov	r1, r3
 800238a:	485f      	ldr	r0, [pc, #380]	@ (8002508 <HAL_UART_MspInit+0x290>)
 800238c:	f000 fd64 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002390:	e0af      	b.n	80024f2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8002392:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5b      	ldr	r2, [pc, #364]	@ (800250c <HAL_UART_MspInit+0x294>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d147      	bne.n	8002434 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023a4:	f04f 0201 	mov.w	r2, #1
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 f88e 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_UART_MspInit+0x152>
      Error_Handler();
 80023c6:	f7ff fd57 	bl	8001e78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b45      	ldr	r3, [pc, #276]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ee:	4a44      	ldr	r2, [pc, #272]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023f8:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80023fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002406:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800240a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002420:	2304      	movs	r3, #4
 8002422:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800242a:	4619      	mov	r1, r3
 800242c:	4835      	ldr	r0, [pc, #212]	@ (8002504 <HAL_UART_MspInit+0x28c>)
 800242e:	f000 fd13 	bl	8002e58 <HAL_GPIO_Init>
}
 8002432:	e05e      	b.n	80024f2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8002434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a33      	ldr	r2, [pc, #204]	@ (8002510 <HAL_UART_MspInit+0x298>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d155      	bne.n	80024f2 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002446:	f04f 0220 	mov.w	r2, #32
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800245c:	4618      	mov	r0, r3
 800245e:	f002 f83d 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8002468:	f7ff fd06 	bl	8001e78 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800246e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002472:	4a23      	ldr	r2, [pc, #140]	@ (8002500 <HAL_UART_MspInit+0x288>)
 8002474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002478:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800247e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002482:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800248a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002498:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_UART_MspInit+0x288>)
 800249c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a0:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_UART_MspInit+0x288>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	f003 0204 	and.w	r2, r3, #4
 80024b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c8:	23c0      	movs	r3, #192	@ 0xc0
 80024ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80024e0:	2307      	movs	r3, #7
 80024e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80024ea:	4619      	mov	r1, r3
 80024ec:	4806      	ldr	r0, [pc, #24]	@ (8002508 <HAL_UART_MspInit+0x290>)
 80024ee:	f000 fcb3 	bl	8002e58 <HAL_GPIO_Init>
}
 80024f2:	bf00      	nop
 80024f4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40005000 	.word	0x40005000
 8002500:	44020c00 	.word	0x44020c00
 8002504:	42020400 	.word	0x42020400
 8002508:	42020800 	.word	0x42020800
 800250c:	40013800 	.word	0x40013800
 8002510:	40006400 	.word	0x40006400

08002514 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b8      	sub	sp, #224	@ 0xe0
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	22d0      	movs	r2, #208	@ 0xd0
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f008 fdb2 	bl	800b08e <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a15      	ldr	r2, [pc, #84]	@ (8002584 <HAL_PCD_MspInit+0x70>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d123      	bne.n	800257c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0310 	mov.w	r3, #16
 800253c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002540:	2330      	movs	r3, #48	@ 0x30
 8002542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f001 ffc6 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8002556:	f7ff fc8f 	bl	8001e78 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800255a:	f001 f835 	bl	80035c8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_PCD_MspInit+0x74>)
 8002560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002564:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <HAL_PCD_MspInit+0x74>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800256a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_PCD_MspInit+0x74>)
 8002570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800257c:	bf00      	nop
 800257e:	37e0      	adds	r7, #224	@ 0xe0
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40016000 	.word	0x40016000
 8002588:	44020c00 	.word	0x44020c00

0800258c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <NMI_Handler+0x4>

08002594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <MemManage_Handler+0x4>

080025a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e2:	f000 fa65 	bl	8002ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 80025f0:	2102      	movs	r1, #2
 80025f2:	4809      	ldr	r0, [pc, #36]	@ (8002618 <TIM2_IRQHandler+0x2c>)
 80025f4:	f000 fd82 	bl	80030fc <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 80025fe:	2201      	movs	r2, #1
 8002600:	2104      	movs	r1, #4
 8002602:	4806      	ldr	r0, [pc, #24]	@ (800261c <TIM2_IRQHandler+0x30>)
 8002604:	f7fe ff1a 	bl	800143c <Ramp_Out>
		Mototr_Poz_Inc(1);
 8002608:	2001      	movs	r0, #1
 800260a:	f7fe feef 	bl	80013ec <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800260e:	4803      	ldr	r0, [pc, #12]	@ (800261c <TIM2_IRQHandler+0x30>)
 8002610:	f005 fda8 	bl	8008164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	42020000 	.word	0x42020000
 800261c:	2003ac88 	.word	0x2003ac88

08002620 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 8002624:	2102      	movs	r1, #2
 8002626:	4809      	ldr	r0, [pc, #36]	@ (800264c <TIM3_IRQHandler+0x2c>)
 8002628:	f000 fd68 	bl	80030fc <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 8002632:	2202      	movs	r2, #2
 8002634:	210c      	movs	r1, #12
 8002636:	4806      	ldr	r0, [pc, #24]	@ (8002650 <TIM3_IRQHandler+0x30>)
 8002638:	f7fe ff00 	bl	800143c <Ramp_Out>
		Mototr_Poz_Inc(2);
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe fed5 	bl	80013ec <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002642:	4803      	ldr	r0, [pc, #12]	@ (8002650 <TIM3_IRQHandler+0x30>)
 8002644:	f005 fd8e 	bl	8008164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	42020400 	.word	0x42020400
 8002650:	2003acd4 	.word	0x2003acd4

08002654 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 8002658:	2101      	movs	r1, #1
 800265a:	4809      	ldr	r0, [pc, #36]	@ (8002680 <TIM5_IRQHandler+0x2c>)
 800265c:	f000 fd4e 	bl	80030fc <HAL_GPIO_ReadPin>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	4806      	ldr	r0, [pc, #24]	@ (8002684 <TIM5_IRQHandler+0x30>)
 800266c:	f7fe fee6 	bl	800143c <Ramp_Out>
		  Mototr_Poz_Inc(0);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe febb 	bl	80013ec <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002676:	4803      	ldr	r0, [pc, #12]	@ (8002684 <TIM5_IRQHandler+0x30>)
 8002678:	f005 fd74 	bl	8008164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	42020000 	.word	0x42020000
 8002684:	2003ad20 	.word	0x2003ad20

08002688 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <TIM15_IRQHandler+0x10>)
 800268e:	f005 fd69 	bl	8008164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2003ad6c 	.word	0x2003ad6c

0800269c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_kill>:

int _kill(int pid, int sig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026b6:	f008 fd3d 	bl	800b134 <__errno>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2216      	movs	r2, #22
 80026be:	601a      	str	r2, [r3, #0]
  return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_exit>:

void _exit (int status)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ffe7 	bl	80026ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80026de:	bf00      	nop
 80026e0:	e7fd      	b.n	80026de <_exit+0x12>

080026e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e00a      	b.n	800270a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026f4:	f3af 8000 	nop.w
 80026f8:	4601      	mov	r1, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	60ba      	str	r2, [r7, #8]
 8002700:	b2ca      	uxtb	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	dbf0      	blt.n	80026f4 <_read+0x12>
  }

  return len;
 8002712:	687b      	ldr	r3, [r7, #4]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e009      	b.n	8002742 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	60ba      	str	r2, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	dbf1      	blt.n	800272e <_write+0x12>
  }
  return len;
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_close>:

int _close(int file)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800277c:	605a      	str	r2, [r3, #4]
  return 0;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_isatty>:

int _isatty(int file)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f008 fca2 	bl	800b134 <__errno>
 80027f0:	4603      	mov	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	@ (8002820 <_sbrk+0x64>)
 800280c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20044000 	.word	0x20044000
 800281c:	00000400 	.word	0x00000400
 8002820:	2003b254 	.word	0x2003b254
 8002824:	2003b3a8 	.word	0x2003b3a8

08002828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <SystemInit+0xdc>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	4a33      	ldr	r2, [pc, #204]	@ (8002904 <SystemInit+0xdc>)
 8002836:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800283a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800283e:	4b32      	ldr	r3, [pc, #200]	@ (8002908 <SystemInit+0xe0>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002844:	4b30      	ldr	r3, [pc, #192]	@ (8002908 <SystemInit+0xe0>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800284a:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <SystemInit+0xe0>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <SystemInit+0xe0>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	492c      	ldr	r1, [pc, #176]	@ (8002908 <SystemInit+0xe0>)
 8002856:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <SystemInit+0xe4>)
 8002858:	4013      	ands	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800285c:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <SystemInit+0xe0>)
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002862:	4b29      	ldr	r3, [pc, #164]	@ (8002908 <SystemInit+0xe0>)
 8002864:	2200      	movs	r2, #0
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <SystemInit+0xe0>)
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800286e:	4b26      	ldr	r3, [pc, #152]	@ (8002908 <SystemInit+0xe0>)
 8002870:	4a27      	ldr	r2, [pc, #156]	@ (8002910 <SystemInit+0xe8>)
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002874:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <SystemInit+0xe0>)
 8002876:	2200      	movs	r2, #0
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800287a:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <SystemInit+0xe0>)
 800287c:	4a24      	ldr	r2, [pc, #144]	@ (8002910 <SystemInit+0xe8>)
 800287e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002880:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <SystemInit+0xe0>)
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <SystemInit+0xe0>)
 8002888:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <SystemInit+0xe8>)
 800288a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800288c:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <SystemInit+0xe0>)
 800288e:	2200      	movs	r2, #0
 8002890:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002892:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <SystemInit+0xe0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <SystemInit+0xe0>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <SystemInit+0xe0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <SystemInit+0xdc>)
 80028a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028aa:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <SystemInit+0xec>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80028b4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80028bc:	d003      	beq.n	80028c6 <SystemInit+0x9e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80028c4:	d117      	bne.n	80028f6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <SystemInit+0xec>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <SystemInit+0xec>)
 80028d4:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <SystemInit+0xf0>)
 80028d6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <SystemInit+0xec>)
 80028da:	4a10      	ldr	r2, [pc, #64]	@ (800291c <SystemInit+0xf4>)
 80028dc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <SystemInit+0xec>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <SystemInit+0xec>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <SystemInit+0xec>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a09      	ldr	r2, [pc, #36]	@ (8002914 <SystemInit+0xec>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	61d3      	str	r3, [r2, #28]
  }
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	44020c00 	.word	0x44020c00
 800290c:	eae2eae3 	.word	0xeae2eae3
 8002910:	01010280 	.word	0x01010280
 8002914:	40022000 	.word	0x40022000
 8002918:	08192a3b 	.word	0x08192a3b
 800291c:	4c5d6e7f 	.word	0x4c5d6e7f

08002920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002920:	480d      	ldr	r0, [pc, #52]	@ (8002958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002922:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002924:	f7ff ff80 	bl	8002828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopForever+0x6>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopForever+0xe>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopForever+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800294e:	f008 fbf7 	bl	800b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002952:	f7fe fdad 	bl	80014b0 <main>

08002956 <LoopForever>:

LoopForever:
    b LoopForever
 8002956:	e7fe      	b.n	8002956 <LoopForever>
  ldr   r0, =_estack
 8002958:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002964:	0800f010 	.word	0x0800f010
  ldr r2, =_sbss
 8002968:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800296c:	2003b3a8 	.word	0x2003b3a8

08002970 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC1_IRQHandler>
	...

08002974 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 f98a 	bl	8002c92 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800297e:	f001 fc23 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8002982:	4602      	mov	r2, r0
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <HAL_Init+0x44>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	490b      	ldr	r1, [pc, #44]	@ (80029bc <HAL_Init+0x48>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4a0a      	ldr	r2, [pc, #40]	@ (80029c0 <HAL_Init+0x4c>)
 8002996:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002998:	2004      	movs	r0, #4
 800299a:	f000 f9cf 	bl	8002d3c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 f810 	bl	80029c4 <HAL_InitTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e002      	b.n	80029b4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ae:	f7ff fa69 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	44020c00 	.word	0x44020c00
 80029bc:	0800eb94 	.word	0x0800eb94
 80029c0:	20000010 	.word	0x20000010

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80029d0:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <HAL_InitTick+0xdc>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e05c      	b.n	8002a96 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_InitTick+0xe0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d10c      	bne.n	8002a02 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80029e8:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa8 <HAL_InitTick+0xe4>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <HAL_InitTick+0xdc>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e037      	b.n	8002a72 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002a02:	f000 f9f3 	bl	8002dec <HAL_SYSTICK_GetCLKSourceConfig>
 8002a06:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d023      	beq.n	8002a56 <HAL_InitTick+0x92>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d82d      	bhi.n	8002a70 <HAL_InitTick+0xac>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_InitTick+0x5e>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d00d      	beq.n	8002a3c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002a20:	e026      	b.n	8002a70 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002a22:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <HAL_InitTick+0xe4>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_InitTick+0xdc>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	60fb      	str	r3, [r7, #12]
        break;
 8002a3a:	e01a      	b.n	8002a72 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002a3c:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <HAL_InitTick+0xdc>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a4a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	60fb      	str	r3, [r7, #12]
        break;
 8002a54:	e00d      	b.n	8002a72 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_InitTick+0xdc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
        break;
 8002a6e:	e000      	b.n	8002a72 <HAL_InitTick+0xae>
        break;
 8002a70:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f940 	bl	8002cf8 <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e009      	b.n	8002a96 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a82:	2200      	movs	r2, #0
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8a:	f000 f90d 	bl	8002ca8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002a8e:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <HAL_InitTick+0xe8>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	e000e010 	.word	0xe000e010
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	20000014 	.word	0x20000014

08002ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_IncTick+0x20>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000018 	.word	0x20000018
 8002ad4:	2003b258 	.word	0x2003b258

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2003b258 	.word	0x2003b258

08002af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff ffee 	bl	8002ad8 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d005      	beq.n	8002b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_Delay+0x44>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b16:	bf00      	nop
 8002b18:	f7ff ffde 	bl	8002ad8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d8f7      	bhi.n	8002b18 <HAL_Delay+0x28>
  {
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000018 	.word	0x20000018

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	@ (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	@ (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	@ (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	@ 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff4c 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb6:	f7ff ff63 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002cba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7ff ffb3 	bl	8002c2c <NVIC_EncodePriority>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff82 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff56 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d08:	d301      	bcc.n	8002d0e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00d      	b.n	8002d2a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <HAL_SYSTICK_Config+0x40>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <HAL_SYSTICK_Config+0x40>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_SYSTICK_Config+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <HAL_SYSTICK_Config+0x40>)
 8002d22:	f043 0303 	orr.w	r3, r3, #3
 8002d26:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e010 	.word	0xe000e010

08002d3c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d844      	bhi.n	8002dd4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d73 	.word	0x08002d73
 8002d54:	08002d91 	.word	0x08002d91
 8002d58:	08002db3 	.word	0x08002db3
 8002d5c:	08002dd5 	.word	0x08002dd5
 8002d60:	08002d65 	.word	0x08002d65
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002d64:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6013      	str	r3, [r2, #0]
      break;
 8002d70:	e031      	b.n	8002dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002d72:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1b      	ldr	r2, [pc, #108]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d86:	f023 030c 	bic.w	r3, r3, #12
 8002d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002d8e:	e022      	b.n	8002dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002da2:	f023 030c 	bic.w	r3, r3, #12
 8002da6:	4a10      	ldr	r2, [pc, #64]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002db0:	e011      	b.n	8002dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002db2:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0b      	ldr	r2, [pc, #44]	@ (8002de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dc4:	f023 030c 	bic.w	r3, r3, #12
 8002dc8:	4a07      	ldr	r2, [pc, #28]	@ (8002de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dca:	f043 0308 	orr.w	r3, r3, #8
 8002dce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002dd4:	bf00      	nop
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010
 8002de8:	44020c00 	.word	0x44020c00

08002dec <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	e01e      	b.n	8002e42 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002e06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d00f      	beq.n	8002e36 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d80f      	bhi.n	8002e3c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d003      	beq.n	8002e30 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002e28:	e008      	b.n	8002e3c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
        break;
 8002e2e:	e008      	b.n	8002e42 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002e30:	2301      	movs	r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
        break;
 8002e34:	e005      	b.n	8002e42 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002e36:	2302      	movs	r3, #2
 8002e38:	607b      	str	r3, [r7, #4]
        break;
 8002e3a:	e002      	b.n	8002e42 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
        break;
 8002e40:	bf00      	nop
    }
  }
  return systick_source;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e010 	.word	0xe000e010
 8002e54:	44020c00 	.word	0x44020c00

08002e58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e66:	e136      	b.n	80030d6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8128 	beq.w	80030d0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x38>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b12      	cmp	r3, #18
 8002e8e:	d125      	bne.n	8002edc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	08da      	lsrs	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3208      	adds	r2, #8
 8002ed6:	6979      	ldr	r1, [r7, #20]
 8002ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d00b      	beq.n	8002f30 <HAL_GPIO_Init+0xd8>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f24:	2b11      	cmp	r3, #17
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4013      	ands	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4013      	ands	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d017      	beq.n	8002fca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d07c      	beq.n	80030d0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002fd6:	4a47      	ldr	r2, [pc, #284]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3318      	adds	r3, #24
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	220f      	movs	r2, #15
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0a9a      	lsrs	r2, r3, #10
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80030f8 <HAL_GPIO_Init+0x2a0>)
 8003000:	4013      	ands	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	00d2      	lsls	r2, r2, #3
 800300a:	4093      	lsls	r3, r2
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003012:	4938      	ldr	r1, [pc, #224]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3318      	adds	r3, #24
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003020:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003044:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800306e:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003074:	4b1f      	ldr	r3, [pc, #124]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800307a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43db      	mvns	r3, r3
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4013      	ands	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800309a:	4a16      	ldr	r2, [pc, #88]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 80030a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4013      	ands	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80030c8:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <HAL_GPIO_Init+0x29c>)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3301      	adds	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f aec1 	bne.w	8002e68 <HAL_GPIO_Init+0x10>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	44022000 	.word	0x44022000
 80030f8:	002f7f7f 	.word	0x002f7f7f

080030fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e001      	b.n	800311e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003148:	e002      	b.n	8003150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e08d      	b.n	800328a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fe86 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	@ 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d108      	bne.n	80031fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	e007      	b.n	800320e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800321c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d138      	bne.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e032      	b.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2224      	movs	r2, #36	@ 0x24
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d139      	bne.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003348:	2302      	movs	r3, #2
 800334a:	e033      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800337a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <HAL_ICACHE_Enable+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <HAL_ICACHE_Enable+0x1c>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40030400 	.word	0x40030400

080033e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0c3      	b.n	800357a <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff f884 	bl	8002514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f006 fe4b 	bl	800a0b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e03f      	b.n	80034a4 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	3315      	adds	r3, #21
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	3314      	adds	r3, #20
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	3317      	adds	r3, #23
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	3324      	adds	r3, #36	@ 0x24
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3328      	adds	r3, #40	@ 0x28
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	3304      	adds	r3, #4
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	3301      	adds	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3ba      	bcc.n	8003424 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e044      	b.n	800353e <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	3301      	adds	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	429a      	cmp	r2, r3
 8003546:	d3b5      	bcc.n	80034b4 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7c1a      	ldrb	r2, [r3, #16]
 8003550:	f88d 2000 	strb.w	r2, [sp]
 8003554:	3304      	adds	r3, #4
 8003556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003558:	f006 fde4 	bl	800a124 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7b1b      	ldrb	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f805 	bl	8003582 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f043 0202 	orr.w	r2, r3, #2
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	44020800 	.word	0x44020800

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f000 bc28 	b.w	8003e4c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fc:	4b94      	ldr	r3, [pc, #592]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 0318 	and.w	r3, r3, #24
 8003604:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003606:	4b92      	ldr	r3, [pc, #584]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b18      	cmp	r3, #24
 8003626:	d114      	bne.n	8003652 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d111      	bne.n	8003652 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 bc08 	b.w	8003e4c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800363c:	4b84      	ldr	r3, [pc, #528]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	4981      	ldr	r1, [pc, #516]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800364c:	4313      	orrs	r3, r2
 800364e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003650:	e040      	b.n	80036d4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800365a:	4b7d      	ldr	r3, [pc, #500]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7ff fa37 	bl	8002ad8 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800366e:	f7ff fa33 	bl	8002ad8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e3e5      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003680:	4b73      	ldr	r3, [pc, #460]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800368c:	4b70      	ldr	r3, [pc, #448]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	496d      	ldr	r1, [pc, #436]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800369c:	4313      	orrs	r3, r2
 800369e:	618b      	str	r3, [r1, #24]
 80036a0:	e018      	b.n	80036d4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7ff fa13 	bl	8002ad8 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80036b6:	f7ff fa0f 	bl	8002ad8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e3c1      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80036c8:	4b61      	ldr	r3, [pc, #388]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a0 	beq.w	8003822 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b18      	cmp	r3, #24
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f040 8092 	bne.w	8003822 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e3a4      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x132>
 800370c:	4b50      	ldr	r3, [pc, #320]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4f      	ldr	r2, [pc, #316]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e058      	b.n	80037cc <HAL_RCC_OscConfig+0x1e4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d112      	bne.n	8003748 <HAL_RCC_OscConfig+0x160>
 8003722:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a4a      	ldr	r2, [pc, #296]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b48      	ldr	r3, [pc, #288]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a47      	ldr	r2, [pc, #284]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003734:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b45      	ldr	r3, [pc, #276]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a44      	ldr	r2, [pc, #272]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e041      	b.n	80037cc <HAL_RCC_OscConfig+0x1e4>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003750:	d112      	bne.n	8003778 <HAL_RCC_OscConfig+0x190>
 8003752:	4b3f      	ldr	r3, [pc, #252]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3e      	ldr	r2, [pc, #248]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b3c      	ldr	r3, [pc, #240]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3b      	ldr	r2, [pc, #236]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a38      	ldr	r2, [pc, #224]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e029      	b.n	80037cc <HAL_RCC_OscConfig+0x1e4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1c0>
 8003782:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a32      	ldr	r2, [pc, #200]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b30      	ldr	r3, [pc, #192]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2f      	ldr	r2, [pc, #188]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2c      	ldr	r2, [pc, #176]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e011      	b.n	80037cc <HAL_RCC_OscConfig+0x1e4>
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a25      	ldr	r2, [pc, #148]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7ff f980 	bl	8002ad8 <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80037dc:	f7ff f97c 	bl	8002ad8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e32e      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ee:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x1f4>
 80037fa:	e012      	b.n	8003822 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7ff f96c 	bl	8002ad8 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003804:	f7ff f968 	bl	8002ad8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e31a      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003816:	4b0e      	ldr	r3, [pc, #56]	@ (8003850 <HAL_RCC_OscConfig+0x268>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 809a 	beq.w	8003964 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x25a>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b18      	cmp	r3, #24
 800383a:	d149      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d146      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e2fe      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
 800384e:	bf00      	nop
 8003850:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800385a:	4b9a      	ldr	r3, [pc, #616]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0218 	and.w	r2, r3, #24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d014      	beq.n	8003894 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800386a:	4b96      	ldr	r3, [pc, #600]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0218 	bic.w	r2, r3, #24
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	4993      	ldr	r1, [pc, #588]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800387c:	f000 fdd0 	bl	8004420 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003880:	4b91      	ldr	r3, [pc, #580]	@ (8003ac8 <HAL_RCC_OscConfig+0x4e0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f89d 	bl	80029c4 <HAL_InitTick>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e2db      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7ff f920 	bl	8002ad8 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800389c:	f7ff f91c 	bl	8002ad8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e2ce      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ae:	4b85      	ldr	r3, [pc, #532]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80038ba:	4b82      	ldr	r3, [pc, #520]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	497e      	ldr	r1, [pc, #504]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80038ce:	e049      	b.n	8003964 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02c      	beq.n	8003932 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80038d8:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0218 	bic.w	r2, r3, #24
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4977      	ldr	r1, [pc, #476]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80038ea:	4b76      	ldr	r3, [pc, #472]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a75      	ldr	r2, [pc, #468]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7ff f8ef 	bl	8002ad8 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038fe:	f7ff f8eb 	bl	8002ad8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e29d      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003910:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800391c:	4b69      	ldr	r3, [pc, #420]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	4966      	ldr	r1, [pc, #408]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	610b      	str	r3, [r1, #16]
 8003930:	e018      	b.n	8003964 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b64      	ldr	r3, [pc, #400]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a63      	ldr	r2, [pc, #396]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7ff f8cb 	bl	8002ad8 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003946:	f7ff f8c7 	bl	8002ad8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e279      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003958:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d03c      	beq.n	80039ea <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003978:	4b52      	ldr	r3, [pc, #328]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 800397a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800397e:	4a51      	ldr	r2, [pc, #324]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003984:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7ff f8a6 	bl	8002ad8 <HAL_GetTick>
 800398c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003990:	f7ff f8a2 	bl	8002ad8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e254      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039a2:	4b48      	ldr	r3, [pc, #288]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80039a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <HAL_RCC_OscConfig+0x3a8>
 80039b0:	e01b      	b.n	80039ea <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b44      	ldr	r3, [pc, #272]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80039b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039b8:	4a42      	ldr	r2, [pc, #264]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80039ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7ff f889 	bl	8002ad8 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80039ca:	f7ff f885 	bl	8002ad8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e237      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039dc:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 80039de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ef      	bne.n	80039ca <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80d2 	beq.w	8003b9c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039f8:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_RCC_OscConfig+0x4e4>)
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d118      	bne.n	8003a36 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a04:	4b31      	ldr	r3, [pc, #196]	@ (8003acc <HAL_RCC_OscConfig+0x4e4>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	4a30      	ldr	r2, [pc, #192]	@ (8003acc <HAL_RCC_OscConfig+0x4e4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a10:	f7ff f862 	bl	8002ad8 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7ff f85e 	bl	8002ad8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e210      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a2a:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <HAL_RCC_OscConfig+0x4e4>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <HAL_RCC_OscConfig+0x468>
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a44:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a4e:	e074      	b.n	8003b3a <HAL_RCC_OscConfig+0x552>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d118      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4a2>
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a5e:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a68:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6e:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a78:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7e:	4a11      	ldr	r2, [pc, #68]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a88:	e057      	b.n	8003b3a <HAL_RCC_OscConfig+0x552>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d11e      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4e8>
 8003a92:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aa8:	4a06      	ldr	r2, [pc, #24]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab8:	4a02      	ldr	r2, [pc, #8]	@ (8003ac4 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x552>
 8003ac4:	44020c00 	.word	0x44020c00
 8003ac8:	20000014 	.word	0x20000014
 8003acc:	44020800 	.word	0x44020800
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b85      	cmp	r3, #133	@ 0x85
 8003ad6:	d118      	bne.n	8003b0a <HAL_RCC_OscConfig+0x522>
 8003ad8:	4ba2      	ldr	r3, [pc, #648]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ade:	4aa1      	ldr	r2, [pc, #644]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aee:	4a9d      	ldr	r2, [pc, #628]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003af8:	4b9a      	ldr	r3, [pc, #616]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003afe:	4a99      	ldr	r2, [pc, #612]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b08:	e017      	b.n	8003b3a <HAL_RCC_OscConfig+0x552>
 8003b0a:	4b96      	ldr	r3, [pc, #600]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b10:	4a94      	ldr	r2, [pc, #592]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b1a:	4b92      	ldr	r3, [pc, #584]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b20:	4a90      	ldr	r2, [pc, #576]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b30:	4a8c      	ldr	r2, [pc, #560]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe ffc9 	bl	8002ad8 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe ffc5 	bl	8002ad8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e175      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b60:	4b80      	ldr	r3, [pc, #512]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ed      	beq.n	8003b4a <HAL_RCC_OscConfig+0x562>
 8003b6e:	e015      	b.n	8003b9c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe ffb2 	bl	8002ad8 <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fe ffae 	bl	8002ad8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e15e      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b8e:	4b75      	ldr	r3, [pc, #468]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ed      	bne.n	8003b78 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d036      	beq.n	8003c16 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d019      	beq.n	8003be4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003bb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fe ff8c 	bl	8002ad8 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003bc4:	f7fe ff88 	bl	8002ad8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e13a      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x5dc>
 8003be2:	e018      	b.n	8003c16 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003be4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5e      	ldr	r2, [pc, #376]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003bea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe ff72 	bl	8002ad8 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003bf8:	f7fe ff6e 	bl	8002ad8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e120      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c0a:	4b56      	ldr	r3, [pc, #344]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8115 	beq.w	8003e4a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b18      	cmp	r3, #24
 8003c24:	f000 80af 	beq.w	8003d86 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	f040 8086 	bne.w	8003d3e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003c32:	4b4c      	ldr	r3, [pc, #304]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4b      	ldr	r2, [pc, #300]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe ff4b 	bl	8002ad8 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c46:	f7fe ff47 	bl	8002ad8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0f9      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c58:	4b42      	ldr	r3, [pc, #264]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003c64:	4b3f      	ldr	r3, [pc, #252]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c6c:	f023 0303 	bic.w	r3, r3, #3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c78:	0212      	lsls	r2, r2, #8
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	4939      	ldr	r1, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	3b01      	subs	r3, #1
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	3b01      	subs	r3, #1
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cb2:	492c      	ldr	r1, [pc, #176]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	4a29      	ldr	r2, [pc, #164]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cbe:	f023 0310 	bic.w	r3, r3, #16
 8003cc2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc8:	4a26      	ldr	r2, [pc, #152]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003cce:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cd4:	f043 0310 	orr.w	r3, r3, #16
 8003cd8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003cda:	4b22      	ldr	r3, [pc, #136]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	f023 020c 	bic.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	491f      	ldr	r1, [pc, #124]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003cec:	4b1d      	ldr	r3, [pc, #116]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f023 0220 	bic.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf8:	491a      	ldr	r1, [pc, #104]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cfe:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fe fedf 	bl	8002ad8 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d1e:	f7fe fedb 	bl	8002ad8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e08d      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d30:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x736>
 8003d3c:	e085      	b.n	8003e4a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <HAL_RCC_OscConfig+0x77c>)
 8003d44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fec5 	bl	8002ad8 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fec1 	bl	8002ad8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d903      	bls.n	8003d68 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e073      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
 8003d64:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d68:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003d74:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	4a36      	ldr	r2, [pc, #216]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003d7a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	6293      	str	r3, [r2, #40]	@ 0x28
 8003d84:	e061      	b.n	8003e4a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d86:	4b33      	ldr	r3, [pc, #204]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d90:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d031      	beq.n	8003dfe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0203 	and.w	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d12a      	bne.n	8003dfe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d122      	bne.n	8003dfe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11a      	bne.n	8003dfe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0a5b      	lsrs	r3, r3, #9
 8003dcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d111      	bne.n	8003dfe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d108      	bne.n	8003dfe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	0e1b      	lsrs	r3, r3, #24
 8003df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e024      	b.n	8003e4c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d01a      	beq.n	8003e4a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003e14:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	4a0e      	ldr	r2, [pc, #56]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fe5a 	bl	8002ad8 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003e26:	bf00      	nop
 8003e28:	f7fe fe56 	bl	8002ad8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d0f9      	beq.n	8003e28 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e38:	4a06      	ldr	r2, [pc, #24]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <HAL_RCC_OscConfig+0x86c>)
 8003e44:	f043 0310 	orr.w	r3, r3, #16
 8003e48:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	44020c00 	.word	0x44020c00

08003e58 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e19e      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b83      	ldr	r3, [pc, #524]	@ (800407c <HAL_RCC_ClockConfig+0x224>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d910      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b80      	ldr	r3, [pc, #512]	@ (800407c <HAL_RCC_ClockConfig+0x224>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 020f 	bic.w	r2, r3, #15
 8003e82:	497e      	ldr	r1, [pc, #504]	@ (800407c <HAL_RCC_ClockConfig+0x224>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800407c <HAL_RCC_ClockConfig+0x224>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e186      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	4b74      	ldr	r3, [pc, #464]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d909      	bls.n	8003ece <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003eba:	4b71      	ldr	r3, [pc, #452]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	496d      	ldr	r1, [pc, #436]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d012      	beq.n	8003f00 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	4b68      	ldr	r3, [pc, #416]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d909      	bls.n	8003f00 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003eec:	4b64      	ldr	r3, [pc, #400]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	4961      	ldr	r1, [pc, #388]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d908      	bls.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f1c:	4b58      	ldr	r3, [pc, #352]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4955      	ldr	r1, [pc, #340]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 020f 	bic.w	r2, r3, #15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	494a      	ldr	r1, [pc, #296]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8093 	beq.w	8004090 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f72:	4b43      	ldr	r3, [pc, #268]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d121      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e113      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d115      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e107      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003fa2:	4b37      	ldr	r3, [pc, #220]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0fb      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb2:	4b33      	ldr	r3, [pc, #204]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0f3      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	492c      	ldr	r1, [pc, #176]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fe fd80 	bl	8002ad8 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d112      	bne.n	8004008 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fe fd78 	bl	8002ad8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0d7      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffa:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0318 	and.w	r3, r3, #24
 8004002:	2b18      	cmp	r3, #24
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x18c>
 8004006:	e043      	b.n	8004090 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d112      	bne.n	8004036 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004012:	f7fe fd61 	bl	8002ad8 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0c0      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004028:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 0318 	and.w	r3, r3, #24
 8004030:	2b10      	cmp	r3, #16
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_ClockConfig+0x1ba>
 8004034:	e02c      	b.n	8004090 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d122      	bne.n	8004084 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe fd4a 	bl	8002ad8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0a9      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004056:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <HAL_RCC_ClockConfig+0x228>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0318 	and.w	r3, r3, #24
 800405e:	2b08      	cmp	r3, #8
 8004060:	d1ee      	bne.n	8004040 <HAL_RCC_ClockConfig+0x1e8>
 8004062:	e015      	b.n	8004090 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fe fd38 	bl	8002ad8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d906      	bls.n	8004084 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e097      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
 800407a:	bf00      	nop
 800407c:	40022000 	.word	0x40022000
 8004080:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004084:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 0318 	and.w	r3, r3, #24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e9      	bne.n	8004064 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	4b44      	ldr	r3, [pc, #272]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d208      	bcs.n	80040be <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80040ac:	4b41      	ldr	r3, [pc, #260]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f023 020f 	bic.w	r2, r3, #15
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	493e      	ldr	r1, [pc, #248]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040be:	4b3e      	ldr	r3, [pc, #248]	@ (80041b8 <HAL_RCC_ClockConfig+0x360>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d210      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040cc:	4b3a      	ldr	r3, [pc, #232]	@ (80041b8 <HAL_RCC_ClockConfig+0x360>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 020f 	bic.w	r2, r3, #15
 80040d4:	4938      	ldr	r1, [pc, #224]	@ (80041b8 <HAL_RCC_ClockConfig+0x360>)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <HAL_RCC_ClockConfig+0x360>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e05d      	b.n	80041aa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800410a:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4927      	ldr	r1, [pc, #156]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d209      	bcs.n	800414e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800413a:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	491a      	ldr	r1, [pc, #104]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004168:	429a      	cmp	r2, r3
 800416a:	d209      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	490e      	ldr	r1, [pc, #56]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004180:	f000 f822 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCC_ClockConfig+0x35c>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490b      	ldr	r1, [pc, #44]	@ (80041bc <HAL_RCC_ClockConfig+0x364>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x368>)
 8004198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_RCC_ClockConfig+0x36c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc10 	bl	80029c4 <HAL_InitTick>
 80041a4:	4603      	mov	r3, r0
 80041a6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80041a8:	7afb      	ldrb	r3, [r7, #11]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	44020c00 	.word	0x44020c00
 80041b8:	40022000 	.word	0x40022000
 80041bc:	0800eb94 	.word	0x0800eb94
 80041c0:	20000010 	.word	0x20000010
 80041c4:	20000014 	.word	0x20000014

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	@ 0x24
 80041cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80041ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0318 	and.w	r3, r3, #24
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80041da:	4b8a      	ldr	r3, [pc, #552]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x23c>)
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e107      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041e0:	4b87      	ldr	r3, [pc, #540]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 0318 	and.w	r3, r3, #24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d112      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80041ec:	4b84      	ldr	r3, [pc, #528]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041f8:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	4a81      	ldr	r2, [pc, #516]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x240>)
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	e0f1      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800420c:	4b7e      	ldr	r3, [pc, #504]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x240>)
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e0ee      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004212:	4b7b      	ldr	r3, [pc, #492]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0318 	and.w	r3, r3, #24
 800421a:	2b10      	cmp	r3, #16
 800421c:	d102      	bne.n	8004224 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800421e:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <HAL_RCC_GetSysClockFreq+0x244>)
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e0e5      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004224:	4b76      	ldr	r3, [pc, #472]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 0318 	and.w	r3, r3, #24
 800422c:	2b18      	cmp	r3, #24
 800422e:	f040 80dd 	bne.w	80043ec <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004232:	4b73      	ldr	r3, [pc, #460]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800423c:	4b70      	ldr	r3, [pc, #448]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004246:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004248:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004254:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004258:	08db      	lsrs	r3, r3, #3
 800425a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80b7 	beq.w	80043e6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0xbe>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d056      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x16a>
 8004284:	e077      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004286:	4b5e      	ldr	r3, [pc, #376]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02d      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004292:	4b5b      	ldr	r3, [pc, #364]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	08db      	lsrs	r3, r3, #3
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	4a5a      	ldr	r2, [pc, #360]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x240>)
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042bc:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80042cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x248>
 80042d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80042dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80042ec:	e065      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004414 <HAL_RCC_GetSysClockFreq+0x24c>
 80042fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004300:	4b3f      	ldr	r3, [pc, #252]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004310:	ed97 6a02 	vldr	s12, [r7, #8]
 8004314:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x248>
 8004318:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800431c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004324:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004330:	e043      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004418 <HAL_RCC_GetSysClockFreq+0x250>
 8004340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 8004346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004354:	ed97 6a02 	vldr	s12, [r7, #8]
 8004358:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x248>
 800435c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004360:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004368:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004374:	e021      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004380:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800441c <HAL_RCC_GetSysClockFreq+0x254>
 8004384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004388:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004398:	ed97 6a02 	vldr	s12, [r7, #8]
 800439c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x248>
 80043a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80043b8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80043ba:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x238>)
 80043bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c4:	3301      	adds	r3, #1
 80043c6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043d2:	edd7 6a06 	vldr	s13, [r7, #24]
 80043d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	ee17 3a90 	vmov	r3, s15
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e004      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e001      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x240>)
 80043ee:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80043f0:	69fb      	ldr	r3, [r7, #28]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	@ 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	44020c00 	.word	0x44020c00
 8004404:	003d0900 	.word	0x003d0900
 8004408:	03d09000 	.word	0x03d09000
 800440c:	016e3600 	.word	0x016e3600
 8004410:	46000000 	.word	0x46000000
 8004414:	4c742400 	.word	0x4c742400
 8004418:	4bb71b00 	.word	0x4bb71b00
 800441c:	4a742400 	.word	0x4a742400

08004420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004424:	f7ff fed0 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <HAL_RCC_GetHCLKFreq+0x2c>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800442e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004432:	4907      	ldr	r1, [pc, #28]	@ (8004450 <HAL_RCC_GetHCLKFreq+0x30>)
 8004434:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004436:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <HAL_RCC_GetHCLKFreq+0x34>)
 8004440:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004442:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <HAL_RCC_GetHCLKFreq+0x34>)
 8004444:	681b      	ldr	r3, [r3, #0]
}
 8004446:	4618      	mov	r0, r3
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	44020c00 	.word	0x44020c00
 8004450:	0800eb94 	.word	0x0800eb94
 8004454:	20000010 	.word	0x20000010

08004458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800445c:	f7ff ffe0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	@ (8004480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	44020c00 	.word	0x44020c00
 8004480:	0800eba4 	.word	0x0800eba4

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004488:	f7ff ffca 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4904      	ldr	r1, [pc, #16]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	44020c00 	.word	0x44020c00
 80044ac:	0800eba4 	.word	0x0800eba4

080044b0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80044b4:	f7ff ffb4 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	0b1b      	lsrs	r3, r3, #12
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4904      	ldr	r1, [pc, #16]	@ (80044d8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	44020c00 	.word	0x44020c00
 80044d8:	0800eba4 	.word	0x0800eba4

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b0ba      	sub	sp, #232	@ 0xe8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004500:	2500      	movs	r5, #0
 8004502:	ea54 0305 	orrs.w	r3, r4, r5
 8004506:	d00b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004508:	4bcd      	ldr	r3, [pc, #820]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800450a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800450e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	4ac9      	ldr	r2, [pc, #804]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800451a:	430b      	orrs	r3, r1
 800451c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f002 0801 	and.w	r8, r2, #1
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	ea58 0309 	orrs.w	r3, r8, r9
 8004534:	d042      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800453a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453c:	2b05      	cmp	r3, #5
 800453e:	d823      	bhi.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004540:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004591 	.word	0x08004591
 800454c:	08004561 	.word	0x08004561
 8004550:	08004575 	.word	0x08004575
 8004554:	08004591 	.word	0x08004591
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004564:	3308      	adds	r3, #8
 8004566:	4618      	mov	r0, r3
 8004568:	f003 f906 	bl	8007778 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004572:	e00e      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004578:	3330      	adds	r3, #48	@ 0x30
 800457a:	4618      	mov	r0, r3
 800457c:	f003 f994 	bl	80078a8 <RCCEx_PLL3_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004592:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800459a:	4ba9      	ldr	r3, [pc, #676]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800459c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045a0:	f023 0107 	bic.w	r1, r3, #7
 80045a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	4aa5      	ldr	r2, [pc, #660]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f002 0a02 	and.w	sl, r2, #2
 80045c8:	f04f 0b00 	mov.w	fp, #0
 80045cc:	ea5a 030b 	orrs.w	r3, sl, fp
 80045d0:	f000 8088 	beq.w	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80045d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	2b28      	cmp	r3, #40	@ 0x28
 80045dc:	d868      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080046b9 	.word	0x080046b9
 80045e8:	080046b1 	.word	0x080046b1
 80045ec:	080046b1 	.word	0x080046b1
 80045f0:	080046b1 	.word	0x080046b1
 80045f4:	080046b1 	.word	0x080046b1
 80045f8:	080046b1 	.word	0x080046b1
 80045fc:	080046b1 	.word	0x080046b1
 8004600:	080046b1 	.word	0x080046b1
 8004604:	08004689 	.word	0x08004689
 8004608:	080046b1 	.word	0x080046b1
 800460c:	080046b1 	.word	0x080046b1
 8004610:	080046b1 	.word	0x080046b1
 8004614:	080046b1 	.word	0x080046b1
 8004618:	080046b1 	.word	0x080046b1
 800461c:	080046b1 	.word	0x080046b1
 8004620:	080046b1 	.word	0x080046b1
 8004624:	0800469d 	.word	0x0800469d
 8004628:	080046b1 	.word	0x080046b1
 800462c:	080046b1 	.word	0x080046b1
 8004630:	080046b1 	.word	0x080046b1
 8004634:	080046b1 	.word	0x080046b1
 8004638:	080046b1 	.word	0x080046b1
 800463c:	080046b1 	.word	0x080046b1
 8004640:	080046b1 	.word	0x080046b1
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046b1 	.word	0x080046b1
 800464c:	080046b1 	.word	0x080046b1
 8004650:	080046b1 	.word	0x080046b1
 8004654:	080046b1 	.word	0x080046b1
 8004658:	080046b1 	.word	0x080046b1
 800465c:	080046b1 	.word	0x080046b1
 8004660:	080046b1 	.word	0x080046b1
 8004664:	080046b9 	.word	0x080046b9
 8004668:	080046b1 	.word	0x080046b1
 800466c:	080046b1 	.word	0x080046b1
 8004670:	080046b1 	.word	0x080046b1
 8004674:	080046b1 	.word	0x080046b1
 8004678:	080046b1 	.word	0x080046b1
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046b1 	.word	0x080046b1
 8004684:	080046b9 	.word	0x080046b9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468c:	3308      	adds	r3, #8
 800468e:	4618      	mov	r0, r3
 8004690:	f003 f872 	bl	8007778 <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800469a:	e00e      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800469c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a0:	3330      	adds	r3, #48	@ 0x30
 80046a2:	4618      	mov	r0, r3
 80046a4:	f003 f900 	bl	80078a8 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80046c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046c8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80046da:	e003      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f002 0304 	and.w	r3, r2, #4
 80046f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046fe:	460b      	mov	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	d04e      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800470e:	d02c      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004710:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004714:	d825      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471a:	d028      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d81f      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004722:	2bc0      	cmp	r3, #192	@ 0xc0
 8004724:	d025      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004726:	2bc0      	cmp	r3, #192	@ 0xc0
 8004728:	d81b      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800472a:	2b80      	cmp	r3, #128	@ 0x80
 800472c:	d00f      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800472e:	2b80      	cmp	r3, #128	@ 0x80
 8004730:	d817      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01f      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004736:	2b40      	cmp	r3, #64	@ 0x40
 8004738:	d113      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800473a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473e:	3308      	adds	r3, #8
 8004740:	4618      	mov	r0, r3
 8004742:	f003 f819 	bl	8007778 <RCCEx_PLL2_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800474c:	e014      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004752:	3330      	adds	r3, #48	@ 0x30
 8004754:	4618      	mov	r0, r3
 8004756:	f003 f8a7 	bl	80078a8 <RCCEx_PLL3_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004760:	e00a      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004768:	e006      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800476a:	bf00      	nop
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004778:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004780:	4b2f      	ldr	r3, [pc, #188]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004786:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800478a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004790:	4a2b      	ldr	r2, [pc, #172]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004792:	430b      	orrs	r3, r1
 8004794:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800479e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f002 0308 	and.w	r3, r2, #8
 80047ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d056      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80047c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80047cc:	d031      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80047ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80047d2:	d82a      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047d8:	d02d      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047de:	d824      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80047e4:	d029      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80047ea:	d81e      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d818      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004800:	d113      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004806:	3308      	adds	r3, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f002 ffb5 	bl	8007778 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004814:	e017      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481a:	3330      	adds	r3, #48	@ 0x30
 800481c:	4618      	mov	r0, r3
 800481e:	f003 f843 	bl	80078a8 <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004828:	e00d      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004830:	e009      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004832:	bf00      	nop
 8004834:	e007      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004836:	bf00      	nop
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800483a:	bf00      	nop
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800483e:	bf00      	nop
 8004840:	44020c00 	.word	0x44020c00
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800484e:	4bb9      	ldr	r3, [pc, #740]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004854:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800485e:	4ab5      	ldr	r2, [pc, #724]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800486c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 0310 	and.w	r3, r2, #16
 800487c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004886:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d053      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004896:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800489a:	d031      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800489c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048a0:	d82a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048a6:	d02d      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80048a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ac:	d824      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b2:	d029      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b8:	d81e      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048be:	d011      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c4:	d818      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	d113      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d4:	3308      	adds	r3, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f002 ff4e 	bl	8007778 <RCCEx_PLL2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80048e2:	e014      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e8:	3330      	adds	r3, #48	@ 0x30
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 ffdc 	bl	80078a8 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80048f6:	e00a      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004916:	4b87      	ldr	r3, [pc, #540]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800491c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004926:	4a83      	ldr	r2, [pc, #524]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004934:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 0320 	and.w	r3, r2, #32
 8004944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d053      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004962:	d031      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004964:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004968:	d82a      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800496a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800496e:	d02d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004974:	d824      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004976:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800497a:	d029      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800497c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004980:	d81e      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d011      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498c:	d818      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004996:	d113      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	3308      	adds	r3, #8
 800499e:	4618      	mov	r0, r3
 80049a0:	f002 feea 	bl	8007778 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80049aa:	e014      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b0:	3330      	adds	r3, #48	@ 0x30
 80049b2:	4618      	mov	r0, r3
 80049b4:	f002 ff78 	bl	80078a8 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80049be:	e00a      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049c6:	e006      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80049de:	4b55      	ldr	r3, [pc, #340]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e4:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80049e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	4a51      	ldr	r2, [pc, #324]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d053      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a26:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a2a:	d031      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004a2c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a30:	d82a      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3c:	d824      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a42:	d029      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004a44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a48:	d81e      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a4e:	d011      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004a50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a54:	d818      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d020      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a5e:	d113      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	3308      	adds	r3, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f002 fe86 	bl	8007778 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004a72:	e014      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a78:	3330      	adds	r3, #48	@ 0x30
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f002 ff14 	bl	80078a8 <RCCEx_PLL3_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004a86:	e00a      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a8e:	e006      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a90:	bf00      	nop
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a94:	bf00      	nop
 8004a96:	e002      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a98:	bf00      	nop
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004aa6:	4b23      	ldr	r3, [pc, #140]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004abe:	e003      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ac4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ade:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d03d      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004af2:	d01b      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004af8:	d814      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004afe:	d017      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b04:	d80e      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d109      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b14:	3330      	adds	r3, #48	@ 0x30
 8004b16:	4618      	mov	r0, r3
 8004b18:	f002 fec6 	bl	80078a8 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004b22:	e00a      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b2a:	e006      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e004      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004b30:	bf00      	nop
 8004b32:	e002      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004b34:	44020c00 	.word	0x44020c00
        break;
 8004b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b42:	4b99      	ldr	r3, [pc, #612]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b48:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b52:	4a95      	ldr	r2, [pc, #596]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d03b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004b90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b94:	d814      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004b96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b9a:	d017      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004b9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ba0:	d80e      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d014      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb0:	3330      	adds	r3, #48	@ 0x30
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f002 fe78 	bl	80078a8 <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004bda:	4b73      	ldr	r3, [pc, #460]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004be0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bea:	4a6f      	ldr	r2, [pc, #444]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004bf2:	e003      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d03d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c28:	d01b      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004c2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c2e:	d814      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c34:	d017      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3a:	d80e      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c44:	d109      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	3330      	adds	r3, #48	@ 0x30
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f002 fe2b 	bl	80078a8 <RCCEx_PLL3_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004c58:	e008      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004c74:	4b4c      	ldr	r3, [pc, #304]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c86:	4a48      	ldr	r2, [pc, #288]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c94:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	d035      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc4:	d015      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cca:	d80e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd4:	d109      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cda:	3330      	adds	r3, #48	@ 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f002 fde3 	bl	80078a8 <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004ce8:	e006      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cf0:	e002      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10d      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004d00:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d06:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d12:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d037      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d50:	d015      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d56:	d80e      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d012      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d60:	d109      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d66:	3330      	adds	r3, #48	@ 0x30
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 fd9d 	bl	80078a8 <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d7c:	e002      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004d82:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10f      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	4a02      	ldr	r2, [pc, #8]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004da0:	430b      	orrs	r3, r1
 8004da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004da6:	e005      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004da8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004db0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004db4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dc6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d00e      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004dd0:	4bb8      	ldr	r3, [pc, #736]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	4ab7      	ldr	r2, [pc, #732]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dda:	61d3      	str	r3, [r2, #28]
 8004ddc:	4bb5      	ldr	r3, [pc, #724]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004de8:	4ab2      	ldr	r2, [pc, #712]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d055      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e12:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e16:	d031      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004e18:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e1c:	d82a      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d02d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e28:	d824      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2e:	d029      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e34:	d81e      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3a:	d011      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d818      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4a:	d113      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e50:	3308      	adds	r3, #8
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 fc90 	bl	8007778 <RCCEx_PLL2_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004e5e:	e014      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e64:	3330      	adds	r3, #48	@ 0x30
 8004e66:	4618      	mov	r0, r3
 8004e68:	f002 fd1e 	bl	80078a8 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004e72:	e00a      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e7a:	e006      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004e80:	bf00      	nop
 8004e82:	e002      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10d      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e92:	4b88      	ldr	r3, [pc, #544]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e98:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea4:	4a83      	ldr	r2, [pc, #524]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eb2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ec8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d055      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ede:	d031      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004ee0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ee4:	d82a      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eea:	d02d      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef0:	d824      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ef6:	d029      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ef8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004efc:	d81e      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f02:	d011      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f08:	d818      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f12:	d113      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fc2c 	bl	8007778 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f26:	e014      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 fcba 	bl	80078a8 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f42:	e006      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f44:	bf00      	nop
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004f5a:	4b56      	ldr	r3, [pc, #344]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	4a51      	ldr	r2, [pc, #324]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004f74:	e003      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d032      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d80f      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d211      	bcs.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d911      	bls.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d109      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f002 fbdd 	bl	8007778 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10d      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004fdc:	4b35      	ldr	r3, [pc, #212]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fe2:	f023 0107 	bic.w	r1, r3, #7
 8004fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fee:	4a31      	ldr	r2, [pc, #196]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ffc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	2100      	movs	r1, #0
 800500a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800500c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005012:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d024      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800501c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005028:	2b08      	cmp	r3, #8
 800502a:	d005      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005042:	4b1c      	ldr	r3, [pc, #112]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005048:	f023 0108 	bic.w	r1, r3, #8
 800504c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005054:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005056:	430b      	orrs	r3, r1
 8005058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005062:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005072:	653b      	str	r3, [r7, #80]	@ 0x50
 8005074:	2300      	movs	r3, #0
 8005076:	657b      	str	r3, [r7, #84]	@ 0x54
 8005078:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	f000 80b9 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005084:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	4a0b      	ldr	r2, [pc, #44]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005090:	f7fd fd22 	bl	8002ad8 <HAL_GetTick>
 8005094:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005098:	e010      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509a:	f7fd fd1d 	bl	8002ad8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d908      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050b0:	e00a      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80050b2:	bf00      	nop
 80050b4:	44020c00 	.word	0x44020c00
 80050b8:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80050bc:	4bba      	ldr	r3, [pc, #744]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0e8      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80050c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 808e 	bne.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050d2:	4bb6      	ldr	r3, [pc, #728]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d023      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80050e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ec:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80050f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01b      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050f8:	4bac      	ldr	r3, [pc, #688]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005106:	4ba9      	ldr	r3, [pc, #676]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800510c:	4aa7      	ldr	r2, [pc, #668]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800510e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4ba5      	ldr	r3, [pc, #660]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800511c:	4aa3      	ldr	r2, [pc, #652]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005126:	4aa1      	ldr	r2, [pc, #644]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fccc 	bl	8002ad8 <HAL_GetTick>
 8005140:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005144:	e00d      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fd fcc7 	bl	8002ad8 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005150:	1ad2      	subs	r2, r2, r3
 8005152:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005156:	429a      	cmp	r2, r3
 8005158:	d903      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005160:	e006      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005162:	4b92      	ldr	r3, [pc, #584]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ea      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005170:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d135      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800517c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005188:	d110      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800518a:	4b88      	ldr	r3, [pc, #544]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005196:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051a0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80051a4:	4a81      	ldr	r2, [pc, #516]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	61d3      	str	r3, [r2, #28]
 80051aa:	e005      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80051ac:	4b7f      	ldr	r3, [pc, #508]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	4a7e      	ldr	r2, [pc, #504]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051b6:	61d3      	str	r3, [r2, #28]
 80051b8:	4b7c      	ldr	r3, [pc, #496]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051be:	4a7b      	ldr	r2, [pc, #492]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051c8:	4b78      	ldr	r3, [pc, #480]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ca:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80051ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051da:	4a74      	ldr	r2, [pc, #464]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051dc:	430b      	orrs	r3, r1
 80051de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005204:	2300      	movs	r3, #0
 8005206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005208:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800520c:	460b      	mov	r3, r1
 800520e:	4313      	orrs	r3, r2
 8005210:	d035      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800521a:	2b30      	cmp	r3, #48	@ 0x30
 800521c:	d014      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800521e:	2b30      	cmp	r3, #48	@ 0x30
 8005220:	d80e      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005222:	2b20      	cmp	r3, #32
 8005224:	d012      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d80a      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800522e:	2b10      	cmp	r3, #16
 8005230:	d106      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005232:	4b5e      	ldr	r3, [pc, #376]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	4a5d      	ldr	r2, [pc, #372]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005246:	e004      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005252:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10d      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800525a:	4b54      	ldr	r3, [pc, #336]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800525c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005260:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800526c:	4a4f      	ldr	r2, [pc, #316]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800526e:	430b      	orrs	r3, r1
 8005270:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005276:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800527a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800527e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800528a:	643b      	str	r3, [r7, #64]	@ 0x40
 800528c:	2300      	movs	r3, #0
 800528e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005290:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d033      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d007      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80052aa:	e010      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ac:	4b3f      	ldr	r3, [pc, #252]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	4a3e      	ldr	r2, [pc, #248]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80052b8:	e00d      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052be:	3308      	adds	r3, #8
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 fa59 	bl	8007778 <RCCEx_PLL2_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80052cc:	e003      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80052de:	4b33      	ldr	r3, [pc, #204]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052e4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80052e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f0:	4a2e      	ldr	r2, [pc, #184]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005310:	2300      	movs	r3, #0
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005314:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005318:	460b      	mov	r3, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	d04c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800531e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005326:	2b04      	cmp	r3, #4
 8005328:	d827      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005345 	.word	0x08005345
 8005334:	08005353 	.word	0x08005353
 8005338:	08005367 	.word	0x08005367
 800533c:	08005383 	.word	0x08005383
 8005340:	08005383 	.word	0x08005383
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005350:	e018      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005356:	3308      	adds	r3, #8
 8005358:	4618      	mov	r0, r3
 800535a:	f002 fa0d 	bl	8007778 <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005364:	e00e      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536a:	3330      	adds	r3, #48	@ 0x30
 800536c:	4618      	mov	r0, r3
 800536e:	f002 fa9b 	bl	80078a8 <RCCEx_PLL3_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005378:	e004      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d111      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800538e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005392:	f023 0107 	bic.w	r1, r3, #7
 8005396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800539a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800539e:	4a03      	ldr	r2, [pc, #12]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053a0:	430b      	orrs	r3, r1
 80053a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053a6:	e007      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80053a8:	44020800 	.word	0x44020800
 80053ac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f000 8081 	beq.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80053d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d85f      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800546d 	.word	0x0800546d
 80053ec:	080054a3 	.word	0x080054a3
 80053f0:	080054a3 	.word	0x080054a3
 80053f4:	080054a3 	.word	0x080054a3
 80053f8:	080054a3 	.word	0x080054a3
 80053fc:	080054a3 	.word	0x080054a3
 8005400:	080054a3 	.word	0x080054a3
 8005404:	080054a3 	.word	0x080054a3
 8005408:	0800547b 	.word	0x0800547b
 800540c:	080054a3 	.word	0x080054a3
 8005410:	080054a3 	.word	0x080054a3
 8005414:	080054a3 	.word	0x080054a3
 8005418:	080054a3 	.word	0x080054a3
 800541c:	080054a3 	.word	0x080054a3
 8005420:	080054a3 	.word	0x080054a3
 8005424:	080054a3 	.word	0x080054a3
 8005428:	0800548f 	.word	0x0800548f
 800542c:	080054a3 	.word	0x080054a3
 8005430:	080054a3 	.word	0x080054a3
 8005434:	080054a3 	.word	0x080054a3
 8005438:	080054a3 	.word	0x080054a3
 800543c:	080054a3 	.word	0x080054a3
 8005440:	080054a3 	.word	0x080054a3
 8005444:	080054a3 	.word	0x080054a3
 8005448:	080054ab 	.word	0x080054ab
 800544c:	080054a3 	.word	0x080054a3
 8005450:	080054a3 	.word	0x080054a3
 8005454:	080054a3 	.word	0x080054a3
 8005458:	080054a3 	.word	0x080054a3
 800545c:	080054a3 	.word	0x080054a3
 8005460:	080054a3 	.word	0x080054a3
 8005464:	080054a3 	.word	0x080054a3
 8005468:	080054ab 	.word	0x080054ab
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546c:	4bb9      	ldr	r3, [pc, #740]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	4ab8      	ldr	r2, [pc, #736]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005476:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005478:	e018      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800547a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547e:	3308      	adds	r3, #8
 8005480:	4618      	mov	r0, r3
 8005482:	f002 f979 	bl	8007778 <RCCEx_PLL2_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800548c:	e00e      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800548e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005492:	3330      	adds	r3, #48	@ 0x30
 8005494:	4618      	mov	r0, r3
 8005496:	f002 fa07 	bl	80078a8 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054a0:	e004      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80054aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10d      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054b4:	4ba7      	ldr	r3, [pc, #668]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054c6:	4aa3      	ldr	r2, [pc, #652]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80054d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e6:	2300      	movs	r3, #0
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80054ee:	460b      	mov	r3, r1
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d04e      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80054f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005500:	d02e      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005506:	d827      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005508:	2bc0      	cmp	r3, #192	@ 0xc0
 800550a:	d02b      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800550c:	2bc0      	cmp	r3, #192	@ 0xc0
 800550e:	d823      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005510:	2b80      	cmp	r3, #128	@ 0x80
 8005512:	d017      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005514:	2b80      	cmp	r3, #128	@ 0x80
 8005516:	d81f      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d007      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005520:	e01a      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005522:	4b8c      	ldr	r3, [pc, #560]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	4a8b      	ldr	r2, [pc, #556]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800552c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800552e:	e01a      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005534:	3308      	adds	r3, #8
 8005536:	4618      	mov	r0, r3
 8005538:	f002 f91e 	bl	8007778 <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005542:	e010      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005548:	3330      	adds	r3, #48	@ 0x30
 800554a:	4618      	mov	r0, r3
 800554c:	f002 f9ac 	bl	80078a8 <RCCEx_PLL3_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005556:	e006      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800555e:	e002      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005566:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10d      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800556e:	4b79      	ldr	r3, [pc, #484]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005574:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800557c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005580:	4974      	ldr	r1, [pc, #464]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800558e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d055      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80055ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055b6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055ba:	d031      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80055bc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055c0:	d82a      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c6:	d02d      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d824      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80055ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055d2:	d029      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80055d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055d8:	d81e      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055de:	d011      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e4:	d818      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d020      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ee:	d113      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f4:	3308      	adds	r3, #8
 80055f6:	4618      	mov	r0, r3
 80055f8:	f002 f8be 	bl	8007778 <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005602:	e014      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005608:	3330      	adds	r3, #48	@ 0x30
 800560a:	4618      	mov	r0, r3
 800560c:	f002 f94c 	bl	80078a8 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005616:	e00a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800561e:	e006      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005620:	bf00      	nop
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005624:	bf00      	nop
 8005626:	e002      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005636:	4b47      	ldr	r3, [pc, #284]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800563c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005644:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005648:	4942      	ldr	r1, [pc, #264]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005656:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800565a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	2100      	movs	r1, #0
 8005664:	61b9      	str	r1, [r7, #24]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d03c      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800567e:	2b03      	cmp	r3, #3
 8005680:	d81b      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056c3 	.word	0x080056c3
 800568c:	08005699 	.word	0x08005699
 8005690:	080056a7 	.word	0x080056a7
 8005694:	080056c3 	.word	0x080056c3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005698:	4b2e      	ldr	r3, [pc, #184]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	4a2d      	ldr	r2, [pc, #180]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800569e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80056a4:	e00e      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056aa:	3308      	adds	r3, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f002 f863 	bl	8007778 <RCCEx_PLL2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80056b8:	e004      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80056c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10d      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80056ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d2:	f023 0203 	bic.w	r2, r3, #3
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056de:	491d      	ldr	r1, [pc, #116]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056ec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	2100      	movs	r1, #0
 80056fa:	6139      	str	r1, [r7, #16]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d03c      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800570c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d00e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800571a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571e:	d815      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d019      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005728:	d110      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572a:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	4a09      	ldr	r2, [pc, #36]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005734:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005736:	e010      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573c:	3308      	adds	r3, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f002 f81a 	bl	8007778 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005754:	44020c00 	.word	0x44020c00
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005762:	4b3d      	ldr	r3, [pc, #244]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800576c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005774:	4938      	ldr	r1, [pc, #224]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005782:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	2100      	movs	r1, #0
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d038      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80057a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057aa:	2b30      	cmp	r3, #48	@ 0x30
 80057ac:	d01b      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80057ae:	2b30      	cmp	r3, #48	@ 0x30
 80057b0:	d815      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d002      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d007      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80057ba:	e010      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b26      	ldr	r3, [pc, #152]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	4a25      	ldr	r2, [pc, #148]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80057c8:	e00e      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ce:	3330      	adds	r3, #48	@ 0x30
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f869 	bl	80078a8 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80057dc:	e004      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80057e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80057f0:	4b19      	ldr	r3, [pc, #100]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005802:	4915      	ldr	r1, [pc, #84]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800580a:	e003      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005810:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	2100      	movs	r1, #0
 800581e:	6039      	str	r1, [r7, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	e9d7 1200 	ldrd	r1, r2, [r7]
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	d00c      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005830:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005836:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800583e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005842:	4905      	ldr	r1, [pc, #20]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800584a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800584e:	4618      	mov	r0, r3
 8005850:	37e8      	adds	r7, #232	@ 0xe8
 8005852:	46bd      	mov	sp, r7
 8005854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005858:	44020c00 	.word	0x44020c00

0800585c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800585c:	b480      	push	{r7}
 800585e:	b08b      	sub	sp, #44	@ 0x2c
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005864:	4bad      	ldr	r3, [pc, #692]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800586e:	4bab      	ldr	r3, [pc, #684]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005878:	4ba8      	ldr	r3, [pc, #672]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005882:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005884:	4ba5      	ldr	r3, [pc, #660]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800588e:	4ba3      	ldr	r3, [pc, #652]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8126 	beq.w	8005afe <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d053      	beq.n	8005960 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d86f      	bhi.n	800599e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d003      	beq.n	80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d02b      	beq.n	8005922 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80058ca:	e068      	b.n	800599e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058cc:	4b93      	ldr	r3, [pc, #588]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	4a92      	ldr	r2, [pc, #584]	@ (8005b20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
 80058dc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005900:	ed97 6a04 	vldr	s12, [r7, #16]
 8005904:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005b24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005920:	e068      	b.n	80059f4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005b28 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005942:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800595e:	e049      	b.n	80059f4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005b2c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005980:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005b24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005998:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800599c:	e02a      	b.n	80059f4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800599e:	4b5f      	ldr	r3, [pc, #380]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005b20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80059d6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005b24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059f2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059f4:	4b49      	ldr	r3, [pc, #292]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a00:	d121      	bne.n	8005a46 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005a02:	4b46      	ldr	r3, [pc, #280]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d017      	beq.n	8005a3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a0e:	4b43      	ldr	r3, [pc, #268]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a12:	0a5b      	lsrs	r3, r3, #9
 8005a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a24:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005a28:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e006      	b.n	8005a4c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a4c:	4b33      	ldr	r3, [pc, #204]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a58:	d121      	bne.n	8005a9e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005a5a:	4b30      	ldr	r3, [pc, #192]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a66:	4b2d      	ldr	r3, [pc, #180]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005a78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005a80:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	605a      	str	r2, [r3, #4]
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab0:	d121      	bne.n	8005af6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005abe:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac2:	0e1b      	lsrs	r3, r3, #24
 8005ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ad8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005aec:	e010      	b.n	8005b10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	e00c      	b.n	8005b10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	e008      	b.n	8005b10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	372c      	adds	r7, #44	@ 0x2c
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	44020c00 	.word	0x44020c00
 8005b20:	03d09000 	.word	0x03d09000
 8005b24:	46000000 	.word	0x46000000
 8005b28:	4a742400 	.word	0x4a742400
 8005b2c:	4bb71b00 	.word	0x4bb71b00

08005b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b08b      	sub	sp, #44	@ 0x2c
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005b38:	4bad      	ldr	r3, [pc, #692]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b40:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005b42:	4bab      	ldr	r3, [pc, #684]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005b4c:	4ba8      	ldr	r3, [pc, #672]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b56:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005b58:	4ba5      	ldr	r3, [pc, #660]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005b62:	4ba3      	ldr	r3, [pc, #652]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8126 	beq.w	8005dd2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d053      	beq.n	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d86f      	bhi.n	8005c72 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d02b      	beq.n	8005bf6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005b9e:	e068      	b.n	8005c72 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ba0:	4b93      	ldr	r3, [pc, #588]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	08db      	lsrs	r3, r3, #3
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	4a92      	ldr	r2, [pc, #584]	@ (8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	ee07 3a90 	vmov	s15, r3
 8005bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bd8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005bf4:	e068      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c00:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c32:	e049      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c50:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c54:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c70:	e02a      	b.n	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c72:	4b5f      	ldr	r3, [pc, #380]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005caa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005cc6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cc8:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cd4:	d121      	bne.n	8005d1a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005cd6:	4b46      	ldr	r3, [pc, #280]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ce2:	4b43      	ldr	r3, [pc, #268]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	0a5b      	lsrs	r3, r3, #9
 8005ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005cfc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d08:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e006      	b.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d20:	4b33      	ldr	r3, [pc, #204]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d2c:	d121      	bne.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005d2e:	4b30      	ldr	r3, [pc, #192]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d017      	beq.n	8005d6a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d50:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005d54:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d60:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	e006      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d78:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d84:	d121      	bne.n	8005dca <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d017      	beq.n	8005dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d92:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	0e1b      	lsrs	r3, r3, #24
 8005d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005dac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dc0:	e010      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	e00c      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	e008      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	372c      	adds	r7, #44	@ 0x2c
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	44020c00 	.word	0x44020c00
 8005df4:	03d09000 	.word	0x03d09000
 8005df8:	46000000 	.word	0x46000000
 8005dfc:	4a742400 	.word	0x4a742400
 8005e00:	4bb71b00 	.word	0x4bb71b00

08005e04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b08b      	sub	sp, #44	@ 0x2c
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e0c:	4bad      	ldr	r3, [pc, #692]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e14:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e16:	4bab      	ldr	r3, [pc, #684]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005e20:	4ba8      	ldr	r3, [pc, #672]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e2a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005e2c:	4ba5      	ldr	r3, [pc, #660]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e36:	4ba3      	ldr	r3, [pc, #652]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8126 	beq.w	80060a6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d053      	beq.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d86f      	bhi.n	8005f46 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d02b      	beq.n	8005eca <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005e72:	e068      	b.n	8005f46 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e74:	4b93      	ldr	r3, [pc, #588]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	4a92      	ldr	r2, [pc, #584]	@ (80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	ee07 3a90 	vmov	s15, r3
 8005e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005eac:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005ec8:	e068      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005eea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f06:	e049      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f24:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f28:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f44:	e02a      	b.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f46:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	08db      	lsrs	r3, r3, #3
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	4a5d      	ldr	r2, [pc, #372]	@ (80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f7e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f9a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f9c:	4b49      	ldr	r3, [pc, #292]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa8:	d121      	bne.n	8005fee <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005faa:	4b46      	ldr	r3, [pc, #280]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fb6:	4b43      	ldr	r3, [pc, #268]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fba:	0a5b      	lsrs	r3, r3, #9
 8005fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005fd0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fdc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e002      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ff4:	4b33      	ldr	r3, [pc, #204]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006000:	d121      	bne.n	8006046 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006002:	4b30      	ldr	r3, [pc, #192]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d017      	beq.n	800603e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800600e:	4b2d      	ldr	r3, [pc, #180]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006024:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006028:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800602c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006034:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	e006      	b.n	800604c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e002      	b.n	800604c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800604c:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006058:	d121      	bne.n	800609e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800605a:	4b1a      	ldr	r3, [pc, #104]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d017      	beq.n	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006066:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	0e1b      	lsrs	r3, r3, #24
 800606c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006080:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006094:	e010      	b.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	e00c      	b.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	e008      	b.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	372c      	adds	r7, #44	@ 0x2c
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	44020c00 	.word	0x44020c00
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4a742400 	.word	0x4a742400
 80060d4:	4bb71b00 	.word	0x4bb71b00

080060d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b08f      	sub	sp, #60	@ 0x3c
 80060dc:	af00      	add	r7, sp, #0
 80060de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80060e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80060ea:	4321      	orrs	r1, r4
 80060ec:	d150      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060ee:	4b26      	ldr	r3, [pc, #152]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80060fa:	4b23      	ldr	r3, [pc, #140]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d108      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610e:	d104      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
 8006116:	f001 bb20 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800611a:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800611c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006128:	d108      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006130:	d104      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006132:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
 8006138:	f001 bb0f 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800613c:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006148:	d119      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006150:	d115      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800615a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615e:	d30a      	bcc.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006160:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800616a:	4a08      	ldr	r2, [pc, #32]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006172:	f001 baf2 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800617a:	f001 baee 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
 8006182:	f001 baea 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006186:	bf00      	nop
 8006188:	44020c00 	.word	0x44020c00
 800618c:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006194:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006198:	ea50 0104 	orrs.w	r1, r0, r4
 800619c:	f000 8615 	beq.w	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80061a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a4:	2801      	cmp	r0, #1
 80061a6:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80061aa:	f081 82d3 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061b2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80061b6:	ea50 0104 	orrs.w	r1, r0, r4
 80061ba:	f000 84d8 	beq.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80061be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c2:	2801      	cmp	r0, #1
 80061c4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80061c8:	f081 82c4 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061d0:	f1a1 0410 	sub.w	r4, r1, #16
 80061d4:	ea50 0104 	orrs.w	r1, r0, r4
 80061d8:	f001 8288 	beq.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80061dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061e0:	2801      	cmp	r0, #1
 80061e2:	f171 0110 	sbcs.w	r1, r1, #16
 80061e6:	f081 82b5 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ee:	f1a1 0408 	sub.w	r4, r1, #8
 80061f2:	ea50 0104 	orrs.w	r1, r0, r4
 80061f6:	f001 81fe 	beq.w	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80061fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061fe:	2801      	cmp	r0, #1
 8006200:	f171 0108 	sbcs.w	r1, r1, #8
 8006204:	f081 82a6 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800620c:	1f0c      	subs	r4, r1, #4
 800620e:	ea50 0104 	orrs.w	r1, r0, r4
 8006212:	f000 8753 	beq.w	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800621a:	2801      	cmp	r0, #1
 800621c:	f171 0104 	sbcs.w	r1, r1, #4
 8006220:	f081 8298 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006228:	1e8c      	subs	r4, r1, #2
 800622a:	ea50 0104 	orrs.w	r1, r0, r4
 800622e:	f001 8173 	beq.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8006232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006236:	2801      	cmp	r0, #1
 8006238:	f171 0102 	sbcs.w	r1, r1, #2
 800623c:	f081 828a 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006244:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006248:	4321      	orrs	r1, r4
 800624a:	f001 80fe 	beq.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800624e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006252:	4ccb      	ldr	r4, [pc, #812]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006254:	42a0      	cmp	r0, r4
 8006256:	f171 0100 	sbcs.w	r1, r1, #0
 800625a:	f081 827b 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800625e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006262:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006266:	4321      	orrs	r1, r4
 8006268:	f001 8076 	beq.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800626c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006270:	4cc4      	ldr	r4, [pc, #784]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8006272:	42a0      	cmp	r0, r4
 8006274:	f171 0100 	sbcs.w	r1, r1, #0
 8006278:	f081 826c 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800627c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006280:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006284:	4321      	orrs	r1, r4
 8006286:	f000 87b5 	beq.w	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800628a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800628e:	4cbe      	ldr	r4, [pc, #760]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006290:	42a0      	cmp	r0, r4
 8006292:	f171 0100 	sbcs.w	r1, r1, #0
 8006296:	f081 825d 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800629a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800629e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80062a2:	4321      	orrs	r1, r4
 80062a4:	f000 8738 	beq.w	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80062a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ac:	4cb7      	ldr	r4, [pc, #732]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80062ae:	42a0      	cmp	r0, r4
 80062b0:	f171 0100 	sbcs.w	r1, r1, #0
 80062b4:	f081 824e 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062bc:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80062c0:	4321      	orrs	r1, r4
 80062c2:	f001 81cd 	beq.w	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80062c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ca:	4cb1      	ldr	r4, [pc, #708]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	f171 0100 	sbcs.w	r1, r1, #0
 80062d2:	f081 823f 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062da:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80062de:	4321      	orrs	r1, r4
 80062e0:	f000 80d9 	beq.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80062e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e8:	4caa      	ldr	r4, [pc, #680]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80062ea:	42a0      	cmp	r0, r4
 80062ec:	f171 0100 	sbcs.w	r1, r1, #0
 80062f0:	f081 8230 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062f8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80062fc:	4321      	orrs	r1, r4
 80062fe:	f000 83da 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006306:	4ca4      	ldr	r4, [pc, #656]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006308:	42a0      	cmp	r0, r4
 800630a:	f171 0100 	sbcs.w	r1, r1, #0
 800630e:	f081 8221 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006316:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800631a:	4321      	orrs	r1, r4
 800631c:	f000 8627 	beq.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006324:	4c9d      	ldr	r4, [pc, #628]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006326:	42a0      	cmp	r0, r4
 8006328:	f171 0100 	sbcs.w	r1, r1, #0
 800632c:	f081 8212 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006334:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006338:	4321      	orrs	r1, r4
 800633a:	f000 857a 	beq.w	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800633e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006342:	4c97      	ldr	r4, [pc, #604]	@ (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8006344:	42a0      	cmp	r0, r4
 8006346:	f171 0100 	sbcs.w	r1, r1, #0
 800634a:	f081 8203 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800634e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006352:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006356:	4321      	orrs	r1, r4
 8006358:	f000 84fb 	beq.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800635c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006360:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006364:	f171 0100 	sbcs.w	r1, r1, #0
 8006368:	f081 81f4 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800636c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006370:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006374:	4321      	orrs	r1, r4
 8006376:	f000 84a9 	beq.w	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800637a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800637e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006382:	42a0      	cmp	r0, r4
 8006384:	f171 0100 	sbcs.w	r1, r1, #0
 8006388:	f081 81e4 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800638c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006390:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006394:	4321      	orrs	r1, r4
 8006396:	f000 8456 	beq.w	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800639a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639e:	f244 0401 	movw	r4, #16385	@ 0x4001
 80063a2:	42a0      	cmp	r0, r4
 80063a4:	f171 0100 	sbcs.w	r1, r1, #0
 80063a8:	f081 81d4 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063b0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80063b4:	4321      	orrs	r1, r4
 80063b6:	f000 8403 	beq.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80063ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063be:	f242 0401 	movw	r4, #8193	@ 0x2001
 80063c2:	42a0      	cmp	r0, r4
 80063c4:	f171 0100 	sbcs.w	r1, r1, #0
 80063c8:	f081 81c4 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063d0:	2821      	cmp	r0, #33	@ 0x21
 80063d2:	f171 0100 	sbcs.w	r1, r1, #0
 80063d6:	d255      	bcs.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80063d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063dc:	4301      	orrs	r1, r0
 80063de:	f001 81b9 	beq.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063e6:	1e42      	subs	r2, r0, #1
 80063e8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80063ec:	2a20      	cmp	r2, #32
 80063ee:	f173 0100 	sbcs.w	r1, r3, #0
 80063f2:	f081 81af 	bcs.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063f6:	2a1f      	cmp	r2, #31
 80063f8:	f201 81ac 	bhi.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063fc:	a101      	add	r1, pc, #4	@ (adr r1, 8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80063fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006402:	bf00      	nop
 8006404:	080064db 	.word	0x080064db
 8006408:	080065d9 	.word	0x080065d9
 800640c:	08007755 	.word	0x08007755
 8006410:	08006699 	.word	0x08006699
 8006414:	08007755 	.word	0x08007755
 8006418:	08007755 	.word	0x08007755
 800641c:	08007755 	.word	0x08007755
 8006420:	08006769 	.word	0x08006769
 8006424:	08007755 	.word	0x08007755
 8006428:	08007755 	.word	0x08007755
 800642c:	08007755 	.word	0x08007755
 8006430:	08007755 	.word	0x08007755
 8006434:	08007755 	.word	0x08007755
 8006438:	08007755 	.word	0x08007755
 800643c:	08007755 	.word	0x08007755
 8006440:	0800684d 	.word	0x0800684d
 8006444:	08007755 	.word	0x08007755
 8006448:	08007755 	.word	0x08007755
 800644c:	08007755 	.word	0x08007755
 8006450:	08007755 	.word	0x08007755
 8006454:	08007755 	.word	0x08007755
 8006458:	08007755 	.word	0x08007755
 800645c:	08007755 	.word	0x08007755
 8006460:	08007755 	.word	0x08007755
 8006464:	08007755 	.word	0x08007755
 8006468:	08007755 	.word	0x08007755
 800646c:	08007755 	.word	0x08007755
 8006470:	08007755 	.word	0x08007755
 8006474:	08007755 	.word	0x08007755
 8006478:	08007755 	.word	0x08007755
 800647c:	08007755 	.word	0x08007755
 8006480:	08006923 	.word	0x08006923
 8006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006488:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800648c:	430b      	orrs	r3, r1
 800648e:	f000 82b3 	beq.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006492:	f001 b95f 	b.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006496:	4b43      	ldr	r3, [pc, #268]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064a8:	f107 0320 	add.w	r3, r7, #32
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff f9d5 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064b6:	f001 b950 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	d108      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fb33 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064ce:	f001 b944 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064d6:	f001 b940 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064da:	4b32      	ldr	r3, [pc, #200]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80064dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fd ffca 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 80064f0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80064f2:	f001 b932 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80064f6:	4b2b      	ldr	r3, [pc, #172]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006502:	d10a      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	2b01      	cmp	r3, #1
 8006508:	d107      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fb0e 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	e05c      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800651a:	4b22      	ldr	r3, [pc, #136]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006526:	d10a      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	2b02      	cmp	r3, #2
 800652c:	d107      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fc66 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	637b      	str	r3, [r7, #52]	@ 0x34
 800653c:	e04a      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800653e:	4b19      	ldr	r3, [pc, #100]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d10c      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b03      	cmp	r3, #3
 800654e:	d109      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006550:	4b14      	ldr	r3, [pc, #80]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
 8006562:	e037      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006564:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800656c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006570:	d11e      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	2b04      	cmp	r3, #4
 8006576:	d11b      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8006578:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800657a:	637b      	str	r3, [r7, #52]	@ 0x34
 800657c:	e02a      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800657e:	bf00      	nop
 8006580:	40000001 	.word	0x40000001
 8006584:	20000001 	.word	0x20000001
 8006588:	10000001 	.word	0x10000001
 800658c:	08000001 	.word	0x08000001
 8006590:	04000001 	.word	0x04000001
 8006594:	00400001 	.word	0x00400001
 8006598:	00200001 	.word	0x00200001
 800659c:	00040001 	.word	0x00040001
 80065a0:	00020001 	.word	0x00020001
 80065a4:	44020c00 	.word	0x44020c00
 80065a8:	03d09000 	.word	0x03d09000
 80065ac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80065b0:	4ba3      	ldr	r3, [pc, #652]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d106      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	2b05      	cmp	r3, #5
 80065c2:	d103      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80065c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ca:	e003      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065d0:	f001 b8c3 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80065d4:	f001 b8c1 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065d8:	4b99      	ldr	r3, [pc, #612]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fd ff35 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 80065ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80065f0:	f001 b8b3 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80065f4:	4b92      	ldr	r3, [pc, #584]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006600:	d10a      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	2b08      	cmp	r3, #8
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006608:	f107 0314 	add.w	r3, r7, #20
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fa8f 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
 8006616:	e03d      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	2b10      	cmp	r3, #16
 800661c:	d108      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fbee 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800662c:	f001 b895 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006630:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d10c      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	2b18      	cmp	r3, #24
 8006640:	d109      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006642:	4b7f      	ldr	r3, [pc, #508]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	4a7d      	ldr	r2, [pc, #500]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800664e:	fa22 f303 	lsr.w	r3, r2, r3
 8006652:	637b      	str	r3, [r7, #52]	@ 0x34
 8006654:	e01e      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006656:	4b7a      	ldr	r3, [pc, #488]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800665e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006662:	d105      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	2b20      	cmp	r3, #32
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800666a:	4b77      	ldr	r3, [pc, #476]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
 800666e:	e011      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006670:	4b73      	ldr	r3, [pc, #460]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d106      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	2b28      	cmp	r3, #40	@ 0x28
 8006682:	d103      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8006684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
 800668a:	e003      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006690:	f001 b863 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006694:	f001 b861 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006698:	4b69      	ldr	r3, [pc, #420]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800669a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800669e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fd fed5 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 80066ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066b0:	f001 b853 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80066b4:	4b62      	ldr	r3, [pc, #392]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c0:	d10a      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	2b40      	cmp	r3, #64	@ 0x40
 80066c6:	d107      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fa2f 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d6:	e045      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80066d8:	4b59      	ldr	r3, [pc, #356]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e4:	d10a      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	2b80      	cmp	r3, #128	@ 0x80
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ec:	f107 0308 	add.w	r3, r7, #8
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fb87 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fa:	e033      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80066fc:	4b50      	ldr	r3, [pc, #320]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	2bc0      	cmp	r3, #192	@ 0xc0
 800670c:	d109      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800670e:	4b4c      	ldr	r3, [pc, #304]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a4a      	ldr	r2, [pc, #296]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006720:	e020      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006722:	4b47      	ldr	r3, [pc, #284]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800672a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672e:	d106      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006736:	d102      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006738:	4b43      	ldr	r3, [pc, #268]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	e012      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800673e:	4b40      	ldr	r3, [pc, #256]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d107      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006752:	d103      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8006754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006760:	f000 bffb 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006764:	f000 bff9 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006768:	4b35      	ldr	r3, [pc, #212]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800676a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800676e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006772:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800677a:	f7fd fe6d 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 800677e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006780:	f000 bfeb 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006784:	4b2e      	ldr	r3, [pc, #184]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006790:	d10b      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006798:	d107      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff f9c6 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a8:	e047      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80067aa:	4b25      	ldr	r3, [pc, #148]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b6:	d10b      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067be:	d107      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067c0:	f107 0308 	add.w	r3, r7, #8
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fb1d 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ce:	e034      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80067d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d10d      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067e2:	d109      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067e4:	4b16      	ldr	r3, [pc, #88]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
 80067f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f6:	e020      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80067f8:	4b11      	ldr	r3, [pc, #68]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006804:	d106      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800680c:	d102      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800680e:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006810:	637b      	str	r3, [r7, #52]	@ 0x34
 8006812:	e012      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d107      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006828:	d103      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006830:	e003      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006836:	f000 bf90 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800683a:	f000 bf8e 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800683e:	bf00      	nop
 8006840:	44020c00 	.word	0x44020c00
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800684c:	4ba5      	ldr	r3, [pc, #660]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800684e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006852:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006856:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800685e:	f7fd fdfb 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006862:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006864:	f000 bf79 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006868:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687c:	d107      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687e:	f107 0314 	add.w	r3, r7, #20
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f954 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	e047      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800688e:	4b95      	ldr	r3, [pc, #596]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689a:	d10b      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 0308 	add.w	r3, r7, #8
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff faab 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b2:	e034      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80068b4:	4b8b      	ldr	r3, [pc, #556]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d10d      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068c6:	d109      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068c8:	4b86      	ldr	r3, [pc, #536]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	4a85      	ldr	r2, [pc, #532]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068da:	e020      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80068dc:	4b81      	ldr	r3, [pc, #516]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e8:	d106      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f0:	d102      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80068f2:	4b7e      	ldr	r3, [pc, #504]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	e012      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80068f8:	4b7a      	ldr	r3, [pc, #488]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d107      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800690c:	d103      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	e003      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800691a:	f000 bf1e 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800691e:	f000 bf1c 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006922:	4b70      	ldr	r3, [pc, #448]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006928:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fd fd90 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006938:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800693a:	f000 bf0e 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800693e:	4b69      	ldr	r3, [pc, #420]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800694a:	d10b      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006952:	d107      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006954:	f107 0314 	add.w	r3, r7, #20
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff f8e9 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	637b      	str	r3, [r7, #52]	@ 0x34
 8006962:	e047      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006964:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800696c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006978:	d107      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fa40 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
 8006988:	e034      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800698a:	4b56      	ldr	r3, [pc, #344]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d10d      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800699c:	d109      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800699e:	4b51      	ldr	r3, [pc, #324]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	08db      	lsrs	r3, r3, #3
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	4a4f      	ldr	r2, [pc, #316]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80069aa:	fa22 f303 	lsr.w	r3, r2, r3
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b0:	e020      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80069b2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80069c8:	4b48      	ldr	r3, [pc, #288]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	e012      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80069ce:	4b45      	ldr	r3, [pc, #276]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d107      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80069e2:	d103      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80069e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069f0:	f000 beb3 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069f4:	f000 beb1 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80069f8:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069fe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a0a:	f7fd fd51 	bl	80044b0 <HAL_RCC_GetPCLK3Freq>
 8006a0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a10:	f000 bea3 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a1a:	d108      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff f885 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a2a:	f000 be96 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a34:	d108      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff f9e2 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a44:	f000 be89 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006a48:	4b26      	ldr	r3, [pc, #152]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d10d      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a5c:	4b21      	ldr	r3, [pc, #132]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	4a20      	ldr	r2, [pc, #128]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6e:	e020      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006a70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7c:	d106      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006a86:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	e012      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006a8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d107      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006aa0:	d103      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	e003      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aae:	f000 be54 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ab2:	f000 be52 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006ac8:	f7fd fcaa 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8006acc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006ace:	f000 be44 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10b      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ad8:	f7fd fb76 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8006adc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ade:	f000 be3c 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ae2:	bf00      	nop
 8006ae4:	44020c00 	.word	0x44020c00
 8006ae8:	03d09000 	.word	0x03d09000
 8006aec:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d108      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af6:	f107 0314 	add.w	r3, r7, #20
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff f818 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b04:	f000 be29 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b08:	4b9f      	ldr	r3, [pc, #636]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b14:	d105      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d102      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b20:	e023      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006b22:	4b99      	ldr	r3, [pc, #612]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d109      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b34:	4b94      	ldr	r3, [pc, #592]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	08db      	lsrs	r3, r3, #3
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	4a94      	ldr	r2, [pc, #592]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b46:	e010      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006b48:	4b8f      	ldr	r3, [pc, #572]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d102      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b66:	f000 bdf8 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b6a:	f000 bdf6 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006b6e:	4b86      	ldr	r3, [pc, #536]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006b7a:	4b83      	ldr	r3, [pc, #524]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	e012      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006b96:	4b7c      	ldr	r3, [pc, #496]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ba4:	d106      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d103      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006bac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb2:	e003      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006bb8:	f000 bdcf 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006bbc:	f000 bdcd 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006bc0:	4b71      	ldr	r3, [pc, #452]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bd2:	f7fd fc41 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006bd6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bd8:	f000 bdbf 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be2:	d108      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be4:	f107 0308 	add.w	r3, r7, #8
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f90b 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bf2:	f000 bdb2 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006bf6:	4b64      	ldr	r3, [pc, #400]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d10d      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c08:	d109      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	08db      	lsrs	r3, r3, #3
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	4a5e      	ldr	r2, [pc, #376]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1c:	e011      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c2a:	d106      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c32:	d102      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006c34:	4b57      	ldr	r3, [pc, #348]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c38:	e003      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c3e:	f000 bd8c 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c42:	f000 bd8a 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c46:	4b50      	ldr	r3, [pc, #320]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c4c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fd fbfe 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c5e:	f000 bd7c 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c68:	d108      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff f8c8 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c78:	f000 bd6f 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006c7c:	4b42      	ldr	r3, [pc, #264]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d10d      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c90:	4b3d      	ldr	r3, [pc, #244]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	e011      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006ca4:	4b38      	ldr	r3, [pc, #224]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb0:	d106      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cb8:	d102      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8006cba:	4b36      	ldr	r3, [pc, #216]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbe:	e003      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc4:	f000 bd49 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006cc8:	f000 bd47 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cd2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006cde:	f7fd fbe7 	bl	80044b0 <HAL_RCC_GetPCLK3Freq>
 8006ce2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ce4:	f000 bd39 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cee:	d108      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff f885 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cfe:	f000 bd2c 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006d02:	4b21      	ldr	r3, [pc, #132]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d14:	d109      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d16:	4b1c      	ldr	r3, [pc, #112]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	08db      	lsrs	r3, r3, #3
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	4a1b      	ldr	r2, [pc, #108]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006d22:	fa22 f303 	lsr.w	r3, r2, r3
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d28:	e011      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006d2a:	4b17      	ldr	r3, [pc, #92]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d36:	d106      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006d40:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4a:	f000 bd06 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d4e:	f000 bd04 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d58:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006d5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d64:	f7fd fb78 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006d68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d6a:	f000 bcf6 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d74:	d110      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff f842 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d84:	f000 bce9 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d88:	44020c00 	.word	0x44020c00
 8006d8c:	016e3600 	.word	0x016e3600
 8006d90:	03d09000 	.word	0x03d09000
 8006d94:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006d98:	4ba4      	ldr	r3, [pc, #656]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d10e      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006daa:	d10a      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dac:	4b9f      	ldr	r3, [pc, #636]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	08db      	lsrs	r3, r3, #3
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	4a9e      	ldr	r2, [pc, #632]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dbe:	f000 bccc 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc6:	f000 bcc8 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006dca:	4b98      	ldr	r3, [pc, #608]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006dcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dd0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006dd4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ddc:	f7fd fb68 	bl	80044b0 <HAL_RCC_GetPCLK3Freq>
 8006de0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006de2:	f000 bcba 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dec:	d108      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f806 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dfc:	f000 bcad 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006e00:	4b8a      	ldr	r3, [pc, #552]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d10e      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e12:	d10a      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e14:	4b85      	ldr	r3, [pc, #532]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a84      	ldr	r2, [pc, #528]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e26:	f000 bc98 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e2e:	f000 bc94 	b.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e32:	4b7e      	ldr	r3, [pc, #504]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e44:	d056      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e4c:	f200 808b 	bhi.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e56:	d03e      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5e:	f200 8082 	bhi.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e68:	d027      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e70:	d879      	bhi.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e78:	d017      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e80:	d871      	bhi.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8e:	d004      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006e90:	e069      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006e92:	f7fd fb0d 	bl	80044b0 <HAL_RCC_GetPCLK3Freq>
 8006e96:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006e98:	e068      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e9a:	f107 0314 	add.w	r3, r7, #20
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fe46 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ea8:	e060      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe ffa8 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006eb8:	e058      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006eba:	4b5c      	ldr	r3, [pc, #368]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d103      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ece:	e04d      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ed4:	e04a      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006ed6:	4b55      	ldr	r3, [pc, #340]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ee4:	d103      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006ee6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006eec:	e03e      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ef2:	e03b      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006efa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f00:	4b4a      	ldr	r3, [pc, #296]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d10c      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f12:	4b46      	ldr	r3, [pc, #280]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	4a44      	ldr	r2, [pc, #272]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f24:	e01e      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f26:	4b41      	ldr	r3, [pc, #260]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f32:	d106      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f3a:	d102      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f40:	e010      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f42:	4b3a      	ldr	r3, [pc, #232]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f56:	d102      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f58:	4b37      	ldr	r3, [pc, #220]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f6a:	bf00      	nop
          }
        }
        break;
 8006f6c:	e3f5      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f80:	d05f      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f88:	f200 8094 	bhi.w	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f92:	d03f      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f9a:	f200 808b 	bhi.w	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fa4:	d028      	beq.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fac:	f200 8082 	bhi.w	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb6:	d017      	beq.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fbe:	d879      	bhi.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006fce:	e071      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fa42 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006fd6:	e070      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fda7 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fe6:	e068      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe8:	f107 0308 	add.w	r3, r7, #8
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe ff09 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ff6:	e060      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b02      	cmp	r3, #2
 8007004:	d103      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800700c:	e055      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007012:	e052      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007014:	4b05      	ldr	r3, [pc, #20]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800701a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800701e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007022:	d10b      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007024:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800702a:	e046      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800702c:	44020c00 	.word	0x44020c00
 8007030:	03d09000 	.word	0x03d09000
 8007034:	003d0900 	.word	0x003d0900
 8007038:	016e3600 	.word	0x016e3600
              frequency = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007040:	e03b      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007042:	4bae      	ldr	r3, [pc, #696]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007048:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800704c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800704e:	4bab      	ldr	r3, [pc, #684]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b02      	cmp	r3, #2
 8007058:	d10c      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007060:	4ba6      	ldr	r3, [pc, #664]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	08db      	lsrs	r3, r3, #3
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	4aa5      	ldr	r2, [pc, #660]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	637b      	str	r3, [r7, #52]	@ 0x34
 8007072:	e01e      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007074:	4ba1      	ldr	r3, [pc, #644]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800707c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007080:	d106      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007088:	d102      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800708a:	4b9e      	ldr	r3, [pc, #632]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
 800708e:	e010      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007090:	4b9a      	ldr	r3, [pc, #616]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800709c:	d106      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800709e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070a4:	d102      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070a6:	4b98      	ldr	r3, [pc, #608]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070aa:	e002      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80070b2:	e002      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070b8:	bf00      	nop
          }
        }
        break;
 80070ba:	e34e      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80070bc:	4b8f      	ldr	r3, [pc, #572]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80070c8:	4b8c      	ldr	r3, [pc, #560]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070d4:	d105      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80070dc:	4b8a      	ldr	r3, [pc, #552]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80070e0:	e33b      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e8:	d107      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ea:	f107 0320 	add.w	r3, r7, #32
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fbb4 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f8:	e32f      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007100:	d107      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fd12 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007110:	e323      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007116:	e320      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007118:	4b78      	ldr	r3, [pc, #480]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800711a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	633b      	str	r3, [r7, #48]	@ 0x30
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	2b04      	cmp	r3, #4
 8007128:	d860      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800712a:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007145 	.word	0x08007145
 8007134:	08007155 	.word	0x08007155
 8007138:	08007165 	.word	0x08007165
 800713c:	08007175 	.word	0x08007175
 8007140:	0800717b 	.word	0x0800717b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007144:	f107 0320 	add.w	r3, r7, #32
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fb87 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007152:	e04e      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fce9 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007162:	e046      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007164:	f107 0308 	add.w	r3, r7, #8
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fe4b 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007172:	e03e      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007174:	4b65      	ldr	r3, [pc, #404]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007178:	e03b      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800717a:	4b60      	ldr	r3, [pc, #384]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800717c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007180:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007184:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007186:	4b5d      	ldr	r3, [pc, #372]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d10c      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007198:	4b58      	ldr	r3, [pc, #352]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	08db      	lsrs	r3, r3, #3
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	4a57      	ldr	r2, [pc, #348]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071aa:	e01e      	b.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071ac:	4b53      	ldr	r3, [pc, #332]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b8:	d106      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80071ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c0:	d102      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071c2:	4b50      	ldr	r3, [pc, #320]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c6:	e010      	b.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071c8:	4b4c      	ldr	r3, [pc, #304]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d4:	d106      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80071d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071dc:	d102      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071de:	4b4a      	ldr	r3, [pc, #296]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e2:	e002      	b.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071e8:	e003      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80071ea:	e002      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071f0:	bf00      	nop
          }
        }
        break;
 80071f2:	e2b2      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80071f4:	4b41      	ldr	r3, [pc, #260]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2b20      	cmp	r3, #32
 8007204:	f200 80a4 	bhi.w	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007208:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007295 	.word	0x08007295
 8007214:	08007351 	.word	0x08007351
 8007218:	08007351 	.word	0x08007351
 800721c:	08007351 	.word	0x08007351
 8007220:	08007351 	.word	0x08007351
 8007224:	08007351 	.word	0x08007351
 8007228:	08007351 	.word	0x08007351
 800722c:	08007351 	.word	0x08007351
 8007230:	080072a5 	.word	0x080072a5
 8007234:	08007351 	.word	0x08007351
 8007238:	08007351 	.word	0x08007351
 800723c:	08007351 	.word	0x08007351
 8007240:	08007351 	.word	0x08007351
 8007244:	08007351 	.word	0x08007351
 8007248:	08007351 	.word	0x08007351
 800724c:	08007351 	.word	0x08007351
 8007250:	080072b5 	.word	0x080072b5
 8007254:	08007351 	.word	0x08007351
 8007258:	08007351 	.word	0x08007351
 800725c:	08007351 	.word	0x08007351
 8007260:	08007351 	.word	0x08007351
 8007264:	08007351 	.word	0x08007351
 8007268:	08007351 	.word	0x08007351
 800726c:	08007351 	.word	0x08007351
 8007270:	080072c5 	.word	0x080072c5
 8007274:	08007351 	.word	0x08007351
 8007278:	08007351 	.word	0x08007351
 800727c:	08007351 	.word	0x08007351
 8007280:	08007351 	.word	0x08007351
 8007284:	08007351 	.word	0x08007351
 8007288:	08007351 	.word	0x08007351
 800728c:	08007351 	.word	0x08007351
 8007290:	080072cb 	.word	0x080072cb
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007294:	f107 0320 	add.w	r3, r7, #32
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fadf 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072a2:	e058      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fc41 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072b2:	e050      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe fda3 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072c2:	e048      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80072c4:	4b11      	ldr	r3, [pc, #68]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072c8:	e045      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ca:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80072cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072d0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80072d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d116      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d113      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072e8:	4b04      	ldr	r3, [pc, #16]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	08db      	lsrs	r3, r3, #3
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	4a03      	ldr	r2, [pc, #12]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fa:	e028      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80072fc:	44020c00 	.word	0x44020c00
 8007300:	03d09000 	.word	0x03d09000
 8007304:	003d0900 	.word	0x003d0900
 8007308:	016e3600 	.word	0x016e3600
 800730c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007310:	4b95      	ldr	r3, [pc, #596]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800731c:	d106      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007324:	d102      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007326:	4b91      	ldr	r3, [pc, #580]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	e010      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800732c:	4b8e      	ldr	r3, [pc, #568]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007338:	d106      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007340:	d102      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007342:	4b8b      	ldr	r3, [pc, #556]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	e002      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800734c:	e003      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800734e:	e002      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007354:	bf00      	nop
          }
        }
        break;
 8007356:	e200      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007358:	4b83      	ldr	r3, [pc, #524]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800735a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800735e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736a:	d031      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007372:	d866      	bhi.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	2bc0      	cmp	r3, #192	@ 0xc0
 8007378:	d027      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	2bc0      	cmp	r3, #192	@ 0xc0
 800737e:	d860      	bhi.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	2b80      	cmp	r3, #128	@ 0x80
 8007384:	d019      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	2b80      	cmp	r3, #128	@ 0x80
 800738a:	d85a      	bhi.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	2b40      	cmp	r3, #64	@ 0x40
 8007396:	d008      	beq.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007398:	e053      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800739a:	f107 0320 	add.w	r3, r7, #32
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fa5c 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073a8:	e04e      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073aa:	f107 0314 	add.w	r3, r7, #20
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fbbe 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073b8:	e046      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fd20 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073c8:	e03e      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80073ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ce:	e03b      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073d0:	4b65      	ldr	r3, [pc, #404]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073da:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073dc:	4b62      	ldr	r3, [pc, #392]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d10c      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80073e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	08db      	lsrs	r3, r3, #3
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	4a5f      	ldr	r2, [pc, #380]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80073fa:	fa22 f303 	lsr.w	r3, r2, r3
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007400:	e01e      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007402:	4b59      	ldr	r3, [pc, #356]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800740a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800740e:	d106      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007416:	d102      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007418:	4b54      	ldr	r3, [pc, #336]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
 800741c:	e010      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800741e:	4b52      	ldr	r3, [pc, #328]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800742a:	d106      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007432:	d102      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007434:	4b4e      	ldr	r3, [pc, #312]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800743e:	e003      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007440:	e002      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007446:	bf00      	nop
          }
        }
        break;
 8007448:	e187      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800744a:	4b47      	ldr	r3, [pc, #284]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800744c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007450:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007454:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fd f812 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8007460:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007462:	e17a      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007464:	4b40      	ldr	r3, [pc, #256]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800746c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007470:	d10b      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007478:	d107      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747a:	f107 0314 	add.w	r3, r7, #20
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fb56 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
 8007488:	e045      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800748a:	4b37      	ldr	r3, [pc, #220]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007496:	d10b      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749e:	d107      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a0:	f107 0308 	add.w	r3, r7, #8
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fcad 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	e032      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80074b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d10d      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074c2:	d109      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074c4:	4b28      	ldr	r3, [pc, #160]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	08db      	lsrs	r3, r3, #3
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80074d0:	fa22 f303 	lsr.w	r3, r2, r3
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d6:	e01e      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80074d8:	4b23      	ldr	r3, [pc, #140]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e4:	d106      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ec:	d102      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80074ee:	4b1f      	ldr	r3, [pc, #124]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f2:	e010      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80074f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007500:	d106      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007508:	d102      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800750a:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800750c:	637b      	str	r3, [r7, #52]	@ 0x34
 800750e:	e002      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007514:	e121      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007516:	e120      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007518:	4b13      	ldr	r3, [pc, #76]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800751a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	2b03      	cmp	r3, #3
 8007528:	d861      	bhi.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800752a:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007541 	.word	0x08007541
 8007534:	08007549 	.word	0x08007549
 8007538:	08007559 	.word	0x08007559
 800753c:	0800757d 	.word	0x0800757d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007540:	f7fc ff6e 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8007544:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007546:	e055      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007548:	f107 0320 	add.w	r3, r7, #32
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe f985 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007556:	e04d      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007558:	f107 0314 	add.w	r3, r7, #20
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fae7 	bl	8005b30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007566:	e045      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007568:	44020c00 	.word	0x44020c00
 800756c:	003d0900 	.word	0x003d0900
 8007570:	016e3600 	.word	0x016e3600
 8007574:	00bb8000 	.word	0x00bb8000
 8007578:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800757c:	4b79      	ldr	r3, [pc, #484]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800757e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007582:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007588:	4b76      	ldr	r3, [pc, #472]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d10c      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800759a:	4b72      	ldr	r3, [pc, #456]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	08db      	lsrs	r3, r3, #3
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	4a70      	ldr	r2, [pc, #448]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80075a6:	fa22 f303 	lsr.w	r3, r2, r3
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ac:	e01e      	b.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ba:	d106      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80075bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c2:	d102      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075c4:	4b69      	ldr	r3, [pc, #420]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c8:	e010      	b.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ca:	4b66      	ldr	r3, [pc, #408]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075d6:	d106      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075de:	d102      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075e0:	4b63      	ldr	r3, [pc, #396]	@ (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e4:	e002      	b.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80075ec:	e002      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075f2:	bf00      	nop
          }
        }
        break;
 80075f4:	e0b1      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80075f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007600:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007602:	4b58      	ldr	r3, [pc, #352]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d106      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
 800761c:	e01f      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800761e:	4b51      	ldr	r3, [pc, #324]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800762c:	d106      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	2b40      	cmp	r3, #64	@ 0x40
 8007632:	d103      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007634:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
 800763a:	e010      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800763c:	4b49      	ldr	r3, [pc, #292]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007648:	d106      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	2b80      	cmp	r3, #128	@ 0x80
 800764e:	d103      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8007650:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
 8007656:	e002      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800765c:	e07d      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800765e:	e07c      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007660:	4b40      	ldr	r3, [pc, #256]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007666:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800766a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800766c:	4b3d      	ldr	r3, [pc, #244]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007678:	d105      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	2b00      	cmp	r3, #0
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007680:	4b3c      	ldr	r3, [pc, #240]	@ (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
 8007684:	e031      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007686:	4b37      	ldr	r3, [pc, #220]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007692:	d10a      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	2b10      	cmp	r3, #16
 8007698:	d107      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800769a:	f107 0320 	add.w	r3, r7, #32
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f8dc 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a8:	e01f      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80076aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d103      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c4:	e011      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80076c6:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d4:	d106      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b30      	cmp	r3, #48	@ 0x30
 80076da:	d103      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80076dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	e002      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80076e8:	e037      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80076ea:	e036      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d107      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076fe:	f107 0320 	add.w	r3, r7, #32
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe f8aa 	bl	800585c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800770c:	e025      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800770e:	4b15      	ldr	r3, [pc, #84]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771a:	d10a      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771e:	2b20      	cmp	r3, #32
 8007720:	d107      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fb6c 	bl	8005e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007730:	e00f      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007732:	4b0c      	ldr	r3, [pc, #48]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	2b30      	cmp	r3, #48	@ 0x30
 8007744:	d102      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
 800774a:	e002      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007750:	e003      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007752:	e002      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007758:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800775a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800775c:	4618      	mov	r0, r3
 800775e:	373c      	adds	r7, #60	@ 0x3c
 8007760:	46bd      	mov	sp, r7
 8007762:	bd90      	pop	{r4, r7, pc}
 8007764:	44020c00 	.word	0x44020c00
 8007768:	03d09000 	.word	0x03d09000
 800776c:	003d0900 	.word	0x003d0900
 8007770:	016e3600 	.word	0x016e3600
 8007774:	02dc6c00 	.word	0x02dc6c00

08007778 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007780:	4b48      	ldr	r3, [pc, #288]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a47      	ldr	r2, [pc, #284]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007786:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800778a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800778c:	f7fb f9a4 	bl	8002ad8 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007792:	e008      	b.n	80077a6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007794:	f7fb f9a0 	bl	8002ad8 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e07a      	b.n	800789c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077a6:	4b3f      	ldr	r3, [pc, #252]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80077b2:	4b3c      	ldr	r3, [pc, #240]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6852      	ldr	r2, [r2, #4]
 80077c6:	0212      	lsls	r2, r2, #8
 80077c8:	430a      	orrs	r2, r1
 80077ca:	4936      	ldr	r1, [pc, #216]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	3b01      	subs	r3, #1
 80077e0:	025b      	lsls	r3, r3, #9
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	061b      	lsls	r3, r3, #24
 80077fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007800:	4928      	ldr	r1, [pc, #160]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007806:	4b27      	ldr	r3, [pc, #156]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	f023 020c 	bic.w	r2, r3, #12
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	4924      	ldr	r1, [pc, #144]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007818:	4b22      	ldr	r3, [pc, #136]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	f023 0220 	bic.w	r2, r3, #32
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	491f      	ldr	r1, [pc, #124]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007826:	4313      	orrs	r3, r2
 8007828:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800782a:	4b1e      	ldr	r3, [pc, #120]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007832:	491c      	ldr	r1, [pc, #112]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007838:	4b1a      	ldr	r3, [pc, #104]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a19      	ldr	r2, [pc, #100]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007844:	4b17      	ldr	r3, [pc, #92]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800784c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6a12      	ldr	r2, [r2, #32]
 8007854:	00d2      	lsls	r2, r2, #3
 8007856:	4913      	ldr	r1, [pc, #76]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800785c:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	4a10      	ldr	r2, [pc, #64]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007862:	f043 0310 	orr.w	r3, r3, #16
 8007866:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a0d      	ldr	r2, [pc, #52]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 800786e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007872:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007874:	f7fb f930 	bl	8002ad8 <HAL_GetTick>
 8007878:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800787a:	e008      	b.n	800788e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800787c:	f7fb f92c 	bl	8002ad8 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d901      	bls.n	800788e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e006      	b.n	800789c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800788e:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <RCCEx_PLL2_Config+0x12c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f0      	beq.n	800787c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800789a:	2300      	movs	r3, #0

}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	44020c00 	.word	0x44020c00

080078a8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80078b0:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a47      	ldr	r2, [pc, #284]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80078b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078bc:	f7fb f90c 	bl	8002ad8 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c2:	e008      	b.n	80078d6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078c4:	f7fb f908 	bl	8002ad8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e07a      	b.n	80079cc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078d6:	4b3f      	ldr	r3, [pc, #252]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80078e2:	4b3c      	ldr	r3, [pc, #240]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6811      	ldr	r1, [r2, #0]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6852      	ldr	r2, [r2, #4]
 80078f6:	0212      	lsls	r2, r2, #8
 80078f8:	430a      	orrs	r2, r1
 80078fa:	4936      	ldr	r1, [pc, #216]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	630b      	str	r3, [r1, #48]	@ 0x30
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	3b01      	subs	r3, #1
 8007910:	025b      	lsls	r3, r3, #9
 8007912:	b29b      	uxth	r3, r3
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	3b01      	subs	r3, #1
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	3b01      	subs	r3, #1
 800792a:	061b      	lsls	r3, r3, #24
 800792c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007930:	4928      	ldr	r1, [pc, #160]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007932:	4313      	orrs	r3, r2
 8007934:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007936:	4b27      	ldr	r3, [pc, #156]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	f023 020c 	bic.w	r2, r3, #12
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	4924      	ldr	r1, [pc, #144]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007944:	4313      	orrs	r3, r2
 8007946:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007948:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	f023 0220 	bic.w	r2, r3, #32
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	491f      	ldr	r1, [pc, #124]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007956:	4313      	orrs	r3, r2
 8007958:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800795a:	4b1e      	ldr	r3, [pc, #120]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800795c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	491c      	ldr	r1, [pc, #112]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007964:	4313      	orrs	r3, r2
 8007966:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007968:	4b1a      	ldr	r3, [pc, #104]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	4a19      	ldr	r2, [pc, #100]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007974:	4b17      	ldr	r3, [pc, #92]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007978:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800797c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6a12      	ldr	r2, [r2, #32]
 8007984:	00d2      	lsls	r2, r2, #3
 8007986:	4913      	ldr	r1, [pc, #76]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007988:	4313      	orrs	r3, r2
 800798a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800798c:	4b11      	ldr	r3, [pc, #68]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800798e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007990:	4a10      	ldr	r2, [pc, #64]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 8007992:	f043 0310 	orr.w	r3, r3, #16
 8007996:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007998:	4b0e      	ldr	r3, [pc, #56]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0d      	ldr	r2, [pc, #52]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 800799e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079a4:	f7fb f898 	bl	8002ad8 <HAL_GetTick>
 80079a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079aa:	e008      	b.n	80079be <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079ac:	f7fb f894 	bl	8002ad8 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e006      	b.n	80079cc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079be:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <RCCEx_PLL3_Config+0x12c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	44020c00 	.word	0x44020c00

080079d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e10d      	b.n	8007c06 <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a88      	ldr	r2, [pc, #544]	@ (8007c10 <HAL_SPI_Init+0x238>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_SPI_Init+0x26>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a86      	ldr	r2, [pc, #536]	@ (8007c14 <HAL_SPI_Init+0x23c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	e000      	b.n	8007a00 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80079fe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a81      	ldr	r2, [pc, #516]	@ (8007c10 <HAL_SPI_Init+0x238>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_SPI_Init+0x42>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a7f      	ldr	r2, [pc, #508]	@ (8007c14 <HAL_SPI_Init+0x23c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d105      	bne.n	8007a26 <HAL_SPI_Init+0x4e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2b0f      	cmp	r3, #15
 8007a20:	d901      	bls.n	8007a26 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e0ef      	b.n	8007c06 <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f902 	bl	8007c30 <SPI_GetPacketSize>
 8007a2c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a77      	ldr	r2, [pc, #476]	@ (8007c10 <HAL_SPI_Init+0x238>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_SPI_Init+0x6a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a75      	ldr	r2, [pc, #468]	@ (8007c14 <HAL_SPI_Init+0x23c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d102      	bne.n	8007a48 <HAL_SPI_Init+0x70>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d820      	bhi.n	8007a8a <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a4c:	4a72      	ldr	r2, [pc, #456]	@ (8007c18 <HAL_SPI_Init+0x240>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d018      	beq.n	8007a84 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a71      	ldr	r2, [pc, #452]	@ (8007c1c <HAL_SPI_Init+0x244>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d013      	beq.n	8007a84 <HAL_SPI_Init+0xac>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6f      	ldr	r2, [pc, #444]	@ (8007c20 <HAL_SPI_Init+0x248>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00e      	beq.n	8007a84 <HAL_SPI_Init+0xac>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8007c24 <HAL_SPI_Init+0x24c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <HAL_SPI_Init+0xac>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a6c      	ldr	r2, [pc, #432]	@ (8007c28 <HAL_SPI_Init+0x250>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <HAL_SPI_Init+0xac>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a6b      	ldr	r2, [pc, #428]	@ (8007c2c <HAL_SPI_Init+0x254>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d104      	bne.n	8007a8e <HAL_SPI_Init+0xb6>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d901      	bls.n	8007a8e <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e0bb      	b.n	8007c06 <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fa fa5e 	bl	8001f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007aca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ad4:	d119      	bne.n	8007b0a <HAL_SPI_Init+0x132>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ade:	d103      	bne.n	8007ae8 <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af8:	d107      	bne.n	8007b0a <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00f      	beq.n	8007b36 <HAL_SPI_Init+0x15e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d90b      	bls.n	8007b36 <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e007      	b.n	8007b46 <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b58:	ea42 0103 	orr.w	r1, r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb2:	ea42 0103 	orr.w	r1, r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40014c00 	.word	0x40014c00
 8007c14:	50014c00 	.word	0x50014c00
 8007c18:	40013000 	.word	0x40013000
 8007c1c:	50013000 	.word	0x50013000
 8007c20:	40003800 	.word	0x40003800
 8007c24:	50003800 	.word	0x50003800
 8007c28:	40003c00 	.word	0x40003c00
 8007c2c:	50003c00 	.word	0x50003c00

08007c30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	08db      	lsrs	r3, r3, #3
 8007c50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e049      	b.n	8007d0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d106      	bne.n	8007c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7fa f9e7 	bl	8002060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f000 fd77 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d001      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e07c      	b.n	8007e26 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a3a      	ldr	r2, [pc, #232]	@ (8007e34 <HAL_TIM_Base_Start_IT+0x120>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d04a      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a39      	ldr	r2, [pc, #228]	@ (8007e38 <HAL_TIM_Base_Start_IT+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d045      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d60:	d040      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d6a:	d03b      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a32      	ldr	r2, [pc, #200]	@ (8007e3c <HAL_TIM_Base_Start_IT+0x128>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d036      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a31      	ldr	r2, [pc, #196]	@ (8007e40 <HAL_TIM_Base_Start_IT+0x12c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d031      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a2f      	ldr	r2, [pc, #188]	@ (8007e44 <HAL_TIM_Base_Start_IT+0x130>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d02c      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8007e48 <HAL_TIM_Base_Start_IT+0x134>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d027      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <HAL_TIM_Base_Start_IT+0x138>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d022      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e50 <HAL_TIM_Base_Start_IT+0x13c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d01d      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a29      	ldr	r2, [pc, #164]	@ (8007e54 <HAL_TIM_Base_Start_IT+0x140>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d018      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a28      	ldr	r2, [pc, #160]	@ (8007e58 <HAL_TIM_Base_Start_IT+0x144>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a26      	ldr	r2, [pc, #152]	@ (8007e5c <HAL_TIM_Base_Start_IT+0x148>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a25      	ldr	r2, [pc, #148]	@ (8007e60 <HAL_TIM_Base_Start_IT+0x14c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a23      	ldr	r2, [pc, #140]	@ (8007e64 <HAL_TIM_Base_Start_IT+0x150>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0xd0>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a22      	ldr	r2, [pc, #136]	@ (8007e68 <HAL_TIM_Base_Start_IT+0x154>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d115      	bne.n	8007e10 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	4b20      	ldr	r3, [pc, #128]	@ (8007e6c <HAL_TIM_Base_Start_IT+0x158>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b06      	cmp	r3, #6
 8007df4:	d015      	beq.n	8007e22 <HAL_TIM_Base_Start_IT+0x10e>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfc:	d011      	beq.n	8007e22 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	e008      	b.n	8007e22 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e000      	b.n	8007e24 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	50012c00 	.word	0x50012c00
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	50000400 	.word	0x50000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	50000800 	.word	0x50000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	50000c00 	.word	0x50000c00
 8007e54:	40013400 	.word	0x40013400
 8007e58:	50013400 	.word	0x50013400
 8007e5c:	40001800 	.word	0x40001800
 8007e60:	50001800 	.word	0x50001800
 8007e64:	40014000 	.word	0x40014000
 8007e68:	50014000 	.word	0x50014000
 8007e6c:	00010007 	.word	0x00010007

08007e70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10f      	bne.n	8007eb8 <HAL_TIM_Base_Stop_IT+0x48>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <HAL_TIM_Base_Stop_IT+0x48>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e049      	b.n	8007f74 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f841 	bl	8007f7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f000 fc43 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b0c      	cmp	r3, #12
 8007fa2:	d841      	bhi.n	8008028 <HAL_TIM_OC_Stop_IT+0x98>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <HAL_TIM_OC_Stop_IT+0x1c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fe1 	.word	0x08007fe1
 8007fb0:	08008029 	.word	0x08008029
 8007fb4:	08008029 	.word	0x08008029
 8007fb8:	08008029 	.word	0x08008029
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08008029 	.word	0x08008029
 8007fc4:	08008029 	.word	0x08008029
 8007fc8:	08008029 	.word	0x08008029
 8007fcc:	08008005 	.word	0x08008005
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	08008029 	.word	0x08008029
 8007fdc:	08008017 	.word	0x08008017
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0202 	bic.w	r2, r2, #2
 8007fee:	60da      	str	r2, [r3, #12]
      break;
 8007ff0:	e01d      	b.n	800802e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0204 	bic.w	r2, r2, #4
 8008000:	60da      	str	r2, [r3, #12]
      break;
 8008002:	e014      	b.n	800802e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0208 	bic.w	r2, r2, #8
 8008012:	60da      	str	r2, [r3, #12]
      break;
 8008014:	e00b      	b.n	800802e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0210 	bic.w	r2, r2, #16
 8008024:	60da      	str	r2, [r3, #12]
      break;
 8008026:	e002      	b.n	800802e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	bf00      	nop
  }

  if (status == HAL_OK)
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 8086 	bne.w	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f866 	bl	8009110 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a40      	ldr	r2, [pc, #256]	@ (800814c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <HAL_TIM_OC_Stop_IT+0xf0>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a3f      	ldr	r2, [pc, #252]	@ (8008150 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <HAL_TIM_OC_Stop_IT+0xf0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a3d      	ldr	r2, [pc, #244]	@ (8008154 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_TIM_OC_Stop_IT+0xf0>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a3c      	ldr	r2, [pc, #240]	@ (8008158 <HAL_TIM_OC_Stop_IT+0x1c8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_TIM_OC_Stop_IT+0xf0>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a3a      	ldr	r2, [pc, #232]	@ (800815c <HAL_TIM_OC_Stop_IT+0x1cc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_OC_Stop_IT+0xf0>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a39      	ldr	r2, [pc, #228]	@ (8008160 <HAL_TIM_OC_Stop_IT+0x1d0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_TIM_OC_Stop_IT+0xf4>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_TIM_OC_Stop_IT+0xf6>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d017      	beq.n	80080ba <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10f      	bne.n	80080ba <HAL_TIM_OC_Stop_IT+0x12a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <HAL_TIM_OC_Stop_IT+0x12a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10f      	bne.n	80080ea <HAL_TIM_OC_Stop_IT+0x15a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <HAL_TIM_OC_Stop_IT+0x15a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_OC_Stop_IT+0x16a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080f8:	e023      	b.n	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d104      	bne.n	800810a <HAL_TIM_OC_Stop_IT+0x17a>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008108:	e01b      	b.n	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d104      	bne.n	800811a <HAL_TIM_OC_Stop_IT+0x18a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008118:	e013      	b.n	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d104      	bne.n	800812a <HAL_TIM_OC_Stop_IT+0x19a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008128:	e00b      	b.n	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b10      	cmp	r3, #16
 800812e:	d104      	bne.n	800813a <HAL_TIM_OC_Stop_IT+0x1aa>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008138:	e003      	b.n	8008142 <HAL_TIM_OC_Stop_IT+0x1b2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	40012c00 	.word	0x40012c00
 8008150:	50012c00 	.word	0x50012c00
 8008154:	40013400 	.word	0x40013400
 8008158:	50013400 	.word	0x50013400
 800815c:	40014000 	.word	0x40014000
 8008160:	50014000 	.word	0x50014000

08008164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d020      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01b      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0202 	mvn.w	r2, #2
 8008198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fad4 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fac6 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fad7 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d020      	beq.n	8008214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01b      	beq.n	8008214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0204 	mvn.w	r2, #4
 80081e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2202      	movs	r2, #2
 80081ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 faae 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008200:	e005      	b.n	800820e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 faa0 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fab1 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d020      	beq.n	8008260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01b      	beq.n	8008260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0208 	mvn.w	r2, #8
 8008230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2204      	movs	r2, #4
 8008236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa88 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 800824c:	e005      	b.n	800825a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa7a 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fa8b 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b00      	cmp	r3, #0
 8008268:	d020      	beq.n	80082ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01b      	beq.n	80082ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0210 	mvn.w	r2, #16
 800827c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2208      	movs	r2, #8
 8008282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa62 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008298:	e005      	b.n	80082a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa54 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa65 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00c      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0201 	mvn.w	r2, #1
 80082c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa32 	bl	8008734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f809 	bl	8009310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00c      	beq.n	8008322 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800831a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f801 	bl	8009324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00c      	beq.n	8008346 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800833e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa1f 	bl	8008784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00c      	beq.n	800836a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f06f 0220 	mvn.w	r2, #32
 8008362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 ffc9 	bl	80092fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 ffd5 	bl	8009338 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80083aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 ffcd 	bl	800934c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80083ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 ffc5 	bl	8009360 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80083f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 ffbd 	bl	8009374 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_TIM_OC_ConfigChannel+0x1e>
 800841e:	2302      	movs	r3, #2
 8008420:	e066      	b.n	80084f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b14      	cmp	r3, #20
 800842e:	d857      	bhi.n	80084e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008430:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	0800848d 	.word	0x0800848d
 800843c:	080084e1 	.word	0x080084e1
 8008440:	080084e1 	.word	0x080084e1
 8008444:	080084e1 	.word	0x080084e1
 8008448:	0800849b 	.word	0x0800849b
 800844c:	080084e1 	.word	0x080084e1
 8008450:	080084e1 	.word	0x080084e1
 8008454:	080084e1 	.word	0x080084e1
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080084e1 	.word	0x080084e1
 8008460:	080084e1 	.word	0x080084e1
 8008464:	080084e1 	.word	0x080084e1
 8008468:	080084b7 	.word	0x080084b7
 800846c:	080084e1 	.word	0x080084e1
 8008470:	080084e1 	.word	0x080084e1
 8008474:	080084e1 	.word	0x080084e1
 8008478:	080084c5 	.word	0x080084c5
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080084e1 	.word	0x080084e1
 8008484:	080084e1 	.word	0x080084e1
 8008488:	080084d3 	.word	0x080084d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa6a 	bl	800896c <TIM_OC1_SetConfig>
      break;
 8008498:	e025      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fafd 	bl	8008aa0 <TIM_OC2_SetConfig>
      break;
 80084a6:	e01e      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fb8e 	bl	8008bd0 <TIM_OC3_SetConfig>
      break;
 80084b4:	e017      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fc1d 	bl	8008cfc <TIM_OC4_SetConfig>
      break;
 80084c2:	e010      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fcae 	bl	8008e2c <TIM_OC5_SetConfig>
      break;
 80084d0:	e009      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fd11 	bl	8008f00 <TIM_OC6_SetConfig>
      break;
 80084de:	e002      	b.n	80084e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
      break;
 80084e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIM_ConfigClockSource+0x1c>
 8008510:	2302      	movs	r3, #2
 8008512:	e0fe      	b.n	8008712 <HAL_TIM_ConfigClockSource+0x21a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800853e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008550:	f000 80c9 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008558:	f200 80ce 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 800855c:	4a6f      	ldr	r2, [pc, #444]	@ (800871c <HAL_TIM_ConfigClockSource+0x224>)
 800855e:	4293      	cmp	r3, r2
 8008560:	f000 80c1 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008564:	4a6d      	ldr	r2, [pc, #436]	@ (800871c <HAL_TIM_ConfigClockSource+0x224>)
 8008566:	4293      	cmp	r3, r2
 8008568:	f200 80c6 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 800856c:	4a6c      	ldr	r2, [pc, #432]	@ (8008720 <HAL_TIM_ConfigClockSource+0x228>)
 800856e:	4293      	cmp	r3, r2
 8008570:	f000 80b9 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008574:	4a6a      	ldr	r2, [pc, #424]	@ (8008720 <HAL_TIM_ConfigClockSource+0x228>)
 8008576:	4293      	cmp	r3, r2
 8008578:	f200 80be 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 800857c:	4a69      	ldr	r2, [pc, #420]	@ (8008724 <HAL_TIM_ConfigClockSource+0x22c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	f000 80b1 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008584:	4a67      	ldr	r2, [pc, #412]	@ (8008724 <HAL_TIM_ConfigClockSource+0x22c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	f200 80b6 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 800858c:	4a66      	ldr	r2, [pc, #408]	@ (8008728 <HAL_TIM_ConfigClockSource+0x230>)
 800858e:	4293      	cmp	r3, r2
 8008590:	f000 80a9 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008594:	4a64      	ldr	r2, [pc, #400]	@ (8008728 <HAL_TIM_ConfigClockSource+0x230>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f200 80ae 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 800859c:	4a63      	ldr	r2, [pc, #396]	@ (800872c <HAL_TIM_ConfigClockSource+0x234>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	f000 80a1 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80085a4:	4a61      	ldr	r2, [pc, #388]	@ (800872c <HAL_TIM_ConfigClockSource+0x234>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f200 80a6 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085ac:	4a60      	ldr	r2, [pc, #384]	@ (8008730 <HAL_TIM_ConfigClockSource+0x238>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f000 8099 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80085b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008730 <HAL_TIM_ConfigClockSource+0x238>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	f200 809e 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085c0:	f000 8091 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80085c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085c8:	f200 8096 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085d0:	f000 8089 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80085d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085d8:	f200 808e 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e0:	d03e      	beq.n	8008660 <HAL_TIM_ConfigClockSource+0x168>
 80085e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e6:	f200 8087 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ee:	f000 8086 	beq.w	80086fe <HAL_TIM_ConfigClockSource+0x206>
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f6:	d87f      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 80085f8:	2b70      	cmp	r3, #112	@ 0x70
 80085fa:	d01a      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x13a>
 80085fc:	2b70      	cmp	r3, #112	@ 0x70
 80085fe:	d87b      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008600:	2b60      	cmp	r3, #96	@ 0x60
 8008602:	d050      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008604:	2b60      	cmp	r3, #96	@ 0x60
 8008606:	d877      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008608:	2b50      	cmp	r3, #80	@ 0x50
 800860a:	d03c      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x18e>
 800860c:	2b50      	cmp	r3, #80	@ 0x50
 800860e:	d873      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008610:	2b40      	cmp	r3, #64	@ 0x40
 8008612:	d058      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x1ce>
 8008614:	2b40      	cmp	r3, #64	@ 0x40
 8008616:	d86f      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008618:	2b30      	cmp	r3, #48	@ 0x30
 800861a:	d064      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 800861c:	2b30      	cmp	r3, #48	@ 0x30
 800861e:	d86b      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d060      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d867      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d05c      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 800862c:	2b10      	cmp	r3, #16
 800862e:	d05a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8008630:	e062      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008642:	f000 fd45 	bl	80090d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	609a      	str	r2, [r3, #8]
      break;
 800865e:	e04f      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008670:	f000 fd2e 	bl	80090d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008682:	609a      	str	r2, [r3, #8]
      break;
 8008684:	e03c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	461a      	mov	r2, r3
 8008694:	f000 fca0 	bl	8008fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2150      	movs	r1, #80	@ 0x50
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fcf9 	bl	8009096 <TIM_ITRx_SetConfig>
      break;
 80086a4:	e02c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b2:	461a      	mov	r2, r3
 80086b4:	f000 fcbf 	bl	8009036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2160      	movs	r1, #96	@ 0x60
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fce9 	bl	8009096 <TIM_ITRx_SetConfig>
      break;
 80086c4:	e01c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d2:	461a      	mov	r2, r3
 80086d4:	f000 fc80 	bl	8008fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2140      	movs	r1, #64	@ 0x40
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fcd9 	bl	8009096 <TIM_ITRx_SetConfig>
      break;
 80086e4:	e00c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f000 fcd0 	bl	8009096 <TIM_ITRx_SetConfig>
      break;
 80086f6:	e003      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
      break;
 80086fc:	e000      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80086fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	00100070 	.word	0x00100070
 8008720:	00100060 	.word	0x00100060
 8008724:	00100050 	.word	0x00100050
 8008728:	00100040 	.word	0x00100040
 800872c:	00100030 	.word	0x00100030
 8008730:	00100020 	.word	0x00100020

08008734 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a62      	ldr	r2, [pc, #392]	@ (8008934 <TIM_Base_SetConfig+0x19c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d02b      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a61      	ldr	r2, [pc, #388]	@ (8008938 <TIM_Base_SetConfig+0x1a0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d027      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087be:	d023      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087c6:	d01f      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a5c      	ldr	r2, [pc, #368]	@ (800893c <TIM_Base_SetConfig+0x1a4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d01b      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a5b      	ldr	r2, [pc, #364]	@ (8008940 <TIM_Base_SetConfig+0x1a8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d017      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a5a      	ldr	r2, [pc, #360]	@ (8008944 <TIM_Base_SetConfig+0x1ac>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d013      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a59      	ldr	r2, [pc, #356]	@ (8008948 <TIM_Base_SetConfig+0x1b0>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a58      	ldr	r2, [pc, #352]	@ (800894c <TIM_Base_SetConfig+0x1b4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a57      	ldr	r2, [pc, #348]	@ (8008950 <TIM_Base_SetConfig+0x1b8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a56      	ldr	r2, [pc, #344]	@ (8008954 <TIM_Base_SetConfig+0x1bc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_Base_SetConfig+0x70>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a55      	ldr	r2, [pc, #340]	@ (8008958 <TIM_Base_SetConfig+0x1c0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d108      	bne.n	800881a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a45      	ldr	r2, [pc, #276]	@ (8008934 <TIM_Base_SetConfig+0x19c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d03b      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a44      	ldr	r2, [pc, #272]	@ (8008938 <TIM_Base_SetConfig+0x1a0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d037      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008830:	d033      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008838:	d02f      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a3f      	ldr	r2, [pc, #252]	@ (800893c <TIM_Base_SetConfig+0x1a4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d02b      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a3e      	ldr	r2, [pc, #248]	@ (8008940 <TIM_Base_SetConfig+0x1a8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d027      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a3d      	ldr	r2, [pc, #244]	@ (8008944 <TIM_Base_SetConfig+0x1ac>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d023      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a3c      	ldr	r2, [pc, #240]	@ (8008948 <TIM_Base_SetConfig+0x1b0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01f      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a3b      	ldr	r2, [pc, #236]	@ (800894c <TIM_Base_SetConfig+0x1b4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d01b      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a3a      	ldr	r2, [pc, #232]	@ (8008950 <TIM_Base_SetConfig+0x1b8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d017      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a39      	ldr	r2, [pc, #228]	@ (8008954 <TIM_Base_SetConfig+0x1bc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d013      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a38      	ldr	r2, [pc, #224]	@ (8008958 <TIM_Base_SetConfig+0x1c0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00f      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a37      	ldr	r2, [pc, #220]	@ (800895c <TIM_Base_SetConfig+0x1c4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00b      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a36      	ldr	r2, [pc, #216]	@ (8008960 <TIM_Base_SetConfig+0x1c8>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a35      	ldr	r2, [pc, #212]	@ (8008964 <TIM_Base_SetConfig+0x1cc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_Base_SetConfig+0x102>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a34      	ldr	r2, [pc, #208]	@ (8008968 <TIM_Base_SetConfig+0x1d0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d108      	bne.n	80088ac <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a18      	ldr	r2, [pc, #96]	@ (8008934 <TIM_Base_SetConfig+0x19c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <TIM_Base_SetConfig+0x168>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a17      	ldr	r2, [pc, #92]	@ (8008938 <TIM_Base_SetConfig+0x1a0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00f      	beq.n	8008900 <TIM_Base_SetConfig+0x168>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <TIM_Base_SetConfig+0x1bc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00b      	beq.n	8008900 <TIM_Base_SetConfig+0x168>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <TIM_Base_SetConfig+0x1c0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d007      	beq.n	8008900 <TIM_Base_SetConfig+0x168>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008964 <TIM_Base_SetConfig+0x1cc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_Base_SetConfig+0x168>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008968 <TIM_Base_SetConfig+0x1d0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d103      	bne.n	8008908 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b01      	cmp	r3, #1
 8008918:	d105      	bne.n	8008926 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	611a      	str	r2, [r3, #16]
  }
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40012c00 	.word	0x40012c00
 8008938:	50012c00 	.word	0x50012c00
 800893c:	40000400 	.word	0x40000400
 8008940:	50000400 	.word	0x50000400
 8008944:	40000800 	.word	0x40000800
 8008948:	50000800 	.word	0x50000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	50000c00 	.word	0x50000c00
 8008954:	40013400 	.word	0x40013400
 8008958:	50013400 	.word	0x50013400
 800895c:	40001800 	.word	0x40001800
 8008960:	50001800 	.word	0x50001800
 8008964:	40014000 	.word	0x40014000
 8008968:	50014000 	.word	0x50014000

0800896c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f023 0201 	bic.w	r2, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800899a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 0302 	bic.w	r3, r3, #2
 80089b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a30      	ldr	r2, [pc, #192]	@ (8008a88 <TIM_OC1_SetConfig+0x11c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <TIM_OC1_SetConfig+0x88>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	@ (8008a8c <TIM_OC1_SetConfig+0x120>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00f      	beq.n	80089f4 <TIM_OC1_SetConfig+0x88>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008a90 <TIM_OC1_SetConfig+0x124>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00b      	beq.n	80089f4 <TIM_OC1_SetConfig+0x88>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a2d      	ldr	r2, [pc, #180]	@ (8008a94 <TIM_OC1_SetConfig+0x128>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d007      	beq.n	80089f4 <TIM_OC1_SetConfig+0x88>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a98 <TIM_OC1_SetConfig+0x12c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d003      	beq.n	80089f4 <TIM_OC1_SetConfig+0x88>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a2b      	ldr	r2, [pc, #172]	@ (8008a9c <TIM_OC1_SetConfig+0x130>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d10c      	bne.n	8008a0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f023 0308 	bic.w	r3, r3, #8
 80089fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f023 0304 	bic.w	r3, r3, #4
 8008a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a1d      	ldr	r2, [pc, #116]	@ (8008a88 <TIM_OC1_SetConfig+0x11c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d013      	beq.n	8008a3e <TIM_OC1_SetConfig+0xd2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a1c      	ldr	r2, [pc, #112]	@ (8008a8c <TIM_OC1_SetConfig+0x120>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00f      	beq.n	8008a3e <TIM_OC1_SetConfig+0xd2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a1b      	ldr	r2, [pc, #108]	@ (8008a90 <TIM_OC1_SetConfig+0x124>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00b      	beq.n	8008a3e <TIM_OC1_SetConfig+0xd2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a1a      	ldr	r2, [pc, #104]	@ (8008a94 <TIM_OC1_SetConfig+0x128>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d007      	beq.n	8008a3e <TIM_OC1_SetConfig+0xd2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a19      	ldr	r2, [pc, #100]	@ (8008a98 <TIM_OC1_SetConfig+0x12c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_OC1_SetConfig+0xd2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a18      	ldr	r2, [pc, #96]	@ (8008a9c <TIM_OC1_SetConfig+0x130>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d111      	bne.n	8008a62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	621a      	str	r2, [r3, #32]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	40012c00 	.word	0x40012c00
 8008a8c:	50012c00 	.word	0x50012c00
 8008a90:	40013400 	.word	0x40013400
 8008a94:	50013400 	.word	0x50013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	50014000 	.word	0x50014000

08008aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	f023 0210 	bic.w	r2, r3, #16
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0320 	bic.w	r3, r3, #32
 8008aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a2e      	ldr	r2, [pc, #184]	@ (8008bb8 <TIM_OC2_SetConfig+0x118>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00b      	beq.n	8008b1c <TIM_OC2_SetConfig+0x7c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a2d      	ldr	r2, [pc, #180]	@ (8008bbc <TIM_OC2_SetConfig+0x11c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d007      	beq.n	8008b1c <TIM_OC2_SetConfig+0x7c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc0 <TIM_OC2_SetConfig+0x120>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_OC2_SetConfig+0x7c>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a2b      	ldr	r2, [pc, #172]	@ (8008bc4 <TIM_OC2_SetConfig+0x124>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d10d      	bne.n	8008b38 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb8 <TIM_OC2_SetConfig+0x118>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <TIM_OC2_SetConfig+0xc8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a1e      	ldr	r2, [pc, #120]	@ (8008bbc <TIM_OC2_SetConfig+0x11c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00f      	beq.n	8008b68 <TIM_OC2_SetConfig+0xc8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc0 <TIM_OC2_SetConfig+0x120>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_OC2_SetConfig+0xc8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc4 <TIM_OC2_SetConfig+0x124>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_OC2_SetConfig+0xc8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc8 <TIM_OC2_SetConfig+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_OC2_SetConfig+0xc8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a1a      	ldr	r2, [pc, #104]	@ (8008bcc <TIM_OC2_SetConfig+0x12c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d113      	bne.n	8008b90 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40012c00 	.word	0x40012c00
 8008bbc:	50012c00 	.word	0x50012c00
 8008bc0:	40013400 	.word	0x40013400
 8008bc4:	50013400 	.word	0x50013400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	50014000 	.word	0x50014000

08008bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce4 <TIM_OC3_SetConfig+0x114>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00b      	beq.n	8008c4a <TIM_OC3_SetConfig+0x7a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce8 <TIM_OC3_SetConfig+0x118>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d007      	beq.n	8008c4a <TIM_OC3_SetConfig+0x7a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8008cec <TIM_OC3_SetConfig+0x11c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <TIM_OC3_SetConfig+0x7a>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf0 <TIM_OC3_SetConfig+0x120>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d10d      	bne.n	8008c66 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce4 <TIM_OC3_SetConfig+0x114>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <TIM_OC3_SetConfig+0xc6>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ce8 <TIM_OC3_SetConfig+0x118>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00f      	beq.n	8008c96 <TIM_OC3_SetConfig+0xc6>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a1c      	ldr	r2, [pc, #112]	@ (8008cec <TIM_OC3_SetConfig+0x11c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <TIM_OC3_SetConfig+0xc6>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf0 <TIM_OC3_SetConfig+0x120>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d007      	beq.n	8008c96 <TIM_OC3_SetConfig+0xc6>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf4 <TIM_OC3_SetConfig+0x124>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_OC3_SetConfig+0xc6>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a19      	ldr	r2, [pc, #100]	@ (8008cf8 <TIM_OC3_SetConfig+0x128>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d113      	bne.n	8008cbe <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	621a      	str	r2, [r3, #32]
}
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	40012c00 	.word	0x40012c00
 8008ce8:	50012c00 	.word	0x50012c00
 8008cec:	40013400 	.word	0x40013400
 8008cf0:	50013400 	.word	0x50013400
 8008cf4:	40014000 	.word	0x40014000
 8008cf8:	50014000 	.word	0x50014000

08008cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	031b      	lsls	r3, r3, #12
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008e14 <TIM_OC4_SetConfig+0x118>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00b      	beq.n	8008d78 <TIM_OC4_SetConfig+0x7c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a2d      	ldr	r2, [pc, #180]	@ (8008e18 <TIM_OC4_SetConfig+0x11c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d007      	beq.n	8008d78 <TIM_OC4_SetConfig+0x7c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008e1c <TIM_OC4_SetConfig+0x120>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_OC4_SetConfig+0x7c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a2b      	ldr	r2, [pc, #172]	@ (8008e20 <TIM_OC4_SetConfig+0x124>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d10d      	bne.n	8008d94 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	031b      	lsls	r3, r3, #12
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1f      	ldr	r2, [pc, #124]	@ (8008e14 <TIM_OC4_SetConfig+0x118>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <TIM_OC4_SetConfig+0xc8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e18 <TIM_OC4_SetConfig+0x11c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00f      	beq.n	8008dc4 <TIM_OC4_SetConfig+0xc8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a1d      	ldr	r2, [pc, #116]	@ (8008e1c <TIM_OC4_SetConfig+0x120>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00b      	beq.n	8008dc4 <TIM_OC4_SetConfig+0xc8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a1c      	ldr	r2, [pc, #112]	@ (8008e20 <TIM_OC4_SetConfig+0x124>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d007      	beq.n	8008dc4 <TIM_OC4_SetConfig+0xc8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e24 <TIM_OC4_SetConfig+0x128>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC4_SetConfig+0xc8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008e28 <TIM_OC4_SetConfig+0x12c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d113      	bne.n	8008dec <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dd2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	019b      	lsls	r3, r3, #6
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	019b      	lsls	r3, r3, #6
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	621a      	str	r2, [r3, #32]
}
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	40012c00 	.word	0x40012c00
 8008e18:	50012c00 	.word	0x50012c00
 8008e1c:	40013400 	.word	0x40013400
 8008e20:	50013400 	.word	0x50013400
 8008e24:	40014000 	.word	0x40014000
 8008e28:	50014000 	.word	0x50014000

08008e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	041b      	lsls	r3, r3, #16
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <TIM_OC5_SetConfig+0xbc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <TIM_OC5_SetConfig+0x82>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <TIM_OC5_SetConfig+0xc0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00f      	beq.n	8008eae <TIM_OC5_SetConfig+0x82>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a17      	ldr	r2, [pc, #92]	@ (8008ef0 <TIM_OC5_SetConfig+0xc4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00b      	beq.n	8008eae <TIM_OC5_SetConfig+0x82>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a16      	ldr	r2, [pc, #88]	@ (8008ef4 <TIM_OC5_SetConfig+0xc8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <TIM_OC5_SetConfig+0x82>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a15      	ldr	r2, [pc, #84]	@ (8008ef8 <TIM_OC5_SetConfig+0xcc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_OC5_SetConfig+0x82>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a14      	ldr	r2, [pc, #80]	@ (8008efc <TIM_OC5_SetConfig+0xd0>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d109      	bne.n	8008ec2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	621a      	str	r2, [r3, #32]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	50012c00 	.word	0x50012c00
 8008ef0:	40013400 	.word	0x40013400
 8008ef4:	50013400 	.word	0x50013400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	50014000 	.word	0x50014000

08008f00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc0 <TIM_OC6_SetConfig+0xc0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <TIM_OC6_SetConfig+0x84>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a19      	ldr	r2, [pc, #100]	@ (8008fc4 <TIM_OC6_SetConfig+0xc4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00f      	beq.n	8008f84 <TIM_OC6_SetConfig+0x84>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a18      	ldr	r2, [pc, #96]	@ (8008fc8 <TIM_OC6_SetConfig+0xc8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00b      	beq.n	8008f84 <TIM_OC6_SetConfig+0x84>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a17      	ldr	r2, [pc, #92]	@ (8008fcc <TIM_OC6_SetConfig+0xcc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d007      	beq.n	8008f84 <TIM_OC6_SetConfig+0x84>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a16      	ldr	r2, [pc, #88]	@ (8008fd0 <TIM_OC6_SetConfig+0xd0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <TIM_OC6_SetConfig+0x84>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	@ (8008fd4 <TIM_OC6_SetConfig+0xd4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d109      	bne.n	8008f98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	029b      	lsls	r3, r3, #10
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	50012c00 	.word	0x50012c00
 8008fc8:	40013400 	.word	0x40013400
 8008fcc:	50013400 	.word	0x50013400
 8008fd0:	40014000 	.word	0x40014000
 8008fd4:	50014000 	.word	0x50014000

08008fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	f023 0201 	bic.w	r2, r3, #1
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	4313      	orrs	r3, r2
 800900c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 030a 	bic.w	r3, r3, #10
 8009014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	621a      	str	r2, [r3, #32]
}
 800902a:	bf00      	nop
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009036:	b480      	push	{r7}
 8009038:	b087      	sub	sp, #28
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	f023 0210 	bic.w	r2, r3, #16
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009072:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	621a      	str	r2, [r3, #32]
}
 800908a:	bf00      	nop
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80090ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f043 0307 	orr.w	r3, r3, #7
 80090bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	609a      	str	r2, [r3, #8]
}
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	021a      	lsls	r2, r3, #8
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	609a      	str	r2, [r3, #8]
}
 8009104:	bf00      	nop
 8009106:	371c      	adds	r7, #28
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	2201      	movs	r2, #1
 8009124:	fa02 f303 	lsl.w	r3, r2, r3
 8009128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a1a      	ldr	r2, [r3, #32]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	43db      	mvns	r3, r3
 8009132:	401a      	ands	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 031f 	and.w	r3, r3, #31
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	fa01 f303 	lsl.w	r3, r1, r3
 8009148:	431a      	orrs	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	621a      	str	r2, [r3, #32]
}
 800914e:	bf00      	nop
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009170:	2302      	movs	r3, #2
 8009172:	e0a1      	b.n	80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a4a      	ldr	r2, [pc, #296]	@ (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00e      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a49      	ldr	r2, [pc, #292]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d009      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a47      	ldr	r2, [pc, #284]	@ (80092cc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a46      	ldr	r2, [pc, #280]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d108      	bne.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80091d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a34      	ldr	r2, [pc, #208]	@ (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d04a      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a33      	ldr	r2, [pc, #204]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d045      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009208:	d040      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009212:	d03b      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a2e      	ldr	r2, [pc, #184]	@ (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d036      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a2d      	ldr	r2, [pc, #180]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d031      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a2b      	ldr	r2, [pc, #172]	@ (80092dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d02c      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a2a      	ldr	r2, [pc, #168]	@ (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d027      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a28      	ldr	r2, [pc, #160]	@ (80092e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d022      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a27      	ldr	r2, [pc, #156]	@ (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d01d      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1d      	ldr	r2, [pc, #116]	@ (80092cc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d018      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1c      	ldr	r2, [pc, #112]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d013      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a20      	ldr	r2, [pc, #128]	@ (80092ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00e      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1f      	ldr	r2, [pc, #124]	@ (80092f0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d009      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1d      	ldr	r2, [pc, #116]	@ (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d004      	beq.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a1c      	ldr	r2, [pc, #112]	@ (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d10c      	bne.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009292:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	4313      	orrs	r3, r2
 800929c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40012c00 	.word	0x40012c00
 80092c8:	50012c00 	.word	0x50012c00
 80092cc:	40013400 	.word	0x40013400
 80092d0:	50013400 	.word	0x50013400
 80092d4:	40000400 	.word	0x40000400
 80092d8:	50000400 	.word	0x50000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	50000800 	.word	0x50000800
 80092e4:	40000c00 	.word	0x40000c00
 80092e8:	50000c00 	.word	0x50000c00
 80092ec:	40001800 	.word	0x40001800
 80092f0:	50001800 	.word	0x50001800
 80092f4:	40014000 	.word	0x40014000
 80092f8:	50014000 	.word	0x50014000

080092fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e042      	b.n	8009420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f8 ff63 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2224      	movs	r2, #36	@ 0x24
 80093b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fb4c 	bl	8009a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f99b 	bl	8009714 <UART_SetConfig>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e01b      	b.n	8009420 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fbcb 	bl	8009bb4 <UART_CheckIdleState>
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	@ 0x28
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943e:	2b20      	cmp	r3, #32
 8009440:	f040 808b 	bne.w	800955a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <HAL_UART_Transmit+0x28>
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e083      	b.n	800955c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945e:	2b80      	cmp	r3, #128	@ 0x80
 8009460:	d107      	bne.n	8009472 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009470:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2221      	movs	r2, #33	@ 0x21
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009482:	f7f9 fb29 	bl	8002ad8 <HAL_GetTick>
 8009486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	88fa      	ldrh	r2, [r7, #6]
 800948c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	88fa      	ldrh	r2, [r7, #6]
 8009494:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a0:	d108      	bne.n	80094b4 <HAL_UART_Transmit+0x8c>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d104      	bne.n	80094b4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	e003      	b.n	80094bc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094bc:	e030      	b.n	8009520 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2180      	movs	r1, #128	@ 0x80
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fc1d 	bl	8009d08 <UART_WaitOnFlagUntilTimeout>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e03d      	b.n	800955c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	3302      	adds	r3, #2
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	e007      	b.n	800950e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	3301      	adds	r3, #1
 800950c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009526:	b29b      	uxth	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1c8      	bne.n	80094be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	2140      	movs	r1, #64	@ 0x40
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fbe6 	bl	8009d08 <UART_WaitOnFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e006      	b.n	800955c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e000      	b.n	800955c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800955a:	2302      	movs	r3, #2
  }
}
 800955c:	4618      	mov	r0, r3
 800955e:	3720      	adds	r7, #32
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08a      	sub	sp, #40	@ 0x28
 8009568:	af02      	add	r7, sp, #8
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	4613      	mov	r3, r2
 8009572:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800957a:	2b20      	cmp	r3, #32
 800957c:	f040 80c4 	bne.w	8009708 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <HAL_UART_Receive+0x28>
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0bc      	b.n	800970a <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800959a:	2b40      	cmp	r3, #64	@ 0x40
 800959c:	d107      	bne.n	80095ae <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ac:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2222      	movs	r2, #34	@ 0x22
 80095ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095c4:	f7f9 fa88 	bl	8002ad8 <HAL_GetTick>
 80095c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e2:	d10e      	bne.n	8009602 <HAL_UART_Receive+0x9e>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d105      	bne.n	80095f8 <HAL_UART_Receive+0x94>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80095f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095f6:	e02d      	b.n	8009654 <HAL_UART_Receive+0xf0>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	22ff      	movs	r2, #255	@ 0xff
 80095fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009600:	e028      	b.n	8009654 <HAL_UART_Receive+0xf0>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <HAL_UART_Receive+0xc2>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d104      	bne.n	800961c <HAL_UART_Receive+0xb8>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	22ff      	movs	r2, #255	@ 0xff
 8009616:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800961a:	e01b      	b.n	8009654 <HAL_UART_Receive+0xf0>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	227f      	movs	r2, #127	@ 0x7f
 8009620:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009624:	e016      	b.n	8009654 <HAL_UART_Receive+0xf0>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800962e:	d10d      	bne.n	800964c <HAL_UART_Receive+0xe8>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <HAL_UART_Receive+0xde>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	227f      	movs	r2, #127	@ 0x7f
 800963c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009640:	e008      	b.n	8009654 <HAL_UART_Receive+0xf0>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	223f      	movs	r2, #63	@ 0x3f
 8009646:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800964a:	e003      	b.n	8009654 <HAL_UART_Receive+0xf0>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800965a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009664:	d108      	bne.n	8009678 <HAL_UART_Receive+0x114>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800966e:	2300      	movs	r3, #0
 8009670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	e003      	b.n	8009680 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009680:	e036      	b.n	80096f0 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	2120      	movs	r1, #32
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fb3b 	bl	8009d08 <UART_WaitOnFlagUntilTimeout>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2220      	movs	r2, #32
 800969c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e032      	b.n	800970a <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10c      	bne.n	80096c4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	8a7b      	ldrh	r3, [r7, #18]
 80096b4:	4013      	ands	r3, r2
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	3302      	adds	r3, #2
 80096c0:	61bb      	str	r3, [r7, #24]
 80096c2:	e00c      	b.n	80096de <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	8a7b      	ldrh	r3, [r7, #18]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4013      	ands	r3, r2
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1c2      	bne.n	8009682 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e000      	b.n	800970a <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8009708:	2302      	movs	r3, #2
  }
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009718:	b094      	sub	sp, #80	@ 0x50
 800971a:	af00      	add	r7, sp, #0
 800971c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	4b83      	ldr	r3, [pc, #524]	@ (8009938 <UART_SetConfig+0x224>)
 800972a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	431a      	orrs	r2, r3
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	431a      	orrs	r2, r3
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	4313      	orrs	r3, r2
 8009742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	497c      	ldr	r1, [pc, #496]	@ (800993c <UART_SetConfig+0x228>)
 800974c:	4019      	ands	r1, r3
 800974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009754:	430b      	orrs	r3, r1
 8009756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009764:	68d9      	ldr	r1, [r3, #12]
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	ea40 0301 	orr.w	r3, r0, r1
 800976e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	4b6f      	ldr	r3, [pc, #444]	@ (8009938 <UART_SetConfig+0x224>)
 800977c:	429a      	cmp	r2, r3
 800977e:	d009      	beq.n	8009794 <UART_SetConfig+0x80>
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4b6e      	ldr	r3, [pc, #440]	@ (8009940 <UART_SetConfig+0x22c>)
 8009786:	429a      	cmp	r2, r3
 8009788:	d004      	beq.n	8009794 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	6a1a      	ldr	r2, [r3, #32]
 800978e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009790:	4313      	orrs	r3, r2
 8009792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800979e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b2:	f023 000f 	bic.w	r0, r3, #15
 80097b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	ea40 0301 	orr.w	r3, r0, r1
 80097c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	4b5e      	ldr	r3, [pc, #376]	@ (8009944 <UART_SetConfig+0x230>)
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d102      	bne.n	80097d4 <UART_SetConfig+0xc0>
 80097ce:	2301      	movs	r3, #1
 80097d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097d2:	e032      	b.n	800983a <UART_SetConfig+0x126>
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	4b5b      	ldr	r3, [pc, #364]	@ (8009948 <UART_SetConfig+0x234>)
 80097da:	429a      	cmp	r2, r3
 80097dc:	d102      	bne.n	80097e4 <UART_SetConfig+0xd0>
 80097de:	2302      	movs	r3, #2
 80097e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097e2:	e02a      	b.n	800983a <UART_SetConfig+0x126>
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4b58      	ldr	r3, [pc, #352]	@ (800994c <UART_SetConfig+0x238>)
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d102      	bne.n	80097f4 <UART_SetConfig+0xe0>
 80097ee:	2304      	movs	r3, #4
 80097f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f2:	e022      	b.n	800983a <UART_SetConfig+0x126>
 80097f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	4b55      	ldr	r3, [pc, #340]	@ (8009950 <UART_SetConfig+0x23c>)
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d102      	bne.n	8009804 <UART_SetConfig+0xf0>
 80097fe:	2308      	movs	r3, #8
 8009800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009802:	e01a      	b.n	800983a <UART_SetConfig+0x126>
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b52      	ldr	r3, [pc, #328]	@ (8009954 <UART_SetConfig+0x240>)
 800980a:	429a      	cmp	r2, r3
 800980c:	d102      	bne.n	8009814 <UART_SetConfig+0x100>
 800980e:	2310      	movs	r3, #16
 8009810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009812:	e012      	b.n	800983a <UART_SetConfig+0x126>
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4b4f      	ldr	r3, [pc, #316]	@ (8009958 <UART_SetConfig+0x244>)
 800981a:	429a      	cmp	r2, r3
 800981c:	d102      	bne.n	8009824 <UART_SetConfig+0x110>
 800981e:	2320      	movs	r3, #32
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009822:	e00a      	b.n	800983a <UART_SetConfig+0x126>
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	4b43      	ldr	r3, [pc, #268]	@ (8009938 <UART_SetConfig+0x224>)
 800982a:	429a      	cmp	r2, r3
 800982c:	d103      	bne.n	8009836 <UART_SetConfig+0x122>
 800982e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009834:	e001      	b.n	800983a <UART_SetConfig+0x126>
 8009836:	2300      	movs	r3, #0
 8009838:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b3e      	ldr	r3, [pc, #248]	@ (8009938 <UART_SetConfig+0x224>)
 8009840:	429a      	cmp	r2, r3
 8009842:	d005      	beq.n	8009850 <UART_SetConfig+0x13c>
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b3d      	ldr	r3, [pc, #244]	@ (8009940 <UART_SetConfig+0x22c>)
 800984a:	429a      	cmp	r2, r3
 800984c:	f040 8088 	bne.w	8009960 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009852:	2200      	movs	r2, #0
 8009854:	623b      	str	r3, [r7, #32]
 8009856:	627a      	str	r2, [r7, #36]	@ 0x24
 8009858:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800985c:	f7fc fc3c 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009860:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80eb 	beq.w	8009a40 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800986a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	4a3b      	ldr	r2, [pc, #236]	@ (800995c <UART_SetConfig+0x248>)
 8009870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009874:	461a      	mov	r2, r3
 8009876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009878:	fbb3 f3f2 	udiv	r3, r3, r2
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	4413      	add	r3, r2
 8009888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800988a:	429a      	cmp	r2, r3
 800988c:	d305      	bcc.n	800989a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	429a      	cmp	r2, r3
 8009898:	d903      	bls.n	80098a2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80098a0:	e048      	b.n	8009934 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098a4:	2200      	movs	r2, #0
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	61fa      	str	r2, [r7, #28]
 80098aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ae:	4a2b      	ldr	r2, [pc, #172]	@ (800995c <UART_SetConfig+0x248>)
 80098b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2200      	movs	r2, #0
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	617a      	str	r2, [r7, #20]
 80098bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098c4:	f7f7 f9f4 	bl	8000cb0 <__aeabi_uldivmod>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4610      	mov	r0, r2
 80098ce:	4619      	mov	r1, r3
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	020b      	lsls	r3, r1, #8
 80098da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098de:	0202      	lsls	r2, r0, #8
 80098e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098e2:	6849      	ldr	r1, [r1, #4]
 80098e4:	0849      	lsrs	r1, r1, #1
 80098e6:	2000      	movs	r0, #0
 80098e8:	460c      	mov	r4, r1
 80098ea:	4605      	mov	r5, r0
 80098ec:	eb12 0804 	adds.w	r8, r2, r4
 80098f0:	eb43 0905 	adc.w	r9, r3, r5
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	60bb      	str	r3, [r7, #8]
 80098fc:	60fa      	str	r2, [r7, #12]
 80098fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	f7f7 f9d3 	bl	8000cb0 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4613      	mov	r3, r2
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009918:	d308      	bcc.n	800992c <UART_SetConfig+0x218>
 800991a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009920:	d204      	bcs.n	800992c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009928:	60da      	str	r2, [r3, #12]
 800992a:	e003      	b.n	8009934 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009932:	e085      	b.n	8009a40 <UART_SetConfig+0x32c>
 8009934:	e084      	b.n	8009a40 <UART_SetConfig+0x32c>
 8009936:	bf00      	nop
 8009938:	44002400 	.word	0x44002400
 800993c:	cfff69f3 	.word	0xcfff69f3
 8009940:	54002400 	.word	0x54002400
 8009944:	40013800 	.word	0x40013800
 8009948:	40004400 	.word	0x40004400
 800994c:	40004800 	.word	0x40004800
 8009950:	40004c00 	.word	0x40004c00
 8009954:	40005000 	.word	0x40005000
 8009958:	40006400 	.word	0x40006400
 800995c:	0800ebac 	.word	0x0800ebac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009968:	d13c      	bne.n	80099e4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800996a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800996c:	2200      	movs	r2, #0
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009976:	f7fc fbaf 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800997a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800997c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d05e      	beq.n	8009a40 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009986:	4a39      	ldr	r2, [pc, #228]	@ (8009a6c <UART_SetConfig+0x358>)
 8009988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800998c:	461a      	mov	r2, r3
 800998e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009990:	fbb3 f3f2 	udiv	r3, r3, r2
 8009994:	005a      	lsls	r2, r3, #1
 8009996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	085b      	lsrs	r3, r3, #1
 800999c:	441a      	add	r2, r3
 800999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099aa:	2b0f      	cmp	r3, #15
 80099ac:	d916      	bls.n	80099dc <UART_SetConfig+0x2c8>
 80099ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b4:	d212      	bcs.n	80099dc <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f023 030f 	bic.w	r3, r3, #15
 80099be:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	f003 0307 	and.w	r3, r3, #7
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80099ce:	4313      	orrs	r3, r2
 80099d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80099d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80099d8:	60da      	str	r2, [r3, #12]
 80099da:	e031      	b.n	8009a40 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80099e2:	e02d      	b.n	8009a40 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80099e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099e6:	2200      	movs	r2, #0
 80099e8:	469a      	mov	sl, r3
 80099ea:	4693      	mov	fp, r2
 80099ec:	4650      	mov	r0, sl
 80099ee:	4659      	mov	r1, fp
 80099f0:	f7fc fb72 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80099f4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80099f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d021      	beq.n	8009a40 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a00:	4a1a      	ldr	r2, [pc, #104]	@ (8009a6c <UART_SetConfig+0x358>)
 8009a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a06:	461a      	mov	r2, r3
 8009a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	441a      	add	r2, r3
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a22:	2b0f      	cmp	r3, #15
 8009a24:	d909      	bls.n	8009a3a <UART_SetConfig+0x326>
 8009a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a2c:	d205      	bcs.n	8009a3a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60da      	str	r2, [r3, #12]
 8009a38:	e002      	b.n	8009a40 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	2201      	movs	r2, #1
 8009a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	2200      	movs	r2, #0
 8009a54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a58:	2200      	movs	r2, #0
 8009a5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3750      	adds	r7, #80	@ 0x50
 8009a64:	46bd      	mov	sp, r7
 8009a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a6a:	bf00      	nop
 8009a6c:	0800ebac 	.word	0x0800ebac

08009a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f003 0308 	and.w	r3, r3, #8
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00a      	beq.n	8009a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01a      	beq.n	8009b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b6e:	d10a      	bne.n	8009b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	605a      	str	r2, [r3, #4]
  }
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b098      	sub	sp, #96	@ 0x60
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bc4:	f7f8 ff88 	bl	8002ad8 <HAL_GetTick>
 8009bc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d12f      	bne.n	8009c38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be0:	2200      	movs	r2, #0
 8009be2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f88e 	bl	8009d08 <UART_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d022      	beq.n	8009c38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e6      	bne.n	8009bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e063      	b.n	8009d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d149      	bne.n	8009cda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f857 	bl	8009d08 <UART_WaitOnFlagUntilTimeout>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d03c      	beq.n	8009cda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e6      	bne.n	8009c60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3308      	adds	r3, #8
 8009c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0301 	bic.w	r3, r3, #1
 8009ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cb2:	61fa      	str	r2, [r7, #28]
 8009cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	69b9      	ldr	r1, [r7, #24]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e5      	bne.n	8009c92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e012      	b.n	8009d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3758      	adds	r7, #88	@ 0x58
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d18:	e04f      	b.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d20:	d04b      	beq.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d22:	f7f8 fed9 	bl	8002ad8 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e04e      	b.n	8009dda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0304 	and.w	r3, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d037      	beq.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b80      	cmp	r3, #128	@ 0x80
 8009d4e:	d034      	beq.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b40      	cmp	r3, #64	@ 0x40
 8009d54:	d031      	beq.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d110      	bne.n	8009d86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f838 	bl	8009de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2208      	movs	r2, #8
 8009d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e029      	b.n	8009dda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d94:	d111      	bne.n	8009dba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f81e 	bl	8009de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e00f      	b.n	8009dda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69da      	ldr	r2, [r3, #28]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	bf0c      	ite	eq
 8009dca:	2301      	moveq	r3, #1
 8009dcc:	2300      	movne	r3, #0
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d0a0      	beq.n	8009d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b095      	sub	sp, #84	@ 0x54
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e6      	bne.n	8009dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e32:	f023 0301 	bic.w	r3, r3, #1
 8009e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e3      	bne.n	8009e1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d118      	bne.n	8009e8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f023 0310 	bic.w	r3, r3, #16
 8009e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	6979      	ldr	r1, [r7, #20]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	613b      	str	r3, [r7, #16]
   return(result);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e6      	bne.n	8009e5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ea2:	bf00      	nop
 8009ea4:	3754      	adds	r7, #84	@ 0x54
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e027      	b.n	8009f14 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2224      	movs	r2, #36	@ 0x24
 8009ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0201 	bic.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ef2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e02d      	b.n	8009f94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2224      	movs	r2, #36	@ 0x24
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0201 	bic.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f84f 	bl	800a018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e02d      	b.n	800a010 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2224      	movs	r2, #36	@ 0x24
 8009fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0201 	bic.w	r2, r2, #1
 8009fda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f811 	bl	800a018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a038:	e031      	b.n	800a09e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a03a:	2308      	movs	r3, #8
 800a03c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a03e:	2308      	movs	r3, #8
 800a040:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	0e5b      	lsrs	r3, r3, #25
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	0f5b      	lsrs	r3, r3, #29
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	7b3a      	ldrb	r2, [r7, #12]
 800a066:	4911      	ldr	r1, [pc, #68]	@ (800a0ac <UARTEx_SetNbDataToProcess+0x94>)
 800a068:	5c8a      	ldrb	r2, [r1, r2]
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a06e:	7b3a      	ldrb	r2, [r7, #12]
 800a070:	490f      	ldr	r1, [pc, #60]	@ (800a0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a072:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a074:	fb93 f3f2 	sdiv	r3, r3, r2
 800a078:	b29a      	uxth	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	7b7a      	ldrb	r2, [r7, #13]
 800a084:	4909      	ldr	r1, [pc, #36]	@ (800a0ac <UARTEx_SetNbDataToProcess+0x94>)
 800a086:	5c8a      	ldrb	r2, [r1, r2]
 800a088:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a08c:	7b7a      	ldrb	r2, [r7, #13]
 800a08e:	4908      	ldr	r1, [pc, #32]	@ (800a0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a090:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a092:	fb93 f3f2 	sdiv	r3, r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a09e:	bf00      	nop
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	0800ebc4 	.word	0x0800ebc4
 800a0b0:	0800ebcc 	.word	0x0800ebcc

0800a0b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a0bc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a0c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	43db      	mvns	r3, r3
 800a0ca:	401a      	ands	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	641a      	str	r2, [r3, #64]	@ 0x40
 800a0fc:	e00b      	b.n	800a116 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d106      	bne.n	800a112 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	641a      	str	r2, [r3, #64]	@ 0x40
 800a110:	e001      	b.n	800a116 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e000      	b.n	800a118 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a124:	b084      	sub	sp, #16
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	f107 001c 	add.w	r0, r7, #28
 800a132:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a140:	f023 0201 	bic.w	r2, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a148:	2100      	movs	r1, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff ffc7 	bl	800a0de <USB_SetCurrentMode>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a166:	b004      	add	sp, #16
 800a168:	4770      	bx	lr

0800a16a <__cvt>:
 800a16a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a16e:	ec57 6b10 	vmov	r6, r7, d0
 800a172:	2f00      	cmp	r7, #0
 800a174:	460c      	mov	r4, r1
 800a176:	4619      	mov	r1, r3
 800a178:	463b      	mov	r3, r7
 800a17a:	bfb4      	ite	lt
 800a17c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a180:	2300      	movge	r3, #0
 800a182:	4691      	mov	r9, r2
 800a184:	bfbf      	itttt	lt
 800a186:	4632      	movlt	r2, r6
 800a188:	461f      	movlt	r7, r3
 800a18a:	232d      	movlt	r3, #45	@ 0x2d
 800a18c:	4616      	movlt	r6, r2
 800a18e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a192:	700b      	strb	r3, [r1, #0]
 800a194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a196:	f023 0820 	bic.w	r8, r3, #32
 800a19a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a19e:	d005      	beq.n	800a1ac <__cvt+0x42>
 800a1a0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1a4:	d100      	bne.n	800a1a8 <__cvt+0x3e>
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	e000      	b.n	800a1ae <__cvt+0x44>
 800a1ac:	2103      	movs	r1, #3
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	ab02      	add	r3, sp, #8
 800a1b6:	ec47 6b10 	vmov	d0, r6, r7
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	4653      	mov	r3, sl
 800a1be:	f001 f897 	bl	800b2f0 <_dtoa_r>
 800a1c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	d119      	bne.n	800a1fe <__cvt+0x94>
 800a1ca:	f019 0f01 	tst.w	r9, #1
 800a1ce:	d00e      	beq.n	800a1ee <__cvt+0x84>
 800a1d0:	eb00 0904 	add.w	r9, r0, r4
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 fc88 	bl	8000af0 <__aeabi_dcmpeq>
 800a1e0:	b108      	cbz	r0, 800a1e6 <__cvt+0x7c>
 800a1e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1e6:	2230      	movs	r2, #48	@ 0x30
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	454b      	cmp	r3, r9
 800a1ec:	d31e      	bcc.n	800a22c <__cvt+0xc2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f4:	1b5b      	subs	r3, r3, r5
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	b004      	add	sp, #16
 800a1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a202:	eb00 0904 	add.w	r9, r0, r4
 800a206:	d1e5      	bne.n	800a1d4 <__cvt+0x6a>
 800a208:	7803      	ldrb	r3, [r0, #0]
 800a20a:	2b30      	cmp	r3, #48	@ 0x30
 800a20c:	d10a      	bne.n	800a224 <__cvt+0xba>
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7f6 fc6b 	bl	8000af0 <__aeabi_dcmpeq>
 800a21a:	b918      	cbnz	r0, 800a224 <__cvt+0xba>
 800a21c:	f1c4 0401 	rsb	r4, r4, #1
 800a220:	f8ca 4000 	str.w	r4, [sl]
 800a224:	f8da 3000 	ldr.w	r3, [sl]
 800a228:	4499      	add	r9, r3
 800a22a:	e7d3      	b.n	800a1d4 <__cvt+0x6a>
 800a22c:	1c59      	adds	r1, r3, #1
 800a22e:	9103      	str	r1, [sp, #12]
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	e7d9      	b.n	800a1e8 <__cvt+0x7e>

0800a234 <__exponent>:
 800a234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a236:	2900      	cmp	r1, #0
 800a238:	7002      	strb	r2, [r0, #0]
 800a23a:	bfba      	itte	lt
 800a23c:	4249      	neglt	r1, r1
 800a23e:	232d      	movlt	r3, #45	@ 0x2d
 800a240:	232b      	movge	r3, #43	@ 0x2b
 800a242:	2909      	cmp	r1, #9
 800a244:	7043      	strb	r3, [r0, #1]
 800a246:	dd28      	ble.n	800a29a <__exponent+0x66>
 800a248:	f10d 0307 	add.w	r3, sp, #7
 800a24c:	270a      	movs	r7, #10
 800a24e:	461d      	mov	r5, r3
 800a250:	461a      	mov	r2, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	fbb1 f6f7 	udiv	r6, r1, r7
 800a258:	fb07 1416 	mls	r4, r7, r6, r1
 800a25c:	3430      	adds	r4, #48	@ 0x30
 800a25e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a262:	460c      	mov	r4, r1
 800a264:	4631      	mov	r1, r6
 800a266:	2c63      	cmp	r4, #99	@ 0x63
 800a268:	dcf2      	bgt.n	800a250 <__exponent+0x1c>
 800a26a:	3130      	adds	r1, #48	@ 0x30
 800a26c:	1e94      	subs	r4, r2, #2
 800a26e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a272:	1c41      	adds	r1, r0, #1
 800a274:	4623      	mov	r3, r4
 800a276:	42ab      	cmp	r3, r5
 800a278:	d30a      	bcc.n	800a290 <__exponent+0x5c>
 800a27a:	f10d 0309 	add.w	r3, sp, #9
 800a27e:	1a9b      	subs	r3, r3, r2
 800a280:	42ac      	cmp	r4, r5
 800a282:	bf88      	it	hi
 800a284:	2300      	movhi	r3, #0
 800a286:	3302      	adds	r3, #2
 800a288:	4403      	add	r3, r0
 800a28a:	1a18      	subs	r0, r3, r0
 800a28c:	b003      	add	sp, #12
 800a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a290:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a294:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a298:	e7ed      	b.n	800a276 <__exponent+0x42>
 800a29a:	2330      	movs	r3, #48	@ 0x30
 800a29c:	3130      	adds	r1, #48	@ 0x30
 800a29e:	7083      	strb	r3, [r0, #2]
 800a2a0:	1d03      	adds	r3, r0, #4
 800a2a2:	70c1      	strb	r1, [r0, #3]
 800a2a4:	e7f1      	b.n	800a28a <__exponent+0x56>
	...

0800a2a8 <_printf_float>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	b08d      	sub	sp, #52	@ 0x34
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	461f      	mov	r7, r3
 800a2b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	f000 fef1 	bl	800b0a0 <_localeconv_r>
 800a2be:	6803      	ldr	r3, [r0, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	f7f5 ffe8 	bl	8000298 <strlen>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9005      	str	r0, [sp, #20]
 800a2cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2d6:	3307      	adds	r3, #7
 800a2d8:	f8d4 b000 	ldr.w	fp, [r4]
 800a2dc:	f023 0307 	bic.w	r3, r3, #7
 800a2e0:	f103 0208 	add.w	r2, r3, #8
 800a2e4:	f8c8 2000 	str.w	r2, [r8]
 800a2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2f8:	9307      	str	r3, [sp, #28]
 800a2fa:	4b9d      	ldr	r3, [pc, #628]	@ (800a570 <_printf_float+0x2c8>)
 800a2fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a300:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a304:	f7f6 fc26 	bl	8000b54 <__aeabi_dcmpun>
 800a308:	bb70      	cbnz	r0, 800a368 <_printf_float+0xc0>
 800a30a:	f04f 32ff 	mov.w	r2, #4294967295
 800a30e:	4b98      	ldr	r3, [pc, #608]	@ (800a570 <_printf_float+0x2c8>)
 800a310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a314:	f7f6 fc00 	bl	8000b18 <__aeabi_dcmple>
 800a318:	bb30      	cbnz	r0, 800a368 <_printf_float+0xc0>
 800a31a:	2200      	movs	r2, #0
 800a31c:	2300      	movs	r3, #0
 800a31e:	4640      	mov	r0, r8
 800a320:	4649      	mov	r1, r9
 800a322:	f7f6 fbef 	bl	8000b04 <__aeabi_dcmplt>
 800a326:	b110      	cbz	r0, 800a32e <_printf_float+0x86>
 800a328:	232d      	movs	r3, #45	@ 0x2d
 800a32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a32e:	4a91      	ldr	r2, [pc, #580]	@ (800a574 <_printf_float+0x2cc>)
 800a330:	4b91      	ldr	r3, [pc, #580]	@ (800a578 <_printf_float+0x2d0>)
 800a332:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a336:	bf94      	ite	ls
 800a338:	4690      	movls	r8, r2
 800a33a:	4698      	movhi	r8, r3
 800a33c:	2303      	movs	r3, #3
 800a33e:	f04f 0900 	mov.w	r9, #0
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	f02b 0304 	bic.w	r3, fp, #4
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	4633      	mov	r3, r6
 800a34c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	9700      	str	r7, [sp, #0]
 800a354:	f000 f9d2 	bl	800a6fc <_printf_common>
 800a358:	3001      	adds	r0, #1
 800a35a:	f040 808d 	bne.w	800a478 <_printf_float+0x1d0>
 800a35e:	f04f 30ff 	mov.w	r0, #4294967295
 800a362:	b00d      	add	sp, #52	@ 0x34
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	4640      	mov	r0, r8
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f6 fbf0 	bl	8000b54 <__aeabi_dcmpun>
 800a374:	b140      	cbz	r0, 800a388 <_printf_float+0xe0>
 800a376:	464b      	mov	r3, r9
 800a378:	4a80      	ldr	r2, [pc, #512]	@ (800a57c <_printf_float+0x2d4>)
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bfbc      	itt	lt
 800a37e:	232d      	movlt	r3, #45	@ 0x2d
 800a380:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a384:	4b7e      	ldr	r3, [pc, #504]	@ (800a580 <_printf_float+0x2d8>)
 800a386:	e7d4      	b.n	800a332 <_printf_float+0x8a>
 800a388:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a38c:	6863      	ldr	r3, [r4, #4]
 800a38e:	9206      	str	r2, [sp, #24]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	d13b      	bne.n	800a40c <_printf_float+0x164>
 800a394:	2306      	movs	r3, #6
 800a396:	6063      	str	r3, [r4, #4]
 800a398:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a39c:	2300      	movs	r3, #0
 800a39e:	4628      	mov	r0, r5
 800a3a0:	6022      	str	r2, [r4, #0]
 800a3a2:	9303      	str	r3, [sp, #12]
 800a3a4:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3a6:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3aa:	ab09      	add	r3, sp, #36	@ 0x24
 800a3ac:	ec49 8b10 	vmov	d0, r8, r9
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3b6:	6861      	ldr	r1, [r4, #4]
 800a3b8:	f7ff fed7 	bl	800a16a <__cvt>
 800a3bc:	9b06      	ldr	r3, [sp, #24]
 800a3be:	4680      	mov	r8, r0
 800a3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c2:	2b47      	cmp	r3, #71	@ 0x47
 800a3c4:	d129      	bne.n	800a41a <_printf_float+0x172>
 800a3c6:	1cc8      	adds	r0, r1, #3
 800a3c8:	db02      	blt.n	800a3d0 <_printf_float+0x128>
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	dd41      	ble.n	800a454 <_printf_float+0x1ac>
 800a3d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3d4:	fa5f fa8a 	uxtb.w	sl, sl
 800a3d8:	3901      	subs	r1, #1
 800a3da:	4652      	mov	r2, sl
 800a3dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3e2:	f7ff ff27 	bl	800a234 <__exponent>
 800a3e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3e8:	4681      	mov	r9, r0
 800a3ea:	1813      	adds	r3, r2, r0
 800a3ec:	2a01      	cmp	r2, #1
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	dc02      	bgt.n	800a3f8 <_printf_float+0x150>
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	07d2      	lsls	r2, r2, #31
 800a3f6:	d501      	bpl.n	800a3fc <_printf_float+0x154>
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0a2      	beq.n	800a34a <_printf_float+0xa2>
 800a404:	232d      	movs	r3, #45	@ 0x2d
 800a406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40a:	e79e      	b.n	800a34a <_printf_float+0xa2>
 800a40c:	9a06      	ldr	r2, [sp, #24]
 800a40e:	2a47      	cmp	r2, #71	@ 0x47
 800a410:	d1c2      	bne.n	800a398 <_printf_float+0xf0>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1c0      	bne.n	800a398 <_printf_float+0xf0>
 800a416:	2301      	movs	r3, #1
 800a418:	e7bd      	b.n	800a396 <_printf_float+0xee>
 800a41a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a41e:	d9db      	bls.n	800a3d8 <_printf_float+0x130>
 800a420:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a424:	d118      	bne.n	800a458 <_printf_float+0x1b0>
 800a426:	2900      	cmp	r1, #0
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	dd0b      	ble.n	800a444 <_printf_float+0x19c>
 800a42c:	6121      	str	r1, [r4, #16]
 800a42e:	b913      	cbnz	r3, 800a436 <_printf_float+0x18e>
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	07d0      	lsls	r0, r2, #31
 800a434:	d502      	bpl.n	800a43c <_printf_float+0x194>
 800a436:	3301      	adds	r3, #1
 800a438:	440b      	add	r3, r1
 800a43a:	6123      	str	r3, [r4, #16]
 800a43c:	f04f 0900 	mov.w	r9, #0
 800a440:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a442:	e7db      	b.n	800a3fc <_printf_float+0x154>
 800a444:	b913      	cbnz	r3, 800a44c <_printf_float+0x1a4>
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	07d2      	lsls	r2, r2, #31
 800a44a:	d501      	bpl.n	800a450 <_printf_float+0x1a8>
 800a44c:	3302      	adds	r3, #2
 800a44e:	e7f4      	b.n	800a43a <_printf_float+0x192>
 800a450:	2301      	movs	r3, #1
 800a452:	e7f2      	b.n	800a43a <_printf_float+0x192>
 800a454:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45a:	4299      	cmp	r1, r3
 800a45c:	db05      	blt.n	800a46a <_printf_float+0x1c2>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	6121      	str	r1, [r4, #16]
 800a462:	07d8      	lsls	r0, r3, #31
 800a464:	d5ea      	bpl.n	800a43c <_printf_float+0x194>
 800a466:	1c4b      	adds	r3, r1, #1
 800a468:	e7e7      	b.n	800a43a <_printf_float+0x192>
 800a46a:	2900      	cmp	r1, #0
 800a46c:	bfd4      	ite	le
 800a46e:	f1c1 0202 	rsble	r2, r1, #2
 800a472:	2201      	movgt	r2, #1
 800a474:	4413      	add	r3, r2
 800a476:	e7e0      	b.n	800a43a <_printf_float+0x192>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	055a      	lsls	r2, r3, #21
 800a47c:	d407      	bmi.n	800a48e <_printf_float+0x1e6>
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	4642      	mov	r2, r8
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	d12b      	bne.n	800a4e4 <_printf_float+0x23c>
 800a48c:	e767      	b.n	800a35e <_printf_float+0xb6>
 800a48e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a492:	f240 80dd 	bls.w	800a650 <_printf_float+0x3a8>
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a49e:	f7f6 fb27 	bl	8000af0 <__aeabi_dcmpeq>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d033      	beq.n	800a50e <_printf_float+0x266>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4a36      	ldr	r2, [pc, #216]	@ (800a584 <_printf_float+0x2dc>)
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f43f af54 	beq.w	800a35e <_printf_float+0xb6>
 800a4b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4ba:	4543      	cmp	r3, r8
 800a4bc:	db02      	blt.n	800a4c4 <_printf_float+0x21c>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	07d8      	lsls	r0, r3, #31
 800a4c2:	d50f      	bpl.n	800a4e4 <_printf_float+0x23c>
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4cc:	47b8      	blx	r7
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f43f af45 	beq.w	800a35e <_printf_float+0xb6>
 800a4d4:	f04f 0900 	mov.w	r9, #0
 800a4d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4dc:	f104 0a1a 	add.w	sl, r4, #26
 800a4e0:	45c8      	cmp	r8, r9
 800a4e2:	dc09      	bgt.n	800a4f8 <_printf_float+0x250>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	079b      	lsls	r3, r3, #30
 800a4e8:	f100 8103 	bmi.w	800a6f2 <_printf_float+0x44a>
 800a4ec:	68e0      	ldr	r0, [r4, #12]
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f0:	4298      	cmp	r0, r3
 800a4f2:	bfb8      	it	lt
 800a4f4:	4618      	movlt	r0, r3
 800a4f6:	e734      	b.n	800a362 <_printf_float+0xba>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	f43f af2b 	beq.w	800a35e <_printf_float+0xb6>
 800a508:	f109 0901 	add.w	r9, r9, #1
 800a50c:	e7e8      	b.n	800a4e0 <_printf_float+0x238>
 800a50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc39      	bgt.n	800a588 <_printf_float+0x2e0>
 800a514:	2301      	movs	r3, #1
 800a516:	4a1b      	ldr	r2, [pc, #108]	@ (800a584 <_printf_float+0x2dc>)
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f af1d 	beq.w	800a35e <_printf_float+0xb6>
 800a524:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a528:	ea59 0303 	orrs.w	r3, r9, r3
 800a52c:	d102      	bne.n	800a534 <_printf_float+0x28c>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	07d9      	lsls	r1, r3, #31
 800a532:	d5d7      	bpl.n	800a4e4 <_printf_float+0x23c>
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	f43f af0d 	beq.w	800a35e <_printf_float+0xb6>
 800a544:	f04f 0a00 	mov.w	sl, #0
 800a548:	f104 0b1a 	add.w	fp, r4, #26
 800a54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54e:	425b      	negs	r3, r3
 800a550:	4553      	cmp	r3, sl
 800a552:	dc01      	bgt.n	800a558 <_printf_float+0x2b0>
 800a554:	464b      	mov	r3, r9
 800a556:	e793      	b.n	800a480 <_printf_float+0x1d8>
 800a558:	2301      	movs	r3, #1
 800a55a:	465a      	mov	r2, fp
 800a55c:	4631      	mov	r1, r6
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f aefb 	beq.w	800a35e <_printf_float+0xb6>
 800a568:	f10a 0a01 	add.w	sl, sl, #1
 800a56c:	e7ee      	b.n	800a54c <_printf_float+0x2a4>
 800a56e:	bf00      	nop
 800a570:	7fefffff 	.word	0x7fefffff
 800a574:	0800ebd4 	.word	0x0800ebd4
 800a578:	0800ebd8 	.word	0x0800ebd8
 800a57c:	0800ebdc 	.word	0x0800ebdc
 800a580:	0800ebe0 	.word	0x0800ebe0
 800a584:	0800ebe4 	.word	0x0800ebe4
 800a588:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a58a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a58e:	4553      	cmp	r3, sl
 800a590:	bfa8      	it	ge
 800a592:	4653      	movge	r3, sl
 800a594:	2b00      	cmp	r3, #0
 800a596:	4699      	mov	r9, r3
 800a598:	dc36      	bgt.n	800a608 <_printf_float+0x360>
 800a59a:	f04f 0b00 	mov.w	fp, #0
 800a59e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5a2:	f104 021a 	add.w	r2, r4, #26
 800a5a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5a8:	9306      	str	r3, [sp, #24]
 800a5aa:	eba3 0309 	sub.w	r3, r3, r9
 800a5ae:	455b      	cmp	r3, fp
 800a5b0:	dc31      	bgt.n	800a616 <_printf_float+0x36e>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b4:	459a      	cmp	sl, r3
 800a5b6:	dc3a      	bgt.n	800a62e <_printf_float+0x386>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	07da      	lsls	r2, r3, #31
 800a5bc:	d437      	bmi.n	800a62e <_printf_float+0x386>
 800a5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c0:	ebaa 0903 	sub.w	r9, sl, r3
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ca:	4599      	cmp	r9, r3
 800a5cc:	bfa8      	it	ge
 800a5ce:	4699      	movge	r9, r3
 800a5d0:	f1b9 0f00 	cmp.w	r9, #0
 800a5d4:	dc33      	bgt.n	800a63e <_printf_float+0x396>
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5de:	f104 0b1a 	add.w	fp, r4, #26
 800a5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e8:	eba3 0309 	sub.w	r3, r3, r9
 800a5ec:	4543      	cmp	r3, r8
 800a5ee:	f77f af79 	ble.w	800a4e4 <_printf_float+0x23c>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	465a      	mov	r2, fp
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f43f aeae 	beq.w	800a35e <_printf_float+0xb6>
 800a602:	f108 0801 	add.w	r8, r8, #1
 800a606:	e7ec      	b.n	800a5e2 <_printf_float+0x33a>
 800a608:	4642      	mov	r2, r8
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	d1c2      	bne.n	800a59a <_printf_float+0x2f2>
 800a614:	e6a3      	b.n	800a35e <_printf_float+0xb6>
 800a616:	2301      	movs	r3, #1
 800a618:	4631      	mov	r1, r6
 800a61a:	4628      	mov	r0, r5
 800a61c:	9206      	str	r2, [sp, #24]
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae9c 	beq.w	800a35e <_printf_float+0xb6>
 800a626:	f10b 0b01 	add.w	fp, fp, #1
 800a62a:	9a06      	ldr	r2, [sp, #24]
 800a62c:	e7bb      	b.n	800a5a6 <_printf_float+0x2fe>
 800a62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a632:	4631      	mov	r1, r6
 800a634:	4628      	mov	r0, r5
 800a636:	47b8      	blx	r7
 800a638:	3001      	adds	r0, #1
 800a63a:	d1c0      	bne.n	800a5be <_printf_float+0x316>
 800a63c:	e68f      	b.n	800a35e <_printf_float+0xb6>
 800a63e:	9a06      	ldr	r2, [sp, #24]
 800a640:	464b      	mov	r3, r9
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	4442      	add	r2, r8
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	d1c3      	bne.n	800a5d6 <_printf_float+0x32e>
 800a64e:	e686      	b.n	800a35e <_printf_float+0xb6>
 800a650:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a654:	f1ba 0f01 	cmp.w	sl, #1
 800a658:	dc01      	bgt.n	800a65e <_printf_float+0x3b6>
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d536      	bpl.n	800a6cc <_printf_float+0x424>
 800a65e:	2301      	movs	r3, #1
 800a660:	4642      	mov	r2, r8
 800a662:	4631      	mov	r1, r6
 800a664:	4628      	mov	r0, r5
 800a666:	47b8      	blx	r7
 800a668:	3001      	adds	r0, #1
 800a66a:	f43f ae78 	beq.w	800a35e <_printf_float+0xb6>
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f ae70 	beq.w	800a35e <_printf_float+0xb6>
 800a67e:	2200      	movs	r2, #0
 800a680:	2300      	movs	r3, #0
 800a682:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a68a:	f7f6 fa31 	bl	8000af0 <__aeabi_dcmpeq>
 800a68e:	b9c0      	cbnz	r0, 800a6c2 <_printf_float+0x41a>
 800a690:	4653      	mov	r3, sl
 800a692:	f108 0201 	add.w	r2, r8, #1
 800a696:	4631      	mov	r1, r6
 800a698:	4628      	mov	r0, r5
 800a69a:	47b8      	blx	r7
 800a69c:	3001      	adds	r0, #1
 800a69e:	d10c      	bne.n	800a6ba <_printf_float+0x412>
 800a6a0:	e65d      	b.n	800a35e <_printf_float+0xb6>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	465a      	mov	r2, fp
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b8      	blx	r7
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f43f ae56 	beq.w	800a35e <_printf_float+0xb6>
 800a6b2:	f108 0801 	add.w	r8, r8, #1
 800a6b6:	45d0      	cmp	r8, sl
 800a6b8:	dbf3      	blt.n	800a6a2 <_printf_float+0x3fa>
 800a6ba:	464b      	mov	r3, r9
 800a6bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6c0:	e6df      	b.n	800a482 <_printf_float+0x1da>
 800a6c2:	f04f 0800 	mov.w	r8, #0
 800a6c6:	f104 0b1a 	add.w	fp, r4, #26
 800a6ca:	e7f4      	b.n	800a6b6 <_printf_float+0x40e>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	e7e1      	b.n	800a696 <_printf_float+0x3ee>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	464a      	mov	r2, r9
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b8      	blx	r7
 800a6dc:	3001      	adds	r0, #1
 800a6de:	f43f ae3e 	beq.w	800a35e <_printf_float+0xb6>
 800a6e2:	f108 0801 	add.w	r8, r8, #1
 800a6e6:	68e3      	ldr	r3, [r4, #12]
 800a6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ea:	1a5b      	subs	r3, r3, r1
 800a6ec:	4543      	cmp	r3, r8
 800a6ee:	dcf0      	bgt.n	800a6d2 <_printf_float+0x42a>
 800a6f0:	e6fc      	b.n	800a4ec <_printf_float+0x244>
 800a6f2:	f04f 0800 	mov.w	r8, #0
 800a6f6:	f104 0919 	add.w	r9, r4, #25
 800a6fa:	e7f4      	b.n	800a6e6 <_printf_float+0x43e>

0800a6fc <_printf_common>:
 800a6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	4616      	mov	r6, r2
 800a702:	4698      	mov	r8, r3
 800a704:	688a      	ldr	r2, [r1, #8]
 800a706:	4607      	mov	r7, r0
 800a708:	690b      	ldr	r3, [r1, #16]
 800a70a:	460c      	mov	r4, r1
 800a70c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a710:	4293      	cmp	r3, r2
 800a712:	bfb8      	it	lt
 800a714:	4613      	movlt	r3, r2
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a71c:	b10a      	cbz	r2, 800a722 <_printf_common+0x26>
 800a71e:	3301      	adds	r3, #1
 800a720:	6033      	str	r3, [r6, #0]
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	0699      	lsls	r1, r3, #26
 800a726:	bf42      	ittt	mi
 800a728:	6833      	ldrmi	r3, [r6, #0]
 800a72a:	3302      	addmi	r3, #2
 800a72c:	6033      	strmi	r3, [r6, #0]
 800a72e:	6825      	ldr	r5, [r4, #0]
 800a730:	f015 0506 	ands.w	r5, r5, #6
 800a734:	d106      	bne.n	800a744 <_printf_common+0x48>
 800a736:	f104 0a19 	add.w	sl, r4, #25
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	6832      	ldr	r2, [r6, #0]
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	42ab      	cmp	r3, r5
 800a742:	dc2b      	bgt.n	800a79c <_printf_common+0xa0>
 800a744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	3b00      	subs	r3, #0
 800a74c:	bf18      	it	ne
 800a74e:	2301      	movne	r3, #1
 800a750:	0692      	lsls	r2, r2, #26
 800a752:	d430      	bmi.n	800a7b6 <_printf_common+0xba>
 800a754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a758:	4641      	mov	r1, r8
 800a75a:	4638      	mov	r0, r7
 800a75c:	47c8      	blx	r9
 800a75e:	3001      	adds	r0, #1
 800a760:	d023      	beq.n	800a7aa <_printf_common+0xae>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	341a      	adds	r4, #26
 800a766:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a76a:	f003 0306 	and.w	r3, r3, #6
 800a76e:	2b04      	cmp	r3, #4
 800a770:	bf0a      	itet	eq
 800a772:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a776:	2500      	movne	r5, #0
 800a778:	6833      	ldreq	r3, [r6, #0]
 800a77a:	f04f 0600 	mov.w	r6, #0
 800a77e:	bf08      	it	eq
 800a780:	1aed      	subeq	r5, r5, r3
 800a782:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a786:	bf08      	it	eq
 800a788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a78c:	4293      	cmp	r3, r2
 800a78e:	bfc4      	itt	gt
 800a790:	1a9b      	subgt	r3, r3, r2
 800a792:	18ed      	addgt	r5, r5, r3
 800a794:	42b5      	cmp	r5, r6
 800a796:	d11a      	bne.n	800a7ce <_printf_common+0xd2>
 800a798:	2000      	movs	r0, #0
 800a79a:	e008      	b.n	800a7ae <_printf_common+0xb2>
 800a79c:	2301      	movs	r3, #1
 800a79e:	4652      	mov	r2, sl
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	47c8      	blx	r9
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d103      	bne.n	800a7b2 <_printf_common+0xb6>
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b2:	3501      	adds	r5, #1
 800a7b4:	e7c1      	b.n	800a73a <_printf_common+0x3e>
 800a7b6:	18e1      	adds	r1, r4, r3
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	2030      	movs	r0, #48	@ 0x30
 800a7bc:	3302      	adds	r3, #2
 800a7be:	4422      	add	r2, r4
 800a7c0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7cc:	e7c2      	b.n	800a754 <_printf_common+0x58>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	47c8      	blx	r9
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d0e6      	beq.n	800a7aa <_printf_common+0xae>
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7d9      	b.n	800a794 <_printf_common+0x98>

0800a7e0 <_printf_i>:
 800a7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e4:	7e0f      	ldrb	r7, [r1, #24]
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	2f78      	cmp	r7, #120	@ 0x78
 800a7ee:	469a      	mov	sl, r3
 800a7f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7f6:	d807      	bhi.n	800a808 <_printf_i+0x28>
 800a7f8:	2f62      	cmp	r7, #98	@ 0x62
 800a7fa:	d80a      	bhi.n	800a812 <_printf_i+0x32>
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	f000 80d2 	beq.w	800a9a6 <_printf_i+0x1c6>
 800a802:	2f58      	cmp	r7, #88	@ 0x58
 800a804:	f000 80b9 	beq.w	800a97a <_printf_i+0x19a>
 800a808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a80c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a810:	e03a      	b.n	800a888 <_printf_i+0xa8>
 800a812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a816:	2b15      	cmp	r3, #21
 800a818:	d8f6      	bhi.n	800a808 <_printf_i+0x28>
 800a81a:	a101      	add	r1, pc, #4	@ (adr r1, 800a820 <_printf_i+0x40>)
 800a81c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a820:	0800a879 	.word	0x0800a879
 800a824:	0800a88d 	.word	0x0800a88d
 800a828:	0800a809 	.word	0x0800a809
 800a82c:	0800a809 	.word	0x0800a809
 800a830:	0800a809 	.word	0x0800a809
 800a834:	0800a809 	.word	0x0800a809
 800a838:	0800a88d 	.word	0x0800a88d
 800a83c:	0800a809 	.word	0x0800a809
 800a840:	0800a809 	.word	0x0800a809
 800a844:	0800a809 	.word	0x0800a809
 800a848:	0800a809 	.word	0x0800a809
 800a84c:	0800a98d 	.word	0x0800a98d
 800a850:	0800a8b7 	.word	0x0800a8b7
 800a854:	0800a947 	.word	0x0800a947
 800a858:	0800a809 	.word	0x0800a809
 800a85c:	0800a809 	.word	0x0800a809
 800a860:	0800a9af 	.word	0x0800a9af
 800a864:	0800a809 	.word	0x0800a809
 800a868:	0800a8b7 	.word	0x0800a8b7
 800a86c:	0800a809 	.word	0x0800a809
 800a870:	0800a809 	.word	0x0800a809
 800a874:	0800a94f 	.word	0x0800a94f
 800a878:	6833      	ldr	r3, [r6, #0]
 800a87a:	1d1a      	adds	r2, r3, #4
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6032      	str	r2, [r6, #0]
 800a880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a888:	2301      	movs	r3, #1
 800a88a:	e09d      	b.n	800a9c8 <_printf_i+0x1e8>
 800a88c:	6833      	ldr	r3, [r6, #0]
 800a88e:	6820      	ldr	r0, [r4, #0]
 800a890:	1d19      	adds	r1, r3, #4
 800a892:	6031      	str	r1, [r6, #0]
 800a894:	0606      	lsls	r6, r0, #24
 800a896:	d501      	bpl.n	800a89c <_printf_i+0xbc>
 800a898:	681d      	ldr	r5, [r3, #0]
 800a89a:	e003      	b.n	800a8a4 <_printf_i+0xc4>
 800a89c:	0645      	lsls	r5, r0, #25
 800a89e:	d5fb      	bpl.n	800a898 <_printf_i+0xb8>
 800a8a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	da03      	bge.n	800a8b0 <_printf_i+0xd0>
 800a8a8:	232d      	movs	r3, #45	@ 0x2d
 800a8aa:	426d      	negs	r5, r5
 800a8ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8b0:	4859      	ldr	r0, [pc, #356]	@ (800aa18 <_printf_i+0x238>)
 800a8b2:	230a      	movs	r3, #10
 800a8b4:	e011      	b.n	800a8da <_printf_i+0xfa>
 800a8b6:	6821      	ldr	r1, [r4, #0]
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	0608      	lsls	r0, r1, #24
 800a8bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8c0:	d402      	bmi.n	800a8c8 <_printf_i+0xe8>
 800a8c2:	0649      	lsls	r1, r1, #25
 800a8c4:	bf48      	it	mi
 800a8c6:	b2ad      	uxthmi	r5, r5
 800a8c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8ca:	6033      	str	r3, [r6, #0]
 800a8cc:	4852      	ldr	r0, [pc, #328]	@ (800aa18 <_printf_i+0x238>)
 800a8ce:	bf14      	ite	ne
 800a8d0:	230a      	movne	r3, #10
 800a8d2:	2308      	moveq	r3, #8
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8da:	6866      	ldr	r6, [r4, #4]
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	60a6      	str	r6, [r4, #8]
 800a8e0:	bfa2      	ittt	ge
 800a8e2:	6821      	ldrge	r1, [r4, #0]
 800a8e4:	f021 0104 	bicge.w	r1, r1, #4
 800a8e8:	6021      	strge	r1, [r4, #0]
 800a8ea:	b90d      	cbnz	r5, 800a8f0 <_printf_i+0x110>
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	d04b      	beq.n	800a988 <_printf_i+0x1a8>
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a8fa:	5dc7      	ldrb	r7, [r0, r7]
 800a8fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a900:	462f      	mov	r7, r5
 800a902:	460d      	mov	r5, r1
 800a904:	42bb      	cmp	r3, r7
 800a906:	d9f4      	bls.n	800a8f2 <_printf_i+0x112>
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d10b      	bne.n	800a924 <_printf_i+0x144>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	07df      	lsls	r7, r3, #31
 800a910:	d508      	bpl.n	800a924 <_printf_i+0x144>
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	6861      	ldr	r1, [r4, #4]
 800a916:	4299      	cmp	r1, r3
 800a918:	bfde      	ittt	le
 800a91a:	2330      	movle	r3, #48	@ 0x30
 800a91c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a920:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a924:	1b92      	subs	r2, r2, r6
 800a926:	6122      	str	r2, [r4, #16]
 800a928:	464b      	mov	r3, r9
 800a92a:	aa03      	add	r2, sp, #12
 800a92c:	4621      	mov	r1, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	f8cd a000 	str.w	sl, [sp]
 800a934:	f7ff fee2 	bl	800a6fc <_printf_common>
 800a938:	3001      	adds	r0, #1
 800a93a:	d14a      	bne.n	800a9d2 <_printf_i+0x1f2>
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	b004      	add	sp, #16
 800a942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	f043 0320 	orr.w	r3, r3, #32
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	2778      	movs	r7, #120	@ 0x78
 800a950:	4832      	ldr	r0, [pc, #200]	@ (800aa1c <_printf_i+0x23c>)
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a958:	061f      	lsls	r7, r3, #24
 800a95a:	6831      	ldr	r1, [r6, #0]
 800a95c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a960:	d402      	bmi.n	800a968 <_printf_i+0x188>
 800a962:	065f      	lsls	r7, r3, #25
 800a964:	bf48      	it	mi
 800a966:	b2ad      	uxthmi	r5, r5
 800a968:	6031      	str	r1, [r6, #0]
 800a96a:	07d9      	lsls	r1, r3, #31
 800a96c:	bf44      	itt	mi
 800a96e:	f043 0320 	orrmi.w	r3, r3, #32
 800a972:	6023      	strmi	r3, [r4, #0]
 800a974:	b11d      	cbz	r5, 800a97e <_printf_i+0x19e>
 800a976:	2310      	movs	r3, #16
 800a978:	e7ac      	b.n	800a8d4 <_printf_i+0xf4>
 800a97a:	4827      	ldr	r0, [pc, #156]	@ (800aa18 <_printf_i+0x238>)
 800a97c:	e7e9      	b.n	800a952 <_printf_i+0x172>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	f023 0320 	bic.w	r3, r3, #32
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	e7f6      	b.n	800a976 <_printf_i+0x196>
 800a988:	4616      	mov	r6, r2
 800a98a:	e7bd      	b.n	800a908 <_printf_i+0x128>
 800a98c:	6833      	ldr	r3, [r6, #0]
 800a98e:	6825      	ldr	r5, [r4, #0]
 800a990:	1d18      	adds	r0, r3, #4
 800a992:	6961      	ldr	r1, [r4, #20]
 800a994:	6030      	str	r0, [r6, #0]
 800a996:	062e      	lsls	r6, r5, #24
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	d501      	bpl.n	800a9a0 <_printf_i+0x1c0>
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	e002      	b.n	800a9a6 <_printf_i+0x1c6>
 800a9a0:	0668      	lsls	r0, r5, #25
 800a9a2:	d5fb      	bpl.n	800a99c <_printf_i+0x1bc>
 800a9a4:	8019      	strh	r1, [r3, #0]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	e7bc      	b.n	800a928 <_printf_i+0x148>
 800a9ae:	6833      	ldr	r3, [r6, #0]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	1d1a      	adds	r2, r3, #4
 800a9b4:	6032      	str	r2, [r6, #0]
 800a9b6:	681e      	ldr	r6, [r3, #0]
 800a9b8:	6862      	ldr	r2, [r4, #4]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 fbe7 	bl	800b18e <memchr>
 800a9c0:	b108      	cbz	r0, 800a9c6 <_printf_i+0x1e6>
 800a9c2:	1b80      	subs	r0, r0, r6
 800a9c4:	6060      	str	r0, [r4, #4]
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	6123      	str	r3, [r4, #16]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9d0:	e7aa      	b.n	800a928 <_printf_i+0x148>
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	4640      	mov	r0, r8
 800a9da:	47d0      	blx	sl
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d0ad      	beq.n	800a93c <_printf_i+0x15c>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	079b      	lsls	r3, r3, #30
 800a9e4:	d413      	bmi.n	800aa0e <_printf_i+0x22e>
 800a9e6:	68e0      	ldr	r0, [r4, #12]
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	4298      	cmp	r0, r3
 800a9ec:	bfb8      	it	lt
 800a9ee:	4618      	movlt	r0, r3
 800a9f0:	e7a6      	b.n	800a940 <_printf_i+0x160>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	47d0      	blx	sl
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d09d      	beq.n	800a93c <_printf_i+0x15c>
 800aa00:	3501      	adds	r5, #1
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	9903      	ldr	r1, [sp, #12]
 800aa06:	1a5b      	subs	r3, r3, r1
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dcf2      	bgt.n	800a9f2 <_printf_i+0x212>
 800aa0c:	e7eb      	b.n	800a9e6 <_printf_i+0x206>
 800aa0e:	2500      	movs	r5, #0
 800aa10:	f104 0619 	add.w	r6, r4, #25
 800aa14:	e7f5      	b.n	800aa02 <_printf_i+0x222>
 800aa16:	bf00      	nop
 800aa18:	0800ebe6 	.word	0x0800ebe6
 800aa1c:	0800ebf7 	.word	0x0800ebf7

0800aa20 <_scanf_float>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	b087      	sub	sp, #28
 800aa26:	4617      	mov	r7, r2
 800aa28:	4680      	mov	r8, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	9303      	str	r3, [sp, #12]
 800aa2e:	688b      	ldr	r3, [r1, #8]
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa36:	460a      	mov	r2, r1
 800aa38:	bf89      	itett	hi
 800aa3a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa3e:	f04f 0b00 	movls.w	fp, #0
 800aa42:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa46:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa4a:	f04f 0500 	mov.w	r5, #0
 800aa4e:	bf88      	it	hi
 800aa50:	608b      	strhi	r3, [r1, #8]
 800aa52:	680b      	ldr	r3, [r1, #0]
 800aa54:	46aa      	mov	sl, r5
 800aa56:	46a9      	mov	r9, r5
 800aa58:	9502      	str	r5, [sp, #8]
 800aa5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa5e:	f842 3b1c 	str.w	r3, [r2], #28
 800aa62:	4616      	mov	r6, r2
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa6a:	68a2      	ldr	r2, [r4, #8]
 800aa6c:	b152      	cbz	r2, 800aa84 <_scanf_float+0x64>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa74:	d864      	bhi.n	800ab40 <_scanf_float+0x120>
 800aa76:	2b40      	cmp	r3, #64	@ 0x40
 800aa78:	d83c      	bhi.n	800aaf4 <_scanf_float+0xd4>
 800aa7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa7e:	b2c8      	uxtb	r0, r1
 800aa80:	280e      	cmp	r0, #14
 800aa82:	d93a      	bls.n	800aafa <_scanf_float+0xda>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	d003      	beq.n	800aa92 <_scanf_float+0x72>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa96:	f1ba 0f01 	cmp.w	sl, #1
 800aa9a:	f200 8117 	bhi.w	800accc <_scanf_float+0x2ac>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	429e      	cmp	r6, r3
 800aaa2:	f200 8108 	bhi.w	800acb6 <_scanf_float+0x296>
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	b007      	add	sp, #28
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aab2:	2a0d      	cmp	r2, #13
 800aab4:	d8e6      	bhi.n	800aa84 <_scanf_float+0x64>
 800aab6:	a101      	add	r1, pc, #4	@ (adr r1, 800aabc <_scanf_float+0x9c>)
 800aab8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aabc:	0800ac03 	.word	0x0800ac03
 800aac0:	0800aa85 	.word	0x0800aa85
 800aac4:	0800aa85 	.word	0x0800aa85
 800aac8:	0800aa85 	.word	0x0800aa85
 800aacc:	0800ac63 	.word	0x0800ac63
 800aad0:	0800ac3b 	.word	0x0800ac3b
 800aad4:	0800aa85 	.word	0x0800aa85
 800aad8:	0800aa85 	.word	0x0800aa85
 800aadc:	0800ac11 	.word	0x0800ac11
 800aae0:	0800aa85 	.word	0x0800aa85
 800aae4:	0800aa85 	.word	0x0800aa85
 800aae8:	0800aa85 	.word	0x0800aa85
 800aaec:	0800aa85 	.word	0x0800aa85
 800aaf0:	0800abc9 	.word	0x0800abc9
 800aaf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aaf8:	e7db      	b.n	800aab2 <_scanf_float+0x92>
 800aafa:	290e      	cmp	r1, #14
 800aafc:	d8c2      	bhi.n	800aa84 <_scanf_float+0x64>
 800aafe:	a001      	add	r0, pc, #4	@ (adr r0, 800ab04 <_scanf_float+0xe4>)
 800ab00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab04:	0800abb9 	.word	0x0800abb9
 800ab08:	0800aa85 	.word	0x0800aa85
 800ab0c:	0800abb9 	.word	0x0800abb9
 800ab10:	0800ac4f 	.word	0x0800ac4f
 800ab14:	0800aa85 	.word	0x0800aa85
 800ab18:	0800ab61 	.word	0x0800ab61
 800ab1c:	0800ab9f 	.word	0x0800ab9f
 800ab20:	0800ab9f 	.word	0x0800ab9f
 800ab24:	0800ab9f 	.word	0x0800ab9f
 800ab28:	0800ab9f 	.word	0x0800ab9f
 800ab2c:	0800ab9f 	.word	0x0800ab9f
 800ab30:	0800ab9f 	.word	0x0800ab9f
 800ab34:	0800ab9f 	.word	0x0800ab9f
 800ab38:	0800ab9f 	.word	0x0800ab9f
 800ab3c:	0800ab9f 	.word	0x0800ab9f
 800ab40:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab42:	d809      	bhi.n	800ab58 <_scanf_float+0x138>
 800ab44:	2b60      	cmp	r3, #96	@ 0x60
 800ab46:	d8b2      	bhi.n	800aaae <_scanf_float+0x8e>
 800ab48:	2b54      	cmp	r3, #84	@ 0x54
 800ab4a:	d07b      	beq.n	800ac44 <_scanf_float+0x224>
 800ab4c:	2b59      	cmp	r3, #89	@ 0x59
 800ab4e:	d199      	bne.n	800aa84 <_scanf_float+0x64>
 800ab50:	2d07      	cmp	r5, #7
 800ab52:	d197      	bne.n	800aa84 <_scanf_float+0x64>
 800ab54:	2508      	movs	r5, #8
 800ab56:	e02c      	b.n	800abb2 <_scanf_float+0x192>
 800ab58:	2b74      	cmp	r3, #116	@ 0x74
 800ab5a:	d073      	beq.n	800ac44 <_scanf_float+0x224>
 800ab5c:	2b79      	cmp	r3, #121	@ 0x79
 800ab5e:	e7f6      	b.n	800ab4e <_scanf_float+0x12e>
 800ab60:	6821      	ldr	r1, [r4, #0]
 800ab62:	05c8      	lsls	r0, r1, #23
 800ab64:	d51b      	bpl.n	800ab9e <_scanf_float+0x17e>
 800ab66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab6a:	f109 0901 	add.w	r9, r9, #1
 800ab6e:	6021      	str	r1, [r4, #0]
 800ab70:	f1bb 0f00 	cmp.w	fp, #0
 800ab74:	d003      	beq.n	800ab7e <_scanf_float+0x15e>
 800ab76:	3201      	adds	r2, #1
 800ab78:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab7c:	60a2      	str	r2, [r4, #8]
 800ab7e:	68a3      	ldr	r3, [r4, #8]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	60a3      	str	r3, [r4, #8]
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	3301      	adds	r3, #1
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
 800ab92:	f340 8087 	ble.w	800aca4 <_scanf_float+0x284>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	e765      	b.n	800aa6a <_scanf_float+0x4a>
 800ab9e:	eb1a 0105 	adds.w	r1, sl, r5
 800aba2:	f47f af6f 	bne.w	800aa84 <_scanf_float+0x64>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	460d      	mov	r5, r1
 800abaa:	468a      	mov	sl, r1
 800abac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800abb0:	6022      	str	r2, [r4, #0]
 800abb2:	f806 3b01 	strb.w	r3, [r6], #1
 800abb6:	e7e2      	b.n	800ab7e <_scanf_float+0x15e>
 800abb8:	6822      	ldr	r2, [r4, #0]
 800abba:	0610      	lsls	r0, r2, #24
 800abbc:	f57f af62 	bpl.w	800aa84 <_scanf_float+0x64>
 800abc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abc4:	6022      	str	r2, [r4, #0]
 800abc6:	e7f4      	b.n	800abb2 <_scanf_float+0x192>
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	d10e      	bne.n	800abec <_scanf_float+0x1cc>
 800abce:	f1b9 0f00 	cmp.w	r9, #0
 800abd2:	d10e      	bne.n	800abf2 <_scanf_float+0x1d2>
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abde:	d108      	bne.n	800abf2 <_scanf_float+0x1d2>
 800abe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abe4:	f04f 0a01 	mov.w	sl, #1
 800abe8:	6022      	str	r2, [r4, #0]
 800abea:	e7e2      	b.n	800abb2 <_scanf_float+0x192>
 800abec:	f1ba 0f02 	cmp.w	sl, #2
 800abf0:	d055      	beq.n	800ac9e <_scanf_float+0x27e>
 800abf2:	2d01      	cmp	r5, #1
 800abf4:	d002      	beq.n	800abfc <_scanf_float+0x1dc>
 800abf6:	2d04      	cmp	r5, #4
 800abf8:	f47f af44 	bne.w	800aa84 <_scanf_float+0x64>
 800abfc:	3501      	adds	r5, #1
 800abfe:	b2ed      	uxtb	r5, r5
 800ac00:	e7d7      	b.n	800abb2 <_scanf_float+0x192>
 800ac02:	f1ba 0f01 	cmp.w	sl, #1
 800ac06:	f47f af3d 	bne.w	800aa84 <_scanf_float+0x64>
 800ac0a:	f04f 0a02 	mov.w	sl, #2
 800ac0e:	e7d0      	b.n	800abb2 <_scanf_float+0x192>
 800ac10:	b97d      	cbnz	r5, 800ac32 <_scanf_float+0x212>
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	f47f af38 	bne.w	800aa8a <_scanf_float+0x6a>
 800ac1a:	6822      	ldr	r2, [r4, #0]
 800ac1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac24:	f040 8107 	bne.w	800ae36 <_scanf_float+0x416>
 800ac28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac2c:	2501      	movs	r5, #1
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	e7bf      	b.n	800abb2 <_scanf_float+0x192>
 800ac32:	2d03      	cmp	r5, #3
 800ac34:	d0e2      	beq.n	800abfc <_scanf_float+0x1dc>
 800ac36:	2d05      	cmp	r5, #5
 800ac38:	e7de      	b.n	800abf8 <_scanf_float+0x1d8>
 800ac3a:	2d02      	cmp	r5, #2
 800ac3c:	f47f af22 	bne.w	800aa84 <_scanf_float+0x64>
 800ac40:	2503      	movs	r5, #3
 800ac42:	e7b6      	b.n	800abb2 <_scanf_float+0x192>
 800ac44:	2d06      	cmp	r5, #6
 800ac46:	f47f af1d 	bne.w	800aa84 <_scanf_float+0x64>
 800ac4a:	2507      	movs	r5, #7
 800ac4c:	e7b1      	b.n	800abb2 <_scanf_float+0x192>
 800ac4e:	6822      	ldr	r2, [r4, #0]
 800ac50:	0591      	lsls	r1, r2, #22
 800ac52:	f57f af17 	bpl.w	800aa84 <_scanf_float+0x64>
 800ac56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	e7a7      	b.n	800abb2 <_scanf_float+0x192>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac6c:	d006      	beq.n	800ac7c <_scanf_float+0x25c>
 800ac6e:	0550      	lsls	r0, r2, #21
 800ac70:	f57f af08 	bpl.w	800aa84 <_scanf_float+0x64>
 800ac74:	f1b9 0f00 	cmp.w	r9, #0
 800ac78:	f000 80dd 	beq.w	800ae36 <_scanf_float+0x416>
 800ac7c:	0591      	lsls	r1, r2, #22
 800ac7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac82:	bf58      	it	pl
 800ac84:	9902      	ldrpl	r1, [sp, #8]
 800ac86:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac8a:	bf58      	it	pl
 800ac8c:	eba9 0101 	subpl.w	r1, r9, r1
 800ac90:	6022      	str	r2, [r4, #0]
 800ac92:	f04f 0900 	mov.w	r9, #0
 800ac96:	bf58      	it	pl
 800ac98:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac9c:	e789      	b.n	800abb2 <_scanf_float+0x192>
 800ac9e:	f04f 0a03 	mov.w	sl, #3
 800aca2:	e786      	b.n	800abb2 <_scanf_float+0x192>
 800aca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aca8:	4639      	mov	r1, r7
 800acaa:	4640      	mov	r0, r8
 800acac:	4798      	blx	r3
 800acae:	2800      	cmp	r0, #0
 800acb0:	f43f aedb 	beq.w	800aa6a <_scanf_float+0x4a>
 800acb4:	e6e6      	b.n	800aa84 <_scanf_float+0x64>
 800acb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acba:	463a      	mov	r2, r7
 800acbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acc0:	4640      	mov	r0, r8
 800acc2:	4798      	blx	r3
 800acc4:	6923      	ldr	r3, [r4, #16]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	e6e8      	b.n	800aa9e <_scanf_float+0x7e>
 800accc:	1e6b      	subs	r3, r5, #1
 800acce:	2b06      	cmp	r3, #6
 800acd0:	d824      	bhi.n	800ad1c <_scanf_float+0x2fc>
 800acd2:	2d02      	cmp	r5, #2
 800acd4:	d836      	bhi.n	800ad44 <_scanf_float+0x324>
 800acd6:	9b01      	ldr	r3, [sp, #4]
 800acd8:	429e      	cmp	r6, r3
 800acda:	f67f aee4 	bls.w	800aaa6 <_scanf_float+0x86>
 800acde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ace2:	463a      	mov	r2, r7
 800ace4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace8:	4640      	mov	r0, r8
 800acea:	4798      	blx	r3
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	3b01      	subs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7f0      	b.n	800acd6 <_scanf_float+0x2b6>
 800acf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acf8:	463a      	mov	r2, r7
 800acfa:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acfe:	4640      	mov	r0, r8
 800ad00:	4798      	blx	r3
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad0c:	fa5f fa8a 	uxtb.w	sl, sl
 800ad10:	f1ba 0f02 	cmp.w	sl, #2
 800ad14:	d1ee      	bne.n	800acf4 <_scanf_float+0x2d4>
 800ad16:	3d03      	subs	r5, #3
 800ad18:	b2ed      	uxtb	r5, r5
 800ad1a:	1b76      	subs	r6, r6, r5
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	05da      	lsls	r2, r3, #23
 800ad20:	d52f      	bpl.n	800ad82 <_scanf_float+0x362>
 800ad22:	055b      	lsls	r3, r3, #21
 800ad24:	d511      	bpl.n	800ad4a <_scanf_float+0x32a>
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	429e      	cmp	r6, r3
 800ad2a:	f67f aebc 	bls.w	800aaa6 <_scanf_float+0x86>
 800ad2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad32:	463a      	mov	r2, r7
 800ad34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4798      	blx	r3
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	e7f0      	b.n	800ad26 <_scanf_float+0x306>
 800ad44:	46aa      	mov	sl, r5
 800ad46:	46b3      	mov	fp, r6
 800ad48:	e7de      	b.n	800ad08 <_scanf_float+0x2e8>
 800ad4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad4e:	1e75      	subs	r5, r6, #1
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	2965      	cmp	r1, #101	@ 0x65
 800ad54:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad58:	6123      	str	r3, [r4, #16]
 800ad5a:	d00c      	beq.n	800ad76 <_scanf_float+0x356>
 800ad5c:	2945      	cmp	r1, #69	@ 0x45
 800ad5e:	d00a      	beq.n	800ad76 <_scanf_float+0x356>
 800ad60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad64:	463a      	mov	r2, r7
 800ad66:	4640      	mov	r0, r8
 800ad68:	1eb5      	subs	r5, r6, #2
 800ad6a:	4798      	blx	r3
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	462e      	mov	r6, r5
 800ad78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad7c:	463a      	mov	r2, r7
 800ad7e:	4640      	mov	r0, r8
 800ad80:	4798      	blx	r3
 800ad82:	6822      	ldr	r2, [r4, #0]
 800ad84:	f012 0210 	ands.w	r2, r2, #16
 800ad88:	d001      	beq.n	800ad8e <_scanf_float+0x36e>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e68c      	b.n	800aaa8 <_scanf_float+0x88>
 800ad8e:	7032      	strb	r2, [r6, #0]
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad9a:	d11c      	bne.n	800add6 <_scanf_float+0x3b6>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	454b      	cmp	r3, r9
 800ada0:	eba3 0209 	sub.w	r2, r3, r9
 800ada4:	d123      	bne.n	800adee <_scanf_float+0x3ce>
 800ada6:	2200      	movs	r2, #0
 800ada8:	9901      	ldr	r1, [sp, #4]
 800adaa:	4640      	mov	r0, r8
 800adac:	f002 fc24 	bl	800d5f8 <_strtod_r>
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	f011 0f02 	tst.w	r1, #2
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	ec57 6b10 	vmov	r6, r7, d0
 800adbe:	f103 0204 	add.w	r2, r3, #4
 800adc2:	d01f      	beq.n	800ae04 <_scanf_float+0x3e4>
 800adc4:	9903      	ldr	r1, [sp, #12]
 800adc6:	600a      	str	r2, [r1, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	e9c3 6700 	strd	r6, r7, [r3]
 800adce:	68e3      	ldr	r3, [r4, #12]
 800add0:	3301      	adds	r3, #1
 800add2:	60e3      	str	r3, [r4, #12]
 800add4:	e7d9      	b.n	800ad8a <_scanf_float+0x36a>
 800add6:	9b04      	ldr	r3, [sp, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0e4      	beq.n	800ada6 <_scanf_float+0x386>
 800addc:	9905      	ldr	r1, [sp, #20]
 800adde:	230a      	movs	r3, #10
 800ade0:	4640      	mov	r0, r8
 800ade2:	3101      	adds	r1, #1
 800ade4:	f002 fc88 	bl	800d6f8 <_strtol_r>
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	9e05      	ldr	r6, [sp, #20]
 800adec:	1ac2      	subs	r2, r0, r3
 800adee:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800adf2:	4912      	ldr	r1, [pc, #72]	@ (800ae3c <_scanf_float+0x41c>)
 800adf4:	429e      	cmp	r6, r3
 800adf6:	bf28      	it	cs
 800adf8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 f8e3 	bl	800afc8 <siprintf>
 800ae02:	e7d0      	b.n	800ada6 <_scanf_float+0x386>
 800ae04:	f011 0f04 	tst.w	r1, #4
 800ae08:	9903      	ldr	r1, [sp, #12]
 800ae0a:	600a      	str	r2, [r1, #0]
 800ae0c:	d1dc      	bne.n	800adc8 <_scanf_float+0x3a8>
 800ae0e:	681d      	ldr	r5, [r3, #0]
 800ae10:	4632      	mov	r2, r6
 800ae12:	463b      	mov	r3, r7
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fe9c 	bl	8000b54 <__aeabi_dcmpun>
 800ae1c:	b128      	cbz	r0, 800ae2a <_scanf_float+0x40a>
 800ae1e:	4808      	ldr	r0, [pc, #32]	@ (800ae40 <_scanf_float+0x420>)
 800ae20:	f000 f9d0 	bl	800b1c4 <nanf>
 800ae24:	ed85 0a00 	vstr	s0, [r5]
 800ae28:	e7d1      	b.n	800adce <_scanf_float+0x3ae>
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	4639      	mov	r1, r7
 800ae2e:	f7f5 feef 	bl	8000c10 <__aeabi_d2f>
 800ae32:	6028      	str	r0, [r5, #0]
 800ae34:	e7cb      	b.n	800adce <_scanf_float+0x3ae>
 800ae36:	f04f 0900 	mov.w	r9, #0
 800ae3a:	e62a      	b.n	800aa92 <_scanf_float+0x72>
 800ae3c:	0800ec08 	.word	0x0800ec08
 800ae40:	0800ef9d 	.word	0x0800ef9d

0800ae44 <std>:
 800ae44:	2300      	movs	r3, #0
 800ae46:	b510      	push	{r4, lr}
 800ae48:	4604      	mov	r4, r0
 800ae4a:	6083      	str	r3, [r0, #8]
 800ae4c:	8181      	strh	r1, [r0, #12]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae52:	81c2      	strh	r2, [r0, #14]
 800ae54:	2208      	movs	r2, #8
 800ae56:	6183      	str	r3, [r0, #24]
 800ae58:	e9c0 3300 	strd	r3, r3, [r0]
 800ae5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae60:	305c      	adds	r0, #92	@ 0x5c
 800ae62:	f000 f914 	bl	800b08e <memset>
 800ae66:	4b0d      	ldr	r3, [pc, #52]	@ (800ae9c <std+0x58>)
 800ae68:	6224      	str	r4, [r4, #32]
 800ae6a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	@ (800aea0 <std+0x5c>)
 800ae6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae70:	4b0c      	ldr	r3, [pc, #48]	@ (800aea4 <std+0x60>)
 800ae72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae74:	4b0c      	ldr	r3, [pc, #48]	@ (800aea8 <std+0x64>)
 800ae76:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae78:	4b0c      	ldr	r3, [pc, #48]	@ (800aeac <std+0x68>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d006      	beq.n	800ae8c <std+0x48>
 800ae7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae82:	4294      	cmp	r4, r2
 800ae84:	d002      	beq.n	800ae8c <std+0x48>
 800ae86:	33d0      	adds	r3, #208	@ 0xd0
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	d105      	bne.n	800ae98 <std+0x54>
 800ae8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae94:	f000 b978 	b.w	800b188 <__retarget_lock_init_recursive>
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800b009 	.word	0x0800b009
 800aea0:	0800b02b 	.word	0x0800b02b
 800aea4:	0800b063 	.word	0x0800b063
 800aea8:	0800b087 	.word	0x0800b087
 800aeac:	2003b25c 	.word	0x2003b25c

0800aeb0 <stdio_exit_handler>:
 800aeb0:	4a02      	ldr	r2, [pc, #8]	@ (800aebc <stdio_exit_handler+0xc>)
 800aeb2:	4903      	ldr	r1, [pc, #12]	@ (800aec0 <stdio_exit_handler+0x10>)
 800aeb4:	4803      	ldr	r0, [pc, #12]	@ (800aec4 <stdio_exit_handler+0x14>)
 800aeb6:	f000 b869 	b.w	800af8c <_fwalk_sglue>
 800aeba:	bf00      	nop
 800aebc:	2000001c 	.word	0x2000001c
 800aec0:	0800dab5 	.word	0x0800dab5
 800aec4:	2000002c 	.word	0x2000002c

0800aec8 <cleanup_stdio>:
 800aec8:	6841      	ldr	r1, [r0, #4]
 800aeca:	4b0c      	ldr	r3, [pc, #48]	@ (800aefc <cleanup_stdio+0x34>)
 800aecc:	4299      	cmp	r1, r3
 800aece:	b510      	push	{r4, lr}
 800aed0:	4604      	mov	r4, r0
 800aed2:	d001      	beq.n	800aed8 <cleanup_stdio+0x10>
 800aed4:	f002 fdee 	bl	800dab4 <_fflush_r>
 800aed8:	68a1      	ldr	r1, [r4, #8]
 800aeda:	4b09      	ldr	r3, [pc, #36]	@ (800af00 <cleanup_stdio+0x38>)
 800aedc:	4299      	cmp	r1, r3
 800aede:	d002      	beq.n	800aee6 <cleanup_stdio+0x1e>
 800aee0:	4620      	mov	r0, r4
 800aee2:	f002 fde7 	bl	800dab4 <_fflush_r>
 800aee6:	68e1      	ldr	r1, [r4, #12]
 800aee8:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <cleanup_stdio+0x3c>)
 800aeea:	4299      	cmp	r1, r3
 800aeec:	d004      	beq.n	800aef8 <cleanup_stdio+0x30>
 800aeee:	4620      	mov	r0, r4
 800aef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef4:	f002 bdde 	b.w	800dab4 <_fflush_r>
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	bf00      	nop
 800aefc:	2003b25c 	.word	0x2003b25c
 800af00:	2003b2c4 	.word	0x2003b2c4
 800af04:	2003b32c 	.word	0x2003b32c

0800af08 <global_stdio_init.part.0>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <global_stdio_init.part.0+0x30>)
 800af0c:	2104      	movs	r1, #4
 800af0e:	4c0b      	ldr	r4, [pc, #44]	@ (800af3c <global_stdio_init.part.0+0x34>)
 800af10:	4a0b      	ldr	r2, [pc, #44]	@ (800af40 <global_stdio_init.part.0+0x38>)
 800af12:	4620      	mov	r0, r4
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	f7ff ff94 	bl	800ae44 <std>
 800af1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af20:	2201      	movs	r2, #1
 800af22:	2109      	movs	r1, #9
 800af24:	f7ff ff8e 	bl	800ae44 <std>
 800af28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af2c:	2202      	movs	r2, #2
 800af2e:	2112      	movs	r1, #18
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f7ff bf86 	b.w	800ae44 <std>
 800af38:	2003b394 	.word	0x2003b394
 800af3c:	2003b25c 	.word	0x2003b25c
 800af40:	0800aeb1 	.word	0x0800aeb1

0800af44 <__sfp_lock_acquire>:
 800af44:	4801      	ldr	r0, [pc, #4]	@ (800af4c <__sfp_lock_acquire+0x8>)
 800af46:	f000 b920 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800af4a:	bf00      	nop
 800af4c:	2003b39d 	.word	0x2003b39d

0800af50 <__sfp_lock_release>:
 800af50:	4801      	ldr	r0, [pc, #4]	@ (800af58 <__sfp_lock_release+0x8>)
 800af52:	f000 b91b 	b.w	800b18c <__retarget_lock_release_recursive>
 800af56:	bf00      	nop
 800af58:	2003b39d 	.word	0x2003b39d

0800af5c <__sinit>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	4604      	mov	r4, r0
 800af60:	f7ff fff0 	bl	800af44 <__sfp_lock_acquire>
 800af64:	6a23      	ldr	r3, [r4, #32]
 800af66:	b11b      	cbz	r3, 800af70 <__sinit+0x14>
 800af68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6c:	f7ff bff0 	b.w	800af50 <__sfp_lock_release>
 800af70:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <__sinit+0x28>)
 800af72:	6223      	str	r3, [r4, #32]
 800af74:	4b04      	ldr	r3, [pc, #16]	@ (800af88 <__sinit+0x2c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1f5      	bne.n	800af68 <__sinit+0xc>
 800af7c:	f7ff ffc4 	bl	800af08 <global_stdio_init.part.0>
 800af80:	e7f2      	b.n	800af68 <__sinit+0xc>
 800af82:	bf00      	nop
 800af84:	0800aec9 	.word	0x0800aec9
 800af88:	2003b394 	.word	0x2003b394

0800af8c <_fwalk_sglue>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	4607      	mov	r7, r0
 800af92:	4688      	mov	r8, r1
 800af94:	4614      	mov	r4, r2
 800af96:	2600      	movs	r6, #0
 800af98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af9c:	f1b9 0901 	subs.w	r9, r9, #1
 800afa0:	d505      	bpl.n	800afae <_fwalk_sglue+0x22>
 800afa2:	6824      	ldr	r4, [r4, #0]
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	d1f7      	bne.n	800af98 <_fwalk_sglue+0xc>
 800afa8:	4630      	mov	r0, r6
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d907      	bls.n	800afc4 <_fwalk_sglue+0x38>
 800afb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afb8:	3301      	adds	r3, #1
 800afba:	d003      	beq.n	800afc4 <_fwalk_sglue+0x38>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4638      	mov	r0, r7
 800afc0:	47c0      	blx	r8
 800afc2:	4306      	orrs	r6, r0
 800afc4:	3568      	adds	r5, #104	@ 0x68
 800afc6:	e7e9      	b.n	800af9c <_fwalk_sglue+0x10>

0800afc8 <siprintf>:
 800afc8:	b40e      	push	{r1, r2, r3}
 800afca:	b500      	push	{lr}
 800afcc:	b09c      	sub	sp, #112	@ 0x70
 800afce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afd2:	ab1d      	add	r3, sp, #116	@ 0x74
 800afd4:	9002      	str	r0, [sp, #8]
 800afd6:	9006      	str	r0, [sp, #24]
 800afd8:	9107      	str	r1, [sp, #28]
 800afda:	9104      	str	r1, [sp, #16]
 800afdc:	4808      	ldr	r0, [pc, #32]	@ (800b000 <siprintf+0x38>)
 800afde:	4909      	ldr	r1, [pc, #36]	@ (800b004 <siprintf+0x3c>)
 800afe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe4:	9105      	str	r1, [sp, #20]
 800afe6:	a902      	add	r1, sp, #8
 800afe8:	6800      	ldr	r0, [r0, #0]
 800afea:	9301      	str	r3, [sp, #4]
 800afec:	f002 fbe2 	bl	800d7b4 <_svfiprintf_r>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	b01c      	add	sp, #112	@ 0x70
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b003      	add	sp, #12
 800affe:	4770      	bx	lr
 800b000:	20000028 	.word	0x20000028
 800b004:	ffff0208 	.word	0xffff0208

0800b008 <__sread>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	460c      	mov	r4, r1
 800b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b010:	f000 f86c 	bl	800b0ec <_read_r>
 800b014:	2800      	cmp	r0, #0
 800b016:	bfab      	itete	ge
 800b018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b01a:	89a3      	ldrhlt	r3, [r4, #12]
 800b01c:	181b      	addge	r3, r3, r0
 800b01e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b022:	bfac      	ite	ge
 800b024:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b026:	81a3      	strhlt	r3, [r4, #12]
 800b028:	bd10      	pop	{r4, pc}

0800b02a <__swrite>:
 800b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02e:	461f      	mov	r7, r3
 800b030:	898b      	ldrh	r3, [r1, #12]
 800b032:	4605      	mov	r5, r0
 800b034:	460c      	mov	r4, r1
 800b036:	05db      	lsls	r3, r3, #23
 800b038:	4616      	mov	r6, r2
 800b03a:	d505      	bpl.n	800b048 <__swrite+0x1e>
 800b03c:	2302      	movs	r3, #2
 800b03e:	2200      	movs	r2, #0
 800b040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b044:	f000 f840 	bl	800b0c8 <_lseek_r>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	4632      	mov	r2, r6
 800b04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b050:	4628      	mov	r0, r5
 800b052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	463b      	mov	r3, r7
 800b05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05e:	f000 b857 	b.w	800b110 <_write_r>

0800b062 <__sseek>:
 800b062:	b510      	push	{r4, lr}
 800b064:	460c      	mov	r4, r1
 800b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06a:	f000 f82d 	bl	800b0c8 <_lseek_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	bf15      	itete	ne
 800b074:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b07a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b07e:	81a3      	strheq	r3, [r4, #12]
 800b080:	bf18      	it	ne
 800b082:	81a3      	strhne	r3, [r4, #12]
 800b084:	bd10      	pop	{r4, pc}

0800b086 <__sclose>:
 800b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08a:	f000 b80d 	b.w	800b0a8 <_close_r>

0800b08e <memset>:
 800b08e:	4402      	add	r2, r0
 800b090:	4603      	mov	r3, r0
 800b092:	4293      	cmp	r3, r2
 800b094:	d100      	bne.n	800b098 <memset+0xa>
 800b096:	4770      	bx	lr
 800b098:	f803 1b01 	strb.w	r1, [r3], #1
 800b09c:	e7f9      	b.n	800b092 <memset+0x4>
	...

0800b0a0 <_localeconv_r>:
 800b0a0:	4800      	ldr	r0, [pc, #0]	@ (800b0a4 <_localeconv_r+0x4>)
 800b0a2:	4770      	bx	lr
 800b0a4:	20000168 	.word	0x20000168

0800b0a8 <_close_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4d05      	ldr	r5, [pc, #20]	@ (800b0c4 <_close_r+0x1c>)
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	602b      	str	r3, [r5, #0]
 800b0b4:	f7f7 fb4e 	bl	8002754 <_close>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_close_r+0x1a>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_close_r+0x1a>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	2003b398 	.word	0x2003b398

0800b0c8 <_lseek_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4d06      	ldr	r5, [pc, #24]	@ (800b0e8 <_lseek_r+0x20>)
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	602a      	str	r2, [r5, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f7f7 fb63 	bl	80027a2 <_lseek>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d102      	bne.n	800b0e6 <_lseek_r+0x1e>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	b103      	cbz	r3, 800b0e6 <_lseek_r+0x1e>
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	2003b398 	.word	0x2003b398

0800b0ec <_read_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4d06      	ldr	r5, [pc, #24]	@ (800b10c <_read_r+0x20>)
 800b0f2:	4608      	mov	r0, r1
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	602a      	str	r2, [r5, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f7f7 faf1 	bl	80026e2 <_read>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_read_r+0x1e>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_read_r+0x1e>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	2003b398 	.word	0x2003b398

0800b110 <_write_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4604      	mov	r4, r0
 800b114:	4d06      	ldr	r5, [pc, #24]	@ (800b130 <_write_r+0x20>)
 800b116:	4608      	mov	r0, r1
 800b118:	4611      	mov	r1, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	602a      	str	r2, [r5, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	f7f7 fafc 	bl	800271c <_write>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_write_r+0x1e>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_write_r+0x1e>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	2003b398 	.word	0x2003b398

0800b134 <__errno>:
 800b134:	4b01      	ldr	r3, [pc, #4]	@ (800b13c <__errno+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000028 	.word	0x20000028

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4d0d      	ldr	r5, [pc, #52]	@ (800b178 <__libc_init_array+0x38>)
 800b144:	2600      	movs	r6, #0
 800b146:	4c0d      	ldr	r4, [pc, #52]	@ (800b17c <__libc_init_array+0x3c>)
 800b148:	1b64      	subs	r4, r4, r5
 800b14a:	10a4      	asrs	r4, r4, #2
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	4d0b      	ldr	r5, [pc, #44]	@ (800b180 <__libc_init_array+0x40>)
 800b152:	2600      	movs	r6, #0
 800b154:	4c0b      	ldr	r4, [pc, #44]	@ (800b184 <__libc_init_array+0x44>)
 800b156:	f003 fb8d 	bl	800e874 <_init>
 800b15a:	1b64      	subs	r4, r4, r5
 800b15c:	10a4      	asrs	r4, r4, #2
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f855 3b04 	ldr.w	r3, [r5], #4
 800b168:	3601      	adds	r6, #1
 800b16a:	4798      	blx	r3
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b172:	3601      	adds	r6, #1
 800b174:	4798      	blx	r3
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800f008 	.word	0x0800f008
 800b17c:	0800f008 	.word	0x0800f008
 800b180:	0800f008 	.word	0x0800f008
 800b184:	0800f00c 	.word	0x0800f00c

0800b188 <__retarget_lock_init_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_acquire_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_release_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <memchr>:
 800b18e:	b2c9      	uxtb	r1, r1
 800b190:	4603      	mov	r3, r0
 800b192:	4402      	add	r2, r0
 800b194:	b510      	push	{r4, lr}
 800b196:	4293      	cmp	r3, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	d101      	bne.n	800b1a0 <memchr+0x12>
 800b19c:	2000      	movs	r0, #0
 800b19e:	e003      	b.n	800b1a8 <memchr+0x1a>
 800b1a0:	7804      	ldrb	r4, [r0, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	428c      	cmp	r4, r1
 800b1a6:	d1f6      	bne.n	800b196 <memchr+0x8>
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <memcpy>:
 800b1aa:	440a      	add	r2, r1
 800b1ac:	1e43      	subs	r3, r0, #1
 800b1ae:	4291      	cmp	r1, r2
 800b1b0:	d100      	bne.n	800b1b4 <memcpy+0xa>
 800b1b2:	4770      	bx	lr
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1c0:	d1f9      	bne.n	800b1b6 <memcpy+0xc>
 800b1c2:	bd10      	pop	{r4, pc}

0800b1c4 <nanf>:
 800b1c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b1cc <nanf+0x8>
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	7fc00000 	.word	0x7fc00000

0800b1d0 <quorem>:
 800b1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	6903      	ldr	r3, [r0, #16]
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	690c      	ldr	r4, [r1, #16]
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	f2c0 8083 	blt.w	800b2e6 <quorem+0x116>
 800b1e0:	3c01      	subs	r4, #1
 800b1e2:	f100 0514 	add.w	r5, r0, #20
 800b1e6:	f101 0814 	add.w	r8, r1, #20
 800b1ea:	00a3      	lsls	r3, r4, #2
 800b1ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b200:	3301      	adds	r3, #1
 800b202:	429a      	cmp	r2, r3
 800b204:	fbb2 f6f3 	udiv	r6, r2, r3
 800b208:	d331      	bcc.n	800b26e <quorem+0x9e>
 800b20a:	f04f 0a00 	mov.w	sl, #0
 800b20e:	46c4      	mov	ip, r8
 800b210:	46ae      	mov	lr, r5
 800b212:	46d3      	mov	fp, sl
 800b214:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b218:	b298      	uxth	r0, r3
 800b21a:	45e1      	cmp	r9, ip
 800b21c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b220:	fb06 a000 	mla	r0, r6, r0, sl
 800b224:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b228:	b280      	uxth	r0, r0
 800b22a:	fb06 2303 	mla	r3, r6, r3, r2
 800b22e:	f8de 2000 	ldr.w	r2, [lr]
 800b232:	b292      	uxth	r2, r2
 800b234:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b238:	eba2 0200 	sub.w	r2, r2, r0
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f8de 0000 	ldr.w	r0, [lr]
 800b242:	445a      	add	r2, fp
 800b244:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b248:	b292      	uxth	r2, r2
 800b24a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b24e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b252:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b256:	f84e 2b04 	str.w	r2, [lr], #4
 800b25a:	d2db      	bcs.n	800b214 <quorem+0x44>
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	58eb      	ldr	r3, [r5, r3]
 800b260:	b92b      	cbnz	r3, 800b26e <quorem+0x9e>
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	3b04      	subs	r3, #4
 800b266:	429d      	cmp	r5, r3
 800b268:	461a      	mov	r2, r3
 800b26a:	d330      	bcc.n	800b2ce <quorem+0xfe>
 800b26c:	613c      	str	r4, [r7, #16]
 800b26e:	4638      	mov	r0, r7
 800b270:	f001 f9c8 	bl	800c604 <__mcmp>
 800b274:	2800      	cmp	r0, #0
 800b276:	db26      	blt.n	800b2c6 <quorem+0xf6>
 800b278:	4629      	mov	r1, r5
 800b27a:	2000      	movs	r0, #0
 800b27c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b280:	f8d1 c000 	ldr.w	ip, [r1]
 800b284:	fa1f fe82 	uxth.w	lr, r2
 800b288:	45c1      	cmp	r9, r8
 800b28a:	fa1f f38c 	uxth.w	r3, ip
 800b28e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b292:	eba3 030e 	sub.w	r3, r3, lr
 800b296:	4403      	add	r3, r0
 800b298:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2aa:	f841 3b04 	str.w	r3, [r1], #4
 800b2ae:	d2e5      	bcs.n	800b27c <quorem+0xac>
 800b2b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2b8:	b922      	cbnz	r2, 800b2c4 <quorem+0xf4>
 800b2ba:	3b04      	subs	r3, #4
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	461a      	mov	r2, r3
 800b2c0:	d30b      	bcc.n	800b2da <quorem+0x10a>
 800b2c2:	613c      	str	r4, [r7, #16]
 800b2c4:	3601      	adds	r6, #1
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	b003      	add	sp, #12
 800b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ce:	6812      	ldr	r2, [r2, #0]
 800b2d0:	3b04      	subs	r3, #4
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	d1ca      	bne.n	800b26c <quorem+0x9c>
 800b2d6:	3c01      	subs	r4, #1
 800b2d8:	e7c5      	b.n	800b266 <quorem+0x96>
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	3b04      	subs	r3, #4
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d1ef      	bne.n	800b2c2 <quorem+0xf2>
 800b2e2:	3c01      	subs	r4, #1
 800b2e4:	e7ea      	b.n	800b2bc <quorem+0xec>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	e7ee      	b.n	800b2c8 <quorem+0xf8>
 800b2ea:	0000      	movs	r0, r0
 800b2ec:	0000      	movs	r0, r0
	...

0800b2f0 <_dtoa_r>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	69c7      	ldr	r7, [r0, #28]
 800b2f6:	b099      	sub	sp, #100	@ 0x64
 800b2f8:	4683      	mov	fp, r0
 800b2fa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b2fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800b300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b302:	ec55 4b10 	vmov	r4, r5, d0
 800b306:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b30a:	b97f      	cbnz	r7, 800b32c <_dtoa_r+0x3c>
 800b30c:	2010      	movs	r0, #16
 800b30e:	f000 fdfd 	bl	800bf0c <malloc>
 800b312:	4602      	mov	r2, r0
 800b314:	f8cb 001c 	str.w	r0, [fp, #28]
 800b318:	b920      	cbnz	r0, 800b324 <_dtoa_r+0x34>
 800b31a:	4ba7      	ldr	r3, [pc, #668]	@ (800b5b8 <_dtoa_r+0x2c8>)
 800b31c:	21ef      	movs	r1, #239	@ 0xef
 800b31e:	48a7      	ldr	r0, [pc, #668]	@ (800b5bc <_dtoa_r+0x2cc>)
 800b320:	f002 fc36 	bl	800db90 <__assert_func>
 800b324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b328:	6007      	str	r7, [r0, #0]
 800b32a:	60c7      	str	r7, [r0, #12]
 800b32c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	b159      	cbz	r1, 800b34c <_dtoa_r+0x5c>
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	2301      	movs	r3, #1
 800b338:	4658      	mov	r0, fp
 800b33a:	4093      	lsls	r3, r2
 800b33c:	604a      	str	r2, [r1, #4]
 800b33e:	608b      	str	r3, [r1, #8]
 800b340:	f000 feda 	bl	800c0f8 <_Bfree>
 800b344:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	1e2b      	subs	r3, r5, #0
 800b34e:	bfb7      	itett	lt
 800b350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b354:	2300      	movge	r3, #0
 800b356:	2201      	movlt	r2, #1
 800b358:	9303      	strlt	r3, [sp, #12]
 800b35a:	bfa8      	it	ge
 800b35c:	6033      	strge	r3, [r6, #0]
 800b35e:	9f03      	ldr	r7, [sp, #12]
 800b360:	4b97      	ldr	r3, [pc, #604]	@ (800b5c0 <_dtoa_r+0x2d0>)
 800b362:	bfb8      	it	lt
 800b364:	6032      	strlt	r2, [r6, #0]
 800b366:	43bb      	bics	r3, r7
 800b368:	d112      	bne.n	800b390 <_dtoa_r+0xa0>
 800b36a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b36e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b376:	4323      	orrs	r3, r4
 800b378:	f000 854c 	beq.w	800be14 <_dtoa_r+0xb24>
 800b37c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b37e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b5d4 <_dtoa_r+0x2e4>
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 854e 	beq.w	800be24 <_dtoa_r+0xb34>
 800b388:	f10a 0303 	add.w	r3, sl, #3
 800b38c:	f000 bd48 	b.w	800be20 <_dtoa_r+0xb30>
 800b390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	ec51 0b17 	vmov	r0, r1, d7
 800b39c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b3a0:	f7f5 fba6 	bl	8000af0 <__aeabi_dcmpeq>
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	b158      	cbz	r0, 800b3c0 <_dtoa_r+0xd0>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3b0:	b113      	cbz	r3, 800b3b8 <_dtoa_r+0xc8>
 800b3b2:	4b84      	ldr	r3, [pc, #528]	@ (800b5c4 <_dtoa_r+0x2d4>)
 800b3b4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800b5d8 <_dtoa_r+0x2e8>
 800b3bc:	f000 bd32 	b.w	800be24 <_dtoa_r+0xb34>
 800b3c0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b3c4:	aa16      	add	r2, sp, #88	@ 0x58
 800b3c6:	a917      	add	r1, sp, #92	@ 0x5c
 800b3c8:	4658      	mov	r0, fp
 800b3ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b3ce:	f001 fa41 	bl	800c854 <__d2b>
 800b3d2:	4681      	mov	r9, r0
 800b3d4:	2e00      	cmp	r6, #0
 800b3d6:	d075      	beq.n	800b4c4 <_dtoa_r+0x1d4>
 800b3d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3da:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3de:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b3e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3ee:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4b74      	ldr	r3, [pc, #464]	@ (800b5c8 <_dtoa_r+0x2d8>)
 800b3f8:	f7f4 ff5a 	bl	80002b0 <__aeabi_dsub>
 800b3fc:	a368      	add	r3, pc, #416	@ (adr r3, 800b5a0 <_dtoa_r+0x2b0>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f5 f90d 	bl	8000620 <__aeabi_dmul>
 800b406:	a368      	add	r3, pc, #416	@ (adr r3, 800b5a8 <_dtoa_r+0x2b8>)
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f7f4 ff52 	bl	80002b4 <__adddf3>
 800b410:	4604      	mov	r4, r0
 800b412:	460d      	mov	r5, r1
 800b414:	4630      	mov	r0, r6
 800b416:	f7f5 f899 	bl	800054c <__aeabi_i2d>
 800b41a:	a365      	add	r3, pc, #404	@ (adr r3, 800b5b0 <_dtoa_r+0x2c0>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 f8fe 	bl	8000620 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f7f4 ff42 	bl	80002b4 <__adddf3>
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	f7f5 fba4 	bl	8000b80 <__aeabi_d2iz>
 800b438:	2200      	movs	r2, #0
 800b43a:	4607      	mov	r7, r0
 800b43c:	2300      	movs	r3, #0
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 fb5f 	bl	8000b04 <__aeabi_dcmplt>
 800b446:	b140      	cbz	r0, 800b45a <_dtoa_r+0x16a>
 800b448:	4638      	mov	r0, r7
 800b44a:	f7f5 f87f 	bl	800054c <__aeabi_i2d>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f5 fb4d 	bl	8000af0 <__aeabi_dcmpeq>
 800b456:	b900      	cbnz	r0, 800b45a <_dtoa_r+0x16a>
 800b458:	3f01      	subs	r7, #1
 800b45a:	2f16      	cmp	r7, #22
 800b45c:	d851      	bhi.n	800b502 <_dtoa_r+0x212>
 800b45e:	4b5b      	ldr	r3, [pc, #364]	@ (800b5cc <_dtoa_r+0x2dc>)
 800b460:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f5 fb4a 	bl	8000b04 <__aeabi_dcmplt>
 800b470:	2800      	cmp	r0, #0
 800b472:	d048      	beq.n	800b506 <_dtoa_r+0x216>
 800b474:	3f01      	subs	r7, #1
 800b476:	2300      	movs	r3, #0
 800b478:	9312      	str	r3, [sp, #72]	@ 0x48
 800b47a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b47c:	1b9b      	subs	r3, r3, r6
 800b47e:	1e5a      	subs	r2, r3, #1
 800b480:	bf46      	itte	mi
 800b482:	f1c3 0801 	rsbmi	r8, r3, #1
 800b486:	2300      	movmi	r3, #0
 800b488:	f04f 0800 	movpl.w	r8, #0
 800b48c:	9208      	str	r2, [sp, #32]
 800b48e:	bf48      	it	mi
 800b490:	9308      	strmi	r3, [sp, #32]
 800b492:	2f00      	cmp	r7, #0
 800b494:	db39      	blt.n	800b50a <_dtoa_r+0x21a>
 800b496:	9b08      	ldr	r3, [sp, #32]
 800b498:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b49a:	443b      	add	r3, r7
 800b49c:	9308      	str	r3, [sp, #32]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d864      	bhi.n	800b572 <_dtoa_r+0x282>
 800b4a8:	2b05      	cmp	r3, #5
 800b4aa:	bfc5      	ittet	gt
 800b4ac:	3b04      	subgt	r3, #4
 800b4ae:	2400      	movgt	r4, #0
 800b4b0:	2401      	movle	r4, #1
 800b4b2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b6:	3b02      	subs	r3, #2
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d865      	bhi.n	800b588 <_dtoa_r+0x298>
 800b4bc:	e8df f003 	tbb	[pc, r3]
 800b4c0:	5737392c 	.word	0x5737392c
 800b4c4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b4c8:	441e      	add	r6, r3
 800b4ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4ce:	2b20      	cmp	r3, #32
 800b4d0:	bfc9      	itett	gt
 800b4d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b4d6:	f1c3 0320 	rsble	r3, r3, #32
 800b4da:	409f      	lslgt	r7, r3
 800b4dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b4e0:	bfd8      	it	le
 800b4e2:	fa04 f003 	lslle.w	r0, r4, r3
 800b4e6:	f106 36ff 	add.w	r6, r6, #4294967295
 800b4ea:	bfc4      	itt	gt
 800b4ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4f4:	f7f5 f81a 	bl	800052c <__aeabi_ui2d>
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4fe:	9214      	str	r2, [sp, #80]	@ 0x50
 800b500:	e777      	b.n	800b3f2 <_dtoa_r+0x102>
 800b502:	2301      	movs	r3, #1
 800b504:	e7b8      	b.n	800b478 <_dtoa_r+0x188>
 800b506:	9012      	str	r0, [sp, #72]	@ 0x48
 800b508:	e7b7      	b.n	800b47a <_dtoa_r+0x18a>
 800b50a:	427b      	negs	r3, r7
 800b50c:	eba8 0807 	sub.w	r8, r8, r7
 800b510:	930a      	str	r3, [sp, #40]	@ 0x28
 800b512:	2300      	movs	r3, #0
 800b514:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b516:	e7c4      	b.n	800b4a2 <_dtoa_r+0x1b2>
 800b518:	2300      	movs	r3, #0
 800b51a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b51c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dc35      	bgt.n	800b58e <_dtoa_r+0x29e>
 800b522:	2301      	movs	r3, #1
 800b524:	461a      	mov	r2, r3
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	9307      	str	r3, [sp, #28]
 800b52a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b52c:	e00b      	b.n	800b546 <_dtoa_r+0x256>
 800b52e:	2301      	movs	r3, #1
 800b530:	e7f3      	b.n	800b51a <_dtoa_r+0x22a>
 800b532:	2300      	movs	r3, #0
 800b534:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b538:	18fb      	adds	r3, r7, r3
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	3301      	adds	r3, #1
 800b53e:	2b01      	cmp	r3, #1
 800b540:	9307      	str	r3, [sp, #28]
 800b542:	bfb8      	it	lt
 800b544:	2301      	movlt	r3, #1
 800b546:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b54a:	2100      	movs	r1, #0
 800b54c:	2204      	movs	r2, #4
 800b54e:	f102 0514 	add.w	r5, r2, #20
 800b552:	429d      	cmp	r5, r3
 800b554:	d91f      	bls.n	800b596 <_dtoa_r+0x2a6>
 800b556:	6041      	str	r1, [r0, #4]
 800b558:	4658      	mov	r0, fp
 800b55a:	f000 fd8d 	bl	800c078 <_Balloc>
 800b55e:	4682      	mov	sl, r0
 800b560:	2800      	cmp	r0, #0
 800b562:	d13b      	bne.n	800b5dc <_dtoa_r+0x2ec>
 800b564:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d0 <_dtoa_r+0x2e0>)
 800b566:	4602      	mov	r2, r0
 800b568:	f240 11af 	movw	r1, #431	@ 0x1af
 800b56c:	e6d7      	b.n	800b31e <_dtoa_r+0x2e>
 800b56e:	2301      	movs	r3, #1
 800b570:	e7e0      	b.n	800b534 <_dtoa_r+0x244>
 800b572:	2401      	movs	r4, #1
 800b574:	2300      	movs	r3, #0
 800b576:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b578:	9309      	str	r3, [sp, #36]	@ 0x24
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295
 800b57e:	2200      	movs	r2, #0
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	9307      	str	r3, [sp, #28]
 800b584:	2312      	movs	r3, #18
 800b586:	e7d0      	b.n	800b52a <_dtoa_r+0x23a>
 800b588:	2301      	movs	r3, #1
 800b58a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b58c:	e7f5      	b.n	800b57a <_dtoa_r+0x28a>
 800b58e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	e7d7      	b.n	800b546 <_dtoa_r+0x256>
 800b596:	3101      	adds	r1, #1
 800b598:	0052      	lsls	r2, r2, #1
 800b59a:	e7d8      	b.n	800b54e <_dtoa_r+0x25e>
 800b59c:	f3af 8000 	nop.w
 800b5a0:	636f4361 	.word	0x636f4361
 800b5a4:	3fd287a7 	.word	0x3fd287a7
 800b5a8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ac:	3fc68a28 	.word	0x3fc68a28
 800b5b0:	509f79fb 	.word	0x509f79fb
 800b5b4:	3fd34413 	.word	0x3fd34413
 800b5b8:	0800ec1a 	.word	0x0800ec1a
 800b5bc:	0800ec31 	.word	0x0800ec31
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	0800ebe5 	.word	0x0800ebe5
 800b5c8:	3ff80000 	.word	0x3ff80000
 800b5cc:	0800ed28 	.word	0x0800ed28
 800b5d0:	0800ec89 	.word	0x0800ec89
 800b5d4:	0800ec16 	.word	0x0800ec16
 800b5d8:	0800ebe4 	.word	0x0800ebe4
 800b5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5e0:	6018      	str	r0, [r3, #0]
 800b5e2:	9b07      	ldr	r3, [sp, #28]
 800b5e4:	2b0e      	cmp	r3, #14
 800b5e6:	f200 80a4 	bhi.w	800b732 <_dtoa_r+0x442>
 800b5ea:	2c00      	cmp	r4, #0
 800b5ec:	f000 80a1 	beq.w	800b732 <_dtoa_r+0x442>
 800b5f0:	2f00      	cmp	r7, #0
 800b5f2:	dd33      	ble.n	800b65c <_dtoa_r+0x36c>
 800b5f4:	f007 020f 	and.w	r2, r7, #15
 800b5f8:	4bac      	ldr	r3, [pc, #688]	@ (800b8ac <_dtoa_r+0x5bc>)
 800b5fa:	05f8      	lsls	r0, r7, #23
 800b5fc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b604:	ed93 7b00 	vldr	d7, [r3]
 800b608:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b60c:	d516      	bpl.n	800b63c <_dtoa_r+0x34c>
 800b60e:	4ba8      	ldr	r3, [pc, #672]	@ (800b8b0 <_dtoa_r+0x5c0>)
 800b610:	f004 040f 	and.w	r4, r4, #15
 800b614:	2603      	movs	r6, #3
 800b616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b61a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b61e:	f7f5 f929 	bl	8000874 <__aeabi_ddiv>
 800b622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b626:	4da2      	ldr	r5, [pc, #648]	@ (800b8b0 <_dtoa_r+0x5c0>)
 800b628:	b954      	cbnz	r4, 800b640 <_dtoa_r+0x350>
 800b62a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	f7f5 f91f 	bl	8000874 <__aeabi_ddiv>
 800b636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63a:	e028      	b.n	800b68e <_dtoa_r+0x39e>
 800b63c:	2602      	movs	r6, #2
 800b63e:	e7f2      	b.n	800b626 <_dtoa_r+0x336>
 800b640:	07e1      	lsls	r1, r4, #31
 800b642:	d508      	bpl.n	800b656 <_dtoa_r+0x366>
 800b644:	3601      	adds	r6, #1
 800b646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b64a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b64e:	f7f4 ffe7 	bl	8000620 <__aeabi_dmul>
 800b652:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b656:	1064      	asrs	r4, r4, #1
 800b658:	3508      	adds	r5, #8
 800b65a:	e7e5      	b.n	800b628 <_dtoa_r+0x338>
 800b65c:	f000 80d2 	beq.w	800b804 <_dtoa_r+0x514>
 800b660:	427c      	negs	r4, r7
 800b662:	4b92      	ldr	r3, [pc, #584]	@ (800b8ac <_dtoa_r+0x5bc>)
 800b664:	4d92      	ldr	r5, [pc, #584]	@ (800b8b0 <_dtoa_r+0x5c0>)
 800b666:	2602      	movs	r6, #2
 800b668:	f004 020f 	and.w	r2, r4, #15
 800b66c:	1124      	asrs	r4, r4, #4
 800b66e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f7f4 ffd1 	bl	8000620 <__aeabi_dmul>
 800b67e:	2300      	movs	r3, #0
 800b680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b684:	2c00      	cmp	r4, #0
 800b686:	f040 80b2 	bne.w	800b7ee <_dtoa_r+0x4fe>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1d3      	bne.n	800b636 <_dtoa_r+0x346>
 800b68e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b690:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80b7 	beq.w	800b808 <_dtoa_r+0x518>
 800b69a:	2200      	movs	r2, #0
 800b69c:	4b85      	ldr	r3, [pc, #532]	@ (800b8b4 <_dtoa_r+0x5c4>)
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f5 fa2f 	bl	8000b04 <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f000 80ae 	beq.w	800b808 <_dtoa_r+0x518>
 800b6ac:	9b07      	ldr	r3, [sp, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 80aa 	beq.w	800b808 <_dtoa_r+0x518>
 800b6b4:	9b00      	ldr	r3, [sp, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd37      	ble.n	800b72a <_dtoa_r+0x43a>
 800b6ba:	1e7b      	subs	r3, r7, #1
 800b6bc:	4620      	mov	r0, r4
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	4b7c      	ldr	r3, [pc, #496]	@ (800b8b8 <_dtoa_r+0x5c8>)
 800b6c8:	f7f4 ffaa 	bl	8000620 <__aeabi_dmul>
 800b6cc:	9c00      	ldr	r4, [sp, #0]
 800b6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7f4 ff3a 	bl	800054c <__aeabi_i2d>
 800b6d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6dc:	f7f4 ffa0 	bl	8000620 <__aeabi_dmul>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4b76      	ldr	r3, [pc, #472]	@ (800b8bc <_dtoa_r+0x5cc>)
 800b6e4:	f7f4 fde6 	bl	80002b4 <__adddf3>
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6ee:	2c00      	cmp	r4, #0
 800b6f0:	f040 808d 	bne.w	800b80e <_dtoa_r+0x51e>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	4b72      	ldr	r3, [pc, #456]	@ (800b8c0 <_dtoa_r+0x5d0>)
 800b6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6fc:	f7f4 fdd8 	bl	80002b0 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b708:	462a      	mov	r2, r5
 800b70a:	4633      	mov	r3, r6
 800b70c:	f7f5 fa18 	bl	8000b40 <__aeabi_dcmpgt>
 800b710:	2800      	cmp	r0, #0
 800b712:	f040 828b 	bne.w	800bc2c <_dtoa_r+0x93c>
 800b716:	462a      	mov	r2, r5
 800b718:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b71c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b720:	f7f5 f9f0 	bl	8000b04 <__aeabi_dcmplt>
 800b724:	2800      	cmp	r0, #0
 800b726:	f040 8128 	bne.w	800b97a <_dtoa_r+0x68a>
 800b72a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b72e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b734:	2b00      	cmp	r3, #0
 800b736:	f2c0 815a 	blt.w	800b9ee <_dtoa_r+0x6fe>
 800b73a:	2f0e      	cmp	r7, #14
 800b73c:	f300 8157 	bgt.w	800b9ee <_dtoa_r+0x6fe>
 800b740:	4b5a      	ldr	r3, [pc, #360]	@ (800b8ac <_dtoa_r+0x5bc>)
 800b742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b746:	ed93 7b00 	vldr	d7, [r3]
 800b74a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	ed8d 7b00 	vstr	d7, [sp]
 800b752:	da03      	bge.n	800b75c <_dtoa_r+0x46c>
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f340 8101 	ble.w	800b95e <_dtoa_r+0x66e>
 800b75c:	4656      	mov	r6, sl
 800b75e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b766:	4620      	mov	r0, r4
 800b768:	4629      	mov	r1, r5
 800b76a:	f7f5 f883 	bl	8000874 <__aeabi_ddiv>
 800b76e:	f7f5 fa07 	bl	8000b80 <__aeabi_d2iz>
 800b772:	4680      	mov	r8, r0
 800b774:	f7f4 feea 	bl	800054c <__aeabi_i2d>
 800b778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b77c:	f7f4 ff50 	bl	8000620 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b788:	460b      	mov	r3, r1
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7f4 fd90 	bl	80002b0 <__aeabi_dsub>
 800b790:	9d07      	ldr	r5, [sp, #28]
 800b792:	f806 4b01 	strb.w	r4, [r6], #1
 800b796:	eba6 040a 	sub.w	r4, r6, sl
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	42a5      	cmp	r5, r4
 800b7a0:	f040 8117 	bne.w	800b9d2 <_dtoa_r+0x6e2>
 800b7a4:	f7f4 fd86 	bl	80002b4 <__adddf3>
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b0:	f7f5 f9c6 	bl	8000b40 <__aeabi_dcmpgt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f040 80f9 	bne.w	800b9ac <_dtoa_r+0x6bc>
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7c2:	f7f5 f995 	bl	8000af0 <__aeabi_dcmpeq>
 800b7c6:	b118      	cbz	r0, 800b7d0 <_dtoa_r+0x4e0>
 800b7c8:	f018 0f01 	tst.w	r8, #1
 800b7cc:	f040 80ee 	bne.w	800b9ac <_dtoa_r+0x6bc>
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	4658      	mov	r0, fp
 800b7d4:	f000 fc90 	bl	800c0f8 <_Bfree>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	3701      	adds	r7, #1
 800b7dc:	7033      	strb	r3, [r6, #0]
 800b7de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7e0:	601f      	str	r7, [r3, #0]
 800b7e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 831d 	beq.w	800be24 <_dtoa_r+0xb34>
 800b7ea:	601e      	str	r6, [r3, #0]
 800b7ec:	e31a      	b.n	800be24 <_dtoa_r+0xb34>
 800b7ee:	07e2      	lsls	r2, r4, #31
 800b7f0:	d505      	bpl.n	800b7fe <_dtoa_r+0x50e>
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7f8:	f7f4 ff12 	bl	8000620 <__aeabi_dmul>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	1064      	asrs	r4, r4, #1
 800b800:	3508      	adds	r5, #8
 800b802:	e73f      	b.n	800b684 <_dtoa_r+0x394>
 800b804:	2602      	movs	r6, #2
 800b806:	e742      	b.n	800b68e <_dtoa_r+0x39e>
 800b808:	9c07      	ldr	r4, [sp, #28]
 800b80a:	9704      	str	r7, [sp, #16]
 800b80c:	e761      	b.n	800b6d2 <_dtoa_r+0x3e2>
 800b80e:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <_dtoa_r+0x5bc>)
 800b810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b816:	4454      	add	r4, sl
 800b818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b81c:	2900      	cmp	r1, #0
 800b81e:	d053      	beq.n	800b8c8 <_dtoa_r+0x5d8>
 800b820:	2000      	movs	r0, #0
 800b822:	4928      	ldr	r1, [pc, #160]	@ (800b8c4 <_dtoa_r+0x5d4>)
 800b824:	f7f5 f826 	bl	8000874 <__aeabi_ddiv>
 800b828:	4633      	mov	r3, r6
 800b82a:	4656      	mov	r6, sl
 800b82c:	462a      	mov	r2, r5
 800b82e:	f7f4 fd3f 	bl	80002b0 <__aeabi_dsub>
 800b832:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b83a:	f7f5 f9a1 	bl	8000b80 <__aeabi_d2iz>
 800b83e:	4605      	mov	r5, r0
 800b840:	f7f4 fe84 	bl	800054c <__aeabi_i2d>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	3530      	adds	r5, #48	@ 0x30
 800b84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84e:	f7f4 fd2f 	bl	80002b0 <__aeabi_dsub>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	f806 5b01 	strb.w	r5, [r6], #1
 800b85a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b85e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b862:	f7f5 f94f 	bl	8000b04 <__aeabi_dcmplt>
 800b866:	2800      	cmp	r0, #0
 800b868:	d171      	bne.n	800b94e <_dtoa_r+0x65e>
 800b86a:	2000      	movs	r0, #0
 800b86c:	4911      	ldr	r1, [pc, #68]	@ (800b8b4 <_dtoa_r+0x5c4>)
 800b86e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b872:	f7f4 fd1d 	bl	80002b0 <__aeabi_dsub>
 800b876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b87a:	f7f5 f943 	bl	8000b04 <__aeabi_dcmplt>
 800b87e:	2800      	cmp	r0, #0
 800b880:	f040 8095 	bne.w	800b9ae <_dtoa_r+0x6be>
 800b884:	42a6      	cmp	r6, r4
 800b886:	f43f af50 	beq.w	800b72a <_dtoa_r+0x43a>
 800b88a:	2200      	movs	r2, #0
 800b88c:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b8 <_dtoa_r+0x5c8>)
 800b88e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b892:	f7f4 fec5 	bl	8000620 <__aeabi_dmul>
 800b896:	2200      	movs	r2, #0
 800b898:	4b07      	ldr	r3, [pc, #28]	@ (800b8b8 <_dtoa_r+0x5c8>)
 800b89a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a2:	f7f4 febd 	bl	8000620 <__aeabi_dmul>
 800b8a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8aa:	e7c4      	b.n	800b836 <_dtoa_r+0x546>
 800b8ac:	0800ed28 	.word	0x0800ed28
 800b8b0:	0800ed00 	.word	0x0800ed00
 800b8b4:	3ff00000 	.word	0x3ff00000
 800b8b8:	40240000 	.word	0x40240000
 800b8bc:	401c0000 	.word	0x401c0000
 800b8c0:	40140000 	.word	0x40140000
 800b8c4:	3fe00000 	.word	0x3fe00000
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4656      	mov	r6, sl
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f7f4 fea7 	bl	8000620 <__aeabi_dmul>
 800b8d2:	9415      	str	r4, [sp, #84]	@ 0x54
 800b8d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8dc:	f7f5 f950 	bl	8000b80 <__aeabi_d2iz>
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	f7f4 fe33 	bl	800054c <__aeabi_i2d>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	3530      	adds	r5, #48	@ 0x30
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f0:	f7f4 fcde 	bl	80002b0 <__aeabi_dsub>
 800b8f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	42a6      	cmp	r6, r4
 800b8fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b902:	f04f 0200 	mov.w	r2, #0
 800b906:	d124      	bne.n	800b952 <_dtoa_r+0x662>
 800b908:	4bac      	ldr	r3, [pc, #688]	@ (800bbbc <_dtoa_r+0x8cc>)
 800b90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b90e:	f7f4 fcd1 	bl	80002b4 <__adddf3>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91a:	f7f5 f911 	bl	8000b40 <__aeabi_dcmpgt>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d145      	bne.n	800b9ae <_dtoa_r+0x6be>
 800b922:	2000      	movs	r0, #0
 800b924:	49a5      	ldr	r1, [pc, #660]	@ (800bbbc <_dtoa_r+0x8cc>)
 800b926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b92a:	f7f4 fcc1 	bl	80002b0 <__aeabi_dsub>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b936:	f7f5 f8e5 	bl	8000b04 <__aeabi_dcmplt>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aef5 	beq.w	800b72a <_dtoa_r+0x43a>
 800b940:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b942:	1e73      	subs	r3, r6, #1
 800b944:	9315      	str	r3, [sp, #84]	@ 0x54
 800b946:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b94a:	2b30      	cmp	r3, #48	@ 0x30
 800b94c:	d0f8      	beq.n	800b940 <_dtoa_r+0x650>
 800b94e:	9f04      	ldr	r7, [sp, #16]
 800b950:	e73e      	b.n	800b7d0 <_dtoa_r+0x4e0>
 800b952:	4b9b      	ldr	r3, [pc, #620]	@ (800bbc0 <_dtoa_r+0x8d0>)
 800b954:	f7f4 fe64 	bl	8000620 <__aeabi_dmul>
 800b958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b95c:	e7bc      	b.n	800b8d8 <_dtoa_r+0x5e8>
 800b95e:	d10c      	bne.n	800b97a <_dtoa_r+0x68a>
 800b960:	2200      	movs	r2, #0
 800b962:	4b98      	ldr	r3, [pc, #608]	@ (800bbc4 <_dtoa_r+0x8d4>)
 800b964:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b968:	f7f4 fe5a 	bl	8000620 <__aeabi_dmul>
 800b96c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b970:	f7f5 f8dc 	bl	8000b2c <__aeabi_dcmpge>
 800b974:	2800      	cmp	r0, #0
 800b976:	f000 8157 	beq.w	800bc28 <_dtoa_r+0x938>
 800b97a:	2400      	movs	r4, #0
 800b97c:	4625      	mov	r5, r4
 800b97e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b980:	4656      	mov	r6, sl
 800b982:	43db      	mvns	r3, r3
 800b984:	9304      	str	r3, [sp, #16]
 800b986:	2700      	movs	r7, #0
 800b988:	4621      	mov	r1, r4
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 fbb4 	bl	800c0f8 <_Bfree>
 800b990:	2d00      	cmp	r5, #0
 800b992:	d0dc      	beq.n	800b94e <_dtoa_r+0x65e>
 800b994:	b12f      	cbz	r7, 800b9a2 <_dtoa_r+0x6b2>
 800b996:	42af      	cmp	r7, r5
 800b998:	d003      	beq.n	800b9a2 <_dtoa_r+0x6b2>
 800b99a:	4639      	mov	r1, r7
 800b99c:	4658      	mov	r0, fp
 800b99e:	f000 fbab 	bl	800c0f8 <_Bfree>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4658      	mov	r0, fp
 800b9a6:	f000 fba7 	bl	800c0f8 <_Bfree>
 800b9aa:	e7d0      	b.n	800b94e <_dtoa_r+0x65e>
 800b9ac:	9704      	str	r7, [sp, #16]
 800b9ae:	4633      	mov	r3, r6
 800b9b0:	461e      	mov	r6, r3
 800b9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b6:	2a39      	cmp	r2, #57	@ 0x39
 800b9b8:	d107      	bne.n	800b9ca <_dtoa_r+0x6da>
 800b9ba:	459a      	cmp	sl, r3
 800b9bc:	d1f8      	bne.n	800b9b0 <_dtoa_r+0x6c0>
 800b9be:	9a04      	ldr	r2, [sp, #16]
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	9204      	str	r2, [sp, #16]
 800b9c4:	2230      	movs	r2, #48	@ 0x30
 800b9c6:	f88a 2000 	strb.w	r2, [sl]
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	3201      	adds	r2, #1
 800b9ce:	701a      	strb	r2, [r3, #0]
 800b9d0:	e7bd      	b.n	800b94e <_dtoa_r+0x65e>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4b7a      	ldr	r3, [pc, #488]	@ (800bbc0 <_dtoa_r+0x8d0>)
 800b9d6:	f7f4 fe23 	bl	8000620 <__aeabi_dmul>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	f7f5 f885 	bl	8000af0 <__aeabi_dcmpeq>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f aebb 	beq.w	800b762 <_dtoa_r+0x472>
 800b9ec:	e6f0      	b.n	800b7d0 <_dtoa_r+0x4e0>
 800b9ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	f000 80db 	beq.w	800bbac <_dtoa_r+0x8bc>
 800b9f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f8:	2a01      	cmp	r2, #1
 800b9fa:	f300 80bf 	bgt.w	800bb7c <_dtoa_r+0x88c>
 800b9fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	f000 80b7 	beq.w	800bb74 <_dtoa_r+0x884>
 800ba06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba0c:	4646      	mov	r6, r8
 800ba0e:	9a08      	ldr	r2, [sp, #32]
 800ba10:	2101      	movs	r1, #1
 800ba12:	4658      	mov	r0, fp
 800ba14:	4498      	add	r8, r3
 800ba16:	441a      	add	r2, r3
 800ba18:	9208      	str	r2, [sp, #32]
 800ba1a:	f000 fc6d 	bl	800c2f8 <__i2b>
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b15e      	cbz	r6, 800ba3a <_dtoa_r+0x74a>
 800ba22:	9b08      	ldr	r3, [sp, #32]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd08      	ble.n	800ba3a <_dtoa_r+0x74a>
 800ba28:	42b3      	cmp	r3, r6
 800ba2a:	9a08      	ldr	r2, [sp, #32]
 800ba2c:	bfa8      	it	ge
 800ba2e:	4633      	movge	r3, r6
 800ba30:	eba8 0803 	sub.w	r8, r8, r3
 800ba34:	1af6      	subs	r6, r6, r3
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	9308      	str	r3, [sp, #32]
 800ba3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba3c:	b1f3      	cbz	r3, 800ba7c <_dtoa_r+0x78c>
 800ba3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 80b7 	beq.w	800bbb4 <_dtoa_r+0x8c4>
 800ba46:	b18c      	cbz	r4, 800ba6c <_dtoa_r+0x77c>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	4658      	mov	r0, fp
 800ba4e:	f000 fd13 	bl	800c478 <__pow5mult>
 800ba52:	464a      	mov	r2, r9
 800ba54:	4601      	mov	r1, r0
 800ba56:	4605      	mov	r5, r0
 800ba58:	4658      	mov	r0, fp
 800ba5a:	f000 fc63 	bl	800c324 <__multiply>
 800ba5e:	4649      	mov	r1, r9
 800ba60:	9004      	str	r0, [sp, #16]
 800ba62:	4658      	mov	r0, fp
 800ba64:	f000 fb48 	bl	800c0f8 <_Bfree>
 800ba68:	9b04      	ldr	r3, [sp, #16]
 800ba6a:	4699      	mov	r9, r3
 800ba6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba6e:	1b1a      	subs	r2, r3, r4
 800ba70:	d004      	beq.n	800ba7c <_dtoa_r+0x78c>
 800ba72:	4649      	mov	r1, r9
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 fcff 	bl	800c478 <__pow5mult>
 800ba7a:	4681      	mov	r9, r0
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	4658      	mov	r0, fp
 800ba80:	f000 fc3a 	bl	800c2f8 <__i2b>
 800ba84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba86:	4604      	mov	r4, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 81cf 	beq.w	800be2c <_dtoa_r+0xb3c>
 800ba8e:	461a      	mov	r2, r3
 800ba90:	4601      	mov	r1, r0
 800ba92:	4658      	mov	r0, fp
 800ba94:	f000 fcf0 	bl	800c478 <__pow5mult>
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	f300 8095 	bgt.w	800bbcc <_dtoa_r+0x8dc>
 800baa2:	9b02      	ldr	r3, [sp, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 8087 	bne.w	800bbb8 <_dtoa_r+0x8c8>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f040 8089 	bne.w	800bbc8 <_dtoa_r+0x8d8>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800babc:	0d1b      	lsrs	r3, r3, #20
 800babe:	051b      	lsls	r3, r3, #20
 800bac0:	b12b      	cbz	r3, 800bace <_dtoa_r+0x7de>
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	f108 0801 	add.w	r8, r8, #1
 800bac8:	3301      	adds	r3, #1
 800baca:	9308      	str	r3, [sp, #32]
 800bacc:	2301      	movs	r3, #1
 800bace:	930a      	str	r3, [sp, #40]	@ 0x28
 800bad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 81b0 	beq.w	800be38 <_dtoa_r+0xb48>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bade:	6918      	ldr	r0, [r3, #16]
 800bae0:	f000 fbbe 	bl	800c260 <__hi0bits>
 800bae4:	f1c0 0020 	rsb	r0, r0, #32
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	4418      	add	r0, r3
 800baec:	f010 001f 	ands.w	r0, r0, #31
 800baf0:	d077      	beq.n	800bbe2 <_dtoa_r+0x8f2>
 800baf2:	f1c0 0320 	rsb	r3, r0, #32
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	dd6b      	ble.n	800bbd2 <_dtoa_r+0x8e2>
 800bafa:	f1c0 001c 	rsb	r0, r0, #28
 800bafe:	9b08      	ldr	r3, [sp, #32]
 800bb00:	4480      	add	r8, r0
 800bb02:	4403      	add	r3, r0
 800bb04:	4406      	add	r6, r0
 800bb06:	9308      	str	r3, [sp, #32]
 800bb08:	f1b8 0f00 	cmp.w	r8, #0
 800bb0c:	dd05      	ble.n	800bb1a <_dtoa_r+0x82a>
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4642      	mov	r2, r8
 800bb12:	4658      	mov	r0, fp
 800bb14:	f000 fd0a 	bl	800c52c <__lshift>
 800bb18:	4681      	mov	r9, r0
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dd05      	ble.n	800bb2c <_dtoa_r+0x83c>
 800bb20:	4621      	mov	r1, r4
 800bb22:	461a      	mov	r2, r3
 800bb24:	4658      	mov	r0, fp
 800bb26:	f000 fd01 	bl	800c52c <__lshift>
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d059      	beq.n	800bbe6 <_dtoa_r+0x8f6>
 800bb32:	4621      	mov	r1, r4
 800bb34:	4648      	mov	r0, r9
 800bb36:	f000 fd65 	bl	800c604 <__mcmp>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	da53      	bge.n	800bbe6 <_dtoa_r+0x8f6>
 800bb3e:	1e7b      	subs	r3, r7, #1
 800bb40:	4649      	mov	r1, r9
 800bb42:	220a      	movs	r2, #10
 800bb44:	4658      	mov	r0, fp
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f000 faf7 	bl	800c13c <__multadd>
 800bb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb50:	4681      	mov	r9, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 8172 	beq.w	800be3c <_dtoa_r+0xb4c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	220a      	movs	r2, #10
 800bb5e:	4658      	mov	r0, fp
 800bb60:	f000 faec 	bl	800c13c <__multadd>
 800bb64:	9b00      	ldr	r3, [sp, #0]
 800bb66:	4605      	mov	r5, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc67      	bgt.n	800bc3c <_dtoa_r+0x94c>
 800bb6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc41      	bgt.n	800bbf6 <_dtoa_r+0x906>
 800bb72:	e063      	b.n	800bc3c <_dtoa_r+0x94c>
 800bb74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb7a:	e746      	b.n	800ba0a <_dtoa_r+0x71a>
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	1e5c      	subs	r4, r3, #1
 800bb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	bfb7      	itett	lt
 800bb86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb88:	1b1c      	subge	r4, r3, r4
 800bb8a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bb8c:	1ae3      	sublt	r3, r4, r3
 800bb8e:	bfbe      	ittt	lt
 800bb90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bb92:	2400      	movlt	r4, #0
 800bb94:	18d2      	addlt	r2, r2, r3
 800bb96:	9b07      	ldr	r3, [sp, #28]
 800bb98:	bfb8      	it	lt
 800bb9a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfb5      	itete	lt
 800bba0:	eba8 0603 	sublt.w	r6, r8, r3
 800bba4:	4646      	movge	r6, r8
 800bba6:	2300      	movlt	r3, #0
 800bba8:	9b07      	ldrge	r3, [sp, #28]
 800bbaa:	e730      	b.n	800ba0e <_dtoa_r+0x71e>
 800bbac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbae:	4646      	mov	r6, r8
 800bbb0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bbb2:	e735      	b.n	800ba20 <_dtoa_r+0x730>
 800bbb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbb6:	e75c      	b.n	800ba72 <_dtoa_r+0x782>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e788      	b.n	800bace <_dtoa_r+0x7de>
 800bbbc:	3fe00000 	.word	0x3fe00000
 800bbc0:	40240000 	.word	0x40240000
 800bbc4:	40140000 	.word	0x40140000
 800bbc8:	9b02      	ldr	r3, [sp, #8]
 800bbca:	e780      	b.n	800bace <_dtoa_r+0x7de>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbd0:	e782      	b.n	800bad8 <_dtoa_r+0x7e8>
 800bbd2:	d099      	beq.n	800bb08 <_dtoa_r+0x818>
 800bbd4:	331c      	adds	r3, #28
 800bbd6:	9a08      	ldr	r2, [sp, #32]
 800bbd8:	441a      	add	r2, r3
 800bbda:	4498      	add	r8, r3
 800bbdc:	441e      	add	r6, r3
 800bbde:	9208      	str	r2, [sp, #32]
 800bbe0:	e792      	b.n	800bb08 <_dtoa_r+0x818>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	e7f6      	b.n	800bbd4 <_dtoa_r+0x8e4>
 800bbe6:	9b07      	ldr	r3, [sp, #28]
 800bbe8:	9704      	str	r7, [sp, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dc20      	bgt.n	800bc30 <_dtoa_r+0x940>
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	dd1e      	ble.n	800bc34 <_dtoa_r+0x944>
 800bbf6:	9b00      	ldr	r3, [sp, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f47f aec0 	bne.w	800b97e <_dtoa_r+0x68e>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	2205      	movs	r2, #5
 800bc02:	4658      	mov	r0, fp
 800bc04:	f000 fa9a 	bl	800c13c <__multadd>
 800bc08:	4601      	mov	r1, r0
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	f000 fcf9 	bl	800c604 <__mcmp>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f77f aeb3 	ble.w	800b97e <_dtoa_r+0x68e>
 800bc18:	2331      	movs	r3, #49	@ 0x31
 800bc1a:	4656      	mov	r6, sl
 800bc1c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc20:	9b04      	ldr	r3, [sp, #16]
 800bc22:	3301      	adds	r3, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	e6ae      	b.n	800b986 <_dtoa_r+0x696>
 800bc28:	9c07      	ldr	r4, [sp, #28]
 800bc2a:	9704      	str	r7, [sp, #16]
 800bc2c:	4625      	mov	r5, r4
 800bc2e:	e7f3      	b.n	800bc18 <_dtoa_r+0x928>
 800bc30:	9b07      	ldr	r3, [sp, #28]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 8104 	beq.w	800be44 <_dtoa_r+0xb54>
 800bc3c:	2e00      	cmp	r6, #0
 800bc3e:	dd05      	ble.n	800bc4c <_dtoa_r+0x95c>
 800bc40:	4629      	mov	r1, r5
 800bc42:	4632      	mov	r2, r6
 800bc44:	4658      	mov	r0, fp
 800bc46:	f000 fc71 	bl	800c52c <__lshift>
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d05a      	beq.n	800bd08 <_dtoa_r+0xa18>
 800bc52:	6869      	ldr	r1, [r5, #4]
 800bc54:	4658      	mov	r0, fp
 800bc56:	f000 fa0f 	bl	800c078 <_Balloc>
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	b928      	cbnz	r0, 800bc6a <_dtoa_r+0x97a>
 800bc5e:	4b84      	ldr	r3, [pc, #528]	@ (800be70 <_dtoa_r+0xb80>)
 800bc60:	4602      	mov	r2, r0
 800bc62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc66:	f7ff bb5a 	b.w	800b31e <_dtoa_r+0x2e>
 800bc6a:	692a      	ldr	r2, [r5, #16]
 800bc6c:	f105 010c 	add.w	r1, r5, #12
 800bc70:	300c      	adds	r0, #12
 800bc72:	3202      	adds	r2, #2
 800bc74:	0092      	lsls	r2, r2, #2
 800bc76:	f7ff fa98 	bl	800b1aa <memcpy>
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4658      	mov	r0, fp
 800bc80:	f000 fc54 	bl	800c52c <__lshift>
 800bc84:	f10a 0301 	add.w	r3, sl, #1
 800bc88:	462f      	mov	r7, r5
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	9307      	str	r3, [sp, #28]
 800bc8e:	9b00      	ldr	r3, [sp, #0]
 800bc90:	4453      	add	r3, sl
 800bc92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc94:	9b02      	ldr	r3, [sp, #8]
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4648      	mov	r0, r9
 800bca2:	3b01      	subs	r3, #1
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	f7ff fa93 	bl	800b1d0 <quorem>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	9002      	str	r0, [sp, #8]
 800bcae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcb2:	4648      	mov	r0, r9
 800bcb4:	f000 fca6 	bl	800c604 <__mcmp>
 800bcb8:	462a      	mov	r2, r5
 800bcba:	9008      	str	r0, [sp, #32]
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4658      	mov	r0, fp
 800bcc0:	f000 fcbc 	bl	800c63c <__mdiff>
 800bcc4:	68c2      	ldr	r2, [r0, #12]
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	bb02      	cbnz	r2, 800bd0c <_dtoa_r+0xa1c>
 800bcca:	4601      	mov	r1, r0
 800bccc:	4648      	mov	r0, r9
 800bcce:	f000 fc99 	bl	800c604 <__mcmp>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4658      	mov	r0, fp
 800bcd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcda:	f000 fa0d 	bl	800c0f8 <_Bfree>
 800bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bce2:	9e07      	ldr	r6, [sp, #28]
 800bce4:	ea43 0102 	orr.w	r1, r3, r2
 800bce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcea:	4319      	orrs	r1, r3
 800bcec:	d110      	bne.n	800bd10 <_dtoa_r+0xa20>
 800bcee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcf2:	d029      	beq.n	800bd48 <_dtoa_r+0xa58>
 800bcf4:	9b08      	ldr	r3, [sp, #32]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	dd02      	ble.n	800bd00 <_dtoa_r+0xa10>
 800bcfa:	9b02      	ldr	r3, [sp, #8]
 800bcfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd00:	9b00      	ldr	r3, [sp, #0]
 800bd02:	f883 8000 	strb.w	r8, [r3]
 800bd06:	e63f      	b.n	800b988 <_dtoa_r+0x698>
 800bd08:	4628      	mov	r0, r5
 800bd0a:	e7bb      	b.n	800bc84 <_dtoa_r+0x994>
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	e7e1      	b.n	800bcd4 <_dtoa_r+0x9e4>
 800bd10:	9b08      	ldr	r3, [sp, #32]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	db04      	blt.n	800bd20 <_dtoa_r+0xa30>
 800bd16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd18:	430b      	orrs	r3, r1
 800bd1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	d120      	bne.n	800bd62 <_dtoa_r+0xa72>
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	dded      	ble.n	800bd00 <_dtoa_r+0xa10>
 800bd24:	4649      	mov	r1, r9
 800bd26:	2201      	movs	r2, #1
 800bd28:	4658      	mov	r0, fp
 800bd2a:	f000 fbff 	bl	800c52c <__lshift>
 800bd2e:	4621      	mov	r1, r4
 800bd30:	4681      	mov	r9, r0
 800bd32:	f000 fc67 	bl	800c604 <__mcmp>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	dc03      	bgt.n	800bd42 <_dtoa_r+0xa52>
 800bd3a:	d1e1      	bne.n	800bd00 <_dtoa_r+0xa10>
 800bd3c:	f018 0f01 	tst.w	r8, #1
 800bd40:	d0de      	beq.n	800bd00 <_dtoa_r+0xa10>
 800bd42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd46:	d1d8      	bne.n	800bcfa <_dtoa_r+0xa0a>
 800bd48:	2339      	movs	r3, #57	@ 0x39
 800bd4a:	9a00      	ldr	r2, [sp, #0]
 800bd4c:	7013      	strb	r3, [r2, #0]
 800bd4e:	4633      	mov	r3, r6
 800bd50:	461e      	mov	r6, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd58:	2a39      	cmp	r2, #57	@ 0x39
 800bd5a:	d052      	beq.n	800be02 <_dtoa_r+0xb12>
 800bd5c:	3201      	adds	r2, #1
 800bd5e:	701a      	strb	r2, [r3, #0]
 800bd60:	e612      	b.n	800b988 <_dtoa_r+0x698>
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	dd07      	ble.n	800bd76 <_dtoa_r+0xa86>
 800bd66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd6a:	d0ed      	beq.n	800bd48 <_dtoa_r+0xa58>
 800bd6c:	f108 0301 	add.w	r3, r8, #1
 800bd70:	9a00      	ldr	r2, [sp, #0]
 800bd72:	7013      	strb	r3, [r2, #0]
 800bd74:	e608      	b.n	800b988 <_dtoa_r+0x698>
 800bd76:	9b07      	ldr	r3, [sp, #28]
 800bd78:	9a07      	ldr	r2, [sp, #28]
 800bd7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bd7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d028      	beq.n	800bdd6 <_dtoa_r+0xae6>
 800bd84:	4649      	mov	r1, r9
 800bd86:	2300      	movs	r3, #0
 800bd88:	220a      	movs	r2, #10
 800bd8a:	4658      	mov	r0, fp
 800bd8c:	f000 f9d6 	bl	800c13c <__multadd>
 800bd90:	42af      	cmp	r7, r5
 800bd92:	4681      	mov	r9, r0
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	f04f 020a 	mov.w	r2, #10
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	4658      	mov	r0, fp
 800bda0:	d107      	bne.n	800bdb2 <_dtoa_r+0xac2>
 800bda2:	f000 f9cb 	bl	800c13c <__multadd>
 800bda6:	4607      	mov	r7, r0
 800bda8:	4605      	mov	r5, r0
 800bdaa:	9b07      	ldr	r3, [sp, #28]
 800bdac:	3301      	adds	r3, #1
 800bdae:	9307      	str	r3, [sp, #28]
 800bdb0:	e774      	b.n	800bc9c <_dtoa_r+0x9ac>
 800bdb2:	f000 f9c3 	bl	800c13c <__multadd>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4607      	mov	r7, r0
 800bdba:	2300      	movs	r3, #0
 800bdbc:	220a      	movs	r2, #10
 800bdbe:	4658      	mov	r0, fp
 800bdc0:	f000 f9bc 	bl	800c13c <__multadd>
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	e7f0      	b.n	800bdaa <_dtoa_r+0xaba>
 800bdc8:	9b00      	ldr	r3, [sp, #0]
 800bdca:	2700      	movs	r7, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bfcc      	ite	gt
 800bdd0:	461e      	movgt	r6, r3
 800bdd2:	2601      	movle	r6, #1
 800bdd4:	4456      	add	r6, sl
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	2201      	movs	r2, #1
 800bdda:	4658      	mov	r0, fp
 800bddc:	f000 fba6 	bl	800c52c <__lshift>
 800bde0:	4621      	mov	r1, r4
 800bde2:	4681      	mov	r9, r0
 800bde4:	f000 fc0e 	bl	800c604 <__mcmp>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	dcb0      	bgt.n	800bd4e <_dtoa_r+0xa5e>
 800bdec:	d102      	bne.n	800bdf4 <_dtoa_r+0xb04>
 800bdee:	f018 0f01 	tst.w	r8, #1
 800bdf2:	d1ac      	bne.n	800bd4e <_dtoa_r+0xa5e>
 800bdf4:	4633      	mov	r3, r6
 800bdf6:	461e      	mov	r6, r3
 800bdf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdfc:	2a30      	cmp	r2, #48	@ 0x30
 800bdfe:	d0fa      	beq.n	800bdf6 <_dtoa_r+0xb06>
 800be00:	e5c2      	b.n	800b988 <_dtoa_r+0x698>
 800be02:	459a      	cmp	sl, r3
 800be04:	d1a4      	bne.n	800bd50 <_dtoa_r+0xa60>
 800be06:	9b04      	ldr	r3, [sp, #16]
 800be08:	3301      	adds	r3, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	2331      	movs	r3, #49	@ 0x31
 800be0e:	f88a 3000 	strb.w	r3, [sl]
 800be12:	e5b9      	b.n	800b988 <_dtoa_r+0x698>
 800be14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800be74 <_dtoa_r+0xb84>
 800be1a:	b11b      	cbz	r3, 800be24 <_dtoa_r+0xb34>
 800be1c:	f10a 0308 	add.w	r3, sl, #8
 800be20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	4650      	mov	r0, sl
 800be26:	b019      	add	sp, #100	@ 0x64
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2e:	2b01      	cmp	r3, #1
 800be30:	f77f ae37 	ble.w	800baa2 <_dtoa_r+0x7b2>
 800be34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be36:	930a      	str	r3, [sp, #40]	@ 0x28
 800be38:	2001      	movs	r0, #1
 800be3a:	e655      	b.n	800bae8 <_dtoa_r+0x7f8>
 800be3c:	9b00      	ldr	r3, [sp, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f77f aed6 	ble.w	800bbf0 <_dtoa_r+0x900>
 800be44:	4656      	mov	r6, sl
 800be46:	4621      	mov	r1, r4
 800be48:	4648      	mov	r0, r9
 800be4a:	f7ff f9c1 	bl	800b1d0 <quorem>
 800be4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be52:	9b00      	ldr	r3, [sp, #0]
 800be54:	f806 8b01 	strb.w	r8, [r6], #1
 800be58:	eba6 020a 	sub.w	r2, r6, sl
 800be5c:	4293      	cmp	r3, r2
 800be5e:	ddb3      	ble.n	800bdc8 <_dtoa_r+0xad8>
 800be60:	4649      	mov	r1, r9
 800be62:	2300      	movs	r3, #0
 800be64:	220a      	movs	r2, #10
 800be66:	4658      	mov	r0, fp
 800be68:	f000 f968 	bl	800c13c <__multadd>
 800be6c:	4681      	mov	r9, r0
 800be6e:	e7ea      	b.n	800be46 <_dtoa_r+0xb56>
 800be70:	0800ec89 	.word	0x0800ec89
 800be74:	0800ec0d 	.word	0x0800ec0d

0800be78 <_free_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4605      	mov	r5, r0
 800be7c:	2900      	cmp	r1, #0
 800be7e:	d041      	beq.n	800bf04 <_free_r+0x8c>
 800be80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be84:	1f0c      	subs	r4, r1, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	bfb8      	it	lt
 800be8a:	18e4      	addlt	r4, r4, r3
 800be8c:	f000 f8e8 	bl	800c060 <__malloc_lock>
 800be90:	4a1d      	ldr	r2, [pc, #116]	@ (800bf08 <_free_r+0x90>)
 800be92:	6813      	ldr	r3, [r2, #0]
 800be94:	b933      	cbnz	r3, 800bea4 <_free_r+0x2c>
 800be96:	6063      	str	r3, [r4, #4]
 800be98:	6014      	str	r4, [r2, #0]
 800be9a:	4628      	mov	r0, r5
 800be9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bea0:	f000 b8e4 	b.w	800c06c <__malloc_unlock>
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d908      	bls.n	800beba <_free_r+0x42>
 800bea8:	6820      	ldr	r0, [r4, #0]
 800beaa:	1821      	adds	r1, r4, r0
 800beac:	428b      	cmp	r3, r1
 800beae:	bf01      	itttt	eq
 800beb0:	6819      	ldreq	r1, [r3, #0]
 800beb2:	685b      	ldreq	r3, [r3, #4]
 800beb4:	1809      	addeq	r1, r1, r0
 800beb6:	6021      	streq	r1, [r4, #0]
 800beb8:	e7ed      	b.n	800be96 <_free_r+0x1e>
 800beba:	461a      	mov	r2, r3
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	b10b      	cbz	r3, 800bec4 <_free_r+0x4c>
 800bec0:	42a3      	cmp	r3, r4
 800bec2:	d9fa      	bls.n	800beba <_free_r+0x42>
 800bec4:	6811      	ldr	r1, [r2, #0]
 800bec6:	1850      	adds	r0, r2, r1
 800bec8:	42a0      	cmp	r0, r4
 800beca:	d10b      	bne.n	800bee4 <_free_r+0x6c>
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	4401      	add	r1, r0
 800bed0:	1850      	adds	r0, r2, r1
 800bed2:	6011      	str	r1, [r2, #0]
 800bed4:	4283      	cmp	r3, r0
 800bed6:	d1e0      	bne.n	800be9a <_free_r+0x22>
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	4408      	add	r0, r1
 800bede:	6053      	str	r3, [r2, #4]
 800bee0:	6010      	str	r0, [r2, #0]
 800bee2:	e7da      	b.n	800be9a <_free_r+0x22>
 800bee4:	d902      	bls.n	800beec <_free_r+0x74>
 800bee6:	230c      	movs	r3, #12
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	e7d6      	b.n	800be9a <_free_r+0x22>
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	1821      	adds	r1, r4, r0
 800bef0:	428b      	cmp	r3, r1
 800bef2:	bf02      	ittt	eq
 800bef4:	6819      	ldreq	r1, [r3, #0]
 800bef6:	685b      	ldreq	r3, [r3, #4]
 800bef8:	1809      	addeq	r1, r1, r0
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	bf08      	it	eq
 800befe:	6021      	streq	r1, [r4, #0]
 800bf00:	6054      	str	r4, [r2, #4]
 800bf02:	e7ca      	b.n	800be9a <_free_r+0x22>
 800bf04:	bd38      	pop	{r3, r4, r5, pc}
 800bf06:	bf00      	nop
 800bf08:	2003b3a4 	.word	0x2003b3a4

0800bf0c <malloc>:
 800bf0c:	4b02      	ldr	r3, [pc, #8]	@ (800bf18 <malloc+0xc>)
 800bf0e:	4601      	mov	r1, r0
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	f000 b825 	b.w	800bf60 <_malloc_r>
 800bf16:	bf00      	nop
 800bf18:	20000028 	.word	0x20000028

0800bf1c <sbrk_aligned>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	4e0f      	ldr	r6, [pc, #60]	@ (800bf5c <sbrk_aligned+0x40>)
 800bf20:	460c      	mov	r4, r1
 800bf22:	4605      	mov	r5, r0
 800bf24:	6831      	ldr	r1, [r6, #0]
 800bf26:	b911      	cbnz	r1, 800bf2e <sbrk_aligned+0x12>
 800bf28:	f001 fe18 	bl	800db5c <_sbrk_r>
 800bf2c:	6030      	str	r0, [r6, #0]
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	f001 fe13 	bl	800db5c <_sbrk_r>
 800bf36:	1c43      	adds	r3, r0, #1
 800bf38:	d103      	bne.n	800bf42 <sbrk_aligned+0x26>
 800bf3a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf3e:	4620      	mov	r0, r4
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	1cc4      	adds	r4, r0, #3
 800bf44:	f024 0403 	bic.w	r4, r4, #3
 800bf48:	42a0      	cmp	r0, r4
 800bf4a:	d0f8      	beq.n	800bf3e <sbrk_aligned+0x22>
 800bf4c:	1a21      	subs	r1, r4, r0
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f001 fe04 	bl	800db5c <_sbrk_r>
 800bf54:	3001      	adds	r0, #1
 800bf56:	d1f2      	bne.n	800bf3e <sbrk_aligned+0x22>
 800bf58:	e7ef      	b.n	800bf3a <sbrk_aligned+0x1e>
 800bf5a:	bf00      	nop
 800bf5c:	2003b3a0 	.word	0x2003b3a0

0800bf60 <_malloc_r>:
 800bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	1ccd      	adds	r5, r1, #3
 800bf66:	4606      	mov	r6, r0
 800bf68:	f025 0503 	bic.w	r5, r5, #3
 800bf6c:	3508      	adds	r5, #8
 800bf6e:	2d0c      	cmp	r5, #12
 800bf70:	bf38      	it	cc
 800bf72:	250c      	movcc	r5, #12
 800bf74:	2d00      	cmp	r5, #0
 800bf76:	db01      	blt.n	800bf7c <_malloc_r+0x1c>
 800bf78:	42a9      	cmp	r1, r5
 800bf7a:	d904      	bls.n	800bf86 <_malloc_r+0x26>
 800bf7c:	230c      	movs	r3, #12
 800bf7e:	6033      	str	r3, [r6, #0]
 800bf80:	2000      	movs	r0, #0
 800bf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c05c <_malloc_r+0xfc>
 800bf8a:	f000 f869 	bl	800c060 <__malloc_lock>
 800bf8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf92:	461c      	mov	r4, r3
 800bf94:	bb44      	cbnz	r4, 800bfe8 <_malloc_r+0x88>
 800bf96:	4629      	mov	r1, r5
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7ff ffbf 	bl	800bf1c <sbrk_aligned>
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	d158      	bne.n	800c056 <_malloc_r+0xf6>
 800bfa4:	f8d8 4000 	ldr.w	r4, [r8]
 800bfa8:	4627      	mov	r7, r4
 800bfaa:	2f00      	cmp	r7, #0
 800bfac:	d143      	bne.n	800c036 <_malloc_r+0xd6>
 800bfae:	2c00      	cmp	r4, #0
 800bfb0:	d04b      	beq.n	800c04a <_malloc_r+0xea>
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	eb04 0903 	add.w	r9, r4, r3
 800bfbc:	f001 fdce 	bl	800db5c <_sbrk_r>
 800bfc0:	4581      	cmp	r9, r0
 800bfc2:	d142      	bne.n	800c04a <_malloc_r+0xea>
 800bfc4:	6821      	ldr	r1, [r4, #0]
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	1a6d      	subs	r5, r5, r1
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7ff ffa6 	bl	800bf1c <sbrk_aligned>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d03a      	beq.n	800c04a <_malloc_r+0xea>
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	442b      	add	r3, r5
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	f8d8 3000 	ldr.w	r3, [r8]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	bb62      	cbnz	r2, 800c03c <_malloc_r+0xdc>
 800bfe2:	f8c8 7000 	str.w	r7, [r8]
 800bfe6:	e00f      	b.n	800c008 <_malloc_r+0xa8>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	1b52      	subs	r2, r2, r5
 800bfec:	d420      	bmi.n	800c030 <_malloc_r+0xd0>
 800bfee:	2a0b      	cmp	r2, #11
 800bff0:	d917      	bls.n	800c022 <_malloc_r+0xc2>
 800bff2:	1961      	adds	r1, r4, r5
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	6025      	str	r5, [r4, #0]
 800bff8:	bf18      	it	ne
 800bffa:	6059      	strne	r1, [r3, #4]
 800bffc:	6863      	ldr	r3, [r4, #4]
 800bffe:	bf08      	it	eq
 800c000:	f8c8 1000 	streq.w	r1, [r8]
 800c004:	5162      	str	r2, [r4, r5]
 800c006:	604b      	str	r3, [r1, #4]
 800c008:	4630      	mov	r0, r6
 800c00a:	f000 f82f 	bl	800c06c <__malloc_unlock>
 800c00e:	f104 000b 	add.w	r0, r4, #11
 800c012:	1d23      	adds	r3, r4, #4
 800c014:	f020 0007 	bic.w	r0, r0, #7
 800c018:	1ac2      	subs	r2, r0, r3
 800c01a:	bf1c      	itt	ne
 800c01c:	1a1b      	subne	r3, r3, r0
 800c01e:	50a3      	strne	r3, [r4, r2]
 800c020:	e7af      	b.n	800bf82 <_malloc_r+0x22>
 800c022:	6862      	ldr	r2, [r4, #4]
 800c024:	42a3      	cmp	r3, r4
 800c026:	bf0c      	ite	eq
 800c028:	f8c8 2000 	streq.w	r2, [r8]
 800c02c:	605a      	strne	r2, [r3, #4]
 800c02e:	e7eb      	b.n	800c008 <_malloc_r+0xa8>
 800c030:	4623      	mov	r3, r4
 800c032:	6864      	ldr	r4, [r4, #4]
 800c034:	e7ae      	b.n	800bf94 <_malloc_r+0x34>
 800c036:	463c      	mov	r4, r7
 800c038:	687f      	ldr	r7, [r7, #4]
 800c03a:	e7b6      	b.n	800bfaa <_malloc_r+0x4a>
 800c03c:	461a      	mov	r2, r3
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	42a3      	cmp	r3, r4
 800c042:	d1fb      	bne.n	800c03c <_malloc_r+0xdc>
 800c044:	2300      	movs	r3, #0
 800c046:	6053      	str	r3, [r2, #4]
 800c048:	e7de      	b.n	800c008 <_malloc_r+0xa8>
 800c04a:	230c      	movs	r3, #12
 800c04c:	4630      	mov	r0, r6
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	f000 f80c 	bl	800c06c <__malloc_unlock>
 800c054:	e794      	b.n	800bf80 <_malloc_r+0x20>
 800c056:	6005      	str	r5, [r0, #0]
 800c058:	e7d6      	b.n	800c008 <_malloc_r+0xa8>
 800c05a:	bf00      	nop
 800c05c:	2003b3a4 	.word	0x2003b3a4

0800c060 <__malloc_lock>:
 800c060:	4801      	ldr	r0, [pc, #4]	@ (800c068 <__malloc_lock+0x8>)
 800c062:	f7ff b892 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800c066:	bf00      	nop
 800c068:	2003b39c 	.word	0x2003b39c

0800c06c <__malloc_unlock>:
 800c06c:	4801      	ldr	r0, [pc, #4]	@ (800c074 <__malloc_unlock+0x8>)
 800c06e:	f7ff b88d 	b.w	800b18c <__retarget_lock_release_recursive>
 800c072:	bf00      	nop
 800c074:	2003b39c 	.word	0x2003b39c

0800c078 <_Balloc>:
 800c078:	b570      	push	{r4, r5, r6, lr}
 800c07a:	69c6      	ldr	r6, [r0, #28]
 800c07c:	4604      	mov	r4, r0
 800c07e:	460d      	mov	r5, r1
 800c080:	b976      	cbnz	r6, 800c0a0 <_Balloc+0x28>
 800c082:	2010      	movs	r0, #16
 800c084:	f7ff ff42 	bl	800bf0c <malloc>
 800c088:	4602      	mov	r2, r0
 800c08a:	61e0      	str	r0, [r4, #28]
 800c08c:	b920      	cbnz	r0, 800c098 <_Balloc+0x20>
 800c08e:	4b18      	ldr	r3, [pc, #96]	@ (800c0f0 <_Balloc+0x78>)
 800c090:	216b      	movs	r1, #107	@ 0x6b
 800c092:	4818      	ldr	r0, [pc, #96]	@ (800c0f4 <_Balloc+0x7c>)
 800c094:	f001 fd7c 	bl	800db90 <__assert_func>
 800c098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c09c:	6006      	str	r6, [r0, #0]
 800c09e:	60c6      	str	r6, [r0, #12]
 800c0a0:	69e6      	ldr	r6, [r4, #28]
 800c0a2:	68f3      	ldr	r3, [r6, #12]
 800c0a4:	b183      	cbz	r3, 800c0c8 <_Balloc+0x50>
 800c0a6:	69e3      	ldr	r3, [r4, #28]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ae:	b9b8      	cbnz	r0, 800c0e0 <_Balloc+0x68>
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	fa01 f605 	lsl.w	r6, r1, r5
 800c0b8:	1d72      	adds	r2, r6, #5
 800c0ba:	0092      	lsls	r2, r2, #2
 800c0bc:	f001 fd86 	bl	800dbcc <_calloc_r>
 800c0c0:	b160      	cbz	r0, 800c0dc <_Balloc+0x64>
 800c0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0c6:	e00e      	b.n	800c0e6 <_Balloc+0x6e>
 800c0c8:	2221      	movs	r2, #33	@ 0x21
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f001 fd7d 	bl	800dbcc <_calloc_r>
 800c0d2:	69e3      	ldr	r3, [r4, #28]
 800c0d4:	60f0      	str	r0, [r6, #12]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1e4      	bne.n	800c0a6 <_Balloc+0x2e>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	6802      	ldr	r2, [r0, #0]
 800c0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0ec:	e7f7      	b.n	800c0de <_Balloc+0x66>
 800c0ee:	bf00      	nop
 800c0f0:	0800ec1a 	.word	0x0800ec1a
 800c0f4:	0800ec9a 	.word	0x0800ec9a

0800c0f8 <_Bfree>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	69c6      	ldr	r6, [r0, #28]
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	b976      	cbnz	r6, 800c120 <_Bfree+0x28>
 800c102:	2010      	movs	r0, #16
 800c104:	f7ff ff02 	bl	800bf0c <malloc>
 800c108:	4602      	mov	r2, r0
 800c10a:	61e8      	str	r0, [r5, #28]
 800c10c:	b920      	cbnz	r0, 800c118 <_Bfree+0x20>
 800c10e:	4b09      	ldr	r3, [pc, #36]	@ (800c134 <_Bfree+0x3c>)
 800c110:	218f      	movs	r1, #143	@ 0x8f
 800c112:	4809      	ldr	r0, [pc, #36]	@ (800c138 <_Bfree+0x40>)
 800c114:	f001 fd3c 	bl	800db90 <__assert_func>
 800c118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c11c:	6006      	str	r6, [r0, #0]
 800c11e:	60c6      	str	r6, [r0, #12]
 800c120:	b13c      	cbz	r4, 800c132 <_Bfree+0x3a>
 800c122:	69eb      	ldr	r3, [r5, #28]
 800c124:	6862      	ldr	r2, [r4, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c12c:	6021      	str	r1, [r4, #0]
 800c12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	0800ec1a 	.word	0x0800ec1a
 800c138:	0800ec9a 	.word	0x0800ec9a

0800c13c <__multadd>:
 800c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	f101 0c14 	add.w	ip, r1, #20
 800c144:	4607      	mov	r7, r0
 800c146:	460c      	mov	r4, r1
 800c148:	461e      	mov	r6, r3
 800c14a:	690d      	ldr	r5, [r1, #16]
 800c14c:	2000      	movs	r0, #0
 800c14e:	f8dc 3000 	ldr.w	r3, [ip]
 800c152:	3001      	adds	r0, #1
 800c154:	b299      	uxth	r1, r3
 800c156:	4285      	cmp	r5, r0
 800c158:	fb02 6101 	mla	r1, r2, r1, r6
 800c15c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c160:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c164:	b289      	uxth	r1, r1
 800c166:	fb02 3306 	mla	r3, r2, r6, r3
 800c16a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c172:	f84c 1b04 	str.w	r1, [ip], #4
 800c176:	dcea      	bgt.n	800c14e <__multadd+0x12>
 800c178:	b30e      	cbz	r6, 800c1be <__multadd+0x82>
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	42ab      	cmp	r3, r5
 800c17e:	dc19      	bgt.n	800c1b4 <__multadd+0x78>
 800c180:	6861      	ldr	r1, [r4, #4]
 800c182:	4638      	mov	r0, r7
 800c184:	3101      	adds	r1, #1
 800c186:	f7ff ff77 	bl	800c078 <_Balloc>
 800c18a:	4680      	mov	r8, r0
 800c18c:	b928      	cbnz	r0, 800c19a <__multadd+0x5e>
 800c18e:	4602      	mov	r2, r0
 800c190:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c4 <__multadd+0x88>)
 800c192:	21ba      	movs	r1, #186	@ 0xba
 800c194:	480c      	ldr	r0, [pc, #48]	@ (800c1c8 <__multadd+0x8c>)
 800c196:	f001 fcfb 	bl	800db90 <__assert_func>
 800c19a:	6922      	ldr	r2, [r4, #16]
 800c19c:	f104 010c 	add.w	r1, r4, #12
 800c1a0:	300c      	adds	r0, #12
 800c1a2:	3202      	adds	r2, #2
 800c1a4:	0092      	lsls	r2, r2, #2
 800c1a6:	f7ff f800 	bl	800b1aa <memcpy>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4644      	mov	r4, r8
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7ff ffa2 	bl	800c0f8 <_Bfree>
 800c1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	615e      	str	r6, [r3, #20]
 800c1bc:	6125      	str	r5, [r4, #16]
 800c1be:	4620      	mov	r0, r4
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	0800ec89 	.word	0x0800ec89
 800c1c8:	0800ec9a 	.word	0x0800ec9a

0800c1cc <__s2b>:
 800c1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d0:	4615      	mov	r5, r2
 800c1d2:	461f      	mov	r7, r3
 800c1d4:	2209      	movs	r2, #9
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	460c      	mov	r4, r1
 800c1da:	4606      	mov	r6, r0
 800c1dc:	2100      	movs	r1, #0
 800c1de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	db09      	blt.n	800c1fc <__s2b+0x30>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7ff ff45 	bl	800c078 <_Balloc>
 800c1ee:	b940      	cbnz	r0, 800c202 <__s2b+0x36>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	4b19      	ldr	r3, [pc, #100]	@ (800c258 <__s2b+0x8c>)
 800c1f4:	21d3      	movs	r1, #211	@ 0xd3
 800c1f6:	4819      	ldr	r0, [pc, #100]	@ (800c25c <__s2b+0x90>)
 800c1f8:	f001 fcca 	bl	800db90 <__assert_func>
 800c1fc:	0052      	lsls	r2, r2, #1
 800c1fe:	3101      	adds	r1, #1
 800c200:	e7f0      	b.n	800c1e4 <__s2b+0x18>
 800c202:	9b08      	ldr	r3, [sp, #32]
 800c204:	2d09      	cmp	r5, #9
 800c206:	6143      	str	r3, [r0, #20]
 800c208:	f04f 0301 	mov.w	r3, #1
 800c20c:	6103      	str	r3, [r0, #16]
 800c20e:	dd16      	ble.n	800c23e <__s2b+0x72>
 800c210:	f104 0909 	add.w	r9, r4, #9
 800c214:	442c      	add	r4, r5
 800c216:	46c8      	mov	r8, r9
 800c218:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c21c:	4601      	mov	r1, r0
 800c21e:	220a      	movs	r2, #10
 800c220:	4630      	mov	r0, r6
 800c222:	3b30      	subs	r3, #48	@ 0x30
 800c224:	f7ff ff8a 	bl	800c13c <__multadd>
 800c228:	45a0      	cmp	r8, r4
 800c22a:	d1f5      	bne.n	800c218 <__s2b+0x4c>
 800c22c:	f1a5 0408 	sub.w	r4, r5, #8
 800c230:	444c      	add	r4, r9
 800c232:	1b2d      	subs	r5, r5, r4
 800c234:	1963      	adds	r3, r4, r5
 800c236:	42bb      	cmp	r3, r7
 800c238:	db04      	blt.n	800c244 <__s2b+0x78>
 800c23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23e:	340a      	adds	r4, #10
 800c240:	2509      	movs	r5, #9
 800c242:	e7f6      	b.n	800c232 <__s2b+0x66>
 800c244:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c248:	4601      	mov	r1, r0
 800c24a:	220a      	movs	r2, #10
 800c24c:	4630      	mov	r0, r6
 800c24e:	3b30      	subs	r3, #48	@ 0x30
 800c250:	f7ff ff74 	bl	800c13c <__multadd>
 800c254:	e7ee      	b.n	800c234 <__s2b+0x68>
 800c256:	bf00      	nop
 800c258:	0800ec89 	.word	0x0800ec89
 800c25c:	0800ec9a 	.word	0x0800ec9a

0800c260 <__hi0bits>:
 800c260:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c264:	4603      	mov	r3, r0
 800c266:	bf36      	itet	cc
 800c268:	0403      	lslcc	r3, r0, #16
 800c26a:	2000      	movcs	r0, #0
 800c26c:	2010      	movcc	r0, #16
 800c26e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c272:	bf3c      	itt	cc
 800c274:	021b      	lslcc	r3, r3, #8
 800c276:	3008      	addcc	r0, #8
 800c278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c27c:	bf3c      	itt	cc
 800c27e:	011b      	lslcc	r3, r3, #4
 800c280:	3004      	addcc	r0, #4
 800c282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c286:	bf3c      	itt	cc
 800c288:	009b      	lslcc	r3, r3, #2
 800c28a:	3002      	addcc	r0, #2
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	db05      	blt.n	800c29c <__hi0bits+0x3c>
 800c290:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c294:	f100 0001 	add.w	r0, r0, #1
 800c298:	bf08      	it	eq
 800c29a:	2020      	moveq	r0, #32
 800c29c:	4770      	bx	lr

0800c29e <__lo0bits>:
 800c29e:	6803      	ldr	r3, [r0, #0]
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	f013 0007 	ands.w	r0, r3, #7
 800c2a6:	d00b      	beq.n	800c2c0 <__lo0bits+0x22>
 800c2a8:	07d9      	lsls	r1, r3, #31
 800c2aa:	d421      	bmi.n	800c2f0 <__lo0bits+0x52>
 800c2ac:	0798      	lsls	r0, r3, #30
 800c2ae:	bf47      	ittee	mi
 800c2b0:	085b      	lsrmi	r3, r3, #1
 800c2b2:	2001      	movmi	r0, #1
 800c2b4:	089b      	lsrpl	r3, r3, #2
 800c2b6:	2002      	movpl	r0, #2
 800c2b8:	bf4c      	ite	mi
 800c2ba:	6013      	strmi	r3, [r2, #0]
 800c2bc:	6013      	strpl	r3, [r2, #0]
 800c2be:	4770      	bx	lr
 800c2c0:	b299      	uxth	r1, r3
 800c2c2:	b909      	cbnz	r1, 800c2c8 <__lo0bits+0x2a>
 800c2c4:	0c1b      	lsrs	r3, r3, #16
 800c2c6:	2010      	movs	r0, #16
 800c2c8:	b2d9      	uxtb	r1, r3
 800c2ca:	b909      	cbnz	r1, 800c2d0 <__lo0bits+0x32>
 800c2cc:	3008      	adds	r0, #8
 800c2ce:	0a1b      	lsrs	r3, r3, #8
 800c2d0:	0719      	lsls	r1, r3, #28
 800c2d2:	bf04      	itt	eq
 800c2d4:	091b      	lsreq	r3, r3, #4
 800c2d6:	3004      	addeq	r0, #4
 800c2d8:	0799      	lsls	r1, r3, #30
 800c2da:	bf04      	itt	eq
 800c2dc:	089b      	lsreq	r3, r3, #2
 800c2de:	3002      	addeq	r0, #2
 800c2e0:	07d9      	lsls	r1, r3, #31
 800c2e2:	d403      	bmi.n	800c2ec <__lo0bits+0x4e>
 800c2e4:	085b      	lsrs	r3, r3, #1
 800c2e6:	f100 0001 	add.w	r0, r0, #1
 800c2ea:	d003      	beq.n	800c2f4 <__lo0bits+0x56>
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	4770      	bx	lr
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	4770      	bx	lr
 800c2f4:	2020      	movs	r0, #32
 800c2f6:	4770      	bx	lr

0800c2f8 <__i2b>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	f7ff febb 	bl	800c078 <_Balloc>
 800c302:	4602      	mov	r2, r0
 800c304:	b928      	cbnz	r0, 800c312 <__i2b+0x1a>
 800c306:	4b05      	ldr	r3, [pc, #20]	@ (800c31c <__i2b+0x24>)
 800c308:	f240 1145 	movw	r1, #325	@ 0x145
 800c30c:	4804      	ldr	r0, [pc, #16]	@ (800c320 <__i2b+0x28>)
 800c30e:	f001 fc3f 	bl	800db90 <__assert_func>
 800c312:	2301      	movs	r3, #1
 800c314:	6144      	str	r4, [r0, #20]
 800c316:	6103      	str	r3, [r0, #16]
 800c318:	bd10      	pop	{r4, pc}
 800c31a:	bf00      	nop
 800c31c:	0800ec89 	.word	0x0800ec89
 800c320:	0800ec9a 	.word	0x0800ec9a

0800c324 <__multiply>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	4614      	mov	r4, r2
 800c32a:	690a      	ldr	r2, [r1, #16]
 800c32c:	460f      	mov	r7, r1
 800c32e:	b085      	sub	sp, #20
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	429a      	cmp	r2, r3
 800c334:	bfa2      	ittt	ge
 800c336:	4623      	movge	r3, r4
 800c338:	460c      	movge	r4, r1
 800c33a:	461f      	movge	r7, r3
 800c33c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c346:	6861      	ldr	r1, [r4, #4]
 800c348:	eb0a 0609 	add.w	r6, sl, r9
 800c34c:	42b3      	cmp	r3, r6
 800c34e:	bfb8      	it	lt
 800c350:	3101      	addlt	r1, #1
 800c352:	f7ff fe91 	bl	800c078 <_Balloc>
 800c356:	b930      	cbnz	r0, 800c366 <__multiply+0x42>
 800c358:	4602      	mov	r2, r0
 800c35a:	4b45      	ldr	r3, [pc, #276]	@ (800c470 <__multiply+0x14c>)
 800c35c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c360:	4844      	ldr	r0, [pc, #272]	@ (800c474 <__multiply+0x150>)
 800c362:	f001 fc15 	bl	800db90 <__assert_func>
 800c366:	f100 0514 	add.w	r5, r0, #20
 800c36a:	2200      	movs	r2, #0
 800c36c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c370:	462b      	mov	r3, r5
 800c372:	4543      	cmp	r3, r8
 800c374:	d321      	bcc.n	800c3ba <__multiply+0x96>
 800c376:	f107 0114 	add.w	r1, r7, #20
 800c37a:	f104 0214 	add.w	r2, r4, #20
 800c37e:	f104 0715 	add.w	r7, r4, #21
 800c382:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c386:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c38a:	9302      	str	r3, [sp, #8]
 800c38c:	1b13      	subs	r3, r2, r4
 800c38e:	3b15      	subs	r3, #21
 800c390:	f023 0303 	bic.w	r3, r3, #3
 800c394:	3304      	adds	r3, #4
 800c396:	42ba      	cmp	r2, r7
 800c398:	bf38      	it	cc
 800c39a:	2304      	movcc	r3, #4
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	9b02      	ldr	r3, [sp, #8]
 800c3a0:	9103      	str	r1, [sp, #12]
 800c3a2:	428b      	cmp	r3, r1
 800c3a4:	d80c      	bhi.n	800c3c0 <__multiply+0x9c>
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	dd03      	ble.n	800c3b2 <__multiply+0x8e>
 800c3aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d05b      	beq.n	800c46a <__multiply+0x146>
 800c3b2:	6106      	str	r6, [r0, #16]
 800c3b4:	b005      	add	sp, #20
 800c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	f843 2b04 	str.w	r2, [r3], #4
 800c3be:	e7d8      	b.n	800c372 <__multiply+0x4e>
 800c3c0:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3c4:	f1ba 0f00 	cmp.w	sl, #0
 800c3c8:	d024      	beq.n	800c414 <__multiply+0xf0>
 800c3ca:	f104 0e14 	add.w	lr, r4, #20
 800c3ce:	46a9      	mov	r9, r5
 800c3d0:	f04f 0c00 	mov.w	ip, #0
 800c3d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3d8:	f8d9 3000 	ldr.w	r3, [r9]
 800c3dc:	fa1f fb87 	uxth.w	fp, r7
 800c3e0:	4572      	cmp	r2, lr
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c3ec:	f8d9 7000 	ldr.w	r7, [r9]
 800c3f0:	4463      	add	r3, ip
 800c3f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c3fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c404:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c408:	f849 3b04 	str.w	r3, [r9], #4
 800c40c:	d8e2      	bhi.n	800c3d4 <__multiply+0xb0>
 800c40e:	9b01      	ldr	r3, [sp, #4]
 800c410:	f845 c003 	str.w	ip, [r5, r3]
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	3104      	adds	r1, #4
 800c418:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c41c:	f1b9 0f00 	cmp.w	r9, #0
 800c420:	d021      	beq.n	800c466 <__multiply+0x142>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	f104 0c14 	add.w	ip, r4, #20
 800c428:	46ae      	mov	lr, r5
 800c42a:	f04f 0a00 	mov.w	sl, #0
 800c42e:	f8bc b000 	ldrh.w	fp, [ip]
 800c432:	b29b      	uxth	r3, r3
 800c434:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c438:	fb09 770b 	mla	r7, r9, fp, r7
 800c43c:	4457      	add	r7, sl
 800c43e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c442:	f84e 3b04 	str.w	r3, [lr], #4
 800c446:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c44e:	f8be 3000 	ldrh.w	r3, [lr]
 800c452:	4562      	cmp	r2, ip
 800c454:	fb09 330a 	mla	r3, r9, sl, r3
 800c458:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c45c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c460:	d8e5      	bhi.n	800c42e <__multiply+0x10a>
 800c462:	9f01      	ldr	r7, [sp, #4]
 800c464:	51eb      	str	r3, [r5, r7]
 800c466:	3504      	adds	r5, #4
 800c468:	e799      	b.n	800c39e <__multiply+0x7a>
 800c46a:	3e01      	subs	r6, #1
 800c46c:	e79b      	b.n	800c3a6 <__multiply+0x82>
 800c46e:	bf00      	nop
 800c470:	0800ec89 	.word	0x0800ec89
 800c474:	0800ec9a 	.word	0x0800ec9a

0800c478 <__pow5mult>:
 800c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c47c:	4615      	mov	r5, r2
 800c47e:	f012 0203 	ands.w	r2, r2, #3
 800c482:	4607      	mov	r7, r0
 800c484:	460e      	mov	r6, r1
 800c486:	d007      	beq.n	800c498 <__pow5mult+0x20>
 800c488:	3a01      	subs	r2, #1
 800c48a:	4c25      	ldr	r4, [pc, #148]	@ (800c520 <__pow5mult+0xa8>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c492:	f7ff fe53 	bl	800c13c <__multadd>
 800c496:	4606      	mov	r6, r0
 800c498:	10ad      	asrs	r5, r5, #2
 800c49a:	d03d      	beq.n	800c518 <__pow5mult+0xa0>
 800c49c:	69fc      	ldr	r4, [r7, #28]
 800c49e:	b97c      	cbnz	r4, 800c4c0 <__pow5mult+0x48>
 800c4a0:	2010      	movs	r0, #16
 800c4a2:	f7ff fd33 	bl	800bf0c <malloc>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	61f8      	str	r0, [r7, #28]
 800c4aa:	b928      	cbnz	r0, 800c4b8 <__pow5mult+0x40>
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c524 <__pow5mult+0xac>)
 800c4ae:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4b2:	481d      	ldr	r0, [pc, #116]	@ (800c528 <__pow5mult+0xb0>)
 800c4b4:	f001 fb6c 	bl	800db90 <__assert_func>
 800c4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4bc:	6004      	str	r4, [r0, #0]
 800c4be:	60c4      	str	r4, [r0, #12]
 800c4c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4c8:	b94c      	cbnz	r4, 800c4de <__pow5mult+0x66>
 800c4ca:	f240 2171 	movw	r1, #625	@ 0x271
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f7ff ff12 	bl	800c2f8 <__i2b>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	07eb      	lsls	r3, r5, #31
 800c4e4:	d50a      	bpl.n	800c4fc <__pow5mult+0x84>
 800c4e6:	4631      	mov	r1, r6
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	f7ff ff1a 	bl	800c324 <__multiply>
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	4646      	mov	r6, r8
 800c4f8:	f7ff fdfe 	bl	800c0f8 <_Bfree>
 800c4fc:	106d      	asrs	r5, r5, #1
 800c4fe:	d00b      	beq.n	800c518 <__pow5mult+0xa0>
 800c500:	6820      	ldr	r0, [r4, #0]
 800c502:	b938      	cbnz	r0, 800c514 <__pow5mult+0x9c>
 800c504:	4622      	mov	r2, r4
 800c506:	4621      	mov	r1, r4
 800c508:	4638      	mov	r0, r7
 800c50a:	f7ff ff0b 	bl	800c324 <__multiply>
 800c50e:	6020      	str	r0, [r4, #0]
 800c510:	f8c0 9000 	str.w	r9, [r0]
 800c514:	4604      	mov	r4, r0
 800c516:	e7e4      	b.n	800c4e2 <__pow5mult+0x6a>
 800c518:	4630      	mov	r0, r6
 800c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51e:	bf00      	nop
 800c520:	0800ecf4 	.word	0x0800ecf4
 800c524:	0800ec1a 	.word	0x0800ec1a
 800c528:	0800ec9a 	.word	0x0800ec9a

0800c52c <__lshift>:
 800c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c530:	460c      	mov	r4, r1
 800c532:	4607      	mov	r7, r0
 800c534:	4691      	mov	r9, r2
 800c536:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	6849      	ldr	r1, [r1, #4]
 800c53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	f108 0601 	add.w	r6, r8, #1
 800c548:	42b3      	cmp	r3, r6
 800c54a:	db0b      	blt.n	800c564 <__lshift+0x38>
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff fd93 	bl	800c078 <_Balloc>
 800c552:	4605      	mov	r5, r0
 800c554:	b948      	cbnz	r0, 800c56a <__lshift+0x3e>
 800c556:	4602      	mov	r2, r0
 800c558:	4b28      	ldr	r3, [pc, #160]	@ (800c5fc <__lshift+0xd0>)
 800c55a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c55e:	4828      	ldr	r0, [pc, #160]	@ (800c600 <__lshift+0xd4>)
 800c560:	f001 fb16 	bl	800db90 <__assert_func>
 800c564:	3101      	adds	r1, #1
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	e7ee      	b.n	800c548 <__lshift+0x1c>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f100 0114 	add.w	r1, r0, #20
 800c570:	f100 0210 	add.w	r2, r0, #16
 800c574:	4618      	mov	r0, r3
 800c576:	4553      	cmp	r3, sl
 800c578:	db33      	blt.n	800c5e2 <__lshift+0xb6>
 800c57a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c57e:	f104 0314 	add.w	r3, r4, #20
 800c582:	6920      	ldr	r0, [r4, #16]
 800c584:	f019 091f 	ands.w	r9, r9, #31
 800c588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c58c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c590:	d02b      	beq.n	800c5ea <__lshift+0xbe>
 800c592:	f1c9 0e20 	rsb	lr, r9, #32
 800c596:	468a      	mov	sl, r1
 800c598:	2200      	movs	r2, #0
 800c59a:	6818      	ldr	r0, [r3, #0]
 800c59c:	fa00 f009 	lsl.w	r0, r0, r9
 800c5a0:	4310      	orrs	r0, r2
 800c5a2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5aa:	459c      	cmp	ip, r3
 800c5ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5b0:	d8f3      	bhi.n	800c59a <__lshift+0x6e>
 800c5b2:	ebac 0304 	sub.w	r3, ip, r4
 800c5b6:	f104 0015 	add.w	r0, r4, #21
 800c5ba:	3b15      	subs	r3, #21
 800c5bc:	f023 0303 	bic.w	r3, r3, #3
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	4584      	cmp	ip, r0
 800c5c4:	bf38      	it	cc
 800c5c6:	2304      	movcc	r3, #4
 800c5c8:	50ca      	str	r2, [r1, r3]
 800c5ca:	b10a      	cbz	r2, 800c5d0 <__lshift+0xa4>
 800c5cc:	f108 0602 	add.w	r6, r8, #2
 800c5d0:	3e01      	subs	r6, #1
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	612e      	str	r6, [r5, #16]
 800c5d8:	f7ff fd8e 	bl	800c0f8 <_Bfree>
 800c5dc:	4628      	mov	r0, r5
 800c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5e8:	e7c5      	b.n	800c576 <__lshift+0x4a>
 800c5ea:	3904      	subs	r1, #4
 800c5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f0:	459c      	cmp	ip, r3
 800c5f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5f6:	d8f9      	bhi.n	800c5ec <__lshift+0xc0>
 800c5f8:	e7ea      	b.n	800c5d0 <__lshift+0xa4>
 800c5fa:	bf00      	nop
 800c5fc:	0800ec89 	.word	0x0800ec89
 800c600:	0800ec9a 	.word	0x0800ec9a

0800c604 <__mcmp>:
 800c604:	4603      	mov	r3, r0
 800c606:	690a      	ldr	r2, [r1, #16]
 800c608:	6900      	ldr	r0, [r0, #16]
 800c60a:	1a80      	subs	r0, r0, r2
 800c60c:	b530      	push	{r4, r5, lr}
 800c60e:	d10e      	bne.n	800c62e <__mcmp+0x2a>
 800c610:	3314      	adds	r3, #20
 800c612:	3114      	adds	r1, #20
 800c614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c61c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c624:	4295      	cmp	r5, r2
 800c626:	d003      	beq.n	800c630 <__mcmp+0x2c>
 800c628:	d205      	bcs.n	800c636 <__mcmp+0x32>
 800c62a:	f04f 30ff 	mov.w	r0, #4294967295
 800c62e:	bd30      	pop	{r4, r5, pc}
 800c630:	42a3      	cmp	r3, r4
 800c632:	d3f3      	bcc.n	800c61c <__mcmp+0x18>
 800c634:	e7fb      	b.n	800c62e <__mcmp+0x2a>
 800c636:	2001      	movs	r0, #1
 800c638:	e7f9      	b.n	800c62e <__mcmp+0x2a>
	...

0800c63c <__mdiff>:
 800c63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	4689      	mov	r9, r1
 800c642:	4606      	mov	r6, r0
 800c644:	4611      	mov	r1, r2
 800c646:	4614      	mov	r4, r2
 800c648:	4648      	mov	r0, r9
 800c64a:	f7ff ffdb 	bl	800c604 <__mcmp>
 800c64e:	1e05      	subs	r5, r0, #0
 800c650:	d112      	bne.n	800c678 <__mdiff+0x3c>
 800c652:	4629      	mov	r1, r5
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fd0f 	bl	800c078 <_Balloc>
 800c65a:	4602      	mov	r2, r0
 800c65c:	b928      	cbnz	r0, 800c66a <__mdiff+0x2e>
 800c65e:	4b41      	ldr	r3, [pc, #260]	@ (800c764 <__mdiff+0x128>)
 800c660:	f240 2137 	movw	r1, #567	@ 0x237
 800c664:	4840      	ldr	r0, [pc, #256]	@ (800c768 <__mdiff+0x12c>)
 800c666:	f001 fa93 	bl	800db90 <__assert_func>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c670:	4610      	mov	r0, r2
 800c672:	b003      	add	sp, #12
 800c674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c678:	bfbc      	itt	lt
 800c67a:	464b      	movlt	r3, r9
 800c67c:	46a1      	movlt	r9, r4
 800c67e:	4630      	mov	r0, r6
 800c680:	bfb8      	it	lt
 800c682:	2501      	movlt	r5, #1
 800c684:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c688:	bfb4      	ite	lt
 800c68a:	461c      	movlt	r4, r3
 800c68c:	2500      	movge	r5, #0
 800c68e:	f7ff fcf3 	bl	800c078 <_Balloc>
 800c692:	4602      	mov	r2, r0
 800c694:	b918      	cbnz	r0, 800c69e <__mdiff+0x62>
 800c696:	4b33      	ldr	r3, [pc, #204]	@ (800c764 <__mdiff+0x128>)
 800c698:	f240 2145 	movw	r1, #581	@ 0x245
 800c69c:	e7e2      	b.n	800c664 <__mdiff+0x28>
 800c69e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6a2:	f104 0e14 	add.w	lr, r4, #20
 800c6a6:	6926      	ldr	r6, [r4, #16]
 800c6a8:	f100 0b14 	add.w	fp, r0, #20
 800c6ac:	60c5      	str	r5, [r0, #12]
 800c6ae:	f109 0514 	add.w	r5, r9, #20
 800c6b2:	f109 0310 	add.w	r3, r9, #16
 800c6b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6be:	46d9      	mov	r9, fp
 800c6c0:	f04f 0c00 	mov.w	ip, #0
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6cc:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6d0:	4576      	cmp	r6, lr
 800c6d2:	9301      	str	r3, [sp, #4]
 800c6d4:	fa1f f38a 	uxth.w	r3, sl
 800c6d8:	4619      	mov	r1, r3
 800c6da:	b283      	uxth	r3, r0
 800c6dc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c6e0:	eba1 0303 	sub.w	r3, r1, r3
 800c6e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6e8:	4463      	add	r3, ip
 800c6ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6f8:	f849 3b04 	str.w	r3, [r9], #4
 800c6fc:	d8e3      	bhi.n	800c6c6 <__mdiff+0x8a>
 800c6fe:	1b33      	subs	r3, r6, r4
 800c700:	3415      	adds	r4, #21
 800c702:	3b15      	subs	r3, #21
 800c704:	f023 0303 	bic.w	r3, r3, #3
 800c708:	3304      	adds	r3, #4
 800c70a:	42a6      	cmp	r6, r4
 800c70c:	bf38      	it	cc
 800c70e:	2304      	movcc	r3, #4
 800c710:	441d      	add	r5, r3
 800c712:	445b      	add	r3, fp
 800c714:	462c      	mov	r4, r5
 800c716:	461e      	mov	r6, r3
 800c718:	4544      	cmp	r4, r8
 800c71a:	d30e      	bcc.n	800c73a <__mdiff+0xfe>
 800c71c:	f108 0103 	add.w	r1, r8, #3
 800c720:	1b49      	subs	r1, r1, r5
 800c722:	3d03      	subs	r5, #3
 800c724:	f021 0103 	bic.w	r1, r1, #3
 800c728:	45a8      	cmp	r8, r5
 800c72a:	bf38      	it	cc
 800c72c:	2100      	movcc	r1, #0
 800c72e:	440b      	add	r3, r1
 800c730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c734:	b199      	cbz	r1, 800c75e <__mdiff+0x122>
 800c736:	6117      	str	r7, [r2, #16]
 800c738:	e79a      	b.n	800c670 <__mdiff+0x34>
 800c73a:	f854 1b04 	ldr.w	r1, [r4], #4
 800c73e:	46e6      	mov	lr, ip
 800c740:	fa1f fc81 	uxth.w	ip, r1
 800c744:	0c08      	lsrs	r0, r1, #16
 800c746:	4471      	add	r1, lr
 800c748:	44f4      	add	ip, lr
 800c74a:	b289      	uxth	r1, r1
 800c74c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c750:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c754:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c758:	f846 1b04 	str.w	r1, [r6], #4
 800c75c:	e7dc      	b.n	800c718 <__mdiff+0xdc>
 800c75e:	3f01      	subs	r7, #1
 800c760:	e7e6      	b.n	800c730 <__mdiff+0xf4>
 800c762:	bf00      	nop
 800c764:	0800ec89 	.word	0x0800ec89
 800c768:	0800ec9a 	.word	0x0800ec9a

0800c76c <__ulp>:
 800c76c:	b082      	sub	sp, #8
 800c76e:	4b11      	ldr	r3, [pc, #68]	@ (800c7b4 <__ulp+0x48>)
 800c770:	ed8d 0b00 	vstr	d0, [sp]
 800c774:	9a01      	ldr	r2, [sp, #4]
 800c776:	4013      	ands	r3, r2
 800c778:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dc08      	bgt.n	800c792 <__ulp+0x26>
 800c780:	425b      	negs	r3, r3
 800c782:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c786:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c78a:	da04      	bge.n	800c796 <__ulp+0x2a>
 800c78c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c790:	4113      	asrs	r3, r2
 800c792:	2200      	movs	r2, #0
 800c794:	e008      	b.n	800c7a8 <__ulp+0x3c>
 800c796:	f1a2 0314 	sub.w	r3, r2, #20
 800c79a:	2b1e      	cmp	r3, #30
 800c79c:	bfd6      	itet	le
 800c79e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7a2:	2201      	movgt	r2, #1
 800c7a4:	40da      	lsrle	r2, r3
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	ec41 0b10 	vmov	d0, r0, r1
 800c7b0:	b002      	add	sp, #8
 800c7b2:	4770      	bx	lr
 800c7b4:	7ff00000 	.word	0x7ff00000

0800c7b8 <__b2d>:
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	6906      	ldr	r6, [r0, #16]
 800c7be:	f100 0814 	add.w	r8, r0, #20
 800c7c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7c6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7ca:	1f37      	subs	r7, r6, #4
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7ff fd47 	bl	800c260 <__hi0bits>
 800c7d2:	f1c0 0320 	rsb	r3, r0, #32
 800c7d6:	280a      	cmp	r0, #10
 800c7d8:	600b      	str	r3, [r1, #0]
 800c7da:	491d      	ldr	r1, [pc, #116]	@ (800c850 <__b2d+0x98>)
 800c7dc:	dc16      	bgt.n	800c80c <__b2d+0x54>
 800c7de:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7e2:	45b8      	cmp	r8, r7
 800c7e4:	f100 0015 	add.w	r0, r0, #21
 800c7e8:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7ec:	fa02 f000 	lsl.w	r0, r2, r0
 800c7f0:	ea43 0501 	orr.w	r5, r3, r1
 800c7f4:	bf34      	ite	cc
 800c7f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7fa:	2300      	movcs	r3, #0
 800c7fc:	fa23 f30c 	lsr.w	r3, r3, ip
 800c800:	4303      	orrs	r3, r0
 800c802:	461c      	mov	r4, r3
 800c804:	ec45 4b10 	vmov	d0, r4, r5
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	45b8      	cmp	r8, r7
 800c80e:	bf3a      	itte	cc
 800c810:	f1a6 0708 	subcc.w	r7, r6, #8
 800c814:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c818:	2300      	movcs	r3, #0
 800c81a:	380b      	subs	r0, #11
 800c81c:	d014      	beq.n	800c848 <__b2d+0x90>
 800c81e:	f1c0 0120 	rsb	r1, r0, #32
 800c822:	4082      	lsls	r2, r0
 800c824:	4547      	cmp	r7, r8
 800c826:	fa23 f401 	lsr.w	r4, r3, r1
 800c82a:	fa03 f300 	lsl.w	r3, r3, r0
 800c82e:	ea42 0204 	orr.w	r2, r2, r4
 800c832:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c836:	bf8c      	ite	hi
 800c838:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c83c:	2200      	movls	r2, #0
 800c83e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c842:	40ca      	lsrs	r2, r1
 800c844:	4313      	orrs	r3, r2
 800c846:	e7dc      	b.n	800c802 <__b2d+0x4a>
 800c848:	ea42 0501 	orr.w	r5, r2, r1
 800c84c:	e7d9      	b.n	800c802 <__b2d+0x4a>
 800c84e:	bf00      	nop
 800c850:	3ff00000 	.word	0x3ff00000

0800c854 <__d2b>:
 800c854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c858:	460f      	mov	r7, r1
 800c85a:	2101      	movs	r1, #1
 800c85c:	4616      	mov	r6, r2
 800c85e:	ec59 8b10 	vmov	r8, r9, d0
 800c862:	f7ff fc09 	bl	800c078 <_Balloc>
 800c866:	4604      	mov	r4, r0
 800c868:	b930      	cbnz	r0, 800c878 <__d2b+0x24>
 800c86a:	4602      	mov	r2, r0
 800c86c:	4b23      	ldr	r3, [pc, #140]	@ (800c8fc <__d2b+0xa8>)
 800c86e:	f240 310f 	movw	r1, #783	@ 0x30f
 800c872:	4823      	ldr	r0, [pc, #140]	@ (800c900 <__d2b+0xac>)
 800c874:	f001 f98c 	bl	800db90 <__assert_func>
 800c878:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c87c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c880:	b10d      	cbz	r5, 800c886 <__d2b+0x32>
 800c882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	f1b8 0300 	subs.w	r3, r8, #0
 800c88c:	d023      	beq.n	800c8d6 <__d2b+0x82>
 800c88e:	4668      	mov	r0, sp
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	f7ff fd04 	bl	800c29e <__lo0bits>
 800c896:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c89a:	b1d0      	cbz	r0, 800c8d2 <__d2b+0x7e>
 800c89c:	f1c0 0320 	rsb	r3, r0, #32
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	40c2      	lsrs	r2, r0
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	9201      	str	r2, [sp, #4]
 800c8aa:	6163      	str	r3, [r4, #20]
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	61a3      	str	r3, [r4, #24]
 800c8b2:	bf0c      	ite	eq
 800c8b4:	2201      	moveq	r2, #1
 800c8b6:	2202      	movne	r2, #2
 800c8b8:	6122      	str	r2, [r4, #16]
 800c8ba:	b1a5      	cbz	r5, 800c8e6 <__d2b+0x92>
 800c8bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8c0:	4405      	add	r5, r0
 800c8c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8c6:	603d      	str	r5, [r7, #0]
 800c8c8:	6030      	str	r0, [r6, #0]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	b003      	add	sp, #12
 800c8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8d2:	6161      	str	r1, [r4, #20]
 800c8d4:	e7ea      	b.n	800c8ac <__d2b+0x58>
 800c8d6:	a801      	add	r0, sp, #4
 800c8d8:	f7ff fce1 	bl	800c29e <__lo0bits>
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	3020      	adds	r0, #32
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	6163      	str	r3, [r4, #20]
 800c8e4:	e7e8      	b.n	800c8b8 <__d2b+0x64>
 800c8e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8ee:	6038      	str	r0, [r7, #0]
 800c8f0:	6918      	ldr	r0, [r3, #16]
 800c8f2:	f7ff fcb5 	bl	800c260 <__hi0bits>
 800c8f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8fa:	e7e5      	b.n	800c8c8 <__d2b+0x74>
 800c8fc:	0800ec89 	.word	0x0800ec89
 800c900:	0800ec9a 	.word	0x0800ec9a

0800c904 <__ratio>:
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	b085      	sub	sp, #20
 800c90a:	e9cd 1000 	strd	r1, r0, [sp]
 800c90e:	a902      	add	r1, sp, #8
 800c910:	f7ff ff52 	bl	800c7b8 <__b2d>
 800c914:	a903      	add	r1, sp, #12
 800c916:	9800      	ldr	r0, [sp, #0]
 800c918:	ec55 4b10 	vmov	r4, r5, d0
 800c91c:	f7ff ff4c 	bl	800c7b8 <__b2d>
 800c920:	9b01      	ldr	r3, [sp, #4]
 800c922:	462f      	mov	r7, r5
 800c924:	4620      	mov	r0, r4
 800c926:	6919      	ldr	r1, [r3, #16]
 800c928:	9b00      	ldr	r3, [sp, #0]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	1ac9      	subs	r1, r1, r3
 800c92e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c932:	ec5b ab10 	vmov	sl, fp, d0
 800c936:	1a9b      	subs	r3, r3, r2
 800c938:	46d9      	mov	r9, fp
 800c93a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfcd      	iteet	gt
 800c942:	462a      	movgt	r2, r5
 800c944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c948:	465a      	movle	r2, fp
 800c94a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c94e:	bfd8      	it	le
 800c950:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c954:	4652      	mov	r2, sl
 800c956:	4639      	mov	r1, r7
 800c958:	464b      	mov	r3, r9
 800c95a:	f7f3 ff8b 	bl	8000874 <__aeabi_ddiv>
 800c95e:	ec41 0b10 	vmov	d0, r0, r1
 800c962:	b005      	add	sp, #20
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c968 <__copybits>:
 800c968:	3901      	subs	r1, #1
 800c96a:	f102 0314 	add.w	r3, r2, #20
 800c96e:	1149      	asrs	r1, r1, #5
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	3101      	adds	r1, #1
 800c974:	6914      	ldr	r4, [r2, #16]
 800c976:	1f05      	subs	r5, r0, #4
 800c978:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c97c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c980:	42a3      	cmp	r3, r4
 800c982:	d30c      	bcc.n	800c99e <__copybits+0x36>
 800c984:	1aa3      	subs	r3, r4, r2
 800c986:	3211      	adds	r2, #17
 800c988:	3b11      	subs	r3, #17
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	42a2      	cmp	r2, r4
 800c990:	bf88      	it	hi
 800c992:	2300      	movhi	r3, #0
 800c994:	4418      	add	r0, r3
 800c996:	2300      	movs	r3, #0
 800c998:	4288      	cmp	r0, r1
 800c99a:	d305      	bcc.n	800c9a8 <__copybits+0x40>
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
 800c99e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9a2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9a6:	e7eb      	b.n	800c980 <__copybits+0x18>
 800c9a8:	f840 3b04 	str.w	r3, [r0], #4
 800c9ac:	e7f4      	b.n	800c998 <__copybits+0x30>

0800c9ae <__any_on>:
 800c9ae:	f100 0214 	add.w	r2, r0, #20
 800c9b2:	114b      	asrs	r3, r1, #5
 800c9b4:	6900      	ldr	r0, [r0, #16]
 800c9b6:	4298      	cmp	r0, r3
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	db11      	blt.n	800c9e0 <__any_on+0x32>
 800c9bc:	dd0a      	ble.n	800c9d4 <__any_on+0x26>
 800c9be:	f011 011f 	ands.w	r1, r1, #31
 800c9c2:	d007      	beq.n	800c9d4 <__any_on+0x26>
 800c9c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9c8:	fa24 f001 	lsr.w	r0, r4, r1
 800c9cc:	fa00 f101 	lsl.w	r1, r0, r1
 800c9d0:	428c      	cmp	r4, r1
 800c9d2:	d10b      	bne.n	800c9ec <__any_on+0x3e>
 800c9d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d803      	bhi.n	800c9e4 <__any_on+0x36>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	bd10      	pop	{r4, pc}
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	e7f7      	b.n	800c9d4 <__any_on+0x26>
 800c9e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	d0f5      	beq.n	800c9d8 <__any_on+0x2a>
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	e7f6      	b.n	800c9de <__any_on+0x30>

0800c9f0 <sulp>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	4616      	mov	r6, r2
 800c9f8:	ec45 4b10 	vmov	d0, r4, r5
 800c9fc:	f7ff feb6 	bl	800c76c <__ulp>
 800ca00:	ec51 0b10 	vmov	r0, r1, d0
 800ca04:	b17e      	cbz	r6, 800ca26 <sulp+0x36>
 800ca06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca0a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	dd09      	ble.n	800ca26 <sulp+0x36>
 800ca12:	051b      	lsls	r3, r3, #20
 800ca14:	2400      	movs	r4, #0
 800ca16:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca20:	462b      	mov	r3, r5
 800ca22:	f7f3 fdfd 	bl	8000620 <__aeabi_dmul>
 800ca26:	ec41 0b10 	vmov	d0, r0, r1
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	0000      	movs	r0, r0
	...

0800ca30 <_strtod_l>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	b09f      	sub	sp, #124	@ 0x7c
 800ca36:	460c      	mov	r4, r1
 800ca38:	f04f 0a00 	mov.w	sl, #0
 800ca3c:	f04f 0b00 	mov.w	fp, #0
 800ca40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca42:	2200      	movs	r2, #0
 800ca44:	9005      	str	r0, [sp, #20]
 800ca46:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca48:	460a      	mov	r2, r1
 800ca4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca4c:	7811      	ldrb	r1, [r2, #0]
 800ca4e:	292b      	cmp	r1, #43	@ 0x2b
 800ca50:	d04a      	beq.n	800cae8 <_strtod_l+0xb8>
 800ca52:	d838      	bhi.n	800cac6 <_strtod_l+0x96>
 800ca54:	290d      	cmp	r1, #13
 800ca56:	d832      	bhi.n	800cabe <_strtod_l+0x8e>
 800ca58:	2908      	cmp	r1, #8
 800ca5a:	d832      	bhi.n	800cac2 <_strtod_l+0x92>
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d03b      	beq.n	800cad8 <_strtod_l+0xa8>
 800ca60:	2200      	movs	r2, #0
 800ca62:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca66:	782a      	ldrb	r2, [r5, #0]
 800ca68:	2a30      	cmp	r2, #48	@ 0x30
 800ca6a:	f040 80b3 	bne.w	800cbd4 <_strtod_l+0x1a4>
 800ca6e:	786a      	ldrb	r2, [r5, #1]
 800ca70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca74:	2a58      	cmp	r2, #88	@ 0x58
 800ca76:	d16e      	bne.n	800cb56 <_strtod_l+0x126>
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	a919      	add	r1, sp, #100	@ 0x64
 800ca7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca7e:	4a90      	ldr	r2, [pc, #576]	@ (800ccc0 <_strtod_l+0x290>)
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca84:	9805      	ldr	r0, [sp, #20]
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca8a:	f001 f919 	bl	800dcc0 <__gethex>
 800ca8e:	f010 060f 	ands.w	r6, r0, #15
 800ca92:	4604      	mov	r4, r0
 800ca94:	d005      	beq.n	800caa2 <_strtod_l+0x72>
 800ca96:	2e06      	cmp	r6, #6
 800ca98:	d128      	bne.n	800caec <_strtod_l+0xbc>
 800ca9a:	3501      	adds	r5, #1
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800caa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f040 858e 	bne.w	800d5c6 <_strtod_l+0xb96>
 800caaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caac:	b1cb      	cbz	r3, 800cae2 <_strtod_l+0xb2>
 800caae:	4652      	mov	r2, sl
 800cab0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cab4:	ec43 2b10 	vmov	d0, r2, r3
 800cab8:	b01f      	add	sp, #124	@ 0x7c
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	2920      	cmp	r1, #32
 800cac0:	d1ce      	bne.n	800ca60 <_strtod_l+0x30>
 800cac2:	3201      	adds	r2, #1
 800cac4:	e7c1      	b.n	800ca4a <_strtod_l+0x1a>
 800cac6:	292d      	cmp	r1, #45	@ 0x2d
 800cac8:	d1ca      	bne.n	800ca60 <_strtod_l+0x30>
 800caca:	2101      	movs	r1, #1
 800cacc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cace:	1c51      	adds	r1, r2, #1
 800cad0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cad2:	7852      	ldrb	r2, [r2, #1]
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	d1c5      	bne.n	800ca64 <_strtod_l+0x34>
 800cad8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cada:	9419      	str	r4, [sp, #100]	@ 0x64
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8570 	bne.w	800d5c2 <_strtod_l+0xb92>
 800cae2:	4652      	mov	r2, sl
 800cae4:	465b      	mov	r3, fp
 800cae6:	e7e5      	b.n	800cab4 <_strtod_l+0x84>
 800cae8:	2100      	movs	r1, #0
 800caea:	e7ef      	b.n	800cacc <_strtod_l+0x9c>
 800caec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800caee:	b13a      	cbz	r2, 800cb00 <_strtod_l+0xd0>
 800caf0:	2135      	movs	r1, #53	@ 0x35
 800caf2:	a81c      	add	r0, sp, #112	@ 0x70
 800caf4:	f7ff ff38 	bl	800c968 <__copybits>
 800caf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cafa:	9805      	ldr	r0, [sp, #20]
 800cafc:	f7ff fafc 	bl	800c0f8 <_Bfree>
 800cb00:	3e01      	subs	r6, #1
 800cb02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb04:	2e04      	cmp	r6, #4
 800cb06:	d806      	bhi.n	800cb16 <_strtod_l+0xe6>
 800cb08:	e8df f006 	tbb	[pc, r6]
 800cb0c:	201d0314 	.word	0x201d0314
 800cb10:	14          	.byte	0x14
 800cb11:	00          	.byte	0x00
 800cb12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb16:	05e1      	lsls	r1, r4, #23
 800cb18:	bf48      	it	mi
 800cb1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb22:	0d1b      	lsrs	r3, r3, #20
 800cb24:	051b      	lsls	r3, r3, #20
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1bb      	bne.n	800caa2 <_strtod_l+0x72>
 800cb2a:	f7fe fb03 	bl	800b134 <__errno>
 800cb2e:	2322      	movs	r3, #34	@ 0x22
 800cb30:	6003      	str	r3, [r0, #0]
 800cb32:	e7b6      	b.n	800caa2 <_strtod_l+0x72>
 800cb34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb44:	e7e7      	b.n	800cb16 <_strtod_l+0xe6>
 800cb46:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ccc8 <_strtod_l+0x298>
 800cb4a:	e7e4      	b.n	800cb16 <_strtod_l+0xe6>
 800cb4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb50:	f04f 3aff 	mov.w	sl, #4294967295
 800cb54:	e7df      	b.n	800cb16 <_strtod_l+0xe6>
 800cb56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	2b30      	cmp	r3, #48	@ 0x30
 800cb60:	d0f9      	beq.n	800cb56 <_strtod_l+0x126>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d09d      	beq.n	800caa2 <_strtod_l+0x72>
 800cb66:	2301      	movs	r3, #1
 800cb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6a:	220a      	movs	r2, #10
 800cb6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb70:	2300      	movs	r3, #0
 800cb72:	461f      	mov	r7, r3
 800cb74:	9308      	str	r3, [sp, #32]
 800cb76:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb7a:	7805      	ldrb	r5, [r0, #0]
 800cb7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb80:	b2d9      	uxtb	r1, r3
 800cb82:	2909      	cmp	r1, #9
 800cb84:	d928      	bls.n	800cbd8 <_strtod_l+0x1a8>
 800cb86:	2201      	movs	r2, #1
 800cb88:	494e      	ldr	r1, [pc, #312]	@ (800ccc4 <_strtod_l+0x294>)
 800cb8a:	f000 ffd5 	bl	800db38 <strncmp>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d033      	beq.n	800cbfa <_strtod_l+0x1ca>
 800cb92:	2000      	movs	r0, #0
 800cb94:	462a      	mov	r2, r5
 800cb96:	463d      	mov	r5, r7
 800cb98:	4681      	mov	r9, r0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2a65      	cmp	r2, #101	@ 0x65
 800cb9e:	d001      	beq.n	800cba4 <_strtod_l+0x174>
 800cba0:	2a45      	cmp	r2, #69	@ 0x45
 800cba2:	d114      	bne.n	800cbce <_strtod_l+0x19e>
 800cba4:	b91d      	cbnz	r5, 800cbae <_strtod_l+0x17e>
 800cba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cba8:	4302      	orrs	r2, r0
 800cbaa:	d095      	beq.n	800cad8 <_strtod_l+0xa8>
 800cbac:	2500      	movs	r5, #0
 800cbae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cbb0:	1c62      	adds	r2, r4, #1
 800cbb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbb4:	7862      	ldrb	r2, [r4, #1]
 800cbb6:	2a2b      	cmp	r2, #43	@ 0x2b
 800cbb8:	d078      	beq.n	800ccac <_strtod_l+0x27c>
 800cbba:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbbc:	d07c      	beq.n	800ccb8 <_strtod_l+0x288>
 800cbbe:	f04f 0c00 	mov.w	ip, #0
 800cbc2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbc6:	2909      	cmp	r1, #9
 800cbc8:	f240 8084 	bls.w	800ccd4 <_strtod_l+0x2a4>
 800cbcc:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbce:	f04f 0800 	mov.w	r8, #0
 800cbd2:	e0a4      	b.n	800cd1e <_strtod_l+0x2ee>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e7c7      	b.n	800cb68 <_strtod_l+0x138>
 800cbd8:	2f08      	cmp	r7, #8
 800cbda:	f100 0001 	add.w	r0, r0, #1
 800cbde:	f107 0701 	add.w	r7, r7, #1
 800cbe2:	bfd5      	itete	le
 800cbe4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cbe6:	9908      	ldrgt	r1, [sp, #32]
 800cbe8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cbf0:	bfd4      	ite	le
 800cbf2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cbf4:	9308      	strgt	r3, [sp, #32]
 800cbf6:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbf8:	e7be      	b.n	800cb78 <_strtod_l+0x148>
 800cbfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc00:	785a      	ldrb	r2, [r3, #1]
 800cc02:	b37f      	cbz	r7, 800cc64 <_strtod_l+0x234>
 800cc04:	4681      	mov	r9, r0
 800cc06:	463d      	mov	r5, r7
 800cc08:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d912      	bls.n	800cc36 <_strtod_l+0x206>
 800cc10:	2301      	movs	r3, #1
 800cc12:	e7c3      	b.n	800cb9c <_strtod_l+0x16c>
 800cc14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc16:	3001      	adds	r0, #1
 800cc18:	1c5a      	adds	r2, r3, #1
 800cc1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc1c:	785a      	ldrb	r2, [r3, #1]
 800cc1e:	2a30      	cmp	r2, #48	@ 0x30
 800cc20:	d0f8      	beq.n	800cc14 <_strtod_l+0x1e4>
 800cc22:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	f200 84d2 	bhi.w	800d5d0 <_strtod_l+0xba0>
 800cc2c:	4681      	mov	r9, r0
 800cc2e:	2000      	movs	r0, #0
 800cc30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc32:	4605      	mov	r5, r0
 800cc34:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc36:	3a30      	subs	r2, #48	@ 0x30
 800cc38:	f100 0301 	add.w	r3, r0, #1
 800cc3c:	d02a      	beq.n	800cc94 <_strtod_l+0x264>
 800cc3e:	4499      	add	r9, r3
 800cc40:	eb00 0c05 	add.w	ip, r0, r5
 800cc44:	462b      	mov	r3, r5
 800cc46:	210a      	movs	r1, #10
 800cc48:	4563      	cmp	r3, ip
 800cc4a:	d10d      	bne.n	800cc68 <_strtod_l+0x238>
 800cc4c:	1c69      	adds	r1, r5, #1
 800cc4e:	4401      	add	r1, r0
 800cc50:	4428      	add	r0, r5
 800cc52:	2808      	cmp	r0, #8
 800cc54:	dc16      	bgt.n	800cc84 <_strtod_l+0x254>
 800cc56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc58:	230a      	movs	r3, #10
 800cc5a:	fb03 2300 	mla	r3, r3, r0, r2
 800cc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc60:	2300      	movs	r3, #0
 800cc62:	e018      	b.n	800cc96 <_strtod_l+0x266>
 800cc64:	4638      	mov	r0, r7
 800cc66:	e7da      	b.n	800cc1e <_strtod_l+0x1ee>
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	f103 0301 	add.w	r3, r3, #1
 800cc6e:	dc03      	bgt.n	800cc78 <_strtod_l+0x248>
 800cc70:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc72:	434e      	muls	r6, r1
 800cc74:	960a      	str	r6, [sp, #40]	@ 0x28
 800cc76:	e7e7      	b.n	800cc48 <_strtod_l+0x218>
 800cc78:	2b10      	cmp	r3, #16
 800cc7a:	bfde      	ittt	le
 800cc7c:	9e08      	ldrle	r6, [sp, #32]
 800cc7e:	434e      	mulle	r6, r1
 800cc80:	9608      	strle	r6, [sp, #32]
 800cc82:	e7e1      	b.n	800cc48 <_strtod_l+0x218>
 800cc84:	280f      	cmp	r0, #15
 800cc86:	dceb      	bgt.n	800cc60 <_strtod_l+0x230>
 800cc88:	9808      	ldr	r0, [sp, #32]
 800cc8a:	230a      	movs	r3, #10
 800cc8c:	fb03 2300 	mla	r3, r3, r0, r2
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	e7e5      	b.n	800cc60 <_strtod_l+0x230>
 800cc94:	4629      	mov	r1, r5
 800cc96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc98:	460d      	mov	r5, r1
 800cc9a:	1c50      	adds	r0, r2, #1
 800cc9c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc9e:	4618      	mov	r0, r3
 800cca0:	7852      	ldrb	r2, [r2, #1]
 800cca2:	e7b1      	b.n	800cc08 <_strtod_l+0x1d8>
 800cca4:	f04f 0900 	mov.w	r9, #0
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e77c      	b.n	800cba6 <_strtod_l+0x176>
 800ccac:	f04f 0c00 	mov.w	ip, #0
 800ccb0:	1ca2      	adds	r2, r4, #2
 800ccb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccb4:	78a2      	ldrb	r2, [r4, #2]
 800ccb6:	e784      	b.n	800cbc2 <_strtod_l+0x192>
 800ccb8:	f04f 0c01 	mov.w	ip, #1
 800ccbc:	e7f8      	b.n	800ccb0 <_strtod_l+0x280>
 800ccbe:	bf00      	nop
 800ccc0:	0800ee08 	.word	0x0800ee08
 800ccc4:	0800edf0 	.word	0x0800edf0
 800ccc8:	7ff00000 	.word	0x7ff00000
 800cccc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccce:	1c51      	adds	r1, r2, #1
 800ccd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccd2:	7852      	ldrb	r2, [r2, #1]
 800ccd4:	2a30      	cmp	r2, #48	@ 0x30
 800ccd6:	d0f9      	beq.n	800cccc <_strtod_l+0x29c>
 800ccd8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ccdc:	2908      	cmp	r1, #8
 800ccde:	f63f af76 	bhi.w	800cbce <_strtod_l+0x19e>
 800cce2:	3a30      	subs	r2, #48	@ 0x30
 800cce4:	f04f 080a 	mov.w	r8, #10
 800cce8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ccee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccf0:	1c56      	adds	r6, r2, #1
 800ccf2:	9619      	str	r6, [sp, #100]	@ 0x64
 800ccf4:	7852      	ldrb	r2, [r2, #1]
 800ccf6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ccfa:	f1be 0f09 	cmp.w	lr, #9
 800ccfe:	d939      	bls.n	800cd74 <_strtod_l+0x344>
 800cd00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd06:	1a76      	subs	r6, r6, r1
 800cd08:	2e08      	cmp	r6, #8
 800cd0a:	dc03      	bgt.n	800cd14 <_strtod_l+0x2e4>
 800cd0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd0e:	4588      	cmp	r8, r1
 800cd10:	bfa8      	it	ge
 800cd12:	4688      	movge	r8, r1
 800cd14:	f1bc 0f00 	cmp.w	ip, #0
 800cd18:	d001      	beq.n	800cd1e <_strtod_l+0x2ee>
 800cd1a:	f1c8 0800 	rsb	r8, r8, #0
 800cd1e:	2d00      	cmp	r5, #0
 800cd20:	d14e      	bne.n	800cdc0 <_strtod_l+0x390>
 800cd22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd24:	4308      	orrs	r0, r1
 800cd26:	f47f aebc 	bne.w	800caa2 <_strtod_l+0x72>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f47f aed4 	bne.w	800cad8 <_strtod_l+0xa8>
 800cd30:	2a69      	cmp	r2, #105	@ 0x69
 800cd32:	d028      	beq.n	800cd86 <_strtod_l+0x356>
 800cd34:	dc25      	bgt.n	800cd82 <_strtod_l+0x352>
 800cd36:	2a49      	cmp	r2, #73	@ 0x49
 800cd38:	d025      	beq.n	800cd86 <_strtod_l+0x356>
 800cd3a:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd3c:	f47f aecc 	bne.w	800cad8 <_strtod_l+0xa8>
 800cd40:	499b      	ldr	r1, [pc, #620]	@ (800cfb0 <_strtod_l+0x580>)
 800cd42:	a819      	add	r0, sp, #100	@ 0x64
 800cd44:	f001 f9dc 	bl	800e100 <__match>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f43f aec5 	beq.w	800cad8 <_strtod_l+0xa8>
 800cd4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b28      	cmp	r3, #40	@ 0x28
 800cd54:	d12e      	bne.n	800cdb4 <_strtod_l+0x384>
 800cd56:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd58:	4996      	ldr	r1, [pc, #600]	@ (800cfb4 <_strtod_l+0x584>)
 800cd5a:	a819      	add	r0, sp, #100	@ 0x64
 800cd5c:	f001 f9e4 	bl	800e128 <__hexnan>
 800cd60:	2805      	cmp	r0, #5
 800cd62:	d127      	bne.n	800cdb4 <_strtod_l+0x384>
 800cd64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd66:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd6a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd6e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd72:	e696      	b.n	800caa2 <_strtod_l+0x72>
 800cd74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd76:	fb08 2101 	mla	r1, r8, r1, r2
 800cd7a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd80:	e7b5      	b.n	800ccee <_strtod_l+0x2be>
 800cd82:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd84:	e7da      	b.n	800cd3c <_strtod_l+0x30c>
 800cd86:	498c      	ldr	r1, [pc, #560]	@ (800cfb8 <_strtod_l+0x588>)
 800cd88:	a819      	add	r0, sp, #100	@ 0x64
 800cd8a:	f001 f9b9 	bl	800e100 <__match>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	f43f aea2 	beq.w	800cad8 <_strtod_l+0xa8>
 800cd94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd96:	a819      	add	r0, sp, #100	@ 0x64
 800cd98:	4988      	ldr	r1, [pc, #544]	@ (800cfbc <_strtod_l+0x58c>)
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd9e:	f001 f9af 	bl	800e100 <__match>
 800cda2:	b910      	cbnz	r0, 800cdaa <_strtod_l+0x37a>
 800cda4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cda6:	3301      	adds	r3, #1
 800cda8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdaa:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cfcc <_strtod_l+0x59c>
 800cdae:	f04f 0a00 	mov.w	sl, #0
 800cdb2:	e676      	b.n	800caa2 <_strtod_l+0x72>
 800cdb4:	4882      	ldr	r0, [pc, #520]	@ (800cfc0 <_strtod_l+0x590>)
 800cdb6:	f000 fee3 	bl	800db80 <nan>
 800cdba:	ec5b ab10 	vmov	sl, fp, d0
 800cdbe:	e670      	b.n	800caa2 <_strtod_l+0x72>
 800cdc0:	eba8 0309 	sub.w	r3, r8, r9
 800cdc4:	2f00      	cmp	r7, #0
 800cdc6:	bf08      	it	eq
 800cdc8:	462f      	moveq	r7, r5
 800cdca:	2d10      	cmp	r5, #16
 800cdcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdce:	462c      	mov	r4, r5
 800cdd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdd2:	bfa8      	it	ge
 800cdd4:	2410      	movge	r4, #16
 800cdd6:	f7f3 fba9 	bl	800052c <__aeabi_ui2d>
 800cdda:	2d09      	cmp	r5, #9
 800cddc:	4682      	mov	sl, r0
 800cdde:	468b      	mov	fp, r1
 800cde0:	dc13      	bgt.n	800ce0a <_strtod_l+0x3da>
 800cde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f43f ae5c 	beq.w	800caa2 <_strtod_l+0x72>
 800cdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdec:	dd78      	ble.n	800cee0 <_strtod_l+0x4b0>
 800cdee:	2b16      	cmp	r3, #22
 800cdf0:	dc5f      	bgt.n	800ceb2 <_strtod_l+0x482>
 800cdf2:	4974      	ldr	r1, [pc, #464]	@ (800cfc4 <_strtod_l+0x594>)
 800cdf4:	4652      	mov	r2, sl
 800cdf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce00:	f7f3 fc0e 	bl	8000620 <__aeabi_dmul>
 800ce04:	4682      	mov	sl, r0
 800ce06:	468b      	mov	fp, r1
 800ce08:	e64b      	b.n	800caa2 <_strtod_l+0x72>
 800ce0a:	4b6e      	ldr	r3, [pc, #440]	@ (800cfc4 <_strtod_l+0x594>)
 800ce0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce14:	f7f3 fc04 	bl	8000620 <__aeabi_dmul>
 800ce18:	4682      	mov	sl, r0
 800ce1a:	468b      	mov	fp, r1
 800ce1c:	9808      	ldr	r0, [sp, #32]
 800ce1e:	f7f3 fb85 	bl	800052c <__aeabi_ui2d>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4650      	mov	r0, sl
 800ce28:	4659      	mov	r1, fp
 800ce2a:	f7f3 fa43 	bl	80002b4 <__adddf3>
 800ce2e:	2d0f      	cmp	r5, #15
 800ce30:	4682      	mov	sl, r0
 800ce32:	468b      	mov	fp, r1
 800ce34:	ddd5      	ble.n	800cde2 <_strtod_l+0x3b2>
 800ce36:	1b2c      	subs	r4, r5, r4
 800ce38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce3a:	441c      	add	r4, r3
 800ce3c:	2c00      	cmp	r4, #0
 800ce3e:	f340 8096 	ble.w	800cf6e <_strtod_l+0x53e>
 800ce42:	f014 030f 	ands.w	r3, r4, #15
 800ce46:	d00a      	beq.n	800ce5e <_strtod_l+0x42e>
 800ce48:	495e      	ldr	r1, [pc, #376]	@ (800cfc4 <_strtod_l+0x594>)
 800ce4a:	4652      	mov	r2, sl
 800ce4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce50:	465b      	mov	r3, fp
 800ce52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce56:	f7f3 fbe3 	bl	8000620 <__aeabi_dmul>
 800ce5a:	4682      	mov	sl, r0
 800ce5c:	468b      	mov	fp, r1
 800ce5e:	f034 040f 	bics.w	r4, r4, #15
 800ce62:	d073      	beq.n	800cf4c <_strtod_l+0x51c>
 800ce64:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce68:	dd48      	ble.n	800cefc <_strtod_l+0x4cc>
 800ce6a:	2400      	movs	r4, #0
 800ce6c:	46a0      	mov	r8, r4
 800ce6e:	46a1      	mov	r9, r4
 800ce70:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce72:	2322      	movs	r3, #34	@ 0x22
 800ce74:	9a05      	ldr	r2, [sp, #20]
 800ce76:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cfcc <_strtod_l+0x59c>
 800ce7a:	f04f 0a00 	mov.w	sl, #0
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f43f ae0d 	beq.w	800caa2 <_strtod_l+0x72>
 800ce88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce8a:	9805      	ldr	r0, [sp, #20]
 800ce8c:	f7ff f934 	bl	800c0f8 <_Bfree>
 800ce90:	4649      	mov	r1, r9
 800ce92:	9805      	ldr	r0, [sp, #20]
 800ce94:	f7ff f930 	bl	800c0f8 <_Bfree>
 800ce98:	4641      	mov	r1, r8
 800ce9a:	9805      	ldr	r0, [sp, #20]
 800ce9c:	f7ff f92c 	bl	800c0f8 <_Bfree>
 800cea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cea2:	9805      	ldr	r0, [sp, #20]
 800cea4:	f7ff f928 	bl	800c0f8 <_Bfree>
 800cea8:	4621      	mov	r1, r4
 800ceaa:	9805      	ldr	r0, [sp, #20]
 800ceac:	f7ff f924 	bl	800c0f8 <_Bfree>
 800ceb0:	e5f7      	b.n	800caa2 <_strtod_l+0x72>
 800ceb2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ceb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	dbbc      	blt.n	800ce36 <_strtod_l+0x406>
 800cebc:	f1c5 050f 	rsb	r5, r5, #15
 800cec0:	4c40      	ldr	r4, [pc, #256]	@ (800cfc4 <_strtod_l+0x594>)
 800cec2:	4652      	mov	r2, sl
 800cec4:	465b      	mov	r3, fp
 800cec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cece:	f7f3 fba7 	bl	8000620 <__aeabi_dmul>
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	1b5d      	subs	r5, r3, r5
 800ced6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ceda:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cede:	e78f      	b.n	800ce00 <_strtod_l+0x3d0>
 800cee0:	3316      	adds	r3, #22
 800cee2:	dba8      	blt.n	800ce36 <_strtod_l+0x406>
 800cee4:	eba9 0808 	sub.w	r8, r9, r8
 800cee8:	4b36      	ldr	r3, [pc, #216]	@ (800cfc4 <_strtod_l+0x594>)
 800ceea:	4650      	mov	r0, sl
 800ceec:	4659      	mov	r1, fp
 800ceee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cef2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cef6:	f7f3 fcbd 	bl	8000874 <__aeabi_ddiv>
 800cefa:	e783      	b.n	800ce04 <_strtod_l+0x3d4>
 800cefc:	4b32      	ldr	r3, [pc, #200]	@ (800cfc8 <_strtod_l+0x598>)
 800cefe:	1124      	asrs	r4, r4, #4
 800cf00:	4650      	mov	r0, sl
 800cf02:	4659      	mov	r1, fp
 800cf04:	9308      	str	r3, [sp, #32]
 800cf06:	2300      	movs	r3, #0
 800cf08:	461e      	mov	r6, r3
 800cf0a:	2c01      	cmp	r4, #1
 800cf0c:	dc21      	bgt.n	800cf52 <_strtod_l+0x522>
 800cf0e:	b10b      	cbz	r3, 800cf14 <_strtod_l+0x4e4>
 800cf10:	4682      	mov	sl, r0
 800cf12:	468b      	mov	fp, r1
 800cf14:	492c      	ldr	r1, [pc, #176]	@ (800cfc8 <_strtod_l+0x598>)
 800cf16:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf20:	465b      	mov	r3, fp
 800cf22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf26:	f7f3 fb7b 	bl	8000620 <__aeabi_dmul>
 800cf2a:	4b28      	ldr	r3, [pc, #160]	@ (800cfcc <_strtod_l+0x59c>)
 800cf2c:	460a      	mov	r2, r1
 800cf2e:	4682      	mov	sl, r0
 800cf30:	400b      	ands	r3, r1
 800cf32:	4927      	ldr	r1, [pc, #156]	@ (800cfd0 <_strtod_l+0x5a0>)
 800cf34:	428b      	cmp	r3, r1
 800cf36:	d898      	bhi.n	800ce6a <_strtod_l+0x43a>
 800cf38:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	bf86      	itte	hi
 800cf40:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cfd4 <_strtod_l+0x5a4>
 800cf44:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf48:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	9308      	str	r3, [sp, #32]
 800cf50:	e07a      	b.n	800d048 <_strtod_l+0x618>
 800cf52:	07e2      	lsls	r2, r4, #31
 800cf54:	d505      	bpl.n	800cf62 <_strtod_l+0x532>
 800cf56:	9b08      	ldr	r3, [sp, #32]
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 fb60 	bl	8000620 <__aeabi_dmul>
 800cf60:	2301      	movs	r3, #1
 800cf62:	9a08      	ldr	r2, [sp, #32]
 800cf64:	3601      	adds	r6, #1
 800cf66:	1064      	asrs	r4, r4, #1
 800cf68:	3208      	adds	r2, #8
 800cf6a:	9208      	str	r2, [sp, #32]
 800cf6c:	e7cd      	b.n	800cf0a <_strtod_l+0x4da>
 800cf6e:	d0ed      	beq.n	800cf4c <_strtod_l+0x51c>
 800cf70:	4264      	negs	r4, r4
 800cf72:	f014 020f 	ands.w	r2, r4, #15
 800cf76:	d00a      	beq.n	800cf8e <_strtod_l+0x55e>
 800cf78:	4b12      	ldr	r3, [pc, #72]	@ (800cfc4 <_strtod_l+0x594>)
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	4659      	mov	r1, fp
 800cf7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	f7f3 fc75 	bl	8000874 <__aeabi_ddiv>
 800cf8a:	4682      	mov	sl, r0
 800cf8c:	468b      	mov	fp, r1
 800cf8e:	1124      	asrs	r4, r4, #4
 800cf90:	d0dc      	beq.n	800cf4c <_strtod_l+0x51c>
 800cf92:	2c1f      	cmp	r4, #31
 800cf94:	dd20      	ble.n	800cfd8 <_strtod_l+0x5a8>
 800cf96:	2400      	movs	r4, #0
 800cf98:	46a0      	mov	r8, r4
 800cf9a:	46a1      	mov	r9, r4
 800cf9c:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf9e:	2322      	movs	r3, #34	@ 0x22
 800cfa0:	9a05      	ldr	r2, [sp, #20]
 800cfa2:	f04f 0a00 	mov.w	sl, #0
 800cfa6:	f04f 0b00 	mov.w	fp, #0
 800cfaa:	6013      	str	r3, [r2, #0]
 800cfac:	e768      	b.n	800ce80 <_strtod_l+0x450>
 800cfae:	bf00      	nop
 800cfb0:	0800ebe1 	.word	0x0800ebe1
 800cfb4:	0800edf4 	.word	0x0800edf4
 800cfb8:	0800ebd9 	.word	0x0800ebd9
 800cfbc:	0800ec10 	.word	0x0800ec10
 800cfc0:	0800ef9d 	.word	0x0800ef9d
 800cfc4:	0800ed28 	.word	0x0800ed28
 800cfc8:	0800ed00 	.word	0x0800ed00
 800cfcc:	7ff00000 	.word	0x7ff00000
 800cfd0:	7ca00000 	.word	0x7ca00000
 800cfd4:	7fefffff 	.word	0x7fefffff
 800cfd8:	f014 0310 	ands.w	r3, r4, #16
 800cfdc:	4650      	mov	r0, sl
 800cfde:	4659      	mov	r1, fp
 800cfe0:	4ea9      	ldr	r6, [pc, #676]	@ (800d288 <_strtod_l+0x858>)
 800cfe2:	bf18      	it	ne
 800cfe4:	236a      	movne	r3, #106	@ 0x6a
 800cfe6:	9308      	str	r3, [sp, #32]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	07e2      	lsls	r2, r4, #31
 800cfec:	d504      	bpl.n	800cff8 <_strtod_l+0x5c8>
 800cfee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cff2:	f7f3 fb15 	bl	8000620 <__aeabi_dmul>
 800cff6:	2301      	movs	r3, #1
 800cff8:	1064      	asrs	r4, r4, #1
 800cffa:	f106 0608 	add.w	r6, r6, #8
 800cffe:	d1f4      	bne.n	800cfea <_strtod_l+0x5ba>
 800d000:	b10b      	cbz	r3, 800d006 <_strtod_l+0x5d6>
 800d002:	4682      	mov	sl, r0
 800d004:	468b      	mov	fp, r1
 800d006:	9b08      	ldr	r3, [sp, #32]
 800d008:	b1b3      	cbz	r3, 800d038 <_strtod_l+0x608>
 800d00a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d00e:	4659      	mov	r1, fp
 800d010:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd0f      	ble.n	800d038 <_strtod_l+0x608>
 800d018:	2b1f      	cmp	r3, #31
 800d01a:	dd55      	ble.n	800d0c8 <_strtod_l+0x698>
 800d01c:	2b34      	cmp	r3, #52	@ 0x34
 800d01e:	f04f 0a00 	mov.w	sl, #0
 800d022:	bfdb      	ittet	le
 800d024:	f04f 33ff 	movle.w	r3, #4294967295
 800d028:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d02c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d030:	4093      	lslle	r3, r2
 800d032:	bfd8      	it	le
 800d034:	ea03 0b01 	andle.w	fp, r3, r1
 800d038:	2200      	movs	r2, #0
 800d03a:	2300      	movs	r3, #0
 800d03c:	4650      	mov	r0, sl
 800d03e:	4659      	mov	r1, fp
 800d040:	f7f3 fd56 	bl	8000af0 <__aeabi_dcmpeq>
 800d044:	2800      	cmp	r0, #0
 800d046:	d1a6      	bne.n	800cf96 <_strtod_l+0x566>
 800d048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d04a:	463a      	mov	r2, r7
 800d04c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	462b      	mov	r3, r5
 800d052:	9805      	ldr	r0, [sp, #20]
 800d054:	f7ff f8ba 	bl	800c1cc <__s2b>
 800d058:	900a      	str	r0, [sp, #40]	@ 0x28
 800d05a:	2800      	cmp	r0, #0
 800d05c:	f43f af05 	beq.w	800ce6a <_strtod_l+0x43a>
 800d060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d062:	eba9 0308 	sub.w	r3, r9, r8
 800d066:	2400      	movs	r4, #0
 800d068:	2a00      	cmp	r2, #0
 800d06a:	46a0      	mov	r8, r4
 800d06c:	bfa8      	it	ge
 800d06e:	2300      	movge	r3, #0
 800d070:	9312      	str	r3, [sp, #72]	@ 0x48
 800d072:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d076:	9316      	str	r3, [sp, #88]	@ 0x58
 800d078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d07a:	9805      	ldr	r0, [sp, #20]
 800d07c:	6859      	ldr	r1, [r3, #4]
 800d07e:	f7fe fffb 	bl	800c078 <_Balloc>
 800d082:	4681      	mov	r9, r0
 800d084:	2800      	cmp	r0, #0
 800d086:	f43f aef4 	beq.w	800ce72 <_strtod_l+0x442>
 800d08a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d08c:	300c      	adds	r0, #12
 800d08e:	691a      	ldr	r2, [r3, #16]
 800d090:	f103 010c 	add.w	r1, r3, #12
 800d094:	3202      	adds	r2, #2
 800d096:	0092      	lsls	r2, r2, #2
 800d098:	f7fe f887 	bl	800b1aa <memcpy>
 800d09c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d09e:	a91b      	add	r1, sp, #108	@ 0x6c
 800d0a0:	9805      	ldr	r0, [sp, #20]
 800d0a2:	ec4b ab10 	vmov	d0, sl, fp
 800d0a6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d0aa:	f7ff fbd3 	bl	800c854 <__d2b>
 800d0ae:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f43f aede 	beq.w	800ce72 <_strtod_l+0x442>
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	9805      	ldr	r0, [sp, #20]
 800d0ba:	f7ff f91d 	bl	800c2f8 <__i2b>
 800d0be:	4680      	mov	r8, r0
 800d0c0:	b948      	cbnz	r0, 800d0d6 <_strtod_l+0x6a6>
 800d0c2:	f04f 0800 	mov.w	r8, #0
 800d0c6:	e6d4      	b.n	800ce72 <_strtod_l+0x442>
 800d0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	ea03 0a0a 	and.w	sl, r3, sl
 800d0d4:	e7b0      	b.n	800d038 <_strtod_l+0x608>
 800d0d6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0d8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	bfa9      	itett	ge
 800d0de:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0e0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0e2:	18ef      	addge	r7, r5, r3
 800d0e4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0e6:	bfb8      	it	lt
 800d0e8:	1b5e      	sublt	r6, r3, r5
 800d0ea:	9b08      	ldr	r3, [sp, #32]
 800d0ec:	bfb8      	it	lt
 800d0ee:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0f0:	1aed      	subs	r5, r5, r3
 800d0f2:	4b66      	ldr	r3, [pc, #408]	@ (800d28c <_strtod_l+0x85c>)
 800d0f4:	4415      	add	r5, r2
 800d0f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0fa:	3d01      	subs	r5, #1
 800d0fc:	429d      	cmp	r5, r3
 800d0fe:	da4f      	bge.n	800d1a0 <_strtod_l+0x770>
 800d100:	1b5b      	subs	r3, r3, r5
 800d102:	2101      	movs	r1, #1
 800d104:	2b1f      	cmp	r3, #31
 800d106:	eba2 0203 	sub.w	r2, r2, r3
 800d10a:	dc3d      	bgt.n	800d188 <_strtod_l+0x758>
 800d10c:	fa01 f303 	lsl.w	r3, r1, r3
 800d110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d112:	2300      	movs	r3, #0
 800d114:	9310      	str	r3, [sp, #64]	@ 0x40
 800d116:	18bd      	adds	r5, r7, r2
 800d118:	9b08      	ldr	r3, [sp, #32]
 800d11a:	4416      	add	r6, r2
 800d11c:	42af      	cmp	r7, r5
 800d11e:	441e      	add	r6, r3
 800d120:	463b      	mov	r3, r7
 800d122:	bfa8      	it	ge
 800d124:	462b      	movge	r3, r5
 800d126:	42b3      	cmp	r3, r6
 800d128:	bfa8      	it	ge
 800d12a:	4633      	movge	r3, r6
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bfc2      	ittt	gt
 800d130:	1aed      	subgt	r5, r5, r3
 800d132:	1af6      	subgt	r6, r6, r3
 800d134:	1aff      	subgt	r7, r7, r3
 800d136:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d138:	2b00      	cmp	r3, #0
 800d13a:	dd16      	ble.n	800d16a <_strtod_l+0x73a>
 800d13c:	4641      	mov	r1, r8
 800d13e:	461a      	mov	r2, r3
 800d140:	9805      	ldr	r0, [sp, #20]
 800d142:	f7ff f999 	bl	800c478 <__pow5mult>
 800d146:	4680      	mov	r8, r0
 800d148:	2800      	cmp	r0, #0
 800d14a:	d0ba      	beq.n	800d0c2 <_strtod_l+0x692>
 800d14c:	4601      	mov	r1, r0
 800d14e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d150:	9805      	ldr	r0, [sp, #20]
 800d152:	f7ff f8e7 	bl	800c324 <__multiply>
 800d156:	900e      	str	r0, [sp, #56]	@ 0x38
 800d158:	2800      	cmp	r0, #0
 800d15a:	f43f ae8a 	beq.w	800ce72 <_strtod_l+0x442>
 800d15e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d160:	9805      	ldr	r0, [sp, #20]
 800d162:	f7fe ffc9 	bl	800c0f8 <_Bfree>
 800d166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d168:	931a      	str	r3, [sp, #104]	@ 0x68
 800d16a:	2d00      	cmp	r5, #0
 800d16c:	dc1d      	bgt.n	800d1aa <_strtod_l+0x77a>
 800d16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d170:	2b00      	cmp	r3, #0
 800d172:	dd23      	ble.n	800d1bc <_strtod_l+0x78c>
 800d174:	4649      	mov	r1, r9
 800d176:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d178:	9805      	ldr	r0, [sp, #20]
 800d17a:	f7ff f97d 	bl	800c478 <__pow5mult>
 800d17e:	4681      	mov	r9, r0
 800d180:	b9e0      	cbnz	r0, 800d1bc <_strtod_l+0x78c>
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	e674      	b.n	800ce72 <_strtod_l+0x442>
 800d188:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d18c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d18e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d192:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d196:	35e2      	adds	r5, #226	@ 0xe2
 800d198:	fa01 f305 	lsl.w	r3, r1, r5
 800d19c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d19e:	e7ba      	b.n	800d116 <_strtod_l+0x6e6>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1a8:	e7b5      	b.n	800d116 <_strtod_l+0x6e6>
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1ae:	9805      	ldr	r0, [sp, #20]
 800d1b0:	f7ff f9bc 	bl	800c52c <__lshift>
 800d1b4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d1d9      	bne.n	800d16e <_strtod_l+0x73e>
 800d1ba:	e65a      	b.n	800ce72 <_strtod_l+0x442>
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	dd07      	ble.n	800d1d0 <_strtod_l+0x7a0>
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	f7ff f9b1 	bl	800c52c <__lshift>
 800d1ca:	4681      	mov	r9, r0
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d0d8      	beq.n	800d182 <_strtod_l+0x752>
 800d1d0:	2f00      	cmp	r7, #0
 800d1d2:	dd08      	ble.n	800d1e6 <_strtod_l+0x7b6>
 800d1d4:	4641      	mov	r1, r8
 800d1d6:	463a      	mov	r2, r7
 800d1d8:	9805      	ldr	r0, [sp, #20]
 800d1da:	f7ff f9a7 	bl	800c52c <__lshift>
 800d1de:	4680      	mov	r8, r0
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	f43f ae46 	beq.w	800ce72 <_strtod_l+0x442>
 800d1e6:	464a      	mov	r2, r9
 800d1e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1ea:	9805      	ldr	r0, [sp, #20]
 800d1ec:	f7ff fa26 	bl	800c63c <__mdiff>
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	f43f ae3d 	beq.w	800ce72 <_strtod_l+0x442>
 800d1f8:	68c3      	ldr	r3, [r0, #12]
 800d1fa:	4641      	mov	r1, r8
 800d1fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1fe:	2300      	movs	r3, #0
 800d200:	60c3      	str	r3, [r0, #12]
 800d202:	f7ff f9ff 	bl	800c604 <__mcmp>
 800d206:	2800      	cmp	r0, #0
 800d208:	da46      	bge.n	800d298 <_strtod_l+0x868>
 800d20a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d20c:	ea53 030a 	orrs.w	r3, r3, sl
 800d210:	d16c      	bne.n	800d2ec <_strtod_l+0x8bc>
 800d212:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d216:	2b00      	cmp	r3, #0
 800d218:	d168      	bne.n	800d2ec <_strtod_l+0x8bc>
 800d21a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d21e:	0d1b      	lsrs	r3, r3, #20
 800d220:	051b      	lsls	r3, r3, #20
 800d222:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d226:	d961      	bls.n	800d2ec <_strtod_l+0x8bc>
 800d228:	6963      	ldr	r3, [r4, #20]
 800d22a:	b913      	cbnz	r3, 800d232 <_strtod_l+0x802>
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	dd5c      	ble.n	800d2ec <_strtod_l+0x8bc>
 800d232:	4621      	mov	r1, r4
 800d234:	2201      	movs	r2, #1
 800d236:	9805      	ldr	r0, [sp, #20]
 800d238:	f7ff f978 	bl	800c52c <__lshift>
 800d23c:	4641      	mov	r1, r8
 800d23e:	4604      	mov	r4, r0
 800d240:	f7ff f9e0 	bl	800c604 <__mcmp>
 800d244:	2800      	cmp	r0, #0
 800d246:	dd51      	ble.n	800d2ec <_strtod_l+0x8bc>
 800d248:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d24c:	9a08      	ldr	r2, [sp, #32]
 800d24e:	0d1b      	lsrs	r3, r3, #20
 800d250:	051b      	lsls	r3, r3, #20
 800d252:	2a00      	cmp	r2, #0
 800d254:	d06b      	beq.n	800d32e <_strtod_l+0x8fe>
 800d256:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d25a:	d868      	bhi.n	800d32e <_strtod_l+0x8fe>
 800d25c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d260:	f67f ae9d 	bls.w	800cf9e <_strtod_l+0x56e>
 800d264:	4b0a      	ldr	r3, [pc, #40]	@ (800d290 <_strtod_l+0x860>)
 800d266:	4650      	mov	r0, sl
 800d268:	4659      	mov	r1, fp
 800d26a:	2200      	movs	r2, #0
 800d26c:	f7f3 f9d8 	bl	8000620 <__aeabi_dmul>
 800d270:	4b08      	ldr	r3, [pc, #32]	@ (800d294 <_strtod_l+0x864>)
 800d272:	4682      	mov	sl, r0
 800d274:	468b      	mov	fp, r1
 800d276:	400b      	ands	r3, r1
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f47f ae05 	bne.w	800ce88 <_strtod_l+0x458>
 800d27e:	2322      	movs	r3, #34	@ 0x22
 800d280:	9a05      	ldr	r2, [sp, #20]
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	e600      	b.n	800ce88 <_strtod_l+0x458>
 800d286:	bf00      	nop
 800d288:	0800ee20 	.word	0x0800ee20
 800d28c:	fffffc02 	.word	0xfffffc02
 800d290:	39500000 	.word	0x39500000
 800d294:	7ff00000 	.word	0x7ff00000
 800d298:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d29c:	d165      	bne.n	800d36a <_strtod_l+0x93a>
 800d29e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2a4:	b35a      	cbz	r2, 800d2fe <_strtod_l+0x8ce>
 800d2a6:	4a9e      	ldr	r2, [pc, #632]	@ (800d520 <_strtod_l+0xaf0>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d12b      	bne.n	800d304 <_strtod_l+0x8d4>
 800d2ac:	9b08      	ldr	r3, [sp, #32]
 800d2ae:	4651      	mov	r1, sl
 800d2b0:	b303      	cbz	r3, 800d2f4 <_strtod_l+0x8c4>
 800d2b2:	465a      	mov	r2, fp
 800d2b4:	4b9b      	ldr	r3, [pc, #620]	@ (800d524 <_strtod_l+0xaf4>)
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2c0:	d81b      	bhi.n	800d2fa <_strtod_l+0x8ca>
 800d2c2:	0d1b      	lsrs	r3, r3, #20
 800d2c4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2cc:	4299      	cmp	r1, r3
 800d2ce:	d119      	bne.n	800d304 <_strtod_l+0x8d4>
 800d2d0:	4b95      	ldr	r3, [pc, #596]	@ (800d528 <_strtod_l+0xaf8>)
 800d2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d102      	bne.n	800d2de <_strtod_l+0x8ae>
 800d2d8:	3101      	adds	r1, #1
 800d2da:	f43f adca 	beq.w	800ce72 <_strtod_l+0x442>
 800d2de:	4b91      	ldr	r3, [pc, #580]	@ (800d524 <_strtod_l+0xaf4>)
 800d2e0:	f04f 0a00 	mov.w	sl, #0
 800d2e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2e6:	401a      	ands	r2, r3
 800d2e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1b8      	bne.n	800d264 <_strtod_l+0x834>
 800d2f2:	e5c9      	b.n	800ce88 <_strtod_l+0x458>
 800d2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f8:	e7e8      	b.n	800d2cc <_strtod_l+0x89c>
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	e7e6      	b.n	800d2cc <_strtod_l+0x89c>
 800d2fe:	ea53 030a 	orrs.w	r3, r3, sl
 800d302:	d0a1      	beq.n	800d248 <_strtod_l+0x818>
 800d304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d306:	b1db      	cbz	r3, 800d340 <_strtod_l+0x910>
 800d308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d30a:	4213      	tst	r3, r2
 800d30c:	d0ee      	beq.n	800d2ec <_strtod_l+0x8bc>
 800d30e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d310:	4650      	mov	r0, sl
 800d312:	9a08      	ldr	r2, [sp, #32]
 800d314:	4659      	mov	r1, fp
 800d316:	b1bb      	cbz	r3, 800d348 <_strtod_l+0x918>
 800d318:	f7ff fb6a 	bl	800c9f0 <sulp>
 800d31c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d320:	ec53 2b10 	vmov	r2, r3, d0
 800d324:	f7f2 ffc6 	bl	80002b4 <__adddf3>
 800d328:	4682      	mov	sl, r0
 800d32a:	468b      	mov	fp, r1
 800d32c:	e7de      	b.n	800d2ec <_strtod_l+0x8bc>
 800d32e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d332:	f04f 3aff 	mov.w	sl, #4294967295
 800d336:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d33a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d33e:	e7d5      	b.n	800d2ec <_strtod_l+0x8bc>
 800d340:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d342:	ea13 0f0a 	tst.w	r3, sl
 800d346:	e7e1      	b.n	800d30c <_strtod_l+0x8dc>
 800d348:	f7ff fb52 	bl	800c9f0 <sulp>
 800d34c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d350:	ec53 2b10 	vmov	r2, r3, d0
 800d354:	f7f2 ffac 	bl	80002b0 <__aeabi_dsub>
 800d358:	2200      	movs	r2, #0
 800d35a:	2300      	movs	r3, #0
 800d35c:	4682      	mov	sl, r0
 800d35e:	468b      	mov	fp, r1
 800d360:	f7f3 fbc6 	bl	8000af0 <__aeabi_dcmpeq>
 800d364:	2800      	cmp	r0, #0
 800d366:	d0c1      	beq.n	800d2ec <_strtod_l+0x8bc>
 800d368:	e619      	b.n	800cf9e <_strtod_l+0x56e>
 800d36a:	4641      	mov	r1, r8
 800d36c:	4620      	mov	r0, r4
 800d36e:	f7ff fac9 	bl	800c904 <__ratio>
 800d372:	2200      	movs	r2, #0
 800d374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d378:	ec57 6b10 	vmov	r6, r7, d0
 800d37c:	4630      	mov	r0, r6
 800d37e:	4639      	mov	r1, r7
 800d380:	f7f3 fbca 	bl	8000b18 <__aeabi_dcmple>
 800d384:	2800      	cmp	r0, #0
 800d386:	d06f      	beq.n	800d468 <_strtod_l+0xa38>
 800d388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d17a      	bne.n	800d484 <_strtod_l+0xa54>
 800d38e:	f1ba 0f00 	cmp.w	sl, #0
 800d392:	d158      	bne.n	800d446 <_strtod_l+0xa16>
 800d394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d15a      	bne.n	800d454 <_strtod_l+0xa24>
 800d39e:	2200      	movs	r2, #0
 800d3a0:	4b62      	ldr	r3, [pc, #392]	@ (800d52c <_strtod_l+0xafc>)
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	f7f3 fbad 	bl	8000b04 <__aeabi_dcmplt>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d159      	bne.n	800d462 <_strtod_l+0xa32>
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4b5e      	ldr	r3, [pc, #376]	@ (800d530 <_strtod_l+0xb00>)
 800d3b6:	f7f3 f933 	bl	8000620 <__aeabi_dmul>
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3c2:	9606      	str	r6, [sp, #24]
 800d3c4:	9307      	str	r3, [sp, #28]
 800d3c6:	4d57      	ldr	r5, [pc, #348]	@ (800d524 <_strtod_l+0xaf4>)
 800d3c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d2:	401d      	ands	r5, r3
 800d3d4:	4b57      	ldr	r3, [pc, #348]	@ (800d534 <_strtod_l+0xb04>)
 800d3d6:	429d      	cmp	r5, r3
 800d3d8:	f040 80b0 	bne.w	800d53c <_strtod_l+0xb0c>
 800d3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3de:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3e2:	ec4b ab10 	vmov	d0, sl, fp
 800d3e6:	f7ff f9c1 	bl	800c76c <__ulp>
 800d3ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3ee:	ec51 0b10 	vmov	r0, r1, d0
 800d3f2:	f7f3 f915 	bl	8000620 <__aeabi_dmul>
 800d3f6:	4652      	mov	r2, sl
 800d3f8:	465b      	mov	r3, fp
 800d3fa:	f7f2 ff5b 	bl	80002b4 <__adddf3>
 800d3fe:	460b      	mov	r3, r1
 800d400:	4948      	ldr	r1, [pc, #288]	@ (800d524 <_strtod_l+0xaf4>)
 800d402:	4682      	mov	sl, r0
 800d404:	4a4c      	ldr	r2, [pc, #304]	@ (800d538 <_strtod_l+0xb08>)
 800d406:	4019      	ands	r1, r3
 800d408:	4291      	cmp	r1, r2
 800d40a:	d942      	bls.n	800d492 <_strtod_l+0xa62>
 800d40c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d40e:	4b46      	ldr	r3, [pc, #280]	@ (800d528 <_strtod_l+0xaf8>)
 800d410:	429a      	cmp	r2, r3
 800d412:	d103      	bne.n	800d41c <_strtod_l+0x9ec>
 800d414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d416:	3301      	adds	r3, #1
 800d418:	f43f ad2b 	beq.w	800ce72 <_strtod_l+0x442>
 800d41c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800d528 <_strtod_l+0xaf8>
 800d420:	f04f 3aff 	mov.w	sl, #4294967295
 800d424:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d426:	9805      	ldr	r0, [sp, #20]
 800d428:	f7fe fe66 	bl	800c0f8 <_Bfree>
 800d42c:	4649      	mov	r1, r9
 800d42e:	9805      	ldr	r0, [sp, #20]
 800d430:	f7fe fe62 	bl	800c0f8 <_Bfree>
 800d434:	4641      	mov	r1, r8
 800d436:	9805      	ldr	r0, [sp, #20]
 800d438:	f7fe fe5e 	bl	800c0f8 <_Bfree>
 800d43c:	4621      	mov	r1, r4
 800d43e:	9805      	ldr	r0, [sp, #20]
 800d440:	f7fe fe5a 	bl	800c0f8 <_Bfree>
 800d444:	e618      	b.n	800d078 <_strtod_l+0x648>
 800d446:	f1ba 0f01 	cmp.w	sl, #1
 800d44a:	d103      	bne.n	800d454 <_strtod_l+0xa24>
 800d44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f43f ada5 	beq.w	800cf9e <_strtod_l+0x56e>
 800d454:	2600      	movs	r6, #0
 800d456:	4f35      	ldr	r7, [pc, #212]	@ (800d52c <_strtod_l+0xafc>)
 800d458:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800d500 <_strtod_l+0xad0>
 800d45c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d460:	e7b1      	b.n	800d3c6 <_strtod_l+0x996>
 800d462:	2600      	movs	r6, #0
 800d464:	4f32      	ldr	r7, [pc, #200]	@ (800d530 <_strtod_l+0xb00>)
 800d466:	e7aa      	b.n	800d3be <_strtod_l+0x98e>
 800d468:	4b31      	ldr	r3, [pc, #196]	@ (800d530 <_strtod_l+0xb00>)
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	2200      	movs	r2, #0
 800d470:	f7f3 f8d6 	bl	8000620 <__aeabi_dmul>
 800d474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d476:	4606      	mov	r6, r0
 800d478:	460f      	mov	r7, r1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d09f      	beq.n	800d3be <_strtod_l+0x98e>
 800d47e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d482:	e7a0      	b.n	800d3c6 <_strtod_l+0x996>
 800d484:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800d508 <_strtod_l+0xad8>
 800d488:	ec57 6b17 	vmov	r6, r7, d7
 800d48c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d490:	e799      	b.n	800d3c6 <_strtod_l+0x996>
 800d492:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d496:	9b08      	ldr	r3, [sp, #32]
 800d498:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1c1      	bne.n	800d424 <_strtod_l+0x9f4>
 800d4a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4a4:	0d1b      	lsrs	r3, r3, #20
 800d4a6:	051b      	lsls	r3, r3, #20
 800d4a8:	429d      	cmp	r5, r3
 800d4aa:	d1bb      	bne.n	800d424 <_strtod_l+0x9f4>
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f3 fc16 	bl	8000ce0 <__aeabi_d2lz>
 800d4b4:	f7f3 f886 	bl	80005c4 <__aeabi_l2d>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4630      	mov	r0, r6
 800d4be:	4639      	mov	r1, r7
 800d4c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4c4:	f7f2 fef4 	bl	80002b0 <__aeabi_dsub>
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	ea46 060a 	orr.w	r6, r6, sl
 800d4d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4d6:	431e      	orrs	r6, r3
 800d4d8:	d06d      	beq.n	800d5b6 <_strtod_l+0xb86>
 800d4da:	a30d      	add	r3, pc, #52	@ (adr r3, 800d510 <_strtod_l+0xae0>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f7f3 fb10 	bl	8000b04 <__aeabi_dcmplt>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	f47f accf 	bne.w	800ce88 <_strtod_l+0x458>
 800d4ea:	a30b      	add	r3, pc, #44	@ (adr r3, 800d518 <_strtod_l+0xae8>)
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4f4:	f7f3 fb24 	bl	8000b40 <__aeabi_dcmpgt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d093      	beq.n	800d424 <_strtod_l+0x9f4>
 800d4fc:	e4c4      	b.n	800ce88 <_strtod_l+0x458>
 800d4fe:	bf00      	nop
 800d500:	00000000 	.word	0x00000000
 800d504:	bff00000 	.word	0xbff00000
 800d508:	00000000 	.word	0x00000000
 800d50c:	3ff00000 	.word	0x3ff00000
 800d510:	94a03595 	.word	0x94a03595
 800d514:	3fdfffff 	.word	0x3fdfffff
 800d518:	35afe535 	.word	0x35afe535
 800d51c:	3fe00000 	.word	0x3fe00000
 800d520:	000fffff 	.word	0x000fffff
 800d524:	7ff00000 	.word	0x7ff00000
 800d528:	7fefffff 	.word	0x7fefffff
 800d52c:	3ff00000 	.word	0x3ff00000
 800d530:	3fe00000 	.word	0x3fe00000
 800d534:	7fe00000 	.word	0x7fe00000
 800d538:	7c9fffff 	.word	0x7c9fffff
 800d53c:	9b08      	ldr	r3, [sp, #32]
 800d53e:	b323      	cbz	r3, 800d58a <_strtod_l+0xb5a>
 800d540:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d544:	d821      	bhi.n	800d58a <_strtod_l+0xb5a>
 800d546:	4630      	mov	r0, r6
 800d548:	4639      	mov	r1, r7
 800d54a:	a327      	add	r3, pc, #156	@ (adr r3, 800d5e8 <_strtod_l+0xbb8>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f3 fae2 	bl	8000b18 <__aeabi_dcmple>
 800d554:	b1a0      	cbz	r0, 800d580 <_strtod_l+0xb50>
 800d556:	4639      	mov	r1, r7
 800d558:	4630      	mov	r0, r6
 800d55a:	f7f3 fb39 	bl	8000bd0 <__aeabi_d2uiz>
 800d55e:	2801      	cmp	r0, #1
 800d560:	bf38      	it	cc
 800d562:	2001      	movcc	r0, #1
 800d564:	f7f2 ffe2 	bl	800052c <__aeabi_ui2d>
 800d568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d56a:	4606      	mov	r6, r0
 800d56c:	460f      	mov	r7, r1
 800d56e:	b9fb      	cbnz	r3, 800d5b0 <_strtod_l+0xb80>
 800d570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d574:	9014      	str	r0, [sp, #80]	@ 0x50
 800d576:	9315      	str	r3, [sp, #84]	@ 0x54
 800d578:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d57c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d582:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d586:	1b5b      	subs	r3, r3, r5
 800d588:	9311      	str	r3, [sp, #68]	@ 0x44
 800d58a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d58e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d592:	f7ff f8eb 	bl	800c76c <__ulp>
 800d596:	4650      	mov	r0, sl
 800d598:	4659      	mov	r1, fp
 800d59a:	ec53 2b10 	vmov	r2, r3, d0
 800d59e:	f7f3 f83f 	bl	8000620 <__aeabi_dmul>
 800d5a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5a6:	f7f2 fe85 	bl	80002b4 <__adddf3>
 800d5aa:	4682      	mov	sl, r0
 800d5ac:	468b      	mov	fp, r1
 800d5ae:	e772      	b.n	800d496 <_strtod_l+0xa66>
 800d5b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d5b4:	e7e0      	b.n	800d578 <_strtod_l+0xb48>
 800d5b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5f0 <_strtod_l+0xbc0>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f3 faa2 	bl	8000b04 <__aeabi_dcmplt>
 800d5c0:	e79a      	b.n	800d4f8 <_strtod_l+0xac8>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	f7ff ba6d 	b.w	800caaa <_strtod_l+0x7a>
 800d5d0:	2a65      	cmp	r2, #101	@ 0x65
 800d5d2:	f43f ab67 	beq.w	800cca4 <_strtod_l+0x274>
 800d5d6:	2a45      	cmp	r2, #69	@ 0x45
 800d5d8:	f43f ab64 	beq.w	800cca4 <_strtod_l+0x274>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f7ff bba0 	b.w	800cd22 <_strtod_l+0x2f2>
 800d5e2:	bf00      	nop
 800d5e4:	f3af 8000 	nop.w
 800d5e8:	ffc00000 	.word	0xffc00000
 800d5ec:	41dfffff 	.word	0x41dfffff
 800d5f0:	94a03595 	.word	0x94a03595
 800d5f4:	3fcfffff 	.word	0x3fcfffff

0800d5f8 <_strtod_r>:
 800d5f8:	4b01      	ldr	r3, [pc, #4]	@ (800d600 <_strtod_r+0x8>)
 800d5fa:	f7ff ba19 	b.w	800ca30 <_strtod_l>
 800d5fe:	bf00      	nop
 800d600:	20000078 	.word	0x20000078

0800d604 <_strtol_l.constprop.0>:
 800d604:	2b24      	cmp	r3, #36	@ 0x24
 800d606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d60a:	4686      	mov	lr, r0
 800d60c:	4690      	mov	r8, r2
 800d60e:	d801      	bhi.n	800d614 <_strtol_l.constprop.0+0x10>
 800d610:	2b01      	cmp	r3, #1
 800d612:	d106      	bne.n	800d622 <_strtol_l.constprop.0+0x1e>
 800d614:	f7fd fd8e 	bl	800b134 <__errno>
 800d618:	2316      	movs	r3, #22
 800d61a:	6003      	str	r3, [r0, #0]
 800d61c:	2000      	movs	r0, #0
 800d61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d622:	460d      	mov	r5, r1
 800d624:	4833      	ldr	r0, [pc, #204]	@ (800d6f4 <_strtol_l.constprop.0+0xf0>)
 800d626:	462a      	mov	r2, r5
 800d628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d62c:	5d06      	ldrb	r6, [r0, r4]
 800d62e:	f016 0608 	ands.w	r6, r6, #8
 800d632:	d1f8      	bne.n	800d626 <_strtol_l.constprop.0+0x22>
 800d634:	2c2d      	cmp	r4, #45	@ 0x2d
 800d636:	d12d      	bne.n	800d694 <_strtol_l.constprop.0+0x90>
 800d638:	782c      	ldrb	r4, [r5, #0]
 800d63a:	2601      	movs	r6, #1
 800d63c:	1c95      	adds	r5, r2, #2
 800d63e:	f033 0210 	bics.w	r2, r3, #16
 800d642:	d109      	bne.n	800d658 <_strtol_l.constprop.0+0x54>
 800d644:	2c30      	cmp	r4, #48	@ 0x30
 800d646:	d12a      	bne.n	800d69e <_strtol_l.constprop.0+0x9a>
 800d648:	782a      	ldrb	r2, [r5, #0]
 800d64a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d64e:	2a58      	cmp	r2, #88	@ 0x58
 800d650:	d125      	bne.n	800d69e <_strtol_l.constprop.0+0x9a>
 800d652:	786c      	ldrb	r4, [r5, #1]
 800d654:	2310      	movs	r3, #16
 800d656:	3502      	adds	r5, #2
 800d658:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d65c:	2200      	movs	r2, #0
 800d65e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d662:	4610      	mov	r0, r2
 800d664:	fbbc f9f3 	udiv	r9, ip, r3
 800d668:	fb03 ca19 	mls	sl, r3, r9, ip
 800d66c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d670:	2f09      	cmp	r7, #9
 800d672:	d81b      	bhi.n	800d6ac <_strtol_l.constprop.0+0xa8>
 800d674:	463c      	mov	r4, r7
 800d676:	42a3      	cmp	r3, r4
 800d678:	dd27      	ble.n	800d6ca <_strtol_l.constprop.0+0xc6>
 800d67a:	1c57      	adds	r7, r2, #1
 800d67c:	d007      	beq.n	800d68e <_strtol_l.constprop.0+0x8a>
 800d67e:	4581      	cmp	r9, r0
 800d680:	d320      	bcc.n	800d6c4 <_strtol_l.constprop.0+0xc0>
 800d682:	d101      	bne.n	800d688 <_strtol_l.constprop.0+0x84>
 800d684:	45a2      	cmp	sl, r4
 800d686:	db1d      	blt.n	800d6c4 <_strtol_l.constprop.0+0xc0>
 800d688:	fb00 4003 	mla	r0, r0, r3, r4
 800d68c:	2201      	movs	r2, #1
 800d68e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d692:	e7eb      	b.n	800d66c <_strtol_l.constprop.0+0x68>
 800d694:	2c2b      	cmp	r4, #43	@ 0x2b
 800d696:	bf04      	itt	eq
 800d698:	782c      	ldrbeq	r4, [r5, #0]
 800d69a:	1c95      	addeq	r5, r2, #2
 800d69c:	e7cf      	b.n	800d63e <_strtol_l.constprop.0+0x3a>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1da      	bne.n	800d658 <_strtol_l.constprop.0+0x54>
 800d6a2:	2c30      	cmp	r4, #48	@ 0x30
 800d6a4:	bf0c      	ite	eq
 800d6a6:	2308      	moveq	r3, #8
 800d6a8:	230a      	movne	r3, #10
 800d6aa:	e7d5      	b.n	800d658 <_strtol_l.constprop.0+0x54>
 800d6ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6b0:	2f19      	cmp	r7, #25
 800d6b2:	d801      	bhi.n	800d6b8 <_strtol_l.constprop.0+0xb4>
 800d6b4:	3c37      	subs	r4, #55	@ 0x37
 800d6b6:	e7de      	b.n	800d676 <_strtol_l.constprop.0+0x72>
 800d6b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6bc:	2f19      	cmp	r7, #25
 800d6be:	d804      	bhi.n	800d6ca <_strtol_l.constprop.0+0xc6>
 800d6c0:	3c57      	subs	r4, #87	@ 0x57
 800d6c2:	e7d8      	b.n	800d676 <_strtol_l.constprop.0+0x72>
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	e7e1      	b.n	800d68e <_strtol_l.constprop.0+0x8a>
 800d6ca:	1c53      	adds	r3, r2, #1
 800d6cc:	d108      	bne.n	800d6e0 <_strtol_l.constprop.0+0xdc>
 800d6ce:	2322      	movs	r3, #34	@ 0x22
 800d6d0:	4660      	mov	r0, ip
 800d6d2:	f8ce 3000 	str.w	r3, [lr]
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	d0a0      	beq.n	800d61e <_strtol_l.constprop.0+0x1a>
 800d6dc:	1e69      	subs	r1, r5, #1
 800d6de:	e006      	b.n	800d6ee <_strtol_l.constprop.0+0xea>
 800d6e0:	b106      	cbz	r6, 800d6e4 <_strtol_l.constprop.0+0xe0>
 800d6e2:	4240      	negs	r0, r0
 800d6e4:	f1b8 0f00 	cmp.w	r8, #0
 800d6e8:	d099      	beq.n	800d61e <_strtol_l.constprop.0+0x1a>
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d1f6      	bne.n	800d6dc <_strtol_l.constprop.0+0xd8>
 800d6ee:	f8c8 1000 	str.w	r1, [r8]
 800d6f2:	e794      	b.n	800d61e <_strtol_l.constprop.0+0x1a>
 800d6f4:	0800ee49 	.word	0x0800ee49

0800d6f8 <_strtol_r>:
 800d6f8:	f7ff bf84 	b.w	800d604 <_strtol_l.constprop.0>

0800d6fc <__ssputs_r>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	461f      	mov	r7, r3
 800d702:	688e      	ldr	r6, [r1, #8]
 800d704:	4682      	mov	sl, r0
 800d706:	460c      	mov	r4, r1
 800d708:	42be      	cmp	r6, r7
 800d70a:	4690      	mov	r8, r2
 800d70c:	680b      	ldr	r3, [r1, #0]
 800d70e:	d82d      	bhi.n	800d76c <__ssputs_r+0x70>
 800d710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d718:	d026      	beq.n	800d768 <__ssputs_r+0x6c>
 800d71a:	6965      	ldr	r5, [r4, #20]
 800d71c:	6909      	ldr	r1, [r1, #16]
 800d71e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d722:	eba3 0901 	sub.w	r9, r3, r1
 800d726:	1c7b      	adds	r3, r7, #1
 800d728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d72c:	444b      	add	r3, r9
 800d72e:	106d      	asrs	r5, r5, #1
 800d730:	429d      	cmp	r5, r3
 800d732:	bf38      	it	cc
 800d734:	461d      	movcc	r5, r3
 800d736:	0553      	lsls	r3, r2, #21
 800d738:	d527      	bpl.n	800d78a <__ssputs_r+0x8e>
 800d73a:	4629      	mov	r1, r5
 800d73c:	f7fe fc10 	bl	800bf60 <_malloc_r>
 800d740:	4606      	mov	r6, r0
 800d742:	b360      	cbz	r0, 800d79e <__ssputs_r+0xa2>
 800d744:	464a      	mov	r2, r9
 800d746:	6921      	ldr	r1, [r4, #16]
 800d748:	f7fd fd2f 	bl	800b1aa <memcpy>
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d756:	81a3      	strh	r3, [r4, #12]
 800d758:	6126      	str	r6, [r4, #16]
 800d75a:	444e      	add	r6, r9
 800d75c:	6165      	str	r5, [r4, #20]
 800d75e:	eba5 0509 	sub.w	r5, r5, r9
 800d762:	6026      	str	r6, [r4, #0]
 800d764:	463e      	mov	r6, r7
 800d766:	60a5      	str	r5, [r4, #8]
 800d768:	42be      	cmp	r6, r7
 800d76a:	d900      	bls.n	800d76e <__ssputs_r+0x72>
 800d76c:	463e      	mov	r6, r7
 800d76e:	4632      	mov	r2, r6
 800d770:	4641      	mov	r1, r8
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	f000 f9c6 	bl	800db04 <memmove>
 800d778:	68a3      	ldr	r3, [r4, #8]
 800d77a:	2000      	movs	r0, #0
 800d77c:	1b9b      	subs	r3, r3, r6
 800d77e:	60a3      	str	r3, [r4, #8]
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	4433      	add	r3, r6
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d78a:	462a      	mov	r2, r5
 800d78c:	f000 fd79 	bl	800e282 <_realloc_r>
 800d790:	4606      	mov	r6, r0
 800d792:	2800      	cmp	r0, #0
 800d794:	d1e0      	bne.n	800d758 <__ssputs_r+0x5c>
 800d796:	6921      	ldr	r1, [r4, #16]
 800d798:	4650      	mov	r0, sl
 800d79a:	f7fe fb6d 	bl	800be78 <_free_r>
 800d79e:	230c      	movs	r3, #12
 800d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a4:	f8ca 3000 	str.w	r3, [sl]
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ae:	81a3      	strh	r3, [r4, #12]
 800d7b0:	e7e9      	b.n	800d786 <__ssputs_r+0x8a>
	...

0800d7b4 <_svfiprintf_r>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	4698      	mov	r8, r3
 800d7ba:	898b      	ldrh	r3, [r1, #12]
 800d7bc:	b09d      	sub	sp, #116	@ 0x74
 800d7be:	4607      	mov	r7, r0
 800d7c0:	061b      	lsls	r3, r3, #24
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	d510      	bpl.n	800d7ea <_svfiprintf_r+0x36>
 800d7c8:	690b      	ldr	r3, [r1, #16]
 800d7ca:	b973      	cbnz	r3, 800d7ea <_svfiprintf_r+0x36>
 800d7cc:	2140      	movs	r1, #64	@ 0x40
 800d7ce:	f7fe fbc7 	bl	800bf60 <_malloc_r>
 800d7d2:	6028      	str	r0, [r5, #0]
 800d7d4:	6128      	str	r0, [r5, #16]
 800d7d6:	b930      	cbnz	r0, 800d7e6 <_svfiprintf_r+0x32>
 800d7d8:	230c      	movs	r3, #12
 800d7da:	603b      	str	r3, [r7, #0]
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	b01d      	add	sp, #116	@ 0x74
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e6:	2340      	movs	r3, #64	@ 0x40
 800d7e8:	616b      	str	r3, [r5, #20]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f0:	f04f 0901 	mov.w	r9, #1
 800d7f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d998 <_svfiprintf_r+0x1e4>
 800d7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7fa:	2320      	movs	r3, #32
 800d7fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d800:	2330      	movs	r3, #48	@ 0x30
 800d802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d806:	4623      	mov	r3, r4
 800d808:	469a      	mov	sl, r3
 800d80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d80e:	b10a      	cbz	r2, 800d814 <_svfiprintf_r+0x60>
 800d810:	2a25      	cmp	r2, #37	@ 0x25
 800d812:	d1f9      	bne.n	800d808 <_svfiprintf_r+0x54>
 800d814:	ebba 0b04 	subs.w	fp, sl, r4
 800d818:	d00b      	beq.n	800d832 <_svfiprintf_r+0x7e>
 800d81a:	465b      	mov	r3, fp
 800d81c:	4622      	mov	r2, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	4638      	mov	r0, r7
 800d822:	f7ff ff6b 	bl	800d6fc <__ssputs_r>
 800d826:	3001      	adds	r0, #1
 800d828:	f000 80a7 	beq.w	800d97a <_svfiprintf_r+0x1c6>
 800d82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d82e:	445a      	add	r2, fp
 800d830:	9209      	str	r2, [sp, #36]	@ 0x24
 800d832:	f89a 3000 	ldrb.w	r3, [sl]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 809f 	beq.w	800d97a <_svfiprintf_r+0x1c6>
 800d83c:	2300      	movs	r3, #0
 800d83e:	f04f 32ff 	mov.w	r2, #4294967295
 800d842:	f10a 0a01 	add.w	sl, sl, #1
 800d846:	9304      	str	r3, [sp, #16]
 800d848:	9307      	str	r3, [sp, #28]
 800d84a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d84e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d854:	4654      	mov	r4, sl
 800d856:	2205      	movs	r2, #5
 800d858:	484f      	ldr	r0, [pc, #316]	@ (800d998 <_svfiprintf_r+0x1e4>)
 800d85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85e:	f7fd fc96 	bl	800b18e <memchr>
 800d862:	9a04      	ldr	r2, [sp, #16]
 800d864:	b9d8      	cbnz	r0, 800d89e <_svfiprintf_r+0xea>
 800d866:	06d0      	lsls	r0, r2, #27
 800d868:	bf44      	itt	mi
 800d86a:	2320      	movmi	r3, #32
 800d86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d870:	0711      	lsls	r1, r2, #28
 800d872:	bf44      	itt	mi
 800d874:	232b      	movmi	r3, #43	@ 0x2b
 800d876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d87a:	f89a 3000 	ldrb.w	r3, [sl]
 800d87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d880:	d015      	beq.n	800d8ae <_svfiprintf_r+0xfa>
 800d882:	9a07      	ldr	r2, [sp, #28]
 800d884:	4654      	mov	r4, sl
 800d886:	2000      	movs	r0, #0
 800d888:	f04f 0c0a 	mov.w	ip, #10
 800d88c:	4621      	mov	r1, r4
 800d88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d892:	3b30      	subs	r3, #48	@ 0x30
 800d894:	2b09      	cmp	r3, #9
 800d896:	d94b      	bls.n	800d930 <_svfiprintf_r+0x17c>
 800d898:	b1b0      	cbz	r0, 800d8c8 <_svfiprintf_r+0x114>
 800d89a:	9207      	str	r2, [sp, #28]
 800d89c:	e014      	b.n	800d8c8 <_svfiprintf_r+0x114>
 800d89e:	eba0 0308 	sub.w	r3, r0, r8
 800d8a2:	46a2      	mov	sl, r4
 800d8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	9304      	str	r3, [sp, #16]
 800d8ac:	e7d2      	b.n	800d854 <_svfiprintf_r+0xa0>
 800d8ae:	9b03      	ldr	r3, [sp, #12]
 800d8b0:	1d19      	adds	r1, r3, #4
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	9103      	str	r1, [sp, #12]
 800d8b8:	bfbb      	ittet	lt
 800d8ba:	425b      	neglt	r3, r3
 800d8bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c0:	9307      	strge	r3, [sp, #28]
 800d8c2:	9307      	strlt	r3, [sp, #28]
 800d8c4:	bfb8      	it	lt
 800d8c6:	9204      	strlt	r2, [sp, #16]
 800d8c8:	7823      	ldrb	r3, [r4, #0]
 800d8ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8cc:	d10a      	bne.n	800d8e4 <_svfiprintf_r+0x130>
 800d8ce:	7863      	ldrb	r3, [r4, #1]
 800d8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8d2:	d132      	bne.n	800d93a <_svfiprintf_r+0x186>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	3402      	adds	r4, #2
 800d8d8:	1d1a      	adds	r2, r3, #4
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8e0:	9203      	str	r2, [sp, #12]
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9a8 <_svfiprintf_r+0x1f4>
 800d8e8:	2203      	movs	r2, #3
 800d8ea:	7821      	ldrb	r1, [r4, #0]
 800d8ec:	4650      	mov	r0, sl
 800d8ee:	f7fd fc4e 	bl	800b18e <memchr>
 800d8f2:	b138      	cbz	r0, 800d904 <_svfiprintf_r+0x150>
 800d8f4:	eba0 000a 	sub.w	r0, r0, sl
 800d8f8:	2240      	movs	r2, #64	@ 0x40
 800d8fa:	9b04      	ldr	r3, [sp, #16]
 800d8fc:	3401      	adds	r4, #1
 800d8fe:	4082      	lsls	r2, r0
 800d900:	4313      	orrs	r3, r2
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d908:	2206      	movs	r2, #6
 800d90a:	4824      	ldr	r0, [pc, #144]	@ (800d99c <_svfiprintf_r+0x1e8>)
 800d90c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d910:	f7fd fc3d 	bl	800b18e <memchr>
 800d914:	2800      	cmp	r0, #0
 800d916:	d036      	beq.n	800d986 <_svfiprintf_r+0x1d2>
 800d918:	4b21      	ldr	r3, [pc, #132]	@ (800d9a0 <_svfiprintf_r+0x1ec>)
 800d91a:	bb1b      	cbnz	r3, 800d964 <_svfiprintf_r+0x1b0>
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	3307      	adds	r3, #7
 800d920:	f023 0307 	bic.w	r3, r3, #7
 800d924:	3308      	adds	r3, #8
 800d926:	9303      	str	r3, [sp, #12]
 800d928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92a:	4433      	add	r3, r6
 800d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92e:	e76a      	b.n	800d806 <_svfiprintf_r+0x52>
 800d930:	fb0c 3202 	mla	r2, ip, r2, r3
 800d934:	460c      	mov	r4, r1
 800d936:	2001      	movs	r0, #1
 800d938:	e7a8      	b.n	800d88c <_svfiprintf_r+0xd8>
 800d93a:	2300      	movs	r3, #0
 800d93c:	3401      	adds	r4, #1
 800d93e:	f04f 0c0a 	mov.w	ip, #10
 800d942:	4619      	mov	r1, r3
 800d944:	9305      	str	r3, [sp, #20]
 800d946:	4620      	mov	r0, r4
 800d948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94c:	3a30      	subs	r2, #48	@ 0x30
 800d94e:	2a09      	cmp	r2, #9
 800d950:	d903      	bls.n	800d95a <_svfiprintf_r+0x1a6>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0c6      	beq.n	800d8e4 <_svfiprintf_r+0x130>
 800d956:	9105      	str	r1, [sp, #20]
 800d958:	e7c4      	b.n	800d8e4 <_svfiprintf_r+0x130>
 800d95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95e:	4604      	mov	r4, r0
 800d960:	2301      	movs	r3, #1
 800d962:	e7f0      	b.n	800d946 <_svfiprintf_r+0x192>
 800d964:	ab03      	add	r3, sp, #12
 800d966:	462a      	mov	r2, r5
 800d968:	a904      	add	r1, sp, #16
 800d96a:	4638      	mov	r0, r7
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a4 <_svfiprintf_r+0x1f0>)
 800d970:	f7fc fc9a 	bl	800a2a8 <_printf_float>
 800d974:	1c42      	adds	r2, r0, #1
 800d976:	4606      	mov	r6, r0
 800d978:	d1d6      	bne.n	800d928 <_svfiprintf_r+0x174>
 800d97a:	89ab      	ldrh	r3, [r5, #12]
 800d97c:	065b      	lsls	r3, r3, #25
 800d97e:	f53f af2d 	bmi.w	800d7dc <_svfiprintf_r+0x28>
 800d982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d984:	e72c      	b.n	800d7e0 <_svfiprintf_r+0x2c>
 800d986:	ab03      	add	r3, sp, #12
 800d988:	462a      	mov	r2, r5
 800d98a:	a904      	add	r1, sp, #16
 800d98c:	4638      	mov	r0, r7
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	4b04      	ldr	r3, [pc, #16]	@ (800d9a4 <_svfiprintf_r+0x1f0>)
 800d992:	f7fc ff25 	bl	800a7e0 <_printf_i>
 800d996:	e7ed      	b.n	800d974 <_svfiprintf_r+0x1c0>
 800d998:	0800ef49 	.word	0x0800ef49
 800d99c:	0800ef53 	.word	0x0800ef53
 800d9a0:	0800a2a9 	.word	0x0800a2a9
 800d9a4:	0800d6fd 	.word	0x0800d6fd
 800d9a8:	0800ef4f 	.word	0x0800ef4f

0800d9ac <__sflush_r>:
 800d9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b4:	0716      	lsls	r6, r2, #28
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	d454      	bmi.n	800da66 <__sflush_r+0xba>
 800d9bc:	684b      	ldr	r3, [r1, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	dc02      	bgt.n	800d9c8 <__sflush_r+0x1c>
 800d9c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dd48      	ble.n	800da5a <__sflush_r+0xae>
 800d9c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9ca:	2e00      	cmp	r6, #0
 800d9cc:	d045      	beq.n	800da5a <__sflush_r+0xae>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9d4:	682f      	ldr	r7, [r5, #0]
 800d9d6:	6a21      	ldr	r1, [r4, #32]
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	d030      	beq.n	800da3e <__sflush_r+0x92>
 800d9dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	0759      	lsls	r1, r3, #29
 800d9e2:	d505      	bpl.n	800d9f0 <__sflush_r+0x44>
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	1ad2      	subs	r2, r2, r3
 800d9e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9ea:	b10b      	cbz	r3, 800d9f0 <__sflush_r+0x44>
 800d9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9ee:	1ad2      	subs	r2, r2, r3
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9f4:	6a21      	ldr	r1, [r4, #32]
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b0      	blx	r6
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	d106      	bne.n	800da0e <__sflush_r+0x62>
 800da00:	6829      	ldr	r1, [r5, #0]
 800da02:	291d      	cmp	r1, #29
 800da04:	d82b      	bhi.n	800da5e <__sflush_r+0xb2>
 800da06:	4a2a      	ldr	r2, [pc, #168]	@ (800dab0 <__sflush_r+0x104>)
 800da08:	410a      	asrs	r2, r1
 800da0a:	07d6      	lsls	r6, r2, #31
 800da0c:	d427      	bmi.n	800da5e <__sflush_r+0xb2>
 800da0e:	2200      	movs	r2, #0
 800da10:	04d9      	lsls	r1, r3, #19
 800da12:	6062      	str	r2, [r4, #4]
 800da14:	6922      	ldr	r2, [r4, #16]
 800da16:	6022      	str	r2, [r4, #0]
 800da18:	d504      	bpl.n	800da24 <__sflush_r+0x78>
 800da1a:	1c42      	adds	r2, r0, #1
 800da1c:	d101      	bne.n	800da22 <__sflush_r+0x76>
 800da1e:	682b      	ldr	r3, [r5, #0]
 800da20:	b903      	cbnz	r3, 800da24 <__sflush_r+0x78>
 800da22:	6560      	str	r0, [r4, #84]	@ 0x54
 800da24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da26:	602f      	str	r7, [r5, #0]
 800da28:	b1b9      	cbz	r1, 800da5a <__sflush_r+0xae>
 800da2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da2e:	4299      	cmp	r1, r3
 800da30:	d002      	beq.n	800da38 <__sflush_r+0x8c>
 800da32:	4628      	mov	r0, r5
 800da34:	f7fe fa20 	bl	800be78 <_free_r>
 800da38:	2300      	movs	r3, #0
 800da3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da3c:	e00d      	b.n	800da5a <__sflush_r+0xae>
 800da3e:	2301      	movs	r3, #1
 800da40:	4628      	mov	r0, r5
 800da42:	47b0      	blx	r6
 800da44:	4602      	mov	r2, r0
 800da46:	1c50      	adds	r0, r2, #1
 800da48:	d1c9      	bne.n	800d9de <__sflush_r+0x32>
 800da4a:	682b      	ldr	r3, [r5, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0c6      	beq.n	800d9de <__sflush_r+0x32>
 800da50:	2b1d      	cmp	r3, #29
 800da52:	d001      	beq.n	800da58 <__sflush_r+0xac>
 800da54:	2b16      	cmp	r3, #22
 800da56:	d11d      	bne.n	800da94 <__sflush_r+0xe8>
 800da58:	602f      	str	r7, [r5, #0]
 800da5a:	2000      	movs	r0, #0
 800da5c:	e021      	b.n	800daa2 <__sflush_r+0xf6>
 800da5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da62:	b21b      	sxth	r3, r3
 800da64:	e01a      	b.n	800da9c <__sflush_r+0xf0>
 800da66:	690f      	ldr	r7, [r1, #16]
 800da68:	2f00      	cmp	r7, #0
 800da6a:	d0f6      	beq.n	800da5a <__sflush_r+0xae>
 800da6c:	0793      	lsls	r3, r2, #30
 800da6e:	680e      	ldr	r6, [r1, #0]
 800da70:	600f      	str	r7, [r1, #0]
 800da72:	bf0c      	ite	eq
 800da74:	694b      	ldreq	r3, [r1, #20]
 800da76:	2300      	movne	r3, #0
 800da78:	eba6 0807 	sub.w	r8, r6, r7
 800da7c:	608b      	str	r3, [r1, #8]
 800da7e:	f1b8 0f00 	cmp.w	r8, #0
 800da82:	ddea      	ble.n	800da5a <__sflush_r+0xae>
 800da84:	4643      	mov	r3, r8
 800da86:	463a      	mov	r2, r7
 800da88:	6a21      	ldr	r1, [r4, #32]
 800da8a:	4628      	mov	r0, r5
 800da8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da8e:	47b0      	blx	r6
 800da90:	2800      	cmp	r0, #0
 800da92:	dc08      	bgt.n	800daa6 <__sflush_r+0xfa>
 800da94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa6:	4407      	add	r7, r0
 800daa8:	eba8 0800 	sub.w	r8, r8, r0
 800daac:	e7e7      	b.n	800da7e <__sflush_r+0xd2>
 800daae:	bf00      	nop
 800dab0:	dfbffffe 	.word	0xdfbffffe

0800dab4 <_fflush_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	690b      	ldr	r3, [r1, #16]
 800dab8:	4605      	mov	r5, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	b913      	cbnz	r3, 800dac4 <_fflush_r+0x10>
 800dabe:	2500      	movs	r5, #0
 800dac0:	4628      	mov	r0, r5
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	b118      	cbz	r0, 800dace <_fflush_r+0x1a>
 800dac6:	6a03      	ldr	r3, [r0, #32]
 800dac8:	b90b      	cbnz	r3, 800dace <_fflush_r+0x1a>
 800daca:	f7fd fa47 	bl	800af5c <__sinit>
 800dace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0f3      	beq.n	800dabe <_fflush_r+0xa>
 800dad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dad8:	07d0      	lsls	r0, r2, #31
 800dada:	d404      	bmi.n	800dae6 <_fflush_r+0x32>
 800dadc:	0599      	lsls	r1, r3, #22
 800dade:	d402      	bmi.n	800dae6 <_fflush_r+0x32>
 800dae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dae2:	f7fd fb52 	bl	800b18a <__retarget_lock_acquire_recursive>
 800dae6:	4628      	mov	r0, r5
 800dae8:	4621      	mov	r1, r4
 800daea:	f7ff ff5f 	bl	800d9ac <__sflush_r>
 800daee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800daf0:	4605      	mov	r5, r0
 800daf2:	07da      	lsls	r2, r3, #31
 800daf4:	d4e4      	bmi.n	800dac0 <_fflush_r+0xc>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	059b      	lsls	r3, r3, #22
 800dafa:	d4e1      	bmi.n	800dac0 <_fflush_r+0xc>
 800dafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dafe:	f7fd fb45 	bl	800b18c <__retarget_lock_release_recursive>
 800db02:	e7dd      	b.n	800dac0 <_fflush_r+0xc>

0800db04 <memmove>:
 800db04:	4288      	cmp	r0, r1
 800db06:	b510      	push	{r4, lr}
 800db08:	eb01 0402 	add.w	r4, r1, r2
 800db0c:	d902      	bls.n	800db14 <memmove+0x10>
 800db0e:	4284      	cmp	r4, r0
 800db10:	4623      	mov	r3, r4
 800db12:	d807      	bhi.n	800db24 <memmove+0x20>
 800db14:	1e43      	subs	r3, r0, #1
 800db16:	42a1      	cmp	r1, r4
 800db18:	d008      	beq.n	800db2c <memmove+0x28>
 800db1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db22:	e7f8      	b.n	800db16 <memmove+0x12>
 800db24:	4402      	add	r2, r0
 800db26:	4601      	mov	r1, r0
 800db28:	428a      	cmp	r2, r1
 800db2a:	d100      	bne.n	800db2e <memmove+0x2a>
 800db2c:	bd10      	pop	{r4, pc}
 800db2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db36:	e7f7      	b.n	800db28 <memmove+0x24>

0800db38 <strncmp>:
 800db38:	b510      	push	{r4, lr}
 800db3a:	b16a      	cbz	r2, 800db58 <strncmp+0x20>
 800db3c:	3901      	subs	r1, #1
 800db3e:	1884      	adds	r4, r0, r2
 800db40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db48:	429a      	cmp	r2, r3
 800db4a:	d103      	bne.n	800db54 <strncmp+0x1c>
 800db4c:	42a0      	cmp	r0, r4
 800db4e:	d001      	beq.n	800db54 <strncmp+0x1c>
 800db50:	2a00      	cmp	r2, #0
 800db52:	d1f5      	bne.n	800db40 <strncmp+0x8>
 800db54:	1ad0      	subs	r0, r2, r3
 800db56:	bd10      	pop	{r4, pc}
 800db58:	4610      	mov	r0, r2
 800db5a:	e7fc      	b.n	800db56 <strncmp+0x1e>

0800db5c <_sbrk_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	2300      	movs	r3, #0
 800db60:	4d05      	ldr	r5, [pc, #20]	@ (800db78 <_sbrk_r+0x1c>)
 800db62:	4604      	mov	r4, r0
 800db64:	4608      	mov	r0, r1
 800db66:	602b      	str	r3, [r5, #0]
 800db68:	f7f4 fe28 	bl	80027bc <_sbrk>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d102      	bne.n	800db76 <_sbrk_r+0x1a>
 800db70:	682b      	ldr	r3, [r5, #0]
 800db72:	b103      	cbz	r3, 800db76 <_sbrk_r+0x1a>
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	bd38      	pop	{r3, r4, r5, pc}
 800db78:	2003b398 	.word	0x2003b398
 800db7c:	00000000 	.word	0x00000000

0800db80 <nan>:
 800db80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db88 <nan+0x8>
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	00000000 	.word	0x00000000
 800db8c:	7ff80000 	.word	0x7ff80000

0800db90 <__assert_func>:
 800db90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db92:	4614      	mov	r4, r2
 800db94:	461a      	mov	r2, r3
 800db96:	4b09      	ldr	r3, [pc, #36]	@ (800dbbc <__assert_func+0x2c>)
 800db98:	4605      	mov	r5, r0
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68d8      	ldr	r0, [r3, #12]
 800db9e:	b954      	cbnz	r4, 800dbb6 <__assert_func+0x26>
 800dba0:	4b07      	ldr	r3, [pc, #28]	@ (800dbc0 <__assert_func+0x30>)
 800dba2:	461c      	mov	r4, r3
 800dba4:	9100      	str	r1, [sp, #0]
 800dba6:	4907      	ldr	r1, [pc, #28]	@ (800dbc4 <__assert_func+0x34>)
 800dba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbac:	462b      	mov	r3, r5
 800dbae:	f000 fba3 	bl	800e2f8 <fiprintf>
 800dbb2:	f000 fbb3 	bl	800e31c <abort>
 800dbb6:	4b04      	ldr	r3, [pc, #16]	@ (800dbc8 <__assert_func+0x38>)
 800dbb8:	e7f4      	b.n	800dba4 <__assert_func+0x14>
 800dbba:	bf00      	nop
 800dbbc:	20000028 	.word	0x20000028
 800dbc0:	0800ef9d 	.word	0x0800ef9d
 800dbc4:	0800ef6f 	.word	0x0800ef6f
 800dbc8:	0800ef62 	.word	0x0800ef62

0800dbcc <_calloc_r>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	fba1 5402 	umull	r5, r4, r1, r2
 800dbd2:	b93c      	cbnz	r4, 800dbe4 <_calloc_r+0x18>
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	f7fe f9c3 	bl	800bf60 <_malloc_r>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	b928      	cbnz	r0, 800dbea <_calloc_r+0x1e>
 800dbde:	2600      	movs	r6, #0
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	220c      	movs	r2, #12
 800dbe6:	6002      	str	r2, [r0, #0]
 800dbe8:	e7f9      	b.n	800dbde <_calloc_r+0x12>
 800dbea:	462a      	mov	r2, r5
 800dbec:	4621      	mov	r1, r4
 800dbee:	f7fd fa4e 	bl	800b08e <memset>
 800dbf2:	e7f5      	b.n	800dbe0 <_calloc_r+0x14>

0800dbf4 <rshift>:
 800dbf4:	6903      	ldr	r3, [r0, #16]
 800dbf6:	114a      	asrs	r2, r1, #5
 800dbf8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc00:	f100 0414 	add.w	r4, r0, #20
 800dc04:	dd45      	ble.n	800dc92 <rshift+0x9e>
 800dc06:	f011 011f 	ands.w	r1, r1, #31
 800dc0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc12:	d10c      	bne.n	800dc2e <rshift+0x3a>
 800dc14:	f100 0710 	add.w	r7, r0, #16
 800dc18:	4629      	mov	r1, r5
 800dc1a:	42b1      	cmp	r1, r6
 800dc1c:	d334      	bcc.n	800dc88 <rshift+0x94>
 800dc1e:	1a9b      	subs	r3, r3, r2
 800dc20:	1eea      	subs	r2, r5, #3
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4296      	cmp	r6, r2
 800dc26:	bf38      	it	cc
 800dc28:	2300      	movcc	r3, #0
 800dc2a:	4423      	add	r3, r4
 800dc2c:	e015      	b.n	800dc5a <rshift+0x66>
 800dc2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc32:	f1c1 0820 	rsb	r8, r1, #32
 800dc36:	f105 0e04 	add.w	lr, r5, #4
 800dc3a:	46a1      	mov	r9, r4
 800dc3c:	40cf      	lsrs	r7, r1
 800dc3e:	4576      	cmp	r6, lr
 800dc40:	46f4      	mov	ip, lr
 800dc42:	d815      	bhi.n	800dc70 <rshift+0x7c>
 800dc44:	1a9a      	subs	r2, r3, r2
 800dc46:	3501      	adds	r5, #1
 800dc48:	0092      	lsls	r2, r2, #2
 800dc4a:	3a04      	subs	r2, #4
 800dc4c:	42ae      	cmp	r6, r5
 800dc4e:	bf38      	it	cc
 800dc50:	2200      	movcc	r2, #0
 800dc52:	18a3      	adds	r3, r4, r2
 800dc54:	50a7      	str	r7, [r4, r2]
 800dc56:	b107      	cbz	r7, 800dc5a <rshift+0x66>
 800dc58:	3304      	adds	r3, #4
 800dc5a:	1b1a      	subs	r2, r3, r4
 800dc5c:	42a3      	cmp	r3, r4
 800dc5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc62:	bf08      	it	eq
 800dc64:	2300      	moveq	r3, #0
 800dc66:	6102      	str	r2, [r0, #16]
 800dc68:	bf08      	it	eq
 800dc6a:	6143      	streq	r3, [r0, #20]
 800dc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc70:	f8dc c000 	ldr.w	ip, [ip]
 800dc74:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc78:	ea4c 0707 	orr.w	r7, ip, r7
 800dc7c:	f849 7b04 	str.w	r7, [r9], #4
 800dc80:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc84:	40cf      	lsrs	r7, r1
 800dc86:	e7da      	b.n	800dc3e <rshift+0x4a>
 800dc88:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc8c:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc90:	e7c3      	b.n	800dc1a <rshift+0x26>
 800dc92:	4623      	mov	r3, r4
 800dc94:	e7e1      	b.n	800dc5a <rshift+0x66>

0800dc96 <__hexdig_fun>:
 800dc96:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dc9a:	2b09      	cmp	r3, #9
 800dc9c:	d802      	bhi.n	800dca4 <__hexdig_fun+0xe>
 800dc9e:	3820      	subs	r0, #32
 800dca0:	b2c0      	uxtb	r0, r0
 800dca2:	4770      	bx	lr
 800dca4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dca8:	2b05      	cmp	r3, #5
 800dcaa:	d801      	bhi.n	800dcb0 <__hexdig_fun+0x1a>
 800dcac:	3847      	subs	r0, #71	@ 0x47
 800dcae:	e7f7      	b.n	800dca0 <__hexdig_fun+0xa>
 800dcb0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dcb4:	2b05      	cmp	r3, #5
 800dcb6:	d801      	bhi.n	800dcbc <__hexdig_fun+0x26>
 800dcb8:	3827      	subs	r0, #39	@ 0x27
 800dcba:	e7f1      	b.n	800dca0 <__hexdig_fun+0xa>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	4770      	bx	lr

0800dcc0 <__gethex>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	468a      	mov	sl, r1
 800dcc8:	4690      	mov	r8, r2
 800dcca:	9302      	str	r3, [sp, #8]
 800dccc:	680b      	ldr	r3, [r1, #0]
 800dcce:	9001      	str	r0, [sp, #4]
 800dcd0:	1c9c      	adds	r4, r3, #2
 800dcd2:	46a1      	mov	r9, r4
 800dcd4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dcd8:	2830      	cmp	r0, #48	@ 0x30
 800dcda:	d0fa      	beq.n	800dcd2 <__gethex+0x12>
 800dcdc:	eba9 0303 	sub.w	r3, r9, r3
 800dce0:	f1a3 0b02 	sub.w	fp, r3, #2
 800dce4:	f7ff ffd7 	bl	800dc96 <__hexdig_fun>
 800dce8:	4605      	mov	r5, r0
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d166      	bne.n	800ddbc <__gethex+0xfc>
 800dcee:	2201      	movs	r2, #1
 800dcf0:	499e      	ldr	r1, [pc, #632]	@ (800df6c <__gethex+0x2ac>)
 800dcf2:	4648      	mov	r0, r9
 800dcf4:	f7ff ff20 	bl	800db38 <strncmp>
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d165      	bne.n	800ddca <__gethex+0x10a>
 800dcfe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd02:	4626      	mov	r6, r4
 800dd04:	f7ff ffc7 	bl	800dc96 <__hexdig_fun>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d060      	beq.n	800ddce <__gethex+0x10e>
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	7818      	ldrb	r0, [r3, #0]
 800dd10:	4699      	mov	r9, r3
 800dd12:	3301      	adds	r3, #1
 800dd14:	2830      	cmp	r0, #48	@ 0x30
 800dd16:	d0fa      	beq.n	800dd0e <__gethex+0x4e>
 800dd18:	f7ff ffbd 	bl	800dc96 <__hexdig_fun>
 800dd1c:	fab0 f580 	clz	r5, r0
 800dd20:	f04f 0b01 	mov.w	fp, #1
 800dd24:	096d      	lsrs	r5, r5, #5
 800dd26:	464a      	mov	r2, r9
 800dd28:	4616      	mov	r6, r2
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	7830      	ldrb	r0, [r6, #0]
 800dd2e:	f7ff ffb2 	bl	800dc96 <__hexdig_fun>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d1f8      	bne.n	800dd28 <__gethex+0x68>
 800dd36:	2201      	movs	r2, #1
 800dd38:	498c      	ldr	r1, [pc, #560]	@ (800df6c <__gethex+0x2ac>)
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7ff fefc 	bl	800db38 <strncmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d13e      	bne.n	800ddc2 <__gethex+0x102>
 800dd44:	b944      	cbnz	r4, 800dd58 <__gethex+0x98>
 800dd46:	1c74      	adds	r4, r6, #1
 800dd48:	4622      	mov	r2, r4
 800dd4a:	4616      	mov	r6, r2
 800dd4c:	3201      	adds	r2, #1
 800dd4e:	7830      	ldrb	r0, [r6, #0]
 800dd50:	f7ff ffa1 	bl	800dc96 <__hexdig_fun>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d1f8      	bne.n	800dd4a <__gethex+0x8a>
 800dd58:	1ba4      	subs	r4, r4, r6
 800dd5a:	00a7      	lsls	r7, r4, #2
 800dd5c:	7833      	ldrb	r3, [r6, #0]
 800dd5e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd62:	2b50      	cmp	r3, #80	@ 0x50
 800dd64:	d13d      	bne.n	800dde2 <__gethex+0x122>
 800dd66:	7873      	ldrb	r3, [r6, #1]
 800dd68:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd6a:	d032      	beq.n	800ddd2 <__gethex+0x112>
 800dd6c:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd6e:	d033      	beq.n	800ddd8 <__gethex+0x118>
 800dd70:	1c71      	adds	r1, r6, #1
 800dd72:	2400      	movs	r4, #0
 800dd74:	7808      	ldrb	r0, [r1, #0]
 800dd76:	f7ff ff8e 	bl	800dc96 <__hexdig_fun>
 800dd7a:	1e43      	subs	r3, r0, #1
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b18      	cmp	r3, #24
 800dd80:	d82f      	bhi.n	800dde2 <__gethex+0x122>
 800dd82:	f1a0 0210 	sub.w	r2, r0, #16
 800dd86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd8a:	f7ff ff84 	bl	800dc96 <__hexdig_fun>
 800dd8e:	f100 3cff 	add.w	ip, r0, #4294967295
 800dd92:	230a      	movs	r3, #10
 800dd94:	fa5f fc8c 	uxtb.w	ip, ip
 800dd98:	f1bc 0f18 	cmp.w	ip, #24
 800dd9c:	d91e      	bls.n	800dddc <__gethex+0x11c>
 800dd9e:	b104      	cbz	r4, 800dda2 <__gethex+0xe2>
 800dda0:	4252      	negs	r2, r2
 800dda2:	4417      	add	r7, r2
 800dda4:	f8ca 1000 	str.w	r1, [sl]
 800dda8:	b1ed      	cbz	r5, 800dde6 <__gethex+0x126>
 800ddaa:	f1bb 0f00 	cmp.w	fp, #0
 800ddae:	bf0c      	ite	eq
 800ddb0:	2506      	moveq	r5, #6
 800ddb2:	2500      	movne	r5, #0
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	b005      	add	sp, #20
 800ddb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	462c      	mov	r4, r5
 800ddc0:	e7b1      	b.n	800dd26 <__gethex+0x66>
 800ddc2:	2c00      	cmp	r4, #0
 800ddc4:	d1c8      	bne.n	800dd58 <__gethex+0x98>
 800ddc6:	4627      	mov	r7, r4
 800ddc8:	e7c8      	b.n	800dd5c <__gethex+0x9c>
 800ddca:	464e      	mov	r6, r9
 800ddcc:	462f      	mov	r7, r5
 800ddce:	2501      	movs	r5, #1
 800ddd0:	e7c4      	b.n	800dd5c <__gethex+0x9c>
 800ddd2:	2400      	movs	r4, #0
 800ddd4:	1cb1      	adds	r1, r6, #2
 800ddd6:	e7cd      	b.n	800dd74 <__gethex+0xb4>
 800ddd8:	2401      	movs	r4, #1
 800ddda:	e7fb      	b.n	800ddd4 <__gethex+0x114>
 800dddc:	fb03 0002 	mla	r0, r3, r2, r0
 800dde0:	e7cf      	b.n	800dd82 <__gethex+0xc2>
 800dde2:	4631      	mov	r1, r6
 800dde4:	e7de      	b.n	800dda4 <__gethex+0xe4>
 800dde6:	eba6 0309 	sub.w	r3, r6, r9
 800ddea:	4629      	mov	r1, r5
 800ddec:	3b01      	subs	r3, #1
 800ddee:	2b07      	cmp	r3, #7
 800ddf0:	dc0a      	bgt.n	800de08 <__gethex+0x148>
 800ddf2:	9801      	ldr	r0, [sp, #4]
 800ddf4:	f7fe f940 	bl	800c078 <_Balloc>
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	b940      	cbnz	r0, 800de0e <__gethex+0x14e>
 800ddfc:	4b5c      	ldr	r3, [pc, #368]	@ (800df70 <__gethex+0x2b0>)
 800ddfe:	4602      	mov	r2, r0
 800de00:	21e4      	movs	r1, #228	@ 0xe4
 800de02:	485c      	ldr	r0, [pc, #368]	@ (800df74 <__gethex+0x2b4>)
 800de04:	f7ff fec4 	bl	800db90 <__assert_func>
 800de08:	3101      	adds	r1, #1
 800de0a:	105b      	asrs	r3, r3, #1
 800de0c:	e7ef      	b.n	800ddee <__gethex+0x12e>
 800de0e:	f100 0a14 	add.w	sl, r0, #20
 800de12:	2300      	movs	r3, #0
 800de14:	4655      	mov	r5, sl
 800de16:	469b      	mov	fp, r3
 800de18:	45b1      	cmp	r9, r6
 800de1a:	d337      	bcc.n	800de8c <__gethex+0x1cc>
 800de1c:	f845 bb04 	str.w	fp, [r5], #4
 800de20:	eba5 050a 	sub.w	r5, r5, sl
 800de24:	4658      	mov	r0, fp
 800de26:	10ad      	asrs	r5, r5, #2
 800de28:	6125      	str	r5, [r4, #16]
 800de2a:	016d      	lsls	r5, r5, #5
 800de2c:	f7fe fa18 	bl	800c260 <__hi0bits>
 800de30:	f8d8 6000 	ldr.w	r6, [r8]
 800de34:	1a2d      	subs	r5, r5, r0
 800de36:	42b5      	cmp	r5, r6
 800de38:	dd54      	ble.n	800dee4 <__gethex+0x224>
 800de3a:	1bad      	subs	r5, r5, r6
 800de3c:	4620      	mov	r0, r4
 800de3e:	4629      	mov	r1, r5
 800de40:	f7fe fdb5 	bl	800c9ae <__any_on>
 800de44:	4681      	mov	r9, r0
 800de46:	b178      	cbz	r0, 800de68 <__gethex+0x1a8>
 800de48:	1e6b      	subs	r3, r5, #1
 800de4a:	f04f 0901 	mov.w	r9, #1
 800de4e:	1159      	asrs	r1, r3, #5
 800de50:	f003 021f 	and.w	r2, r3, #31
 800de54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de58:	fa09 f202 	lsl.w	r2, r9, r2
 800de5c:	420a      	tst	r2, r1
 800de5e:	d003      	beq.n	800de68 <__gethex+0x1a8>
 800de60:	454b      	cmp	r3, r9
 800de62:	dc36      	bgt.n	800ded2 <__gethex+0x212>
 800de64:	f04f 0902 	mov.w	r9, #2
 800de68:	442f      	add	r7, r5
 800de6a:	4629      	mov	r1, r5
 800de6c:	4620      	mov	r0, r4
 800de6e:	f7ff fec1 	bl	800dbf4 <rshift>
 800de72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de76:	42bb      	cmp	r3, r7
 800de78:	da42      	bge.n	800df00 <__gethex+0x240>
 800de7a:	4621      	mov	r1, r4
 800de7c:	9801      	ldr	r0, [sp, #4]
 800de7e:	f7fe f93b 	bl	800c0f8 <_Bfree>
 800de82:	2300      	movs	r3, #0
 800de84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de86:	25a3      	movs	r5, #163	@ 0xa3
 800de88:	6013      	str	r3, [r2, #0]
 800de8a:	e793      	b.n	800ddb4 <__gethex+0xf4>
 800de8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800de90:	2a2e      	cmp	r2, #46	@ 0x2e
 800de92:	d012      	beq.n	800deba <__gethex+0x1fa>
 800de94:	2b20      	cmp	r3, #32
 800de96:	d104      	bne.n	800dea2 <__gethex+0x1e2>
 800de98:	f845 bb04 	str.w	fp, [r5], #4
 800de9c:	f04f 0b00 	mov.w	fp, #0
 800dea0:	465b      	mov	r3, fp
 800dea2:	7830      	ldrb	r0, [r6, #0]
 800dea4:	9303      	str	r3, [sp, #12]
 800dea6:	f7ff fef6 	bl	800dc96 <__hexdig_fun>
 800deaa:	9b03      	ldr	r3, [sp, #12]
 800deac:	f000 000f 	and.w	r0, r0, #15
 800deb0:	4098      	lsls	r0, r3
 800deb2:	3304      	adds	r3, #4
 800deb4:	ea4b 0b00 	orr.w	fp, fp, r0
 800deb8:	e7ae      	b.n	800de18 <__gethex+0x158>
 800deba:	45b1      	cmp	r9, r6
 800debc:	d8ea      	bhi.n	800de94 <__gethex+0x1d4>
 800debe:	2201      	movs	r2, #1
 800dec0:	492a      	ldr	r1, [pc, #168]	@ (800df6c <__gethex+0x2ac>)
 800dec2:	4630      	mov	r0, r6
 800dec4:	9303      	str	r3, [sp, #12]
 800dec6:	f7ff fe37 	bl	800db38 <strncmp>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	2800      	cmp	r0, #0
 800dece:	d1e1      	bne.n	800de94 <__gethex+0x1d4>
 800ded0:	e7a2      	b.n	800de18 <__gethex+0x158>
 800ded2:	1ea9      	subs	r1, r5, #2
 800ded4:	4620      	mov	r0, r4
 800ded6:	f7fe fd6a 	bl	800c9ae <__any_on>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d0c2      	beq.n	800de64 <__gethex+0x1a4>
 800dede:	f04f 0903 	mov.w	r9, #3
 800dee2:	e7c1      	b.n	800de68 <__gethex+0x1a8>
 800dee4:	da09      	bge.n	800defa <__gethex+0x23a>
 800dee6:	1b75      	subs	r5, r6, r5
 800dee8:	4621      	mov	r1, r4
 800deea:	9801      	ldr	r0, [sp, #4]
 800deec:	462a      	mov	r2, r5
 800deee:	1b7f      	subs	r7, r7, r5
 800def0:	f7fe fb1c 	bl	800c52c <__lshift>
 800def4:	4604      	mov	r4, r0
 800def6:	f100 0a14 	add.w	sl, r0, #20
 800defa:	f04f 0900 	mov.w	r9, #0
 800defe:	e7b8      	b.n	800de72 <__gethex+0x1b2>
 800df00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df04:	42bd      	cmp	r5, r7
 800df06:	dd6f      	ble.n	800dfe8 <__gethex+0x328>
 800df08:	1bed      	subs	r5, r5, r7
 800df0a:	42ae      	cmp	r6, r5
 800df0c:	dc34      	bgt.n	800df78 <__gethex+0x2b8>
 800df0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df12:	2b02      	cmp	r3, #2
 800df14:	d022      	beq.n	800df5c <__gethex+0x29c>
 800df16:	2b03      	cmp	r3, #3
 800df18:	d024      	beq.n	800df64 <__gethex+0x2a4>
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d115      	bne.n	800df4a <__gethex+0x28a>
 800df1e:	42ae      	cmp	r6, r5
 800df20:	d113      	bne.n	800df4a <__gethex+0x28a>
 800df22:	2e01      	cmp	r6, #1
 800df24:	d10b      	bne.n	800df3e <__gethex+0x27e>
 800df26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df2a:	2562      	movs	r5, #98	@ 0x62
 800df2c:	9a02      	ldr	r2, [sp, #8]
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	2301      	movs	r3, #1
 800df32:	6123      	str	r3, [r4, #16]
 800df34:	f8ca 3000 	str.w	r3, [sl]
 800df38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df3a:	601c      	str	r4, [r3, #0]
 800df3c:	e73a      	b.n	800ddb4 <__gethex+0xf4>
 800df3e:	1e71      	subs	r1, r6, #1
 800df40:	4620      	mov	r0, r4
 800df42:	f7fe fd34 	bl	800c9ae <__any_on>
 800df46:	2800      	cmp	r0, #0
 800df48:	d1ed      	bne.n	800df26 <__gethex+0x266>
 800df4a:	4621      	mov	r1, r4
 800df4c:	9801      	ldr	r0, [sp, #4]
 800df4e:	f7fe f8d3 	bl	800c0f8 <_Bfree>
 800df52:	2300      	movs	r3, #0
 800df54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df56:	2550      	movs	r5, #80	@ 0x50
 800df58:	6013      	str	r3, [r2, #0]
 800df5a:	e72b      	b.n	800ddb4 <__gethex+0xf4>
 800df5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1f3      	bne.n	800df4a <__gethex+0x28a>
 800df62:	e7e0      	b.n	800df26 <__gethex+0x266>
 800df64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1dd      	bne.n	800df26 <__gethex+0x266>
 800df6a:	e7ee      	b.n	800df4a <__gethex+0x28a>
 800df6c:	0800edf0 	.word	0x0800edf0
 800df70:	0800ec89 	.word	0x0800ec89
 800df74:	0800ef9e 	.word	0x0800ef9e
 800df78:	1e6f      	subs	r7, r5, #1
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	d130      	bne.n	800dfe2 <__gethex+0x322>
 800df80:	b127      	cbz	r7, 800df8c <__gethex+0x2cc>
 800df82:	4639      	mov	r1, r7
 800df84:	4620      	mov	r0, r4
 800df86:	f7fe fd12 	bl	800c9ae <__any_on>
 800df8a:	4681      	mov	r9, r0
 800df8c:	117a      	asrs	r2, r7, #5
 800df8e:	2301      	movs	r3, #1
 800df90:	f007 071f 	and.w	r7, r7, #31
 800df94:	4629      	mov	r1, r5
 800df96:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800df9a:	4620      	mov	r0, r4
 800df9c:	40bb      	lsls	r3, r7
 800df9e:	1b76      	subs	r6, r6, r5
 800dfa0:	2502      	movs	r5, #2
 800dfa2:	4213      	tst	r3, r2
 800dfa4:	bf18      	it	ne
 800dfa6:	f049 0902 	orrne.w	r9, r9, #2
 800dfaa:	f7ff fe23 	bl	800dbf4 <rshift>
 800dfae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dfb2:	f1b9 0f00 	cmp.w	r9, #0
 800dfb6:	d047      	beq.n	800e048 <__gethex+0x388>
 800dfb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d015      	beq.n	800dfec <__gethex+0x32c>
 800dfc0:	2b03      	cmp	r3, #3
 800dfc2:	d017      	beq.n	800dff4 <__gethex+0x334>
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d109      	bne.n	800dfdc <__gethex+0x31c>
 800dfc8:	f019 0f02 	tst.w	r9, #2
 800dfcc:	d006      	beq.n	800dfdc <__gethex+0x31c>
 800dfce:	f8da 3000 	ldr.w	r3, [sl]
 800dfd2:	ea49 0903 	orr.w	r9, r9, r3
 800dfd6:	f019 0f01 	tst.w	r9, #1
 800dfda:	d10e      	bne.n	800dffa <__gethex+0x33a>
 800dfdc:	f045 0510 	orr.w	r5, r5, #16
 800dfe0:	e032      	b.n	800e048 <__gethex+0x388>
 800dfe2:	f04f 0901 	mov.w	r9, #1
 800dfe6:	e7d1      	b.n	800df8c <__gethex+0x2cc>
 800dfe8:	2501      	movs	r5, #1
 800dfea:	e7e2      	b.n	800dfb2 <__gethex+0x2f2>
 800dfec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfee:	f1c3 0301 	rsb	r3, r3, #1
 800dff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0f0      	beq.n	800dfdc <__gethex+0x31c>
 800dffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dffe:	f104 0314 	add.w	r3, r4, #20
 800e002:	f04f 0c00 	mov.w	ip, #0
 800e006:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e00a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e00e:	4618      	mov	r0, r3
 800e010:	f853 2b04 	ldr.w	r2, [r3], #4
 800e014:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e018:	d01b      	beq.n	800e052 <__gethex+0x392>
 800e01a:	3201      	adds	r2, #1
 800e01c:	6002      	str	r2, [r0, #0]
 800e01e:	2d02      	cmp	r5, #2
 800e020:	f104 0314 	add.w	r3, r4, #20
 800e024:	d13c      	bne.n	800e0a0 <__gethex+0x3e0>
 800e026:	f8d8 2000 	ldr.w	r2, [r8]
 800e02a:	3a01      	subs	r2, #1
 800e02c:	42b2      	cmp	r2, r6
 800e02e:	d109      	bne.n	800e044 <__gethex+0x384>
 800e030:	1171      	asrs	r1, r6, #5
 800e032:	2201      	movs	r2, #1
 800e034:	f006 061f 	and.w	r6, r6, #31
 800e038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e03c:	fa02 f606 	lsl.w	r6, r2, r6
 800e040:	421e      	tst	r6, r3
 800e042:	d13a      	bne.n	800e0ba <__gethex+0x3fa>
 800e044:	f045 0520 	orr.w	r5, r5, #32
 800e048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e04a:	601c      	str	r4, [r3, #0]
 800e04c:	9b02      	ldr	r3, [sp, #8]
 800e04e:	601f      	str	r7, [r3, #0]
 800e050:	e6b0      	b.n	800ddb4 <__gethex+0xf4>
 800e052:	4299      	cmp	r1, r3
 800e054:	f843 cc04 	str.w	ip, [r3, #-4]
 800e058:	d8d9      	bhi.n	800e00e <__gethex+0x34e>
 800e05a:	68a3      	ldr	r3, [r4, #8]
 800e05c:	459b      	cmp	fp, r3
 800e05e:	db17      	blt.n	800e090 <__gethex+0x3d0>
 800e060:	6861      	ldr	r1, [r4, #4]
 800e062:	9801      	ldr	r0, [sp, #4]
 800e064:	3101      	adds	r1, #1
 800e066:	f7fe f807 	bl	800c078 <_Balloc>
 800e06a:	4681      	mov	r9, r0
 800e06c:	b918      	cbnz	r0, 800e076 <__gethex+0x3b6>
 800e06e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0d8 <__gethex+0x418>)
 800e070:	4602      	mov	r2, r0
 800e072:	2184      	movs	r1, #132	@ 0x84
 800e074:	e6c5      	b.n	800de02 <__gethex+0x142>
 800e076:	6922      	ldr	r2, [r4, #16]
 800e078:	f104 010c 	add.w	r1, r4, #12
 800e07c:	300c      	adds	r0, #12
 800e07e:	3202      	adds	r2, #2
 800e080:	0092      	lsls	r2, r2, #2
 800e082:	f7fd f892 	bl	800b1aa <memcpy>
 800e086:	4621      	mov	r1, r4
 800e088:	464c      	mov	r4, r9
 800e08a:	9801      	ldr	r0, [sp, #4]
 800e08c:	f7fe f834 	bl	800c0f8 <_Bfree>
 800e090:	6923      	ldr	r3, [r4, #16]
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e098:	6122      	str	r2, [r4, #16]
 800e09a:	2201      	movs	r2, #1
 800e09c:	615a      	str	r2, [r3, #20]
 800e09e:	e7be      	b.n	800e01e <__gethex+0x35e>
 800e0a0:	6922      	ldr	r2, [r4, #16]
 800e0a2:	455a      	cmp	r2, fp
 800e0a4:	dd0b      	ble.n	800e0be <__gethex+0x3fe>
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7ff fda3 	bl	800dbf4 <rshift>
 800e0ae:	3701      	adds	r7, #1
 800e0b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0b4:	42bb      	cmp	r3, r7
 800e0b6:	f6ff aee0 	blt.w	800de7a <__gethex+0x1ba>
 800e0ba:	2501      	movs	r5, #1
 800e0bc:	e7c2      	b.n	800e044 <__gethex+0x384>
 800e0be:	f016 061f 	ands.w	r6, r6, #31
 800e0c2:	d0fa      	beq.n	800e0ba <__gethex+0x3fa>
 800e0c4:	4453      	add	r3, sl
 800e0c6:	f1c6 0620 	rsb	r6, r6, #32
 800e0ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0ce:	f7fe f8c7 	bl	800c260 <__hi0bits>
 800e0d2:	42b0      	cmp	r0, r6
 800e0d4:	dbe7      	blt.n	800e0a6 <__gethex+0x3e6>
 800e0d6:	e7f0      	b.n	800e0ba <__gethex+0x3fa>
 800e0d8:	0800ec89 	.word	0x0800ec89

0800e0dc <L_shift>:
 800e0dc:	f1c2 0208 	rsb	r2, r2, #8
 800e0e0:	0092      	lsls	r2, r2, #2
 800e0e2:	b570      	push	{r4, r5, r6, lr}
 800e0e4:	f1c2 0620 	rsb	r6, r2, #32
 800e0e8:	6843      	ldr	r3, [r0, #4]
 800e0ea:	6804      	ldr	r4, [r0, #0]
 800e0ec:	fa03 f506 	lsl.w	r5, r3, r6
 800e0f0:	40d3      	lsrs	r3, r2
 800e0f2:	432c      	orrs	r4, r5
 800e0f4:	6004      	str	r4, [r0, #0]
 800e0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e0fa:	4288      	cmp	r0, r1
 800e0fc:	d3f4      	bcc.n	800e0e8 <L_shift+0xc>
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}

0800e100 <__match>:
 800e100:	6803      	ldr	r3, [r0, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	b530      	push	{r4, r5, lr}
 800e106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10a:	b914      	cbnz	r4, 800e112 <__match+0x12>
 800e10c:	6003      	str	r3, [r0, #0]
 800e10e:	2001      	movs	r0, #1
 800e110:	bd30      	pop	{r4, r5, pc}
 800e112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e11a:	2d19      	cmp	r5, #25
 800e11c:	bf98      	it	ls
 800e11e:	3220      	addls	r2, #32
 800e120:	42a2      	cmp	r2, r4
 800e122:	d0f0      	beq.n	800e106 <__match+0x6>
 800e124:	2000      	movs	r0, #0
 800e126:	e7f3      	b.n	800e110 <__match+0x10>

0800e128 <__hexnan>:
 800e128:	680b      	ldr	r3, [r1, #0]
 800e12a:	6801      	ldr	r1, [r0, #0]
 800e12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e130:	115e      	asrs	r6, r3, #5
 800e132:	f013 031f 	ands.w	r3, r3, #31
 800e136:	f04f 0500 	mov.w	r5, #0
 800e13a:	b087      	sub	sp, #28
 800e13c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e140:	4682      	mov	sl, r0
 800e142:	4690      	mov	r8, r2
 800e144:	46ab      	mov	fp, r5
 800e146:	bf18      	it	ne
 800e148:	3604      	addne	r6, #4
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	9502      	str	r5, [sp, #8]
 800e14e:	1f37      	subs	r7, r6, #4
 800e150:	f846 5c04 	str.w	r5, [r6, #-4]
 800e154:	46b9      	mov	r9, r7
 800e156:	463c      	mov	r4, r7
 800e158:	1c4b      	adds	r3, r1, #1
 800e15a:	784a      	ldrb	r2, [r1, #1]
 800e15c:	9303      	str	r3, [sp, #12]
 800e15e:	b342      	cbz	r2, 800e1b2 <__hexnan+0x8a>
 800e160:	4610      	mov	r0, r2
 800e162:	9105      	str	r1, [sp, #20]
 800e164:	9204      	str	r2, [sp, #16]
 800e166:	f7ff fd96 	bl	800dc96 <__hexdig_fun>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d151      	bne.n	800e212 <__hexnan+0xea>
 800e16e:	9a04      	ldr	r2, [sp, #16]
 800e170:	9905      	ldr	r1, [sp, #20]
 800e172:	2a20      	cmp	r2, #32
 800e174:	d818      	bhi.n	800e1a8 <__hexnan+0x80>
 800e176:	9b02      	ldr	r3, [sp, #8]
 800e178:	459b      	cmp	fp, r3
 800e17a:	dd13      	ble.n	800e1a4 <__hexnan+0x7c>
 800e17c:	454c      	cmp	r4, r9
 800e17e:	d206      	bcs.n	800e18e <__hexnan+0x66>
 800e180:	2d07      	cmp	r5, #7
 800e182:	dc04      	bgt.n	800e18e <__hexnan+0x66>
 800e184:	462a      	mov	r2, r5
 800e186:	4649      	mov	r1, r9
 800e188:	4620      	mov	r0, r4
 800e18a:	f7ff ffa7 	bl	800e0dc <L_shift>
 800e18e:	4544      	cmp	r4, r8
 800e190:	d951      	bls.n	800e236 <__hexnan+0x10e>
 800e192:	2300      	movs	r3, #0
 800e194:	f1a4 0904 	sub.w	r9, r4, #4
 800e198:	f8cd b008 	str.w	fp, [sp, #8]
 800e19c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1a0:	461d      	mov	r5, r3
 800e1a2:	464c      	mov	r4, r9
 800e1a4:	9903      	ldr	r1, [sp, #12]
 800e1a6:	e7d7      	b.n	800e158 <__hexnan+0x30>
 800e1a8:	2a29      	cmp	r2, #41	@ 0x29
 800e1aa:	d156      	bne.n	800e25a <__hexnan+0x132>
 800e1ac:	3102      	adds	r1, #2
 800e1ae:	f8ca 1000 	str.w	r1, [sl]
 800e1b2:	f1bb 0f00 	cmp.w	fp, #0
 800e1b6:	d050      	beq.n	800e25a <__hexnan+0x132>
 800e1b8:	454c      	cmp	r4, r9
 800e1ba:	d206      	bcs.n	800e1ca <__hexnan+0xa2>
 800e1bc:	2d07      	cmp	r5, #7
 800e1be:	dc04      	bgt.n	800e1ca <__hexnan+0xa2>
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7ff ff89 	bl	800e0dc <L_shift>
 800e1ca:	4544      	cmp	r4, r8
 800e1cc:	d935      	bls.n	800e23a <__hexnan+0x112>
 800e1ce:	f1a8 0204 	sub.w	r2, r8, #4
 800e1d2:	4623      	mov	r3, r4
 800e1d4:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1d8:	429f      	cmp	r7, r3
 800e1da:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1de:	d2f9      	bcs.n	800e1d4 <__hexnan+0xac>
 800e1e0:	1b3b      	subs	r3, r7, r4
 800e1e2:	3e03      	subs	r6, #3
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f023 0303 	bic.w	r3, r3, #3
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	42b4      	cmp	r4, r6
 800e1f0:	bf88      	it	hi
 800e1f2:	2304      	movhi	r3, #4
 800e1f4:	4443      	add	r3, r8
 800e1f6:	f843 2b04 	str.w	r2, [r3], #4
 800e1fa:	429f      	cmp	r7, r3
 800e1fc:	d2fb      	bcs.n	800e1f6 <__hexnan+0xce>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	b91b      	cbnz	r3, 800e20a <__hexnan+0xe2>
 800e202:	4547      	cmp	r7, r8
 800e204:	d127      	bne.n	800e256 <__hexnan+0x12e>
 800e206:	2301      	movs	r3, #1
 800e208:	603b      	str	r3, [r7, #0]
 800e20a:	2005      	movs	r0, #5
 800e20c:	b007      	add	sp, #28
 800e20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e212:	3501      	adds	r5, #1
 800e214:	f10b 0b01 	add.w	fp, fp, #1
 800e218:	2d08      	cmp	r5, #8
 800e21a:	dd05      	ble.n	800e228 <__hexnan+0x100>
 800e21c:	4544      	cmp	r4, r8
 800e21e:	d9c1      	bls.n	800e1a4 <__hexnan+0x7c>
 800e220:	2300      	movs	r3, #0
 800e222:	3c04      	subs	r4, #4
 800e224:	2501      	movs	r5, #1
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	6822      	ldr	r2, [r4, #0]
 800e22a:	f000 000f 	and.w	r0, r0, #15
 800e22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e232:	6020      	str	r0, [r4, #0]
 800e234:	e7b6      	b.n	800e1a4 <__hexnan+0x7c>
 800e236:	2508      	movs	r5, #8
 800e238:	e7b4      	b.n	800e1a4 <__hexnan+0x7c>
 800e23a:	9b01      	ldr	r3, [sp, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0de      	beq.n	800e1fe <__hexnan+0xd6>
 800e240:	f1c3 0320 	rsb	r3, r3, #32
 800e244:	f04f 32ff 	mov.w	r2, #4294967295
 800e248:	40da      	lsrs	r2, r3
 800e24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e24e:	4013      	ands	r3, r2
 800e250:	f846 3c04 	str.w	r3, [r6, #-4]
 800e254:	e7d3      	b.n	800e1fe <__hexnan+0xd6>
 800e256:	3f04      	subs	r7, #4
 800e258:	e7d1      	b.n	800e1fe <__hexnan+0xd6>
 800e25a:	2004      	movs	r0, #4
 800e25c:	e7d6      	b.n	800e20c <__hexnan+0xe4>

0800e25e <__ascii_mbtowc>:
 800e25e:	b082      	sub	sp, #8
 800e260:	b901      	cbnz	r1, 800e264 <__ascii_mbtowc+0x6>
 800e262:	a901      	add	r1, sp, #4
 800e264:	b142      	cbz	r2, 800e278 <__ascii_mbtowc+0x1a>
 800e266:	b14b      	cbz	r3, 800e27c <__ascii_mbtowc+0x1e>
 800e268:	7813      	ldrb	r3, [r2, #0]
 800e26a:	600b      	str	r3, [r1, #0]
 800e26c:	7812      	ldrb	r2, [r2, #0]
 800e26e:	1e10      	subs	r0, r2, #0
 800e270:	bf18      	it	ne
 800e272:	2001      	movne	r0, #1
 800e274:	b002      	add	sp, #8
 800e276:	4770      	bx	lr
 800e278:	4610      	mov	r0, r2
 800e27a:	e7fb      	b.n	800e274 <__ascii_mbtowc+0x16>
 800e27c:	f06f 0001 	mvn.w	r0, #1
 800e280:	e7f8      	b.n	800e274 <__ascii_mbtowc+0x16>

0800e282 <_realloc_r>:
 800e282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	4680      	mov	r8, r0
 800e288:	4615      	mov	r5, r2
 800e28a:	460c      	mov	r4, r1
 800e28c:	b921      	cbnz	r1, 800e298 <_realloc_r+0x16>
 800e28e:	4611      	mov	r1, r2
 800e290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	f7fd be64 	b.w	800bf60 <_malloc_r>
 800e298:	b92a      	cbnz	r2, 800e2a6 <_realloc_r+0x24>
 800e29a:	f7fd fded 	bl	800be78 <_free_r>
 800e29e:	2400      	movs	r4, #0
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a6:	f000 f840 	bl	800e32a <_malloc_usable_size_r>
 800e2aa:	4285      	cmp	r5, r0
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	d802      	bhi.n	800e2b6 <_realloc_r+0x34>
 800e2b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2b4:	d8f4      	bhi.n	800e2a0 <_realloc_r+0x1e>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	f7fd fe51 	bl	800bf60 <_malloc_r>
 800e2be:	4607      	mov	r7, r0
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d0ec      	beq.n	800e29e <_realloc_r+0x1c>
 800e2c4:	42b5      	cmp	r5, r6
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	bf28      	it	cs
 800e2cc:	4632      	movcs	r2, r6
 800e2ce:	f7fc ff6c 	bl	800b1aa <memcpy>
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	463c      	mov	r4, r7
 800e2d8:	f7fd fdce 	bl	800be78 <_free_r>
 800e2dc:	e7e0      	b.n	800e2a0 <_realloc_r+0x1e>

0800e2de <__ascii_wctomb>:
 800e2de:	4603      	mov	r3, r0
 800e2e0:	4608      	mov	r0, r1
 800e2e2:	b141      	cbz	r1, 800e2f6 <__ascii_wctomb+0x18>
 800e2e4:	2aff      	cmp	r2, #255	@ 0xff
 800e2e6:	d904      	bls.n	800e2f2 <__ascii_wctomb+0x14>
 800e2e8:	228a      	movs	r2, #138	@ 0x8a
 800e2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ee:	601a      	str	r2, [r3, #0]
 800e2f0:	4770      	bx	lr
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	700a      	strb	r2, [r1, #0]
 800e2f6:	4770      	bx	lr

0800e2f8 <fiprintf>:
 800e2f8:	b40e      	push	{r1, r2, r3}
 800e2fa:	b503      	push	{r0, r1, lr}
 800e2fc:	ab03      	add	r3, sp, #12
 800e2fe:	4601      	mov	r1, r0
 800e300:	4805      	ldr	r0, [pc, #20]	@ (800e318 <fiprintf+0x20>)
 800e302:	f853 2b04 	ldr.w	r2, [r3], #4
 800e306:	6800      	ldr	r0, [r0, #0]
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	f000 f83f 	bl	800e38c <_vfiprintf_r>
 800e30e:	b002      	add	sp, #8
 800e310:	f85d eb04 	ldr.w	lr, [sp], #4
 800e314:	b003      	add	sp, #12
 800e316:	4770      	bx	lr
 800e318:	20000028 	.word	0x20000028

0800e31c <abort>:
 800e31c:	2006      	movs	r0, #6
 800e31e:	b508      	push	{r3, lr}
 800e320:	f000 fa08 	bl	800e734 <raise>
 800e324:	2001      	movs	r0, #1
 800e326:	f7f4 f9d1 	bl	80026cc <_exit>

0800e32a <_malloc_usable_size_r>:
 800e32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e32e:	1f18      	subs	r0, r3, #4
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfbc      	itt	lt
 800e334:	580b      	ldrlt	r3, [r1, r0]
 800e336:	18c0      	addlt	r0, r0, r3
 800e338:	4770      	bx	lr

0800e33a <__sfputc_r>:
 800e33a:	6893      	ldr	r3, [r2, #8]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	2b00      	cmp	r3, #0
 800e340:	6093      	str	r3, [r2, #8]
 800e342:	b410      	push	{r4}
 800e344:	da08      	bge.n	800e358 <__sfputc_r+0x1e>
 800e346:	6994      	ldr	r4, [r2, #24]
 800e348:	42a3      	cmp	r3, r4
 800e34a:	db01      	blt.n	800e350 <__sfputc_r+0x16>
 800e34c:	290a      	cmp	r1, #10
 800e34e:	d103      	bne.n	800e358 <__sfputc_r+0x1e>
 800e350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e354:	f000 b932 	b.w	800e5bc <__swbuf_r>
 800e358:	6813      	ldr	r3, [r2, #0]
 800e35a:	1c58      	adds	r0, r3, #1
 800e35c:	6010      	str	r0, [r2, #0]
 800e35e:	4608      	mov	r0, r1
 800e360:	7019      	strb	r1, [r3, #0]
 800e362:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <__sfputs_r>:
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	4606      	mov	r6, r0
 800e36c:	460f      	mov	r7, r1
 800e36e:	4614      	mov	r4, r2
 800e370:	18d5      	adds	r5, r2, r3
 800e372:	42ac      	cmp	r4, r5
 800e374:	d101      	bne.n	800e37a <__sfputs_r+0x12>
 800e376:	2000      	movs	r0, #0
 800e378:	e007      	b.n	800e38a <__sfputs_r+0x22>
 800e37a:	463a      	mov	r2, r7
 800e37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e380:	4630      	mov	r0, r6
 800e382:	f7ff ffda 	bl	800e33a <__sfputc_r>
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	d1f3      	bne.n	800e372 <__sfputs_r+0xa>
 800e38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e38c <_vfiprintf_r>:
 800e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e390:	460d      	mov	r5, r1
 800e392:	b09d      	sub	sp, #116	@ 0x74
 800e394:	4614      	mov	r4, r2
 800e396:	4698      	mov	r8, r3
 800e398:	4606      	mov	r6, r0
 800e39a:	b118      	cbz	r0, 800e3a4 <_vfiprintf_r+0x18>
 800e39c:	6a03      	ldr	r3, [r0, #32]
 800e39e:	b90b      	cbnz	r3, 800e3a4 <_vfiprintf_r+0x18>
 800e3a0:	f7fc fddc 	bl	800af5c <__sinit>
 800e3a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3a6:	07d9      	lsls	r1, r3, #31
 800e3a8:	d405      	bmi.n	800e3b6 <_vfiprintf_r+0x2a>
 800e3aa:	89ab      	ldrh	r3, [r5, #12]
 800e3ac:	059a      	lsls	r2, r3, #22
 800e3ae:	d402      	bmi.n	800e3b6 <_vfiprintf_r+0x2a>
 800e3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3b2:	f7fc feea 	bl	800b18a <__retarget_lock_acquire_recursive>
 800e3b6:	89ab      	ldrh	r3, [r5, #12]
 800e3b8:	071b      	lsls	r3, r3, #28
 800e3ba:	d501      	bpl.n	800e3c0 <_vfiprintf_r+0x34>
 800e3bc:	692b      	ldr	r3, [r5, #16]
 800e3be:	b99b      	cbnz	r3, 800e3e8 <_vfiprintf_r+0x5c>
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f000 f938 	bl	800e638 <__swsetup_r>
 800e3c8:	b170      	cbz	r0, 800e3e8 <_vfiprintf_r+0x5c>
 800e3ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3cc:	07dc      	lsls	r4, r3, #31
 800e3ce:	d504      	bpl.n	800e3da <_vfiprintf_r+0x4e>
 800e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d4:	b01d      	add	sp, #116	@ 0x74
 800e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3da:	89ab      	ldrh	r3, [r5, #12]
 800e3dc:	0598      	lsls	r0, r3, #22
 800e3de:	d4f7      	bmi.n	800e3d0 <_vfiprintf_r+0x44>
 800e3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3e2:	f7fc fed3 	bl	800b18c <__retarget_lock_release_recursive>
 800e3e6:	e7f3      	b.n	800e3d0 <_vfiprintf_r+0x44>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ee:	f04f 0901 	mov.w	r9, #1
 800e3f2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e5a8 <_vfiprintf_r+0x21c>
 800e3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3f8:	2320      	movs	r3, #32
 800e3fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3fe:	2330      	movs	r3, #48	@ 0x30
 800e400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e404:	4623      	mov	r3, r4
 800e406:	469a      	mov	sl, r3
 800e408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e40c:	b10a      	cbz	r2, 800e412 <_vfiprintf_r+0x86>
 800e40e:	2a25      	cmp	r2, #37	@ 0x25
 800e410:	d1f9      	bne.n	800e406 <_vfiprintf_r+0x7a>
 800e412:	ebba 0b04 	subs.w	fp, sl, r4
 800e416:	d00b      	beq.n	800e430 <_vfiprintf_r+0xa4>
 800e418:	465b      	mov	r3, fp
 800e41a:	4622      	mov	r2, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	4630      	mov	r0, r6
 800e420:	f7ff ffa2 	bl	800e368 <__sfputs_r>
 800e424:	3001      	adds	r0, #1
 800e426:	f000 80a7 	beq.w	800e578 <_vfiprintf_r+0x1ec>
 800e42a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e42c:	445a      	add	r2, fp
 800e42e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e430:	f89a 3000 	ldrb.w	r3, [sl]
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 809f 	beq.w	800e578 <_vfiprintf_r+0x1ec>
 800e43a:	2300      	movs	r3, #0
 800e43c:	f04f 32ff 	mov.w	r2, #4294967295
 800e440:	f10a 0a01 	add.w	sl, sl, #1
 800e444:	9304      	str	r3, [sp, #16]
 800e446:	9307      	str	r3, [sp, #28]
 800e448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e44c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e452:	4654      	mov	r4, sl
 800e454:	2205      	movs	r2, #5
 800e456:	4854      	ldr	r0, [pc, #336]	@ (800e5a8 <_vfiprintf_r+0x21c>)
 800e458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e45c:	f7fc fe97 	bl	800b18e <memchr>
 800e460:	9a04      	ldr	r2, [sp, #16]
 800e462:	b9d8      	cbnz	r0, 800e49c <_vfiprintf_r+0x110>
 800e464:	06d1      	lsls	r1, r2, #27
 800e466:	bf44      	itt	mi
 800e468:	2320      	movmi	r3, #32
 800e46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e46e:	0713      	lsls	r3, r2, #28
 800e470:	bf44      	itt	mi
 800e472:	232b      	movmi	r3, #43	@ 0x2b
 800e474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e478:	f89a 3000 	ldrb.w	r3, [sl]
 800e47c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e47e:	d015      	beq.n	800e4ac <_vfiprintf_r+0x120>
 800e480:	9a07      	ldr	r2, [sp, #28]
 800e482:	4654      	mov	r4, sl
 800e484:	2000      	movs	r0, #0
 800e486:	f04f 0c0a 	mov.w	ip, #10
 800e48a:	4621      	mov	r1, r4
 800e48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e490:	3b30      	subs	r3, #48	@ 0x30
 800e492:	2b09      	cmp	r3, #9
 800e494:	d94b      	bls.n	800e52e <_vfiprintf_r+0x1a2>
 800e496:	b1b0      	cbz	r0, 800e4c6 <_vfiprintf_r+0x13a>
 800e498:	9207      	str	r2, [sp, #28]
 800e49a:	e014      	b.n	800e4c6 <_vfiprintf_r+0x13a>
 800e49c:	eba0 0308 	sub.w	r3, r0, r8
 800e4a0:	46a2      	mov	sl, r4
 800e4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	9304      	str	r3, [sp, #16]
 800e4aa:	e7d2      	b.n	800e452 <_vfiprintf_r+0xc6>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	1d19      	adds	r1, r3, #4
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	9103      	str	r1, [sp, #12]
 800e4b6:	bfbb      	ittet	lt
 800e4b8:	425b      	neglt	r3, r3
 800e4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e4be:	9307      	strge	r3, [sp, #28]
 800e4c0:	9307      	strlt	r3, [sp, #28]
 800e4c2:	bfb8      	it	lt
 800e4c4:	9204      	strlt	r2, [sp, #16]
 800e4c6:	7823      	ldrb	r3, [r4, #0]
 800e4c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4ca:	d10a      	bne.n	800e4e2 <_vfiprintf_r+0x156>
 800e4cc:	7863      	ldrb	r3, [r4, #1]
 800e4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4d0:	d132      	bne.n	800e538 <_vfiprintf_r+0x1ac>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	3402      	adds	r4, #2
 800e4d6:	1d1a      	adds	r2, r3, #4
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4de:	9203      	str	r2, [sp, #12]
 800e4e0:	9305      	str	r3, [sp, #20]
 800e4e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5b8 <_vfiprintf_r+0x22c>
 800e4e6:	2203      	movs	r2, #3
 800e4e8:	7821      	ldrb	r1, [r4, #0]
 800e4ea:	4650      	mov	r0, sl
 800e4ec:	f7fc fe4f 	bl	800b18e <memchr>
 800e4f0:	b138      	cbz	r0, 800e502 <_vfiprintf_r+0x176>
 800e4f2:	eba0 000a 	sub.w	r0, r0, sl
 800e4f6:	2240      	movs	r2, #64	@ 0x40
 800e4f8:	9b04      	ldr	r3, [sp, #16]
 800e4fa:	3401      	adds	r4, #1
 800e4fc:	4082      	lsls	r2, r0
 800e4fe:	4313      	orrs	r3, r2
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e506:	2206      	movs	r2, #6
 800e508:	4828      	ldr	r0, [pc, #160]	@ (800e5ac <_vfiprintf_r+0x220>)
 800e50a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e50e:	f7fc fe3e 	bl	800b18e <memchr>
 800e512:	2800      	cmp	r0, #0
 800e514:	d03f      	beq.n	800e596 <_vfiprintf_r+0x20a>
 800e516:	4b26      	ldr	r3, [pc, #152]	@ (800e5b0 <_vfiprintf_r+0x224>)
 800e518:	bb1b      	cbnz	r3, 800e562 <_vfiprintf_r+0x1d6>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	3307      	adds	r3, #7
 800e51e:	f023 0307 	bic.w	r3, r3, #7
 800e522:	3308      	adds	r3, #8
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e528:	443b      	add	r3, r7
 800e52a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e52c:	e76a      	b.n	800e404 <_vfiprintf_r+0x78>
 800e52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e532:	460c      	mov	r4, r1
 800e534:	2001      	movs	r0, #1
 800e536:	e7a8      	b.n	800e48a <_vfiprintf_r+0xfe>
 800e538:	2300      	movs	r3, #0
 800e53a:	3401      	adds	r4, #1
 800e53c:	f04f 0c0a 	mov.w	ip, #10
 800e540:	4619      	mov	r1, r3
 800e542:	9305      	str	r3, [sp, #20]
 800e544:	4620      	mov	r0, r4
 800e546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e54a:	3a30      	subs	r2, #48	@ 0x30
 800e54c:	2a09      	cmp	r2, #9
 800e54e:	d903      	bls.n	800e558 <_vfiprintf_r+0x1cc>
 800e550:	2b00      	cmp	r3, #0
 800e552:	d0c6      	beq.n	800e4e2 <_vfiprintf_r+0x156>
 800e554:	9105      	str	r1, [sp, #20]
 800e556:	e7c4      	b.n	800e4e2 <_vfiprintf_r+0x156>
 800e558:	fb0c 2101 	mla	r1, ip, r1, r2
 800e55c:	4604      	mov	r4, r0
 800e55e:	2301      	movs	r3, #1
 800e560:	e7f0      	b.n	800e544 <_vfiprintf_r+0x1b8>
 800e562:	ab03      	add	r3, sp, #12
 800e564:	462a      	mov	r2, r5
 800e566:	a904      	add	r1, sp, #16
 800e568:	4630      	mov	r0, r6
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4b11      	ldr	r3, [pc, #68]	@ (800e5b4 <_vfiprintf_r+0x228>)
 800e56e:	f7fb fe9b 	bl	800a2a8 <_printf_float>
 800e572:	4607      	mov	r7, r0
 800e574:	1c78      	adds	r0, r7, #1
 800e576:	d1d6      	bne.n	800e526 <_vfiprintf_r+0x19a>
 800e578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e57a:	07d9      	lsls	r1, r3, #31
 800e57c:	d405      	bmi.n	800e58a <_vfiprintf_r+0x1fe>
 800e57e:	89ab      	ldrh	r3, [r5, #12]
 800e580:	059a      	lsls	r2, r3, #22
 800e582:	d402      	bmi.n	800e58a <_vfiprintf_r+0x1fe>
 800e584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e586:	f7fc fe01 	bl	800b18c <__retarget_lock_release_recursive>
 800e58a:	89ab      	ldrh	r3, [r5, #12]
 800e58c:	065b      	lsls	r3, r3, #25
 800e58e:	f53f af1f 	bmi.w	800e3d0 <_vfiprintf_r+0x44>
 800e592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e594:	e71e      	b.n	800e3d4 <_vfiprintf_r+0x48>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	462a      	mov	r2, r5
 800e59a:	a904      	add	r1, sp, #16
 800e59c:	4630      	mov	r0, r6
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	4b04      	ldr	r3, [pc, #16]	@ (800e5b4 <_vfiprintf_r+0x228>)
 800e5a2:	f7fc f91d 	bl	800a7e0 <_printf_i>
 800e5a6:	e7e4      	b.n	800e572 <_vfiprintf_r+0x1e6>
 800e5a8:	0800ef49 	.word	0x0800ef49
 800e5ac:	0800ef53 	.word	0x0800ef53
 800e5b0:	0800a2a9 	.word	0x0800a2a9
 800e5b4:	0800e369 	.word	0x0800e369
 800e5b8:	0800ef4f 	.word	0x0800ef4f

0800e5bc <__swbuf_r>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	460e      	mov	r6, r1
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b118      	cbz	r0, 800e5ce <__swbuf_r+0x12>
 800e5c6:	6a03      	ldr	r3, [r0, #32]
 800e5c8:	b90b      	cbnz	r3, 800e5ce <__swbuf_r+0x12>
 800e5ca:	f7fc fcc7 	bl	800af5c <__sinit>
 800e5ce:	69a3      	ldr	r3, [r4, #24]
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	89a3      	ldrh	r3, [r4, #12]
 800e5d4:	071a      	lsls	r2, r3, #28
 800e5d6:	d501      	bpl.n	800e5dc <__swbuf_r+0x20>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	b943      	cbnz	r3, 800e5ee <__swbuf_r+0x32>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f000 f82a 	bl	800e638 <__swsetup_r>
 800e5e4:	b118      	cbz	r0, 800e5ee <__swbuf_r+0x32>
 800e5e6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	b2f6      	uxtb	r6, r6
 800e5f2:	6922      	ldr	r2, [r4, #16]
 800e5f4:	4637      	mov	r7, r6
 800e5f6:	1a98      	subs	r0, r3, r2
 800e5f8:	6963      	ldr	r3, [r4, #20]
 800e5fa:	4283      	cmp	r3, r0
 800e5fc:	dc05      	bgt.n	800e60a <__swbuf_r+0x4e>
 800e5fe:	4621      	mov	r1, r4
 800e600:	4628      	mov	r0, r5
 800e602:	f7ff fa57 	bl	800dab4 <_fflush_r>
 800e606:	2800      	cmp	r0, #0
 800e608:	d1ed      	bne.n	800e5e6 <__swbuf_r+0x2a>
 800e60a:	68a3      	ldr	r3, [r4, #8]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	60a3      	str	r3, [r4, #8]
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	1c5a      	adds	r2, r3, #1
 800e614:	6022      	str	r2, [r4, #0]
 800e616:	701e      	strb	r6, [r3, #0]
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	6962      	ldr	r2, [r4, #20]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d004      	beq.n	800e62a <__swbuf_r+0x6e>
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	07db      	lsls	r3, r3, #31
 800e624:	d5e1      	bpl.n	800e5ea <__swbuf_r+0x2e>
 800e626:	2e0a      	cmp	r6, #10
 800e628:	d1df      	bne.n	800e5ea <__swbuf_r+0x2e>
 800e62a:	4621      	mov	r1, r4
 800e62c:	4628      	mov	r0, r5
 800e62e:	f7ff fa41 	bl	800dab4 <_fflush_r>
 800e632:	2800      	cmp	r0, #0
 800e634:	d0d9      	beq.n	800e5ea <__swbuf_r+0x2e>
 800e636:	e7d6      	b.n	800e5e6 <__swbuf_r+0x2a>

0800e638 <__swsetup_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4b29      	ldr	r3, [pc, #164]	@ (800e6e0 <__swsetup_r+0xa8>)
 800e63c:	4605      	mov	r5, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	b118      	cbz	r0, 800e64c <__swsetup_r+0x14>
 800e644:	6a03      	ldr	r3, [r0, #32]
 800e646:	b90b      	cbnz	r3, 800e64c <__swsetup_r+0x14>
 800e648:	f7fc fc88 	bl	800af5c <__sinit>
 800e64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e650:	0719      	lsls	r1, r3, #28
 800e652:	d422      	bmi.n	800e69a <__swsetup_r+0x62>
 800e654:	06da      	lsls	r2, r3, #27
 800e656:	d407      	bmi.n	800e668 <__swsetup_r+0x30>
 800e658:	2209      	movs	r2, #9
 800e65a:	602a      	str	r2, [r5, #0]
 800e65c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e660:	f04f 30ff 	mov.w	r0, #4294967295
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	e033      	b.n	800e6d0 <__swsetup_r+0x98>
 800e668:	0758      	lsls	r0, r3, #29
 800e66a:	d512      	bpl.n	800e692 <__swsetup_r+0x5a>
 800e66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e66e:	b141      	cbz	r1, 800e682 <__swsetup_r+0x4a>
 800e670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e674:	4299      	cmp	r1, r3
 800e676:	d002      	beq.n	800e67e <__swsetup_r+0x46>
 800e678:	4628      	mov	r0, r5
 800e67a:	f7fd fbfd 	bl	800be78 <_free_r>
 800e67e:	2300      	movs	r3, #0
 800e680:	6363      	str	r3, [r4, #52]	@ 0x34
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	2300      	movs	r3, #0
 800e68c:	6063      	str	r3, [r4, #4]
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f043 0308 	orr.w	r3, r3, #8
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	6923      	ldr	r3, [r4, #16]
 800e69c:	b94b      	cbnz	r3, 800e6b2 <__swsetup_r+0x7a>
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6a8:	d003      	beq.n	800e6b2 <__swsetup_r+0x7a>
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f000 f882 	bl	800e7b6 <__smakebuf_r>
 800e6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b6:	f013 0201 	ands.w	r2, r3, #1
 800e6ba:	d00a      	beq.n	800e6d2 <__swsetup_r+0x9a>
 800e6bc:	2200      	movs	r2, #0
 800e6be:	60a2      	str	r2, [r4, #8]
 800e6c0:	6962      	ldr	r2, [r4, #20]
 800e6c2:	4252      	negs	r2, r2
 800e6c4:	61a2      	str	r2, [r4, #24]
 800e6c6:	6922      	ldr	r2, [r4, #16]
 800e6c8:	b942      	cbnz	r2, 800e6dc <__swsetup_r+0xa4>
 800e6ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6ce:	d1c5      	bne.n	800e65c <__swsetup_r+0x24>
 800e6d0:	bd38      	pop	{r3, r4, r5, pc}
 800e6d2:	0799      	lsls	r1, r3, #30
 800e6d4:	bf58      	it	pl
 800e6d6:	6962      	ldrpl	r2, [r4, #20]
 800e6d8:	60a2      	str	r2, [r4, #8]
 800e6da:	e7f4      	b.n	800e6c6 <__swsetup_r+0x8e>
 800e6dc:	2000      	movs	r0, #0
 800e6de:	e7f7      	b.n	800e6d0 <__swsetup_r+0x98>
 800e6e0:	20000028 	.word	0x20000028

0800e6e4 <_raise_r>:
 800e6e4:	291f      	cmp	r1, #31
 800e6e6:	b538      	push	{r3, r4, r5, lr}
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	d904      	bls.n	800e6f8 <_raise_r+0x14>
 800e6ee:	2316      	movs	r3, #22
 800e6f0:	6003      	str	r3, [r0, #0]
 800e6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6fa:	b112      	cbz	r2, 800e702 <_raise_r+0x1e>
 800e6fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e700:	b94b      	cbnz	r3, 800e716 <_raise_r+0x32>
 800e702:	4628      	mov	r0, r5
 800e704:	f000 f830 	bl	800e768 <_getpid_r>
 800e708:	4622      	mov	r2, r4
 800e70a:	4601      	mov	r1, r0
 800e70c:	4628      	mov	r0, r5
 800e70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e712:	f000 b817 	b.w	800e744 <_kill_r>
 800e716:	2b01      	cmp	r3, #1
 800e718:	d00a      	beq.n	800e730 <_raise_r+0x4c>
 800e71a:	1c59      	adds	r1, r3, #1
 800e71c:	d103      	bne.n	800e726 <_raise_r+0x42>
 800e71e:	2316      	movs	r3, #22
 800e720:	6003      	str	r3, [r0, #0]
 800e722:	2001      	movs	r0, #1
 800e724:	e7e7      	b.n	800e6f6 <_raise_r+0x12>
 800e726:	2100      	movs	r1, #0
 800e728:	4620      	mov	r0, r4
 800e72a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e72e:	4798      	blx	r3
 800e730:	2000      	movs	r0, #0
 800e732:	e7e0      	b.n	800e6f6 <_raise_r+0x12>

0800e734 <raise>:
 800e734:	4b02      	ldr	r3, [pc, #8]	@ (800e740 <raise+0xc>)
 800e736:	4601      	mov	r1, r0
 800e738:	6818      	ldr	r0, [r3, #0]
 800e73a:	f7ff bfd3 	b.w	800e6e4 <_raise_r>
 800e73e:	bf00      	nop
 800e740:	20000028 	.word	0x20000028

0800e744 <_kill_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	2300      	movs	r3, #0
 800e748:	4d06      	ldr	r5, [pc, #24]	@ (800e764 <_kill_r+0x20>)
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	4611      	mov	r1, r2
 800e750:	602b      	str	r3, [r5, #0]
 800e752:	f7f3 ffab 	bl	80026ac <_kill>
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	d102      	bne.n	800e760 <_kill_r+0x1c>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	b103      	cbz	r3, 800e760 <_kill_r+0x1c>
 800e75e:	6023      	str	r3, [r4, #0]
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	bf00      	nop
 800e764:	2003b398 	.word	0x2003b398

0800e768 <_getpid_r>:
 800e768:	f7f3 bf98 	b.w	800269c <_getpid>

0800e76c <__swhatbuf_r>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	b096      	sub	sp, #88	@ 0x58
 800e776:	4615      	mov	r5, r2
 800e778:	2900      	cmp	r1, #0
 800e77a:	461e      	mov	r6, r3
 800e77c:	da0c      	bge.n	800e798 <__swhatbuf_r+0x2c>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	2100      	movs	r1, #0
 800e782:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e786:	bf14      	ite	ne
 800e788:	2340      	movne	r3, #64	@ 0x40
 800e78a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e78e:	2000      	movs	r0, #0
 800e790:	6031      	str	r1, [r6, #0]
 800e792:	602b      	str	r3, [r5, #0]
 800e794:	b016      	add	sp, #88	@ 0x58
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	466a      	mov	r2, sp
 800e79a:	f000 f849 	bl	800e830 <_fstat_r>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	dbed      	blt.n	800e77e <__swhatbuf_r+0x12>
 800e7a2:	9901      	ldr	r1, [sp, #4]
 800e7a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7ac:	4259      	negs	r1, r3
 800e7ae:	4159      	adcs	r1, r3
 800e7b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7b4:	e7eb      	b.n	800e78e <__swhatbuf_r+0x22>

0800e7b6 <__smakebuf_r>:
 800e7b6:	898b      	ldrh	r3, [r1, #12]
 800e7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7ba:	079d      	lsls	r5, r3, #30
 800e7bc:	4606      	mov	r6, r0
 800e7be:	460c      	mov	r4, r1
 800e7c0:	d507      	bpl.n	800e7d2 <__smakebuf_r+0x1c>
 800e7c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	6123      	str	r3, [r4, #16]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	6163      	str	r3, [r4, #20]
 800e7ce:	b003      	add	sp, #12
 800e7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d2:	ab01      	add	r3, sp, #4
 800e7d4:	466a      	mov	r2, sp
 800e7d6:	f7ff ffc9 	bl	800e76c <__swhatbuf_r>
 800e7da:	9f00      	ldr	r7, [sp, #0]
 800e7dc:	4605      	mov	r5, r0
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7fd fbbd 	bl	800bf60 <_malloc_r>
 800e7e6:	b948      	cbnz	r0, 800e7fc <__smakebuf_r+0x46>
 800e7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ec:	059a      	lsls	r2, r3, #22
 800e7ee:	d4ee      	bmi.n	800e7ce <__smakebuf_r+0x18>
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	f043 0302 	orr.w	r3, r3, #2
 800e7f8:	81a3      	strh	r3, [r4, #12]
 800e7fa:	e7e2      	b.n	800e7c2 <__smakebuf_r+0xc>
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	6020      	str	r0, [r4, #0]
 800e800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e804:	81a3      	strh	r3, [r4, #12]
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e80c:	b15b      	cbz	r3, 800e826 <__smakebuf_r+0x70>
 800e80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e812:	4630      	mov	r0, r6
 800e814:	f000 f81e 	bl	800e854 <_isatty_r>
 800e818:	b128      	cbz	r0, 800e826 <__smakebuf_r+0x70>
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	f023 0303 	bic.w	r3, r3, #3
 800e820:	f043 0301 	orr.w	r3, r3, #1
 800e824:	81a3      	strh	r3, [r4, #12]
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	431d      	orrs	r5, r3
 800e82a:	81a5      	strh	r5, [r4, #12]
 800e82c:	e7cf      	b.n	800e7ce <__smakebuf_r+0x18>
	...

0800e830 <_fstat_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	2300      	movs	r3, #0
 800e834:	4d06      	ldr	r5, [pc, #24]	@ (800e850 <_fstat_r+0x20>)
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	4611      	mov	r1, r2
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	f7f3 ff95 	bl	800276c <_fstat>
 800e842:	1c43      	adds	r3, r0, #1
 800e844:	d102      	bne.n	800e84c <_fstat_r+0x1c>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	b103      	cbz	r3, 800e84c <_fstat_r+0x1c>
 800e84a:	6023      	str	r3, [r4, #0]
 800e84c:	bd38      	pop	{r3, r4, r5, pc}
 800e84e:	bf00      	nop
 800e850:	2003b398 	.word	0x2003b398

0800e854 <_isatty_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	2300      	movs	r3, #0
 800e858:	4d05      	ldr	r5, [pc, #20]	@ (800e870 <_isatty_r+0x1c>)
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f7f3 ff94 	bl	800278c <_isatty>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_isatty_r+0x1a>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_isatty_r+0x1a>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	2003b398 	.word	0x2003b398

0800e874 <_init>:
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e876:	bf00      	nop
 800e878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87a:	bc08      	pop	{r3}
 800e87c:	469e      	mov	lr, r3
 800e87e:	4770      	bx	lr

0800e880 <_fini>:
 800e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e882:	bf00      	nop
 800e884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e886:	bc08      	pop	{r3}
 800e888:	469e      	mov	lr, r3
 800e88a:	4770      	bx	lr
